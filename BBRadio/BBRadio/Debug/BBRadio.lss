
BBRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000077f8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20400000  004077f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000142c  20400020  00407818  00020020  2**2
                  ALLOC
  3 .heap         00000204  2040144c  00408c44  00020020  2**0
                  ALLOC
  4 .stack        00000400  20401650  00408e48  00020020  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019fd8  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003338  00000000  00000000  0003a07f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000de29  00000000  00000000  0003d3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001870  00000000  00000000  0004b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000016d8  00000000  00000000  0004ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036cbc  00000000  00000000  0004e128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000188ef  00000000  00000000  00084de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001021eb  00000000  00000000  0009d6d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006700  00000000  00000000  0019f8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 1a 40 20 ed 0a 40 00 71 0b 40 00 71 0b 40 00     P.@ ..@.q.@.q.@.
  400010:	71 0b 40 00 71 0b 40 00 71 0b 40 00 00 00 00 00     q.@.q.@.q.@.....
	...
  40002c:	71 0b 40 00 71 0b 40 00 00 00 00 00 71 0b 40 00     q.@.q.@.....q.@.
  40003c:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  40004c:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  40005c:	71 0b 40 00 71 0b 40 00 00 00 00 00 71 0b 40 00     q.@.q.@.....q.@.
  40006c:	55 39 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     U9@.q.@.q.@.q.@.
  40007c:	71 0b 40 00 65 39 40 00 71 0b 40 00 71 0b 40 00     q.@.e9@.q.@.q.@.
  40008c:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  40009c:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  4000ac:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  4000bc:	71 0b 40 00 71 0b 40 00 71 0b 40 00 b5 65 40 00     q.@.q.@.q.@..e@.
	...
  4000e0:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  4000f0:	71 0b 40 00 71 0b 40 00 5d 55 40 00 71 0b 40 00     q.@.q.@.]U@.q.@.
  400100:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  400110:	71 0b 40 00 00 00 00 00 00 00 00 00 00 00 00 00     q.@.............
  400120:	71 0b 40 00 71 0b 40 00 a9 73 40 00 71 0b 40 00     q.@.q.@..s@.q.@.
  400130:	71 0b 40 00 71 0b 40 00 71 0b 40 00 71 0b 40 00     q.@.q.@.q.@.q.@.
  400140:	71 0b 40 00 71 0b 40 00 00 00 00 00 00 00 00 00     q.@.q.@.........
  400150:	71 0b 40 00                                         q.@.

00400154 <__do_global_dtors_aux>:
  400154:	b510      	push	{r4, lr}
  400156:	4c05      	ldr	r4, [pc, #20]	; (40016c <__do_global_dtors_aux+0x18>)
  400158:	7823      	ldrb	r3, [r4, #0]
  40015a:	b933      	cbnz	r3, 40016a <__do_global_dtors_aux+0x16>
  40015c:	4b04      	ldr	r3, [pc, #16]	; (400170 <__do_global_dtors_aux+0x1c>)
  40015e:	b113      	cbz	r3, 400166 <__do_global_dtors_aux+0x12>
  400160:	4804      	ldr	r0, [pc, #16]	; (400174 <__do_global_dtors_aux+0x20>)
  400162:	f3af 8000 	nop.w
  400166:	2301      	movs	r3, #1
  400168:	7023      	strb	r3, [r4, #0]
  40016a:	bd10      	pop	{r4, pc}
  40016c:	20400020 	.word	0x20400020
  400170:	00000000 	.word	0x00000000
  400174:	004077f8 	.word	0x004077f8

00400178 <frame_dummy>:
  400178:	4b0c      	ldr	r3, [pc, #48]	; (4001ac <frame_dummy+0x34>)
  40017a:	b143      	cbz	r3, 40018e <frame_dummy+0x16>
  40017c:	480c      	ldr	r0, [pc, #48]	; (4001b0 <frame_dummy+0x38>)
  40017e:	490d      	ldr	r1, [pc, #52]	; (4001b4 <frame_dummy+0x3c>)
  400180:	b510      	push	{r4, lr}
  400182:	f3af 8000 	nop.w
  400186:	480c      	ldr	r0, [pc, #48]	; (4001b8 <frame_dummy+0x40>)
  400188:	6803      	ldr	r3, [r0, #0]
  40018a:	b923      	cbnz	r3, 400196 <frame_dummy+0x1e>
  40018c:	bd10      	pop	{r4, pc}
  40018e:	480a      	ldr	r0, [pc, #40]	; (4001b8 <frame_dummy+0x40>)
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	b933      	cbnz	r3, 4001a2 <frame_dummy+0x2a>
  400194:	4770      	bx	lr
  400196:	4b09      	ldr	r3, [pc, #36]	; (4001bc <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f7      	beq.n	40018c <frame_dummy+0x14>
  40019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a0:	4718      	bx	r3
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <frame_dummy+0x44>)
  4001a4:	2b00      	cmp	r3, #0
  4001a6:	d0f5      	beq.n	400194 <frame_dummy+0x1c>
  4001a8:	4718      	bx	r3
  4001aa:	bf00      	nop
  4001ac:	00000000 	.word	0x00000000
  4001b0:	004077f8 	.word	0x004077f8
  4001b4:	20400024 	.word	0x20400024
  4001b8:	004077f8 	.word	0x004077f8
  4001bc:	00000000 	.word	0x00000000

004001c0 <AT86_Init>:
 * @pre All peripheral devices must be initialized before this function runs.
 *
 * @return     returns at86_return_codes enum values
 */
uint8_t AT86_Init(SpiDevice *spi_dev, IRQDevice *irq_dev, uint8_t atDev)
{
  4001c0:	b480      	push	{r7}
  4001c2:	b087      	sub	sp, #28
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	60f8      	str	r0, [r7, #12]
  4001c8:	60b9      	str	r1, [r7, #8]
  4001ca:	4613      	mov	r3, r2
  4001cc:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *at = &Instance[atDev];
  4001ce:	79fa      	ldrb	r2, [r7, #7]
  4001d0:	4613      	mov	r3, r2
  4001d2:	005b      	lsls	r3, r3, #1
  4001d4:	4413      	add	r3, r2
  4001d6:	011b      	lsls	r3, r3, #4
  4001d8:	4a41      	ldr	r2, [pc, #260]	; (4002e0 <AT86_Init+0x120>)
  4001da:	4413      	add	r3, r2
  4001dc:	613b      	str	r3, [r7, #16]
	
	if (spi_dev == NULL || irq_dev == NULL)
  4001de:	68fb      	ldr	r3, [r7, #12]
  4001e0:	2b00      	cmp	r3, #0
  4001e2:	d002      	beq.n	4001ea <AT86_Init+0x2a>
  4001e4:	68bb      	ldr	r3, [r7, #8]
  4001e6:	2b00      	cmp	r3, #0
  4001e8:	d101      	bne.n	4001ee <AT86_Init+0x2e>
	{
		return AT86_ERROR;
  4001ea:	2302      	movs	r3, #2
  4001ec:	e071      	b.n	4002d2 <AT86_Init+0x112>
	}

	if (currentInstances == MAX_AT86_INSTANCES)
  4001ee:	4b3d      	ldr	r3, [pc, #244]	; (4002e4 <AT86_Init+0x124>)
  4001f0:	781b      	ldrb	r3, [r3, #0]
  4001f2:	2b03      	cmp	r3, #3
  4001f4:	d101      	bne.n	4001fa <AT86_Init+0x3a>
	{
		return AT86_ERROR;
  4001f6:	2302      	movs	r3, #2
  4001f8:	e06b      	b.n	4002d2 <AT86_Init+0x112>
	}

	if (at->initialized == 1)
  4001fa:	693b      	ldr	r3, [r7, #16]
  4001fc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
  400200:	2b01      	cmp	r3, #1
  400202:	d101      	bne.n	400208 <AT86_Init+0x48>
	{
		return AT86_ERROR;
  400204:	2302      	movs	r3, #2
  400206:	e064      	b.n	4002d2 <AT86_Init+0x112>
	}

	// Each AT86 must have its own SPI/IRQ handlers, no doubling up.
	if (currentInstances != 0)
  400208:	4b36      	ldr	r3, [pc, #216]	; (4002e4 <AT86_Init+0x124>)
  40020a:	781b      	ldrb	r3, [r3, #0]
  40020c:	2b00      	cmp	r3, #0
  40020e:	d025      	beq.n	40025c <AT86_Init+0x9c>
	{
		uint8_t i;
		for (i = 0; i < currentInstances; i++)
  400210:	2300      	movs	r3, #0
  400212:	75fb      	strb	r3, [r7, #23]
  400214:	e01d      	b.n	400252 <AT86_Init+0x92>
		{
			if ((IRQDevice *) &(Instance[i].irqDev) == irq_dev)
  400216:	7dfa      	ldrb	r2, [r7, #23]
  400218:	4613      	mov	r3, r2
  40021a:	005b      	lsls	r3, r3, #1
  40021c:	4413      	add	r3, r2
  40021e:	011b      	lsls	r3, r3, #4
  400220:	3328      	adds	r3, #40	; 0x28
  400222:	4a2f      	ldr	r2, [pc, #188]	; (4002e0 <AT86_Init+0x120>)
  400224:	441a      	add	r2, r3
  400226:	68bb      	ldr	r3, [r7, #8]
  400228:	429a      	cmp	r2, r3
  40022a:	d101      	bne.n	400230 <AT86_Init+0x70>
			{
				return AT86_ERROR;
  40022c:	2302      	movs	r3, #2
  40022e:	e050      	b.n	4002d2 <AT86_Init+0x112>
			}

			if ((SpiDevice *) &(Instance[i].spiDev) == spi_dev)
  400230:	7dfa      	ldrb	r2, [r7, #23]
  400232:	4613      	mov	r3, r2
  400234:	005b      	lsls	r3, r3, #1
  400236:	4413      	add	r3, r2
  400238:	011b      	lsls	r3, r3, #4
  40023a:	3320      	adds	r3, #32
  40023c:	4a28      	ldr	r2, [pc, #160]	; (4002e0 <AT86_Init+0x120>)
  40023e:	4413      	add	r3, r2
  400240:	1d1a      	adds	r2, r3, #4
  400242:	68fb      	ldr	r3, [r7, #12]
  400244:	429a      	cmp	r2, r3
  400246:	d101      	bne.n	40024c <AT86_Init+0x8c>
			{
				return AT86_ERROR;
  400248:	2302      	movs	r3, #2
  40024a:	e042      	b.n	4002d2 <AT86_Init+0x112>
		for (i = 0; i < currentInstances; i++)
  40024c:	7dfb      	ldrb	r3, [r7, #23]
  40024e:	3301      	adds	r3, #1
  400250:	75fb      	strb	r3, [r7, #23]
  400252:	4b24      	ldr	r3, [pc, #144]	; (4002e4 <AT86_Init+0x124>)
  400254:	781b      	ldrb	r3, [r3, #0]
  400256:	7dfa      	ldrb	r2, [r7, #23]
  400258:	429a      	cmp	r2, r3
  40025a:	d3dc      	bcc.n	400216 <AT86_Init+0x56>
			}
		}
	}
	
	currentInstances++;
  40025c:	4b21      	ldr	r3, [pc, #132]	; (4002e4 <AT86_Init+0x124>)
  40025e:	781b      	ldrb	r3, [r3, #0]
  400260:	3301      	adds	r3, #1
  400262:	b2da      	uxtb	r2, r3
  400264:	4b1f      	ldr	r3, [pc, #124]	; (4002e4 <AT86_Init+0x124>)
  400266:	701a      	strb	r2, [r3, #0]

	at->baseband_2400.baseband_state = AFE_STATE_POWER_OFF;
  400268:	693b      	ldr	r3, [r7, #16]
  40026a:	2200      	movs	r2, #0
  40026c:	741a      	strb	r2, [r3, #16]
	at->baseband_900.baseband_state = AFE_STATE_POWER_OFF;
  40026e:	693b      	ldr	r3, [r7, #16]
  400270:	2200      	movs	r2, #0
  400272:	701a      	strb	r2, [r3, #0]
	at->at86_state = AT86_STATE_INIT;
  400274:	693b      	ldr	r3, [r7, #16]
  400276:	2200      	movs	r2, #0
  400278:	f883 2020 	strb.w	r2, [r3, #32]

	at->baseband_900.lastIRQ = 0;
  40027c:	693b      	ldr	r3, [r7, #16]
  40027e:	2200      	movs	r2, #0
  400280:	809a      	strh	r2, [r3, #4]
	at->baseband_2400.lastIRQ = 0;
  400282:	693b      	ldr	r3, [r7, #16]
  400284:	2200      	movs	r2, #0
  400286:	829a      	strh	r2, [r3, #20]

	at->baseband_2400.CSMA_EN = 0;
  400288:	693b      	ldr	r3, [r7, #16]
  40028a:	2200      	movs	r2, #0
  40028c:	759a      	strb	r2, [r3, #22]
	at->baseband_900.CSMA_EN = 0;
  40028e:	693b      	ldr	r3, [r7, #16]
  400290:	2200      	movs	r2, #0
  400292:	719a      	strb	r2, [r3, #6]
	
	at->numInterrupts = 0;
  400294:	693b      	ldr	r3, [r7, #16]
  400296:	2200      	movs	r2, #0
  400298:	859a      	strh	r2, [r3, #44]	; 0x2c
	
	at->baseband_2400.channel_power_assesment = 1; // Special baseband state.
  40029a:	693b      	ldr	r3, [r7, #16]
  40029c:	2201      	movs	r2, #1
  40029e:	75da      	strb	r2, [r3, #23]
	at->baseband_900.channel_power_assesment = 1; // Special baseband state.
  4002a0:	693b      	ldr	r3, [r7, #16]
  4002a2:	2201      	movs	r2, #1
  4002a4:	71da      	strb	r2, [r3, #7]

	at->baseband_900.parent = at;
  4002a6:	693b      	ldr	r3, [r7, #16]
  4002a8:	693a      	ldr	r2, [r7, #16]
  4002aa:	60da      	str	r2, [r3, #12]
	at->baseband_2400.parent = at;
  4002ac:	693b      	ldr	r3, [r7, #16]
  4002ae:	693a      	ldr	r2, [r7, #16]
  4002b0:	61da      	str	r2, [r3, #28]

	//We set the peripheral interface associated with the driver here
	irq_dev->deviceDriver = (void *) at;
  4002b2:	68bb      	ldr	r3, [r7, #8]
  4002b4:	693a      	ldr	r2, [r7, #16]
  4002b6:	605a      	str	r2, [r3, #4]
	spi_dev->deviceDriver = (void *) at;
  4002b8:	68fb      	ldr	r3, [r7, #12]
  4002ba:	693a      	ldr	r2, [r7, #16]
  4002bc:	605a      	str	r2, [r3, #4]
	
	//Set the devices here.
	at->irqDev = irq_dev;
  4002be:	693b      	ldr	r3, [r7, #16]
  4002c0:	68ba      	ldr	r2, [r7, #8]
  4002c2:	629a      	str	r2, [r3, #40]	; 0x28
	at->spiDev = spi_dev;
  4002c4:	693b      	ldr	r3, [r7, #16]
  4002c6:	68fa      	ldr	r2, [r7, #12]
  4002c8:	625a      	str	r2, [r3, #36]	; 0x24

	//This is most definitely wrong.
	irq_dev->callback = (void *)(AT86_IRQ_Handler);
  4002ca:	68bb      	ldr	r3, [r7, #8]
  4002cc:	4a06      	ldr	r2, [pc, #24]	; (4002e8 <AT86_Init+0x128>)
  4002ce:	609a      	str	r2, [r3, #8]
	
	//at->initialized = 1;

	return AT86_OK;  
  4002d0:	2300      	movs	r3, #0
}
  4002d2:	4618      	mov	r0, r3
  4002d4:	371c      	adds	r7, #28
  4002d6:	46bd      	mov	sp, r7
  4002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002dc:	4770      	bx	lr
  4002de:	bf00      	nop
  4002e0:	2040003c 	.word	0x2040003c
  4002e4:	204000cc 	.word	0x204000cc
  4002e8:	004009f9 	.word	0x004009f9

004002ec <AT86_Tick>:

uint8_t AT86_Tick(uint8_t atDev)
{
  4002ec:	b590      	push	{r4, r7, lr}
  4002ee:	b085      	sub	sp, #20
  4002f0:	af00      	add	r7, sp, #0
  4002f2:	4603      	mov	r3, r0
  4002f4:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *at = &Instance[atDev];
  4002f6:	79fa      	ldrb	r2, [r7, #7]
  4002f8:	4613      	mov	r3, r2
  4002fa:	005b      	lsls	r3, r3, #1
  4002fc:	4413      	add	r3, r2
  4002fe:	011b      	lsls	r3, r3, #4
  400300:	4a75      	ldr	r2, [pc, #468]	; (4004d8 <AT86_Tick+0x1ec>)
  400302:	4413      	add	r3, r2
  400304:	60fb      	str	r3, [r7, #12]
	
	if (!at->initialized)
  400306:	68fb      	ldr	r3, [r7, #12]
  400308:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
  40030c:	2b00      	cmp	r3, #0
  40030e:	d107      	bne.n	400320 <AT86_Tick+0x34>
	{
		AT86_FSM(atDev);
  400310:	79fb      	ldrb	r3, [r7, #7]
  400312:	4618      	mov	r0, r3
  400314:	4b71      	ldr	r3, [pc, #452]	; (4004dc <AT86_Tick+0x1f0>)
  400316:	4798      	blx	r3
		at->initialized = 1;
  400318:	68fb      	ldr	r3, [r7, #12]
  40031a:	2201      	movs	r2, #1
  40031c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
	
	if (at->at86_state != AT86_STATE_INIT)
  400320:	68fb      	ldr	r3, [r7, #12]
  400322:	f893 3020 	ldrb.w	r3, [r3, #32]
  400326:	2b00      	cmp	r3, #0
  400328:	d01c      	beq.n	400364 <AT86_Tick+0x78>
	{
		//RFn_STATE to check state.
		txBuf[0] = 0x01;
  40032a:	4b6d      	ldr	r3, [pc, #436]	; (4004e0 <AT86_Tick+0x1f4>)
  40032c:	2201      	movs	r2, #1
  40032e:	701a      	strb	r2, [r3, #0]
		txBuf[1] = 0x02;
  400330:	4b6b      	ldr	r3, [pc, #428]	; (4004e0 <AT86_Tick+0x1f4>)
  400332:	2202      	movs	r2, #2
  400334:	705a      	strb	r2, [r3, #1]
		//Just read from 0's for status.
		glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 10);
  400336:	68fb      	ldr	r3, [r7, #12]
  400338:	6a58      	ldr	r0, [r3, #36]	; 0x24
  40033a:	230a      	movs	r3, #10
  40033c:	4a69      	ldr	r2, [pc, #420]	; (4004e4 <AT86_Tick+0x1f8>)
  40033e:	4968      	ldr	r1, [pc, #416]	; (4004e0 <AT86_Tick+0x1f4>)
  400340:	4c69      	ldr	r4, [pc, #420]	; (4004e8 <AT86_Tick+0x1fc>)
  400342:	47a0      	blx	r4
		
		txBuf[0] = 0x02;
  400344:	4b66      	ldr	r3, [pc, #408]	; (4004e0 <AT86_Tick+0x1f4>)
  400346:	2202      	movs	r2, #2
  400348:	701a      	strb	r2, [r3, #0]
		txBuf[1] = 0x02;
  40034a:	4b65      	ldr	r3, [pc, #404]	; (4004e0 <AT86_Tick+0x1f4>)
  40034c:	2202      	movs	r2, #2
  40034e:	705a      	strb	r2, [r3, #1]
		txBuf[2] = 0x00;
  400350:	4b63      	ldr	r3, [pc, #396]	; (4004e0 <AT86_Tick+0x1f4>)
  400352:	2200      	movs	r2, #0
  400354:	709a      	strb	r2, [r3, #2]
		//Just read from 0's for status.
		glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 10);
  400356:	68fb      	ldr	r3, [r7, #12]
  400358:	6a58      	ldr	r0, [r3, #36]	; 0x24
  40035a:	230a      	movs	r3, #10
  40035c:	4a61      	ldr	r2, [pc, #388]	; (4004e4 <AT86_Tick+0x1f8>)
  40035e:	4960      	ldr	r1, [pc, #384]	; (4004e0 <AT86_Tick+0x1f4>)
  400360:	4c61      	ldr	r4, [pc, #388]	; (4004e8 <AT86_Tick+0x1fc>)
  400362:	47a0      	blx	r4
	}
	
	if (at->numInterrupts > 0)
  400364:	68fb      	ldr	r3, [r7, #12]
  400366:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  400368:	2b00      	cmp	r3, #0
  40036a:	f000 80ab 	beq.w	4004c4 <AT86_Tick+0x1d8>
	{
		txBuf[0] = 0;
  40036e:	4b5c      	ldr	r3, [pc, #368]	; (4004e0 <AT86_Tick+0x1f4>)
  400370:	2200      	movs	r2, #0
  400372:	701a      	strb	r2, [r3, #0]
		txBuf[1] = 0;
  400374:	4b5a      	ldr	r3, [pc, #360]	; (4004e0 <AT86_Tick+0x1f4>)
  400376:	2200      	movs	r2, #0
  400378:	705a      	strb	r2, [r3, #1]
		txBuf[2] = 0;
  40037a:	4b59      	ldr	r3, [pc, #356]	; (4004e0 <AT86_Tick+0x1f4>)
  40037c:	2200      	movs	r2, #0
  40037e:	709a      	strb	r2, [r3, #2]
		//Just read from 0's for status.
		glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 8);
  400380:	68fb      	ldr	r3, [r7, #12]
  400382:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400384:	2308      	movs	r3, #8
  400386:	4a57      	ldr	r2, [pc, #348]	; (4004e4 <AT86_Tick+0x1f8>)
  400388:	4955      	ldr	r1, [pc, #340]	; (4004e0 <AT86_Tick+0x1f4>)
  40038a:	4c57      	ldr	r4, [pc, #348]	; (4004e8 <AT86_Tick+0x1fc>)
  40038c:	47a0      	blx	r4
		
		if (rxBuf[0] == 0x00 && rxBuf[1] == 0x00)
  40038e:	4b55      	ldr	r3, [pc, #340]	; (4004e4 <AT86_Tick+0x1f8>)
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	2b00      	cmp	r3, #0
  400394:	d148      	bne.n	400428 <AT86_Tick+0x13c>
  400396:	4b53      	ldr	r3, [pc, #332]	; (4004e4 <AT86_Tick+0x1f8>)
  400398:	785b      	ldrb	r3, [r3, #1]
  40039a:	2b00      	cmp	r3, #0
  40039c:	d144      	bne.n	400428 <AT86_Tick+0x13c>
		{
			if (rxBuf[2] != 0x00 || rxBuf[4] != 0x00)
  40039e:	4b51      	ldr	r3, [pc, #324]	; (4004e4 <AT86_Tick+0x1f8>)
  4003a0:	789b      	ldrb	r3, [r3, #2]
  4003a2:	2b00      	cmp	r3, #0
  4003a4:	d103      	bne.n	4003ae <AT86_Tick+0xc2>
  4003a6:	4b4f      	ldr	r3, [pc, #316]	; (4004e4 <AT86_Tick+0x1f8>)
  4003a8:	791b      	ldrb	r3, [r3, #4]
  4003aa:	2b00      	cmp	r3, #0
  4003ac:	d019      	beq.n	4003e2 <AT86_Tick+0xf6>
			{
				at->baseband_900.lastIRQ = (rxBuf[2] << 8) & 0xFF00;
  4003ae:	4b4d      	ldr	r3, [pc, #308]	; (4004e4 <AT86_Tick+0x1f8>)
  4003b0:	789b      	ldrb	r3, [r3, #2]
  4003b2:	021b      	lsls	r3, r3, #8
  4003b4:	b29a      	uxth	r2, r3
  4003b6:	68fb      	ldr	r3, [r7, #12]
  4003b8:	809a      	strh	r2, [r3, #4]
				at->baseband_900.lastIRQ &= rxBuf[4] | 0xFF00;
  4003ba:	68fb      	ldr	r3, [r7, #12]
  4003bc:	889b      	ldrh	r3, [r3, #4]
  4003be:	b21a      	sxth	r2, r3
  4003c0:	4b48      	ldr	r3, [pc, #288]	; (4004e4 <AT86_Tick+0x1f8>)
  4003c2:	791b      	ldrb	r3, [r3, #4]
  4003c4:	b21b      	sxth	r3, r3
  4003c6:	f063 03ff 	orn	r3, r3, #255	; 0xff
  4003ca:	b21b      	sxth	r3, r3
  4003cc:	4013      	ands	r3, r2
  4003ce:	b21b      	sxth	r3, r3
  4003d0:	b29a      	uxth	r2, r3
  4003d2:	68fb      	ldr	r3, [r7, #12]
  4003d4:	809a      	strh	r2, [r3, #4]
				at->baseband_900.gotIRQ = 1;
  4003d6:	68fb      	ldr	r3, [r7, #12]
  4003d8:	2201      	movs	r2, #1
  4003da:	705a      	strb	r2, [r3, #1]
				at->numInterrupts = 0;
  4003dc:	68fb      	ldr	r3, [r7, #12]
  4003de:	2200      	movs	r2, #0
  4003e0:	859a      	strh	r2, [r3, #44]	; 0x2c
			}
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  4003e2:	4b40      	ldr	r3, [pc, #256]	; (4004e4 <AT86_Tick+0x1f8>)
  4003e4:	78db      	ldrb	r3, [r3, #3]
  4003e6:	2b00      	cmp	r3, #0
  4003e8:	d103      	bne.n	4003f2 <AT86_Tick+0x106>
  4003ea:	4b3e      	ldr	r3, [pc, #248]	; (4004e4 <AT86_Tick+0x1f8>)
  4003ec:	795b      	ldrb	r3, [r3, #5]
  4003ee:	2b00      	cmp	r3, #0
  4003f0:	d067      	beq.n	4004c2 <AT86_Tick+0x1d6>
			{
				at->baseband_2400.lastIRQ = (rxBuf[3] << 8) & 0xFF00;
  4003f2:	4b3c      	ldr	r3, [pc, #240]	; (4004e4 <AT86_Tick+0x1f8>)
  4003f4:	78db      	ldrb	r3, [r3, #3]
  4003f6:	021b      	lsls	r3, r3, #8
  4003f8:	b29a      	uxth	r2, r3
  4003fa:	68fb      	ldr	r3, [r7, #12]
  4003fc:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.lastIRQ &= rxBuf[5] | 0xFF00;
  4003fe:	68fb      	ldr	r3, [r7, #12]
  400400:	8a9b      	ldrh	r3, [r3, #20]
  400402:	b21a      	sxth	r2, r3
  400404:	4b37      	ldr	r3, [pc, #220]	; (4004e4 <AT86_Tick+0x1f8>)
  400406:	795b      	ldrb	r3, [r3, #5]
  400408:	b21b      	sxth	r3, r3
  40040a:	f063 03ff 	orn	r3, r3, #255	; 0xff
  40040e:	b21b      	sxth	r3, r3
  400410:	4013      	ands	r3, r2
  400412:	b21b      	sxth	r3, r3
  400414:	b29a      	uxth	r2, r3
  400416:	68fb      	ldr	r3, [r7, #12]
  400418:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.gotIRQ = 1;
  40041a:	68fb      	ldr	r3, [r7, #12]
  40041c:	2201      	movs	r2, #1
  40041e:	745a      	strb	r2, [r3, #17]
				at->numInterrupts = 0;
  400420:	68fb      	ldr	r3, [r7, #12]
  400422:	2200      	movs	r2, #0
  400424:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  400426:	e04c      	b.n	4004c2 <AT86_Tick+0x1d6>
			}
		}
		else if (rxBuf[1] == 0x00 && rxBuf[2] == 0x00)
  400428:	4b2e      	ldr	r3, [pc, #184]	; (4004e4 <AT86_Tick+0x1f8>)
  40042a:	785b      	ldrb	r3, [r3, #1]
  40042c:	2b00      	cmp	r3, #0
  40042e:	d149      	bne.n	4004c4 <AT86_Tick+0x1d8>
  400430:	4b2c      	ldr	r3, [pc, #176]	; (4004e4 <AT86_Tick+0x1f8>)
  400432:	789b      	ldrb	r3, [r3, #2]
  400434:	2b00      	cmp	r3, #0
  400436:	d145      	bne.n	4004c4 <AT86_Tick+0x1d8>
		{
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  400438:	4b2a      	ldr	r3, [pc, #168]	; (4004e4 <AT86_Tick+0x1f8>)
  40043a:	78db      	ldrb	r3, [r3, #3]
  40043c:	2b00      	cmp	r3, #0
  40043e:	d103      	bne.n	400448 <AT86_Tick+0x15c>
  400440:	4b28      	ldr	r3, [pc, #160]	; (4004e4 <AT86_Tick+0x1f8>)
  400442:	795b      	ldrb	r3, [r3, #5]
  400444:	2b00      	cmp	r3, #0
  400446:	d019      	beq.n	40047c <AT86_Tick+0x190>
			{
				at->baseband_900.lastIRQ = (rxBuf[3] << 8) & 0xFF00;
  400448:	4b26      	ldr	r3, [pc, #152]	; (4004e4 <AT86_Tick+0x1f8>)
  40044a:	78db      	ldrb	r3, [r3, #3]
  40044c:	021b      	lsls	r3, r3, #8
  40044e:	b29a      	uxth	r2, r3
  400450:	68fb      	ldr	r3, [r7, #12]
  400452:	809a      	strh	r2, [r3, #4]
				at->baseband_900.lastIRQ &= rxBuf[5] | 0xFF00;
  400454:	68fb      	ldr	r3, [r7, #12]
  400456:	889b      	ldrh	r3, [r3, #4]
  400458:	b21a      	sxth	r2, r3
  40045a:	4b22      	ldr	r3, [pc, #136]	; (4004e4 <AT86_Tick+0x1f8>)
  40045c:	795b      	ldrb	r3, [r3, #5]
  40045e:	b21b      	sxth	r3, r3
  400460:	f063 03ff 	orn	r3, r3, #255	; 0xff
  400464:	b21b      	sxth	r3, r3
  400466:	4013      	ands	r3, r2
  400468:	b21b      	sxth	r3, r3
  40046a:	b29a      	uxth	r2, r3
  40046c:	68fb      	ldr	r3, [r7, #12]
  40046e:	809a      	strh	r2, [r3, #4]
				at->baseband_900.gotIRQ = 1;
  400470:	68fb      	ldr	r3, [r7, #12]
  400472:	2201      	movs	r2, #1
  400474:	705a      	strb	r2, [r3, #1]
				at->numInterrupts = 0;
  400476:	68fb      	ldr	r3, [r7, #12]
  400478:	2200      	movs	r2, #0
  40047a:	859a      	strh	r2, [r3, #44]	; 0x2c
			}
			if (rxBuf[4] != 0x00 || rxBuf[6] != 0x00)
  40047c:	4b19      	ldr	r3, [pc, #100]	; (4004e4 <AT86_Tick+0x1f8>)
  40047e:	791b      	ldrb	r3, [r3, #4]
  400480:	2b00      	cmp	r3, #0
  400482:	d103      	bne.n	40048c <AT86_Tick+0x1a0>
  400484:	4b17      	ldr	r3, [pc, #92]	; (4004e4 <AT86_Tick+0x1f8>)
  400486:	799b      	ldrb	r3, [r3, #6]
  400488:	2b00      	cmp	r3, #0
  40048a:	d01b      	beq.n	4004c4 <AT86_Tick+0x1d8>
			{
				at->baseband_2400.lastIRQ = (rxBuf[4] << 8) & 0xFF00;
  40048c:	4b15      	ldr	r3, [pc, #84]	; (4004e4 <AT86_Tick+0x1f8>)
  40048e:	791b      	ldrb	r3, [r3, #4]
  400490:	021b      	lsls	r3, r3, #8
  400492:	b29a      	uxth	r2, r3
  400494:	68fb      	ldr	r3, [r7, #12]
  400496:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.lastIRQ &= rxBuf[6] | 0xFF00;
  400498:	68fb      	ldr	r3, [r7, #12]
  40049a:	8a9b      	ldrh	r3, [r3, #20]
  40049c:	b21a      	sxth	r2, r3
  40049e:	4b11      	ldr	r3, [pc, #68]	; (4004e4 <AT86_Tick+0x1f8>)
  4004a0:	799b      	ldrb	r3, [r3, #6]
  4004a2:	b21b      	sxth	r3, r3
  4004a4:	f063 03ff 	orn	r3, r3, #255	; 0xff
  4004a8:	b21b      	sxth	r3, r3
  4004aa:	4013      	ands	r3, r2
  4004ac:	b21b      	sxth	r3, r3
  4004ae:	b29a      	uxth	r2, r3
  4004b0:	68fb      	ldr	r3, [r7, #12]
  4004b2:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.gotIRQ = 1;
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	2201      	movs	r2, #1
  4004b8:	745a      	strb	r2, [r3, #17]
				at->numInterrupts = 0;
  4004ba:	68fb      	ldr	r3, [r7, #12]
  4004bc:	2200      	movs	r2, #0
  4004be:	859a      	strh	r2, [r3, #44]	; 0x2c
  4004c0:	e000      	b.n	4004c4 <AT86_Tick+0x1d8>
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  4004c2:	bf00      	nop
		{
			//Something bad happened...
		}
	}

	AT86_FSM(atDev);
  4004c4:	79fb      	ldrb	r3, [r7, #7]
  4004c6:	4618      	mov	r0, r3
  4004c8:	4b04      	ldr	r3, [pc, #16]	; (4004dc <AT86_Tick+0x1f0>)
  4004ca:	4798      	blx	r3

	//TODO: Check current BB state against actual state in register.
	return(AT86_OK);
  4004cc:	2300      	movs	r3, #0
}
  4004ce:	4618      	mov	r0, r3
  4004d0:	3714      	adds	r7, #20
  4004d2:	46bd      	mov	sp, r7
  4004d4:	bd90      	pop	{r4, r7, pc}
  4004d6:	bf00      	nop
  4004d8:	2040003c 	.word	0x2040003c
  4004dc:	004004ed 	.word	0x004004ed
  4004e0:	204000d0 	.word	0x204000d0
  4004e4:	204008d0 	.word	0x204008d0
  4004e8:	00401ab9 	.word	0x00401ab9

004004ec <AT86_FSM>:
 * This function should be thought of as the high-level controller that deals
 * with data buffers/IRQs, etc.  All of the TX/RX state handling happens in the
 * baseband fsms.
 */
uint8_t AT86_FSM(uint8_t atDevNum)
{
  4004ec:	b580      	push	{r7, lr}
  4004ee:	b084      	sub	sp, #16
  4004f0:	af00      	add	r7, sp, #0
  4004f2:	4603      	mov	r3, r0
  4004f4:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *atDev = &Instance[atDevNum];
  4004f6:	79fa      	ldrb	r2, [r7, #7]
  4004f8:	4613      	mov	r3, r2
  4004fa:	005b      	lsls	r3, r3, #1
  4004fc:	4413      	add	r3, r2
  4004fe:	011b      	lsls	r3, r3, #4
  400500:	4a5c      	ldr	r2, [pc, #368]	; (400674 <AT86_FSM+0x188>)
  400502:	4413      	add	r3, r2
  400504:	60fb      	str	r3, [r7, #12]
	
	//TODO: Break until we get the first ext interrupt indicating TXRDY.
	switch (atDev->at86_state)
  400506:	68fb      	ldr	r3, [r7, #12]
  400508:	f893 3020 	ldrb.w	r3, [r3, #32]
  40050c:	2b04      	cmp	r3, #4
  40050e:	f200 80ab 	bhi.w	400668 <AT86_FSM+0x17c>
  400512:	a201      	add	r2, pc, #4	; (adr r2, 400518 <AT86_FSM+0x2c>)
  400514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400518:	0040052d 	.word	0x0040052d
  40051c:	004005b7 	.word	0x004005b7
  400520:	00400617 	.word	0x00400617
  400524:	00400629 	.word	0x00400629
  400528:	0040063d 	.word	0x0040063d
	{
		case (AT86_STATE_INIT):
		
			// Turn off fast oscillator startup.
			// 0x0009 << 0x00
			AT86_write_reg(0x0009, 0x1D, atDev);
  40052c:	68fa      	ldr	r2, [r7, #12]
  40052e:	211d      	movs	r1, #29
  400530:	2009      	movs	r0, #9
  400532:	4b51      	ldr	r3, [pc, #324]	; (400678 <AT86_FSM+0x18c>)
  400534:	4798      	blx	r3
			
			// Turn off CLKO
			// 0x0007 << 0x08
			AT86_write_reg(0x0007, 0x08, atDev);
  400536:	68fa      	ldr	r2, [r7, #12]
  400538:	2108      	movs	r1, #8
  40053a:	2007      	movs	r0, #7
  40053c:	4b4e      	ldr	r3, [pc, #312]	; (400678 <AT86_FSM+0x18c>)
  40053e:	4798      	blx	r3
			// Bit 4 - Transmitter frame end (TXFE) X
			// Bit 3 - Receiver extended match (RXEM)
			// Bit 2 - Receiver address match (RXAM)
			// Bit 1 - Receiver frame end interrupt (RXFE) X
			// Bit 0 - Receiver frame start interrupt (RXFS)
			AT86_write_reg(0x0300, 0x12, atDev);
  400540:	68fa      	ldr	r2, [r7, #12]
  400542:	2112      	movs	r1, #18
  400544:	f44f 7040 	mov.w	r0, #768	; 0x300
  400548:	4b4b      	ldr	r3, [pc, #300]	; (400678 <AT86_FSM+0x18c>)
  40054a:	4798      	blx	r3
			// Bit 4 - IRQM.TRXERR: Transceiver Error Interrupt Mask X
			// Bit 3 - IRQM.BATLOW: Battery Low Interrupt Mask
			// Bit 2 - IRQM.EDC: Energy Detection Completion Interrupt Mask
			// Bit 1 - IRQM.TRXRDY: Transceiver Ready Interrupt Mask X
			// Bit 0 - IRQM.WAKEUP: Wake-up / Reset Interrupt Mask
			AT86_write_reg(0x0100, 0x1F, atDev);
  40054c:	68fa      	ldr	r2, [r7, #12]
  40054e:	211f      	movs	r1, #31
  400550:	f44f 7080 	mov.w	r0, #256	; 0x100
  400554:	4b48      	ldr	r3, [pc, #288]	; (400678 <AT86_FSM+0x18c>)
  400556:	4798      	blx	r3
			// Bit 4 - Transmitter frame end (TXFE) X
			// Bit 3 - Receiver extended match (RXEM)
			// Bit 2 - Receiver address match (RXAM)
			// Bit 1 - Receiver frame end interrupt (RXFE) X
			// Bit 0 - Receiver frame start interrupt (RXFS)
			AT86_write_reg(0x0400, 0x12, atDev);
  400558:	68fa      	ldr	r2, [r7, #12]
  40055a:	2112      	movs	r1, #18
  40055c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400560:	4b45      	ldr	r3, [pc, #276]	; (400678 <AT86_FSM+0x18c>)
  400562:	4798      	blx	r3
			// Bit 4 - IRQM.TRXERR: Transceiver Error Interrupt Mask X
			// Bit 3 - IRQM.BATLOW: Battery Low Interrupt Mask
			// Bit 2 - IRQM.EDC: Energy Detection Completion Interrupt Mask
			// Bit 1 - IRQM.TRXRDY: Transceiver Ready Interrupt Mask X
			// Bit 0 - IRQM.WAKEUP: Wake-up / Reset Interrupt Mask
			AT86_write_reg(0x0200, 0x1F, atDev);
  400564:	68fa      	ldr	r2, [r7, #12]
  400566:	211f      	movs	r1, #31
  400568:	f44f 7000 	mov.w	r0, #512	; 0x200
  40056c:	4b42      	ldr	r3, [pc, #264]	; (400678 <AT86_FSM+0x18c>)
  40056e:	4798      	blx	r3
			//0x0214 //24
			
			//Set center frequency for 2.4Ghz to 2427 center.
			//0x90D8
			//CNM = 0
			AT86_write_reg(RF24_CCF0H, 0x90, atDev);
  400570:	68fa      	ldr	r2, [r7, #12]
  400572:	2190      	movs	r1, #144	; 0x90
  400574:	f240 2006 	movw	r0, #518	; 0x206
  400578:	4b3f      	ldr	r3, [pc, #252]	; (400678 <AT86_FSM+0x18c>)
  40057a:	4798      	blx	r3
			AT86_write_reg(RF24_CCF0L, 0xD8, atDev);
  40057c:	68fa      	ldr	r2, [r7, #12]
  40057e:	21d8      	movs	r1, #216	; 0xd8
  400580:	f240 2005 	movw	r0, #517	; 0x205
  400584:	4b3c      	ldr	r3, [pc, #240]	; (400678 <AT86_FSM+0x18c>)
  400586:	4798      	blx	r3
			AT86_write_reg(RF24_CNM, 0x00, atDev);
  400588:	68fa      	ldr	r2, [r7, #12]
  40058a:	2100      	movs	r1, #0
  40058c:	f44f 7002 	mov.w	r0, #520	; 0x208
  400590:	4b39      	ldr	r3, [pc, #228]	; (400678 <AT86_FSM+0x18c>)
  400592:	4798      	blx	r3
			
			AT86_write_reg(0x0114, 0x60, atDev);
  400594:	68fa      	ldr	r2, [r7, #12]
  400596:	2160      	movs	r1, #96	; 0x60
  400598:	f44f 708a 	mov.w	r0, #276	; 0x114
  40059c:	4b36      	ldr	r3, [pc, #216]	; (400678 <AT86_FSM+0x18c>)
  40059e:	4798      	blx	r3
			AT86_write_reg(0x0214, 0x60, atDev);
  4005a0:	68fa      	ldr	r2, [r7, #12]
  4005a2:	2160      	movs	r1, #96	; 0x60
  4005a4:	f44f 7005 	mov.w	r0, #532	; 0x214
  4005a8:	4b33      	ldr	r3, [pc, #204]	; (400678 <AT86_FSM+0x18c>)
  4005aa:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  4005ac:	68fb      	ldr	r3, [r7, #12]
  4005ae:	2201      	movs	r2, #1
  4005b0:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  4005b4:	e059      	b.n	40066a <AT86_FSM+0x17e>
		//timeout and an extra state that polls the state and kicks the bb state
		//with the polled state and calls the FSM update.
		case (AT86_STATE_IDLE):
			//Poll for data?
			asm("");
			if (atDev->baseband_900.gotIRQ && atDev->baseband_2400.gotIRQ)
  4005b6:	68fb      	ldr	r3, [r7, #12]
  4005b8:	785b      	ldrb	r3, [r3, #1]
  4005ba:	2b00      	cmp	r3, #0
  4005bc:	d00e      	beq.n	4005dc <AT86_FSM+0xf0>
  4005be:	68fb      	ldr	r3, [r7, #12]
  4005c0:	7c5b      	ldrb	r3, [r3, #17]
  4005c2:	2b00      	cmp	r3, #0
  4005c4:	d00a      	beq.n	4005dc <AT86_FSM+0xf0>
			{
				atDev->baseband_900.gotIRQ = 0;
  4005c6:	68fb      	ldr	r3, [r7, #12]
  4005c8:	2200      	movs	r2, #0
  4005ca:	705a      	strb	r2, [r3, #1]
				atDev->baseband_2400.gotIRQ = 0;
  4005cc:	68fb      	ldr	r3, [r7, #12]
  4005ce:	2200      	movs	r2, #0
  4005d0:	745a      	strb	r2, [r3, #17]
				
				atDev->at86_state = AT86_STATE_ALL_UPDATE;
  4005d2:	68fb      	ldr	r3, [r7, #12]
  4005d4:	2204      	movs	r2, #4
  4005d6:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  4005da:	e046      	b.n	40066a <AT86_FSM+0x17e>
			}
			else if (atDev->baseband_900.gotIRQ)
  4005dc:	68fb      	ldr	r3, [r7, #12]
  4005de:	785b      	ldrb	r3, [r3, #1]
  4005e0:	2b00      	cmp	r3, #0
  4005e2:	d007      	beq.n	4005f4 <AT86_FSM+0x108>
			{
				atDev->baseband_900.gotIRQ = 0;
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	2200      	movs	r2, #0
  4005e8:	705a      	strb	r2, [r3, #1]

				atDev->at86_state = AT86_STATE_0900_UPDATE;
  4005ea:	68fb      	ldr	r3, [r7, #12]
  4005ec:	2202      	movs	r2, #2
  4005ee:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  4005f2:	e03a      	b.n	40066a <AT86_FSM+0x17e>
			}
			else if (atDev->baseband_2400.gotIRQ)
  4005f4:	68fb      	ldr	r3, [r7, #12]
  4005f6:	7c5b      	ldrb	r3, [r3, #17]
  4005f8:	2b00      	cmp	r3, #0
  4005fa:	d007      	beq.n	40060c <AT86_FSM+0x120>
			{
				atDev->baseband_2400.gotIRQ = 0;
  4005fc:	68fb      	ldr	r3, [r7, #12]
  4005fe:	2200      	movs	r2, #0
  400600:	745a      	strb	r2, [r3, #17]

				atDev->at86_state = AT86_STATE_2400_UPDATE;
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	2203      	movs	r2, #3
  400606:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  40060a:	e02e      	b.n	40066a <AT86_FSM+0x17e>
			}
			
			atDev->at86_state = AT86_STATE_IDLE;
  40060c:	68fb      	ldr	r3, [r7, #12]
  40060e:	2201      	movs	r2, #1
  400610:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400614:	e029      	b.n	40066a <AT86_FSM+0x17e>
			//if (getSpiStatus() == DevSpiState_IN_PROCESS)
			//{
			//	break;
			//	atDev->at86_state = AT86_STATE_0900_UPDATE;
			//}
			AT86_BB_FSM(&atDev->baseband_900);
  400616:	68fb      	ldr	r3, [r7, #12]
  400618:	4618      	mov	r0, r3
  40061a:	4b18      	ldr	r3, [pc, #96]	; (40067c <AT86_FSM+0x190>)
  40061c:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  40061e:	68fb      	ldr	r3, [r7, #12]
  400620:	2201      	movs	r2, #1
  400622:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400626:	e020      	b.n	40066a <AT86_FSM+0x17e>
			//if (getSpiStatus() == DevSpiState_IN_PROCESS)
			//{
			//	break;
			//	atDev->at86_state = AT86_STATE_2400_UPDATE;
			//}
			AT86_BB_FSM(&atDev->baseband_2400);
  400628:	68fb      	ldr	r3, [r7, #12]
  40062a:	3310      	adds	r3, #16
  40062c:	4618      	mov	r0, r3
  40062e:	4b13      	ldr	r3, [pc, #76]	; (40067c <AT86_FSM+0x190>)
  400630:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  400632:	68fb      	ldr	r3, [r7, #12]
  400634:	2201      	movs	r2, #1
  400636:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  40063a:	e016      	b.n	40066a <AT86_FSM+0x17e>
		
		case (AT86_STATE_ALL_UPDATE):
		
			atDev->at86_state = AT86_STATE_0900_UPDATE;
  40063c:	68fb      	ldr	r3, [r7, #12]
  40063e:	2202      	movs	r2, #2
  400640:	f883 2020 	strb.w	r2, [r3, #32]
			AT86_BB_FSM(&atDev->baseband_900);
  400644:	68fb      	ldr	r3, [r7, #12]
  400646:	4618      	mov	r0, r3
  400648:	4b0c      	ldr	r3, [pc, #48]	; (40067c <AT86_FSM+0x190>)
  40064a:	4798      	blx	r3
			atDev->at86_state = AT86_STATE_2400_UPDATE;
  40064c:	68fb      	ldr	r3, [r7, #12]
  40064e:	2203      	movs	r2, #3
  400650:	f883 2020 	strb.w	r2, [r3, #32]
			AT86_BB_FSM(&atDev->baseband_2400);
  400654:	68fb      	ldr	r3, [r7, #12]
  400656:	3310      	adds	r3, #16
  400658:	4618      	mov	r0, r3
  40065a:	4b08      	ldr	r3, [pc, #32]	; (40067c <AT86_FSM+0x190>)
  40065c:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  40065e:	68fb      	ldr	r3, [r7, #12]
  400660:	2201      	movs	r2, #1
  400662:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400666:	e000      	b.n	40066a <AT86_FSM+0x17e>
			
		default:
			while(1);
  400668:	e7fe      	b.n	400668 <AT86_FSM+0x17c>
			break;
			
	}

	return(AT86_OK);
  40066a:	2300      	movs	r3, #0
}
  40066c:	4618      	mov	r0, r3
  40066e:	3710      	adds	r7, #16
  400670:	46bd      	mov	sp, r7
  400672:	bd80      	pop	{r7, pc}
  400674:	2040003c 	.word	0x2040003c
  400678:	00400a3d 	.word	0x00400a3d
  40067c:	00400681 	.word	0x00400681

00400680 <AT86_BB_FSM>:
 * 
 * This FSM may automatically support CCS/wait to send as it should automatically send
 * when appropriate after sending the TX command.  TODO: Must verify this.
 */
uint8_t AT86_BB_FSM(baseband_info_t *bb)
{
  400680:	b580      	push	{r7, lr}
  400682:	b082      	sub	sp, #8
  400684:	af00      	add	r7, sp, #0
  400686:	6078      	str	r0, [r7, #4]
	switch (bb->baseband_state)
  400688:	687b      	ldr	r3, [r7, #4]
  40068a:	781b      	ldrb	r3, [r3, #0]
  40068c:	2b08      	cmp	r3, #8
  40068e:	f200 81ac 	bhi.w	4009ea <AT86_BB_FSM+0x36a>
  400692:	a201      	add	r2, pc, #4	; (adr r2, 400698 <AT86_BB_FSM+0x18>)
  400694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400698:	004006bd 	.word	0x004006bd
  40069c:	0040071d 	.word	0x0040071d
  4006a0:	00400741 	.word	0x00400741
  4006a4:	00400765 	.word	0x00400765
  4006a8:	004009eb 	.word	0x004009eb
  4006ac:	00400833 	.word	0x00400833
  4006b0:	0040096d 	.word	0x0040096d
  4006b4:	004009eb 	.word	0x004009eb
  4006b8:	004009af 	.word	0x004009af
	{
		case (AFE_STATE_POWER_OFF):
			asm("");
			if (bb->lastIRQ & WAKEUP)
  4006bc:	687b      	ldr	r3, [r7, #4]
  4006be:	889b      	ldrh	r3, [r3, #4]
  4006c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4006c4:	2b00      	cmp	r3, #0
  4006c6:	f000 8183 	beq.w	4009d0 <AT86_BB_FSM+0x350>
			{
				bb->lastIRQ &= ~WAKEUP;
  4006ca:	687b      	ldr	r3, [r7, #4]
  4006cc:	889a      	ldrh	r2, [r3, #4]
  4006ce:	4ba1      	ldr	r3, [pc, #644]	; (400954 <AT86_BB_FSM+0x2d4>)
  4006d0:	4013      	ands	r3, r2
  4006d2:	b29a      	uxth	r2, r3
  4006d4:	687b      	ldr	r3, [r7, #4]
  4006d6:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TRXOFF;
  4006d8:	687b      	ldr	r3, [r7, #4]
  4006da:	2201      	movs	r2, #1
  4006dc:	701a      	strb	r2, [r3, #0]

				// Send SPI command to get us into TXPREP
				if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  4006de:	687b      	ldr	r3, [r7, #4]
  4006e0:	68db      	ldr	r3, [r3, #12]
  4006e2:	f893 3020 	ldrb.w	r3, [r3, #32]
  4006e6:	2b02      	cmp	r3, #2
  4006e8:	d108      	bne.n	4006fc <AT86_BB_FSM+0x7c>
				{
					AT86_write_reg(RF09_CMD, RF_CMD_TXPREP, bb->parent);
  4006ea:	687b      	ldr	r3, [r7, #4]
  4006ec:	68db      	ldr	r3, [r3, #12]
  4006ee:	461a      	mov	r2, r3
  4006f0:	2103      	movs	r1, #3
  4006f2:	f240 1003 	movw	r0, #259	; 0x103
  4006f6:	4b98      	ldr	r3, [pc, #608]	; (400958 <AT86_BB_FSM+0x2d8>)
  4006f8:	4798      	blx	r3
				else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
				{
					AT86_write_reg(RF24_CMD, RF_CMD_TXPREP, bb->parent);
				}
			}
			break;
  4006fa:	e169      	b.n	4009d0 <AT86_BB_FSM+0x350>
				else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  4006fc:	687b      	ldr	r3, [r7, #4]
  4006fe:	68db      	ldr	r3, [r3, #12]
  400700:	f893 3020 	ldrb.w	r3, [r3, #32]
  400704:	2b03      	cmp	r3, #3
  400706:	f040 8163 	bne.w	4009d0 <AT86_BB_FSM+0x350>
					AT86_write_reg(RF24_CMD, RF_CMD_TXPREP, bb->parent);
  40070a:	687b      	ldr	r3, [r7, #4]
  40070c:	68db      	ldr	r3, [r3, #12]
  40070e:	461a      	mov	r2, r3
  400710:	2103      	movs	r1, #3
  400712:	f240 2003 	movw	r0, #515	; 0x203
  400716:	4b90      	ldr	r3, [pc, #576]	; (400958 <AT86_BB_FSM+0x2d8>)
  400718:	4798      	blx	r3
			break;
  40071a:	e159      	b.n	4009d0 <AT86_BB_FSM+0x350>

		case (AFE_STATE_TRXOFF):
			asm("");
			if (bb->lastIRQ & TRXRDY)
  40071c:	687b      	ldr	r3, [r7, #4]
  40071e:	889b      	ldrh	r3, [r3, #4]
  400720:	f403 7300 	and.w	r3, r3, #512	; 0x200
  400724:	2b00      	cmp	r3, #0
  400726:	f000 8155 	beq.w	4009d4 <AT86_BB_FSM+0x354>
			{
				bb->lastIRQ &= ~TRXRDY;
  40072a:	687b      	ldr	r3, [r7, #4]
  40072c:	889a      	ldrh	r2, [r3, #4]
  40072e:	4b8b      	ldr	r3, [pc, #556]	; (40095c <AT86_BB_FSM+0x2dc>)
  400730:	4013      	ands	r3, r2
  400732:	b29a      	uxth	r2, r3
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  400738:	687b      	ldr	r3, [r7, #4]
  40073a:	2203      	movs	r2, #3
  40073c:	701a      	strb	r2, [r3, #0]
				goto txprep;
  40073e:	e011      	b.n	400764 <AT86_BB_FSM+0xe4>
			}
			break;

		case (AFE_STATE_TRANSITION):
			asm("");
			if (bb->lastIRQ & TRXRDY)
  400740:	687b      	ldr	r3, [r7, #4]
  400742:	889b      	ldrh	r3, [r3, #4]
  400744:	f403 7300 	and.w	r3, r3, #512	; 0x200
  400748:	2b00      	cmp	r3, #0
  40074a:	f000 8145 	beq.w	4009d8 <AT86_BB_FSM+0x358>
			{
				bb->lastIRQ &= ~TRXRDY;
  40074e:	687b      	ldr	r3, [r7, #4]
  400750:	889a      	ldrh	r2, [r3, #4]
  400752:	4b82      	ldr	r3, [pc, #520]	; (40095c <AT86_BB_FSM+0x2dc>)
  400754:	4013      	ands	r3, r2
  400756:	b29a      	uxth	r2, r3
  400758:	687b      	ldr	r3, [r7, #4]
  40075a:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  40075c:	687b      	ldr	r3, [r7, #4]
  40075e:	2203      	movs	r2, #3
  400760:	701a      	strb	r2, [r3, #0]
				goto txprep;
  400762:	bf00      	nop
			break;			

		case (AFE_STATE_TXPREP):
txprep:
			asm("");
			if (bb->lastIRQ & TRXERR)
  400764:	687b      	ldr	r3, [r7, #4]
  400766:	889b      	ldrh	r3, [r3, #4]
  400768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  40076c:	2b00      	cmp	r3, #0
  40076e:	d00a      	beq.n	400786 <AT86_BB_FSM+0x106>
			{
				bb->lastIRQ &= ~TRXERR;
  400770:	687b      	ldr	r3, [r7, #4]
  400772:	889a      	ldrh	r2, [r3, #4]
  400774:	4b7a      	ldr	r3, [pc, #488]	; (400960 <AT86_BB_FSM+0x2e0>)
  400776:	4013      	ands	r3, r2
  400778:	b29a      	uxth	r2, r3
  40077a:	687b      	ldr	r3, [r7, #4]
  40077c:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  40077e:	687b      	ldr	r3, [r7, #4]
  400780:	2203      	movs	r2, #3
  400782:	701a      	strb	r2, [r3, #0]
  400784:	e00f      	b.n	4007a6 <AT86_BB_FSM+0x126>
			}
			else if (bb->lastIRQ & TRXRDY)
  400786:	687b      	ldr	r3, [r7, #4]
  400788:	889b      	ldrh	r3, [r3, #4]
  40078a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  40078e:	2b00      	cmp	r3, #0
  400790:	d009      	beq.n	4007a6 <AT86_BB_FSM+0x126>
			{
				bb->lastIRQ &= ~TRXRDY;
  400792:	687b      	ldr	r3, [r7, #4]
  400794:	889a      	ldrh	r2, [r3, #4]
  400796:	4b71      	ldr	r3, [pc, #452]	; (40095c <AT86_BB_FSM+0x2dc>)
  400798:	4013      	ands	r3, r2
  40079a:	b29a      	uxth	r2, r3
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  4007a0:	687b      	ldr	r3, [r7, #4]
  4007a2:	2203      	movs	r2, #3
  4007a4:	701a      	strb	r2, [r3, #0]
				//If we need to send data, which the AT86 top-level-fsm handles, we will do so here.
				//
				//We will only initialize sending data from this state if we're manually handling
				//CCA and energy detection thresholds.  Otherwise CCATX is initiated from the RX state.

				if (bb->channel_power_assesment == 1)
  4007a6:	687b      	ldr	r3, [r7, #4]
  4007a8:	79db      	ldrb	r3, [r3, #7]
  4007aa:	2b01      	cmp	r3, #1
  4007ac:	f040 8116 	bne.w	4009dc <AT86_BB_FSM+0x35c>
					//PC.BBEN to 0
					//RX to RFn_CMD
					//EDC.EDM to 1

					//Send transition command to RX
					if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  4007b0:	687b      	ldr	r3, [r7, #4]
  4007b2:	68db      	ldr	r3, [r3, #12]
  4007b4:	f893 3020 	ldrb.w	r3, [r3, #32]
  4007b8:	2b02      	cmp	r3, #2
  4007ba:	d118      	bne.n	4007ee <AT86_BB_FSM+0x16e>
					{
						//0b01010100 Default BBCn_PC
						//0b01010000
						AT86_write_reg(BBC0_PC, 0x50, bb->parent);
  4007bc:	687b      	ldr	r3, [r7, #4]
  4007be:	68db      	ldr	r3, [r3, #12]
  4007c0:	461a      	mov	r2, r3
  4007c2:	2150      	movs	r1, #80	; 0x50
  4007c4:	f240 3001 	movw	r0, #769	; 0x301
  4007c8:	4b63      	ldr	r3, [pc, #396]	; (400958 <AT86_BB_FSM+0x2d8>)
  4007ca:	4798      	blx	r3
						AT86_write_reg(RF09_CMD, RF_CMD_RX, bb->parent);
  4007cc:	687b      	ldr	r3, [r7, #4]
  4007ce:	68db      	ldr	r3, [r3, #12]
  4007d0:	461a      	mov	r2, r3
  4007d2:	2105      	movs	r1, #5
  4007d4:	f240 1003 	movw	r0, #259	; 0x103
  4007d8:	4b5f      	ldr	r3, [pc, #380]	; (400958 <AT86_BB_FSM+0x2d8>)
  4007da:	4798      	blx	r3
						AT86_write_reg(RF09_EDC, 0x01, bb->parent);
  4007dc:	687b      	ldr	r3, [r7, #4]
  4007de:	68db      	ldr	r3, [r3, #12]
  4007e0:	461a      	mov	r2, r3
  4007e2:	2101      	movs	r1, #1
  4007e4:	f44f 7087 	mov.w	r0, #270	; 0x10e
  4007e8:	4b5b      	ldr	r3, [pc, #364]	; (400958 <AT86_BB_FSM+0x2d8>)
  4007ea:	4798      	blx	r3
  4007ec:	e01d      	b.n	40082a <AT86_BB_FSM+0x1aa>
					}
					else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  4007ee:	687b      	ldr	r3, [r7, #4]
  4007f0:	68db      	ldr	r3, [r3, #12]
  4007f2:	f893 3020 	ldrb.w	r3, [r3, #32]
  4007f6:	2b03      	cmp	r3, #3
  4007f8:	d117      	bne.n	40082a <AT86_BB_FSM+0x1aa>
					{
						AT86_write_reg(BBC1_PC, 0x50, bb->parent);
  4007fa:	687b      	ldr	r3, [r7, #4]
  4007fc:	68db      	ldr	r3, [r3, #12]
  4007fe:	461a      	mov	r2, r3
  400800:	2150      	movs	r1, #80	; 0x50
  400802:	f240 4001 	movw	r0, #1025	; 0x401
  400806:	4b54      	ldr	r3, [pc, #336]	; (400958 <AT86_BB_FSM+0x2d8>)
  400808:	4798      	blx	r3
						AT86_write_reg(RF24_CMD, RF_CMD_RX, bb->parent);
  40080a:	687b      	ldr	r3, [r7, #4]
  40080c:	68db      	ldr	r3, [r3, #12]
  40080e:	461a      	mov	r2, r3
  400810:	2105      	movs	r1, #5
  400812:	f240 2003 	movw	r0, #515	; 0x203
  400816:	4b50      	ldr	r3, [pc, #320]	; (400958 <AT86_BB_FSM+0x2d8>)
  400818:	4798      	blx	r3
						AT86_write_reg(RF24_EDC, 0x01, bb->parent);
  40081a:	687b      	ldr	r3, [r7, #4]
  40081c:	68db      	ldr	r3, [r3, #12]
  40081e:	461a      	mov	r2, r3
  400820:	2101      	movs	r1, #1
  400822:	f240 200e 	movw	r0, #526	; 0x20e
  400826:	4b4c      	ldr	r3, [pc, #304]	; (400958 <AT86_BB_FSM+0x2d8>)
  400828:	4798      	blx	r3
					}
					
					bb->baseband_state = AFE_STATE_RX;
  40082a:	687b      	ldr	r3, [r7, #4]
  40082c:	2205      	movs	r2, #5
  40082e:	701a      	strb	r2, [r3, #0]
					break;
  400830:	e0db      	b.n	4009ea <AT86_BB_FSM+0x36a>
				//return transmission complete, which will be handled in AT86 state machine, where the frame will be dequeued.
			}
			break;

		case (AFE_STATE_RX):
			if (bb->lastIRQ & EDC)
  400832:	687b      	ldr	r3, [r7, #4]
  400834:	889b      	ldrh	r3, [r3, #4]
  400836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40083a:	2b00      	cmp	r3, #0
  40083c:	d07b      	beq.n	400936 <AT86_BB_FSM+0x2b6>
			{
				bb->lastIRQ &= ~EDC;
  40083e:	687b      	ldr	r3, [r7, #4]
  400840:	889a      	ldrh	r2, [r3, #4]
  400842:	4b48      	ldr	r3, [pc, #288]	; (400964 <AT86_BB_FSM+0x2e4>)
  400844:	4013      	ands	r3, r2
  400846:	b29a      	uxth	r2, r3
  400848:	687b      	ldr	r3, [r7, #4]
  40084a:	809a      	strh	r2, [r3, #4]
				uint16_t edv;
				//Got energy detection results.
				
				//If we are still in the power assessment override state,
				//reissue the single shot energy detection.
				if (bb->channel_power_assesment)
  40084c:	687b      	ldr	r3, [r7, #4]
  40084e:	79db      	ldrb	r3, [r3, #7]
  400850:	2b00      	cmp	r3, #0
  400852:	d040      	beq.n	4008d6 <AT86_BB_FSM+0x256>
				{
					if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  400854:	687b      	ldr	r3, [r7, #4]
  400856:	68db      	ldr	r3, [r3, #12]
  400858:	f893 3020 	ldrb.w	r3, [r3, #32]
  40085c:	2b02      	cmp	r3, #2
  40085e:	d118      	bne.n	400892 <AT86_BB_FSM+0x212>
					{
						AT86_read_bytes_from_reg(0x010F, 3, bb->parent);
  400860:	687b      	ldr	r3, [r7, #4]
  400862:	68db      	ldr	r3, [r3, #12]
  400864:	461a      	mov	r2, r3
  400866:	2103      	movs	r1, #3
  400868:	f240 100f 	movw	r0, #271	; 0x10f
  40086c:	4b3e      	ldr	r3, [pc, #248]	; (400968 <AT86_BB_FSM+0x2e8>)
  40086e:	4798      	blx	r3
						AT86_write_reg(RF09_EDD, 0xFF, bb->parent); //Super long integration period: 128 uS * 2^6
  400870:	687b      	ldr	r3, [r7, #4]
  400872:	68db      	ldr	r3, [r3, #12]
  400874:	461a      	mov	r2, r3
  400876:	21ff      	movs	r1, #255	; 0xff
  400878:	f240 100f 	movw	r0, #271	; 0x10f
  40087c:	4b36      	ldr	r3, [pc, #216]	; (400958 <AT86_BB_FSM+0x2d8>)
  40087e:	4798      	blx	r3
						AT86_write_reg(RF09_EDC, 0x01, bb->parent);
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	68db      	ldr	r3, [r3, #12]
  400884:	461a      	mov	r2, r3
  400886:	2101      	movs	r1, #1
  400888:	f44f 7087 	mov.w	r0, #270	; 0x10e
  40088c:	4b32      	ldr	r3, [pc, #200]	; (400958 <AT86_BB_FSM+0x2d8>)
  40088e:	4798      	blx	r3
  400890:	e01d      	b.n	4008ce <AT86_BB_FSM+0x24e>
					}
					else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  400892:	687b      	ldr	r3, [r7, #4]
  400894:	68db      	ldr	r3, [r3, #12]
  400896:	f893 3020 	ldrb.w	r3, [r3, #32]
  40089a:	2b03      	cmp	r3, #3
  40089c:	d117      	bne.n	4008ce <AT86_BB_FSM+0x24e>
					{
						AT86_read_bytes_from_reg(0x020F, 3, bb->parent);
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	68db      	ldr	r3, [r3, #12]
  4008a2:	461a      	mov	r2, r3
  4008a4:	2103      	movs	r1, #3
  4008a6:	f240 200f 	movw	r0, #527	; 0x20f
  4008aa:	4b2f      	ldr	r3, [pc, #188]	; (400968 <AT86_BB_FSM+0x2e8>)
  4008ac:	4798      	blx	r3
						AT86_write_reg(RF24_EDD, 0xFF, bb->parent); //Super long integration period: 128 uS * 2^6
  4008ae:	687b      	ldr	r3, [r7, #4]
  4008b0:	68db      	ldr	r3, [r3, #12]
  4008b2:	461a      	mov	r2, r3
  4008b4:	21ff      	movs	r1, #255	; 0xff
  4008b6:	f240 200f 	movw	r0, #527	; 0x20f
  4008ba:	4b27      	ldr	r3, [pc, #156]	; (400958 <AT86_BB_FSM+0x2d8>)
  4008bc:	4798      	blx	r3
						AT86_write_reg(RF24_EDC, 0x01, bb->parent);
  4008be:	687b      	ldr	r3, [r7, #4]
  4008c0:	68db      	ldr	r3, [r3, #12]
  4008c2:	461a      	mov	r2, r3
  4008c4:	2101      	movs	r1, #1
  4008c6:	f240 200e 	movw	r0, #526	; 0x20e
  4008ca:	4b23      	ldr	r3, [pc, #140]	; (400958 <AT86_BB_FSM+0x2d8>)
  4008cc:	4798      	blx	r3
					}
					bb->baseband_state = AFE_STATE_RX;
  4008ce:	687b      	ldr	r3, [r7, #4]
  4008d0:	2205      	movs	r2, #5
  4008d2:	701a      	strb	r2, [r3, #0]
  4008d4:	e02f      	b.n	400936 <AT86_BB_FSM+0x2b6>
				}
				else
				{
					//Send TXPREP command
					//Enable baseband.
					if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  4008d6:	687b      	ldr	r3, [r7, #4]
  4008d8:	68db      	ldr	r3, [r3, #12]
  4008da:	f893 3020 	ldrb.w	r3, [r3, #32]
  4008de:	2b02      	cmp	r3, #2
  4008e0:	d110      	bne.n	400904 <AT86_BB_FSM+0x284>
					{
						AT86_write_reg(BBC0_PC, 0x54, bb->parent);
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	68db      	ldr	r3, [r3, #12]
  4008e6:	461a      	mov	r2, r3
  4008e8:	2154      	movs	r1, #84	; 0x54
  4008ea:	f240 3001 	movw	r0, #769	; 0x301
  4008ee:	4b1a      	ldr	r3, [pc, #104]	; (400958 <AT86_BB_FSM+0x2d8>)
  4008f0:	4798      	blx	r3
						AT86_write_reg(RF09_CMD, RF_CMD_TXPREP, bb->parent);
  4008f2:	687b      	ldr	r3, [r7, #4]
  4008f4:	68db      	ldr	r3, [r3, #12]
  4008f6:	461a      	mov	r2, r3
  4008f8:	2103      	movs	r1, #3
  4008fa:	f240 1003 	movw	r0, #259	; 0x103
  4008fe:	4b16      	ldr	r3, [pc, #88]	; (400958 <AT86_BB_FSM+0x2d8>)
  400900:	4798      	blx	r3
  400902:	e015      	b.n	400930 <AT86_BB_FSM+0x2b0>
					}
					else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  400904:	687b      	ldr	r3, [r7, #4]
  400906:	68db      	ldr	r3, [r3, #12]
  400908:	f893 3020 	ldrb.w	r3, [r3, #32]
  40090c:	2b03      	cmp	r3, #3
  40090e:	d10f      	bne.n	400930 <AT86_BB_FSM+0x2b0>
					{
						AT86_write_reg(BBC1_PC, 0x50, bb->parent);
  400910:	687b      	ldr	r3, [r7, #4]
  400912:	68db      	ldr	r3, [r3, #12]
  400914:	461a      	mov	r2, r3
  400916:	2150      	movs	r1, #80	; 0x50
  400918:	f240 4001 	movw	r0, #1025	; 0x401
  40091c:	4b0e      	ldr	r3, [pc, #56]	; (400958 <AT86_BB_FSM+0x2d8>)
  40091e:	4798      	blx	r3
						AT86_write_reg(RF24_CMD, RF_CMD_TXPREP, bb->parent);
  400920:	687b      	ldr	r3, [r7, #4]
  400922:	68db      	ldr	r3, [r3, #12]
  400924:	461a      	mov	r2, r3
  400926:	2103      	movs	r1, #3
  400928:	f240 2003 	movw	r0, #515	; 0x203
  40092c:	4b0a      	ldr	r3, [pc, #40]	; (400958 <AT86_BB_FSM+0x2d8>)
  40092e:	4798      	blx	r3
					}
					
					bb->baseband_state = AFE_STATE_TXPREP;
  400930:	687b      	ldr	r3, [r7, #4]
  400932:	2203      	movs	r2, #3
  400934:	701a      	strb	r2, [r3, #0]
			{
				bb->lastIRQ &= ~AGCH;
				//AGC is held, preamble detected.
			}

			if (bb->lastIRQ & RXFS)
  400936:	687b      	ldr	r3, [r7, #4]
  400938:	889b      	ldrh	r3, [r3, #4]
  40093a:	f003 0301 	and.w	r3, r3, #1
  40093e:	2b00      	cmp	r3, #0
  400940:	d04e      	beq.n	4009e0 <AT86_BB_FSM+0x360>
			{
				bb->lastIRQ &= ~RXFS;
  400942:	687b      	ldr	r3, [r7, #4]
  400944:	889b      	ldrh	r3, [r3, #4]
  400946:	f023 0301 	bic.w	r3, r3, #1
  40094a:	b29a      	uxth	r2, r3
  40094c:	687b      	ldr	r3, [r7, #4]
  40094e:	809a      	strh	r2, [r3, #4]
				//EDM = 1;
				//bb->baseband_state = ;
			}
			

			break;
  400950:	e046      	b.n	4009e0 <AT86_BB_FSM+0x360>
  400952:	bf00      	nop
  400954:	fffffe00 	.word	0xfffffe00
  400958:	00400a3d 	.word	0x00400a3d
  40095c:	fffffd00 	.word	0xfffffd00
  400960:	ffffef00 	.word	0xffffef00
  400964:	fffffb00 	.word	0xfffffb00
  400968:	00400a91 	.word	0x00400a91
		case (AFE_STATE_RX_CCATX):
			if (bb->lastIRQ & (TXFE | EDC))
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	889b      	ldrh	r3, [r3, #4]
  400970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  400974:	2b00      	cmp	r3, #0
  400976:	d009      	beq.n	40098c <AT86_BB_FSM+0x30c>
			{
				bb->lastIRQ &= ~(TXFE | EDC);
  400978:	687b      	ldr	r3, [r7, #4]
  40097a:	889b      	ldrh	r3, [r3, #4]
  40097c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400980:	b29a      	uxth	r2, r3
  400982:	687b      	ldr	r3, [r7, #4]
  400984:	809a      	strh	r2, [r3, #4]
				//Busy channel detected, jump back to the RX state.
				
				bb->baseband_state = AFE_STATE_RX;
  400986:	687b      	ldr	r3, [r7, #4]
  400988:	2205      	movs	r2, #5
  40098a:	701a      	strb	r2, [r3, #0]
			}

			if (bb->lastIRQ & (TRXRDY | EDC))
  40098c:	687b      	ldr	r3, [r7, #4]
  40098e:	889b      	ldrh	r3, [r3, #4]
  400990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  400994:	2b00      	cmp	r3, #0
  400996:	d025      	beq.n	4009e4 <AT86_BB_FSM+0x364>
			{
				bb->lastIRQ &= ~(TRXRDY | EDC);
  400998:	687b      	ldr	r3, [r7, #4]
  40099a:	889b      	ldrh	r3, [r3, #4]
  40099c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
  4009a0:	b29a      	uxth	r2, r3
  4009a2:	687b      	ldr	r3, [r7, #4]
  4009a4:	809a      	strh	r2, [r3, #4]
				//Channel free, will transition to TX state.  Assumes this is CCATX.
				
				bb->baseband_state = AFE_STATE_TX;
  4009a6:	687b      	ldr	r3, [r7, #4]
  4009a8:	2204      	movs	r2, #4
  4009aa:	701a      	strb	r2, [r3, #0]
			}

			break;
  4009ac:	e01a      	b.n	4009e4 <AT86_BB_FSM+0x364>

		case (AFE_STATE_SLEEP):
			break;

		case (AFE_STATE_DEEP_SLEEP):
			if (bb->lastIRQ & WAKEUP)
  4009ae:	687b      	ldr	r3, [r7, #4]
  4009b0:	889b      	ldrh	r3, [r3, #4]
  4009b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4009b6:	2b00      	cmp	r3, #0
  4009b8:	d016      	beq.n	4009e8 <AT86_BB_FSM+0x368>
			{
				bb->lastIRQ &= ~WAKEUP;
  4009ba:	687b      	ldr	r3, [r7, #4]
  4009bc:	889a      	ldrh	r2, [r3, #4]
  4009be:	4b0d      	ldr	r3, [pc, #52]	; (4009f4 <AT86_BB_FSM+0x374>)
  4009c0:	4013      	ands	r3, r2
  4009c2:	b29a      	uxth	r2, r3
  4009c4:	687b      	ldr	r3, [r7, #4]
  4009c6:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  4009c8:	687b      	ldr	r3, [r7, #4]
  4009ca:	2203      	movs	r2, #3
  4009cc:	701a      	strb	r2, [r3, #0]
			}
			break;
  4009ce:	e00b      	b.n	4009e8 <AT86_BB_FSM+0x368>
			break;
  4009d0:	bf00      	nop
  4009d2:	e00a      	b.n	4009ea <AT86_BB_FSM+0x36a>
			break;
  4009d4:	bf00      	nop
  4009d6:	e008      	b.n	4009ea <AT86_BB_FSM+0x36a>
			break;			
  4009d8:	bf00      	nop
  4009da:	e006      	b.n	4009ea <AT86_BB_FSM+0x36a>
			break;
  4009dc:	bf00      	nop
  4009de:	e004      	b.n	4009ea <AT86_BB_FSM+0x36a>
			break;
  4009e0:	bf00      	nop
  4009e2:	e002      	b.n	4009ea <AT86_BB_FSM+0x36a>
			break;
  4009e4:	bf00      	nop
  4009e6:	e000      	b.n	4009ea <AT86_BB_FSM+0x36a>
			break;
  4009e8:	bf00      	nop

		}
}
  4009ea:	bf00      	nop
  4009ec:	4618      	mov	r0, r3
  4009ee:	3708      	adds	r7, #8
  4009f0:	46bd      	mov	sp, r7
  4009f2:	bd80      	pop	{r7, pc}
  4009f4:	fffffe00 	.word	0xfffffe00

004009f8 <AT86_IRQ_Handler>:

//TODO: Define pin number when initing the atDev in Glue and don't
//      put the real pin numbers here in the irq handler.
void AT86_IRQ_Handler(uint8_t pinNum)
{
  4009f8:	b480      	push	{r7}
  4009fa:	b083      	sub	sp, #12
  4009fc:	af00      	add	r7, sp, #0
  4009fe:	4603      	mov	r3, r0
  400a00:	71fb      	strb	r3, [r7, #7]
	//Increment the number of interrupts that occurred
	//since the last time the FSM was run.
	if (pinNum == 32)
  400a02:	79fb      	ldrb	r3, [r7, #7]
  400a04:	2b20      	cmp	r3, #32
  400a06:	d105      	bne.n	400a14 <AT86_IRQ_Handler+0x1c>
	{
		Instance[AT86_INSTANCE0].numInterrupts++;;
  400a08:	4b0b      	ldr	r3, [pc, #44]	; (400a38 <AT86_IRQ_Handler+0x40>)
  400a0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  400a0c:	3301      	adds	r3, #1
  400a0e:	b29a      	uxth	r2, r3
  400a10:	4b09      	ldr	r3, [pc, #36]	; (400a38 <AT86_IRQ_Handler+0x40>)
  400a12:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	if (pinNum == 119)
  400a14:	79fb      	ldrb	r3, [r7, #7]
  400a16:	2b77      	cmp	r3, #119	; 0x77
  400a18:	d107      	bne.n	400a2a <AT86_IRQ_Handler+0x32>
	{
		Instance[AT86_INSTANCE1].numInterrupts++;;
  400a1a:	4b07      	ldr	r3, [pc, #28]	; (400a38 <AT86_IRQ_Handler+0x40>)
  400a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
  400a20:	3301      	adds	r3, #1
  400a22:	b29a      	uxth	r2, r3
  400a24:	4b04      	ldr	r3, [pc, #16]	; (400a38 <AT86_IRQ_Handler+0x40>)
  400a26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	}
}
  400a2a:	bf00      	nop
  400a2c:	370c      	adds	r7, #12
  400a2e:	46bd      	mov	sp, r7
  400a30:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a34:	4770      	bx	lr
  400a36:	bf00      	nop
  400a38:	2040003c 	.word	0x2040003c

00400a3c <AT86_write_reg>:

void AT86_write_reg(uint16_t reg, uint8_t val, AT86_Instance *at)
{
  400a3c:	b590      	push	{r4, r7, lr}
  400a3e:	b083      	sub	sp, #12
  400a40:	af00      	add	r7, sp, #0
  400a42:	4603      	mov	r3, r0
  400a44:	603a      	str	r2, [r7, #0]
  400a46:	80fb      	strh	r3, [r7, #6]
  400a48:	460b      	mov	r3, r1
  400a4a:	717b      	strb	r3, [r7, #5]
	txBuf[0] = 0x80 | (reg >> 8);
  400a4c:	88fb      	ldrh	r3, [r7, #6]
  400a4e:	0a1b      	lsrs	r3, r3, #8
  400a50:	b29b      	uxth	r3, r3
  400a52:	b2db      	uxtb	r3, r3
  400a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400a58:	b2da      	uxtb	r2, r3
  400a5a:	4b0a      	ldr	r3, [pc, #40]	; (400a84 <AT86_write_reg+0x48>)
  400a5c:	701a      	strb	r2, [r3, #0]
	txBuf[1] = reg & 0x00FF;
  400a5e:	88fb      	ldrh	r3, [r7, #6]
  400a60:	b2da      	uxtb	r2, r3
  400a62:	4b08      	ldr	r3, [pc, #32]	; (400a84 <AT86_write_reg+0x48>)
  400a64:	705a      	strb	r2, [r3, #1]
	txBuf[2] = val;
  400a66:	4a07      	ldr	r2, [pc, #28]	; (400a84 <AT86_write_reg+0x48>)
  400a68:	797b      	ldrb	r3, [r7, #5]
  400a6a:	7093      	strb	r3, [r2, #2]
	glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 3);
  400a6c:	683b      	ldr	r3, [r7, #0]
  400a6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400a70:	2303      	movs	r3, #3
  400a72:	4a05      	ldr	r2, [pc, #20]	; (400a88 <AT86_write_reg+0x4c>)
  400a74:	4903      	ldr	r1, [pc, #12]	; (400a84 <AT86_write_reg+0x48>)
  400a76:	4c05      	ldr	r4, [pc, #20]	; (400a8c <AT86_write_reg+0x50>)
  400a78:	47a0      	blx	r4
}
  400a7a:	bf00      	nop
  400a7c:	370c      	adds	r7, #12
  400a7e:	46bd      	mov	sp, r7
  400a80:	bd90      	pop	{r4, r7, pc}
  400a82:	bf00      	nop
  400a84:	204000d0 	.word	0x204000d0
  400a88:	204008d0 	.word	0x204008d0
  400a8c:	00401ab9 	.word	0x00401ab9

00400a90 <AT86_read_bytes_from_reg>:

void AT86_read_bytes_from_reg(uint16_t reg, uint16_t numBytes, AT86_Instance *at)
{
  400a90:	b590      	push	{r4, r7, lr}
  400a92:	b083      	sub	sp, #12
  400a94:	af00      	add	r7, sp, #0
  400a96:	4603      	mov	r3, r0
  400a98:	603a      	str	r2, [r7, #0]
  400a9a:	80fb      	strh	r3, [r7, #6]
  400a9c:	460b      	mov	r3, r1
  400a9e:	80bb      	strh	r3, [r7, #4]
	txBuf[0] = 0x00 | (reg >> 8);
  400aa0:	88fb      	ldrh	r3, [r7, #6]
  400aa2:	0a1b      	lsrs	r3, r3, #8
  400aa4:	b29b      	uxth	r3, r3
  400aa6:	b2da      	uxtb	r2, r3
  400aa8:	4b09      	ldr	r3, [pc, #36]	; (400ad0 <AT86_read_bytes_from_reg+0x40>)
  400aaa:	701a      	strb	r2, [r3, #0]
	txBuf[1] = reg & 0x00FF;
  400aac:	88fb      	ldrh	r3, [r7, #6]
  400aae:	b2da      	uxtb	r2, r3
  400ab0:	4b07      	ldr	r3, [pc, #28]	; (400ad0 <AT86_read_bytes_from_reg+0x40>)
  400ab2:	705a      	strb	r2, [r3, #1]
	glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 2 + numBytes);	
  400ab4:	683b      	ldr	r3, [r7, #0]
  400ab6:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400ab8:	88bb      	ldrh	r3, [r7, #4]
  400aba:	3302      	adds	r3, #2
  400abc:	b29b      	uxth	r3, r3
  400abe:	4a05      	ldr	r2, [pc, #20]	; (400ad4 <AT86_read_bytes_from_reg+0x44>)
  400ac0:	4903      	ldr	r1, [pc, #12]	; (400ad0 <AT86_read_bytes_from_reg+0x40>)
  400ac2:	4c05      	ldr	r4, [pc, #20]	; (400ad8 <AT86_read_bytes_from_reg+0x48>)
  400ac4:	47a0      	blx	r4
  400ac6:	bf00      	nop
  400ac8:	370c      	adds	r7, #12
  400aca:	46bd      	mov	sp, r7
  400acc:	bd90      	pop	{r4, r7, pc}
  400ace:	bf00      	nop
  400ad0:	204000d0 	.word	0x204000d0
  400ad4:	204008d0 	.word	0x204008d0
  400ad8:	00401ab9 	.word	0x00401ab9

00400adc <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  400adc:	b580      	push	{r7, lr}
  400ade:	af00      	add	r7, sp, #0
	system_init();
  400ae0:	4b01      	ldr	r3, [pc, #4]	; (400ae8 <atmel_start_init+0xc>)
  400ae2:	4798      	blx	r3
}
  400ae4:	bf00      	nop
  400ae6:	bd80      	pop	{r7, pc}
  400ae8:	00401561 	.word	0x00401561

00400aec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400aec:	b580      	push	{r7, lr}
  400aee:	b082      	sub	sp, #8
  400af0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400af2:	4b16      	ldr	r3, [pc, #88]	; (400b4c <Reset_Handler+0x60>)
  400af4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  400af6:	4b16      	ldr	r3, [pc, #88]	; (400b50 <Reset_Handler+0x64>)
  400af8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  400afa:	687a      	ldr	r2, [r7, #4]
  400afc:	683b      	ldr	r3, [r7, #0]
  400afe:	429a      	cmp	r2, r3
  400b00:	d00c      	beq.n	400b1c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400b02:	e007      	b.n	400b14 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400b04:	683b      	ldr	r3, [r7, #0]
  400b06:	1d1a      	adds	r2, r3, #4
  400b08:	603a      	str	r2, [r7, #0]
  400b0a:	687a      	ldr	r2, [r7, #4]
  400b0c:	1d11      	adds	r1, r2, #4
  400b0e:	6079      	str	r1, [r7, #4]
  400b10:	6812      	ldr	r2, [r2, #0]
  400b12:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400b14:	683b      	ldr	r3, [r7, #0]
  400b16:	4a0f      	ldr	r2, [pc, #60]	; (400b54 <Reset_Handler+0x68>)
  400b18:	4293      	cmp	r3, r2
  400b1a:	d3f3      	bcc.n	400b04 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400b1c:	4b0e      	ldr	r3, [pc, #56]	; (400b58 <Reset_Handler+0x6c>)
  400b1e:	603b      	str	r3, [r7, #0]
  400b20:	e004      	b.n	400b2c <Reset_Handler+0x40>
                *pDest++ = 0;
  400b22:	683b      	ldr	r3, [r7, #0]
  400b24:	1d1a      	adds	r2, r3, #4
  400b26:	603a      	str	r2, [r7, #0]
  400b28:	2200      	movs	r2, #0
  400b2a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400b2c:	683b      	ldr	r3, [r7, #0]
  400b2e:	4a0b      	ldr	r2, [pc, #44]	; (400b5c <Reset_Handler+0x70>)
  400b30:	4293      	cmp	r3, r2
  400b32:	d3f6      	bcc.n	400b22 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400b34:	4b0a      	ldr	r3, [pc, #40]	; (400b60 <Reset_Handler+0x74>)
  400b36:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b38:	4a0a      	ldr	r2, [pc, #40]	; (400b64 <Reset_Handler+0x78>)
  400b3a:	687b      	ldr	r3, [r7, #4]
  400b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b40:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  400b42:	4b09      	ldr	r3, [pc, #36]	; (400b68 <Reset_Handler+0x7c>)
  400b44:	4798      	blx	r3

        /* Branch to main function */
        main();
  400b46:	4b09      	ldr	r3, [pc, #36]	; (400b6c <Reset_Handler+0x80>)
  400b48:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400b4a:	e7fe      	b.n	400b4a <Reset_Handler+0x5e>
  400b4c:	004077f8 	.word	0x004077f8
  400b50:	20400000 	.word	0x20400000
  400b54:	20400020 	.word	0x20400020
  400b58:	20400020 	.word	0x20400020
  400b5c:	2040144c 	.word	0x2040144c
  400b60:	00400000 	.word	0x00400000
  400b64:	e000ed00 	.word	0xe000ed00
  400b68:	00407491 	.word	0x00407491
  400b6c:	00407449 	.word	0x00407449

00400b70 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b70:	b480      	push	{r7}
  400b72:	af00      	add	r7, sp, #0
        while (1) {
  400b74:	e7fe      	b.n	400b74 <Dummy_Handler+0x4>

00400b76 <hri_matrix_set_CCFG_SYSIO_reg>:
	((Matrix *)hw)->CCFG_SYSIO ^= CCFG_SYSIO_SYSIO12;
	MATRIX_CRITICAL_SECTION_LEAVE();
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
  400b76:	b480      	push	{r7}
  400b78:	b083      	sub	sp, #12
  400b7a:	af00      	add	r7, sp, #0
  400b7c:	6078      	str	r0, [r7, #4]
  400b7e:	6039      	str	r1, [r7, #0]
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400b80:	687b      	ldr	r3, [r7, #4]
  400b82:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400b86:	683b      	ldr	r3, [r7, #0]
  400b88:	431a      	orrs	r2, r3
  400b8a:	687b      	ldr	r3, [r7, #4]
  400b8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	MATRIX_CRITICAL_SECTION_LEAVE();
}
  400b90:	bf00      	nop
  400b92:	370c      	adds	r7, #12
  400b94:	46bd      	mov	sp, r7
  400b96:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b9a:	4770      	bx	lr

00400b9c <hri_pio_set_PSR_reg>:
{
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400b9c:	b480      	push	{r7}
  400b9e:	b083      	sub	sp, #12
  400ba0:	af00      	add	r7, sp, #0
  400ba2:	6078      	str	r0, [r7, #4]
  400ba4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  400ba6:	687b      	ldr	r3, [r7, #4]
  400ba8:	683a      	ldr	r2, [r7, #0]
  400baa:	601a      	str	r2, [r3, #0]
}
  400bac:	bf00      	nop
  400bae:	370c      	adds	r7, #12
  400bb0:	46bd      	mov	sp, r7
  400bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bb6:	4770      	bx	lr

00400bb8 <hri_pio_clear_PSR_reg>:
	((Pio *)hw)->PIO_PER = data;
	((Pio *)hw)->PIO_PDR = ~data;
}

static inline void hri_pio_clear_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400bb8:	b480      	push	{r7}
  400bba:	b083      	sub	sp, #12
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
  400bc0:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  400bc2:	687b      	ldr	r3, [r7, #4]
  400bc4:	683a      	ldr	r2, [r7, #0]
  400bc6:	605a      	str	r2, [r3, #4]
}
  400bc8:	bf00      	nop
  400bca:	370c      	adds	r7, #12
  400bcc:	46bd      	mov	sp, r7
  400bce:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd2:	4770      	bx	lr

00400bd4 <hri_pio_set_OSR_reg>:
{
	((Pio *)hw)->PIO_ODR = PIO_OSR_P31;
}

static inline void hri_pio_set_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400bd4:	b480      	push	{r7}
  400bd6:	b083      	sub	sp, #12
  400bd8:	af00      	add	r7, sp, #0
  400bda:	6078      	str	r0, [r7, #4]
  400bdc:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  400bde:	687b      	ldr	r3, [r7, #4]
  400be0:	683a      	ldr	r2, [r7, #0]
  400be2:	611a      	str	r2, [r3, #16]
}
  400be4:	bf00      	nop
  400be6:	370c      	adds	r7, #12
  400be8:	46bd      	mov	sp, r7
  400bea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bee:	4770      	bx	lr

00400bf0 <hri_pio_clear_OSR_reg>:
	((Pio *)hw)->PIO_OER = data;
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400bf0:	b480      	push	{r7}
  400bf2:	b083      	sub	sp, #12
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	6078      	str	r0, [r7, #4]
  400bf8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400bfa:	687b      	ldr	r3, [r7, #4]
  400bfc:	683a      	ldr	r2, [r7, #0]
  400bfe:	615a      	str	r2, [r3, #20]
}
  400c00:	bf00      	nop
  400c02:	370c      	adds	r7, #12
  400c04:	46bd      	mov	sp, r7
  400c06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0a:	4770      	bx	lr

00400c0c <hri_pio_set_ODSR_reg>:
{
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400c0c:	b480      	push	{r7}
  400c0e:	b083      	sub	sp, #12
  400c10:	af00      	add	r7, sp, #0
  400c12:	6078      	str	r0, [r7, #4]
  400c14:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400c16:	687b      	ldr	r3, [r7, #4]
  400c18:	683a      	ldr	r2, [r7, #0]
  400c1a:	631a      	str	r2, [r3, #48]	; 0x30
}
  400c1c:	bf00      	nop
  400c1e:	370c      	adds	r7, #12
  400c20:	46bd      	mov	sp, r7
  400c22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c26:	4770      	bx	lr

00400c28 <hri_pio_clear_ODSR_reg>:
	((Pio *)hw)->PIO_SODR = data;
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400c28:	b480      	push	{r7}
  400c2a:	b083      	sub	sp, #12
  400c2c:	af00      	add	r7, sp, #0
  400c2e:	6078      	str	r0, [r7, #4]
  400c30:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400c32:	687b      	ldr	r3, [r7, #4]
  400c34:	683a      	ldr	r2, [r7, #0]
  400c36:	635a      	str	r2, [r3, #52]	; 0x34
}
  400c38:	bf00      	nop
  400c3a:	370c      	adds	r7, #12
  400c3c:	46bd      	mov	sp, r7
  400c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c42:	4770      	bx	lr

00400c44 <hri_pio_set_PUSR_reg>:
{
	((Pio *)hw)->PIO_PUDR = PIO_PUSR_P31;
}

static inline void hri_pio_set_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400c44:	b480      	push	{r7}
  400c46:	b083      	sub	sp, #12
  400c48:	af00      	add	r7, sp, #0
  400c4a:	6078      	str	r0, [r7, #4]
  400c4c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUER = mask;
  400c4e:	687b      	ldr	r3, [r7, #4]
  400c50:	683a      	ldr	r2, [r7, #0]
  400c52:	665a      	str	r2, [r3, #100]	; 0x64
}
  400c54:	bf00      	nop
  400c56:	370c      	adds	r7, #12
  400c58:	46bd      	mov	sp, r7
  400c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c5e:	4770      	bx	lr

00400c60 <hri_pio_clear_PUSR_reg>:
	((Pio *)hw)->PIO_PUER = data;
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400c60:	b480      	push	{r7}
  400c62:	b083      	sub	sp, #12
  400c64:	af00      	add	r7, sp, #0
  400c66:	6078      	str	r0, [r7, #4]
  400c68:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUDR = mask;
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	683a      	ldr	r2, [r7, #0]
  400c6e:	661a      	str	r2, [r3, #96]	; 0x60
}
  400c70:	bf00      	nop
  400c72:	370c      	adds	r7, #12
  400c74:	46bd      	mov	sp, r7
  400c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c7a:	4770      	bx	lr

00400c7c <hri_pio_set_PPDSR_reg>:
{
	((Pio *)hw)->PIO_PPDDR = PIO_PPDSR_P31;
}

static inline void hri_pio_set_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  400c7c:	b480      	push	{r7}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
  400c82:	6078      	str	r0, [r7, #4]
  400c84:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDER = mask;
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	683a      	ldr	r2, [r7, #0]
  400c8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
  400c8e:	bf00      	nop
  400c90:	370c      	adds	r7, #12
  400c92:	46bd      	mov	sp, r7
  400c94:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c98:	4770      	bx	lr

00400c9a <hri_pio_clear_PPDSR_reg>:
	((Pio *)hw)->PIO_PPDER = data;
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  400c9a:	b480      	push	{r7}
  400c9c:	b083      	sub	sp, #12
  400c9e:	af00      	add	r7, sp, #0
  400ca0:	6078      	str	r0, [r7, #4]
  400ca2:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDDR = mask;
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	683a      	ldr	r2, [r7, #0]
  400ca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  400cac:	bf00      	nop
  400cae:	370c      	adds	r7, #12
  400cb0:	46bd      	mov	sp, r7
  400cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cb6:	4770      	bx	lr

00400cb8 <hri_pio_set_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] ^= PIO_ABCDSR_P31;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400cb8:	b480      	push	{r7}
  400cba:	b085      	sub	sp, #20
  400cbc:	af00      	add	r7, sp, #0
  400cbe:	60f8      	str	r0, [r7, #12]
  400cc0:	460b      	mov	r3, r1
  400cc2:	607a      	str	r2, [r7, #4]
  400cc4:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400cc6:	7afa      	ldrb	r2, [r7, #11]
  400cc8:	7af9      	ldrb	r1, [r7, #11]
  400cca:	68fb      	ldr	r3, [r7, #12]
  400ccc:	311c      	adds	r1, #28
  400cce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400cd2:	687b      	ldr	r3, [r7, #4]
  400cd4:	4319      	orrs	r1, r3
  400cd6:	68fb      	ldr	r3, [r7, #12]
  400cd8:	321c      	adds	r2, #28
  400cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400cde:	bf00      	nop
  400ce0:	3714      	adds	r7, #20
  400ce2:	46bd      	mov	sp, r7
  400ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ce8:	4770      	bx	lr

00400cea <hri_pio_clear_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] = data;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400cea:	b480      	push	{r7}
  400cec:	b085      	sub	sp, #20
  400cee:	af00      	add	r7, sp, #0
  400cf0:	60f8      	str	r0, [r7, #12]
  400cf2:	460b      	mov	r3, r1
  400cf4:	607a      	str	r2, [r7, #4]
  400cf6:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400cf8:	7afa      	ldrb	r2, [r7, #11]
  400cfa:	7af9      	ldrb	r1, [r7, #11]
  400cfc:	68fb      	ldr	r3, [r7, #12]
  400cfe:	311c      	adds	r1, #28
  400d00:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400d04:	687b      	ldr	r3, [r7, #4]
  400d06:	43db      	mvns	r3, r3
  400d08:	4019      	ands	r1, r3
  400d0a:	68fb      	ldr	r3, [r7, #12]
  400d0c:	321c      	adds	r2, #28
  400d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400d12:	bf00      	nop
  400d14:	3714      	adds	r7, #20
  400d16:	46bd      	mov	sp, r7
  400d18:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d1c:	4770      	bx	lr

00400d1e <hri_pmc_set_PCSR0_reg>:
{
	((Pmc *)hw)->PMC_PCDR0 = PMC_PCSR0_PID31;
}

static inline void hri_pmc_set_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  400d1e:	b480      	push	{r7}
  400d20:	b083      	sub	sp, #12
  400d22:	af00      	add	r7, sp, #0
  400d24:	6078      	str	r0, [r7, #4]
  400d26:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	683a      	ldr	r2, [r7, #0]
  400d2c:	611a      	str	r2, [r3, #16]
}
  400d2e:	bf00      	nop
  400d30:	370c      	adds	r7, #12
  400d32:	46bd      	mov	sp, r7
  400d34:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d38:	4770      	bx	lr

00400d3a <hri_pmc_get_PCSR0_reg>:

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  400d3a:	b480      	push	{r7}
  400d3c:	b085      	sub	sp, #20
  400d3e:	af00      	add	r7, sp, #0
  400d40:	6078      	str	r0, [r7, #4]
  400d42:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d44:	687b      	ldr	r3, [r7, #4]
  400d46:	699b      	ldr	r3, [r3, #24]
  400d48:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400d4a:	68fa      	ldr	r2, [r7, #12]
  400d4c:	683b      	ldr	r3, [r7, #0]
  400d4e:	4013      	ands	r3, r2
  400d50:	60fb      	str	r3, [r7, #12]
	return tmp;
  400d52:	68fb      	ldr	r3, [r7, #12]
}
  400d54:	4618      	mov	r0, r3
  400d56:	3714      	adds	r7, #20
  400d58:	46bd      	mov	sp, r7
  400d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d5e:	4770      	bx	lr

00400d60 <hri_pmc_set_PCSR1_reg>:
{
	((Pmc *)hw)->PMC_PCDR1 = PMC_PCSR1_PID60;
}

static inline void hri_pmc_set_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  400d60:	b480      	push	{r7}
  400d62:	b083      	sub	sp, #12
  400d64:	af00      	add	r7, sp, #0
  400d66:	6078      	str	r0, [r7, #4]
  400d68:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  400d6a:	687b      	ldr	r3, [r7, #4]
  400d6c:	683a      	ldr	r2, [r7, #0]
  400d6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  400d72:	bf00      	nop
  400d74:	370c      	adds	r7, #12
  400d76:	46bd      	mov	sp, r7
  400d78:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d7c:	4770      	bx	lr

00400d7e <hri_pmc_get_PCSR1_reg>:

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  400d7e:	b480      	push	{r7}
  400d80:	b085      	sub	sp, #20
  400d82:	af00      	add	r7, sp, #0
  400d84:	6078      	str	r0, [r7, #4]
  400d86:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400d88:	687b      	ldr	r3, [r7, #4]
  400d8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400d8e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400d90:	68fa      	ldr	r2, [r7, #12]
  400d92:	683b      	ldr	r3, [r7, #0]
  400d94:	4013      	ands	r3, r2
  400d96:	60fb      	str	r3, [r7, #12]
	return tmp;
  400d98:	68fb      	ldr	r3, [r7, #12]
}
  400d9a:	4618      	mov	r0, r3
  400d9c:	3714      	adds	r7, #20
  400d9e:	46bd      	mov	sp, r7
  400da0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da4:	4770      	bx	lr

00400da6 <hri_pmc_write_PCR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_PCR_reg(const void *const hw, hri_pmc_pcr_reg_t data)
{
  400da6:	b480      	push	{r7}
  400da8:	b083      	sub	sp, #12
  400daa:	af00      	add	r7, sp, #0
  400dac:	6078      	str	r0, [r7, #4]
  400dae:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCR = data;
  400db0:	687b      	ldr	r3, [r7, #4]
  400db2:	683a      	ldr	r2, [r7, #0]
  400db4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC_CRITICAL_SECTION_LEAVE();
}
  400db8:	bf00      	nop
  400dba:	370c      	adds	r7, #12
  400dbc:	46bd      	mov	sp, r7
  400dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dc2:	4770      	bx	lr

00400dc4 <hri_pmc_read_PCR_reg>:
	((Pmc *)hw)->PMC_PCR ^= mask;
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_pcr_reg_t hri_pmc_read_PCR_reg(const void *const hw)
{
  400dc4:	b480      	push	{r7}
  400dc6:	b083      	sub	sp, #12
  400dc8:	af00      	add	r7, sp, #0
  400dca:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  400dcc:	687b      	ldr	r3, [r7, #4]
  400dce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  400dd2:	4618      	mov	r0, r3
  400dd4:	370c      	adds	r7, #12
  400dd6:	46bd      	mov	sp, r7
  400dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ddc:	4770      	bx	lr

00400dde <hri_wdt_set_MR_WDDIS_bit>:
	((Wdt *)hw)->WDT_MR ^= WDT_MR_WDRSTEN;
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
  400dde:	b480      	push	{r7}
  400de0:	b083      	sub	sp, #12
  400de2:	af00      	add	r7, sp, #0
  400de4:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400de6:	687b      	ldr	r3, [r7, #4]
  400de8:	685b      	ldr	r3, [r3, #4]
  400dea:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  400dee:	687b      	ldr	r3, [r7, #4]
  400df0:	605a      	str	r2, [r3, #4]
	WDT_CRITICAL_SECTION_LEAVE();
}
  400df2:	bf00      	nop
  400df4:	370c      	adds	r7, #12
  400df6:	46bd      	mov	sp, r7
  400df8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dfc:	4770      	bx	lr
	...

00400e00 <port_to_reg>:

/**
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
  400e00:	b480      	push	{r7}
  400e02:	b083      	sub	sp, #12
  400e04:	af00      	add	r7, sp, #0
  400e06:	4603      	mov	r3, r0
  400e08:	71fb      	strb	r3, [r7, #7]
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  400e0a:	79fb      	ldrb	r3, [r7, #7]
  400e0c:	025b      	lsls	r3, r3, #9
  400e0e:	461a      	mov	r2, r3
  400e10:	4b03      	ldr	r3, [pc, #12]	; (400e20 <port_to_reg+0x20>)
  400e12:	4413      	add	r3, r2
}
  400e14:	4618      	mov	r0, r3
  400e16:	370c      	adds	r7, #12
  400e18:	46bd      	mov	sp, r7
  400e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e1e:	4770      	bx	lr
  400e20:	400e0e00 	.word	0x400e0e00

00400e24 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
  400e24:	b580      	push	{r7, lr}
  400e26:	b084      	sub	sp, #16
  400e28:	af00      	add	r7, sp, #0
  400e2a:	4603      	mov	r3, r0
  400e2c:	6039      	str	r1, [r7, #0]
  400e2e:	71fb      	strb	r3, [r7, #7]
  400e30:	4613      	mov	r3, r2
  400e32:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400e34:	79fb      	ldrb	r3, [r7, #7]
  400e36:	4618      	mov	r0, r3
  400e38:	4b0e      	ldr	r3, [pc, #56]	; (400e74 <_gpio_set_direction+0x50>)
  400e3a:	4798      	blx	r3
  400e3c:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  400e3e:	79bb      	ldrb	r3, [r7, #6]
  400e40:	2b00      	cmp	r3, #0
  400e42:	db0e      	blt.n	400e62 <_gpio_set_direction+0x3e>
  400e44:	2b01      	cmp	r3, #1
  400e46:	dd02      	ble.n	400e4e <_gpio_set_direction+0x2a>
  400e48:	2b02      	cmp	r3, #2
  400e4a:	d005      	beq.n	400e58 <_gpio_set_direction+0x34>
  400e4c:	e009      	b.n	400e62 <_gpio_set_direction+0x3e>
	case GPIO_DIRECTION_OFF:
	case GPIO_DIRECTION_IN:
		hri_pio_clear_OSR_reg(hw, mask);
  400e4e:	6839      	ldr	r1, [r7, #0]
  400e50:	68f8      	ldr	r0, [r7, #12]
  400e52:	4b09      	ldr	r3, [pc, #36]	; (400e78 <_gpio_set_direction+0x54>)
  400e54:	4798      	blx	r3
		break;
  400e56:	e009      	b.n	400e6c <_gpio_set_direction+0x48>

	case GPIO_DIRECTION_OUT:
		hri_pio_set_OSR_reg(hw, mask);
  400e58:	6839      	ldr	r1, [r7, #0]
  400e5a:	68f8      	ldr	r0, [r7, #12]
  400e5c:	4b07      	ldr	r3, [pc, #28]	; (400e7c <_gpio_set_direction+0x58>)
  400e5e:	4798      	blx	r3
		break;
  400e60:	e004      	b.n	400e6c <_gpio_set_direction+0x48>

	default:
		ASSERT(false);
  400e62:	2241      	movs	r2, #65	; 0x41
  400e64:	4906      	ldr	r1, [pc, #24]	; (400e80 <_gpio_set_direction+0x5c>)
  400e66:	2000      	movs	r0, #0
  400e68:	4b06      	ldr	r3, [pc, #24]	; (400e84 <_gpio_set_direction+0x60>)
  400e6a:	4798      	blx	r3
	}
}
  400e6c:	bf00      	nop
  400e6e:	3710      	adds	r7, #16
  400e70:	46bd      	mov	sp, r7
  400e72:	bd80      	pop	{r7, pc}
  400e74:	00400e01 	.word	0x00400e01
  400e78:	00400bf1 	.word	0x00400bf1
  400e7c:	00400bd5 	.word	0x00400bd5
  400e80:	00407500 	.word	0x00407500
  400e84:	00402d25 	.word	0x00402d25

00400e88 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
  400e88:	b580      	push	{r7, lr}
  400e8a:	b084      	sub	sp, #16
  400e8c:	af00      	add	r7, sp, #0
  400e8e:	4603      	mov	r3, r0
  400e90:	6039      	str	r1, [r7, #0]
  400e92:	71fb      	strb	r3, [r7, #7]
  400e94:	4613      	mov	r3, r2
  400e96:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400e98:	79fb      	ldrb	r3, [r7, #7]
  400e9a:	4618      	mov	r0, r3
  400e9c:	4b09      	ldr	r3, [pc, #36]	; (400ec4 <_gpio_set_level+0x3c>)
  400e9e:	4798      	blx	r3
  400ea0:	60f8      	str	r0, [r7, #12]
	if (level) {
  400ea2:	79bb      	ldrb	r3, [r7, #6]
  400ea4:	2b00      	cmp	r3, #0
  400ea6:	d004      	beq.n	400eb2 <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  400ea8:	6839      	ldr	r1, [r7, #0]
  400eaa:	68f8      	ldr	r0, [r7, #12]
  400eac:	4b06      	ldr	r3, [pc, #24]	; (400ec8 <_gpio_set_level+0x40>)
  400eae:	4798      	blx	r3
	} else {
		hri_pio_clear_ODSR_reg(hw, mask);
	}
}
  400eb0:	e003      	b.n	400eba <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  400eb2:	6839      	ldr	r1, [r7, #0]
  400eb4:	68f8      	ldr	r0, [r7, #12]
  400eb6:	4b05      	ldr	r3, [pc, #20]	; (400ecc <_gpio_set_level+0x44>)
  400eb8:	4798      	blx	r3
}
  400eba:	bf00      	nop
  400ebc:	3710      	adds	r7, #16
  400ebe:	46bd      	mov	sp, r7
  400ec0:	bd80      	pop	{r7, pc}
  400ec2:	bf00      	nop
  400ec4:	00400e01 	.word	0x00400e01
  400ec8:	00400c0d 	.word	0x00400c0d
  400ecc:	00400c29 	.word	0x00400c29

00400ed0 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
  400ed0:	b580      	push	{r7, lr}
  400ed2:	b084      	sub	sp, #16
  400ed4:	af00      	add	r7, sp, #0
  400ed6:	4603      	mov	r3, r0
  400ed8:	71fb      	strb	r3, [r7, #7]
  400eda:	460b      	mov	r3, r1
  400edc:	71bb      	strb	r3, [r7, #6]
  400ede:	4613      	mov	r3, r2
  400ee0:	717b      	strb	r3, [r7, #5]
	void *const hw = port_to_reg(port);
  400ee2:	79fb      	ldrb	r3, [r7, #7]
  400ee4:	4618      	mov	r0, r3
  400ee6:	4b23      	ldr	r3, [pc, #140]	; (400f74 <_gpio_set_pin_pull_mode+0xa4>)
  400ee8:	4798      	blx	r3
  400eea:	60f8      	str	r0, [r7, #12]
	switch (pull_mode) {
  400eec:	797b      	ldrb	r3, [r7, #5]
  400eee:	2b01      	cmp	r3, #1
  400ef0:	d014      	beq.n	400f1c <_gpio_set_pin_pull_mode+0x4c>
  400ef2:	2b02      	cmp	r3, #2
  400ef4:	d023      	beq.n	400f3e <_gpio_set_pin_pull_mode+0x6e>
  400ef6:	2b00      	cmp	r3, #0
  400ef8:	d132      	bne.n	400f60 <_gpio_set_pin_pull_mode+0x90>
	case GPIO_PULL_OFF:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400efa:	79bb      	ldrb	r3, [r7, #6]
  400efc:	2201      	movs	r2, #1
  400efe:	fa02 f303 	lsl.w	r3, r2, r3
  400f02:	4619      	mov	r1, r3
  400f04:	68f8      	ldr	r0, [r7, #12]
  400f06:	4b1c      	ldr	r3, [pc, #112]	; (400f78 <_gpio_set_pin_pull_mode+0xa8>)
  400f08:	4798      	blx	r3
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400f0a:	79bb      	ldrb	r3, [r7, #6]
  400f0c:	2201      	movs	r2, #1
  400f0e:	fa02 f303 	lsl.w	r3, r2, r3
  400f12:	4619      	mov	r1, r3
  400f14:	68f8      	ldr	r0, [r7, #12]
  400f16:	4b19      	ldr	r3, [pc, #100]	; (400f7c <_gpio_set_pin_pull_mode+0xac>)
  400f18:	4798      	blx	r3
		break;
  400f1a:	e027      	b.n	400f6c <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_UP:
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400f1c:	79bb      	ldrb	r3, [r7, #6]
  400f1e:	2201      	movs	r2, #1
  400f20:	fa02 f303 	lsl.w	r3, r2, r3
  400f24:	4619      	mov	r1, r3
  400f26:	68f8      	ldr	r0, [r7, #12]
  400f28:	4b14      	ldr	r3, [pc, #80]	; (400f7c <_gpio_set_pin_pull_mode+0xac>)
  400f2a:	4798      	blx	r3
		hri_pio_set_PUSR_reg(hw, 1U << pin);
  400f2c:	79bb      	ldrb	r3, [r7, #6]
  400f2e:	2201      	movs	r2, #1
  400f30:	fa02 f303 	lsl.w	r3, r2, r3
  400f34:	4619      	mov	r1, r3
  400f36:	68f8      	ldr	r0, [r7, #12]
  400f38:	4b11      	ldr	r3, [pc, #68]	; (400f80 <_gpio_set_pin_pull_mode+0xb0>)
  400f3a:	4798      	blx	r3
		break;
  400f3c:	e016      	b.n	400f6c <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_DOWN:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400f3e:	79bb      	ldrb	r3, [r7, #6]
  400f40:	2201      	movs	r2, #1
  400f42:	fa02 f303 	lsl.w	r3, r2, r3
  400f46:	4619      	mov	r1, r3
  400f48:	68f8      	ldr	r0, [r7, #12]
  400f4a:	4b0b      	ldr	r3, [pc, #44]	; (400f78 <_gpio_set_pin_pull_mode+0xa8>)
  400f4c:	4798      	blx	r3
		hri_pio_set_PPDSR_reg(hw, 1U << pin);
  400f4e:	79bb      	ldrb	r3, [r7, #6]
  400f50:	2201      	movs	r2, #1
  400f52:	fa02 f303 	lsl.w	r3, r2, r3
  400f56:	4619      	mov	r1, r3
  400f58:	68f8      	ldr	r0, [r7, #12]
  400f5a:	4b0a      	ldr	r3, [pc, #40]	; (400f84 <_gpio_set_pin_pull_mode+0xb4>)
  400f5c:	4798      	blx	r3
		break;
  400f5e:	e005      	b.n	400f6c <_gpio_set_pin_pull_mode+0x9c>

	default:
		ASSERT(false);
  400f60:	2283      	movs	r2, #131	; 0x83
  400f62:	4909      	ldr	r1, [pc, #36]	; (400f88 <_gpio_set_pin_pull_mode+0xb8>)
  400f64:	2000      	movs	r0, #0
  400f66:	4b09      	ldr	r3, [pc, #36]	; (400f8c <_gpio_set_pin_pull_mode+0xbc>)
  400f68:	4798      	blx	r3
		break;
  400f6a:	bf00      	nop
	}
}
  400f6c:	bf00      	nop
  400f6e:	3710      	adds	r7, #16
  400f70:	46bd      	mov	sp, r7
  400f72:	bd80      	pop	{r7, pc}
  400f74:	00400e01 	.word	0x00400e01
  400f78:	00400c61 	.word	0x00400c61
  400f7c:	00400c9b 	.word	0x00400c9b
  400f80:	00400c45 	.word	0x00400c45
  400f84:	00400c7d 	.word	0x00400c7d
  400f88:	00407500 	.word	0x00407500
  400f8c:	00402d25 	.word	0x00402d25

00400f90 <_gpio_set_pin_function>:

/**
 * \brief Set pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
  400f90:	b580      	push	{r7, lr}
  400f92:	b084      	sub	sp, #16
  400f94:	af00      	add	r7, sp, #0
  400f96:	6078      	str	r0, [r7, #4]
  400f98:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  400f9a:	687b      	ldr	r3, [r7, #4]
  400f9c:	095b      	lsrs	r3, r3, #5
  400f9e:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	b2db      	uxtb	r3, r3
  400fa4:	f003 031f 	and.w	r3, r3, #31
  400fa8:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  400faa:	7bfb      	ldrb	r3, [r7, #15]
  400fac:	4618      	mov	r0, r3
  400fae:	4b33      	ldr	r3, [pc, #204]	; (40107c <_gpio_set_pin_function+0xec>)
  400fb0:	4798      	blx	r3
  400fb2:	60b8      	str	r0, [r7, #8]

	if ((enum gpio_port)port == GPIO_PORTB) {
  400fb4:	7bfb      	ldrb	r3, [r7, #15]
  400fb6:	2b01      	cmp	r3, #1
  400fb8:	d116      	bne.n	400fe8 <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  400fba:	7bbb      	ldrb	r3, [r7, #14]
  400fbc:	2b04      	cmp	r3, #4
  400fbe:	d00b      	beq.n	400fd8 <_gpio_set_pin_function+0x48>
  400fc0:	7bbb      	ldrb	r3, [r7, #14]
  400fc2:	2b05      	cmp	r3, #5
  400fc4:	d008      	beq.n	400fd8 <_gpio_set_pin_function+0x48>
  400fc6:	7bbb      	ldrb	r3, [r7, #14]
  400fc8:	2b06      	cmp	r3, #6
  400fca:	d005      	beq.n	400fd8 <_gpio_set_pin_function+0x48>
  400fcc:	7bbb      	ldrb	r3, [r7, #14]
  400fce:	2b07      	cmp	r3, #7
  400fd0:	d002      	beq.n	400fd8 <_gpio_set_pin_function+0x48>
  400fd2:	7bbb      	ldrb	r3, [r7, #14]
  400fd4:	2b0c      	cmp	r3, #12
  400fd6:	d107      	bne.n	400fe8 <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  400fd8:	7bbb      	ldrb	r3, [r7, #14]
  400fda:	2201      	movs	r2, #1
  400fdc:	fa02 f303 	lsl.w	r3, r2, r3
  400fe0:	4619      	mov	r1, r3
  400fe2:	4827      	ldr	r0, [pc, #156]	; (401080 <_gpio_set_pin_function+0xf0>)
  400fe4:	4b27      	ldr	r3, [pc, #156]	; (401084 <_gpio_set_pin_function+0xf4>)
  400fe6:	4798      	blx	r3
		}
	}

	if (function == GPIO_PIN_FUNCTION_OFF) {
  400fe8:	683b      	ldr	r3, [r7, #0]
  400fea:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fee:	d108      	bne.n	401002 <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  400ff0:	7bbb      	ldrb	r3, [r7, #14]
  400ff2:	2201      	movs	r2, #1
  400ff4:	fa02 f303 	lsl.w	r3, r2, r3
  400ff8:	4619      	mov	r1, r3
  400ffa:	68b8      	ldr	r0, [r7, #8]
  400ffc:	4b22      	ldr	r3, [pc, #136]	; (401088 <_gpio_set_pin_function+0xf8>)
  400ffe:	4798      	blx	r3
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
		}

		hri_pio_clear_PSR_reg(hw, 1U << pin);
	}
}
  401000:	e037      	b.n	401072 <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  401002:	683b      	ldr	r3, [r7, #0]
  401004:	f003 0301 	and.w	r3, r3, #1
  401008:	2b00      	cmp	r3, #0
  40100a:	d009      	beq.n	401020 <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  40100c:	7bbb      	ldrb	r3, [r7, #14]
  40100e:	2201      	movs	r2, #1
  401010:	fa02 f303 	lsl.w	r3, r2, r3
  401014:	461a      	mov	r2, r3
  401016:	2100      	movs	r1, #0
  401018:	68b8      	ldr	r0, [r7, #8]
  40101a:	4b1c      	ldr	r3, [pc, #112]	; (40108c <_gpio_set_pin_function+0xfc>)
  40101c:	4798      	blx	r3
  40101e:	e008      	b.n	401032 <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  401020:	7bbb      	ldrb	r3, [r7, #14]
  401022:	2201      	movs	r2, #1
  401024:	fa02 f303 	lsl.w	r3, r2, r3
  401028:	461a      	mov	r2, r3
  40102a:	2100      	movs	r1, #0
  40102c:	68b8      	ldr	r0, [r7, #8]
  40102e:	4b18      	ldr	r3, [pc, #96]	; (401090 <_gpio_set_pin_function+0x100>)
  401030:	4798      	blx	r3
		if (function & 0x2) {
  401032:	683b      	ldr	r3, [r7, #0]
  401034:	f003 0302 	and.w	r3, r3, #2
  401038:	2b00      	cmp	r3, #0
  40103a:	d009      	beq.n	401050 <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  40103c:	7bbb      	ldrb	r3, [r7, #14]
  40103e:	2201      	movs	r2, #1
  401040:	fa02 f303 	lsl.w	r3, r2, r3
  401044:	461a      	mov	r2, r3
  401046:	2101      	movs	r1, #1
  401048:	68b8      	ldr	r0, [r7, #8]
  40104a:	4b10      	ldr	r3, [pc, #64]	; (40108c <_gpio_set_pin_function+0xfc>)
  40104c:	4798      	blx	r3
  40104e:	e008      	b.n	401062 <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  401050:	7bbb      	ldrb	r3, [r7, #14]
  401052:	2201      	movs	r2, #1
  401054:	fa02 f303 	lsl.w	r3, r2, r3
  401058:	461a      	mov	r2, r3
  40105a:	2101      	movs	r1, #1
  40105c:	68b8      	ldr	r0, [r7, #8]
  40105e:	4b0c      	ldr	r3, [pc, #48]	; (401090 <_gpio_set_pin_function+0x100>)
  401060:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  401062:	7bbb      	ldrb	r3, [r7, #14]
  401064:	2201      	movs	r2, #1
  401066:	fa02 f303 	lsl.w	r3, r2, r3
  40106a:	4619      	mov	r1, r3
  40106c:	68b8      	ldr	r0, [r7, #8]
  40106e:	4b09      	ldr	r3, [pc, #36]	; (401094 <_gpio_set_pin_function+0x104>)
  401070:	4798      	blx	r3
}
  401072:	bf00      	nop
  401074:	3710      	adds	r7, #16
  401076:	46bd      	mov	sp, r7
  401078:	bd80      	pop	{r7, pc}
  40107a:	bf00      	nop
  40107c:	00400e01 	.word	0x00400e01
  401080:	40088000 	.word	0x40088000
  401084:	00400b77 	.word	0x00400b77
  401088:	00400b9d 	.word	0x00400b9d
  40108c:	00400cb9 	.word	0x00400cb9
  401090:	00400ceb 	.word	0x00400ceb
  401094:	00400bb9 	.word	0x00400bb9

00401098 <gpio_set_pin_pull_mode>:
 *                      resistor
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
  401098:	b580      	push	{r7, lr}
  40109a:	b082      	sub	sp, #8
  40109c:	af00      	add	r7, sp, #0
  40109e:	4603      	mov	r3, r0
  4010a0:	460a      	mov	r2, r1
  4010a2:	71fb      	strb	r3, [r7, #7]
  4010a4:	4613      	mov	r3, r2
  4010a6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
  4010a8:	79fb      	ldrb	r3, [r7, #7]
  4010aa:	095b      	lsrs	r3, r3, #5
  4010ac:	b2d8      	uxtb	r0, r3
  4010ae:	79fb      	ldrb	r3, [r7, #7]
  4010b0:	f003 031f 	and.w	r3, r3, #31
  4010b4:	b2db      	uxtb	r3, r3
  4010b6:	79ba      	ldrb	r2, [r7, #6]
  4010b8:	4619      	mov	r1, r3
  4010ba:	4b03      	ldr	r3, [pc, #12]	; (4010c8 <gpio_set_pin_pull_mode+0x30>)
  4010bc:	4798      	blx	r3
}
  4010be:	bf00      	nop
  4010c0:	3708      	adds	r7, #8
  4010c2:	46bd      	mov	sp, r7
  4010c4:	bd80      	pop	{r7, pc}
  4010c6:	bf00      	nop
  4010c8:	00400ed1 	.word	0x00400ed1

004010cc <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
  4010cc:	b580      	push	{r7, lr}
  4010ce:	b082      	sub	sp, #8
  4010d0:	af00      	add	r7, sp, #0
  4010d2:	6078      	str	r0, [r7, #4]
  4010d4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  4010d6:	6839      	ldr	r1, [r7, #0]
  4010d8:	6878      	ldr	r0, [r7, #4]
  4010da:	4b03      	ldr	r3, [pc, #12]	; (4010e8 <gpio_set_pin_function+0x1c>)
  4010dc:	4798      	blx	r3
}
  4010de:	bf00      	nop
  4010e0:	3708      	adds	r7, #8
  4010e2:	46bd      	mov	sp, r7
  4010e4:	bd80      	pop	{r7, pc}
  4010e6:	bf00      	nop
  4010e8:	00400f91 	.word	0x00400f91

004010ec <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
  4010ec:	b580      	push	{r7, lr}
  4010ee:	b082      	sub	sp, #8
  4010f0:	af00      	add	r7, sp, #0
  4010f2:	4603      	mov	r3, r0
  4010f4:	460a      	mov	r2, r1
  4010f6:	71fb      	strb	r3, [r7, #7]
  4010f8:	4613      	mov	r3, r2
  4010fa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  4010fc:	79fb      	ldrb	r3, [r7, #7]
  4010fe:	095b      	lsrs	r3, r3, #5
  401100:	b2d8      	uxtb	r0, r3
  401102:	79fb      	ldrb	r3, [r7, #7]
  401104:	f003 031f 	and.w	r3, r3, #31
  401108:	2201      	movs	r2, #1
  40110a:	fa02 f303 	lsl.w	r3, r2, r3
  40110e:	79ba      	ldrb	r2, [r7, #6]
  401110:	4619      	mov	r1, r3
  401112:	4b03      	ldr	r3, [pc, #12]	; (401120 <gpio_set_pin_direction+0x34>)
  401114:	4798      	blx	r3
}
  401116:	bf00      	nop
  401118:	3708      	adds	r7, #8
  40111a:	46bd      	mov	sp, r7
  40111c:	bd80      	pop	{r7, pc}
  40111e:	bf00      	nop
  401120:	00400e25 	.word	0x00400e25

00401124 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
  401124:	b580      	push	{r7, lr}
  401126:	b082      	sub	sp, #8
  401128:	af00      	add	r7, sp, #0
  40112a:	4603      	mov	r3, r0
  40112c:	460a      	mov	r2, r1
  40112e:	71fb      	strb	r3, [r7, #7]
  401130:	4613      	mov	r3, r2
  401132:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  401134:	79fb      	ldrb	r3, [r7, #7]
  401136:	095b      	lsrs	r3, r3, #5
  401138:	b2d8      	uxtb	r0, r3
  40113a:	79fb      	ldrb	r3, [r7, #7]
  40113c:	f003 031f 	and.w	r3, r3, #31
  401140:	2201      	movs	r2, #1
  401142:	fa02 f303 	lsl.w	r3, r2, r3
  401146:	79ba      	ldrb	r2, [r7, #6]
  401148:	4619      	mov	r1, r3
  40114a:	4b03      	ldr	r3, [pc, #12]	; (401158 <gpio_set_pin_level+0x34>)
  40114c:	4798      	blx	r3
}
  40114e:	bf00      	nop
  401150:	3708      	adds	r7, #8
  401152:	46bd      	mov	sp, r7
  401154:	bd80      	pop	{r7, pc}
  401156:	bf00      	nop
  401158:	00400e89 	.word	0x00400e89

0040115c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
  40115c:	b580      	push	{r7, lr}
  40115e:	af00      	add	r7, sp, #0
	_init_chip();
  401160:	4b01      	ldr	r3, [pc, #4]	; (401168 <init_mcu+0xc>)
  401162:	4798      	blx	r3
}
  401164:	bf00      	nop
  401166:	bd80      	pop	{r7, pc}
  401168:	0040331d 	.word	0x0040331d

0040116c <_pmc_enable_periph_clock>:
 *
 * \param periph_id Peripheral ID
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
  40116c:	b580      	push	{r7, lr}
  40116e:	b084      	sub	sp, #16
  401170:	af00      	add	r7, sp, #0
  401172:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  401174:	687b      	ldr	r3, [r7, #4]
  401176:	2b1f      	cmp	r3, #31
  401178:	d813      	bhi.n	4011a2 <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40117a:	2201      	movs	r2, #1
  40117c:	687b      	ldr	r3, [r7, #4]
  40117e:	fa02 f303 	lsl.w	r3, r2, r3
  401182:	4619      	mov	r1, r3
  401184:	481f      	ldr	r0, [pc, #124]	; (401204 <_pmc_enable_periph_clock+0x98>)
  401186:	4b20      	ldr	r3, [pc, #128]	; (401208 <_pmc_enable_periph_clock+0x9c>)
  401188:	4798      	blx	r3
  40118a:	4603      	mov	r3, r0
  40118c:	2b00      	cmp	r3, #0
  40118e:	d135      	bne.n	4011fc <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  401190:	2201      	movs	r2, #1
  401192:	687b      	ldr	r3, [r7, #4]
  401194:	fa02 f303 	lsl.w	r3, r2, r3
  401198:	4619      	mov	r1, r3
  40119a:	481a      	ldr	r0, [pc, #104]	; (401204 <_pmc_enable_periph_clock+0x98>)
  40119c:	4b1b      	ldr	r3, [pc, #108]	; (40120c <_pmc_enable_periph_clock+0xa0>)
  40119e:	4798      	blx	r3
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
		tmp = hri_pmc_read_PCR_reg(PMC);
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
		hri_pmc_write_PCR_reg(PMC, tmp);
	}
}
  4011a0:	e02c      	b.n	4011fc <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  4011a2:	687b      	ldr	r3, [r7, #4]
  4011a4:	2b3f      	cmp	r3, #63	; 0x3f
  4011a6:	d816      	bhi.n	4011d6 <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  4011a8:	687b      	ldr	r3, [r7, #4]
  4011aa:	3b20      	subs	r3, #32
  4011ac:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4011ae:	2201      	movs	r2, #1
  4011b0:	687b      	ldr	r3, [r7, #4]
  4011b2:	fa02 f303 	lsl.w	r3, r2, r3
  4011b6:	4619      	mov	r1, r3
  4011b8:	4812      	ldr	r0, [pc, #72]	; (401204 <_pmc_enable_periph_clock+0x98>)
  4011ba:	4b15      	ldr	r3, [pc, #84]	; (401210 <_pmc_enable_periph_clock+0xa4>)
  4011bc:	4798      	blx	r3
  4011be:	4603      	mov	r3, r0
  4011c0:	2b00      	cmp	r3, #0
  4011c2:	d11b      	bne.n	4011fc <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  4011c4:	2201      	movs	r2, #1
  4011c6:	687b      	ldr	r3, [r7, #4]
  4011c8:	fa02 f303 	lsl.w	r3, r2, r3
  4011cc:	4619      	mov	r1, r3
  4011ce:	480d      	ldr	r0, [pc, #52]	; (401204 <_pmc_enable_periph_clock+0x98>)
  4011d0:	4b10      	ldr	r3, [pc, #64]	; (401214 <_pmc_enable_periph_clock+0xa8>)
  4011d2:	4798      	blx	r3
}
  4011d4:	e012      	b.n	4011fc <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  4011d6:	687b      	ldr	r3, [r7, #4]
  4011d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4011dc:	4619      	mov	r1, r3
  4011de:	4809      	ldr	r0, [pc, #36]	; (401204 <_pmc_enable_periph_clock+0x98>)
  4011e0:	4b0d      	ldr	r3, [pc, #52]	; (401218 <_pmc_enable_periph_clock+0xac>)
  4011e2:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  4011e4:	4807      	ldr	r0, [pc, #28]	; (401204 <_pmc_enable_periph_clock+0x98>)
  4011e6:	4b0d      	ldr	r3, [pc, #52]	; (40121c <_pmc_enable_periph_clock+0xb0>)
  4011e8:	4798      	blx	r3
  4011ea:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  4011ec:	68fb      	ldr	r3, [r7, #12]
  4011ee:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  4011f2:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  4011f4:	68f9      	ldr	r1, [r7, #12]
  4011f6:	4803      	ldr	r0, [pc, #12]	; (401204 <_pmc_enable_periph_clock+0x98>)
  4011f8:	4b07      	ldr	r3, [pc, #28]	; (401218 <_pmc_enable_periph_clock+0xac>)
  4011fa:	4798      	blx	r3
}
  4011fc:	bf00      	nop
  4011fe:	3710      	adds	r7, #16
  401200:	46bd      	mov	sp, r7
  401202:	bd80      	pop	{r7, pc}
  401204:	400e0600 	.word	0x400e0600
  401208:	00400d3b 	.word	0x00400d3b
  40120c:	00400d1f 	.word	0x00400d1f
  401210:	00400d7f 	.word	0x00400d7f
  401214:	00400d61 	.word	0x00400d61
  401218:	00400da7 	.word	0x00400da7
  40121c:	00400dc5 	.word	0x00400dc5

00401220 <DAC_0_PORT_init>:
struct i2c_m_sync_desc I2C_INSTANCE;

struct usart_sync_descriptor USART_0;

void DAC_0_PORT_init(void)
{
  401220:	b580      	push	{r7, lr}
  401222:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, GPIO_PIN_FUNCTION_OFF);
  401224:	f04f 31ff 	mov.w	r1, #4294967295
  401228:	202d      	movs	r0, #45	; 0x2d
  40122a:	4b04      	ldr	r3, [pc, #16]	; (40123c <DAC_0_PORT_init+0x1c>)
  40122c:	4798      	blx	r3

	gpio_set_pin_function(PD0, GPIO_PIN_FUNCTION_OFF);
  40122e:	f04f 31ff 	mov.w	r1, #4294967295
  401232:	2060      	movs	r0, #96	; 0x60
  401234:	4b01      	ldr	r3, [pc, #4]	; (40123c <DAC_0_PORT_init+0x1c>)
  401236:	4798      	blx	r3
}
  401238:	bf00      	nop
  40123a:	bd80      	pop	{r7, pc}
  40123c:	004010cd 	.word	0x004010cd

00401240 <DAC_0_CLOCK_init>:

void DAC_0_CLOCK_init(void)
{
  401240:	b580      	push	{r7, lr}
  401242:	af00      	add	r7, sp, #0

	_pmc_enable_periph_clock(ID_DACC);
  401244:	201e      	movs	r0, #30
  401246:	4b02      	ldr	r3, [pc, #8]	; (401250 <DAC_0_CLOCK_init+0x10>)
  401248:	4798      	blx	r3
}
  40124a:	bf00      	nop
  40124c:	bd80      	pop	{r7, pc}
  40124e:	bf00      	nop
  401250:	0040116d 	.word	0x0040116d

00401254 <DAC_0_init>:

void DAC_0_init(void)
{
  401254:	b580      	push	{r7, lr}
  401256:	af00      	add	r7, sp, #0
	DAC_0_CLOCK_init();
  401258:	4b04      	ldr	r3, [pc, #16]	; (40126c <DAC_0_init+0x18>)
  40125a:	4798      	blx	r3
	dac_sync_init(&DAC_0, DACC);
  40125c:	4904      	ldr	r1, [pc, #16]	; (401270 <DAC_0_init+0x1c>)
  40125e:	4805      	ldr	r0, [pc, #20]	; (401274 <DAC_0_init+0x20>)
  401260:	4b05      	ldr	r3, [pc, #20]	; (401278 <DAC_0_init+0x24>)
  401262:	4798      	blx	r3
	DAC_0_PORT_init();
  401264:	4b05      	ldr	r3, [pc, #20]	; (40127c <DAC_0_init+0x28>)
  401266:	4798      	blx	r3
}
  401268:	bf00      	nop
  40126a:	bd80      	pop	{r7, pc}
  40126c:	00401241 	.word	0x00401241
  401270:	40040000 	.word	0x40040000
  401274:	20401374 	.word	0x20401374
  401278:	00401d49 	.word	0x00401d49
  40127c:	00401221 	.word	0x00401221

00401280 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
  401280:	b580      	push	{r7, lr}
  401282:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PB0, GPIO_DIRECTION_IN);
  401284:	2101      	movs	r1, #1
  401286:	2020      	movs	r0, #32
  401288:	4b06      	ldr	r3, [pc, #24]	; (4012a4 <EXTERNAL_IRQ_0_init+0x24>)
  40128a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB0,
  40128c:	2100      	movs	r1, #0
  40128e:	2020      	movs	r0, #32
  401290:	4b05      	ldr	r3, [pc, #20]	; (4012a8 <EXTERNAL_IRQ_0_init+0x28>)
  401292:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB0, GPIO_PIN_FUNCTION_OFF);
  401294:	f04f 31ff 	mov.w	r1, #4294967295
  401298:	2020      	movs	r0, #32
  40129a:	4b04      	ldr	r3, [pc, #16]	; (4012ac <EXTERNAL_IRQ_0_init+0x2c>)
  40129c:	4798      	blx	r3
}
  40129e:	bf00      	nop
  4012a0:	bd80      	pop	{r7, pc}
  4012a2:	bf00      	nop
  4012a4:	004010ed 	.word	0x004010ed
  4012a8:	00401099 	.word	0x00401099
  4012ac:	004010cd 	.word	0x004010cd

004012b0 <EXTERNAL_IRQ_1_init>:

void EXTERNAL_IRQ_1_init(void)
{
  4012b0:	b580      	push	{r7, lr}
  4012b2:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PD23, GPIO_DIRECTION_IN);
  4012b4:	2101      	movs	r1, #1
  4012b6:	2077      	movs	r0, #119	; 0x77
  4012b8:	4b06      	ldr	r3, [pc, #24]	; (4012d4 <EXTERNAL_IRQ_1_init+0x24>)
  4012ba:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD23,
  4012bc:	2100      	movs	r1, #0
  4012be:	2077      	movs	r0, #119	; 0x77
  4012c0:	4b05      	ldr	r3, [pc, #20]	; (4012d8 <EXTERNAL_IRQ_1_init+0x28>)
  4012c2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD23, GPIO_PIN_FUNCTION_OFF);
  4012c4:	f04f 31ff 	mov.w	r1, #4294967295
  4012c8:	2077      	movs	r0, #119	; 0x77
  4012ca:	4b04      	ldr	r3, [pc, #16]	; (4012dc <EXTERNAL_IRQ_1_init+0x2c>)
  4012cc:	4798      	blx	r3
}
  4012ce:	bf00      	nop
  4012d0:	bd80      	pop	{r7, pc}
  4012d2:	bf00      	nop
  4012d4:	004010ed 	.word	0x004010ed
  4012d8:	00401099 	.word	0x00401099
  4012dc:	004010cd 	.word	0x004010cd

004012e0 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
  4012e0:	b580      	push	{r7, lr}
  4012e2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD20, MUX_PD20B_SPI0_MISO);
  4012e4:	2101      	movs	r1, #1
  4012e6:	2074      	movs	r0, #116	; 0x74
  4012e8:	4b05      	ldr	r3, [pc, #20]	; (401300 <SPI_1_PORT_init+0x20>)
  4012ea:	4798      	blx	r3

	gpio_set_pin_function(PD21, MUX_PD21B_SPI0_MOSI);
  4012ec:	2101      	movs	r1, #1
  4012ee:	2075      	movs	r0, #117	; 0x75
  4012f0:	4b03      	ldr	r3, [pc, #12]	; (401300 <SPI_1_PORT_init+0x20>)
  4012f2:	4798      	blx	r3

	gpio_set_pin_function(PD22, MUX_PD22B_SPI0_SPCK);
  4012f4:	2101      	movs	r1, #1
  4012f6:	2076      	movs	r0, #118	; 0x76
  4012f8:	4b01      	ldr	r3, [pc, #4]	; (401300 <SPI_1_PORT_init+0x20>)
  4012fa:	4798      	blx	r3
}
  4012fc:	bf00      	nop
  4012fe:	bd80      	pop	{r7, pc}
  401300:	004010cd 	.word	0x004010cd

00401304 <SPI_1_CLOCK_init>:

void SPI_1_CLOCK_init(void)
{
  401304:	b580      	push	{r7, lr}
  401306:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI0);
  401308:	2015      	movs	r0, #21
  40130a:	4b02      	ldr	r3, [pc, #8]	; (401314 <SPI_1_CLOCK_init+0x10>)
  40130c:	4798      	blx	r3
}
  40130e:	bf00      	nop
  401310:	bd80      	pop	{r7, pc}
  401312:	bf00      	nop
  401314:	0040116d 	.word	0x0040116d

00401318 <SPI_1_init>:

void SPI_1_init(void)
{
  401318:	b580      	push	{r7, lr}
  40131a:	af00      	add	r7, sp, #0
	SPI_1_CLOCK_init();
  40131c:	4b04      	ldr	r3, [pc, #16]	; (401330 <SPI_1_init+0x18>)
  40131e:	4798      	blx	r3
	spi_m_dma_init(&SPI_1, SPI0);
  401320:	4904      	ldr	r1, [pc, #16]	; (401334 <SPI_1_init+0x1c>)
  401322:	4805      	ldr	r0, [pc, #20]	; (401338 <SPI_1_init+0x20>)
  401324:	4b05      	ldr	r3, [pc, #20]	; (40133c <SPI_1_init+0x24>)
  401326:	4798      	blx	r3
	SPI_1_PORT_init();
  401328:	4b05      	ldr	r3, [pc, #20]	; (401340 <SPI_1_init+0x28>)
  40132a:	4798      	blx	r3
}
  40132c:	bf00      	nop
  40132e:	bd80      	pop	{r7, pc}
  401330:	00401305 	.word	0x00401305
  401334:	40008000 	.word	0x40008000
  401338:	2040134c 	.word	0x2040134c
  40133c:	0040215d 	.word	0x0040215d
  401340:	004012e1 	.word	0x004012e1

00401344 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
  401344:	b580      	push	{r7, lr}
  401346:	af00      	add	r7, sp, #0

	gpio_set_pin_function(MISO, MUX_PC26C_SPI1_MISO);
  401348:	2102      	movs	r1, #2
  40134a:	205a      	movs	r0, #90	; 0x5a
  40134c:	4b05      	ldr	r3, [pc, #20]	; (401364 <SPI_0_PORT_init+0x20>)
  40134e:	4798      	blx	r3

	gpio_set_pin_function(MOSI, MUX_PC27C_SPI1_MOSI);
  401350:	2102      	movs	r1, #2
  401352:	205b      	movs	r0, #91	; 0x5b
  401354:	4b03      	ldr	r3, [pc, #12]	; (401364 <SPI_0_PORT_init+0x20>)
  401356:	4798      	blx	r3

	gpio_set_pin_function(SCLK, MUX_PC24C_SPI1_SPCK);
  401358:	2102      	movs	r1, #2
  40135a:	2058      	movs	r0, #88	; 0x58
  40135c:	4b01      	ldr	r3, [pc, #4]	; (401364 <SPI_0_PORT_init+0x20>)
  40135e:	4798      	blx	r3
}
  401360:	bf00      	nop
  401362:	bd80      	pop	{r7, pc}
  401364:	004010cd 	.word	0x004010cd

00401368 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
  401368:	b580      	push	{r7, lr}
  40136a:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI1);
  40136c:	202a      	movs	r0, #42	; 0x2a
  40136e:	4b02      	ldr	r3, [pc, #8]	; (401378 <SPI_0_CLOCK_init+0x10>)
  401370:	4798      	blx	r3
}
  401372:	bf00      	nop
  401374:	bd80      	pop	{r7, pc}
  401376:	bf00      	nop
  401378:	0040116d 	.word	0x0040116d

0040137c <SPI_0_init>:

void SPI_0_init(void)
{
  40137c:	b580      	push	{r7, lr}
  40137e:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
  401380:	4b04      	ldr	r3, [pc, #16]	; (401394 <SPI_0_init+0x18>)
  401382:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SPI1);
  401384:	4904      	ldr	r1, [pc, #16]	; (401398 <SPI_0_init+0x1c>)
  401386:	4805      	ldr	r0, [pc, #20]	; (40139c <SPI_0_init+0x20>)
  401388:	4b05      	ldr	r3, [pc, #20]	; (4013a0 <SPI_0_init+0x24>)
  40138a:	4798      	blx	r3
	SPI_0_PORT_init();
  40138c:	4b05      	ldr	r3, [pc, #20]	; (4013a4 <SPI_0_init+0x28>)
  40138e:	4798      	blx	r3
}
  401390:	bf00      	nop
  401392:	bd80      	pop	{r7, pc}
  401394:	00401369 	.word	0x00401369
  401398:	40058000 	.word	0x40058000
  40139c:	20401388 	.word	0x20401388
  4013a0:	0040215d 	.word	0x0040215d
  4013a4:	00401345 	.word	0x00401345

004013a8 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
  4013a8:	b580      	push	{r7, lr}
  4013aa:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA4, MUX_PA4A_TWIHS0_TWCK0);
  4013ac:	2100      	movs	r1, #0
  4013ae:	2004      	movs	r0, #4
  4013b0:	4b03      	ldr	r3, [pc, #12]	; (4013c0 <I2C_0_PORT_init+0x18>)
  4013b2:	4798      	blx	r3

	gpio_set_pin_function(PA3, MUX_PA3A_TWIHS0_TWD0);
  4013b4:	2100      	movs	r1, #0
  4013b6:	2003      	movs	r0, #3
  4013b8:	4b01      	ldr	r3, [pc, #4]	; (4013c0 <I2C_0_PORT_init+0x18>)
  4013ba:	4798      	blx	r3
}
  4013bc:	bf00      	nop
  4013be:	bd80      	pop	{r7, pc}
  4013c0:	004010cd 	.word	0x004010cd

004013c4 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
  4013c4:	b580      	push	{r7, lr}
  4013c6:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS0);
  4013c8:	2013      	movs	r0, #19
  4013ca:	4b02      	ldr	r3, [pc, #8]	; (4013d4 <I2C_0_CLOCK_init+0x10>)
  4013cc:	4798      	blx	r3
}
  4013ce:	bf00      	nop
  4013d0:	bd80      	pop	{r7, pc}
  4013d2:	bf00      	nop
  4013d4:	0040116d 	.word	0x0040116d

004013d8 <I2C_0_init>:

void I2C_0_init(void)
{
  4013d8:	b580      	push	{r7, lr}
  4013da:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
  4013dc:	4b04      	ldr	r3, [pc, #16]	; (4013f0 <I2C_0_init+0x18>)
  4013de:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  4013e0:	4904      	ldr	r1, [pc, #16]	; (4013f4 <I2C_0_init+0x1c>)
  4013e2:	4805      	ldr	r0, [pc, #20]	; (4013f8 <I2C_0_init+0x20>)
  4013e4:	4b05      	ldr	r3, [pc, #20]	; (4013fc <I2C_0_init+0x24>)
  4013e6:	4798      	blx	r3

	I2C_0_PORT_init();
  4013e8:	4b05      	ldr	r3, [pc, #20]	; (401400 <I2C_0_init+0x28>)
  4013ea:	4798      	blx	r3
}
  4013ec:	bf00      	nop
  4013ee:	bd80      	pop	{r7, pc}
  4013f0:	004013c5 	.word	0x004013c5
  4013f4:	40018000 	.word	0x40018000
  4013f8:	2040142c 	.word	0x2040142c
  4013fc:	004020fd 	.word	0x004020fd
  401400:	004013a9 	.word	0x004013a9

00401404 <I2C_INSTANCE_PORT_init>:

void I2C_INSTANCE_PORT_init(void)
{
  401404:	b480      	push	{r7}
  401406:	af00      	add	r7, sp, #0
}
  401408:	bf00      	nop
  40140a:	46bd      	mov	sp, r7
  40140c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401410:	4770      	bx	lr
	...

00401414 <I2C_INSTANCE_CLOCK_init>:

void I2C_INSTANCE_CLOCK_init(void)
{
  401414:	b580      	push	{r7, lr}
  401416:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS1);
  401418:	2014      	movs	r0, #20
  40141a:	4b02      	ldr	r3, [pc, #8]	; (401424 <I2C_INSTANCE_CLOCK_init+0x10>)
  40141c:	4798      	blx	r3
}
  40141e:	bf00      	nop
  401420:	bd80      	pop	{r7, pc}
  401422:	bf00      	nop
  401424:	0040116d 	.word	0x0040116d

00401428 <I2C_INSTANCE_init>:

void I2C_INSTANCE_init(void)
{
  401428:	b580      	push	{r7, lr}
  40142a:	af00      	add	r7, sp, #0
	I2C_INSTANCE_CLOCK_init();
  40142c:	4b04      	ldr	r3, [pc, #16]	; (401440 <I2C_INSTANCE_init+0x18>)
  40142e:	4798      	blx	r3

	i2c_m_sync_init(&I2C_INSTANCE, TWIHS1);
  401430:	4904      	ldr	r1, [pc, #16]	; (401444 <I2C_INSTANCE_init+0x1c>)
  401432:	4805      	ldr	r0, [pc, #20]	; (401448 <I2C_INSTANCE_init+0x20>)
  401434:	4b05      	ldr	r3, [pc, #20]	; (40144c <I2C_INSTANCE_init+0x24>)
  401436:	4798      	blx	r3

	I2C_INSTANCE_PORT_init();
  401438:	4b05      	ldr	r3, [pc, #20]	; (401450 <I2C_INSTANCE_init+0x28>)
  40143a:	4798      	blx	r3
}
  40143c:	bf00      	nop
  40143e:	bd80      	pop	{r7, pc}
  401440:	00401415 	.word	0x00401415
  401444:	4001c000 	.word	0x4001c000
  401448:	204013bc 	.word	0x204013bc
  40144c:	004020fd 	.word	0x004020fd
  401450:	00401405 	.word	0x00401405

00401454 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
  401454:	b580      	push	{r7, lr}
  401456:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA9, MUX_PA9A_UART0_URXD0);
  401458:	2100      	movs	r1, #0
  40145a:	2009      	movs	r0, #9
  40145c:	4b03      	ldr	r3, [pc, #12]	; (40146c <USART_0_PORT_init+0x18>)
  40145e:	4798      	blx	r3

	gpio_set_pin_function(PA10, MUX_PA10A_UART0_UTXD0);
  401460:	2100      	movs	r1, #0
  401462:	200a      	movs	r0, #10
  401464:	4b01      	ldr	r3, [pc, #4]	; (40146c <USART_0_PORT_init+0x18>)
  401466:	4798      	blx	r3
}
  401468:	bf00      	nop
  40146a:	bd80      	pop	{r7, pc}
  40146c:	004010cd 	.word	0x004010cd

00401470 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
  401470:	b580      	push	{r7, lr}
  401472:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART0);
  401474:	2007      	movs	r0, #7
  401476:	4b02      	ldr	r3, [pc, #8]	; (401480 <USART_0_CLOCK_init+0x10>)
  401478:	4798      	blx	r3
}
  40147a:	bf00      	nop
  40147c:	bd80      	pop	{r7, pc}
  40147e:	bf00      	nop
  401480:	0040116d 	.word	0x0040116d

00401484 <USART_0_init>:

void USART_0_init(void)
{
  401484:	b580      	push	{r7, lr}
  401486:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
  401488:	4b06      	ldr	r3, [pc, #24]	; (4014a4 <USART_0_init+0x20>)
  40148a:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  40148c:	4b06      	ldr	r3, [pc, #24]	; (4014a8 <USART_0_init+0x24>)
  40148e:	4798      	blx	r3
  401490:	4603      	mov	r3, r0
  401492:	461a      	mov	r2, r3
  401494:	4905      	ldr	r1, [pc, #20]	; (4014ac <USART_0_init+0x28>)
  401496:	4806      	ldr	r0, [pc, #24]	; (4014b0 <USART_0_init+0x2c>)
  401498:	4b06      	ldr	r3, [pc, #24]	; (4014b4 <USART_0_init+0x30>)
  40149a:	4798      	blx	r3
	USART_0_PORT_init();
  40149c:	4b06      	ldr	r3, [pc, #24]	; (4014b8 <USART_0_init+0x34>)
  40149e:	4798      	blx	r3
}
  4014a0:	bf00      	nop
  4014a2:	bd80      	pop	{r7, pc}
  4014a4:	00401471 	.word	0x00401471
  4014a8:	00405415 	.word	0x00405415
  4014ac:	400e0800 	.word	0x400e0800
  4014b0:	204013b0 	.word	0x204013b0
  4014b4:	00402701 	.word	0x00402701
  4014b8:	00401455 	.word	0x00401455

004014bc <USART_1_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_1_CLOCK_init()
{
  4014bc:	b580      	push	{r7, lr}
  4014be:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART4);
  4014c0:	202e      	movs	r0, #46	; 0x2e
  4014c2:	4b02      	ldr	r3, [pc, #8]	; (4014cc <USART_1_CLOCK_init+0x10>)
  4014c4:	4798      	blx	r3
}
  4014c6:	bf00      	nop
  4014c8:	bd80      	pop	{r7, pc}
  4014ca:	bf00      	nop
  4014cc:	0040116d 	.word	0x0040116d

004014d0 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
  4014d0:	b580      	push	{r7, lr}
  4014d2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD18, MUX_PD18C_UART4_URXD4);
  4014d4:	2102      	movs	r1, #2
  4014d6:	2072      	movs	r0, #114	; 0x72
  4014d8:	4b03      	ldr	r3, [pc, #12]	; (4014e8 <USART_1_PORT_init+0x18>)
  4014da:	4798      	blx	r3

	gpio_set_pin_function(PD19, MUX_PD19C_UART4_UTXD4);
  4014dc:	2102      	movs	r1, #2
  4014de:	2073      	movs	r0, #115	; 0x73
  4014e0:	4b01      	ldr	r3, [pc, #4]	; (4014e8 <USART_1_PORT_init+0x18>)
  4014e2:	4798      	blx	r3
}
  4014e4:	bf00      	nop
  4014e6:	bd80      	pop	{r7, pc}
  4014e8:	004010cd 	.word	0x004010cd

004014ec <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
  4014ec:	b590      	push	{r4, r7, lr}
  4014ee:	b083      	sub	sp, #12
  4014f0:	af02      	add	r7, sp, #8
	USART_1_CLOCK_init();
  4014f2:	4b09      	ldr	r3, [pc, #36]	; (401518 <USART_1_init+0x2c>)
  4014f4:	4798      	blx	r3
	usart_async_init(&USART_1, UART4, USART_1_buffer, USART_1_BUFFER_SIZE, _uart_get_usart_async());
  4014f6:	4b09      	ldr	r3, [pc, #36]	; (40151c <USART_1_init+0x30>)
  4014f8:	4798      	blx	r3
  4014fa:	4603      	mov	r3, r0
  4014fc:	9300      	str	r3, [sp, #0]
  4014fe:	2310      	movs	r3, #16
  401500:	4a07      	ldr	r2, [pc, #28]	; (401520 <USART_1_init+0x34>)
  401502:	4908      	ldr	r1, [pc, #32]	; (401524 <USART_1_init+0x38>)
  401504:	4808      	ldr	r0, [pc, #32]	; (401528 <USART_1_init+0x3c>)
  401506:	4c09      	ldr	r4, [pc, #36]	; (40152c <USART_1_init+0x40>)
  401508:	47a0      	blx	r4
	USART_1_PORT_init();
  40150a:	4b09      	ldr	r3, [pc, #36]	; (401530 <USART_1_init+0x44>)
  40150c:	4798      	blx	r3
}
  40150e:	bf00      	nop
  401510:	3704      	adds	r7, #4
  401512:	46bd      	mov	sp, r7
  401514:	bd90      	pop	{r4, r7, pc}
  401516:	bf00      	nop
  401518:	004014bd 	.word	0x004014bd
  40151c:	00405425 	.word	0x00405425
  401520:	204010d0 	.word	0x204010d0
  401524:	400e1e00 	.word	0x400e1e00
  401528:	204013dc 	.word	0x204013dc
  40152c:	004023fd 	.word	0x004023fd
  401530:	004014d1 	.word	0x004014d1

00401534 <USB_0_CLOCK_init>:
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif
#endif

void USB_0_CLOCK_init(void)
{
  401534:	b580      	push	{r7, lr}
  401536:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_USBHS);
  401538:	2022      	movs	r0, #34	; 0x22
  40153a:	4b02      	ldr	r3, [pc, #8]	; (401544 <USB_0_CLOCK_init+0x10>)
  40153c:	4798      	blx	r3
}
  40153e:	bf00      	nop
  401540:	bd80      	pop	{r7, pc}
  401542:	bf00      	nop
  401544:	0040116d 	.word	0x0040116d

00401548 <USB_0_init>:

void USB_0_init(void)
{
  401548:	b580      	push	{r7, lr}
  40154a:	af00      	add	r7, sp, #0
	USB_0_CLOCK_init();
  40154c:	4b02      	ldr	r3, [pc, #8]	; (401558 <USB_0_init+0x10>)
  40154e:	4798      	blx	r3
	usb_d_init();
  401550:	4b02      	ldr	r3, [pc, #8]	; (40155c <USB_0_init+0x14>)
  401552:	4798      	blx	r3
}
  401554:	bf00      	nop
  401556:	bd80      	pop	{r7, pc}
  401558:	00401535 	.word	0x00401535
  40155c:	00402c79 	.word	0x00402c79

00401560 <system_init>:

void system_init(void)
{
  401560:	b580      	push	{r7, lr}
  401562:	af00      	add	r7, sp, #0
	init_mcu();
  401564:	4b33      	ldr	r3, [pc, #204]	; (401634 <system_init+0xd4>)
  401566:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOB);
  401568:	200b      	movs	r0, #11
  40156a:	4b33      	ldr	r3, [pc, #204]	; (401638 <system_init+0xd8>)
  40156c:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOC);
  40156e:	200c      	movs	r0, #12
  401570:	4b31      	ldr	r3, [pc, #196]	; (401638 <system_init+0xd8>)
  401572:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOD);
  401574:	2010      	movs	r0, #16
  401576:	4b30      	ldr	r3, [pc, #192]	; (401638 <system_init+0xd8>)
  401578:	4798      	blx	r3

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);
  40157a:	4830      	ldr	r0, [pc, #192]	; (40163c <system_init+0xdc>)
  40157c:	4b30      	ldr	r3, [pc, #192]	; (401640 <system_init+0xe0>)
  40157e:	4798      	blx	r3

	/* GPIO on PB1 */

	// Set pin direction to output
	gpio_set_pin_direction(AT86_1_RST, GPIO_DIRECTION_OUT);
  401580:	2102      	movs	r1, #2
  401582:	2021      	movs	r0, #33	; 0x21
  401584:	4b2f      	ldr	r3, [pc, #188]	; (401644 <system_init+0xe4>)
  401586:	4798      	blx	r3

	gpio_set_pin_level(AT86_1_RST,
  401588:	2100      	movs	r1, #0
  40158a:	2021      	movs	r0, #33	; 0x21
  40158c:	4b2e      	ldr	r3, [pc, #184]	; (401648 <system_init+0xe8>)
  40158e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(AT86_1_RST, GPIO_PIN_FUNCTION_OFF);
  401590:	f04f 31ff 	mov.w	r1, #4294967295
  401594:	2021      	movs	r0, #33	; 0x21
  401596:	4b2d      	ldr	r3, [pc, #180]	; (40164c <system_init+0xec>)
  401598:	4798      	blx	r3

	/* GPIO on PC7 */

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
  40159a:	2102      	movs	r1, #2
  40159c:	2047      	movs	r0, #71	; 0x47
  40159e:	4b29      	ldr	r3, [pc, #164]	; (401644 <system_init+0xe4>)
  4015a0:	4798      	blx	r3

	gpio_set_pin_level(LED0,
  4015a2:	2100      	movs	r1, #0
  4015a4:	2047      	movs	r0, #71	; 0x47
  4015a6:	4b28      	ldr	r3, [pc, #160]	; (401648 <system_init+0xe8>)
  4015a8:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
  4015aa:	f04f 31ff 	mov.w	r1, #4294967295
  4015ae:	2047      	movs	r0, #71	; 0x47
  4015b0:	4b26      	ldr	r3, [pc, #152]	; (40164c <system_init+0xec>)
  4015b2:	4798      	blx	r3

	/* GPIO on PC25 */

	// Set pin direction to output
	gpio_set_pin_direction(CS, GPIO_DIRECTION_OUT);
  4015b4:	2102      	movs	r1, #2
  4015b6:	2059      	movs	r0, #89	; 0x59
  4015b8:	4b22      	ldr	r3, [pc, #136]	; (401644 <system_init+0xe4>)
  4015ba:	4798      	blx	r3

	gpio_set_pin_level(CS,
  4015bc:	2100      	movs	r1, #0
  4015be:	2059      	movs	r0, #89	; 0x59
  4015c0:	4b21      	ldr	r3, [pc, #132]	; (401648 <system_init+0xe8>)
  4015c2:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(CS, GPIO_PIN_FUNCTION_OFF);
  4015c4:	f04f 31ff 	mov.w	r1, #4294967295
  4015c8:	2059      	movs	r0, #89	; 0x59
  4015ca:	4b20      	ldr	r3, [pc, #128]	; (40164c <system_init+0xec>)
  4015cc:	4798      	blx	r3

	/* GPIO on PD17 */

	// Set pin direction to output
	gpio_set_pin_direction(CS_2, GPIO_DIRECTION_OUT);
  4015ce:	2102      	movs	r1, #2
  4015d0:	2071      	movs	r0, #113	; 0x71
  4015d2:	4b1c      	ldr	r3, [pc, #112]	; (401644 <system_init+0xe4>)
  4015d4:	4798      	blx	r3

	gpio_set_pin_level(CS_2,
  4015d6:	2100      	movs	r1, #0
  4015d8:	2071      	movs	r0, #113	; 0x71
  4015da:	4b1b      	ldr	r3, [pc, #108]	; (401648 <system_init+0xe8>)
  4015dc:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(CS_2, GPIO_PIN_FUNCTION_OFF);
  4015de:	f04f 31ff 	mov.w	r1, #4294967295
  4015e2:	2071      	movs	r0, #113	; 0x71
  4015e4:	4b19      	ldr	r3, [pc, #100]	; (40164c <system_init+0xec>)
  4015e6:	4798      	blx	r3

	/* GPIO on PD24 */

	// Set pin direction to output
	gpio_set_pin_direction(AT86_2_RST, GPIO_DIRECTION_OUT);
  4015e8:	2102      	movs	r1, #2
  4015ea:	2078      	movs	r0, #120	; 0x78
  4015ec:	4b15      	ldr	r3, [pc, #84]	; (401644 <system_init+0xe4>)
  4015ee:	4798      	blx	r3

	gpio_set_pin_level(AT86_2_RST,
  4015f0:	2100      	movs	r1, #0
  4015f2:	2078      	movs	r0, #120	; 0x78
  4015f4:	4b14      	ldr	r3, [pc, #80]	; (401648 <system_init+0xe8>)
  4015f6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(AT86_2_RST, GPIO_PIN_FUNCTION_OFF);
  4015f8:	f04f 31ff 	mov.w	r1, #4294967295
  4015fc:	2078      	movs	r0, #120	; 0x78
  4015fe:	4b13      	ldr	r3, [pc, #76]	; (40164c <system_init+0xec>)
  401600:	4798      	blx	r3

	DAC_0_init();
  401602:	4b13      	ldr	r3, [pc, #76]	; (401650 <system_init+0xf0>)
  401604:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  401606:	4b13      	ldr	r3, [pc, #76]	; (401654 <system_init+0xf4>)
  401608:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  40160a:	4b13      	ldr	r3, [pc, #76]	; (401658 <system_init+0xf8>)
  40160c:	4798      	blx	r3

	SPI_1_init();
  40160e:	4b13      	ldr	r3, [pc, #76]	; (40165c <system_init+0xfc>)
  401610:	4798      	blx	r3

	SPI_0_init();
  401612:	4b13      	ldr	r3, [pc, #76]	; (401660 <system_init+0x100>)
  401614:	4798      	blx	r3

	I2C_0_init();
  401616:	4b13      	ldr	r3, [pc, #76]	; (401664 <system_init+0x104>)
  401618:	4798      	blx	r3

	I2C_INSTANCE_init();
  40161a:	4b13      	ldr	r3, [pc, #76]	; (401668 <system_init+0x108>)
  40161c:	4798      	blx	r3

	USART_0_init();
  40161e:	4b13      	ldr	r3, [pc, #76]	; (40166c <system_init+0x10c>)
  401620:	4798      	blx	r3
	USART_1_init();
  401622:	4b13      	ldr	r3, [pc, #76]	; (401670 <system_init+0x110>)
  401624:	4798      	blx	r3

	USB_0_init();
  401626:	4b13      	ldr	r3, [pc, #76]	; (401674 <system_init+0x114>)
  401628:	4798      	blx	r3

	ext_irq_init();
  40162a:	4b13      	ldr	r3, [pc, #76]	; (401678 <system_init+0x118>)
  40162c:	4798      	blx	r3
}
  40162e:	bf00      	nop
  401630:	bd80      	pop	{r7, pc}
  401632:	bf00      	nop
  401634:	0040115d 	.word	0x0040115d
  401638:	0040116d 	.word	0x0040116d
  40163c:	400e1850 	.word	0x400e1850
  401640:	00400ddf 	.word	0x00400ddf
  401644:	004010ed 	.word	0x004010ed
  401648:	00401125 	.word	0x00401125
  40164c:	004010cd 	.word	0x004010cd
  401650:	00401255 	.word	0x00401255
  401654:	00401281 	.word	0x00401281
  401658:	004012b1 	.word	0x004012b1
  40165c:	00401319 	.word	0x00401319
  401660:	0040137d 	.word	0x0040137d
  401664:	004013d9 	.word	0x004013d9
  401668:	00401429 	.word	0x00401429
  40166c:	00401485 	.word	0x00401485
  401670:	004014ed 	.word	0x004014ed
  401674:	00401549 	.word	0x00401549
  401678:	00401e35 	.word	0x00401e35

0040167c <hri_pio_set_ODSR_reg>:
{
  40167c:	b480      	push	{r7}
  40167e:	b083      	sub	sp, #12
  401680:	af00      	add	r7, sp, #0
  401682:	6078      	str	r0, [r7, #4]
  401684:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  401686:	687b      	ldr	r3, [r7, #4]
  401688:	683a      	ldr	r2, [r7, #0]
  40168a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40168c:	bf00      	nop
  40168e:	370c      	adds	r7, #12
  401690:	46bd      	mov	sp, r7
  401692:	f85d 7b04 	ldr.w	r7, [sp], #4
  401696:	4770      	bx	lr

00401698 <hri_pio_get_ODSR_reg>:
{
  401698:	b480      	push	{r7}
  40169a:	b085      	sub	sp, #20
  40169c:	af00      	add	r7, sp, #0
  40169e:	6078      	str	r0, [r7, #4]
  4016a0:	6039      	str	r1, [r7, #0]
	tmp = ((Pio *)hw)->PIO_ODSR;
  4016a2:	687b      	ldr	r3, [r7, #4]
  4016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4016a6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4016a8:	68fa      	ldr	r2, [r7, #12]
  4016aa:	683b      	ldr	r3, [r7, #0]
  4016ac:	4013      	ands	r3, r2
  4016ae:	60fb      	str	r3, [r7, #12]
	return tmp;
  4016b0:	68fb      	ldr	r3, [r7, #12]
}
  4016b2:	4618      	mov	r0, r3
  4016b4:	3714      	adds	r7, #20
  4016b6:	46bd      	mov	sp, r7
  4016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016bc:	4770      	bx	lr

004016be <hri_pio_clear_ODSR_reg>:
{
  4016be:	b480      	push	{r7}
  4016c0:	b083      	sub	sp, #12
  4016c2:	af00      	add	r7, sp, #0
  4016c4:	6078      	str	r0, [r7, #4]
  4016c6:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4016c8:	687b      	ldr	r3, [r7, #4]
  4016ca:	683a      	ldr	r2, [r7, #0]
  4016cc:	635a      	str	r2, [r3, #52]	; 0x34
}
  4016ce:	bf00      	nop
  4016d0:	370c      	adds	r7, #12
  4016d2:	46bd      	mov	sp, r7
  4016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d8:	4770      	bx	lr
	...

004016dc <port_to_reg>:
{
  4016dc:	b480      	push	{r7}
  4016de:	b083      	sub	sp, #12
  4016e0:	af00      	add	r7, sp, #0
  4016e2:	4603      	mov	r3, r0
  4016e4:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  4016e6:	79fb      	ldrb	r3, [r7, #7]
  4016e8:	025b      	lsls	r3, r3, #9
  4016ea:	461a      	mov	r2, r3
  4016ec:	4b03      	ldr	r3, [pc, #12]	; (4016fc <port_to_reg+0x20>)
  4016ee:	4413      	add	r3, r2
}
  4016f0:	4618      	mov	r0, r3
  4016f2:	370c      	adds	r7, #12
  4016f4:	46bd      	mov	sp, r7
  4016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016fa:	4770      	bx	lr
  4016fc:	400e0e00 	.word	0x400e0e00

00401700 <_gpio_set_level>:
{
  401700:	b580      	push	{r7, lr}
  401702:	b084      	sub	sp, #16
  401704:	af00      	add	r7, sp, #0
  401706:	4603      	mov	r3, r0
  401708:	6039      	str	r1, [r7, #0]
  40170a:	71fb      	strb	r3, [r7, #7]
  40170c:	4613      	mov	r3, r2
  40170e:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  401710:	79fb      	ldrb	r3, [r7, #7]
  401712:	4618      	mov	r0, r3
  401714:	4b09      	ldr	r3, [pc, #36]	; (40173c <_gpio_set_level+0x3c>)
  401716:	4798      	blx	r3
  401718:	60f8      	str	r0, [r7, #12]
	if (level) {
  40171a:	79bb      	ldrb	r3, [r7, #6]
  40171c:	2b00      	cmp	r3, #0
  40171e:	d004      	beq.n	40172a <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  401720:	6839      	ldr	r1, [r7, #0]
  401722:	68f8      	ldr	r0, [r7, #12]
  401724:	4b06      	ldr	r3, [pc, #24]	; (401740 <_gpio_set_level+0x40>)
  401726:	4798      	blx	r3
}
  401728:	e003      	b.n	401732 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  40172a:	6839      	ldr	r1, [r7, #0]
  40172c:	68f8      	ldr	r0, [r7, #12]
  40172e:	4b05      	ldr	r3, [pc, #20]	; (401744 <_gpio_set_level+0x44>)
  401730:	4798      	blx	r3
}
  401732:	bf00      	nop
  401734:	3710      	adds	r7, #16
  401736:	46bd      	mov	sp, r7
  401738:	bd80      	pop	{r7, pc}
  40173a:	bf00      	nop
  40173c:	004016dd 	.word	0x004016dd
  401740:	0040167d 	.word	0x0040167d
  401744:	004016bf 	.word	0x004016bf

00401748 <_gpio_toggle_level>:
{
  401748:	b580      	push	{r7, lr}
  40174a:	b086      	sub	sp, #24
  40174c:	af00      	add	r7, sp, #0
  40174e:	4603      	mov	r3, r0
  401750:	6039      	str	r1, [r7, #0]
  401752:	71fb      	strb	r3, [r7, #7]
	void *const hw = port_to_reg(port);
  401754:	79fb      	ldrb	r3, [r7, #7]
  401756:	4618      	mov	r0, r3
  401758:	4b0c      	ldr	r3, [pc, #48]	; (40178c <_gpio_toggle_level+0x44>)
  40175a:	4798      	blx	r3
  40175c:	6178      	str	r0, [r7, #20]
	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
  40175e:	6839      	ldr	r1, [r7, #0]
  401760:	6978      	ldr	r0, [r7, #20]
  401762:	4b0b      	ldr	r3, [pc, #44]	; (401790 <_gpio_toggle_level+0x48>)
  401764:	4798      	blx	r3
  401766:	6138      	str	r0, [r7, #16]
	bits_set   = (~bits_clear) & mask;
  401768:	693b      	ldr	r3, [r7, #16]
  40176a:	43da      	mvns	r2, r3
  40176c:	683b      	ldr	r3, [r7, #0]
  40176e:	4013      	ands	r3, r2
  401770:	60fb      	str	r3, [r7, #12]
	hri_pio_set_ODSR_reg(hw, bits_set);
  401772:	68f9      	ldr	r1, [r7, #12]
  401774:	6978      	ldr	r0, [r7, #20]
  401776:	4b07      	ldr	r3, [pc, #28]	; (401794 <_gpio_toggle_level+0x4c>)
  401778:	4798      	blx	r3
	hri_pio_clear_ODSR_reg(hw, bits_clear);
  40177a:	6939      	ldr	r1, [r7, #16]
  40177c:	6978      	ldr	r0, [r7, #20]
  40177e:	4b06      	ldr	r3, [pc, #24]	; (401798 <_gpio_toggle_level+0x50>)
  401780:	4798      	blx	r3
}
  401782:	bf00      	nop
  401784:	3718      	adds	r7, #24
  401786:	46bd      	mov	sp, r7
  401788:	bd80      	pop	{r7, pc}
  40178a:	bf00      	nop
  40178c:	004016dd 	.word	0x004016dd
  401790:	00401699 	.word	0x00401699
  401794:	0040167d 	.word	0x0040167d
  401798:	004016bf 	.word	0x004016bf

0040179c <gpio_set_pin_level>:
{
  40179c:	b580      	push	{r7, lr}
  40179e:	b082      	sub	sp, #8
  4017a0:	af00      	add	r7, sp, #0
  4017a2:	4603      	mov	r3, r0
  4017a4:	460a      	mov	r2, r1
  4017a6:	71fb      	strb	r3, [r7, #7]
  4017a8:	4613      	mov	r3, r2
  4017aa:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4017ac:	79fb      	ldrb	r3, [r7, #7]
  4017ae:	095b      	lsrs	r3, r3, #5
  4017b0:	b2d8      	uxtb	r0, r3
  4017b2:	79fb      	ldrb	r3, [r7, #7]
  4017b4:	f003 031f 	and.w	r3, r3, #31
  4017b8:	2201      	movs	r2, #1
  4017ba:	fa02 f303 	lsl.w	r3, r2, r3
  4017be:	79ba      	ldrb	r2, [r7, #6]
  4017c0:	4619      	mov	r1, r3
  4017c2:	4b03      	ldr	r3, [pc, #12]	; (4017d0 <gpio_set_pin_level+0x34>)
  4017c4:	4798      	blx	r3
}
  4017c6:	bf00      	nop
  4017c8:	3708      	adds	r7, #8
  4017ca:	46bd      	mov	sp, r7
  4017cc:	bd80      	pop	{r7, pc}
  4017ce:	bf00      	nop
  4017d0:	00401701 	.word	0x00401701

004017d4 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
  4017d4:	b580      	push	{r7, lr}
  4017d6:	b082      	sub	sp, #8
  4017d8:	af00      	add	r7, sp, #0
  4017da:	4603      	mov	r3, r0
  4017dc:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  4017de:	79fb      	ldrb	r3, [r7, #7]
  4017e0:	095b      	lsrs	r3, r3, #5
  4017e2:	b2d8      	uxtb	r0, r3
  4017e4:	79fb      	ldrb	r3, [r7, #7]
  4017e6:	f003 031f 	and.w	r3, r3, #31
  4017ea:	2201      	movs	r2, #1
  4017ec:	fa02 f303 	lsl.w	r3, r2, r3
  4017f0:	4619      	mov	r1, r3
  4017f2:	4b03      	ldr	r3, [pc, #12]	; (401800 <gpio_toggle_pin_level+0x2c>)
  4017f4:	4798      	blx	r3
}
  4017f6:	bf00      	nop
  4017f8:	3708      	adds	r7, #8
  4017fa:	46bd      	mov	sp, r7
  4017fc:	bd80      	pop	{r7, pc}
  4017fe:	bf00      	nop
  401800:	00401749 	.word	0x00401749

00401804 <glue_crash_and_burn>:

bool glue_spi_in_process(SpiDevice *spi_dev);

//For use during debugging.  Mainly used to check that things don't return zero.
static inline void glue_crash_and_burn(void)
{
  401804:	b580      	push	{r7, lr}
  401806:	b082      	sub	sp, #8
  401808:	af00      	add	r7, sp, #0
	while(1)
	{
		gpio_toggle_pin_level(LED0);
  40180a:	2047      	movs	r0, #71	; 0x47
  40180c:	4b07      	ldr	r3, [pc, #28]	; (40182c <glue_crash_and_burn+0x28>)
  40180e:	4798      	blx	r3
		//delay_ms(1);
		uint8_t test;
		for(uint32_t i = 0; i < 150000000; i++)
  401810:	2300      	movs	r3, #0
  401812:	603b      	str	r3, [r7, #0]
  401814:	e005      	b.n	401822 <glue_crash_and_burn+0x1e>
		{
			test++;
  401816:	79fb      	ldrb	r3, [r7, #7]
  401818:	3301      	adds	r3, #1
  40181a:	71fb      	strb	r3, [r7, #7]
		for(uint32_t i = 0; i < 150000000; i++)
  40181c:	683b      	ldr	r3, [r7, #0]
  40181e:	3301      	adds	r3, #1
  401820:	603b      	str	r3, [r7, #0]
  401822:	683b      	ldr	r3, [r7, #0]
  401824:	4a02      	ldr	r2, [pc, #8]	; (401830 <glue_crash_and_burn+0x2c>)
  401826:	4293      	cmp	r3, r2
  401828:	d9f5      	bls.n	401816 <glue_crash_and_burn+0x12>
	{
  40182a:	e7ee      	b.n	40180a <glue_crash_and_burn+0x6>
  40182c:	004017d5 	.word	0x004017d5
  401830:	08f0d17f 	.word	0x08f0d17f

00401834 <glue_init>:
static void glue_spi1_cb_tx_done(struct _dma_resource *resource);
static void glue_spi1_cb_rx_done(struct _dma_resource *resource);
static void glue_spi1_cb_error(struct _dma_resource *resource);

void glue_init(void)
{
  401834:	b580      	push	{r7, lr}
  401836:	af00      	add	r7, sp, #0
	//Set up SPI0
	//Set up IRQ0
	SPI_ZERO.halSpiDriver = &SPI_0;
  401838:	4b46      	ldr	r3, [pc, #280]	; (401954 <glue_init+0x120>)
  40183a:	4a47      	ldr	r2, [pc, #284]	; (401958 <glue_init+0x124>)
  40183c:	601a      	str	r2, [r3, #0]
	SPI_ONE.halSpiDriver = &SPI_1;
  40183e:	4b47      	ldr	r3, [pc, #284]	; (40195c <glue_init+0x128>)
  401840:	4a47      	ldr	r2, [pc, #284]	; (401960 <glue_init+0x12c>)
  401842:	601a      	str	r2, [r3, #0]
	//IRQ_ZERO.halIRQDriver = IRQ0;
	
	AT86_Init(&SPI_ZERO, &IRQ_ZERO, AT86_INSTANCE0);
  401844:	2200      	movs	r2, #0
  401846:	4947      	ldr	r1, [pc, #284]	; (401964 <glue_init+0x130>)
  401848:	4842      	ldr	r0, [pc, #264]	; (401954 <glue_init+0x120>)
  40184a:	4b47      	ldr	r3, [pc, #284]	; (401968 <glue_init+0x134>)
  40184c:	4798      	blx	r3
	AT86_Init(&SPI_ONE, &IRQ_ONE, AT86_INSTANCE1);
  40184e:	2201      	movs	r2, #1
  401850:	4946      	ldr	r1, [pc, #280]	; (40196c <glue_init+0x138>)
  401852:	4842      	ldr	r0, [pc, #264]	; (40195c <glue_init+0x128>)
  401854:	4b44      	ldr	r3, [pc, #272]	; (401968 <glue_init+0x134>)
  401856:	4798      	blx	r3
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi0_cb_tx_done);
  401858:	4b3e      	ldr	r3, [pc, #248]	; (401954 <glue_init+0x120>)
  40185a:	681b      	ldr	r3, [r3, #0]
  40185c:	4a44      	ldr	r2, [pc, #272]	; (401970 <glue_init+0x13c>)
  40185e:	2100      	movs	r1, #0
  401860:	4618      	mov	r0, r3
  401862:	4b44      	ldr	r3, [pc, #272]	; (401974 <glue_init+0x140>)
  401864:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi0_cb_rx_done);
  401866:	4b3b      	ldr	r3, [pc, #236]	; (401954 <glue_init+0x120>)
  401868:	681b      	ldr	r3, [r3, #0]
  40186a:	4a43      	ldr	r2, [pc, #268]	; (401978 <glue_init+0x144>)
  40186c:	2101      	movs	r1, #1
  40186e:	4618      	mov	r0, r3
  401870:	4b40      	ldr	r3, [pc, #256]	; (401974 <glue_init+0x140>)
  401872:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi0_cb_error);
  401874:	4b37      	ldr	r3, [pc, #220]	; (401954 <glue_init+0x120>)
  401876:	681b      	ldr	r3, [r3, #0]
  401878:	4a40      	ldr	r2, [pc, #256]	; (40197c <glue_init+0x148>)
  40187a:	2102      	movs	r1, #2
  40187c:	4618      	mov	r0, r3
  40187e:	4b3d      	ldr	r3, [pc, #244]	; (401974 <glue_init+0x140>)
  401880:	4798      	blx	r3
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi1_cb_tx_done);
  401882:	4b36      	ldr	r3, [pc, #216]	; (40195c <glue_init+0x128>)
  401884:	681b      	ldr	r3, [r3, #0]
  401886:	4a3e      	ldr	r2, [pc, #248]	; (401980 <glue_init+0x14c>)
  401888:	2100      	movs	r1, #0
  40188a:	4618      	mov	r0, r3
  40188c:	4b39      	ldr	r3, [pc, #228]	; (401974 <glue_init+0x140>)
  40188e:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi1_cb_rx_done);
  401890:	4b32      	ldr	r3, [pc, #200]	; (40195c <glue_init+0x128>)
  401892:	681b      	ldr	r3, [r3, #0]
  401894:	4a3b      	ldr	r2, [pc, #236]	; (401984 <glue_init+0x150>)
  401896:	2101      	movs	r1, #1
  401898:	4618      	mov	r0, r3
  40189a:	4b36      	ldr	r3, [pc, #216]	; (401974 <glue_init+0x140>)
  40189c:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi1_cb_error);
  40189e:	4b2f      	ldr	r3, [pc, #188]	; (40195c <glue_init+0x128>)
  4018a0:	681b      	ldr	r3, [r3, #0]
  4018a2:	4a39      	ldr	r2, [pc, #228]	; (401988 <glue_init+0x154>)
  4018a4:	2102      	movs	r1, #2
  4018a6:	4618      	mov	r0, r3
  4018a8:	4b32      	ldr	r3, [pc, #200]	; (401974 <glue_init+0x140>)
  4018aa:	4798      	blx	r3
	
	ext_irq_register(PIO_PB0_IDX, IRQ_ZERO.callback);
  4018ac:	4b2d      	ldr	r3, [pc, #180]	; (401964 <glue_init+0x130>)
  4018ae:	689b      	ldr	r3, [r3, #8]
  4018b0:	4619      	mov	r1, r3
  4018b2:	2020      	movs	r0, #32
  4018b4:	4b35      	ldr	r3, [pc, #212]	; (40198c <glue_init+0x158>)
  4018b6:	4798      	blx	r3
	ext_irq_register(PIO_PD23_IDX, IRQ_ONE.callback);
  4018b8:	4b2c      	ldr	r3, [pc, #176]	; (40196c <glue_init+0x138>)
  4018ba:	689b      	ldr	r3, [r3, #8]
  4018bc:	4619      	mov	r1, r3
  4018be:	2077      	movs	r0, #119	; 0x77
  4018c0:	4b32      	ldr	r3, [pc, #200]	; (40198c <glue_init+0x158>)
  4018c2:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_0, SPI_MODE_0);
  4018c4:	2100      	movs	r1, #0
  4018c6:	4824      	ldr	r0, [pc, #144]	; (401958 <glue_init+0x124>)
  4018c8:	4b31      	ldr	r3, [pc, #196]	; (401990 <glue_init+0x15c>)
  4018ca:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_0, 1000000);
  4018cc:	4931      	ldr	r1, [pc, #196]	; (401994 <glue_init+0x160>)
  4018ce:	4822      	ldr	r0, [pc, #136]	; (401958 <glue_init+0x124>)
  4018d0:	4b31      	ldr	r3, [pc, #196]	; (401998 <glue_init+0x164>)
  4018d2:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
  4018d4:	2100      	movs	r1, #0
  4018d6:	4820      	ldr	r0, [pc, #128]	; (401958 <glue_init+0x124>)
  4018d8:	4b30      	ldr	r3, [pc, #192]	; (40199c <glue_init+0x168>)
  4018da:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_1, SPI_MODE_0);
  4018dc:	2100      	movs	r1, #0
  4018de:	4820      	ldr	r0, [pc, #128]	; (401960 <glue_init+0x12c>)
  4018e0:	4b2b      	ldr	r3, [pc, #172]	; (401990 <glue_init+0x15c>)
  4018e2:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_1, 1000000);
  4018e4:	492b      	ldr	r1, [pc, #172]	; (401994 <glue_init+0x160>)
  4018e6:	481e      	ldr	r0, [pc, #120]	; (401960 <glue_init+0x12c>)
  4018e8:	4b2b      	ldr	r3, [pc, #172]	; (401998 <glue_init+0x164>)
  4018ea:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_1, SPI_CHAR_SIZE_8);
  4018ec:	2100      	movs	r1, #0
  4018ee:	481c      	ldr	r0, [pc, #112]	; (401960 <glue_init+0x12c>)
  4018f0:	4b2a      	ldr	r3, [pc, #168]	; (40199c <glue_init+0x168>)
  4018f2:	4798      	blx	r3
	
	spi_m_dma_enable(&SPI_0);
  4018f4:	4818      	ldr	r0, [pc, #96]	; (401958 <glue_init+0x124>)
  4018f6:	4b2a      	ldr	r3, [pc, #168]	; (4019a0 <glue_init+0x16c>)
  4018f8:	4798      	blx	r3
	spi_m_dma_enable(&SPI_1);
  4018fa:	4819      	ldr	r0, [pc, #100]	; (401960 <glue_init+0x12c>)
  4018fc:	4b28      	ldr	r3, [pc, #160]	; (4019a0 <glue_init+0x16c>)
  4018fe:	4798      	blx	r3
	
	gpio_set_pin_level(CS, true);
  401900:	2101      	movs	r1, #1
  401902:	2059      	movs	r0, #89	; 0x59
  401904:	4b27      	ldr	r3, [pc, #156]	; (4019a4 <glue_init+0x170>)
  401906:	4798      	blx	r3
	gpio_set_pin_level(CS_2, true);
  401908:	2101      	movs	r1, #1
  40190a:	2071      	movs	r0, #113	; 0x71
  40190c:	4b25      	ldr	r3, [pc, #148]	; (4019a4 <glue_init+0x170>)
  40190e:	4798      	blx	r3
	
	gpio_set_pin_level(LED0, false);
  401910:	2100      	movs	r1, #0
  401912:	2047      	movs	r0, #71	; 0x47
  401914:	4b23      	ldr	r3, [pc, #140]	; (4019a4 <glue_init+0x170>)
  401916:	4798      	blx	r3
	gpio_set_pin_level(AT86_1_RST, false);	
  401918:	2100      	movs	r1, #0
  40191a:	2021      	movs	r0, #33	; 0x21
  40191c:	4b21      	ldr	r3, [pc, #132]	; (4019a4 <glue_init+0x170>)
  40191e:	4798      	blx	r3
	delay_us(100000);
  401920:	f248 60a0 	movw	r0, #34464	; 0x86a0
  401924:	4b20      	ldr	r3, [pc, #128]	; (4019a8 <glue_init+0x174>)
  401926:	4798      	blx	r3
	gpio_set_pin_level(AT86_1_RST, true);
  401928:	2101      	movs	r1, #1
  40192a:	2021      	movs	r0, #33	; 0x21
  40192c:	4b1d      	ldr	r3, [pc, #116]	; (4019a4 <glue_init+0x170>)
  40192e:	4798      	blx	r3
	
	gpio_set_pin_level(AT86_2_RST, false);
  401930:	2100      	movs	r1, #0
  401932:	2078      	movs	r0, #120	; 0x78
  401934:	4b1b      	ldr	r3, [pc, #108]	; (4019a4 <glue_init+0x170>)
  401936:	4798      	blx	r3
	delay_us(100000);
  401938:	f248 60a0 	movw	r0, #34464	; 0x86a0
  40193c:	4b1a      	ldr	r3, [pc, #104]	; (4019a8 <glue_init+0x174>)
  40193e:	4798      	blx	r3
	gpio_set_pin_level(AT86_2_RST, true);
  401940:	2101      	movs	r1, #1
  401942:	2078      	movs	r0, #120	; 0x78
  401944:	4b17      	ldr	r3, [pc, #92]	; (4019a4 <glue_init+0x170>)
  401946:	4798      	blx	r3
	
	gpio_set_pin_level(LED0, true);
  401948:	2101      	movs	r1, #1
  40194a:	2047      	movs	r0, #71	; 0x47
  40194c:	4b15      	ldr	r3, [pc, #84]	; (4019a4 <glue_init+0x170>)
  40194e:	4798      	blx	r3
}
  401950:	bf00      	nop
  401952:	bd80      	pop	{r7, pc}
  401954:	20401100 	.word	0x20401100
  401958:	20401388 	.word	0x20401388
  40195c:	20401114 	.word	0x20401114
  401960:	2040134c 	.word	0x2040134c
  401964:	20401108 	.word	0x20401108
  401968:	004001c1 	.word	0x004001c1
  40196c:	2040111c 	.word	0x2040111c
  401970:	00401bed 	.word	0x00401bed
  401974:	004023b9 	.word	0x004023b9
  401978:	00401c1d 	.word	0x00401c1d
  40197c:	00401c4d 	.word	0x00401c4d
  401980:	00401c75 	.word	0x00401c75
  401984:	00401ca5 	.word	0x00401ca5
  401988:	00401cd5 	.word	0x00401cd5
  40198c:	00401e81 	.word	0x00401e81
  401990:	00402251 	.word	0x00402251
  401994:	000f4240 	.word	0x000f4240
  401998:	00402211 	.word	0x00402211
  40199c:	00402295 	.word	0x00402295
  4019a0:	004021d5 	.word	0x004021d5
  4019a4:	0040179d 	.word	0x0040179d
  4019a8:	00401dcd 	.word	0x00401dcd

004019ac <glue_set_peripherals_inited>:

void glue_set_peripherals_inited(void)
{
  4019ac:	b480      	push	{r7}
  4019ae:	af00      	add	r7, sp, #0
	peripherals_inited = true;
  4019b0:	4b03      	ldr	r3, [pc, #12]	; (4019c0 <glue_set_peripherals_inited+0x14>)
  4019b2:	2201      	movs	r2, #1
  4019b4:	701a      	strb	r2, [r3, #0]
}
  4019b6:	bf00      	nop
  4019b8:	46bd      	mov	sp, r7
  4019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019be:	4770      	bx	lr
  4019c0:	204010e0 	.word	0x204010e0

004019c4 <glue_enforce_driver_init>:

//Returns if glue_set_peripherals_inited was called before.  Crashes otherwise.
void glue_enforce_driver_init(void)
{
  4019c4:	b580      	push	{r7, lr}
  4019c6:	af00      	add	r7, sp, #0
	if (peripherals_inited == false)
  4019c8:	4b05      	ldr	r3, [pc, #20]	; (4019e0 <glue_enforce_driver_init+0x1c>)
  4019ca:	781b      	ldrb	r3, [r3, #0]
  4019cc:	b2db      	uxtb	r3, r3
  4019ce:	f083 0301 	eor.w	r3, r3, #1
  4019d2:	b2db      	uxtb	r3, r3
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	d001      	beq.n	4019dc <glue_enforce_driver_init+0x18>
	{
		glue_crash_and_burn();
  4019d8:	4b02      	ldr	r3, [pc, #8]	; (4019e4 <glue_enforce_driver_init+0x20>)
  4019da:	4798      	blx	r3
	}
}
  4019dc:	bf00      	nop
  4019de:	bd80      	pop	{r7, pc}
  4019e0:	204010e0 	.word	0x204010e0
  4019e4:	00401805 	.word	0x00401805

004019e8 <glue_spi0_dma_transfer>:

void glue_spi0_dma_transfer(SpiDevice* spi, uint8_t *txBuf, uint8_t *rxBuf, uint16_t numBytes)
{
  4019e8:	b590      	push	{r4, r7, lr}
  4019ea:	b085      	sub	sp, #20
  4019ec:	af00      	add	r7, sp, #0
  4019ee:	60f8      	str	r0, [r7, #12]
  4019f0:	60b9      	str	r1, [r7, #8]
  4019f2:	607a      	str	r2, [r7, #4]
  4019f4:	807b      	strh	r3, [r7, #2]
	if (txBuf != NULL)
  4019f6:	68bb      	ldr	r3, [r7, #8]
  4019f8:	2b00      	cmp	r3, #0
  4019fa:	d005      	beq.n	401a08 <glue_spi0_dma_transfer+0x20>
	{
		spi0_dma_tx_in_process = true;
  4019fc:	4b0e      	ldr	r3, [pc, #56]	; (401a38 <glue_spi0_dma_transfer+0x50>)
  4019fe:	2201      	movs	r2, #1
  401a00:	701a      	strb	r2, [r3, #0]
		spi0_tx_buf_ptr = (uint32_t *) txBuf;
  401a02:	4a0e      	ldr	r2, [pc, #56]	; (401a3c <glue_spi0_dma_transfer+0x54>)
  401a04:	68bb      	ldr	r3, [r7, #8]
  401a06:	6013      	str	r3, [r2, #0]
	}
	
	if (rxBuf != NULL)
  401a08:	687b      	ldr	r3, [r7, #4]
  401a0a:	2b00      	cmp	r3, #0
  401a0c:	d005      	beq.n	401a1a <glue_spi0_dma_transfer+0x32>
	{
		spi0_dma_rx_in_process = true;
  401a0e:	4b0c      	ldr	r3, [pc, #48]	; (401a40 <glue_spi0_dma_transfer+0x58>)
  401a10:	2201      	movs	r2, #1
  401a12:	701a      	strb	r2, [r3, #0]
		spi0_rx_buf_ptr = (uint32_t *) rxBuf;
  401a14:	4a0b      	ldr	r2, [pc, #44]	; (401a44 <glue_spi0_dma_transfer+0x5c>)
  401a16:	687b      	ldr	r3, [r7, #4]
  401a18:	6013      	str	r3, [r2, #0]
	}
	
	current_spi0_transfer_size = numBytes;
  401a1a:	4a0b      	ldr	r2, [pc, #44]	; (401a48 <glue_spi0_dma_transfer+0x60>)
  401a1c:	887b      	ldrh	r3, [r7, #2]
  401a1e:	8013      	strh	r3, [r2, #0]
		
		SCB_CleanDCache_by_Addr((uint32_t *) txBuf, temp);
	}
	*/	

	spi_m_dma_transfer(spi->halSpiDriver, txBuf, rxBuf, numBytes);
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	6818      	ldr	r0, [r3, #0]
  401a24:	887b      	ldrh	r3, [r7, #2]
  401a26:	687a      	ldr	r2, [r7, #4]
  401a28:	68b9      	ldr	r1, [r7, #8]
  401a2a:	4c08      	ldr	r4, [pc, #32]	; (401a4c <glue_spi0_dma_transfer+0x64>)
  401a2c:	47a0      	blx	r4
}
  401a2e:	bf00      	nop
  401a30:	3714      	adds	r7, #20
  401a32:	46bd      	mov	sp, r7
  401a34:	bd90      	pop	{r4, r7, pc}
  401a36:	bf00      	nop
  401a38:	204010e1 	.word	0x204010e1
  401a3c:	204010e8 	.word	0x204010e8
  401a40:	204010e2 	.word	0x204010e2
  401a44:	204010ec 	.word	0x204010ec
  401a48:	204010f8 	.word	0x204010f8
  401a4c:	00402371 	.word	0x00402371

00401a50 <glue_spi1_dma_transfer>:

void glue_spi1_dma_transfer(SpiDevice* spi, uint8_t *txBuf, uint8_t *rxBuf, uint16_t numBytes)
{
  401a50:	b590      	push	{r4, r7, lr}
  401a52:	b085      	sub	sp, #20
  401a54:	af00      	add	r7, sp, #0
  401a56:	60f8      	str	r0, [r7, #12]
  401a58:	60b9      	str	r1, [r7, #8]
  401a5a:	607a      	str	r2, [r7, #4]
  401a5c:	807b      	strh	r3, [r7, #2]
	if (txBuf != NULL)
  401a5e:	68bb      	ldr	r3, [r7, #8]
  401a60:	2b00      	cmp	r3, #0
  401a62:	d005      	beq.n	401a70 <glue_spi1_dma_transfer+0x20>
	{
		spi1_dma_tx_in_process = true;
  401a64:	4b0e      	ldr	r3, [pc, #56]	; (401aa0 <glue_spi1_dma_transfer+0x50>)
  401a66:	2201      	movs	r2, #1
  401a68:	701a      	strb	r2, [r3, #0]
		spi1_tx_buf_ptr = (uint32_t *) txBuf;
  401a6a:	4a0e      	ldr	r2, [pc, #56]	; (401aa4 <glue_spi1_dma_transfer+0x54>)
  401a6c:	68bb      	ldr	r3, [r7, #8]
  401a6e:	6013      	str	r3, [r2, #0]
	}
	
	if (rxBuf != NULL)
  401a70:	687b      	ldr	r3, [r7, #4]
  401a72:	2b00      	cmp	r3, #0
  401a74:	d005      	beq.n	401a82 <glue_spi1_dma_transfer+0x32>
	{
		spi1_dma_rx_in_process = true;
  401a76:	4b0c      	ldr	r3, [pc, #48]	; (401aa8 <glue_spi1_dma_transfer+0x58>)
  401a78:	2201      	movs	r2, #1
  401a7a:	701a      	strb	r2, [r3, #0]
		spi1_rx_buf_ptr = (uint32_t *) rxBuf;
  401a7c:	4a0b      	ldr	r2, [pc, #44]	; (401aac <glue_spi1_dma_transfer+0x5c>)
  401a7e:	687b      	ldr	r3, [r7, #4]
  401a80:	6013      	str	r3, [r2, #0]
	}
	
	current_spi1_transfer_size = numBytes;
  401a82:	4a0b      	ldr	r2, [pc, #44]	; (401ab0 <glue_spi1_dma_transfer+0x60>)
  401a84:	887b      	ldrh	r3, [r7, #2]
  401a86:	8013      	strh	r3, [r2, #0]
		
		SCB_CleanDCache_by_Addr((uint32_t *) txBuf, temp);
	}
	*/	

	spi_m_dma_transfer(spi->halSpiDriver, txBuf, rxBuf, numBytes);
  401a88:	68fb      	ldr	r3, [r7, #12]
  401a8a:	6818      	ldr	r0, [r3, #0]
  401a8c:	887b      	ldrh	r3, [r7, #2]
  401a8e:	687a      	ldr	r2, [r7, #4]
  401a90:	68b9      	ldr	r1, [r7, #8]
  401a92:	4c08      	ldr	r4, [pc, #32]	; (401ab4 <glue_spi1_dma_transfer+0x64>)
  401a94:	47a0      	blx	r4
}
  401a96:	bf00      	nop
  401a98:	3714      	adds	r7, #20
  401a9a:	46bd      	mov	sp, r7
  401a9c:	bd90      	pop	{r4, r7, pc}
  401a9e:	bf00      	nop
  401aa0:	204010e3 	.word	0x204010e3
  401aa4:	204010f0 	.word	0x204010f0
  401aa8:	204010e4 	.word	0x204010e4
  401aac:	204010f4 	.word	0x204010f4
  401ab0:	204010fa 	.word	0x204010fa
  401ab4:	00402371 	.word	0x00402371

00401ab8 <glue_spi_dma_transfer>:

void glue_spi_dma_transfer(SpiDevice* spi, uint8_t *txBuf, uint8_t *rxBuf, uint16_t numBytes)
{
  401ab8:	b590      	push	{r4, r7, lr}
  401aba:	b085      	sub	sp, #20
  401abc:	af00      	add	r7, sp, #0
  401abe:	60f8      	str	r0, [r7, #12]
  401ac0:	60b9      	str	r1, [r7, #8]
  401ac2:	607a      	str	r2, [r7, #4]
  401ac4:	807b      	strh	r3, [r7, #2]
	//TODO: Go do something else while we wait for the SPI/DMA to finish
	if (spi->halSpiDriver == &SPI_0)
  401ac6:	68fb      	ldr	r3, [r7, #12]
  401ac8:	681b      	ldr	r3, [r3, #0]
  401aca:	4a24      	ldr	r2, [pc, #144]	; (401b5c <glue_spi_dma_transfer+0xa4>)
  401acc:	4293      	cmp	r3, r2
  401ace:	d11e      	bne.n	401b0e <glue_spi_dma_transfer+0x56>
	{
		gpio_set_pin_level(CS, false);
  401ad0:	2100      	movs	r1, #0
  401ad2:	2059      	movs	r0, #89	; 0x59
  401ad4:	4b22      	ldr	r3, [pc, #136]	; (401b60 <glue_spi_dma_transfer+0xa8>)
  401ad6:	4798      	blx	r3
		delay_us(10);
  401ad8:	200a      	movs	r0, #10
  401ada:	4b22      	ldr	r3, [pc, #136]	; (401b64 <glue_spi_dma_transfer+0xac>)
  401adc:	4798      	blx	r3
		glue_spi0_dma_transfer(spi, txBuf, rxBuf, numBytes);
  401ade:	887b      	ldrh	r3, [r7, #2]
  401ae0:	687a      	ldr	r2, [r7, #4]
  401ae2:	68b9      	ldr	r1, [r7, #8]
  401ae4:	68f8      	ldr	r0, [r7, #12]
  401ae6:	4c20      	ldr	r4, [pc, #128]	; (401b68 <glue_spi_dma_transfer+0xb0>)
  401ae8:	47a0      	blx	r4
		while(glue_spi_in_process(spi));
  401aea:	bf00      	nop
  401aec:	68f8      	ldr	r0, [r7, #12]
  401aee:	4b1f      	ldr	r3, [pc, #124]	; (401b6c <glue_spi_dma_transfer+0xb4>)
  401af0:	4798      	blx	r3
  401af2:	4603      	mov	r3, r0
  401af4:	2b00      	cmp	r3, #0
  401af6:	d1f9      	bne.n	401aec <glue_spi_dma_transfer+0x34>
		//Interrupt fires before all bits shifted in...
		//TODO: Find workaround.
		delay_us(20);
  401af8:	2014      	movs	r0, #20
  401afa:	4b1a      	ldr	r3, [pc, #104]	; (401b64 <glue_spi_dma_transfer+0xac>)
  401afc:	4798      	blx	r3
		gpio_set_pin_level(CS, true);
  401afe:	2101      	movs	r1, #1
  401b00:	2059      	movs	r0, #89	; 0x59
  401b02:	4b17      	ldr	r3, [pc, #92]	; (401b60 <glue_spi_dma_transfer+0xa8>)
  401b04:	4798      	blx	r3
		delay_us(20);
  401b06:	2014      	movs	r0, #20
  401b08:	4b16      	ldr	r3, [pc, #88]	; (401b64 <glue_spi_dma_transfer+0xac>)
  401b0a:	4798      	blx	r3
		//For now we just waste some cycles waiting for it to figure itself out
		delay_us(20);
		gpio_set_pin_level(CS_2, true);
		delay_us(20);
	}
}
  401b0c:	e022      	b.n	401b54 <glue_spi_dma_transfer+0x9c>
	else if (spi->halSpiDriver == &SPI_1)
  401b0e:	68fb      	ldr	r3, [r7, #12]
  401b10:	681b      	ldr	r3, [r3, #0]
  401b12:	4a17      	ldr	r2, [pc, #92]	; (401b70 <glue_spi_dma_transfer+0xb8>)
  401b14:	4293      	cmp	r3, r2
  401b16:	d11d      	bne.n	401b54 <glue_spi_dma_transfer+0x9c>
		gpio_set_pin_level(CS_2, false);
  401b18:	2100      	movs	r1, #0
  401b1a:	2071      	movs	r0, #113	; 0x71
  401b1c:	4b10      	ldr	r3, [pc, #64]	; (401b60 <glue_spi_dma_transfer+0xa8>)
  401b1e:	4798      	blx	r3
		delay_us(10);
  401b20:	200a      	movs	r0, #10
  401b22:	4b10      	ldr	r3, [pc, #64]	; (401b64 <glue_spi_dma_transfer+0xac>)
  401b24:	4798      	blx	r3
		glue_spi1_dma_transfer(spi, txBuf, rxBuf, numBytes);
  401b26:	887b      	ldrh	r3, [r7, #2]
  401b28:	687a      	ldr	r2, [r7, #4]
  401b2a:	68b9      	ldr	r1, [r7, #8]
  401b2c:	68f8      	ldr	r0, [r7, #12]
  401b2e:	4c11      	ldr	r4, [pc, #68]	; (401b74 <glue_spi_dma_transfer+0xbc>)
  401b30:	47a0      	blx	r4
		while(glue_spi_in_process(spi));
  401b32:	bf00      	nop
  401b34:	68f8      	ldr	r0, [r7, #12]
  401b36:	4b0d      	ldr	r3, [pc, #52]	; (401b6c <glue_spi_dma_transfer+0xb4>)
  401b38:	4798      	blx	r3
  401b3a:	4603      	mov	r3, r0
  401b3c:	2b00      	cmp	r3, #0
  401b3e:	d1f9      	bne.n	401b34 <glue_spi_dma_transfer+0x7c>
		delay_us(20);
  401b40:	2014      	movs	r0, #20
  401b42:	4b08      	ldr	r3, [pc, #32]	; (401b64 <glue_spi_dma_transfer+0xac>)
  401b44:	4798      	blx	r3
		gpio_set_pin_level(CS_2, true);
  401b46:	2101      	movs	r1, #1
  401b48:	2071      	movs	r0, #113	; 0x71
  401b4a:	4b05      	ldr	r3, [pc, #20]	; (401b60 <glue_spi_dma_transfer+0xa8>)
  401b4c:	4798      	blx	r3
		delay_us(20);
  401b4e:	2014      	movs	r0, #20
  401b50:	4b04      	ldr	r3, [pc, #16]	; (401b64 <glue_spi_dma_transfer+0xac>)
  401b52:	4798      	blx	r3
}
  401b54:	bf00      	nop
  401b56:	3714      	adds	r7, #20
  401b58:	46bd      	mov	sp, r7
  401b5a:	bd90      	pop	{r4, r7, pc}
  401b5c:	20401388 	.word	0x20401388
  401b60:	0040179d 	.word	0x0040179d
  401b64:	00401dcd 	.word	0x00401dcd
  401b68:	004019e9 	.word	0x004019e9
  401b6c:	00401b79 	.word	0x00401b79
  401b70:	2040134c 	.word	0x2040134c
  401b74:	00401a51 	.word	0x00401a51

00401b78 <glue_spi_in_process>:

bool glue_spi_in_process(SpiDevice* spi)
{
  401b78:	b480      	push	{r7}
  401b7a:	b083      	sub	sp, #12
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	6078      	str	r0, [r7, #4]
	if (spi->halSpiDriver == &SPI_0)
  401b80:	687b      	ldr	r3, [r7, #4]
  401b82:	681b      	ldr	r3, [r3, #0]
  401b84:	4a13      	ldr	r2, [pc, #76]	; (401bd4 <glue_spi_in_process+0x5c>)
  401b86:	4293      	cmp	r3, r2
  401b88:	d10b      	bne.n	401ba2 <glue_spi_in_process+0x2a>
	{
		if (spi0_dma_tx_in_process || spi0_dma_rx_in_process)
  401b8a:	4b13      	ldr	r3, [pc, #76]	; (401bd8 <glue_spi_in_process+0x60>)
  401b8c:	781b      	ldrb	r3, [r3, #0]
  401b8e:	b2db      	uxtb	r3, r3
  401b90:	2b00      	cmp	r3, #0
  401b92:	d104      	bne.n	401b9e <glue_spi_in_process+0x26>
  401b94:	4b11      	ldr	r3, [pc, #68]	; (401bdc <glue_spi_in_process+0x64>)
  401b96:	781b      	ldrb	r3, [r3, #0]
  401b98:	b2db      	uxtb	r3, r3
  401b9a:	2b00      	cmp	r3, #0
  401b9c:	d014      	beq.n	401bc8 <glue_spi_in_process+0x50>
		{
			return(true);
  401b9e:	2301      	movs	r3, #1
  401ba0:	e012      	b.n	401bc8 <glue_spi_in_process+0x50>
		}
	}
	else if (spi->halSpiDriver == &SPI_1)
  401ba2:	687b      	ldr	r3, [r7, #4]
  401ba4:	681b      	ldr	r3, [r3, #0]
  401ba6:	4a0e      	ldr	r2, [pc, #56]	; (401be0 <glue_spi_in_process+0x68>)
  401ba8:	4293      	cmp	r3, r2
  401baa:	d10b      	bne.n	401bc4 <glue_spi_in_process+0x4c>
	{
		if (spi1_dma_tx_in_process || spi1_dma_rx_in_process)
  401bac:	4b0d      	ldr	r3, [pc, #52]	; (401be4 <glue_spi_in_process+0x6c>)
  401bae:	781b      	ldrb	r3, [r3, #0]
  401bb0:	b2db      	uxtb	r3, r3
  401bb2:	2b00      	cmp	r3, #0
  401bb4:	d104      	bne.n	401bc0 <glue_spi_in_process+0x48>
  401bb6:	4b0c      	ldr	r3, [pc, #48]	; (401be8 <glue_spi_in_process+0x70>)
  401bb8:	781b      	ldrb	r3, [r3, #0]
  401bba:	b2db      	uxtb	r3, r3
  401bbc:	2b00      	cmp	r3, #0
  401bbe:	d003      	beq.n	401bc8 <glue_spi_in_process+0x50>
		{
			return(true);
  401bc0:	2301      	movs	r3, #1
  401bc2:	e001      	b.n	401bc8 <glue_spi_in_process+0x50>
		}
	}
	else
	{
		return(false);
  401bc4:	2300      	movs	r3, #0
  401bc6:	e7ff      	b.n	401bc8 <glue_spi_in_process+0x50>
	}
}
  401bc8:	4618      	mov	r0, r3
  401bca:	370c      	adds	r7, #12
  401bcc:	46bd      	mov	sp, r7
  401bce:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bd2:	4770      	bx	lr
  401bd4:	20401388 	.word	0x20401388
  401bd8:	204010e1 	.word	0x204010e1
  401bdc:	204010e2 	.word	0x204010e2
  401be0:	2040134c 	.word	0x2040134c
  401be4:	204010e3 	.word	0x204010e3
  401be8:	204010e4 	.word	0x204010e4

00401bec <glue_spi0_cb_tx_done>:
// See: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0646b/BABIGDDC.html
// There are potentially silicon eratta issues with cache coherency on this chip revision.
// See: http://community.atmel.com/forum/samv7-scbdisabledcache-crashes-hardfault

void glue_spi0_cb_tx_done(struct _dma_resource *resource)
{
  401bec:	b480      	push	{r7}
  401bee:	b083      	sub	sp, #12
  401bf0:	af00      	add	r7, sp, #0
  401bf2:	6078      	str	r0, [r7, #4]
	spi0_dma_tx_in_process = false;
  401bf4:	4b07      	ldr	r3, [pc, #28]	; (401c14 <glue_spi0_cb_tx_done+0x28>)
  401bf6:	2200      	movs	r2, #0
  401bf8:	701a      	strb	r2, [r3, #0]
	txInts++;
  401bfa:	4b07      	ldr	r3, [pc, #28]	; (401c18 <glue_spi0_cb_tx_done+0x2c>)
  401bfc:	881b      	ldrh	r3, [r3, #0]
  401bfe:	3301      	adds	r3, #1
  401c00:	b29a      	uxth	r2, r3
  401c02:	4b05      	ldr	r3, [pc, #20]	; (401c18 <glue_spi0_cb_tx_done+0x2c>)
  401c04:	801a      	strh	r2, [r3, #0]
}
  401c06:	bf00      	nop
  401c08:	370c      	adds	r7, #12
  401c0a:	46bd      	mov	sp, r7
  401c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c10:	4770      	bx	lr
  401c12:	bf00      	nop
  401c14:	204010e1 	.word	0x204010e1
  401c18:	204010fc 	.word	0x204010fc

00401c1c <glue_spi0_cb_rx_done>:

void glue_spi0_cb_rx_done(struct _dma_resource *resource)
{
  401c1c:	b480      	push	{r7}
  401c1e:	b083      	sub	sp, #12
  401c20:	af00      	add	r7, sp, #0
  401c22:	6078      	str	r0, [r7, #4]
		
		spi0_rx_buf_ptr = NULL;
		current_spi0_transfer_size = 0;
	}
	*/
	spi0_dma_rx_in_process = false;
  401c24:	4b07      	ldr	r3, [pc, #28]	; (401c44 <glue_spi0_cb_rx_done+0x28>)
  401c26:	2200      	movs	r2, #0
  401c28:	701a      	strb	r2, [r3, #0]
	rxInts++;
  401c2a:	4b07      	ldr	r3, [pc, #28]	; (401c48 <glue_spi0_cb_rx_done+0x2c>)
  401c2c:	881b      	ldrh	r3, [r3, #0]
  401c2e:	3301      	adds	r3, #1
  401c30:	b29a      	uxth	r2, r3
  401c32:	4b05      	ldr	r3, [pc, #20]	; (401c48 <glue_spi0_cb_rx_done+0x2c>)
  401c34:	801a      	strh	r2, [r3, #0]
}
  401c36:	bf00      	nop
  401c38:	370c      	adds	r7, #12
  401c3a:	46bd      	mov	sp, r7
  401c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c40:	4770      	bx	lr
  401c42:	bf00      	nop
  401c44:	204010e2 	.word	0x204010e2
  401c48:	204010fe 	.word	0x204010fe

00401c4c <glue_spi0_cb_error>:

void glue_spi0_cb_error(struct _dma_resource *resource)
{
  401c4c:	b480      	push	{r7}
  401c4e:	b083      	sub	sp, #12
  401c50:	af00      	add	r7, sp, #0
  401c52:	6078      	str	r0, [r7, #4]
	spi0_dma_tx_in_process = false;
  401c54:	4b05      	ldr	r3, [pc, #20]	; (401c6c <glue_spi0_cb_error+0x20>)
  401c56:	2200      	movs	r2, #0
  401c58:	701a      	strb	r2, [r3, #0]
	spi0_dma_rx_in_process = false;
  401c5a:	4b05      	ldr	r3, [pc, #20]	; (401c70 <glue_spi0_cb_error+0x24>)
  401c5c:	2200      	movs	r2, #0
  401c5e:	701a      	strb	r2, [r3, #0]
}
  401c60:	bf00      	nop
  401c62:	370c      	adds	r7, #12
  401c64:	46bd      	mov	sp, r7
  401c66:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c6a:	4770      	bx	lr
  401c6c:	204010e1 	.word	0x204010e1
  401c70:	204010e2 	.word	0x204010e2

00401c74 <glue_spi1_cb_tx_done>:

void glue_spi1_cb_tx_done(struct _dma_resource *resource)
{
  401c74:	b480      	push	{r7}
  401c76:	b083      	sub	sp, #12
  401c78:	af00      	add	r7, sp, #0
  401c7a:	6078      	str	r0, [r7, #4]
	spi1_dma_tx_in_process = false;
  401c7c:	4b07      	ldr	r3, [pc, #28]	; (401c9c <glue_spi1_cb_tx_done+0x28>)
  401c7e:	2200      	movs	r2, #0
  401c80:	701a      	strb	r2, [r3, #0]
	txInts++;
  401c82:	4b07      	ldr	r3, [pc, #28]	; (401ca0 <glue_spi1_cb_tx_done+0x2c>)
  401c84:	881b      	ldrh	r3, [r3, #0]
  401c86:	3301      	adds	r3, #1
  401c88:	b29a      	uxth	r2, r3
  401c8a:	4b05      	ldr	r3, [pc, #20]	; (401ca0 <glue_spi1_cb_tx_done+0x2c>)
  401c8c:	801a      	strh	r2, [r3, #0]
}
  401c8e:	bf00      	nop
  401c90:	370c      	adds	r7, #12
  401c92:	46bd      	mov	sp, r7
  401c94:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c98:	4770      	bx	lr
  401c9a:	bf00      	nop
  401c9c:	204010e3 	.word	0x204010e3
  401ca0:	204010fc 	.word	0x204010fc

00401ca4 <glue_spi1_cb_rx_done>:

void glue_spi1_cb_rx_done(struct _dma_resource *resource)
{
  401ca4:	b480      	push	{r7}
  401ca6:	b083      	sub	sp, #12
  401ca8:	af00      	add	r7, sp, #0
  401caa:	6078      	str	r0, [r7, #4]
		
		spi0_rx_buf_ptr = NULL;
		current_spi0_transfer_size = 0;
	}
	*/
	spi1_dma_rx_in_process = false;
  401cac:	4b07      	ldr	r3, [pc, #28]	; (401ccc <glue_spi1_cb_rx_done+0x28>)
  401cae:	2200      	movs	r2, #0
  401cb0:	701a      	strb	r2, [r3, #0]
	rxInts++;
  401cb2:	4b07      	ldr	r3, [pc, #28]	; (401cd0 <glue_spi1_cb_rx_done+0x2c>)
  401cb4:	881b      	ldrh	r3, [r3, #0]
  401cb6:	3301      	adds	r3, #1
  401cb8:	b29a      	uxth	r2, r3
  401cba:	4b05      	ldr	r3, [pc, #20]	; (401cd0 <glue_spi1_cb_rx_done+0x2c>)
  401cbc:	801a      	strh	r2, [r3, #0]
}
  401cbe:	bf00      	nop
  401cc0:	370c      	adds	r7, #12
  401cc2:	46bd      	mov	sp, r7
  401cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cc8:	4770      	bx	lr
  401cca:	bf00      	nop
  401ccc:	204010e4 	.word	0x204010e4
  401cd0:	204010fe 	.word	0x204010fe

00401cd4 <glue_spi1_cb_error>:

void glue_spi1_cb_error(struct _dma_resource *resource)
{
  401cd4:	b480      	push	{r7}
  401cd6:	b083      	sub	sp, #12
  401cd8:	af00      	add	r7, sp, #0
  401cda:	6078      	str	r0, [r7, #4]
	spi1_dma_tx_in_process = false;
  401cdc:	4b05      	ldr	r3, [pc, #20]	; (401cf4 <glue_spi1_cb_error+0x20>)
  401cde:	2200      	movs	r2, #0
  401ce0:	701a      	strb	r2, [r3, #0]
	spi1_dma_rx_in_process = false;
  401ce2:	4b05      	ldr	r3, [pc, #20]	; (401cf8 <glue_spi1_cb_error+0x24>)
  401ce4:	2200      	movs	r2, #0
  401ce6:	701a      	strb	r2, [r3, #0]
  401ce8:	bf00      	nop
  401cea:	370c      	adds	r7, #12
  401cec:	46bd      	mov	sp, r7
  401cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cf2:	4770      	bx	lr
  401cf4:	204010e3 	.word	0x204010e3
  401cf8:	204010e4 	.word	0x204010e4

00401cfc <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
  401cfc:	b480      	push	{r7}
  401cfe:	b085      	sub	sp, #20
  401d00:	af00      	add	r7, sp, #0
  401d02:	6078      	str	r0, [r7, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401d04:	f3ef 8310 	mrs	r3, PRIMASK
  401d08:	60fb      	str	r3, [r7, #12]
  return(result);
  401d0a:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
  401d0c:	687b      	ldr	r3, [r7, #4]
  401d0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401d10:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401d12:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  401d16:	bf00      	nop
  401d18:	3714      	adds	r7, #20
  401d1a:	46bd      	mov	sp, r7
  401d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d20:	4770      	bx	lr

00401d22 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
  401d22:	b480      	push	{r7}
  401d24:	b085      	sub	sp, #20
  401d26:	af00      	add	r7, sp, #0
  401d28:	6078      	str	r0, [r7, #4]
  401d2a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
  401d2e:	687b      	ldr	r3, [r7, #4]
  401d30:	681b      	ldr	r3, [r3, #0]
  401d32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401d34:	68fb      	ldr	r3, [r7, #12]
  401d36:	f383 8810 	msr	PRIMASK, r3
}
  401d3a:	bf00      	nop
  401d3c:	3714      	adds	r7, #20
  401d3e:	46bd      	mov	sp, r7
  401d40:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d44:	4770      	bx	lr
	...

00401d48 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
  401d48:	b580      	push	{r7, lr}
  401d4a:	b084      	sub	sp, #16
  401d4c:	af00      	add	r7, sp, #0
  401d4e:	6078      	str	r0, [r7, #4]
  401d50:	6039      	str	r1, [r7, #0]
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
  401d52:	687b      	ldr	r3, [r7, #4]
  401d54:	2b00      	cmp	r3, #0
  401d56:	d004      	beq.n	401d62 <dac_sync_init+0x1a>
  401d58:	683b      	ldr	r3, [r7, #0]
  401d5a:	2b00      	cmp	r3, #0
  401d5c:	d001      	beq.n	401d62 <dac_sync_init+0x1a>
  401d5e:	2301      	movs	r3, #1
  401d60:	e000      	b.n	401d64 <dac_sync_init+0x1c>
  401d62:	2300      	movs	r3, #0
  401d64:	f003 0301 	and.w	r3, r3, #1
  401d68:	b2db      	uxtb	r3, r3
  401d6a:	2232      	movs	r2, #50	; 0x32
  401d6c:	4914      	ldr	r1, [pc, #80]	; (401dc0 <dac_sync_init+0x78>)
  401d6e:	4618      	mov	r0, r3
  401d70:	4b14      	ldr	r3, [pc, #80]	; (401dc4 <dac_sync_init+0x7c>)
  401d72:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
  401d74:	687b      	ldr	r3, [r7, #4]
  401d76:	6839      	ldr	r1, [r7, #0]
  401d78:	4618      	mov	r0, r3
  401d7a:	4b13      	ldr	r3, [pc, #76]	; (401dc8 <dac_sync_init+0x80>)
  401d7c:	4798      	blx	r3
  401d7e:	60b8      	str	r0, [r7, #8]
	if (rc) {
  401d80:	68bb      	ldr	r3, [r7, #8]
  401d82:	2b00      	cmp	r3, #0
  401d84:	d001      	beq.n	401d8a <dac_sync_init+0x42>
		return rc;
  401d86:	68bb      	ldr	r3, [r7, #8]
  401d88:	e015      	b.n	401db6 <dac_sync_init+0x6e>
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
  401d8a:	2300      	movs	r3, #0
  401d8c:	73fb      	strb	r3, [r7, #15]
  401d8e:	e00e      	b.n	401dae <dac_sync_init+0x66>
		descr->sel_ch[i].buffer = NULL;
  401d90:	7bfb      	ldrb	r3, [r7, #15]
  401d92:	687a      	ldr	r2, [r7, #4]
  401d94:	00db      	lsls	r3, r3, #3
  401d96:	4413      	add	r3, r2
  401d98:	2200      	movs	r2, #0
  401d9a:	605a      	str	r2, [r3, #4]
		descr->sel_ch[i].length = 0;
  401d9c:	7bfb      	ldrb	r3, [r7, #15]
  401d9e:	687a      	ldr	r2, [r7, #4]
  401da0:	00db      	lsls	r3, r3, #3
  401da2:	4413      	add	r3, r2
  401da4:	2200      	movs	r2, #0
  401da6:	609a      	str	r2, [r3, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
  401da8:	7bfb      	ldrb	r3, [r7, #15]
  401daa:	3301      	adds	r3, #1
  401dac:	73fb      	strb	r3, [r7, #15]
  401dae:	7bfb      	ldrb	r3, [r7, #15]
  401db0:	2b01      	cmp	r3, #1
  401db2:	d9ed      	bls.n	401d90 <dac_sync_init+0x48>
	}

	return ERR_NONE;
  401db4:	2300      	movs	r3, #0
}
  401db6:	4618      	mov	r0, r3
  401db8:	3710      	adds	r7, #16
  401dba:	46bd      	mov	sp, r7
  401dbc:	bd80      	pop	{r7, pc}
  401dbe:	bf00      	nop
  401dc0:	0040751c 	.word	0x0040751c
  401dc4:	00402d25 	.word	0x00402d25
  401dc8:	004033e9 	.word	0x004033e9

00401dcc <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  401dcc:	b590      	push	{r4, r7, lr}
  401dce:	b083      	sub	sp, #12
  401dd0:	af00      	add	r7, sp, #0
  401dd2:	4603      	mov	r3, r0
  401dd4:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
  401dd6:	4b07      	ldr	r3, [pc, #28]	; (401df4 <delay_us+0x28>)
  401dd8:	681c      	ldr	r4, [r3, #0]
  401dda:	88fb      	ldrh	r3, [r7, #6]
  401ddc:	4618      	mov	r0, r3
  401dde:	4b06      	ldr	r3, [pc, #24]	; (401df8 <delay_us+0x2c>)
  401de0:	4798      	blx	r3
  401de2:	4603      	mov	r3, r0
  401de4:	4619      	mov	r1, r3
  401de6:	4620      	mov	r0, r4
  401de8:	4b04      	ldr	r3, [pc, #16]	; (401dfc <delay_us+0x30>)
  401dea:	4798      	blx	r3
}
  401dec:	bf00      	nop
  401dee:	370c      	adds	r7, #12
  401df0:	46bd      	mov	sp, r7
  401df2:	bd90      	pop	{r4, r7, pc}
  401df4:	2040112c 	.word	0x2040112c
  401df8:	00402fd9 	.word	0x00402fd9
  401dfc:	00403111 	.word	0x00403111

00401e00 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401e00:	b590      	push	{r4, r7, lr}
  401e02:	b083      	sub	sp, #12
  401e04:	af00      	add	r7, sp, #0
  401e06:	4603      	mov	r3, r0
  401e08:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401e0a:	4b07      	ldr	r3, [pc, #28]	; (401e28 <delay_ms+0x28>)
  401e0c:	681c      	ldr	r4, [r3, #0]
  401e0e:	88fb      	ldrh	r3, [r7, #6]
  401e10:	4618      	mov	r0, r3
  401e12:	4b06      	ldr	r3, [pc, #24]	; (401e2c <delay_ms+0x2c>)
  401e14:	4798      	blx	r3
  401e16:	4603      	mov	r3, r0
  401e18:	4619      	mov	r1, r3
  401e1a:	4620      	mov	r0, r4
  401e1c:	4b04      	ldr	r3, [pc, #16]	; (401e30 <delay_ms+0x30>)
  401e1e:	4798      	blx	r3
}
  401e20:	bf00      	nop
  401e22:	370c      	adds	r7, #12
  401e24:	46bd      	mov	sp, r7
  401e26:	bd90      	pop	{r4, r7, pc}
  401e28:	2040112c 	.word	0x2040112c
  401e2c:	004030e9 	.word	0x004030e9
  401e30:	00403111 	.word	0x00403111

00401e34 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
  401e34:	b580      	push	{r7, lr}
  401e36:	b082      	sub	sp, #8
  401e38:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401e3a:	2300      	movs	r3, #0
  401e3c:	80fb      	strh	r3, [r7, #6]
  401e3e:	e00e      	b.n	401e5e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401e40:	88fb      	ldrh	r3, [r7, #6]
  401e42:	4a0c      	ldr	r2, [pc, #48]	; (401e74 <ext_irq_init+0x40>)
  401e44:	00db      	lsls	r3, r3, #3
  401e46:	4413      	add	r3, r2
  401e48:	f04f 32ff 	mov.w	r2, #4294967295
  401e4c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
  401e4e:	88fb      	ldrh	r3, [r7, #6]
  401e50:	4a08      	ldr	r2, [pc, #32]	; (401e74 <ext_irq_init+0x40>)
  401e52:	2100      	movs	r1, #0
  401e54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401e58:	88fb      	ldrh	r3, [r7, #6]
  401e5a:	3301      	adds	r3, #1
  401e5c:	80fb      	strh	r3, [r7, #6]
  401e5e:	88fb      	ldrh	r3, [r7, #6]
  401e60:	2b01      	cmp	r3, #1
  401e62:	d9ed      	bls.n	401e40 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
  401e64:	4804      	ldr	r0, [pc, #16]	; (401e78 <ext_irq_init+0x44>)
  401e66:	4b05      	ldr	r3, [pc, #20]	; (401e7c <ext_irq_init+0x48>)
  401e68:	4798      	blx	r3
  401e6a:	4603      	mov	r3, r0
}
  401e6c:	4618      	mov	r0, r3
  401e6e:	3708      	adds	r7, #8
  401e70:	46bd      	mov	sp, r7
  401e72:	bd80      	pop	{r7, pc}
  401e74:	20401130 	.word	0x20401130
  401e78:	00401fd9 	.word	0x00401fd9
  401e7c:	00403aa9 	.word	0x00403aa9

00401e80 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
  401e80:	b580      	push	{r7, lr}
  401e82:	b086      	sub	sp, #24
  401e84:	af00      	add	r7, sp, #0
  401e86:	6078      	str	r0, [r7, #4]
  401e88:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
  401e8a:	2300      	movs	r3, #0
  401e8c:	75fb      	strb	r3, [r7, #23]
  401e8e:	2300      	movs	r3, #0
  401e90:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
  401e92:	2300      	movs	r3, #0
  401e94:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
  401e96:	e012      	b.n	401ebe <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
  401e98:	7dfb      	ldrb	r3, [r7, #23]
  401e9a:	4a4d      	ldr	r2, [pc, #308]	; (401fd0 <ext_irq_register+0x150>)
  401e9c:	00db      	lsls	r3, r3, #3
  401e9e:	4413      	add	r3, r2
  401ea0:	685a      	ldr	r2, [r3, #4]
  401ea2:	687b      	ldr	r3, [r7, #4]
  401ea4:	429a      	cmp	r2, r3
  401ea6:	d107      	bne.n	401eb8 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
  401ea8:	7dfb      	ldrb	r3, [r7, #23]
  401eaa:	4949      	ldr	r1, [pc, #292]	; (401fd0 <ext_irq_register+0x150>)
  401eac:	683a      	ldr	r2, [r7, #0]
  401eae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
  401eb2:	2301      	movs	r3, #1
  401eb4:	757b      	strb	r3, [r7, #21]
			break;
  401eb6:	e005      	b.n	401ec4 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401eb8:	7dfb      	ldrb	r3, [r7, #23]
  401eba:	3301      	adds	r3, #1
  401ebc:	75fb      	strb	r3, [r7, #23]
  401ebe:	7dfb      	ldrb	r3, [r7, #23]
  401ec0:	2b01      	cmp	r3, #1
  401ec2:	d9e9      	bls.n	401e98 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
  401ec4:	683b      	ldr	r3, [r7, #0]
  401ec6:	2b00      	cmp	r3, #0
  401ec8:	d10e      	bne.n	401ee8 <ext_irq_register+0x68>
		if (!found) {
  401eca:	7d7b      	ldrb	r3, [r7, #21]
  401ecc:	f083 0301 	eor.w	r3, r3, #1
  401ed0:	b2db      	uxtb	r3, r3
  401ed2:	2b00      	cmp	r3, #0
  401ed4:	d002      	beq.n	401edc <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
  401ed6:	f06f 030c 	mvn.w	r3, #12
  401eda:	e074      	b.n	401fc6 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
  401edc:	2100      	movs	r1, #0
  401ede:	6878      	ldr	r0, [r7, #4]
  401ee0:	4b3c      	ldr	r3, [pc, #240]	; (401fd4 <ext_irq_register+0x154>)
  401ee2:	4798      	blx	r3
  401ee4:	4603      	mov	r3, r0
  401ee6:	e06e      	b.n	401fc6 <ext_irq_register+0x146>
	}

	if (!found) {
  401ee8:	7d7b      	ldrb	r3, [r7, #21]
  401eea:	f083 0301 	eor.w	r3, r3, #1
  401eee:	b2db      	uxtb	r3, r3
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	d05a      	beq.n	401faa <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401ef4:	2300      	movs	r3, #0
  401ef6:	75fb      	strb	r3, [r7, #23]
  401ef8:	e016      	b.n	401f28 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
  401efa:	7dfb      	ldrb	r3, [r7, #23]
  401efc:	4a34      	ldr	r2, [pc, #208]	; (401fd0 <ext_irq_register+0x150>)
  401efe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401f02:	2b00      	cmp	r3, #0
  401f04:	d10d      	bne.n	401f22 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
  401f06:	7dfb      	ldrb	r3, [r7, #23]
  401f08:	4931      	ldr	r1, [pc, #196]	; (401fd0 <ext_irq_register+0x150>)
  401f0a:	683a      	ldr	r2, [r7, #0]
  401f0c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
  401f10:	7dfb      	ldrb	r3, [r7, #23]
  401f12:	4a2f      	ldr	r2, [pc, #188]	; (401fd0 <ext_irq_register+0x150>)
  401f14:	00db      	lsls	r3, r3, #3
  401f16:	4413      	add	r3, r2
  401f18:	687a      	ldr	r2, [r7, #4]
  401f1a:	605a      	str	r2, [r3, #4]
				found           = true;
  401f1c:	2301      	movs	r3, #1
  401f1e:	757b      	strb	r3, [r7, #21]
				break;
  401f20:	e005      	b.n	401f2e <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401f22:	7dfb      	ldrb	r3, [r7, #23]
  401f24:	3301      	adds	r3, #1
  401f26:	75fb      	strb	r3, [r7, #23]
  401f28:	7dfb      	ldrb	r3, [r7, #23]
  401f2a:	2b01      	cmp	r3, #1
  401f2c:	d9e5      	bls.n	401efa <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401f2e:	e036      	b.n	401f9e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401f30:	7dfb      	ldrb	r3, [r7, #23]
  401f32:	4a27      	ldr	r2, [pc, #156]	; (401fd0 <ext_irq_register+0x150>)
  401f34:	00db      	lsls	r3, r3, #3
  401f36:	4413      	add	r3, r2
  401f38:	685a      	ldr	r2, [r3, #4]
  401f3a:	7dbb      	ldrb	r3, [r7, #22]
  401f3c:	4924      	ldr	r1, [pc, #144]	; (401fd0 <ext_irq_register+0x150>)
  401f3e:	00db      	lsls	r3, r3, #3
  401f40:	440b      	add	r3, r1
  401f42:	685b      	ldr	r3, [r3, #4]
  401f44:	429a      	cmp	r2, r3
  401f46:	d227      	bcs.n	401f98 <ext_irq_register+0x118>
  401f48:	7dbb      	ldrb	r3, [r7, #22]
  401f4a:	4a21      	ldr	r2, [pc, #132]	; (401fd0 <ext_irq_register+0x150>)
  401f4c:	00db      	lsls	r3, r3, #3
  401f4e:	4413      	add	r3, r2
  401f50:	685b      	ldr	r3, [r3, #4]
  401f52:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f56:	d01f      	beq.n	401f98 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
  401f58:	7dbb      	ldrb	r3, [r7, #22]
  401f5a:	491d      	ldr	r1, [pc, #116]	; (401fd0 <ext_irq_register+0x150>)
  401f5c:	f107 020c 	add.w	r2, r7, #12
  401f60:	00db      	lsls	r3, r3, #3
  401f62:	440b      	add	r3, r1
  401f64:	e893 0003 	ldmia.w	r3, {r0, r1}
  401f68:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
  401f6c:	7dbb      	ldrb	r3, [r7, #22]
  401f6e:	7dfa      	ldrb	r2, [r7, #23]
  401f70:	4817      	ldr	r0, [pc, #92]	; (401fd0 <ext_irq_register+0x150>)
  401f72:	4917      	ldr	r1, [pc, #92]	; (401fd0 <ext_irq_register+0x150>)
  401f74:	00db      	lsls	r3, r3, #3
  401f76:	4403      	add	r3, r0
  401f78:	00d2      	lsls	r2, r2, #3
  401f7a:	440a      	add	r2, r1
  401f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
  401f80:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
  401f84:	7dfb      	ldrb	r3, [r7, #23]
  401f86:	4a12      	ldr	r2, [pc, #72]	; (401fd0 <ext_irq_register+0x150>)
  401f88:	00db      	lsls	r3, r3, #3
  401f8a:	4413      	add	r3, r2
  401f8c:	f107 020c 	add.w	r2, r7, #12
  401f90:	e892 0003 	ldmia.w	r2, {r0, r1}
  401f94:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401f98:	7dbb      	ldrb	r3, [r7, #22]
  401f9a:	3301      	adds	r3, #1
  401f9c:	75bb      	strb	r3, [r7, #22]
  401f9e:	7dbb      	ldrb	r3, [r7, #22]
  401fa0:	2b01      	cmp	r3, #1
  401fa2:	d802      	bhi.n	401faa <ext_irq_register+0x12a>
  401fa4:	7dfb      	ldrb	r3, [r7, #23]
  401fa6:	2b01      	cmp	r3, #1
  401fa8:	d9c2      	bls.n	401f30 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
  401faa:	7d7b      	ldrb	r3, [r7, #21]
  401fac:	f083 0301 	eor.w	r3, r3, #1
  401fb0:	b2db      	uxtb	r3, r3
  401fb2:	2b00      	cmp	r3, #0
  401fb4:	d002      	beq.n	401fbc <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
  401fb6:	f06f 030c 	mvn.w	r3, #12
  401fba:	e004      	b.n	401fc6 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
  401fbc:	2101      	movs	r1, #1
  401fbe:	6878      	ldr	r0, [r7, #4]
  401fc0:	4b04      	ldr	r3, [pc, #16]	; (401fd4 <ext_irq_register+0x154>)
  401fc2:	4798      	blx	r3
  401fc4:	4603      	mov	r3, r0
}
  401fc6:	4618      	mov	r0, r3
  401fc8:	3718      	adds	r7, #24
  401fca:	46bd      	mov	sp, r7
  401fcc:	bd80      	pop	{r7, pc}
  401fce:	bf00      	nop
  401fd0:	20401130 	.word	0x20401130
  401fd4:	00403add 	.word	0x00403add

00401fd8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401fd8:	b580      	push	{r7, lr}
  401fda:	b084      	sub	sp, #16
  401fdc:	af00      	add	r7, sp, #0
  401fde:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401fe0:	2300      	movs	r3, #0
  401fe2:	73fb      	strb	r3, [r7, #15]
  401fe4:	2302      	movs	r3, #2
  401fe6:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
  401fe8:	e02a      	b.n	402040 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
  401fea:	7bba      	ldrb	r2, [r7, #14]
  401fec:	7bfb      	ldrb	r3, [r7, #15]
  401fee:	4413      	add	r3, r2
  401ff0:	105b      	asrs	r3, r3, #1
  401ff2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
  401ff4:	7b7b      	ldrb	r3, [r7, #13]
  401ff6:	2b01      	cmp	r3, #1
  401ff8:	d827      	bhi.n	40204a <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  401ffa:	7b7b      	ldrb	r3, [r7, #13]
  401ffc:	4a16      	ldr	r2, [pc, #88]	; (402058 <process_ext_irq+0x80>)
  401ffe:	00db      	lsls	r3, r3, #3
  402000:	4413      	add	r3, r2
  402002:	685a      	ldr	r2, [r3, #4]
  402004:	687b      	ldr	r3, [r7, #4]
  402006:	429a      	cmp	r2, r3
  402008:	d10b      	bne.n	402022 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
  40200a:	7b7b      	ldrb	r3, [r7, #13]
  40200c:	4a12      	ldr	r2, [pc, #72]	; (402058 <process_ext_irq+0x80>)
  40200e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  402012:	2b00      	cmp	r3, #0
  402014:	d01b      	beq.n	40204e <process_ext_irq+0x76>
				ext_irqs[middle].cb();
  402016:	7b7b      	ldrb	r3, [r7, #13]
  402018:	4a0f      	ldr	r2, [pc, #60]	; (402058 <process_ext_irq+0x80>)
  40201a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40201e:	4798      	blx	r3
			}
			return;
  402020:	e015      	b.n	40204e <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
  402022:	7b7b      	ldrb	r3, [r7, #13]
  402024:	4a0c      	ldr	r2, [pc, #48]	; (402058 <process_ext_irq+0x80>)
  402026:	00db      	lsls	r3, r3, #3
  402028:	4413      	add	r3, r2
  40202a:	685a      	ldr	r2, [r3, #4]
  40202c:	687b      	ldr	r3, [r7, #4]
  40202e:	429a      	cmp	r2, r3
  402030:	d203      	bcs.n	40203a <process_ext_irq+0x62>
			lower = middle + 1;
  402032:	7b7b      	ldrb	r3, [r7, #13]
  402034:	3301      	adds	r3, #1
  402036:	73fb      	strb	r3, [r7, #15]
  402038:	e002      	b.n	402040 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
  40203a:	7b7b      	ldrb	r3, [r7, #13]
  40203c:	3b01      	subs	r3, #1
  40203e:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
  402040:	7bba      	ldrb	r2, [r7, #14]
  402042:	7bfb      	ldrb	r3, [r7, #15]
  402044:	429a      	cmp	r2, r3
  402046:	d2d0      	bcs.n	401fea <process_ext_irq+0x12>
  402048:	e002      	b.n	402050 <process_ext_irq+0x78>
			return;
  40204a:	bf00      	nop
  40204c:	e000      	b.n	402050 <process_ext_irq+0x78>
			return;
  40204e:	bf00      	nop
		}
	}
}
  402050:	3710      	adds	r7, #16
  402052:	46bd      	mov	sp, r7
  402054:	bd80      	pop	{r7, pc}
  402056:	bf00      	nop
  402058:	20401130 	.word	0x20401130

0040205c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
  40205c:	b580      	push	{r7, lr}
  40205e:	b08a      	sub	sp, #40	; 0x28
  402060:	af00      	add	r7, sp, #0
  402062:	60f8      	str	r0, [r7, #12]
  402064:	60b9      	str	r1, [r7, #8]
  402066:	4613      	mov	r3, r2
  402068:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  40206a:	68fb      	ldr	r3, [r7, #12]
  40206c:	3b14      	subs	r3, #20
  40206e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  402070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402072:	8b9b      	ldrh	r3, [r3, #28]
  402074:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  402076:	88fb      	ldrh	r3, [r7, #6]
  402078:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  40207a:	f248 0301 	movw	r3, #32769	; 0x8001
  40207e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
  402080:	68bb      	ldr	r3, [r7, #8]
  402082:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  402084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402086:	f107 0214 	add.w	r2, r7, #20
  40208a:	4611      	mov	r1, r2
  40208c:	4618      	mov	r0, r3
  40208e:	4b06      	ldr	r3, [pc, #24]	; (4020a8 <i2c_m_sync_read+0x4c>)
  402090:	4798      	blx	r3
  402092:	6238      	str	r0, [r7, #32]

	if (ret) {
  402094:	6a3b      	ldr	r3, [r7, #32]
  402096:	2b00      	cmp	r3, #0
  402098:	d001      	beq.n	40209e <i2c_m_sync_read+0x42>
		return ret;
  40209a:	6a3b      	ldr	r3, [r7, #32]
  40209c:	e000      	b.n	4020a0 <i2c_m_sync_read+0x44>
	}

	return n;
  40209e:	88fb      	ldrh	r3, [r7, #6]
}
  4020a0:	4618      	mov	r0, r3
  4020a2:	3728      	adds	r7, #40	; 0x28
  4020a4:	46bd      	mov	sp, r7
  4020a6:	bd80      	pop	{r7, pc}
  4020a8:	00404a0d 	.word	0x00404a0d

004020ac <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  4020ac:	b580      	push	{r7, lr}
  4020ae:	b08a      	sub	sp, #40	; 0x28
  4020b0:	af00      	add	r7, sp, #0
  4020b2:	60f8      	str	r0, [r7, #12]
  4020b4:	60b9      	str	r1, [r7, #8]
  4020b6:	4613      	mov	r3, r2
  4020b8:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  4020ba:	68fb      	ldr	r3, [r7, #12]
  4020bc:	3b14      	subs	r3, #20
  4020be:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  4020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020c2:	8b9b      	ldrh	r3, [r3, #28]
  4020c4:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  4020c6:	88fb      	ldrh	r3, [r7, #6]
  4020c8:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
  4020ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020ce:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
  4020d0:	68bb      	ldr	r3, [r7, #8]
  4020d2:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020d6:	f107 0214 	add.w	r2, r7, #20
  4020da:	4611      	mov	r1, r2
  4020dc:	4618      	mov	r0, r3
  4020de:	4b06      	ldr	r3, [pc, #24]	; (4020f8 <i2c_m_sync_write+0x4c>)
  4020e0:	4798      	blx	r3
  4020e2:	6238      	str	r0, [r7, #32]

	if (ret) {
  4020e4:	6a3b      	ldr	r3, [r7, #32]
  4020e6:	2b00      	cmp	r3, #0
  4020e8:	d001      	beq.n	4020ee <i2c_m_sync_write+0x42>
		return ret;
  4020ea:	6a3b      	ldr	r3, [r7, #32]
  4020ec:	e000      	b.n	4020f0 <i2c_m_sync_write+0x44>
	}

	return n;
  4020ee:	88fb      	ldrh	r3, [r7, #6]
}
  4020f0:	4618      	mov	r0, r3
  4020f2:	3728      	adds	r7, #40	; 0x28
  4020f4:	46bd      	mov	sp, r7
  4020f6:	bd80      	pop	{r7, pc}
  4020f8:	00404a0d 	.word	0x00404a0d

004020fc <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4020fc:	b580      	push	{r7, lr}
  4020fe:	b084      	sub	sp, #16
  402100:	af00      	add	r7, sp, #0
  402102:	6078      	str	r0, [r7, #4]
  402104:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
  402106:	687b      	ldr	r3, [r7, #4]
  402108:	2b00      	cmp	r3, #0
  40210a:	bf14      	ite	ne
  40210c:	2301      	movne	r3, #1
  40210e:	2300      	moveq	r3, #0
  402110:	b2db      	uxtb	r3, r3
  402112:	225e      	movs	r2, #94	; 0x5e
  402114:	490c      	ldr	r1, [pc, #48]	; (402148 <i2c_m_sync_init+0x4c>)
  402116:	4618      	mov	r0, r3
  402118:	4b0c      	ldr	r3, [pc, #48]	; (40214c <i2c_m_sync_init+0x50>)
  40211a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  40211c:	687b      	ldr	r3, [r7, #4]
  40211e:	6839      	ldr	r1, [r7, #0]
  402120:	4618      	mov	r0, r3
  402122:	4b0b      	ldr	r3, [pc, #44]	; (402150 <i2c_m_sync_init+0x54>)
  402124:	4798      	blx	r3
  402126:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  402128:	68fb      	ldr	r3, [r7, #12]
  40212a:	2b00      	cmp	r3, #0
  40212c:	d001      	beq.n	402132 <i2c_m_sync_init+0x36>
		return init_status;
  40212e:	68fb      	ldr	r3, [r7, #12]
  402130:	e006      	b.n	402140 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  402132:	687b      	ldr	r3, [r7, #4]
  402134:	4a07      	ldr	r2, [pc, #28]	; (402154 <i2c_m_sync_init+0x58>)
  402136:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
  402138:	687b      	ldr	r3, [r7, #4]
  40213a:	4a07      	ldr	r2, [pc, #28]	; (402158 <i2c_m_sync_init+0x5c>)
  40213c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  40213e:	2300      	movs	r3, #0
}
  402140:	4618      	mov	r0, r3
  402142:	3710      	adds	r7, #16
  402144:	46bd      	mov	sp, r7
  402146:	bd80      	pop	{r7, pc}
  402148:	00407538 	.word	0x00407538
  40214c:	00402d25 	.word	0x00402d25
  402150:	00404969 	.word	0x00404969
  402154:	0040205d 	.word	0x0040205d
  402158:	004020ad 	.word	0x004020ad

0040215c <spi_m_dma_init>:

static int32_t _spi_m_dma_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_dma_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_dma_init(struct spi_m_dma_descriptor *spi, void *const hw)
{
  40215c:	b580      	push	{r7, lr}
  40215e:	b084      	sub	sp, #16
  402160:	af00      	add	r7, sp, #0
  402162:	6078      	str	r0, [r7, #4]
  402164:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
  402166:	2300      	movs	r3, #0
  402168:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
  40216a:	687b      	ldr	r3, [r7, #4]
  40216c:	2b00      	cmp	r3, #0
  40216e:	d004      	beq.n	40217a <spi_m_dma_init+0x1e>
  402170:	683b      	ldr	r3, [r7, #0]
  402172:	2b00      	cmp	r3, #0
  402174:	d001      	beq.n	40217a <spi_m_dma_init+0x1e>
  402176:	2301      	movs	r3, #1
  402178:	e000      	b.n	40217c <spi_m_dma_init+0x20>
  40217a:	2300      	movs	r3, #0
  40217c:	f003 0301 	and.w	r3, r3, #1
  402180:	b2db      	uxtb	r3, r3
  402182:	2233      	movs	r2, #51	; 0x33
  402184:	490e      	ldr	r1, [pc, #56]	; (4021c0 <spi_m_dma_init+0x64>)
  402186:	4618      	mov	r0, r3
  402188:	4b0e      	ldr	r3, [pc, #56]	; (4021c4 <spi_m_dma_init+0x68>)
  40218a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  40218c:	687b      	ldr	r3, [r7, #4]
  40218e:	683a      	ldr	r2, [r7, #0]
  402190:	601a      	str	r2, [r3, #0]

	rc = _spi_m_dma_init(&spi->dev, hw);
  402192:	687b      	ldr	r3, [r7, #4]
  402194:	6839      	ldr	r1, [r7, #0]
  402196:	4618      	mov	r0, r3
  402198:	4b0b      	ldr	r3, [pc, #44]	; (4021c8 <spi_m_dma_init+0x6c>)
  40219a:	4798      	blx	r3
  40219c:	60f8      	str	r0, [r7, #12]
	if (rc) {
  40219e:	68fb      	ldr	r3, [r7, #12]
  4021a0:	2b00      	cmp	r3, #0
  4021a2:	d001      	beq.n	4021a8 <spi_m_dma_init+0x4c>
		return rc;
  4021a4:	68fb      	ldr	r3, [r7, #12]
  4021a6:	e006      	b.n	4021b6 <spi_m_dma_init+0x5a>
	}

	spi->io.read  = _spi_m_dma_io_read;
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	4a08      	ldr	r2, [pc, #32]	; (4021cc <spi_m_dma_init+0x70>)
  4021ac:	621a      	str	r2, [r3, #32]
	spi->io.write = _spi_m_dma_io_write;
  4021ae:	687b      	ldr	r3, [r7, #4]
  4021b0:	4a07      	ldr	r2, [pc, #28]	; (4021d0 <spi_m_dma_init+0x74>)
  4021b2:	61da      	str	r2, [r3, #28]

	return ERR_NONE;
  4021b4:	2300      	movs	r3, #0
}
  4021b6:	4618      	mov	r0, r3
  4021b8:	3710      	adds	r7, #16
  4021ba:	46bd      	mov	sp, r7
  4021bc:	bd80      	pop	{r7, pc}
  4021be:	bf00      	nop
  4021c0:	00407554 	.word	0x00407554
  4021c4:	00402d25 	.word	0x00402d25
  4021c8:	00404355 	.word	0x00404355
  4021cc:	004022d9 	.word	0x004022d9
  4021d0:	00402325 	.word	0x00402325

004021d4 <spi_m_dma_enable>:

	_spi_m_dma_deinit(&spi->dev);
}

void spi_m_dma_enable(struct spi_m_dma_descriptor *spi)
{
  4021d4:	b580      	push	{r7, lr}
  4021d6:	b082      	sub	sp, #8
  4021d8:	af00      	add	r7, sp, #0
  4021da:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
  4021dc:	687b      	ldr	r3, [r7, #4]
  4021de:	2b00      	cmp	r3, #0
  4021e0:	bf14      	ite	ne
  4021e2:	2301      	movne	r3, #1
  4021e4:	2300      	moveq	r3, #0
  4021e6:	b2db      	uxtb	r3, r3
  4021e8:	224a      	movs	r2, #74	; 0x4a
  4021ea:	4906      	ldr	r1, [pc, #24]	; (402204 <spi_m_dma_enable+0x30>)
  4021ec:	4618      	mov	r0, r3
  4021ee:	4b06      	ldr	r3, [pc, #24]	; (402208 <spi_m_dma_enable+0x34>)
  4021f0:	4798      	blx	r3

	_spi_m_dma_enable(&spi->dev);
  4021f2:	687b      	ldr	r3, [r7, #4]
  4021f4:	4618      	mov	r0, r3
  4021f6:	4b05      	ldr	r3, [pc, #20]	; (40220c <spi_m_dma_enable+0x38>)
  4021f8:	4798      	blx	r3
}
  4021fa:	bf00      	nop
  4021fc:	3708      	adds	r7, #8
  4021fe:	46bd      	mov	sp, r7
  402200:	bd80      	pop	{r7, pc}
  402202:	bf00      	nop
  402204:	00407554 	.word	0x00407554
  402208:	00402d25 	.word	0x00402d25
  40220c:	00404471 	.word	0x00404471

00402210 <spi_m_dma_set_baudrate>:

	_spi_m_dma_disable(&spi->dev);
}

int32_t spi_m_dma_set_baudrate(struct spi_m_dma_descriptor *spi, const uint32_t baud_val)
{
  402210:	b580      	push	{r7, lr}
  402212:	b082      	sub	sp, #8
  402214:	af00      	add	r7, sp, #0
  402216:	6078      	str	r0, [r7, #4]
  402218:	6039      	str	r1, [r7, #0]
	ASSERT(spi);
  40221a:	687b      	ldr	r3, [r7, #4]
  40221c:	2b00      	cmp	r3, #0
  40221e:	bf14      	ite	ne
  402220:	2301      	movne	r3, #1
  402222:	2300      	moveq	r3, #0
  402224:	b2db      	uxtb	r3, r3
  402226:	2258      	movs	r2, #88	; 0x58
  402228:	4906      	ldr	r1, [pc, #24]	; (402244 <spi_m_dma_set_baudrate+0x34>)
  40222a:	4618      	mov	r0, r3
  40222c:	4b06      	ldr	r3, [pc, #24]	; (402248 <spi_m_dma_set_baudrate+0x38>)
  40222e:	4798      	blx	r3

	return _spi_m_dma_set_baudrate(&spi->dev, baud_val);
  402230:	687b      	ldr	r3, [r7, #4]
  402232:	6839      	ldr	r1, [r7, #0]
  402234:	4618      	mov	r0, r3
  402236:	4b05      	ldr	r3, [pc, #20]	; (40224c <spi_m_dma_set_baudrate+0x3c>)
  402238:	4798      	blx	r3
  40223a:	4603      	mov	r3, r0
}
  40223c:	4618      	mov	r0, r3
  40223e:	3708      	adds	r7, #8
  402240:	46bd      	mov	sp, r7
  402242:	bd80      	pop	{r7, pc}
  402244:	00407554 	.word	0x00407554
  402248:	00402d25 	.word	0x00402d25
  40224c:	00404519 	.word	0x00404519

00402250 <spi_m_dma_set_mode>:

int32_t spi_m_dma_set_mode(struct spi_m_dma_descriptor *spi, const enum spi_transfer_mode mode)
{
  402250:	b580      	push	{r7, lr}
  402252:	b082      	sub	sp, #8
  402254:	af00      	add	r7, sp, #0
  402256:	6078      	str	r0, [r7, #4]
  402258:	460b      	mov	r3, r1
  40225a:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	2b00      	cmp	r3, #0
  402260:	bf14      	ite	ne
  402262:	2301      	movne	r3, #1
  402264:	2300      	moveq	r3, #0
  402266:	b2db      	uxtb	r3, r3
  402268:	225f      	movs	r2, #95	; 0x5f
  40226a:	4907      	ldr	r1, [pc, #28]	; (402288 <spi_m_dma_set_mode+0x38>)
  40226c:	4618      	mov	r0, r3
  40226e:	4b07      	ldr	r3, [pc, #28]	; (40228c <spi_m_dma_set_mode+0x3c>)
  402270:	4798      	blx	r3

	return _spi_m_dma_set_mode(&spi->dev, mode);
  402272:	687b      	ldr	r3, [r7, #4]
  402274:	78fa      	ldrb	r2, [r7, #3]
  402276:	4611      	mov	r1, r2
  402278:	4618      	mov	r0, r3
  40227a:	4b05      	ldr	r3, [pc, #20]	; (402290 <spi_m_dma_set_mode+0x40>)
  40227c:	4798      	blx	r3
  40227e:	4603      	mov	r3, r0
}
  402280:	4618      	mov	r0, r3
  402282:	3708      	adds	r7, #8
  402284:	46bd      	mov	sp, r7
  402286:	bd80      	pop	{r7, pc}
  402288:	00407554 	.word	0x00407554
  40228c:	00402d25 	.word	0x00402d25
  402290:	004044c1 	.word	0x004044c1

00402294 <spi_m_dma_set_char_size>:

int32_t spi_m_dma_set_char_size(struct spi_m_dma_descriptor *spi, const enum spi_char_size char_size)
{
  402294:	b580      	push	{r7, lr}
  402296:	b082      	sub	sp, #8
  402298:	af00      	add	r7, sp, #0
  40229a:	6078      	str	r0, [r7, #4]
  40229c:	460b      	mov	r3, r1
  40229e:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  4022a0:	687b      	ldr	r3, [r7, #4]
  4022a2:	2b00      	cmp	r3, #0
  4022a4:	bf14      	ite	ne
  4022a6:	2301      	movne	r3, #1
  4022a8:	2300      	moveq	r3, #0
  4022aa:	b2db      	uxtb	r3, r3
  4022ac:	2266      	movs	r2, #102	; 0x66
  4022ae:	4907      	ldr	r1, [pc, #28]	; (4022cc <spi_m_dma_set_char_size+0x38>)
  4022b0:	4618      	mov	r0, r3
  4022b2:	4b07      	ldr	r3, [pc, #28]	; (4022d0 <spi_m_dma_set_char_size+0x3c>)
  4022b4:	4798      	blx	r3

	return _spi_m_dma_set_char_size(&spi->dev, char_size);
  4022b6:	687b      	ldr	r3, [r7, #4]
  4022b8:	78fa      	ldrb	r2, [r7, #3]
  4022ba:	4611      	mov	r1, r2
  4022bc:	4618      	mov	r0, r3
  4022be:	4b05      	ldr	r3, [pc, #20]	; (4022d4 <spi_m_dma_set_char_size+0x40>)
  4022c0:	4798      	blx	r3
  4022c2:	4603      	mov	r3, r0
}
  4022c4:	4618      	mov	r0, r3
  4022c6:	3708      	adds	r7, #8
  4022c8:	46bd      	mov	sp, r7
  4022ca:	bd80      	pop	{r7, pc}
  4022cc:	00407554 	.word	0x00407554
  4022d0:	00402d25 	.word	0x00402d25
  4022d4:	0040456d 	.word	0x0040456d

004022d8 <_spi_m_dma_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
  4022d8:	b590      	push	{r4, r7, lr}
  4022da:	b087      	sub	sp, #28
  4022dc:	af00      	add	r7, sp, #0
  4022de:	60f8      	str	r0, [r7, #12]
  4022e0:	60b9      	str	r1, [r7, #8]
  4022e2:	4613      	mov	r3, r2
  4022e4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  4022e6:	68fb      	ldr	r3, [r7, #12]
  4022e8:	2b00      	cmp	r3, #0
  4022ea:	bf14      	ite	ne
  4022ec:	2301      	movne	r3, #1
  4022ee:	2300      	moveq	r3, #0
  4022f0:	b2db      	uxtb	r3, r3
  4022f2:	2280      	movs	r2, #128	; 0x80
  4022f4:	4908      	ldr	r1, [pc, #32]	; (402318 <_spi_m_dma_io_read+0x40>)
  4022f6:	4618      	mov	r0, r3
  4022f8:	4b08      	ldr	r3, [pc, #32]	; (40231c <_spi_m_dma_io_read+0x44>)
  4022fa:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  4022fc:	68fb      	ldr	r3, [r7, #12]
  4022fe:	3b1c      	subs	r3, #28
  402300:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
  402302:	6978      	ldr	r0, [r7, #20]
  402304:	88fb      	ldrh	r3, [r7, #6]
  402306:	68ba      	ldr	r2, [r7, #8]
  402308:	2100      	movs	r1, #0
  40230a:	4c05      	ldr	r4, [pc, #20]	; (402320 <_spi_m_dma_io_read+0x48>)
  40230c:	47a0      	blx	r4
  40230e:	4603      	mov	r3, r0
}
  402310:	4618      	mov	r0, r3
  402312:	371c      	adds	r7, #28
  402314:	46bd      	mov	sp, r7
  402316:	bd90      	pop	{r4, r7, pc}
  402318:	00407554 	.word	0x00407554
  40231c:	00402d25 	.word	0x00402d25
  402320:	004046b1 	.word	0x004046b1

00402324 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  402324:	b590      	push	{r4, r7, lr}
  402326:	b087      	sub	sp, #28
  402328:	af00      	add	r7, sp, #0
  40232a:	60f8      	str	r0, [r7, #12]
  40232c:	60b9      	str	r1, [r7, #8]
  40232e:	4613      	mov	r3, r2
  402330:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  402332:	68fb      	ldr	r3, [r7, #12]
  402334:	2b00      	cmp	r3, #0
  402336:	bf14      	ite	ne
  402338:	2301      	movne	r3, #1
  40233a:	2300      	moveq	r3, #0
  40233c:	b2db      	uxtb	r3, r3
  40233e:	2298      	movs	r2, #152	; 0x98
  402340:	4908      	ldr	r1, [pc, #32]	; (402364 <_spi_m_dma_io_write+0x40>)
  402342:	4618      	mov	r0, r3
  402344:	4b08      	ldr	r3, [pc, #32]	; (402368 <_spi_m_dma_io_write+0x44>)
  402346:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  402348:	68fb      	ldr	r3, [r7, #12]
  40234a:	3b1c      	subs	r3, #28
  40234c:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
  40234e:	6978      	ldr	r0, [r7, #20]
  402350:	88fb      	ldrh	r3, [r7, #6]
  402352:	2200      	movs	r2, #0
  402354:	68b9      	ldr	r1, [r7, #8]
  402356:	4c05      	ldr	r4, [pc, #20]	; (40236c <_spi_m_dma_io_write+0x48>)
  402358:	47a0      	blx	r4
  40235a:	4603      	mov	r3, r0
}
  40235c:	4618      	mov	r0, r3
  40235e:	371c      	adds	r7, #28
  402360:	46bd      	mov	sp, r7
  402362:	bd90      	pop	{r4, r7, pc}
  402364:	00407554 	.word	0x00407554
  402368:	00402d25 	.word	0x00402d25
  40236c:	004046b1 	.word	0x004046b1

00402370 <spi_m_dma_transfer>:

int32_t spi_m_dma_transfer(struct spi_m_dma_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                           const uint16_t length)
{
  402370:	b590      	push	{r4, r7, lr}
  402372:	b085      	sub	sp, #20
  402374:	af00      	add	r7, sp, #0
  402376:	60f8      	str	r0, [r7, #12]
  402378:	60b9      	str	r1, [r7, #8]
  40237a:	607a      	str	r2, [r7, #4]
  40237c:	807b      	strh	r3, [r7, #2]
	ASSERT(spi);
  40237e:	68fb      	ldr	r3, [r7, #12]
  402380:	2b00      	cmp	r3, #0
  402382:	bf14      	ite	ne
  402384:	2301      	movne	r3, #1
  402386:	2300      	moveq	r3, #0
  402388:	b2db      	uxtb	r3, r3
  40238a:	22a2      	movs	r2, #162	; 0xa2
  40238c:	4907      	ldr	r1, [pc, #28]	; (4023ac <spi_m_dma_transfer+0x3c>)
  40238e:	4618      	mov	r0, r3
  402390:	4b07      	ldr	r3, [pc, #28]	; (4023b0 <spi_m_dma_transfer+0x40>)
  402392:	4798      	blx	r3

	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
  402394:	68f8      	ldr	r0, [r7, #12]
  402396:	887b      	ldrh	r3, [r7, #2]
  402398:	687a      	ldr	r2, [r7, #4]
  40239a:	68b9      	ldr	r1, [r7, #8]
  40239c:	4c05      	ldr	r4, [pc, #20]	; (4023b4 <spi_m_dma_transfer+0x44>)
  40239e:	47a0      	blx	r4
  4023a0:	4603      	mov	r3, r0
}
  4023a2:	4618      	mov	r0, r3
  4023a4:	3714      	adds	r7, #20
  4023a6:	46bd      	mov	sp, r7
  4023a8:	bd90      	pop	{r4, r7, pc}
  4023aa:	bf00      	nop
  4023ac:	00407554 	.word	0x00407554
  4023b0:	00402d25 	.word	0x00402d25
  4023b4:	004046b1 	.word	0x004046b1

004023b8 <spi_m_dma_register_callback>:

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
  4023b8:	b580      	push	{r7, lr}
  4023ba:	b084      	sub	sp, #16
  4023bc:	af00      	add	r7, sp, #0
  4023be:	60f8      	str	r0, [r7, #12]
  4023c0:	460b      	mov	r3, r1
  4023c2:	607a      	str	r2, [r7, #4]
  4023c4:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi);
  4023c6:	68fb      	ldr	r3, [r7, #12]
  4023c8:	2b00      	cmp	r3, #0
  4023ca:	bf14      	ite	ne
  4023cc:	2301      	movne	r3, #1
  4023ce:	2300      	moveq	r3, #0
  4023d0:	b2db      	uxtb	r3, r3
  4023d2:	22aa      	movs	r2, #170	; 0xaa
  4023d4:	4906      	ldr	r1, [pc, #24]	; (4023f0 <spi_m_dma_register_callback+0x38>)
  4023d6:	4618      	mov	r0, r3
  4023d8:	4b06      	ldr	r3, [pc, #24]	; (4023f4 <spi_m_dma_register_callback+0x3c>)
  4023da:	4798      	blx	r3

	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
  4023dc:	68fb      	ldr	r3, [r7, #12]
  4023de:	7af9      	ldrb	r1, [r7, #11]
  4023e0:	687a      	ldr	r2, [r7, #4]
  4023e2:	4618      	mov	r0, r3
  4023e4:	4b04      	ldr	r3, [pc, #16]	; (4023f8 <spi_m_dma_register_callback+0x40>)
  4023e6:	4798      	blx	r3
}
  4023e8:	bf00      	nop
  4023ea:	3710      	adds	r7, #16
  4023ec:	46bd      	mov	sp, r7
  4023ee:	bd80      	pop	{r7, pc}
  4023f0:	00407554 	.word	0x00407554
  4023f4:	00402d25 	.word	0x00402d25
  4023f8:	004045cd 	.word	0x004045cd

004023fc <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
  4023fc:	b580      	push	{r7, lr}
  4023fe:	b086      	sub	sp, #24
  402400:	af00      	add	r7, sp, #0
  402402:	60f8      	str	r0, [r7, #12]
  402404:	60b9      	str	r1, [r7, #8]
  402406:	607a      	str	r2, [r7, #4]
  402408:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  40240a:	68fb      	ldr	r3, [r7, #12]
  40240c:	2b00      	cmp	r3, #0
  40240e:	d00a      	beq.n	402426 <usart_async_init+0x2a>
  402410:	68bb      	ldr	r3, [r7, #8]
  402412:	2b00      	cmp	r3, #0
  402414:	d007      	beq.n	402426 <usart_async_init+0x2a>
  402416:	687b      	ldr	r3, [r7, #4]
  402418:	2b00      	cmp	r3, #0
  40241a:	d004      	beq.n	402426 <usart_async_init+0x2a>
  40241c:	887b      	ldrh	r3, [r7, #2]
  40241e:	2b00      	cmp	r3, #0
  402420:	d001      	beq.n	402426 <usart_async_init+0x2a>
  402422:	2301      	movs	r3, #1
  402424:	e000      	b.n	402428 <usart_async_init+0x2c>
  402426:	2300      	movs	r3, #0
  402428:	f003 0301 	and.w	r3, r3, #1
  40242c:	b2db      	uxtb	r3, r3
  40242e:	223a      	movs	r2, #58	; 0x3a
  402430:	4919      	ldr	r1, [pc, #100]	; (402498 <usart_async_init+0x9c>)
  402432:	4618      	mov	r0, r3
  402434:	4b19      	ldr	r3, [pc, #100]	; (40249c <usart_async_init+0xa0>)
  402436:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  402438:	68fb      	ldr	r3, [r7, #12]
  40243a:	3334      	adds	r3, #52	; 0x34
  40243c:	887a      	ldrh	r2, [r7, #2]
  40243e:	6879      	ldr	r1, [r7, #4]
  402440:	4618      	mov	r0, r3
  402442:	4b17      	ldr	r3, [pc, #92]	; (4024a0 <usart_async_init+0xa4>)
  402444:	4798      	blx	r3
  402446:	4603      	mov	r3, r0
  402448:	2b00      	cmp	r3, #0
  40244a:	d002      	beq.n	402452 <usart_async_init+0x56>
		return ERR_INVALID_ARG;
  40244c:	f06f 030c 	mvn.w	r3, #12
  402450:	e01e      	b.n	402490 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
  402452:	68fb      	ldr	r3, [r7, #12]
  402454:	3308      	adds	r3, #8
  402456:	68b9      	ldr	r1, [r7, #8]
  402458:	4618      	mov	r0, r3
  40245a:	4b12      	ldr	r3, [pc, #72]	; (4024a4 <usart_async_init+0xa8>)
  40245c:	4798      	blx	r3
  40245e:	6178      	str	r0, [r7, #20]
	if (init_status) {
  402460:	697b      	ldr	r3, [r7, #20]
  402462:	2b00      	cmp	r3, #0
  402464:	d001      	beq.n	40246a <usart_async_init+0x6e>
		return init_status;
  402466:	697b      	ldr	r3, [r7, #20]
  402468:	e012      	b.n	402490 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
  40246a:	68fb      	ldr	r3, [r7, #12]
  40246c:	4a0e      	ldr	r2, [pc, #56]	; (4024a8 <usart_async_init+0xac>)
  40246e:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
  402470:	68fb      	ldr	r3, [r7, #12]
  402472:	4a0e      	ldr	r2, [pc, #56]	; (4024ac <usart_async_init+0xb0>)
  402474:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  402476:	68fb      	ldr	r3, [r7, #12]
  402478:	4a0d      	ldr	r2, [pc, #52]	; (4024b0 <usart_async_init+0xb4>)
  40247a:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  40247c:	68fb      	ldr	r3, [r7, #12]
  40247e:	4a0d      	ldr	r2, [pc, #52]	; (4024b4 <usart_async_init+0xb8>)
  402480:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  402482:	68fb      	ldr	r3, [r7, #12]
  402484:	4a0c      	ldr	r2, [pc, #48]	; (4024b8 <usart_async_init+0xbc>)
  402486:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  402488:	68fb      	ldr	r3, [r7, #12]
  40248a:	4a0c      	ldr	r2, [pc, #48]	; (4024bc <usart_async_init+0xc0>)
  40248c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  40248e:	2300      	movs	r3, #0
}
  402490:	4618      	mov	r0, r3
  402492:	3718      	adds	r7, #24
  402494:	46bd      	mov	sp, r7
  402496:	bd80      	pop	{r7, pc}
  402498:	00407570 	.word	0x00407570
  40249c:	00402d25 	.word	0x00402d25
  4024a0:	00402d4d 	.word	0x00402d4d
  4024a4:	004050e1 	.word	0x004050e1
  4024a8:	00402551 	.word	0x00402551
  4024ac:	004024c1 	.word	0x004024c1
  4024b0:	00402601 	.word	0x00402601
  4024b4:	00402699 	.word	0x00402699
  4024b8:	0040266d 	.word	0x0040266d
  4024bc:	004026d5 	.word	0x004026d5

004024c0 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4024c0:	b580      	push	{r7, lr}
  4024c2:	b086      	sub	sp, #24
  4024c4:	af00      	add	r7, sp, #0
  4024c6:	60f8      	str	r0, [r7, #12]
  4024c8:	60b9      	str	r1, [r7, #8]
  4024ca:	4613      	mov	r3, r2
  4024cc:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  4024ce:	68fb      	ldr	r3, [r7, #12]
  4024d0:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
  4024d2:	697b      	ldr	r3, [r7, #20]
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d007      	beq.n	4024e8 <usart_async_write+0x28>
  4024d8:	68bb      	ldr	r3, [r7, #8]
  4024da:	2b00      	cmp	r3, #0
  4024dc:	d004      	beq.n	4024e8 <usart_async_write+0x28>
  4024de:	88fb      	ldrh	r3, [r7, #6]
  4024e0:	2b00      	cmp	r3, #0
  4024e2:	d001      	beq.n	4024e8 <usart_async_write+0x28>
  4024e4:	2301      	movs	r3, #1
  4024e6:	e000      	b.n	4024ea <usart_async_write+0x2a>
  4024e8:	2300      	movs	r3, #0
  4024ea:	f003 0301 	and.w	r3, r3, #1
  4024ee:	b2db      	uxtb	r3, r3
  4024f0:	f240 123b 	movw	r2, #315	; 0x13b
  4024f4:	4913      	ldr	r1, [pc, #76]	; (402544 <usart_async_write+0x84>)
  4024f6:	4618      	mov	r0, r3
  4024f8:	4b13      	ldr	r3, [pc, #76]	; (402548 <usart_async_write+0x88>)
  4024fa:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
  4024fc:	697b      	ldr	r3, [r7, #20]
  4024fe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  402502:	697b      	ldr	r3, [r7, #20]
  402504:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  402508:	429a      	cmp	r2, r3
  40250a:	d002      	beq.n	402512 <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
  40250c:	f06f 031b 	mvn.w	r3, #27
  402510:	e013      	b.n	40253a <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
  402512:	697b      	ldr	r3, [r7, #20]
  402514:	68ba      	ldr	r2, [r7, #8]
  402516:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
  402518:	697b      	ldr	r3, [r7, #20]
  40251a:	88fa      	ldrh	r2, [r7, #6]
  40251c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
  402520:	697b      	ldr	r3, [r7, #20]
  402522:	2200      	movs	r2, #0
  402524:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  402528:	697b      	ldr	r3, [r7, #20]
  40252a:	2201      	movs	r2, #1
  40252c:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  40252e:	697b      	ldr	r3, [r7, #20]
  402530:	3308      	adds	r3, #8
  402532:	4618      	mov	r0, r3
  402534:	4b05      	ldr	r3, [pc, #20]	; (40254c <usart_async_write+0x8c>)
  402536:	4798      	blx	r3

	return (int32_t)length;
  402538:	88fb      	ldrh	r3, [r7, #6]
}
  40253a:	4618      	mov	r0, r3
  40253c:	3718      	adds	r7, #24
  40253e:	46bd      	mov	sp, r7
  402540:	bd80      	pop	{r7, pc}
  402542:	bf00      	nop
  402544:	00407570 	.word	0x00407570
  402548:	00402d25 	.word	0x00402d25
  40254c:	00405311 	.word	0x00405311

00402550 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  402550:	b580      	push	{r7, lr}
  402552:	b088      	sub	sp, #32
  402554:	af00      	add	r7, sp, #0
  402556:	60f8      	str	r0, [r7, #12]
  402558:	60b9      	str	r1, [r7, #8]
  40255a:	4613      	mov	r3, r2
  40255c:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
  40255e:	2300      	movs	r3, #0
  402560:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  402562:	68fb      	ldr	r3, [r7, #12]
  402564:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
  402566:	69bb      	ldr	r3, [r7, #24]
  402568:	2b00      	cmp	r3, #0
  40256a:	d007      	beq.n	40257c <usart_async_read+0x2c>
  40256c:	68bb      	ldr	r3, [r7, #8]
  40256e:	2b00      	cmp	r3, #0
  402570:	d004      	beq.n	40257c <usart_async_read+0x2c>
  402572:	88fb      	ldrh	r3, [r7, #6]
  402574:	2b00      	cmp	r3, #0
  402576:	d001      	beq.n	40257c <usart_async_read+0x2c>
  402578:	2301      	movs	r3, #1
  40257a:	e000      	b.n	40257e <usart_async_read+0x2e>
  40257c:	2300      	movs	r3, #0
  40257e:	f003 0301 	and.w	r3, r3, #1
  402582:	b2db      	uxtb	r3, r3
  402584:	f44f 72ac 	mov.w	r2, #344	; 0x158
  402588:	4917      	ldr	r1, [pc, #92]	; (4025e8 <usart_async_read+0x98>)
  40258a:	4618      	mov	r0, r3
  40258c:	4b17      	ldr	r3, [pc, #92]	; (4025ec <usart_async_read+0x9c>)
  40258e:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
  402590:	f107 0310 	add.w	r3, r7, #16
  402594:	4618      	mov	r0, r3
  402596:	4b16      	ldr	r3, [pc, #88]	; (4025f0 <usart_async_read+0xa0>)
  402598:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  40259a:	69bb      	ldr	r3, [r7, #24]
  40259c:	3334      	adds	r3, #52	; 0x34
  40259e:	4618      	mov	r0, r3
  4025a0:	4b14      	ldr	r3, [pc, #80]	; (4025f4 <usart_async_read+0xa4>)
  4025a2:	4798      	blx	r3
  4025a4:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
  4025a6:	f107 0310 	add.w	r3, r7, #16
  4025aa:	4618      	mov	r0, r3
  4025ac:	4b12      	ldr	r3, [pc, #72]	; (4025f8 <usart_async_read+0xa8>)
  4025ae:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
  4025b0:	e00c      	b.n	4025cc <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  4025b2:	69bb      	ldr	r3, [r7, #24]
  4025b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
  4025b8:	8bfb      	ldrh	r3, [r7, #30]
  4025ba:	1c59      	adds	r1, r3, #1
  4025bc:	83f9      	strh	r1, [r7, #30]
  4025be:	4619      	mov	r1, r3
  4025c0:	68bb      	ldr	r3, [r7, #8]
  4025c2:	440b      	add	r3, r1
  4025c4:	4619      	mov	r1, r3
  4025c6:	4610      	mov	r0, r2
  4025c8:	4b0c      	ldr	r3, [pc, #48]	; (4025fc <usart_async_read+0xac>)
  4025ca:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  4025cc:	8bfa      	ldrh	r2, [r7, #30]
  4025ce:	697b      	ldr	r3, [r7, #20]
  4025d0:	429a      	cmp	r2, r3
  4025d2:	d203      	bcs.n	4025dc <usart_async_read+0x8c>
  4025d4:	8bfa      	ldrh	r2, [r7, #30]
  4025d6:	88fb      	ldrh	r3, [r7, #6]
  4025d8:	429a      	cmp	r2, r3
  4025da:	d3ea      	bcc.n	4025b2 <usart_async_read+0x62>
	}

	return (int32_t)was_read;
  4025dc:	8bfb      	ldrh	r3, [r7, #30]
}
  4025de:	4618      	mov	r0, r3
  4025e0:	3720      	adds	r7, #32
  4025e2:	46bd      	mov	sp, r7
  4025e4:	bd80      	pop	{r7, pc}
  4025e6:	bf00      	nop
  4025e8:	00407570 	.word	0x00407570
  4025ec:	00402d25 	.word	0x00402d25
  4025f0:	00401cfd 	.word	0x00401cfd
  4025f4:	00402ea5 	.word	0x00402ea5
  4025f8:	00401d23 	.word	0x00401d23
  4025fc:	00402dc1 	.word	0x00402dc1

00402600 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
  402600:	b590      	push	{r4, r7, lr}
  402602:	b085      	sub	sp, #20
  402604:	af00      	add	r7, sp, #0
  402606:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  402608:	687b      	ldr	r3, [r7, #4]
  40260a:	3b08      	subs	r3, #8
  40260c:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
  40260e:	68fb      	ldr	r3, [r7, #12]
  402610:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  402614:	68fb      	ldr	r3, [r7, #12]
  402616:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40261a:	429a      	cmp	r2, r3
  40261c:	d017      	beq.n	40264e <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  40261e:	68fb      	ldr	r3, [r7, #12]
  402620:	f103 0008 	add.w	r0, r3, #8
  402624:	68fb      	ldr	r3, [r7, #12]
  402626:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  402628:	68fb      	ldr	r3, [r7, #12]
  40262a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  40262e:	1c59      	adds	r1, r3, #1
  402630:	b28c      	uxth	r4, r1
  402632:	68f9      	ldr	r1, [r7, #12]
  402634:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
  402638:	4413      	add	r3, r2
  40263a:	781b      	ldrb	r3, [r3, #0]
  40263c:	4619      	mov	r1, r3
  40263e:	4b08      	ldr	r3, [pc, #32]	; (402660 <usart_process_byte_sent+0x60>)
  402640:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  402642:	68fb      	ldr	r3, [r7, #12]
  402644:	3308      	adds	r3, #8
  402646:	4618      	mov	r0, r3
  402648:	4b06      	ldr	r3, [pc, #24]	; (402664 <usart_process_byte_sent+0x64>)
  40264a:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
  40264c:	e004      	b.n	402658 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
  40264e:	68fb      	ldr	r3, [r7, #12]
  402650:	3308      	adds	r3, #8
  402652:	4618      	mov	r0, r3
  402654:	4b04      	ldr	r3, [pc, #16]	; (402668 <usart_process_byte_sent+0x68>)
  402656:	4798      	blx	r3
}
  402658:	bf00      	nop
  40265a:	3714      	adds	r7, #20
  40265c:	46bd      	mov	sp, r7
  40265e:	bd90      	pop	{r4, r7, pc}
  402660:	004051c5 	.word	0x004051c5
  402664:	00405311 	.word	0x00405311
  402668:	00405351 	.word	0x00405351

0040266c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  40266c:	b580      	push	{r7, lr}
  40266e:	b084      	sub	sp, #16
  402670:	af00      	add	r7, sp, #0
  402672:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  402674:	687b      	ldr	r3, [r7, #4]
  402676:	3b08      	subs	r3, #8
  402678:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  40267a:	68fb      	ldr	r3, [r7, #12]
  40267c:	2200      	movs	r2, #0
  40267e:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
  402680:	68fb      	ldr	r3, [r7, #12]
  402682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402684:	2b00      	cmp	r3, #0
  402686:	d003      	beq.n	402690 <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
  402688:	68fb      	ldr	r3, [r7, #12]
  40268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40268c:	68f8      	ldr	r0, [r7, #12]
  40268e:	4798      	blx	r3
	}
}
  402690:	bf00      	nop
  402692:	3710      	adds	r7, #16
  402694:	46bd      	mov	sp, r7
  402696:	bd80      	pop	{r7, pc}

00402698 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
  402698:	b580      	push	{r7, lr}
  40269a:	b084      	sub	sp, #16
  40269c:	af00      	add	r7, sp, #0
  40269e:	6078      	str	r0, [r7, #4]
  4026a0:	460b      	mov	r3, r1
  4026a2:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4026a4:	687b      	ldr	r3, [r7, #4]
  4026a6:	3b08      	subs	r3, #8
  4026a8:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
  4026aa:	68fb      	ldr	r3, [r7, #12]
  4026ac:	3334      	adds	r3, #52	; 0x34
  4026ae:	78fa      	ldrb	r2, [r7, #3]
  4026b0:	4611      	mov	r1, r2
  4026b2:	4618      	mov	r0, r3
  4026b4:	4b06      	ldr	r3, [pc, #24]	; (4026d0 <usart_fill_rx_buffer+0x38>)
  4026b6:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
  4026b8:	68fb      	ldr	r3, [r7, #12]
  4026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4026bc:	2b00      	cmp	r3, #0
  4026be:	d003      	beq.n	4026c8 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
  4026c0:	68fb      	ldr	r3, [r7, #12]
  4026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4026c4:	68f8      	ldr	r0, [r7, #12]
  4026c6:	4798      	blx	r3
	}
}
  4026c8:	bf00      	nop
  4026ca:	3710      	adds	r7, #16
  4026cc:	46bd      	mov	sp, r7
  4026ce:	bd80      	pop	{r7, pc}
  4026d0:	00402e31 	.word	0x00402e31

004026d4 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  4026d4:	b580      	push	{r7, lr}
  4026d6:	b084      	sub	sp, #16
  4026d8:	af00      	add	r7, sp, #0
  4026da:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4026dc:	687b      	ldr	r3, [r7, #4]
  4026de:	3b08      	subs	r3, #8
  4026e0:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  4026e2:	68fb      	ldr	r3, [r7, #12]
  4026e4:	2200      	movs	r2, #0
  4026e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
  4026e8:	68fb      	ldr	r3, [r7, #12]
  4026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d003      	beq.n	4026f8 <usart_error+0x24>
		descr->usart_cb.error(descr);
  4026f0:	68fb      	ldr	r3, [r7, #12]
  4026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4026f4:	68f8      	ldr	r0, [r7, #12]
  4026f6:	4798      	blx	r3
	}
}
  4026f8:	bf00      	nop
  4026fa:	3710      	adds	r7, #16
  4026fc:	46bd      	mov	sp, r7
  4026fe:	bd80      	pop	{r7, pc}

00402700 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
  402700:	b580      	push	{r7, lr}
  402702:	b086      	sub	sp, #24
  402704:	af00      	add	r7, sp, #0
  402706:	60f8      	str	r0, [r7, #12]
  402708:	60b9      	str	r1, [r7, #8]
  40270a:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
  40270c:	68fb      	ldr	r3, [r7, #12]
  40270e:	2b00      	cmp	r3, #0
  402710:	d004      	beq.n	40271c <usart_sync_init+0x1c>
  402712:	68bb      	ldr	r3, [r7, #8]
  402714:	2b00      	cmp	r3, #0
  402716:	d001      	beq.n	40271c <usart_sync_init+0x1c>
  402718:	2301      	movs	r3, #1
  40271a:	e000      	b.n	40271e <usart_sync_init+0x1e>
  40271c:	2300      	movs	r3, #0
  40271e:	f003 0301 	and.w	r3, r3, #1
  402722:	b2db      	uxtb	r3, r3
  402724:	2234      	movs	r2, #52	; 0x34
  402726:	490d      	ldr	r1, [pc, #52]	; (40275c <usart_sync_init+0x5c>)
  402728:	4618      	mov	r0, r3
  40272a:	4b0d      	ldr	r3, [pc, #52]	; (402760 <usart_sync_init+0x60>)
  40272c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40272e:	68fb      	ldr	r3, [r7, #12]
  402730:	3308      	adds	r3, #8
  402732:	68b9      	ldr	r1, [r7, #8]
  402734:	4618      	mov	r0, r3
  402736:	4b0b      	ldr	r3, [pc, #44]	; (402764 <usart_sync_init+0x64>)
  402738:	4798      	blx	r3
  40273a:	6178      	str	r0, [r7, #20]
	if (init_status) {
  40273c:	697b      	ldr	r3, [r7, #20]
  40273e:	2b00      	cmp	r3, #0
  402740:	d001      	beq.n	402746 <usart_sync_init+0x46>
		return init_status;
  402742:	697b      	ldr	r3, [r7, #20]
  402744:	e006      	b.n	402754 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
  402746:	68fb      	ldr	r3, [r7, #12]
  402748:	4a07      	ldr	r2, [pc, #28]	; (402768 <usart_sync_init+0x68>)
  40274a:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
  40274c:	68fb      	ldr	r3, [r7, #12]
  40274e:	4a07      	ldr	r2, [pc, #28]	; (40276c <usart_sync_init+0x6c>)
  402750:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  402752:	2300      	movs	r3, #0
}
  402754:	4618      	mov	r0, r3
  402756:	3718      	adds	r7, #24
  402758:	46bd      	mov	sp, r7
  40275a:	bd80      	pop	{r7, pc}
  40275c:	00407590 	.word	0x00407590
  402760:	00402d25 	.word	0x00402d25
  402764:	00405089 	.word	0x00405089
  402768:	00402839 	.word	0x00402839
  40276c:	00402771 	.word	0x00402771

00402770 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  402770:	b580      	push	{r7, lr}
  402772:	b086      	sub	sp, #24
  402774:	af00      	add	r7, sp, #0
  402776:	60f8      	str	r0, [r7, #12]
  402778:	60b9      	str	r1, [r7, #8]
  40277a:	4613      	mov	r3, r2
  40277c:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  40277e:	2300      	movs	r3, #0
  402780:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  402782:	68fb      	ldr	r3, [r7, #12]
  402784:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  402786:	68fb      	ldr	r3, [r7, #12]
  402788:	2b00      	cmp	r3, #0
  40278a:	d007      	beq.n	40279c <usart_sync_write+0x2c>
  40278c:	68bb      	ldr	r3, [r7, #8]
  40278e:	2b00      	cmp	r3, #0
  402790:	d004      	beq.n	40279c <usart_sync_write+0x2c>
  402792:	88fb      	ldrh	r3, [r7, #6]
  402794:	2b00      	cmp	r3, #0
  402796:	d001      	beq.n	40279c <usart_sync_write+0x2c>
  402798:	2301      	movs	r3, #1
  40279a:	e000      	b.n	40279e <usart_sync_write+0x2e>
  40279c:	2300      	movs	r3, #0
  40279e:	f003 0301 	and.w	r3, r3, #1
  4027a2:	b2db      	uxtb	r3, r3
  4027a4:	22f1      	movs	r2, #241	; 0xf1
  4027a6:	491f      	ldr	r1, [pc, #124]	; (402824 <usart_sync_write+0xb4>)
  4027a8:	4618      	mov	r0, r3
  4027aa:	4b1f      	ldr	r3, [pc, #124]	; (402828 <usart_sync_write+0xb8>)
  4027ac:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4027ae:	bf00      	nop
  4027b0:	693b      	ldr	r3, [r7, #16]
  4027b2:	3308      	adds	r3, #8
  4027b4:	4618      	mov	r0, r3
  4027b6:	4b1d      	ldr	r3, [pc, #116]	; (40282c <usart_sync_write+0xbc>)
  4027b8:	4798      	blx	r3
  4027ba:	4603      	mov	r3, r0
  4027bc:	f083 0301 	eor.w	r3, r3, #1
  4027c0:	b2db      	uxtb	r3, r3
  4027c2:	2b00      	cmp	r3, #0
  4027c4:	d1f4      	bne.n	4027b0 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4027c6:	693b      	ldr	r3, [r7, #16]
  4027c8:	f103 0008 	add.w	r0, r3, #8
  4027cc:	68ba      	ldr	r2, [r7, #8]
  4027ce:	697b      	ldr	r3, [r7, #20]
  4027d0:	4413      	add	r3, r2
  4027d2:	781b      	ldrb	r3, [r3, #0]
  4027d4:	4619      	mov	r1, r3
  4027d6:	4b16      	ldr	r3, [pc, #88]	; (402830 <usart_sync_write+0xc0>)
  4027d8:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4027da:	bf00      	nop
  4027dc:	693b      	ldr	r3, [r7, #16]
  4027de:	3308      	adds	r3, #8
  4027e0:	4618      	mov	r0, r3
  4027e2:	4b12      	ldr	r3, [pc, #72]	; (40282c <usart_sync_write+0xbc>)
  4027e4:	4798      	blx	r3
  4027e6:	4603      	mov	r3, r0
  4027e8:	f083 0301 	eor.w	r3, r3, #1
  4027ec:	b2db      	uxtb	r3, r3
  4027ee:	2b00      	cmp	r3, #0
  4027f0:	d1f4      	bne.n	4027dc <usart_sync_write+0x6c>
			;
	} while (++offset < length);
  4027f2:	697b      	ldr	r3, [r7, #20]
  4027f4:	3301      	adds	r3, #1
  4027f6:	617b      	str	r3, [r7, #20]
  4027f8:	88fb      	ldrh	r3, [r7, #6]
  4027fa:	697a      	ldr	r2, [r7, #20]
  4027fc:	429a      	cmp	r2, r3
  4027fe:	d3e2      	bcc.n	4027c6 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
  402800:	bf00      	nop
  402802:	693b      	ldr	r3, [r7, #16]
  402804:	3308      	adds	r3, #8
  402806:	4618      	mov	r0, r3
  402808:	4b0a      	ldr	r3, [pc, #40]	; (402834 <usart_sync_write+0xc4>)
  40280a:	4798      	blx	r3
  40280c:	4603      	mov	r3, r0
  40280e:	f083 0301 	eor.w	r3, r3, #1
  402812:	b2db      	uxtb	r3, r3
  402814:	2b00      	cmp	r3, #0
  402816:	d1f4      	bne.n	402802 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
  402818:	697b      	ldr	r3, [r7, #20]
}
  40281a:	4618      	mov	r0, r3
  40281c:	3718      	adds	r7, #24
  40281e:	46bd      	mov	sp, r7
  402820:	bd80      	pop	{r7, pc}
  402822:	bf00      	nop
  402824:	00407590 	.word	0x00407590
  402828:	00402d25 	.word	0x00402d25
  40282c:	00405251 	.word	0x00405251
  402830:	0040517d 	.word	0x0040517d
  402834:	00405291 	.word	0x00405291

00402838 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  402838:	b590      	push	{r4, r7, lr}
  40283a:	b087      	sub	sp, #28
  40283c:	af00      	add	r7, sp, #0
  40283e:	60f8      	str	r0, [r7, #12]
  402840:	60b9      	str	r1, [r7, #8]
  402842:	4613      	mov	r3, r2
  402844:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  402846:	2300      	movs	r3, #0
  402848:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  40284a:	68fb      	ldr	r3, [r7, #12]
  40284c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  40284e:	68fb      	ldr	r3, [r7, #12]
  402850:	2b00      	cmp	r3, #0
  402852:	d007      	beq.n	402864 <usart_sync_read+0x2c>
  402854:	68bb      	ldr	r3, [r7, #8]
  402856:	2b00      	cmp	r3, #0
  402858:	d004      	beq.n	402864 <usart_sync_read+0x2c>
  40285a:	88fb      	ldrh	r3, [r7, #6]
  40285c:	2b00      	cmp	r3, #0
  40285e:	d001      	beq.n	402864 <usart_sync_read+0x2c>
  402860:	2301      	movs	r3, #1
  402862:	e000      	b.n	402866 <usart_sync_read+0x2e>
  402864:	2300      	movs	r3, #0
  402866:	f003 0301 	and.w	r3, r3, #1
  40286a:	b2db      	uxtb	r3, r3
  40286c:	f44f 7286 	mov.w	r2, #268	; 0x10c
  402870:	4912      	ldr	r1, [pc, #72]	; (4028bc <usart_sync_read+0x84>)
  402872:	4618      	mov	r0, r3
  402874:	4b12      	ldr	r3, [pc, #72]	; (4028c0 <usart_sync_read+0x88>)
  402876:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  402878:	bf00      	nop
  40287a:	693b      	ldr	r3, [r7, #16]
  40287c:	3308      	adds	r3, #8
  40287e:	4618      	mov	r0, r3
  402880:	4b10      	ldr	r3, [pc, #64]	; (4028c4 <usart_sync_read+0x8c>)
  402882:	4798      	blx	r3
  402884:	4603      	mov	r3, r0
  402886:	f083 0301 	eor.w	r3, r3, #1
  40288a:	b2db      	uxtb	r3, r3
  40288c:	2b00      	cmp	r3, #0
  40288e:	d1f4      	bne.n	40287a <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  402890:	68ba      	ldr	r2, [r7, #8]
  402892:	697b      	ldr	r3, [r7, #20]
  402894:	18d4      	adds	r4, r2, r3
  402896:	693b      	ldr	r3, [r7, #16]
  402898:	3308      	adds	r3, #8
  40289a:	4618      	mov	r0, r3
  40289c:	4b0a      	ldr	r3, [pc, #40]	; (4028c8 <usart_sync_read+0x90>)
  40289e:	4798      	blx	r3
  4028a0:	4603      	mov	r3, r0
  4028a2:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
  4028a4:	697b      	ldr	r3, [r7, #20]
  4028a6:	3301      	adds	r3, #1
  4028a8:	617b      	str	r3, [r7, #20]
  4028aa:	88fb      	ldrh	r3, [r7, #6]
  4028ac:	697a      	ldr	r2, [r7, #20]
  4028ae:	429a      	cmp	r2, r3
  4028b0:	d3e2      	bcc.n	402878 <usart_sync_read+0x40>

	return (int32_t)offset;
  4028b2:	697b      	ldr	r3, [r7, #20]
}
  4028b4:	4618      	mov	r0, r3
  4028b6:	371c      	adds	r7, #28
  4028b8:	46bd      	mov	sp, r7
  4028ba:	bd90      	pop	{r4, r7, pc}
  4028bc:	00407590 	.word	0x00407590
  4028c0:	00402d25 	.word	0x00402d25
  4028c4:	004052d1 	.word	0x004052d1
  4028c8:	0040520d 	.word	0x0040520d

004028cc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
  4028cc:	b480      	push	{r7}
  4028ce:	b085      	sub	sp, #20
  4028d0:	af00      	add	r7, sp, #0
  4028d2:	4603      	mov	r3, r0
  4028d4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4028d6:	2300      	movs	r3, #0
  4028d8:	73fb      	strb	r3, [r7, #15]
  4028da:	e029      	b.n	402930 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  4028dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4028e0:	4a19      	ldr	r2, [pc, #100]	; (402948 <_usb_d_find_ep+0x7c>)
  4028e2:	015b      	lsls	r3, r3, #5
  4028e4:	4413      	add	r3, r2
  4028e6:	3301      	adds	r3, #1
  4028e8:	781b      	ldrb	r3, [r3, #0]
  4028ea:	79fa      	ldrb	r2, [r7, #7]
  4028ec:	429a      	cmp	r2, r3
  4028ee:	d102      	bne.n	4028f6 <_usb_d_find_ep+0x2a>
			return i;
  4028f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4028f4:	e022      	b.n	40293c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  4028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4028fa:	4a13      	ldr	r2, [pc, #76]	; (402948 <_usb_d_find_ep+0x7c>)
  4028fc:	015b      	lsls	r3, r3, #5
  4028fe:	4413      	add	r3, r2
  402900:	781b      	ldrb	r3, [r3, #0]
  402902:	2b00      	cmp	r3, #0
  402904:	d10e      	bne.n	402924 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  402906:	79fb      	ldrb	r3, [r7, #7]
  402908:	f003 030f 	and.w	r3, r3, #15
  40290c:	f997 200f 	ldrsb.w	r2, [r7, #15]
  402910:	490d      	ldr	r1, [pc, #52]	; (402948 <_usb_d_find_ep+0x7c>)
  402912:	0152      	lsls	r2, r2, #5
  402914:	440a      	add	r2, r1
  402916:	3201      	adds	r2, #1
  402918:	7812      	ldrb	r2, [r2, #0]
  40291a:	4293      	cmp	r3, r2
  40291c:	d102      	bne.n	402924 <_usb_d_find_ep+0x58>
			return i;
  40291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402922:	e00b      	b.n	40293c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402924:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402928:	b2db      	uxtb	r3, r3
  40292a:	3301      	adds	r3, #1
  40292c:	b2db      	uxtb	r3, r3
  40292e:	73fb      	strb	r3, [r7, #15]
  402930:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402934:	2b03      	cmp	r3, #3
  402936:	ddd1      	ble.n	4028dc <_usb_d_find_ep+0x10>
		}
	}
	return -1;
  402938:	f04f 33ff 	mov.w	r3, #4294967295
}
  40293c:	4618      	mov	r0, r3
  40293e:	3714      	adds	r7, #20
  402940:	46bd      	mov	sp, r7
  402942:	f85d 7b04 	ldr.w	r7, [sp], #4
  402946:	4770      	bx	lr
  402948:	20401140 	.word	0x20401140

0040294c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
  40294c:	b580      	push	{r7, lr}
  40294e:	b088      	sub	sp, #32
  402950:	af00      	add	r7, sp, #0
  402952:	60ba      	str	r2, [r7, #8]
  402954:	607b      	str	r3, [r7, #4]
  402956:	4603      	mov	r3, r0
  402958:	73fb      	strb	r3, [r7, #15]
  40295a:	460b      	mov	r3, r1
  40295c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
  40295e:	68bb      	ldr	r3, [r7, #8]
  402960:	617b      	str	r3, [r7, #20]
  402962:	687b      	ldr	r3, [r7, #4]
  402964:	61bb      	str	r3, [r7, #24]
  402966:	7bbb      	ldrb	r3, [r7, #14]
  402968:	2b00      	cmp	r3, #0
  40296a:	d004      	beq.n	402976 <_usb_d_trans+0x2a>
  40296c:	7bfb      	ldrb	r3, [r7, #15]
  40296e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402972:	b2db      	uxtb	r3, r3
  402974:	e003      	b.n	40297e <_usb_d_trans+0x32>
  402976:	7bfb      	ldrb	r3, [r7, #15]
  402978:	f003 030f 	and.w	r3, r3, #15
  40297c:	b2db      	uxtb	r3, r3
  40297e:	773b      	strb	r3, [r7, #28]
  402980:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  402984:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
  402986:	f107 0314 	add.w	r3, r7, #20
  40298a:	4618      	mov	r0, r3
  40298c:	4b03      	ldr	r3, [pc, #12]	; (40299c <_usb_d_trans+0x50>)
  40298e:	4798      	blx	r3
  402990:	4603      	mov	r3, r0
}
  402992:	4618      	mov	r0, r3
  402994:	3720      	adds	r7, #32
  402996:	46bd      	mov	sp, r7
  402998:	bd80      	pop	{r7, pc}
  40299a:	bf00      	nop
  40299c:	00406a8d 	.word	0x00406a8d

004029a0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
  4029a0:	b480      	push	{r7}
  4029a2:	b085      	sub	sp, #20
  4029a4:	af00      	add	r7, sp, #0
  4029a6:	60f8      	str	r0, [r7, #12]
  4029a8:	60b9      	str	r1, [r7, #8]
  4029aa:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
  4029ac:	2300      	movs	r3, #0
}
  4029ae:	4618      	mov	r0, r3
  4029b0:	3714      	adds	r7, #20
  4029b2:	46bd      	mov	sp, r7
  4029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029b8:	4770      	bx	lr
	...

004029bc <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
  4029bc:	b580      	push	{r7, lr}
  4029be:	b086      	sub	sp, #24
  4029c0:	af00      	add	r7, sp, #0
  4029c2:	4603      	mov	r3, r0
  4029c4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  4029c6:	79fb      	ldrb	r3, [r7, #7]
  4029c8:	4618      	mov	r0, r3
  4029ca:	4b2a      	ldr	r3, [pc, #168]	; (402a74 <usb_d_cb_trans_setup+0xb8>)
  4029cc:	4798      	blx	r3
  4029ce:	4603      	mov	r3, r0
  4029d0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4029d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4029d6:	015b      	lsls	r3, r3, #5
  4029d8:	4a27      	ldr	r2, [pc, #156]	; (402a78 <usb_d_cb_trans_setup+0xbc>)
  4029da:	4413      	add	r3, r2
  4029dc:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
  4029de:	693b      	ldr	r3, [r7, #16]
  4029e0:	330c      	adds	r3, #12
  4029e2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  4029e4:	79fb      	ldrb	r3, [r7, #7]
  4029e6:	68f9      	ldr	r1, [r7, #12]
  4029e8:	4618      	mov	r0, r3
  4029ea:	4b24      	ldr	r3, [pc, #144]	; (402a7c <usb_d_cb_trans_setup+0xc0>)
  4029ec:	4798      	blx	r3
  4029ee:	4603      	mov	r3, r0
  4029f0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
  4029f2:	7afb      	ldrb	r3, [r7, #11]
  4029f4:	2b08      	cmp	r3, #8
  4029f6:	d00d      	beq.n	402a14 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  4029f8:	79fb      	ldrb	r3, [r7, #7]
  4029fa:	2101      	movs	r1, #1
  4029fc:	4618      	mov	r0, r3
  4029fe:	4b20      	ldr	r3, [pc, #128]	; (402a80 <usb_d_cb_trans_setup+0xc4>)
  402a00:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  402a02:	79fb      	ldrb	r3, [r7, #7]
  402a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402a08:	b2db      	uxtb	r3, r3
  402a0a:	2101      	movs	r1, #1
  402a0c:	4618      	mov	r0, r3
  402a0e:	4b1c      	ldr	r3, [pc, #112]	; (402a80 <usb_d_cb_trans_setup+0xc4>)
  402a10:	4798      	blx	r3
		return;
  402a12:	e02b      	b.n	402a6c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  402a14:	79fb      	ldrb	r3, [r7, #7]
  402a16:	2100      	movs	r1, #0
  402a18:	4618      	mov	r0, r3
  402a1a:	4b19      	ldr	r3, [pc, #100]	; (402a80 <usb_d_cb_trans_setup+0xc4>)
  402a1c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  402a1e:	79fb      	ldrb	r3, [r7, #7]
  402a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402a24:	b2db      	uxtb	r3, r3
  402a26:	2100      	movs	r1, #0
  402a28:	4618      	mov	r0, r3
  402a2a:	4b15      	ldr	r3, [pc, #84]	; (402a80 <usb_d_cb_trans_setup+0xc4>)
  402a2c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  402a2e:	693b      	ldr	r3, [r7, #16]
  402a30:	2201      	movs	r2, #1
  402a32:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  402a34:	693b      	ldr	r3, [r7, #16]
  402a36:	695b      	ldr	r3, [r3, #20]
  402a38:	79fa      	ldrb	r2, [r7, #7]
  402a3a:	68f9      	ldr	r1, [r7, #12]
  402a3c:	4610      	mov	r0, r2
  402a3e:	4798      	blx	r3
  402a40:	4603      	mov	r3, r0
  402a42:	f083 0301 	eor.w	r3, r3, #1
  402a46:	b2db      	uxtb	r3, r3
  402a48:	2b00      	cmp	r3, #0
  402a4a:	d00f      	beq.n	402a6c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  402a4c:	693b      	ldr	r3, [r7, #16]
  402a4e:	2205      	movs	r2, #5
  402a50:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  402a52:	79fb      	ldrb	r3, [r7, #7]
  402a54:	2101      	movs	r1, #1
  402a56:	4618      	mov	r0, r3
  402a58:	4b09      	ldr	r3, [pc, #36]	; (402a80 <usb_d_cb_trans_setup+0xc4>)
  402a5a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  402a5c:	79fb      	ldrb	r3, [r7, #7]
  402a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402a62:	b2db      	uxtb	r3, r3
  402a64:	2101      	movs	r1, #1
  402a66:	4618      	mov	r0, r3
  402a68:	4b05      	ldr	r3, [pc, #20]	; (402a80 <usb_d_cb_trans_setup+0xc4>)
  402a6a:	4798      	blx	r3
	}
}
  402a6c:	3718      	adds	r7, #24
  402a6e:	46bd      	mov	sp, r7
  402a70:	bd80      	pop	{r7, pc}
  402a72:	bf00      	nop
  402a74:	004028cd 	.word	0x004028cd
  402a78:	20401140 	.word	0x20401140
  402a7c:	004069e9 	.word	0x004069e9
  402a80:	004068bd 	.word	0x004068bd

00402a84 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  402a84:	b580      	push	{r7, lr}
  402a86:	b084      	sub	sp, #16
  402a88:	af00      	add	r7, sp, #0
  402a8a:	4603      	mov	r3, r0
  402a8c:	6039      	str	r1, [r7, #0]
  402a8e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  402a90:	79fb      	ldrb	r3, [r7, #7]
  402a92:	4618      	mov	r0, r3
  402a94:	4b0d      	ldr	r3, [pc, #52]	; (402acc <usb_d_cb_trans_more+0x48>)
  402a96:	4798      	blx	r3
  402a98:	4603      	mov	r3, r0
  402a9a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402aa0:	015b      	lsls	r3, r3, #5
  402aa2:	4a0b      	ldr	r2, [pc, #44]	; (402ad0 <usb_d_cb_trans_more+0x4c>)
  402aa4:	4413      	add	r3, r2
  402aa6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  402aa8:	68bb      	ldr	r3, [r7, #8]
  402aaa:	789b      	ldrb	r3, [r3, #2]
  402aac:	2b03      	cmp	r3, #3
  402aae:	d107      	bne.n	402ac0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
  402ab0:	68bb      	ldr	r3, [r7, #8]
  402ab2:	699b      	ldr	r3, [r3, #24]
  402ab4:	79fa      	ldrb	r2, [r7, #7]
  402ab6:	6839      	ldr	r1, [r7, #0]
  402ab8:	4610      	mov	r0, r2
  402aba:	4798      	blx	r3
  402abc:	4603      	mov	r3, r0
  402abe:	e000      	b.n	402ac2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
  402ac0:	2300      	movs	r3, #0
}
  402ac2:	4618      	mov	r0, r3
  402ac4:	3710      	adds	r7, #16
  402ac6:	46bd      	mov	sp, r7
  402ac8:	bd80      	pop	{r7, pc}
  402aca:	bf00      	nop
  402acc:	004028cd 	.word	0x004028cd
  402ad0:	20401140 	.word	0x20401140

00402ad4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
  402ad4:	b590      	push	{r4, r7, lr}
  402ad6:	b087      	sub	sp, #28
  402ad8:	af02      	add	r7, sp, #8
  402ada:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
  402adc:	687b      	ldr	r3, [r7, #4]
  402ade:	789b      	ldrb	r3, [r3, #2]
  402ae0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  402ae2:	687b      	ldr	r3, [r7, #4]
  402ae4:	7b1b      	ldrb	r3, [r3, #12]
  402ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402aea:	2b00      	cmp	r3, #0
  402aec:	bf14      	ite	ne
  402aee:	2301      	movne	r3, #1
  402af0:	2300      	moveq	r3, #0
  402af2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
  402af4:	7bfb      	ldrb	r3, [r7, #15]
  402af6:	2b03      	cmp	r3, #3
  402af8:	d13a      	bne.n	402b70 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  402afa:	687b      	ldr	r3, [r7, #4]
  402afc:	69db      	ldr	r3, [r3, #28]
  402afe:	687a      	ldr	r2, [r7, #4]
  402b00:	7850      	ldrb	r0, [r2, #1]
  402b02:	687a      	ldr	r2, [r7, #4]
  402b04:	320c      	adds	r2, #12
  402b06:	2101      	movs	r1, #1
  402b08:	4798      	blx	r3
  402b0a:	4603      	mov	r3, r0
  402b0c:	737b      	strb	r3, [r7, #13]
		if (err) {
  402b0e:	7b7b      	ldrb	r3, [r7, #13]
  402b10:	2b00      	cmp	r3, #0
  402b12:	d015      	beq.n	402b40 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  402b14:	687b      	ldr	r3, [r7, #4]
  402b16:	2205      	movs	r2, #5
  402b18:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  402b1a:	687b      	ldr	r3, [r7, #4]
  402b1c:	2202      	movs	r2, #2
  402b1e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  402b20:	7bbb      	ldrb	r3, [r7, #14]
  402b22:	2b00      	cmp	r3, #0
  402b24:	d002      	beq.n	402b2c <usb_d_ctrl_trans_done+0x58>
  402b26:	687b      	ldr	r3, [r7, #4]
  402b28:	785b      	ldrb	r3, [r3, #1]
  402b2a:	e004      	b.n	402b36 <usb_d_ctrl_trans_done+0x62>
  402b2c:	687b      	ldr	r3, [r7, #4]
  402b2e:	785b      	ldrb	r3, [r3, #1]
  402b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402b34:	b2db      	uxtb	r3, r3
  402b36:	2101      	movs	r1, #1
  402b38:	4618      	mov	r0, r3
  402b3a:	4b15      	ldr	r3, [pc, #84]	; (402b90 <usb_d_ctrl_trans_done+0xbc>)
  402b3c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
  402b3e:	e022      	b.n	402b86 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  402b40:	687b      	ldr	r3, [r7, #4]
  402b42:	2204      	movs	r2, #4
  402b44:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  402b46:	687b      	ldr	r3, [r7, #4]
  402b48:	7858      	ldrb	r0, [r3, #1]
  402b4a:	7bbb      	ldrb	r3, [r7, #14]
  402b4c:	2b00      	cmp	r3, #0
  402b4e:	bf14      	ite	ne
  402b50:	2301      	movne	r3, #1
  402b52:	2300      	moveq	r3, #0
  402b54:	b2db      	uxtb	r3, r3
  402b56:	f083 0301 	eor.w	r3, r3, #1
  402b5a:	b2db      	uxtb	r3, r3
  402b5c:	f003 0301 	and.w	r3, r3, #1
  402b60:	b2d9      	uxtb	r1, r3
  402b62:	2301      	movs	r3, #1
  402b64:	9300      	str	r3, [sp, #0]
  402b66:	2300      	movs	r3, #0
  402b68:	2200      	movs	r2, #0
  402b6a:	4c0a      	ldr	r4, [pc, #40]	; (402b94 <usb_d_ctrl_trans_done+0xc0>)
  402b6c:	47a0      	blx	r4
}
  402b6e:	e00a      	b.n	402b86 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  402b70:	687b      	ldr	r3, [r7, #4]
  402b72:	69db      	ldr	r3, [r3, #28]
  402b74:	687a      	ldr	r2, [r7, #4]
  402b76:	7850      	ldrb	r0, [r2, #1]
  402b78:	687a      	ldr	r2, [r7, #4]
  402b7a:	320c      	adds	r2, #12
  402b7c:	2100      	movs	r1, #0
  402b7e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402b80:	687b      	ldr	r3, [r7, #4]
  402b82:	2202      	movs	r2, #2
  402b84:	709a      	strb	r2, [r3, #2]
}
  402b86:	bf00      	nop
  402b88:	3714      	adds	r7, #20
  402b8a:	46bd      	mov	sp, r7
  402b8c:	bd90      	pop	{r4, r7, pc}
  402b8e:	bf00      	nop
  402b90:	004068bd 	.word	0x004068bd
  402b94:	0040294d 	.word	0x0040294d

00402b98 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  402b98:	b580      	push	{r7, lr}
  402b9a:	b086      	sub	sp, #24
  402b9c:	af00      	add	r7, sp, #0
  402b9e:	4603      	mov	r3, r0
  402ba0:	60b9      	str	r1, [r7, #8]
  402ba2:	607a      	str	r2, [r7, #4]
  402ba4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
  402ba6:	7bfb      	ldrb	r3, [r7, #15]
  402ba8:	4618      	mov	r0, r3
  402baa:	4b2f      	ldr	r3, [pc, #188]	; (402c68 <_usb_d_cb_trans_done+0xd0>)
  402bac:	4798      	blx	r3
  402bae:	4603      	mov	r3, r0
  402bb0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402bb6:	015b      	lsls	r3, r3, #5
  402bb8:	4a2c      	ldr	r2, [pc, #176]	; (402c6c <_usb_d_cb_trans_done+0xd4>)
  402bba:	4413      	add	r3, r2
  402bbc:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
  402bbe:	68bb      	ldr	r3, [r7, #8]
  402bc0:	2b00      	cmp	r3, #0
  402bc2:	d10e      	bne.n	402be2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
  402bc4:	693b      	ldr	r3, [r7, #16]
  402bc6:	2200      	movs	r2, #0
  402bc8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  402bca:	693b      	ldr	r3, [r7, #16]
  402bcc:	781b      	ldrb	r3, [r3, #0]
  402bce:	2b00      	cmp	r3, #0
  402bd0:	d103      	bne.n	402bda <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
  402bd2:	6938      	ldr	r0, [r7, #16]
  402bd4:	4b26      	ldr	r3, [pc, #152]	; (402c70 <_usb_d_cb_trans_done+0xd8>)
  402bd6:	4798      	blx	r3
			return;
  402bd8:	e043      	b.n	402c62 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  402bda:	693b      	ldr	r3, [r7, #16]
  402bdc:	2201      	movs	r2, #1
  402bde:	709a      	strb	r2, [r3, #2]
  402be0:	e038      	b.n	402c54 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
  402be2:	68bb      	ldr	r3, [r7, #8]
  402be4:	2b01      	cmp	r3, #1
  402be6:	d113      	bne.n	402c10 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
  402be8:	693b      	ldr	r3, [r7, #16]
  402bea:	2202      	movs	r2, #2
  402bec:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  402bee:	693b      	ldr	r3, [r7, #16]
  402bf0:	781b      	ldrb	r3, [r3, #0]
  402bf2:	2b00      	cmp	r3, #0
  402bf4:	d108      	bne.n	402c08 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402bf6:	693b      	ldr	r3, [r7, #16]
  402bf8:	2202      	movs	r2, #2
  402bfa:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  402bfc:	7bfb      	ldrb	r3, [r7, #15]
  402bfe:	2100      	movs	r1, #0
  402c00:	4618      	mov	r0, r3
  402c02:	4b1c      	ldr	r3, [pc, #112]	; (402c74 <_usb_d_cb_trans_done+0xdc>)
  402c04:	4798      	blx	r3
  402c06:	e025      	b.n	402c54 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  402c08:	693b      	ldr	r3, [r7, #16]
  402c0a:	2205      	movs	r2, #5
  402c0c:	709a      	strb	r2, [r3, #2]
  402c0e:	e021      	b.n	402c54 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
  402c10:	68bb      	ldr	r3, [r7, #8]
  402c12:	2b02      	cmp	r3, #2
  402c14:	d10e      	bne.n	402c34 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  402c16:	693b      	ldr	r3, [r7, #16]
  402c18:	2204      	movs	r2, #4
  402c1a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  402c1c:	693b      	ldr	r3, [r7, #16]
  402c1e:	781b      	ldrb	r3, [r3, #0]
  402c20:	2b00      	cmp	r3, #0
  402c22:	d103      	bne.n	402c2c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402c24:	693b      	ldr	r3, [r7, #16]
  402c26:	2202      	movs	r2, #2
  402c28:	709a      	strb	r2, [r3, #2]
			return;
  402c2a:	e01a      	b.n	402c62 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  402c2c:	693b      	ldr	r3, [r7, #16]
  402c2e:	2201      	movs	r2, #1
  402c30:	709a      	strb	r2, [r3, #2]
  402c32:	e00f      	b.n	402c54 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
  402c34:	68bb      	ldr	r3, [r7, #8]
  402c36:	2b03      	cmp	r3, #3
  402c38:	d106      	bne.n	402c48 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  402c3a:	693b      	ldr	r3, [r7, #16]
  402c3c:	2200      	movs	r2, #0
  402c3e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  402c40:	693b      	ldr	r3, [r7, #16]
  402c42:	2205      	movs	r2, #5
  402c44:	70da      	strb	r2, [r3, #3]
  402c46:	e005      	b.n	402c54 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  402c48:	693b      	ldr	r3, [r7, #16]
  402c4a:	2206      	movs	r2, #6
  402c4c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  402c4e:	693b      	ldr	r3, [r7, #16]
  402c50:	2206      	movs	r2, #6
  402c52:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  402c54:	693b      	ldr	r3, [r7, #16]
  402c56:	69db      	ldr	r3, [r3, #28]
  402c58:	693a      	ldr	r2, [r7, #16]
  402c5a:	78d1      	ldrb	r1, [r2, #3]
  402c5c:	687a      	ldr	r2, [r7, #4]
  402c5e:	7bf8      	ldrb	r0, [r7, #15]
  402c60:	4798      	blx	r3
}
  402c62:	3718      	adds	r7, #24
  402c64:	46bd      	mov	sp, r7
  402c66:	bd80      	pop	{r7, pc}
  402c68:	004028cd 	.word	0x004028cd
  402c6c:	20401140 	.word	0x20401140
  402c70:	00402ad5 	.word	0x00402ad5
  402c74:	004068bd 	.word	0x004068bd

00402c78 <usb_d_init>:

int32_t usb_d_init(void)
{
  402c78:	b580      	push	{r7, lr}
  402c7a:	b082      	sub	sp, #8
  402c7c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
  402c7e:	4b21      	ldr	r3, [pc, #132]	; (402d04 <usb_d_init+0x8c>)
  402c80:	4798      	blx	r3
  402c82:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
  402c84:	683b      	ldr	r3, [r7, #0]
  402c86:	2b00      	cmp	r3, #0
  402c88:	da01      	bge.n	402c8e <usb_d_init+0x16>
		return rc;
  402c8a:	683b      	ldr	r3, [r7, #0]
  402c8c:	e036      	b.n	402cfc <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  402c8e:	2280      	movs	r2, #128	; 0x80
  402c90:	2100      	movs	r1, #0
  402c92:	481d      	ldr	r0, [pc, #116]	; (402d08 <usb_d_init+0x90>)
  402c94:	4b1d      	ldr	r3, [pc, #116]	; (402d0c <usb_d_init+0x94>)
  402c96:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402c98:	2300      	movs	r3, #0
  402c9a:	71fb      	strb	r3, [r7, #7]
  402c9c:	e01e      	b.n	402cdc <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  402c9e:	79fb      	ldrb	r3, [r7, #7]
  402ca0:	4a19      	ldr	r2, [pc, #100]	; (402d08 <usb_d_init+0x90>)
  402ca2:	015b      	lsls	r3, r3, #5
  402ca4:	4413      	add	r3, r2
  402ca6:	3301      	adds	r3, #1
  402ca8:	22ff      	movs	r2, #255	; 0xff
  402caa:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  402cac:	79fb      	ldrb	r3, [r7, #7]
  402cae:	4a16      	ldr	r2, [pc, #88]	; (402d08 <usb_d_init+0x90>)
  402cb0:	015b      	lsls	r3, r3, #5
  402cb2:	4413      	add	r3, r2
  402cb4:	3314      	adds	r3, #20
  402cb6:	4a16      	ldr	r2, [pc, #88]	; (402d10 <usb_d_init+0x98>)
  402cb8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  402cba:	79fb      	ldrb	r3, [r7, #7]
  402cbc:	4a12      	ldr	r2, [pc, #72]	; (402d08 <usb_d_init+0x90>)
  402cbe:	015b      	lsls	r3, r3, #5
  402cc0:	4413      	add	r3, r2
  402cc2:	3318      	adds	r3, #24
  402cc4:	4a12      	ldr	r2, [pc, #72]	; (402d10 <usb_d_init+0x98>)
  402cc6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  402cc8:	79fb      	ldrb	r3, [r7, #7]
  402cca:	4a0f      	ldr	r2, [pc, #60]	; (402d08 <usb_d_init+0x90>)
  402ccc:	015b      	lsls	r3, r3, #5
  402cce:	4413      	add	r3, r2
  402cd0:	331c      	adds	r3, #28
  402cd2:	4a0f      	ldr	r2, [pc, #60]	; (402d10 <usb_d_init+0x98>)
  402cd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402cd6:	79fb      	ldrb	r3, [r7, #7]
  402cd8:	3301      	adds	r3, #1
  402cda:	71fb      	strb	r3, [r7, #7]
  402cdc:	79fb      	ldrb	r3, [r7, #7]
  402cde:	2b03      	cmp	r3, #3
  402ce0:	d9dd      	bls.n	402c9e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  402ce2:	490c      	ldr	r1, [pc, #48]	; (402d14 <usb_d_init+0x9c>)
  402ce4:	2000      	movs	r0, #0
  402ce6:	4b0c      	ldr	r3, [pc, #48]	; (402d18 <usb_d_init+0xa0>)
  402ce8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  402cea:	490c      	ldr	r1, [pc, #48]	; (402d1c <usb_d_init+0xa4>)
  402cec:	2001      	movs	r0, #1
  402cee:	4b0a      	ldr	r3, [pc, #40]	; (402d18 <usb_d_init+0xa0>)
  402cf0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  402cf2:	490b      	ldr	r1, [pc, #44]	; (402d20 <usb_d_init+0xa8>)
  402cf4:	2002      	movs	r0, #2
  402cf6:	4b08      	ldr	r3, [pc, #32]	; (402d18 <usb_d_init+0xa0>)
  402cf8:	4798      	blx	r3
	return ERR_NONE;
  402cfa:	2300      	movs	r3, #0
}
  402cfc:	4618      	mov	r0, r3
  402cfe:	3708      	adds	r7, #8
  402d00:	46bd      	mov	sp, r7
  402d02:	bd80      	pop	{r7, pc}
  402d04:	004066e1 	.word	0x004066e1
  402d08:	20401140 	.word	0x20401140
  402d0c:	004074ef 	.word	0x004074ef
  402d10:	004029a1 	.word	0x004029a1
  402d14:	004029bd 	.word	0x004029bd
  402d18:	00406c25 	.word	0x00406c25
  402d1c:	00402a85 	.word	0x00402a85
  402d20:	00402b99 	.word	0x00402b99

00402d24 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
  402d24:	b480      	push	{r7}
  402d26:	b085      	sub	sp, #20
  402d28:	af00      	add	r7, sp, #0
  402d2a:	4603      	mov	r3, r0
  402d2c:	60b9      	str	r1, [r7, #8]
  402d2e:	607a      	str	r2, [r7, #4]
  402d30:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
  402d32:	7bfb      	ldrb	r3, [r7, #15]
  402d34:	f083 0301 	eor.w	r3, r3, #1
  402d38:	b2db      	uxtb	r3, r3
  402d3a:	2b00      	cmp	r3, #0
  402d3c:	d000      	beq.n	402d40 <assert+0x1c>
		__asm("BKPT #0");
  402d3e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  402d40:	bf00      	nop
  402d42:	3714      	adds	r7, #20
  402d44:	46bd      	mov	sp, r7
  402d46:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d4a:	4770      	bx	lr

00402d4c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  402d4c:	b580      	push	{r7, lr}
  402d4e:	b084      	sub	sp, #16
  402d50:	af00      	add	r7, sp, #0
  402d52:	60f8      	str	r0, [r7, #12]
  402d54:	60b9      	str	r1, [r7, #8]
  402d56:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
  402d58:	68fb      	ldr	r3, [r7, #12]
  402d5a:	2b00      	cmp	r3, #0
  402d5c:	d007      	beq.n	402d6e <ringbuffer_init+0x22>
  402d5e:	68bb      	ldr	r3, [r7, #8]
  402d60:	2b00      	cmp	r3, #0
  402d62:	d004      	beq.n	402d6e <ringbuffer_init+0x22>
  402d64:	687b      	ldr	r3, [r7, #4]
  402d66:	2b00      	cmp	r3, #0
  402d68:	d001      	beq.n	402d6e <ringbuffer_init+0x22>
  402d6a:	2301      	movs	r3, #1
  402d6c:	e000      	b.n	402d70 <ringbuffer_init+0x24>
  402d6e:	2300      	movs	r3, #0
  402d70:	f003 0301 	and.w	r3, r3, #1
  402d74:	b2db      	uxtb	r3, r3
  402d76:	2228      	movs	r2, #40	; 0x28
  402d78:	490f      	ldr	r1, [pc, #60]	; (402db8 <ringbuffer_init+0x6c>)
  402d7a:	4618      	mov	r0, r3
  402d7c:	4b0f      	ldr	r3, [pc, #60]	; (402dbc <ringbuffer_init+0x70>)
  402d7e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  402d80:	687b      	ldr	r3, [r7, #4]
  402d82:	1e5a      	subs	r2, r3, #1
  402d84:	687b      	ldr	r3, [r7, #4]
  402d86:	4013      	ands	r3, r2
  402d88:	2b00      	cmp	r3, #0
  402d8a:	d002      	beq.n	402d92 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
  402d8c:	f06f 030c 	mvn.w	r3, #12
  402d90:	e00e      	b.n	402db0 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  402d92:	687b      	ldr	r3, [r7, #4]
  402d94:	1e5a      	subs	r2, r3, #1
  402d96:	68fb      	ldr	r3, [r7, #12]
  402d98:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
  402d9a:	68fb      	ldr	r3, [r7, #12]
  402d9c:	2200      	movs	r2, #0
  402d9e:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
  402da0:	68fb      	ldr	r3, [r7, #12]
  402da2:	689a      	ldr	r2, [r3, #8]
  402da4:	68fb      	ldr	r3, [r7, #12]
  402da6:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
  402da8:	68fb      	ldr	r3, [r7, #12]
  402daa:	68ba      	ldr	r2, [r7, #8]
  402dac:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  402dae:	2300      	movs	r3, #0
}
  402db0:	4618      	mov	r0, r3
  402db2:	3710      	adds	r7, #16
  402db4:	46bd      	mov	sp, r7
  402db6:	bd80      	pop	{r7, pc}
  402db8:	004075ac 	.word	0x004075ac
  402dbc:	00402d25 	.word	0x00402d25

00402dc0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  402dc0:	b580      	push	{r7, lr}
  402dc2:	b082      	sub	sp, #8
  402dc4:	af00      	add	r7, sp, #0
  402dc6:	6078      	str	r0, [r7, #4]
  402dc8:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
  402dca:	687b      	ldr	r3, [r7, #4]
  402dcc:	2b00      	cmp	r3, #0
  402dce:	d004      	beq.n	402dda <ringbuffer_get+0x1a>
  402dd0:	683b      	ldr	r3, [r7, #0]
  402dd2:	2b00      	cmp	r3, #0
  402dd4:	d001      	beq.n	402dda <ringbuffer_get+0x1a>
  402dd6:	2301      	movs	r3, #1
  402dd8:	e000      	b.n	402ddc <ringbuffer_get+0x1c>
  402dda:	2300      	movs	r3, #0
  402ddc:	f003 0301 	and.w	r3, r3, #1
  402de0:	b2db      	uxtb	r3, r3
  402de2:	2240      	movs	r2, #64	; 0x40
  402de4:	4910      	ldr	r1, [pc, #64]	; (402e28 <ringbuffer_get+0x68>)
  402de6:	4618      	mov	r0, r3
  402de8:	4b10      	ldr	r3, [pc, #64]	; (402e2c <ringbuffer_get+0x6c>)
  402dea:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  402dec:	687b      	ldr	r3, [r7, #4]
  402dee:	68da      	ldr	r2, [r3, #12]
  402df0:	687b      	ldr	r3, [r7, #4]
  402df2:	689b      	ldr	r3, [r3, #8]
  402df4:	429a      	cmp	r2, r3
  402df6:	d011      	beq.n	402e1c <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
  402df8:	687b      	ldr	r3, [r7, #4]
  402dfa:	681a      	ldr	r2, [r3, #0]
  402dfc:	687b      	ldr	r3, [r7, #4]
  402dfe:	6899      	ldr	r1, [r3, #8]
  402e00:	687b      	ldr	r3, [r7, #4]
  402e02:	685b      	ldr	r3, [r3, #4]
  402e04:	400b      	ands	r3, r1
  402e06:	4413      	add	r3, r2
  402e08:	781a      	ldrb	r2, [r3, #0]
  402e0a:	683b      	ldr	r3, [r7, #0]
  402e0c:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
  402e0e:	687b      	ldr	r3, [r7, #4]
  402e10:	689b      	ldr	r3, [r3, #8]
  402e12:	1c5a      	adds	r2, r3, #1
  402e14:	687b      	ldr	r3, [r7, #4]
  402e16:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
  402e18:	2300      	movs	r3, #0
  402e1a:	e001      	b.n	402e20 <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
  402e1c:	f06f 0309 	mvn.w	r3, #9
}
  402e20:	4618      	mov	r0, r3
  402e22:	3708      	adds	r7, #8
  402e24:	46bd      	mov	sp, r7
  402e26:	bd80      	pop	{r7, pc}
  402e28:	004075ac 	.word	0x004075ac
  402e2c:	00402d25 	.word	0x00402d25

00402e30 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  402e30:	b580      	push	{r7, lr}
  402e32:	b082      	sub	sp, #8
  402e34:	af00      	add	r7, sp, #0
  402e36:	6078      	str	r0, [r7, #4]
  402e38:	460b      	mov	r3, r1
  402e3a:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
  402e3c:	687b      	ldr	r3, [r7, #4]
  402e3e:	2b00      	cmp	r3, #0
  402e40:	bf14      	ite	ne
  402e42:	2301      	movne	r3, #1
  402e44:	2300      	moveq	r3, #0
  402e46:	b2db      	uxtb	r3, r3
  402e48:	2251      	movs	r2, #81	; 0x51
  402e4a:	4914      	ldr	r1, [pc, #80]	; (402e9c <ringbuffer_put+0x6c>)
  402e4c:	4618      	mov	r0, r3
  402e4e:	4b14      	ldr	r3, [pc, #80]	; (402ea0 <ringbuffer_put+0x70>)
  402e50:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  402e52:	687b      	ldr	r3, [r7, #4]
  402e54:	681a      	ldr	r2, [r3, #0]
  402e56:	687b      	ldr	r3, [r7, #4]
  402e58:	68d9      	ldr	r1, [r3, #12]
  402e5a:	687b      	ldr	r3, [r7, #4]
  402e5c:	685b      	ldr	r3, [r3, #4]
  402e5e:	400b      	ands	r3, r1
  402e60:	4413      	add	r3, r2
  402e62:	78fa      	ldrb	r2, [r7, #3]
  402e64:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  402e66:	687b      	ldr	r3, [r7, #4]
  402e68:	68da      	ldr	r2, [r3, #12]
  402e6a:	687b      	ldr	r3, [r7, #4]
  402e6c:	689b      	ldr	r3, [r3, #8]
  402e6e:	1ad2      	subs	r2, r2, r3
  402e70:	687b      	ldr	r3, [r7, #4]
  402e72:	685b      	ldr	r3, [r3, #4]
  402e74:	429a      	cmp	r2, r3
  402e76:	d906      	bls.n	402e86 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
  402e78:	687b      	ldr	r3, [r7, #4]
  402e7a:	68da      	ldr	r2, [r3, #12]
  402e7c:	687b      	ldr	r3, [r7, #4]
  402e7e:	685b      	ldr	r3, [r3, #4]
  402e80:	1ad2      	subs	r2, r2, r3
  402e82:	687b      	ldr	r3, [r7, #4]
  402e84:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
  402e86:	687b      	ldr	r3, [r7, #4]
  402e88:	68db      	ldr	r3, [r3, #12]
  402e8a:	1c5a      	adds	r2, r3, #1
  402e8c:	687b      	ldr	r3, [r7, #4]
  402e8e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
  402e90:	2300      	movs	r3, #0
}
  402e92:	4618      	mov	r0, r3
  402e94:	3708      	adds	r7, #8
  402e96:	46bd      	mov	sp, r7
  402e98:	bd80      	pop	{r7, pc}
  402e9a:	bf00      	nop
  402e9c:	004075ac 	.word	0x004075ac
  402ea0:	00402d25 	.word	0x00402d25

00402ea4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  402ea4:	b580      	push	{r7, lr}
  402ea6:	b082      	sub	sp, #8
  402ea8:	af00      	add	r7, sp, #0
  402eaa:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
  402eac:	687b      	ldr	r3, [r7, #4]
  402eae:	2b00      	cmp	r3, #0
  402eb0:	bf14      	ite	ne
  402eb2:	2301      	movne	r3, #1
  402eb4:	2300      	moveq	r3, #0
  402eb6:	b2db      	uxtb	r3, r3
  402eb8:	2267      	movs	r2, #103	; 0x67
  402eba:	4906      	ldr	r1, [pc, #24]	; (402ed4 <ringbuffer_num+0x30>)
  402ebc:	4618      	mov	r0, r3
  402ebe:	4b06      	ldr	r3, [pc, #24]	; (402ed8 <ringbuffer_num+0x34>)
  402ec0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  402ec2:	687b      	ldr	r3, [r7, #4]
  402ec4:	68da      	ldr	r2, [r3, #12]
  402ec6:	687b      	ldr	r3, [r7, #4]
  402ec8:	689b      	ldr	r3, [r3, #8]
  402eca:	1ad3      	subs	r3, r2, r3
}
  402ecc:	4618      	mov	r0, r3
  402ece:	3708      	adds	r7, #8
  402ed0:	46bd      	mov	sp, r7
  402ed2:	bd80      	pop	{r7, pc}
  402ed4:	004075ac 	.word	0x004075ac
  402ed8:	00402d25 	.word	0x00402d25

00402edc <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
  402edc:	b480      	push	{r7}
  402ede:	b083      	sub	sp, #12
  402ee0:	af00      	add	r7, sp, #0
  402ee2:	4603      	mov	r3, r0
  402ee4:	6039      	str	r1, [r7, #0]
  402ee6:	80fb      	strh	r3, [r7, #6]
  402ee8:	4613      	mov	r3, r2
  402eea:	717b      	strb	r3, [r7, #5]
	switch (power) {
  402eec:	797b      	ldrb	r3, [r7, #5]
  402eee:	3b05      	subs	r3, #5
  402ef0:	2b04      	cmp	r3, #4
  402ef2:	d852      	bhi.n	402f9a <_get_cycles_for_us_internal+0xbe>
  402ef4:	a201      	add	r2, pc, #4	; (adr r2, 402efc <_get_cycles_for_us_internal+0x20>)
  402ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402efa:	bf00      	nop
  402efc:	00402f7b 	.word	0x00402f7b
  402f00:	00402f5d 	.word	0x00402f5d
  402f04:	00402f41 	.word	0x00402f41
  402f08:	00402f23 	.word	0x00402f23
  402f0c:	00402f11 	.word	0x00402f11
	case 9:
		return (us * (freq / 1000000));
  402f10:	88fb      	ldrh	r3, [r7, #6]
  402f12:	683a      	ldr	r2, [r7, #0]
  402f14:	4929      	ldr	r1, [pc, #164]	; (402fbc <_get_cycles_for_us_internal+0xe0>)
  402f16:	fba1 1202 	umull	r1, r2, r1, r2
  402f1a:	0c92      	lsrs	r2, r2, #18
  402f1c:	fb02 f303 	mul.w	r3, r2, r3
  402f20:	e045      	b.n	402fae <_get_cycles_for_us_internal+0xd2>
	case 8:
		return (us * (freq / 100000) + 9) / 10;
  402f22:	88fb      	ldrh	r3, [r7, #6]
  402f24:	683a      	ldr	r2, [r7, #0]
  402f26:	0952      	lsrs	r2, r2, #5
  402f28:	4925      	ldr	r1, [pc, #148]	; (402fc0 <_get_cycles_for_us_internal+0xe4>)
  402f2a:	fba1 1202 	umull	r1, r2, r1, r2
  402f2e:	09d2      	lsrs	r2, r2, #7
  402f30:	fb02 f303 	mul.w	r3, r2, r3
  402f34:	3309      	adds	r3, #9
  402f36:	4a23      	ldr	r2, [pc, #140]	; (402fc4 <_get_cycles_for_us_internal+0xe8>)
  402f38:	fba2 2303 	umull	r2, r3, r2, r3
  402f3c:	08db      	lsrs	r3, r3, #3
  402f3e:	e036      	b.n	402fae <_get_cycles_for_us_internal+0xd2>
	case 7:
		return (us * (freq / 10000) + 99) / 100;
  402f40:	88fb      	ldrh	r3, [r7, #6]
  402f42:	683a      	ldr	r2, [r7, #0]
  402f44:	4920      	ldr	r1, [pc, #128]	; (402fc8 <_get_cycles_for_us_internal+0xec>)
  402f46:	fba1 1202 	umull	r1, r2, r1, r2
  402f4a:	0b52      	lsrs	r2, r2, #13
  402f4c:	fb02 f303 	mul.w	r3, r2, r3
  402f50:	3363      	adds	r3, #99	; 0x63
  402f52:	4a1e      	ldr	r2, [pc, #120]	; (402fcc <_get_cycles_for_us_internal+0xf0>)
  402f54:	fba2 2303 	umull	r2, r3, r2, r3
  402f58:	095b      	lsrs	r3, r3, #5
  402f5a:	e028      	b.n	402fae <_get_cycles_for_us_internal+0xd2>
	case 6:
		return (us * (freq / 1000) + 999) / 1000;
  402f5c:	88fb      	ldrh	r3, [r7, #6]
  402f5e:	683a      	ldr	r2, [r7, #0]
  402f60:	491b      	ldr	r1, [pc, #108]	; (402fd0 <_get_cycles_for_us_internal+0xf4>)
  402f62:	fba1 1202 	umull	r1, r2, r1, r2
  402f66:	0992      	lsrs	r2, r2, #6
  402f68:	fb02 f303 	mul.w	r3, r2, r3
  402f6c:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  402f70:	4a17      	ldr	r2, [pc, #92]	; (402fd0 <_get_cycles_for_us_internal+0xf4>)
  402f72:	fba2 2303 	umull	r2, r3, r2, r3
  402f76:	099b      	lsrs	r3, r3, #6
  402f78:	e019      	b.n	402fae <_get_cycles_for_us_internal+0xd2>
	case 5:
		return (us * (freq / 100) + 9999) / 10000;
  402f7a:	88fb      	ldrh	r3, [r7, #6]
  402f7c:	683a      	ldr	r2, [r7, #0]
  402f7e:	4913      	ldr	r1, [pc, #76]	; (402fcc <_get_cycles_for_us_internal+0xf0>)
  402f80:	fba1 1202 	umull	r1, r2, r1, r2
  402f84:	0952      	lsrs	r2, r2, #5
  402f86:	fb02 f203 	mul.w	r2, r2, r3
  402f8a:	f242 730f 	movw	r3, #9999	; 0x270f
  402f8e:	4413      	add	r3, r2
  402f90:	4a0d      	ldr	r2, [pc, #52]	; (402fc8 <_get_cycles_for_us_internal+0xec>)
  402f92:	fba2 2303 	umull	r2, r3, r2, r3
  402f96:	0b5b      	lsrs	r3, r3, #13
  402f98:	e009      	b.n	402fae <_get_cycles_for_us_internal+0xd2>
	default:
		return (us * freq + 999999) / 1000000;
  402f9a:	88fb      	ldrh	r3, [r7, #6]
  402f9c:	683a      	ldr	r2, [r7, #0]
  402f9e:	fb02 f203 	mul.w	r2, r2, r3
  402fa2:	4b0c      	ldr	r3, [pc, #48]	; (402fd4 <_get_cycles_for_us_internal+0xf8>)
  402fa4:	4413      	add	r3, r2
  402fa6:	4a05      	ldr	r2, [pc, #20]	; (402fbc <_get_cycles_for_us_internal+0xe0>)
  402fa8:	fba2 2303 	umull	r2, r3, r2, r3
  402fac:	0c9b      	lsrs	r3, r3, #18
	}
}
  402fae:	4618      	mov	r0, r3
  402fb0:	370c      	adds	r7, #12
  402fb2:	46bd      	mov	sp, r7
  402fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fb8:	4770      	bx	lr
  402fba:	bf00      	nop
  402fbc:	431bde83 	.word	0x431bde83
  402fc0:	0a7c5ac5 	.word	0x0a7c5ac5
  402fc4:	cccccccd 	.word	0xcccccccd
  402fc8:	d1b71759 	.word	0xd1b71759
  402fcc:	51eb851f 	.word	0x51eb851f
  402fd0:	10624dd3 	.word	0x10624dd3
  402fd4:	000f423f 	.word	0x000f423f

00402fd8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
  402fd8:	b580      	push	{r7, lr}
  402fda:	b082      	sub	sp, #8
  402fdc:	af00      	add	r7, sp, #0
  402fde:	4603      	mov	r3, r0
  402fe0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  402fe2:	88fb      	ldrh	r3, [r7, #6]
  402fe4:	2209      	movs	r2, #9
  402fe6:	4904      	ldr	r1, [pc, #16]	; (402ff8 <_get_cycles_for_us+0x20>)
  402fe8:	4618      	mov	r0, r3
  402fea:	4b04      	ldr	r3, [pc, #16]	; (402ffc <_get_cycles_for_us+0x24>)
  402fec:	4798      	blx	r3
  402fee:	4603      	mov	r3, r0
}
  402ff0:	4618      	mov	r0, r3
  402ff2:	3708      	adds	r7, #8
  402ff4:	46bd      	mov	sp, r7
  402ff6:	bd80      	pop	{r7, pc}
  402ff8:	11e1a300 	.word	0x11e1a300
  402ffc:	00402edd 	.word	0x00402edd

00403000 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
  403000:	b480      	push	{r7}
  403002:	b083      	sub	sp, #12
  403004:	af00      	add	r7, sp, #0
  403006:	4603      	mov	r3, r0
  403008:	6039      	str	r1, [r7, #0]
  40300a:	80fb      	strh	r3, [r7, #6]
  40300c:	4613      	mov	r3, r2
  40300e:	717b      	strb	r3, [r7, #5]
	switch (power) {
  403010:	797b      	ldrb	r3, [r7, #5]
  403012:	3b05      	subs	r3, #5
  403014:	2b04      	cmp	r3, #4
  403016:	d84b      	bhi.n	4030b0 <_get_cycles_for_ms_internal+0xb0>
  403018:	a201      	add	r2, pc, #4	; (adr r2, 403020 <_get_cycles_for_ms_internal+0x20>)
  40301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40301e:	bf00      	nop
  403020:	00403095 	.word	0x00403095
  403024:	00403083 	.word	0x00403083
  403028:	00403069 	.word	0x00403069
  40302c:	0040304f 	.word	0x0040304f
  403030:	00403035 	.word	0x00403035
	case 9:
		return (ms * (freq / 1000000) * 1000);
  403034:	88fb      	ldrh	r3, [r7, #6]
  403036:	683a      	ldr	r2, [r7, #0]
  403038:	4925      	ldr	r1, [pc, #148]	; (4030d0 <_get_cycles_for_ms_internal+0xd0>)
  40303a:	fba1 1202 	umull	r1, r2, r1, r2
  40303e:	0c92      	lsrs	r2, r2, #18
  403040:	fb02 f303 	mul.w	r3, r2, r3
  403044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403048:	fb02 f303 	mul.w	r3, r2, r3
  40304c:	e03a      	b.n	4030c4 <_get_cycles_for_ms_internal+0xc4>
	case 8:
		return (ms * (freq / 100000) * 100);
  40304e:	88fb      	ldrh	r3, [r7, #6]
  403050:	683a      	ldr	r2, [r7, #0]
  403052:	0952      	lsrs	r2, r2, #5
  403054:	491f      	ldr	r1, [pc, #124]	; (4030d4 <_get_cycles_for_ms_internal+0xd4>)
  403056:	fba1 1202 	umull	r1, r2, r1, r2
  40305a:	09d2      	lsrs	r2, r2, #7
  40305c:	fb02 f303 	mul.w	r3, r2, r3
  403060:	2264      	movs	r2, #100	; 0x64
  403062:	fb02 f303 	mul.w	r3, r2, r3
  403066:	e02d      	b.n	4030c4 <_get_cycles_for_ms_internal+0xc4>
	case 7:
		return (ms * (freq / 10000) * 10);
  403068:	88fb      	ldrh	r3, [r7, #6]
  40306a:	683a      	ldr	r2, [r7, #0]
  40306c:	491a      	ldr	r1, [pc, #104]	; (4030d8 <_get_cycles_for_ms_internal+0xd8>)
  40306e:	fba1 1202 	umull	r1, r2, r1, r2
  403072:	0b52      	lsrs	r2, r2, #13
  403074:	fb02 f203 	mul.w	r2, r2, r3
  403078:	4613      	mov	r3, r2
  40307a:	009b      	lsls	r3, r3, #2
  40307c:	4413      	add	r3, r2
  40307e:	005b      	lsls	r3, r3, #1
  403080:	e020      	b.n	4030c4 <_get_cycles_for_ms_internal+0xc4>
	case 6:
		return (ms * (freq / 1000));
  403082:	88fb      	ldrh	r3, [r7, #6]
  403084:	683a      	ldr	r2, [r7, #0]
  403086:	4915      	ldr	r1, [pc, #84]	; (4030dc <_get_cycles_for_ms_internal+0xdc>)
  403088:	fba1 1202 	umull	r1, r2, r1, r2
  40308c:	0992      	lsrs	r2, r2, #6
  40308e:	fb02 f303 	mul.w	r3, r2, r3
  403092:	e017      	b.n	4030c4 <_get_cycles_for_ms_internal+0xc4>
	case 5:
		return (ms * (freq / 100) + 9) / 10;
  403094:	88fb      	ldrh	r3, [r7, #6]
  403096:	683a      	ldr	r2, [r7, #0]
  403098:	4911      	ldr	r1, [pc, #68]	; (4030e0 <_get_cycles_for_ms_internal+0xe0>)
  40309a:	fba1 1202 	umull	r1, r2, r1, r2
  40309e:	0952      	lsrs	r2, r2, #5
  4030a0:	fb02 f303 	mul.w	r3, r2, r3
  4030a4:	3309      	adds	r3, #9
  4030a6:	4a0f      	ldr	r2, [pc, #60]	; (4030e4 <_get_cycles_for_ms_internal+0xe4>)
  4030a8:	fba2 2303 	umull	r2, r3, r2, r3
  4030ac:	08db      	lsrs	r3, r3, #3
  4030ae:	e009      	b.n	4030c4 <_get_cycles_for_ms_internal+0xc4>
	default:
		return (ms * (freq / 1) + 999) / 1000;
  4030b0:	88fb      	ldrh	r3, [r7, #6]
  4030b2:	683a      	ldr	r2, [r7, #0]
  4030b4:	fb02 f303 	mul.w	r3, r2, r3
  4030b8:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  4030bc:	4a07      	ldr	r2, [pc, #28]	; (4030dc <_get_cycles_for_ms_internal+0xdc>)
  4030be:	fba2 2303 	umull	r2, r3, r2, r3
  4030c2:	099b      	lsrs	r3, r3, #6
	}
}
  4030c4:	4618      	mov	r0, r3
  4030c6:	370c      	adds	r7, #12
  4030c8:	46bd      	mov	sp, r7
  4030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ce:	4770      	bx	lr
  4030d0:	431bde83 	.word	0x431bde83
  4030d4:	0a7c5ac5 	.word	0x0a7c5ac5
  4030d8:	d1b71759 	.word	0xd1b71759
  4030dc:	10624dd3 	.word	0x10624dd3
  4030e0:	51eb851f 	.word	0x51eb851f
  4030e4:	cccccccd 	.word	0xcccccccd

004030e8 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
  4030e8:	b580      	push	{r7, lr}
  4030ea:	b082      	sub	sp, #8
  4030ec:	af00      	add	r7, sp, #0
  4030ee:	4603      	mov	r3, r0
  4030f0:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  4030f2:	88fb      	ldrh	r3, [r7, #6]
  4030f4:	2209      	movs	r2, #9
  4030f6:	4904      	ldr	r1, [pc, #16]	; (403108 <_get_cycles_for_ms+0x20>)
  4030f8:	4618      	mov	r0, r3
  4030fa:	4b04      	ldr	r3, [pc, #16]	; (40310c <_get_cycles_for_ms+0x24>)
  4030fc:	4798      	blx	r3
  4030fe:	4603      	mov	r3, r0
}
  403100:	4618      	mov	r0, r3
  403102:	3708      	adds	r7, #8
  403104:	46bd      	mov	sp, r7
  403106:	bd80      	pop	{r7, pc}
  403108:	11e1a300 	.word	0x11e1a300
  40310c:	00403001 	.word	0x00403001

00403110 <_delay_cycles>:
 * \note In theory, a single loop runs take 2 cycles or more. But we find it
 * really only needs 1 cycle through debugging.
 *
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
  403110:	b480      	push	{r7}
  403112:	b083      	sub	sp, #12
  403114:	af00      	add	r7, sp, #0
  403116:	6078      	str	r0, [r7, #4]
  403118:	6039      	str	r1, [r7, #0]

0040311a <__delay>:
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  40311a:	3901      	subs	r1, #1
  40311c:	d8fd      	bhi.n	40311a <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
  40311e:	bf00      	nop
  403120:	370c      	adds	r7, #12
  403122:	46bd      	mov	sp, r7
  403124:	f85d 7b04 	ldr.w	r7, [sp], #4
  403128:	4770      	bx	lr

0040312a <hri_efc_write_EEFC_FMR_FWS_bf>:
	tmp = (tmp & EEFC_FMR_FWS(mask)) >> EEFC_FMR_FWS_Pos;
	return tmp;
}

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
  40312a:	b480      	push	{r7}
  40312c:	b085      	sub	sp, #20
  40312e:	af00      	add	r7, sp, #0
  403130:	6078      	str	r0, [r7, #4]
  403132:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  403134:	687b      	ldr	r3, [r7, #4]
  403136:	681b      	ldr	r3, [r3, #0]
  403138:	60fb      	str	r3, [r7, #12]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40313a:	68fb      	ldr	r3, [r7, #12]
  40313c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  403140:	60fb      	str	r3, [r7, #12]
	tmp |= EEFC_FMR_FWS(data);
  403142:	683b      	ldr	r3, [r7, #0]
  403144:	021b      	lsls	r3, r3, #8
  403146:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  40314a:	68fa      	ldr	r2, [r7, #12]
  40314c:	4313      	orrs	r3, r2
  40314e:	60fb      	str	r3, [r7, #12]
	((Efc *)hw)->EEFC_FMR = tmp;
  403150:	687b      	ldr	r3, [r7, #4]
  403152:	68fa      	ldr	r2, [r7, #12]
  403154:	601a      	str	r2, [r3, #0]
	EFC_CRITICAL_SECTION_LEAVE();
}
  403156:	bf00      	nop
  403158:	3714      	adds	r7, #20
  40315a:	46bd      	mov	sp, r7
  40315c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403160:	4770      	bx	lr

00403162 <hri_pmc_set_PCSR0_reg>:
{
  403162:	b480      	push	{r7}
  403164:	b083      	sub	sp, #12
  403166:	af00      	add	r7, sp, #0
  403168:	6078      	str	r0, [r7, #4]
  40316a:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  40316c:	687b      	ldr	r3, [r7, #4]
  40316e:	683a      	ldr	r2, [r7, #0]
  403170:	611a      	str	r2, [r3, #16]
}
  403172:	bf00      	nop
  403174:	370c      	adds	r7, #12
  403176:	46bd      	mov	sp, r7
  403178:	f85d 7b04 	ldr.w	r7, [sp], #4
  40317c:	4770      	bx	lr

0040317e <hri_pmc_get_PCSR0_reg>:
{
  40317e:	b480      	push	{r7}
  403180:	b085      	sub	sp, #20
  403182:	af00      	add	r7, sp, #0
  403184:	6078      	str	r0, [r7, #4]
  403186:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  403188:	687b      	ldr	r3, [r7, #4]
  40318a:	699b      	ldr	r3, [r3, #24]
  40318c:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  40318e:	68fa      	ldr	r2, [r7, #12]
  403190:	683b      	ldr	r3, [r7, #0]
  403192:	4013      	ands	r3, r2
  403194:	60fb      	str	r3, [r7, #12]
	return tmp;
  403196:	68fb      	ldr	r3, [r7, #12]
}
  403198:	4618      	mov	r0, r3
  40319a:	3714      	adds	r7, #20
  40319c:	46bd      	mov	sp, r7
  40319e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031a2:	4770      	bx	lr

004031a4 <hri_pmc_set_PCSR1_reg>:
{
  4031a4:	b480      	push	{r7}
  4031a6:	b083      	sub	sp, #12
  4031a8:	af00      	add	r7, sp, #0
  4031aa:	6078      	str	r0, [r7, #4]
  4031ac:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  4031ae:	687b      	ldr	r3, [r7, #4]
  4031b0:	683a      	ldr	r2, [r7, #0]
  4031b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  4031b6:	bf00      	nop
  4031b8:	370c      	adds	r7, #12
  4031ba:	46bd      	mov	sp, r7
  4031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031c0:	4770      	bx	lr

004031c2 <hri_pmc_get_PCSR1_reg>:
{
  4031c2:	b480      	push	{r7}
  4031c4:	b085      	sub	sp, #20
  4031c6:	af00      	add	r7, sp, #0
  4031c8:	6078      	str	r0, [r7, #4]
  4031ca:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4031cc:	687b      	ldr	r3, [r7, #4]
  4031ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4031d2:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4031d4:	68fa      	ldr	r2, [r7, #12]
  4031d6:	683b      	ldr	r3, [r7, #0]
  4031d8:	4013      	ands	r3, r2
  4031da:	60fb      	str	r3, [r7, #12]
	return tmp;
  4031dc:	68fb      	ldr	r3, [r7, #12]
}
  4031de:	4618      	mov	r0, r3
  4031e0:	3714      	adds	r7, #20
  4031e2:	46bd      	mov	sp, r7
  4031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031e8:	4770      	bx	lr

004031ea <hri_pmc_write_PCR_reg>:
{
  4031ea:	b480      	push	{r7}
  4031ec:	b083      	sub	sp, #12
  4031ee:	af00      	add	r7, sp, #0
  4031f0:	6078      	str	r0, [r7, #4]
  4031f2:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCR = data;
  4031f4:	687b      	ldr	r3, [r7, #4]
  4031f6:	683a      	ldr	r2, [r7, #0]
  4031f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
  4031fc:	bf00      	nop
  4031fe:	370c      	adds	r7, #12
  403200:	46bd      	mov	sp, r7
  403202:	f85d 7b04 	ldr.w	r7, [sp], #4
  403206:	4770      	bx	lr

00403208 <hri_pmc_read_PCR_reg>:
{
  403208:	b480      	push	{r7}
  40320a:	b083      	sub	sp, #12
  40320c:	af00      	add	r7, sp, #0
  40320e:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  403210:	687b      	ldr	r3, [r7, #4]
  403212:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  403216:	4618      	mov	r0, r3
  403218:	370c      	adds	r7, #12
  40321a:	46bd      	mov	sp, r7
  40321c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403220:	4770      	bx	lr
	...

00403224 <_pmc_enable_periph_clock>:
{
  403224:	b580      	push	{r7, lr}
  403226:	b084      	sub	sp, #16
  403228:	af00      	add	r7, sp, #0
  40322a:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  40322c:	687b      	ldr	r3, [r7, #4]
  40322e:	2b1f      	cmp	r3, #31
  403230:	d813      	bhi.n	40325a <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  403232:	2201      	movs	r2, #1
  403234:	687b      	ldr	r3, [r7, #4]
  403236:	fa02 f303 	lsl.w	r3, r2, r3
  40323a:	4619      	mov	r1, r3
  40323c:	481f      	ldr	r0, [pc, #124]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  40323e:	4b20      	ldr	r3, [pc, #128]	; (4032c0 <_pmc_enable_periph_clock+0x9c>)
  403240:	4798      	blx	r3
  403242:	4603      	mov	r3, r0
  403244:	2b00      	cmp	r3, #0
  403246:	d135      	bne.n	4032b4 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  403248:	2201      	movs	r2, #1
  40324a:	687b      	ldr	r3, [r7, #4]
  40324c:	fa02 f303 	lsl.w	r3, r2, r3
  403250:	4619      	mov	r1, r3
  403252:	481a      	ldr	r0, [pc, #104]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  403254:	4b1b      	ldr	r3, [pc, #108]	; (4032c4 <_pmc_enable_periph_clock+0xa0>)
  403256:	4798      	blx	r3
}
  403258:	e02c      	b.n	4032b4 <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  40325a:	687b      	ldr	r3, [r7, #4]
  40325c:	2b3f      	cmp	r3, #63	; 0x3f
  40325e:	d816      	bhi.n	40328e <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  403260:	687b      	ldr	r3, [r7, #4]
  403262:	3b20      	subs	r3, #32
  403264:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  403266:	2201      	movs	r2, #1
  403268:	687b      	ldr	r3, [r7, #4]
  40326a:	fa02 f303 	lsl.w	r3, r2, r3
  40326e:	4619      	mov	r1, r3
  403270:	4812      	ldr	r0, [pc, #72]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  403272:	4b15      	ldr	r3, [pc, #84]	; (4032c8 <_pmc_enable_periph_clock+0xa4>)
  403274:	4798      	blx	r3
  403276:	4603      	mov	r3, r0
  403278:	2b00      	cmp	r3, #0
  40327a:	d11b      	bne.n	4032b4 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  40327c:	2201      	movs	r2, #1
  40327e:	687b      	ldr	r3, [r7, #4]
  403280:	fa02 f303 	lsl.w	r3, r2, r3
  403284:	4619      	mov	r1, r3
  403286:	480d      	ldr	r0, [pc, #52]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  403288:	4b10      	ldr	r3, [pc, #64]	; (4032cc <_pmc_enable_periph_clock+0xa8>)
  40328a:	4798      	blx	r3
}
  40328c:	e012      	b.n	4032b4 <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  40328e:	687b      	ldr	r3, [r7, #4]
  403290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403294:	4619      	mov	r1, r3
  403296:	4809      	ldr	r0, [pc, #36]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  403298:	4b0d      	ldr	r3, [pc, #52]	; (4032d0 <_pmc_enable_periph_clock+0xac>)
  40329a:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  40329c:	4807      	ldr	r0, [pc, #28]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  40329e:	4b0d      	ldr	r3, [pc, #52]	; (4032d4 <_pmc_enable_periph_clock+0xb0>)
  4032a0:	4798      	blx	r3
  4032a2:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  4032a4:	68fb      	ldr	r3, [r7, #12]
  4032a6:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  4032aa:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  4032ac:	68f9      	ldr	r1, [r7, #12]
  4032ae:	4803      	ldr	r0, [pc, #12]	; (4032bc <_pmc_enable_periph_clock+0x98>)
  4032b0:	4b07      	ldr	r3, [pc, #28]	; (4032d0 <_pmc_enable_periph_clock+0xac>)
  4032b2:	4798      	blx	r3
}
  4032b4:	bf00      	nop
  4032b6:	3710      	adds	r7, #16
  4032b8:	46bd      	mov	sp, r7
  4032ba:	bd80      	pop	{r7, pc}
  4032bc:	400e0600 	.word	0x400e0600
  4032c0:	0040317f 	.word	0x0040317f
  4032c4:	00403163 	.word	0x00403163
  4032c8:	004031c3 	.word	0x004031c3
  4032cc:	004031a5 	.word	0x004031a5
  4032d0:	004031eb 	.word	0x004031eb
  4032d4:	00403209 	.word	0x00403209

004032d8 <_fpu_enable>:

/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
  4032d8:	b580      	push	{r7, lr}
  4032da:	b082      	sub	sp, #8
  4032dc:	af00      	add	r7, sp, #0
	CRITICAL_SECTION_ENTER()
  4032de:	1d3b      	adds	r3, r7, #4
  4032e0:	4618      	mov	r0, r3
  4032e2:	4b0b      	ldr	r3, [pc, #44]	; (403310 <_fpu_enable+0x38>)
  4032e4:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4032e6:	4a0b      	ldr	r2, [pc, #44]	; (403314 <_fpu_enable+0x3c>)
  4032e8:	4b0a      	ldr	r3, [pc, #40]	; (403314 <_fpu_enable+0x3c>)
  4032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  4032ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4032f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4032f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4032fa:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  4032fe:	1d3b      	adds	r3, r7, #4
  403300:	4618      	mov	r0, r3
  403302:	4b05      	ldr	r3, [pc, #20]	; (403318 <_fpu_enable+0x40>)
  403304:	4798      	blx	r3
}
  403306:	bf00      	nop
  403308:	3708      	adds	r7, #8
  40330a:	46bd      	mov	sp, r7
  40330c:	bd80      	pop	{r7, pc}
  40330e:	bf00      	nop
  403310:	00401cfd 	.word	0x00401cfd
  403314:	e000ed00 	.word	0xe000ed00
  403318:	00401d23 	.word	0x00401d23

0040331c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  40331c:	b580      	push	{r7, lr}
  40331e:	af00      	add	r7, sp, #0
	_fpu_enable();
  403320:	4b07      	ldr	r3, [pc, #28]	; (403340 <_init_chip+0x24>)
  403322:	4798      	blx	r3
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);
  403324:	2105      	movs	r1, #5
  403326:	4807      	ldr	r0, [pc, #28]	; (403344 <_init_chip+0x28>)
  403328:	4b07      	ldr	r3, [pc, #28]	; (403348 <_init_chip+0x2c>)
  40332a:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_XDMAC);
  40332c:	203a      	movs	r0, #58	; 0x3a
  40332e:	4b07      	ldr	r3, [pc, #28]	; (40334c <_init_chip+0x30>)
  403330:	4798      	blx	r3
	_dma_init();
  403332:	4b07      	ldr	r3, [pc, #28]	; (403350 <_init_chip+0x34>)
  403334:	4798      	blx	r3

	_pmc_init();
  403336:	4b07      	ldr	r3, [pc, #28]	; (403354 <_init_chip+0x38>)
  403338:	4798      	blx	r3
}
  40333a:	bf00      	nop
  40333c:	bd80      	pop	{r7, pc}
  40333e:	bf00      	nop
  403340:	004032d9 	.word	0x004032d9
  403344:	400e0c00 	.word	0x400e0c00
  403348:	0040312b 	.word	0x0040312b
  40334c:	00403225 	.word	0x00403225
  403350:	004070a5 	.word	0x004070a5
  403354:	00403f35 	.word	0x00403f35

00403358 <hri_dacc_write_CHDR_reg>:
{
	((Dacc *)hw)->DACC_CHDR = mask;
}

static inline void hri_dacc_write_CHDR_reg(const void *const hw, hri_dacc_chsr_reg_t data)
{
  403358:	b480      	push	{r7}
  40335a:	b083      	sub	sp, #12
  40335c:	af00      	add	r7, sp, #0
  40335e:	6078      	str	r0, [r7, #4]
  403360:	6039      	str	r1, [r7, #0]
	((Dacc *)hw)->DACC_CHDR = data;
  403362:	687b      	ldr	r3, [r7, #4]
  403364:	683a      	ldr	r2, [r7, #0]
  403366:	615a      	str	r2, [r3, #20]
}
  403368:	bf00      	nop
  40336a:	370c      	adds	r7, #12
  40336c:	46bd      	mov	sp, r7
  40336e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403372:	4770      	bx	lr

00403374 <hri_dacc_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_MR_reg(const void *const hw, hri_dacc_mr_reg_t data)
{
  403374:	b480      	push	{r7}
  403376:	b083      	sub	sp, #12
  403378:	af00      	add	r7, sp, #0
  40337a:	6078      	str	r0, [r7, #4]
  40337c:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_MR = data;
  40337e:	687b      	ldr	r3, [r7, #4]
  403380:	683a      	ldr	r2, [r7, #0]
  403382:	605a      	str	r2, [r3, #4]
	DACC_CRITICAL_SECTION_LEAVE();
}
  403384:	bf00      	nop
  403386:	370c      	adds	r7, #12
  403388:	46bd      	mov	sp, r7
  40338a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40338e:	4770      	bx	lr

00403390 <hri_dacc_write_TRIGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_TRIGR_reg(const void *const hw, hri_dacc_trigr_reg_t data)
{
  403390:	b480      	push	{r7}
  403392:	b083      	sub	sp, #12
  403394:	af00      	add	r7, sp, #0
  403396:	6078      	str	r0, [r7, #4]
  403398:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_TRIGR = data;
  40339a:	687b      	ldr	r3, [r7, #4]
  40339c:	683a      	ldr	r2, [r7, #0]
  40339e:	609a      	str	r2, [r3, #8]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033a0:	bf00      	nop
  4033a2:	370c      	adds	r7, #12
  4033a4:	46bd      	mov	sp, r7
  4033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033aa:	4770      	bx	lr

004033ac <hri_dacc_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_WPMR_reg(const void *const hw, hri_dacc_wpmr_reg_t data)
{
  4033ac:	b480      	push	{r7}
  4033ae:	b083      	sub	sp, #12
  4033b0:	af00      	add	r7, sp, #0
  4033b2:	6078      	str	r0, [r7, #4]
  4033b4:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_WPMR = data;
  4033b6:	687b      	ldr	r3, [r7, #4]
  4033b8:	683a      	ldr	r2, [r7, #0]
  4033ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033be:	bf00      	nop
  4033c0:	370c      	adds	r7, #12
  4033c2:	46bd      	mov	sp, r7
  4033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033c8:	4770      	bx	lr

004033ca <hri_dacc_write_CR_reg>:
{
	return ((Dacc *)hw)->DACC_WPMR;
}

static inline void hri_dacc_write_CR_reg(const void *const hw, hri_dacc_cr_reg_t data)
{
  4033ca:	b480      	push	{r7}
  4033cc:	b083      	sub	sp, #12
  4033ce:	af00      	add	r7, sp, #0
  4033d0:	6078      	str	r0, [r7, #4]
  4033d2:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_CR = data;
  4033d4:	687b      	ldr	r3, [r7, #4]
  4033d6:	683a      	ldr	r2, [r7, #0]
  4033d8:	601a      	str	r2, [r3, #0]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033da:	bf00      	nop
  4033dc:	370c      	adds	r7, #12
  4033de:	46bd      	mov	sp, r7
  4033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033e4:	4770      	bx	lr
	...

004033e8 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
  4033e8:	b580      	push	{r7, lr}
  4033ea:	b082      	sub	sp, #8
  4033ec:	af00      	add	r7, sp, #0
  4033ee:	6078      	str	r0, [r7, #4]
  4033f0:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  4033f2:	687b      	ldr	r3, [r7, #4]
  4033f4:	2b00      	cmp	r3, #0
  4033f6:	bf14      	ite	ne
  4033f8:	2301      	movne	r3, #1
  4033fa:	2300      	moveq	r3, #0
  4033fc:	b2db      	uxtb	r3, r3
  4033fe:	2251      	movs	r2, #81	; 0x51
  403400:	4908      	ldr	r1, [pc, #32]	; (403424 <_dac_sync_init+0x3c>)
  403402:	4618      	mov	r0, r3
  403404:	4b08      	ldr	r3, [pc, #32]	; (403428 <_dac_sync_init+0x40>)
  403406:	4798      	blx	r3

	device->hw = hw;
  403408:	687b      	ldr	r3, [r7, #4]
  40340a:	683a      	ldr	r2, [r7, #0]
  40340c:	601a      	str	r2, [r3, #0]

	return _dac_init(device->hw);
  40340e:	687b      	ldr	r3, [r7, #4]
  403410:	681b      	ldr	r3, [r3, #0]
  403412:	4618      	mov	r0, r3
  403414:	4b05      	ldr	r3, [pc, #20]	; (40342c <_dac_sync_init+0x44>)
  403416:	4798      	blx	r3
  403418:	4603      	mov	r3, r0
}
  40341a:	4618      	mov	r0, r3
  40341c:	3708      	adds	r7, #8
  40341e:	46bd      	mov	sp, r7
  403420:	bd80      	pop	{r7, pc}
  403422:	bf00      	nop
  403424:	004075d0 	.word	0x004075d0
  403428:	00402d25 	.word	0x00402d25
  40342c:	00403431 	.word	0x00403431

00403430 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
  403430:	b580      	push	{r7, lr}
  403432:	b082      	sub	sp, #8
  403434:	af00      	add	r7, sp, #0
  403436:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403438:	687b      	ldr	r3, [r7, #4]
  40343a:	2b00      	cmp	r3, #0
  40343c:	bf14      	ite	ne
  40343e:	2301      	movne	r3, #1
  403440:	2300      	moveq	r3, #0
  403442:	b2db      	uxtb	r3, r3
  403444:	22f5      	movs	r2, #245	; 0xf5
  403446:	4910      	ldr	r1, [pc, #64]	; (403488 <_dac_init+0x58>)
  403448:	4618      	mov	r0, r3
  40344a:	4b10      	ldr	r3, [pc, #64]	; (40348c <_dac_init+0x5c>)
  40344c:	4798      	blx	r3

	hri_dacc_write_CR_reg(hw, DACC_CR_SWRST);
  40344e:	2101      	movs	r1, #1
  403450:	6878      	ldr	r0, [r7, #4]
  403452:	4b0f      	ldr	r3, [pc, #60]	; (403490 <_dac_init+0x60>)
  403454:	4798      	blx	r3
	hri_dacc_write_CHDR_reg(hw, DACC_CHDR_Msk);
  403456:	2103      	movs	r1, #3
  403458:	6878      	ldr	r0, [r7, #4]
  40345a:	4b0e      	ldr	r3, [pc, #56]	; (403494 <_dac_init+0x64>)
  40345c:	4798      	blx	r3
	_dac_write_protection_disable(hw);
  40345e:	6878      	ldr	r0, [r7, #4]
  403460:	4b0d      	ldr	r3, [pc, #52]	; (403498 <_dac_init+0x68>)
  403462:	4798      	blx	r3
	hri_dacc_write_MR_reg(hw, _dac.mr);
  403464:	4b0d      	ldr	r3, [pc, #52]	; (40349c <_dac_init+0x6c>)
  403466:	681b      	ldr	r3, [r3, #0]
  403468:	4619      	mov	r1, r3
  40346a:	6878      	ldr	r0, [r7, #4]
  40346c:	4b0c      	ldr	r3, [pc, #48]	; (4034a0 <_dac_init+0x70>)
  40346e:	4798      	blx	r3
	hri_dacc_write_TRIGR_reg(hw, _dac.trigr);
  403470:	4b0a      	ldr	r3, [pc, #40]	; (40349c <_dac_init+0x6c>)
  403472:	685b      	ldr	r3, [r3, #4]
  403474:	4619      	mov	r1, r3
  403476:	6878      	ldr	r0, [r7, #4]
  403478:	4b0a      	ldr	r3, [pc, #40]	; (4034a4 <_dac_init+0x74>)
  40347a:	4798      	blx	r3

	return ERR_NONE;
  40347c:	2300      	movs	r3, #0
}
  40347e:	4618      	mov	r0, r3
  403480:	3708      	adds	r7, #8
  403482:	46bd      	mov	sp, r7
  403484:	bd80      	pop	{r7, pc}
  403486:	bf00      	nop
  403488:	004075d0 	.word	0x004075d0
  40348c:	00402d25 	.word	0x00402d25
  403490:	004033cb 	.word	0x004033cb
  403494:	00403359 	.word	0x00403359
  403498:	004034a9 	.word	0x004034a9
  40349c:	20400000 	.word	0x20400000
  4034a0:	00403375 	.word	0x00403375
  4034a4:	00403391 	.word	0x00403391

004034a8 <_dac_write_protection_disable>:
 * \internal Disable DAC write protection
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _dac_write_protection_disable(void *const hw)
{
  4034a8:	b580      	push	{r7, lr}
  4034aa:	b082      	sub	sp, #8
  4034ac:	af00      	add	r7, sp, #0
  4034ae:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4034b0:	687b      	ldr	r3, [r7, #4]
  4034b2:	2b00      	cmp	r3, #0
  4034b4:	bf14      	ite	ne
  4034b6:	2301      	movne	r3, #1
  4034b8:	2300      	moveq	r3, #0
  4034ba:	b2db      	uxtb	r3, r3
  4034bc:	f44f 72a7 	mov.w	r2, #334	; 0x14e
  4034c0:	4905      	ldr	r1, [pc, #20]	; (4034d8 <_dac_write_protection_disable+0x30>)
  4034c2:	4618      	mov	r0, r3
  4034c4:	4b05      	ldr	r3, [pc, #20]	; (4034dc <_dac_write_protection_disable+0x34>)
  4034c6:	4798      	blx	r3
	hri_dacc_write_WPMR_reg(hw, (hri_dacc_wpmr_reg_t)DACC_WPMR_WPKEY_PASSWD);
  4034c8:	4905      	ldr	r1, [pc, #20]	; (4034e0 <_dac_write_protection_disable+0x38>)
  4034ca:	6878      	ldr	r0, [r7, #4]
  4034cc:	4b05      	ldr	r3, [pc, #20]	; (4034e4 <_dac_write_protection_disable+0x3c>)
  4034ce:	4798      	blx	r3
}
  4034d0:	bf00      	nop
  4034d2:	3708      	adds	r7, #8
  4034d4:	46bd      	mov	sp, r7
  4034d6:	bd80      	pop	{r7, pc}
  4034d8:	004075d0 	.word	0x004075d0
  4034dc:	00402d25 	.word	0x00402d25
  4034e0:	44414300 	.word	0x44414300
  4034e4:	004033ad 	.word	0x004033ad

004034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4034e8:	b480      	push	{r7}
  4034ea:	b083      	sub	sp, #12
  4034ec:	af00      	add	r7, sp, #0
  4034ee:	4603      	mov	r3, r0
  4034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4034f6:	2b00      	cmp	r3, #0
  4034f8:	db0b      	blt.n	403512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4034fa:	4909      	ldr	r1, [pc, #36]	; (403520 <__NVIC_EnableIRQ+0x38>)
  4034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403500:	095b      	lsrs	r3, r3, #5
  403502:	79fa      	ldrb	r2, [r7, #7]
  403504:	f002 021f 	and.w	r2, r2, #31
  403508:	2001      	movs	r0, #1
  40350a:	fa00 f202 	lsl.w	r2, r0, r2
  40350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  403512:	bf00      	nop
  403514:	370c      	adds	r7, #12
  403516:	46bd      	mov	sp, r7
  403518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40351c:	4770      	bx	lr
  40351e:	bf00      	nop
  403520:	e000e100 	.word	0xe000e100

00403524 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  403524:	b480      	push	{r7}
  403526:	b083      	sub	sp, #12
  403528:	af00      	add	r7, sp, #0
  40352a:	4603      	mov	r3, r0
  40352c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403532:	2b00      	cmp	r3, #0
  403534:	db10      	blt.n	403558 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403536:	490b      	ldr	r1, [pc, #44]	; (403564 <__NVIC_DisableIRQ+0x40>)
  403538:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40353c:	095b      	lsrs	r3, r3, #5
  40353e:	79fa      	ldrb	r2, [r7, #7]
  403540:	f002 021f 	and.w	r2, r2, #31
  403544:	2001      	movs	r0, #1
  403546:	fa00 f202 	lsl.w	r2, r0, r2
  40354a:	3320      	adds	r3, #32
  40354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  403550:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403554:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  403558:	bf00      	nop
  40355a:	370c      	adds	r7, #12
  40355c:	46bd      	mov	sp, r7
  40355e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403562:	4770      	bx	lr
  403564:	e000e100 	.word	0xe000e100

00403568 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  403568:	b480      	push	{r7}
  40356a:	b083      	sub	sp, #12
  40356c:	af00      	add	r7, sp, #0
  40356e:	4603      	mov	r3, r0
  403570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403572:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403576:	2b00      	cmp	r3, #0
  403578:	db0c      	blt.n	403594 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  40357a:	4909      	ldr	r1, [pc, #36]	; (4035a0 <__NVIC_ClearPendingIRQ+0x38>)
  40357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403580:	095b      	lsrs	r3, r3, #5
  403582:	79fa      	ldrb	r2, [r7, #7]
  403584:	f002 021f 	and.w	r2, r2, #31
  403588:	2001      	movs	r0, #1
  40358a:	fa00 f202 	lsl.w	r2, r0, r2
  40358e:	3360      	adds	r3, #96	; 0x60
  403590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  403594:	bf00      	nop
  403596:	370c      	adds	r7, #12
  403598:	46bd      	mov	sp, r7
  40359a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40359e:	4770      	bx	lr
  4035a0:	e000e100 	.word	0xe000e100

004035a4 <hri_pio_read_ISR_reg>:
{
  4035a4:	b480      	push	{r7}
  4035a6:	b083      	sub	sp, #12
  4035a8:	af00      	add	r7, sp, #0
  4035aa:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_ISR;
  4035ac:	687b      	ldr	r3, [r7, #4]
  4035ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4035b0:	4618      	mov	r0, r3
  4035b2:	370c      	adds	r7, #12
  4035b4:	46bd      	mov	sp, r7
  4035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035ba:	4770      	bx	lr

004035bc <hri_pio_set_IMR_reg>:
{
  4035bc:	b480      	push	{r7}
  4035be:	b083      	sub	sp, #12
  4035c0:	af00      	add	r7, sp, #0
  4035c2:	6078      	str	r0, [r7, #4]
  4035c4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IER = mask;
  4035c6:	687b      	ldr	r3, [r7, #4]
  4035c8:	683a      	ldr	r2, [r7, #0]
  4035ca:	641a      	str	r2, [r3, #64]	; 0x40
}
  4035cc:	bf00      	nop
  4035ce:	370c      	adds	r7, #12
  4035d0:	46bd      	mov	sp, r7
  4035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035d6:	4770      	bx	lr

004035d8 <hri_pio_read_IMR_reg>:
{
  4035d8:	b480      	push	{r7}
  4035da:	b083      	sub	sp, #12
  4035dc:	af00      	add	r7, sp, #0
  4035de:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_IMR;
  4035e0:	687b      	ldr	r3, [r7, #4]
  4035e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4035e4:	4618      	mov	r0, r3
  4035e6:	370c      	adds	r7, #12
  4035e8:	46bd      	mov	sp, r7
  4035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035ee:	4770      	bx	lr

004035f0 <hri_pio_clear_IMR_reg>:
{
  4035f0:	b480      	push	{r7}
  4035f2:	b083      	sub	sp, #12
  4035f4:	af00      	add	r7, sp, #0
  4035f6:	6078      	str	r0, [r7, #4]
  4035f8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IDR = mask;
  4035fa:	687b      	ldr	r3, [r7, #4]
  4035fc:	683a      	ldr	r2, [r7, #0]
  4035fe:	645a      	str	r2, [r3, #68]	; 0x44
}
  403600:	bf00      	nop
  403602:	370c      	adds	r7, #12
  403604:	46bd      	mov	sp, r7
  403606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40360a:	4770      	bx	lr

0040360c <hri_pio_set_AIMMR_reg>:
{
  40360c:	b480      	push	{r7}
  40360e:	b083      	sub	sp, #12
  403610:	af00      	add	r7, sp, #0
  403612:	6078      	str	r0, [r7, #4]
  403614:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_AIMER = mask;
  403616:	687b      	ldr	r3, [r7, #4]
  403618:	683a      	ldr	r2, [r7, #0]
  40361a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
  40361e:	bf00      	nop
  403620:	370c      	adds	r7, #12
  403622:	46bd      	mov	sp, r7
  403624:	f85d 7b04 	ldr.w	r7, [sp], #4
  403628:	4770      	bx	lr

0040362a <hri_pio_set_ELSR_reg>:
{
  40362a:	b480      	push	{r7}
  40362c:	b083      	sub	sp, #12
  40362e:	af00      	add	r7, sp, #0
  403630:	6078      	str	r0, [r7, #4]
  403632:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_LSR = mask;
  403634:	687b      	ldr	r3, [r7, #4]
  403636:	683a      	ldr	r2, [r7, #0]
  403638:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40363c:	bf00      	nop
  40363e:	370c      	adds	r7, #12
  403640:	46bd      	mov	sp, r7
  403642:	f85d 7b04 	ldr.w	r7, [sp], #4
  403646:	4770      	bx	lr

00403648 <hri_pio_clear_ELSR_reg>:
{
  403648:	b480      	push	{r7}
  40364a:	b083      	sub	sp, #12
  40364c:	af00      	add	r7, sp, #0
  40364e:	6078      	str	r0, [r7, #4]
  403650:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ESR = mask;
  403652:	687b      	ldr	r3, [r7, #4]
  403654:	683a      	ldr	r2, [r7, #0]
  403656:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
  40365a:	bf00      	nop
  40365c:	370c      	adds	r7, #12
  40365e:	46bd      	mov	sp, r7
  403660:	f85d 7b04 	ldr.w	r7, [sp], #4
  403664:	4770      	bx	lr

00403666 <hri_pio_set_FRLHSR_reg>:
{
  403666:	b480      	push	{r7}
  403668:	b083      	sub	sp, #12
  40366a:	af00      	add	r7, sp, #0
  40366c:	6078      	str	r0, [r7, #4]
  40366e:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_REHLSR = mask;
  403670:	687b      	ldr	r3, [r7, #4]
  403672:	683a      	ldr	r2, [r7, #0]
  403674:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
  403678:	bf00      	nop
  40367a:	370c      	adds	r7, #12
  40367c:	46bd      	mov	sp, r7
  40367e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403682:	4770      	bx	lr

00403684 <hri_pio_clear_FRLHSR_reg>:
{
  403684:	b480      	push	{r7}
  403686:	b083      	sub	sp, #12
  403688:	af00      	add	r7, sp, #0
  40368a:	6078      	str	r0, [r7, #4]
  40368c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_FELLSR = mask;
  40368e:	687b      	ldr	r3, [r7, #4]
  403690:	683a      	ldr	r2, [r7, #0]
  403692:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
  403696:	bf00      	nop
  403698:	370c      	adds	r7, #12
  40369a:	46bd      	mov	sp, r7
  40369c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036a0:	4770      	bx	lr

004036a2 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  4036a2:	b480      	push	{r7}
  4036a4:	b087      	sub	sp, #28
  4036a6:	af00      	add	r7, sp, #0
  4036a8:	6078      	str	r0, [r7, #4]
  4036aa:	460b      	mov	r3, r1
  4036ac:	70fb      	strb	r3, [r7, #3]
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  4036ae:	2300      	movs	r3, #0
  4036b0:	617b      	str	r3, [r7, #20]
  4036b2:	e01e      	b.n	4036f2 <_ffs+0x50>
		bit = 1;
  4036b4:	2301      	movs	r3, #1
  4036b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4036b8:	2300      	movs	r3, #0
  4036ba:	613b      	str	r3, [r7, #16]
  4036bc:	e013      	b.n	4036e6 <_ffs+0x44>
			if (v[i] & bit) {
  4036be:	697b      	ldr	r3, [r7, #20]
  4036c0:	009b      	lsls	r3, r3, #2
  4036c2:	687a      	ldr	r2, [r7, #4]
  4036c4:	4413      	add	r3, r2
  4036c6:	681a      	ldr	r2, [r3, #0]
  4036c8:	68fb      	ldr	r3, [r7, #12]
  4036ca:	4013      	ands	r3, r2
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	d004      	beq.n	4036da <_ffs+0x38>
				return i * 32 + j;
  4036d0:	697b      	ldr	r3, [r7, #20]
  4036d2:	015a      	lsls	r2, r3, #5
  4036d4:	693b      	ldr	r3, [r7, #16]
  4036d6:	4413      	add	r3, r2
  4036d8:	e011      	b.n	4036fe <_ffs+0x5c>
			}
			bit <<= 1;
  4036da:	68fb      	ldr	r3, [r7, #12]
  4036dc:	005b      	lsls	r3, r3, #1
  4036de:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4036e0:	693b      	ldr	r3, [r7, #16]
  4036e2:	3301      	adds	r3, #1
  4036e4:	613b      	str	r3, [r7, #16]
  4036e6:	693b      	ldr	r3, [r7, #16]
  4036e8:	2b1f      	cmp	r3, #31
  4036ea:	d9e8      	bls.n	4036be <_ffs+0x1c>
	for (i = 0; i < len; i++) {
  4036ec:	697b      	ldr	r3, [r7, #20]
  4036ee:	3301      	adds	r3, #1
  4036f0:	617b      	str	r3, [r7, #20]
  4036f2:	78fa      	ldrb	r2, [r7, #3]
  4036f4:	697b      	ldr	r3, [r7, #20]
  4036f6:	429a      	cmp	r2, r3
  4036f8:	d8dc      	bhi.n	4036b4 <_ffs+0x12>
		}
	}

	return -1;
  4036fa:	f04f 33ff 	mov.w	r3, #4294967295
}
  4036fe:	4618      	mov	r0, r3
  403700:	371c      	adds	r7, #28
  403702:	46bd      	mov	sp, r7
  403704:	f85d 7b04 	ldr.w	r7, [sp], #4
  403708:	4770      	bx	lr
	...

0040370c <_get_hardware_instance>:
 * \param[in] pin The PIO pin
 *
 * \return The instance of PIO hardware
 */
static inline void *_get_hardware_instance(const uint8_t pin)
{
  40370c:	b580      	push	{r7, lr}
  40370e:	b082      	sub	sp, #8
  403710:	af00      	add	r7, sp, #0
  403712:	4603      	mov	r3, r0
  403714:	71fb      	strb	r3, [r7, #7]
	ASSERT(pin < 160);
  403716:	79fb      	ldrb	r3, [r7, #7]
  403718:	2b9f      	cmp	r3, #159	; 0x9f
  40371a:	bf94      	ite	ls
  40371c:	2301      	movls	r3, #1
  40371e:	2300      	movhi	r3, #0
  403720:	b2db      	uxtb	r3, r3
  403722:	22c3      	movs	r2, #195	; 0xc3
  403724:	4907      	ldr	r1, [pc, #28]	; (403744 <_get_hardware_instance+0x38>)
  403726:	4618      	mov	r0, r3
  403728:	4b07      	ldr	r3, [pc, #28]	; (403748 <_get_hardware_instance+0x3c>)
  40372a:	4798      	blx	r3

	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  40372c:	79fb      	ldrb	r3, [r7, #7]
  40372e:	095b      	lsrs	r3, r3, #5
  403730:	b2db      	uxtb	r3, r3
  403732:	025b      	lsls	r3, r3, #9
  403734:	461a      	mov	r2, r3
  403736:	4b05      	ldr	r3, [pc, #20]	; (40374c <_get_hardware_instance+0x40>)
  403738:	4413      	add	r3, r2
}
  40373a:	4618      	mov	r0, r3
  40373c:	3708      	adds	r7, #8
  40373e:	46bd      	mov	sp, r7
  403740:	bd80      	pop	{r7, pc}
  403742:	bf00      	nop
  403744:	00407628 	.word	0x00407628
  403748:	00402d25 	.word	0x00402d25
  40374c:	400e0e00 	.word	0x400e0e00

00403750 <_pio_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of hardware instance
 */
static uint8_t _pio_get_hardware_index(const void *const hw)
{
  403750:	b580      	push	{r7, lr}
  403752:	b082      	sub	sp, #8
  403754:	af00      	add	r7, sp, #0
  403756:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403758:	687b      	ldr	r3, [r7, #4]
  40375a:	2b00      	cmp	r3, #0
  40375c:	bf14      	ite	ne
  40375e:	2301      	movne	r3, #1
  403760:	2300      	moveq	r3, #0
  403762:	b2db      	uxtb	r3, r3
  403764:	22d2      	movs	r2, #210	; 0xd2
  403766:	4906      	ldr	r1, [pc, #24]	; (403780 <_pio_get_hardware_index+0x30>)
  403768:	4618      	mov	r0, r3
  40376a:	4b06      	ldr	r3, [pc, #24]	; (403784 <_pio_get_hardware_index+0x34>)
  40376c:	4798      	blx	r3

	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  40376e:	687a      	ldr	r2, [r7, #4]
  403770:	4b05      	ldr	r3, [pc, #20]	; (403788 <_pio_get_hardware_index+0x38>)
  403772:	4413      	add	r3, r2
  403774:	0a5b      	lsrs	r3, r3, #9
  403776:	b2db      	uxtb	r3, r3
}
  403778:	4618      	mov	r0, r3
  40377a:	3708      	adds	r7, #8
  40377c:	46bd      	mov	sp, r7
  40377e:	bd80      	pop	{r7, pc}
  403780:	00407628 	.word	0x00407628
  403784:	00402d25 	.word	0x00402d25
  403788:	bff1f200 	.word	0xbff1f200

0040378c <_pio_get_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given PIO hardware instance
 */
static int8_t _pio_get_index(const void *const hw)
{
  40378c:	b580      	push	{r7, lr}
  40378e:	b084      	sub	sp, #16
  403790:	af00      	add	r7, sp, #0
  403792:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403794:	687b      	ldr	r3, [r7, #4]
  403796:	2b00      	cmp	r3, #0
  403798:	bf14      	ite	ne
  40379a:	2301      	movne	r3, #1
  40379c:	2300      	moveq	r3, #0
  40379e:	b2db      	uxtb	r3, r3
  4037a0:	22e0      	movs	r2, #224	; 0xe0
  4037a2:	4913      	ldr	r1, [pc, #76]	; (4037f0 <_pio_get_index+0x64>)
  4037a4:	4618      	mov	r0, r3
  4037a6:	4b13      	ldr	r3, [pc, #76]	; (4037f4 <_pio_get_index+0x68>)
  4037a8:	4798      	blx	r3

	uint8_t offset = _pio_get_hardware_index(hw);
  4037aa:	6878      	ldr	r0, [r7, #4]
  4037ac:	4b12      	ldr	r3, [pc, #72]	; (4037f8 <_pio_get_index+0x6c>)
  4037ae:	4798      	blx	r3
  4037b0:	4603      	mov	r3, r0
  4037b2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4037b4:	2300      	movs	r3, #0
  4037b6:	73fb      	strb	r3, [r7, #15]
  4037b8:	e010      	b.n	4037dc <_pio_get_index+0x50>
		if (_ext_irq[i].number == offset) {
  4037ba:	7bfa      	ldrb	r2, [r7, #15]
  4037bc:	490f      	ldr	r1, [pc, #60]	; (4037fc <_pio_get_index+0x70>)
  4037be:	4613      	mov	r3, r2
  4037c0:	00db      	lsls	r3, r3, #3
  4037c2:	1a9b      	subs	r3, r3, r2
  4037c4:	009b      	lsls	r3, r3, #2
  4037c6:	440b      	add	r3, r1
  4037c8:	781b      	ldrb	r3, [r3, #0]
  4037ca:	7bba      	ldrb	r2, [r7, #14]
  4037cc:	429a      	cmp	r2, r3
  4037ce:	d102      	bne.n	4037d6 <_pio_get_index+0x4a>
			return i;
  4037d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4037d4:	e007      	b.n	4037e6 <_pio_get_index+0x5a>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4037d6:	7bfb      	ldrb	r3, [r7, #15]
  4037d8:	3301      	adds	r3, #1
  4037da:	73fb      	strb	r3, [r7, #15]
  4037dc:	7bfb      	ldrb	r3, [r7, #15]
  4037de:	2b01      	cmp	r3, #1
  4037e0:	d9eb      	bls.n	4037ba <_pio_get_index+0x2e>
		}
	}

	return ERR_INVALID_DATA;
  4037e2:	f04f 33ff 	mov.w	r3, #4294967295
}
  4037e6:	4618      	mov	r0, r3
  4037e8:	3710      	adds	r7, #16
  4037ea:	46bd      	mov	sp, r7
  4037ec:	bd80      	pop	{r7, pc}
  4037ee:	bf00      	nop
  4037f0:	00407628 	.word	0x00407628
  4037f4:	00402d25 	.word	0x00402d25
  4037f8:	00403751 	.word	0x00403751
  4037fc:	004075f0 	.word	0x004075f0

00403800 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  403800:	b580      	push	{r7, lr}
  403802:	b088      	sub	sp, #32
  403804:	af00      	add	r7, sp, #0
	uint32_t flag_total = 0, flags[5] = {
  403806:	2300      	movs	r3, #0
  403808:	61fb      	str	r3, [r7, #28]
  40380a:	1d3b      	adds	r3, r7, #4
  40380c:	2200      	movs	r2, #0
  40380e:	601a      	str	r2, [r3, #0]
  403810:	605a      	str	r2, [r3, #4]
  403812:	609a      	str	r2, [r3, #8]
  403814:	60da      	str	r2, [r3, #12]
  403816:	611a      	str	r2, [r3, #16]
	                             0,
	                         };
	int8_t pos;

	ASSERT(callback);
  403818:	4b46      	ldr	r3, [pc, #280]	; (403934 <_ext_irq_handler+0x134>)
  40381a:	681b      	ldr	r3, [r3, #0]
  40381c:	2b00      	cmp	r3, #0
  40381e:	bf14      	ite	ne
  403820:	2301      	movne	r3, #1
  403822:	2300      	moveq	r3, #0
  403824:	b2db      	uxtb	r3, r3
  403826:	22f8      	movs	r2, #248	; 0xf8
  403828:	4943      	ldr	r1, [pc, #268]	; (403938 <_ext_irq_handler+0x138>)
  40382a:	4618      	mov	r0, r3
  40382c:	4b43      	ldr	r3, [pc, #268]	; (40393c <_ext_irq_handler+0x13c>)
  40382e:	4798      	blx	r3
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
  403830:	4843      	ldr	r0, [pc, #268]	; (403940 <_ext_irq_handler+0x140>)
  403832:	4b44      	ldr	r3, [pc, #272]	; (403944 <_ext_irq_handler+0x144>)
  403834:	4798      	blx	r3
  403836:	4603      	mov	r3, r0
  403838:	60bb      	str	r3, [r7, #8]
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  40383a:	4841      	ldr	r0, [pc, #260]	; (403940 <_ext_irq_handler+0x140>)
  40383c:	4b42      	ldr	r3, [pc, #264]	; (403948 <_ext_irq_handler+0x148>)
  40383e:	4798      	blx	r3
  403840:	4602      	mov	r2, r0
  403842:	68bb      	ldr	r3, [r7, #8]
  403844:	4013      	ands	r3, r2
  403846:	60bb      	str	r3, [r7, #8]
	flag_total |= flags[1];
  403848:	68bb      	ldr	r3, [r7, #8]
  40384a:	69fa      	ldr	r2, [r7, #28]
  40384c:	4313      	orrs	r3, r2
  40384e:	61fb      	str	r3, [r7, #28]
	flags[2] &= hri_pio_read_IMR_reg(PIOC);
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
  403850:	483e      	ldr	r0, [pc, #248]	; (40394c <_ext_irq_handler+0x14c>)
  403852:	4b3c      	ldr	r3, [pc, #240]	; (403944 <_ext_irq_handler+0x144>)
  403854:	4798      	blx	r3
  403856:	4603      	mov	r3, r0
  403858:	613b      	str	r3, [r7, #16]
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40385a:	483c      	ldr	r0, [pc, #240]	; (40394c <_ext_irq_handler+0x14c>)
  40385c:	4b3a      	ldr	r3, [pc, #232]	; (403948 <_ext_irq_handler+0x148>)
  40385e:	4798      	blx	r3
  403860:	4602      	mov	r2, r0
  403862:	693b      	ldr	r3, [r7, #16]
  403864:	4013      	ands	r3, r2
  403866:	613b      	str	r3, [r7, #16]
	flag_total |= flags[3];
  403868:	693b      	ldr	r3, [r7, #16]
  40386a:	69fa      	ldr	r2, [r7, #28]
  40386c:	4313      	orrs	r3, r2
  40386e:	61fb      	str	r3, [r7, #28]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  403870:	e058      	b.n	403924 <_ext_irq_handler+0x124>
		pos = _ffs(flags, 5);
  403872:	1d3b      	adds	r3, r7, #4
  403874:	2105      	movs	r1, #5
  403876:	4618      	mov	r0, r3
  403878:	4b35      	ldr	r3, [pc, #212]	; (403950 <_ext_irq_handler+0x150>)
  40387a:	4798      	blx	r3
  40387c:	4603      	mov	r3, r0
  40387e:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  403880:	e029      	b.n	4038d6 <_ext_irq_handler+0xd6>
			callback(pos);
  403882:	4b2c      	ldr	r3, [pc, #176]	; (403934 <_ext_irq_handler+0x134>)
  403884:	681b      	ldr	r3, [r3, #0]
  403886:	f997 201b 	ldrsb.w	r2, [r7, #27]
  40388a:	4610      	mov	r0, r2
  40388c:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40388e:	f997 301b 	ldrsb.w	r3, [r7, #27]
  403892:	115b      	asrs	r3, r3, #5
  403894:	b25b      	sxtb	r3, r3
  403896:	4618      	mov	r0, r3
  403898:	f997 301b 	ldrsb.w	r3, [r7, #27]
  40389c:	115b      	asrs	r3, r3, #5
  40389e:	b25b      	sxtb	r3, r3
  4038a0:	009b      	lsls	r3, r3, #2
  4038a2:	f107 0220 	add.w	r2, r7, #32
  4038a6:	4413      	add	r3, r2
  4038a8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  4038ac:	7efa      	ldrb	r2, [r7, #27]
  4038ae:	f002 021f 	and.w	r2, r2, #31
  4038b2:	2101      	movs	r1, #1
  4038b4:	fa01 f202 	lsl.w	r2, r1, r2
  4038b8:	43d2      	mvns	r2, r2
  4038ba:	401a      	ands	r2, r3
  4038bc:	0083      	lsls	r3, r0, #2
  4038be:	f107 0120 	add.w	r1, r7, #32
  4038c2:	440b      	add	r3, r1
  4038c4:	f843 2c1c 	str.w	r2, [r3, #-28]
			pos = _ffs(flags, 5);
  4038c8:	1d3b      	adds	r3, r7, #4
  4038ca:	2105      	movs	r1, #5
  4038cc:	4618      	mov	r0, r3
  4038ce:	4b20      	ldr	r3, [pc, #128]	; (403950 <_ext_irq_handler+0x150>)
  4038d0:	4798      	blx	r3
  4038d2:	4603      	mov	r3, r0
  4038d4:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  4038d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
  4038da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4038de:	d1d0      	bne.n	403882 <_ext_irq_handler+0x82>
		}
		flag_total = 0;
  4038e0:	2300      	movs	r3, #0
  4038e2:	61fb      	str	r3, [r7, #28]
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
  4038e4:	4816      	ldr	r0, [pc, #88]	; (403940 <_ext_irq_handler+0x140>)
  4038e6:	4b17      	ldr	r3, [pc, #92]	; (403944 <_ext_irq_handler+0x144>)
  4038e8:	4798      	blx	r3
  4038ea:	4603      	mov	r3, r0
  4038ec:	60bb      	str	r3, [r7, #8]
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4038ee:	4814      	ldr	r0, [pc, #80]	; (403940 <_ext_irq_handler+0x140>)
  4038f0:	4b15      	ldr	r3, [pc, #84]	; (403948 <_ext_irq_handler+0x148>)
  4038f2:	4798      	blx	r3
  4038f4:	4602      	mov	r2, r0
  4038f6:	68bb      	ldr	r3, [r7, #8]
  4038f8:	4013      	ands	r3, r2
  4038fa:	60bb      	str	r3, [r7, #8]
		flag_total |= flags[1];
  4038fc:	68bb      	ldr	r3, [r7, #8]
  4038fe:	69fa      	ldr	r2, [r7, #28]
  403900:	4313      	orrs	r3, r2
  403902:	61fb      	str	r3, [r7, #28]
		flags[2] &= hri_pio_read_IMR_reg(PIOC);
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
  403904:	4811      	ldr	r0, [pc, #68]	; (40394c <_ext_irq_handler+0x14c>)
  403906:	4b0f      	ldr	r3, [pc, #60]	; (403944 <_ext_irq_handler+0x144>)
  403908:	4798      	blx	r3
  40390a:	4603      	mov	r3, r0
  40390c:	613b      	str	r3, [r7, #16]
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40390e:	480f      	ldr	r0, [pc, #60]	; (40394c <_ext_irq_handler+0x14c>)
  403910:	4b0d      	ldr	r3, [pc, #52]	; (403948 <_ext_irq_handler+0x148>)
  403912:	4798      	blx	r3
  403914:	4602      	mov	r2, r0
  403916:	693b      	ldr	r3, [r7, #16]
  403918:	4013      	ands	r3, r2
  40391a:	613b      	str	r3, [r7, #16]
		flag_total |= flags[3];
  40391c:	693b      	ldr	r3, [r7, #16]
  40391e:	69fa      	ldr	r2, [r7, #28]
  403920:	4313      	orrs	r3, r2
  403922:	61fb      	str	r3, [r7, #28]
	while (flag_total) {
  403924:	69fb      	ldr	r3, [r7, #28]
  403926:	2b00      	cmp	r3, #0
  403928:	d1a3      	bne.n	403872 <_ext_irq_handler+0x72>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  40392a:	bf00      	nop
  40392c:	3720      	adds	r7, #32
  40392e:	46bd      	mov	sp, r7
  403930:	bd80      	pop	{r7, pc}
  403932:	bf00      	nop
  403934:	204011c0 	.word	0x204011c0
  403938:	00407628 	.word	0x00407628
  40393c:	00402d25 	.word	0x00402d25
  403940:	400e1000 	.word	0x400e1000
  403944:	004035a5 	.word	0x004035a5
  403948:	004035d9 	.word	0x004035d9
  40394c:	400e1400 	.word	0x400e1400
  403950:	004036a3 	.word	0x004036a3

00403954 <PIOB_Handler>:

void PIOB_Handler(void)
{
  403954:	b580      	push	{r7, lr}
  403956:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  403958:	4b01      	ldr	r3, [pc, #4]	; (403960 <PIOB_Handler+0xc>)
  40395a:	4798      	blx	r3
}
  40395c:	bf00      	nop
  40395e:	bd80      	pop	{r7, pc}
  403960:	00403801 	.word	0x00403801

00403964 <PIOD_Handler>:

void PIOD_Handler(void)
{
  403964:	b580      	push	{r7, lr}
  403966:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  403968:	4b01      	ldr	r3, [pc, #4]	; (403970 <PIOD_Handler+0xc>)
  40396a:	4798      	blx	r3
}
  40396c:	bf00      	nop
  40396e:	bd80      	pop	{r7, pc}
  403970:	00403801 	.word	0x00403801

00403974 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  403974:	b580      	push	{r7, lr}
  403976:	b084      	sub	sp, #16
  403978:	af00      	add	r7, sp, #0
  40397a:	6078      	str	r0, [r7, #4]
	int8_t i;

	ASSERT(hw);
  40397c:	687b      	ldr	r3, [r7, #4]
  40397e:	2b00      	cmp	r3, #0
  403980:	bf14      	ite	ne
  403982:	2301      	movne	r3, #1
  403984:	2300      	moveq	r3, #0
  403986:	b2db      	uxtb	r3, r3
  403988:	f240 1259 	movw	r2, #345	; 0x159
  40398c:	4938      	ldr	r1, [pc, #224]	; (403a70 <_pio_init+0xfc>)
  40398e:	4618      	mov	r0, r3
  403990:	4b38      	ldr	r3, [pc, #224]	; (403a74 <_pio_init+0x100>)
  403992:	4798      	blx	r3

	i = _pio_get_index(hw);
  403994:	6878      	ldr	r0, [r7, #4]
  403996:	4b38      	ldr	r3, [pc, #224]	; (403a78 <_pio_init+0x104>)
  403998:	4798      	blx	r3
  40399a:	4603      	mov	r3, r0
  40399c:	73fb      	strb	r3, [r7, #15]
	if (i < 0) {
  40399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4039a2:	2b00      	cmp	r3, #0
  4039a4:	da02      	bge.n	4039ac <_pio_init+0x38>
		return ERR_DENIED;
  4039a6:	f06f 0310 	mvn.w	r3, #16
  4039aa:	e05d      	b.n	403a68 <_pio_init+0xf4>
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4039ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4039b0:	4932      	ldr	r1, [pc, #200]	; (403a7c <_pio_init+0x108>)
  4039b2:	4613      	mov	r3, r2
  4039b4:	00db      	lsls	r3, r3, #3
  4039b6:	1a9b      	subs	r3, r3, r2
  4039b8:	009b      	lsls	r3, r3, #2
  4039ba:	440b      	add	r3, r1
  4039bc:	3308      	adds	r3, #8
  4039be:	681b      	ldr	r3, [r3, #0]
  4039c0:	4619      	mov	r1, r3
  4039c2:	6878      	ldr	r0, [r7, #4]
  4039c4:	4b2e      	ldr	r3, [pc, #184]	; (403a80 <_pio_init+0x10c>)
  4039c6:	4798      	blx	r3
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4039c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4039cc:	492b      	ldr	r1, [pc, #172]	; (403a7c <_pio_init+0x108>)
  4039ce:	4613      	mov	r3, r2
  4039d0:	00db      	lsls	r3, r3, #3
  4039d2:	1a9b      	subs	r3, r3, r2
  4039d4:	009b      	lsls	r3, r3, #2
  4039d6:	440b      	add	r3, r1
  4039d8:	330c      	adds	r3, #12
  4039da:	681b      	ldr	r3, [r3, #0]
  4039dc:	4619      	mov	r1, r3
  4039de:	6878      	ldr	r0, [r7, #4]
  4039e0:	4b28      	ldr	r3, [pc, #160]	; (403a84 <_pio_init+0x110>)
  4039e2:	4798      	blx	r3
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4039e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4039e8:	4924      	ldr	r1, [pc, #144]	; (403a7c <_pio_init+0x108>)
  4039ea:	4613      	mov	r3, r2
  4039ec:	00db      	lsls	r3, r3, #3
  4039ee:	1a9b      	subs	r3, r3, r2
  4039f0:	009b      	lsls	r3, r3, #2
  4039f2:	440b      	add	r3, r1
  4039f4:	3310      	adds	r3, #16
  4039f6:	681b      	ldr	r3, [r3, #0]
  4039f8:	4619      	mov	r1, r3
  4039fa:	6878      	ldr	r0, [r7, #4]
  4039fc:	4b22      	ldr	r3, [pc, #136]	; (403a88 <_pio_init+0x114>)
  4039fe:	4798      	blx	r3
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  403a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403a04:	491d      	ldr	r1, [pc, #116]	; (403a7c <_pio_init+0x108>)
  403a06:	4613      	mov	r3, r2
  403a08:	00db      	lsls	r3, r3, #3
  403a0a:	1a9b      	subs	r3, r3, r2
  403a0c:	009b      	lsls	r3, r3, #2
  403a0e:	440b      	add	r3, r1
  403a10:	3318      	adds	r3, #24
  403a12:	681b      	ldr	r3, [r3, #0]
  403a14:	4619      	mov	r1, r3
  403a16:	6878      	ldr	r0, [r7, #4]
  403a18:	4b1c      	ldr	r3, [pc, #112]	; (403a8c <_pio_init+0x118>)
  403a1a:	4798      	blx	r3
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  403a1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403a20:	4916      	ldr	r1, [pc, #88]	; (403a7c <_pio_init+0x108>)
  403a22:	4613      	mov	r3, r2
  403a24:	00db      	lsls	r3, r3, #3
  403a26:	1a9b      	subs	r3, r3, r2
  403a28:	009b      	lsls	r3, r3, #2
  403a2a:	440b      	add	r3, r1
  403a2c:	3314      	adds	r3, #20
  403a2e:	681b      	ldr	r3, [r3, #0]
  403a30:	4619      	mov	r1, r3
  403a32:	6878      	ldr	r0, [r7, #4]
  403a34:	4b16      	ldr	r3, [pc, #88]	; (403a90 <_pio_init+0x11c>)
  403a36:	4798      	blx	r3

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  403a38:	6878      	ldr	r0, [r7, #4]
  403a3a:	4b16      	ldr	r3, [pc, #88]	; (403a94 <_pio_init+0x120>)
  403a3c:	4798      	blx	r3
  403a3e:	4603      	mov	r3, r0
  403a40:	461a      	mov	r2, r3
  403a42:	4b15      	ldr	r3, [pc, #84]	; (403a98 <_pio_init+0x124>)
  403a44:	5c9b      	ldrb	r3, [r3, r2]
  403a46:	73fb      	strb	r3, [r7, #15]
	NVIC_DisableIRQ((IRQn_Type)i);
  403a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403a4c:	4618      	mov	r0, r3
  403a4e:	4b13      	ldr	r3, [pc, #76]	; (403a9c <_pio_init+0x128>)
  403a50:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)i);
  403a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403a56:	4618      	mov	r0, r3
  403a58:	4b11      	ldr	r3, [pc, #68]	; (403aa0 <_pio_init+0x12c>)
  403a5a:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)i);
  403a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403a60:	4618      	mov	r0, r3
  403a62:	4b10      	ldr	r3, [pc, #64]	; (403aa4 <_pio_init+0x130>)
  403a64:	4798      	blx	r3

	return ERR_NONE;
  403a66:	2300      	movs	r3, #0
}
  403a68:	4618      	mov	r0, r3
  403a6a:	3710      	adds	r7, #16
  403a6c:	46bd      	mov	sp, r7
  403a6e:	bd80      	pop	{r7, pc}
  403a70:	00407628 	.word	0x00407628
  403a74:	00402d25 	.word	0x00402d25
  403a78:	0040378d 	.word	0x0040378d
  403a7c:	004075f0 	.word	0x004075f0
  403a80:	0040360d 	.word	0x0040360d
  403a84:	00403649 	.word	0x00403649
  403a88:	0040362b 	.word	0x0040362b
  403a8c:	00403685 	.word	0x00403685
  403a90:	00403667 	.word	0x00403667
  403a94:	00403751 	.word	0x00403751
  403a98:	004075e8 	.word	0x004075e8
  403a9c:	00403525 	.word	0x00403525
  403aa0:	00403569 	.word	0x00403569
  403aa4:	004034e9 	.word	0x004034e9

00403aa8 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  403aa8:	b580      	push	{r7, lr}
  403aaa:	b082      	sub	sp, #8
  403aac:	af00      	add	r7, sp, #0
  403aae:	6078      	str	r0, [r7, #4]
#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  403ab0:	4806      	ldr	r0, [pc, #24]	; (403acc <_ext_irq_init+0x24>)
  403ab2:	4b07      	ldr	r3, [pc, #28]	; (403ad0 <_ext_irq_init+0x28>)
  403ab4:	4798      	blx	r3
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  403ab6:	4807      	ldr	r0, [pc, #28]	; (403ad4 <_ext_irq_init+0x2c>)
  403ab8:	4b05      	ldr	r3, [pc, #20]	; (403ad0 <_ext_irq_init+0x28>)
  403aba:	4798      	blx	r3

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  403abc:	4a06      	ldr	r2, [pc, #24]	; (403ad8 <_ext_irq_init+0x30>)
  403abe:	687b      	ldr	r3, [r7, #4]
  403ac0:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
  403ac2:	2300      	movs	r3, #0
}
  403ac4:	4618      	mov	r0, r3
  403ac6:	3708      	adds	r7, #8
  403ac8:	46bd      	mov	sp, r7
  403aca:	bd80      	pop	{r7, pc}
  403acc:	400e1000 	.word	0x400e1000
  403ad0:	00403975 	.word	0x00403975
  403ad4:	400e1400 	.word	0x400e1400
  403ad8:	204011c0 	.word	0x204011c0

00403adc <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  403adc:	b580      	push	{r7, lr}
  403ade:	b084      	sub	sp, #16
  403ae0:	af00      	add	r7, sp, #0
  403ae2:	6078      	str	r0, [r7, #4]
  403ae4:	460b      	mov	r3, r1
  403ae6:	70fb      	strb	r3, [r7, #3]
	void *   hw   = PIOA;
  403ae8:	4b19      	ldr	r3, [pc, #100]	; (403b50 <_ext_irq_enable+0x74>)
  403aea:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
  403aec:	2300      	movs	r3, #0
  403aee:	60bb      	str	r3, [r7, #8]

	ASSERT(pin < 160);
  403af0:	687b      	ldr	r3, [r7, #4]
  403af2:	2b9f      	cmp	r3, #159	; 0x9f
  403af4:	bf94      	ite	ls
  403af6:	2301      	movls	r3, #1
  403af8:	2300      	movhi	r3, #0
  403afa:	b2db      	uxtb	r3, r3
  403afc:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  403b00:	4914      	ldr	r1, [pc, #80]	; (403b54 <_ext_irq_enable+0x78>)
  403b02:	4618      	mov	r0, r3
  403b04:	4b14      	ldr	r3, [pc, #80]	; (403b58 <_ext_irq_enable+0x7c>)
  403b06:	4798      	blx	r3

	hw   = _get_hardware_instance(pin);
  403b08:	687b      	ldr	r3, [r7, #4]
  403b0a:	b2db      	uxtb	r3, r3
  403b0c:	4618      	mov	r0, r3
  403b0e:	4b13      	ldr	r3, [pc, #76]	; (403b5c <_ext_irq_enable+0x80>)
  403b10:	4798      	blx	r3
  403b12:	60f8      	str	r0, [r7, #12]
	temp = pin & 31;
  403b14:	687b      	ldr	r3, [r7, #4]
  403b16:	f003 031f 	and.w	r3, r3, #31
  403b1a:	60bb      	str	r3, [r7, #8]

	if (enable) {
  403b1c:	78fb      	ldrb	r3, [r7, #3]
  403b1e:	2b00      	cmp	r3, #0
  403b20:	d008      	beq.n	403b34 <_ext_irq_enable+0x58>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  403b22:	2201      	movs	r2, #1
  403b24:	68bb      	ldr	r3, [r7, #8]
  403b26:	fa02 f303 	lsl.w	r3, r2, r3
  403b2a:	4619      	mov	r1, r3
  403b2c:	68f8      	ldr	r0, [r7, #12]
  403b2e:	4b0c      	ldr	r3, [pc, #48]	; (403b60 <_ext_irq_enable+0x84>)
  403b30:	4798      	blx	r3
  403b32:	e007      	b.n	403b44 <_ext_irq_enable+0x68>
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  403b34:	2201      	movs	r2, #1
  403b36:	68bb      	ldr	r3, [r7, #8]
  403b38:	fa02 f303 	lsl.w	r3, r2, r3
  403b3c:	4619      	mov	r1, r3
  403b3e:	68f8      	ldr	r0, [r7, #12]
  403b40:	4b08      	ldr	r3, [pc, #32]	; (403b64 <_ext_irq_enable+0x88>)
  403b42:	4798      	blx	r3
	}

	return ERR_NONE;
  403b44:	2300      	movs	r3, #0
}
  403b46:	4618      	mov	r0, r3
  403b48:	3710      	adds	r7, #16
  403b4a:	46bd      	mov	sp, r7
  403b4c:	bd80      	pop	{r7, pc}
  403b4e:	bf00      	nop
  403b50:	400e0e00 	.word	0x400e0e00
  403b54:	00407628 	.word	0x00407628
  403b58:	00402d25 	.word	0x00402d25
  403b5c:	0040370d 	.word	0x0040370d
  403b60:	004035bd 	.word	0x004035bd
  403b64:	004035f1 	.word	0x004035f1

00403b68 <hri_pmc_get_SR_MOSCXTS_bit>:
{
  403b68:	b480      	push	{r7}
  403b6a:	b083      	sub	sp, #12
  403b6c:	af00      	add	r7, sp, #0
  403b6e:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  403b70:	687b      	ldr	r3, [r7, #4]
  403b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403b74:	f003 0301 	and.w	r3, r3, #1
  403b78:	2b00      	cmp	r3, #0
  403b7a:	bf14      	ite	ne
  403b7c:	2301      	movne	r3, #1
  403b7e:	2300      	moveq	r3, #0
  403b80:	b2db      	uxtb	r3, r3
}
  403b82:	4618      	mov	r0, r3
  403b84:	370c      	adds	r7, #12
  403b86:	46bd      	mov	sp, r7
  403b88:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b8c:	4770      	bx	lr

00403b8e <hri_pmc_get_SR_LOCKA_bit>:
{
  403b8e:	b480      	push	{r7}
  403b90:	b083      	sub	sp, #12
  403b92:	af00      	add	r7, sp, #0
  403b94:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  403b96:	687b      	ldr	r3, [r7, #4]
  403b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403b9a:	f003 0302 	and.w	r3, r3, #2
  403b9e:	2b00      	cmp	r3, #0
  403ba0:	bf14      	ite	ne
  403ba2:	2301      	movne	r3, #1
  403ba4:	2300      	moveq	r3, #0
  403ba6:	b2db      	uxtb	r3, r3
}
  403ba8:	4618      	mov	r0, r3
  403baa:	370c      	adds	r7, #12
  403bac:	46bd      	mov	sp, r7
  403bae:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bb2:	4770      	bx	lr

00403bb4 <hri_pmc_get_SR_MCKRDY_bit>:
{
  403bb4:	b480      	push	{r7}
  403bb6:	b083      	sub	sp, #12
  403bb8:	af00      	add	r7, sp, #0
  403bba:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  403bbc:	687b      	ldr	r3, [r7, #4]
  403bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403bc0:	f003 0308 	and.w	r3, r3, #8
  403bc4:	2b00      	cmp	r3, #0
  403bc6:	bf14      	ite	ne
  403bc8:	2301      	movne	r3, #1
  403bca:	2300      	moveq	r3, #0
  403bcc:	b2db      	uxtb	r3, r3
}
  403bce:	4618      	mov	r0, r3
  403bd0:	370c      	adds	r7, #12
  403bd2:	46bd      	mov	sp, r7
  403bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bd8:	4770      	bx	lr

00403bda <hri_pmc_get_SR_LOCKU_bit>:
{
  403bda:	b480      	push	{r7}
  403bdc:	b083      	sub	sp, #12
  403bde:	af00      	add	r7, sp, #0
  403be0:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  403be2:	687b      	ldr	r3, [r7, #4]
  403be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403bea:	2b00      	cmp	r3, #0
  403bec:	bf14      	ite	ne
  403bee:	2301      	movne	r3, #1
  403bf0:	2300      	moveq	r3, #0
  403bf2:	b2db      	uxtb	r3, r3
}
  403bf4:	4618      	mov	r0, r3
  403bf6:	370c      	adds	r7, #12
  403bf8:	46bd      	mov	sp, r7
  403bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bfe:	4770      	bx	lr

00403c00 <hri_pmc_write_CKGR_UCKR_reg>:
{
  403c00:	b480      	push	{r7}
  403c02:	b083      	sub	sp, #12
  403c04:	af00      	add	r7, sp, #0
  403c06:	6078      	str	r0, [r7, #4]
  403c08:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_UCKR = data;
  403c0a:	687b      	ldr	r3, [r7, #4]
  403c0c:	683a      	ldr	r2, [r7, #0]
  403c0e:	61da      	str	r2, [r3, #28]
}
  403c10:	bf00      	nop
  403c12:	370c      	adds	r7, #12
  403c14:	46bd      	mov	sp, r7
  403c16:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c1a:	4770      	bx	lr

00403c1c <hri_pmc_set_CKGR_MOR_reg>:
{
  403c1c:	b480      	push	{r7}
  403c1e:	b083      	sub	sp, #12
  403c20:	af00      	add	r7, sp, #0
  403c22:	6078      	str	r0, [r7, #4]
  403c24:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR |= mask;
  403c26:	687b      	ldr	r3, [r7, #4]
  403c28:	6a1a      	ldr	r2, [r3, #32]
  403c2a:	683b      	ldr	r3, [r7, #0]
  403c2c:	431a      	orrs	r2, r3
  403c2e:	687b      	ldr	r3, [r7, #4]
  403c30:	621a      	str	r2, [r3, #32]
}
  403c32:	bf00      	nop
  403c34:	370c      	adds	r7, #12
  403c36:	46bd      	mov	sp, r7
  403c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c3c:	4770      	bx	lr

00403c3e <hri_pmc_write_CKGR_MOR_reg>:
{
  403c3e:	b480      	push	{r7}
  403c40:	b083      	sub	sp, #12
  403c42:	af00      	add	r7, sp, #0
  403c44:	6078      	str	r0, [r7, #4]
  403c46:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR = data;
  403c48:	687b      	ldr	r3, [r7, #4]
  403c4a:	683a      	ldr	r2, [r7, #0]
  403c4c:	621a      	str	r2, [r3, #32]
}
  403c4e:	bf00      	nop
  403c50:	370c      	adds	r7, #12
  403c52:	46bd      	mov	sp, r7
  403c54:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c58:	4770      	bx	lr

00403c5a <hri_pmc_read_CKGR_MOR_reg>:
{
  403c5a:	b480      	push	{r7}
  403c5c:	b083      	sub	sp, #12
  403c5e:	af00      	add	r7, sp, #0
  403c60:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->CKGR_MOR;
  403c62:	687b      	ldr	r3, [r7, #4]
  403c64:	6a1b      	ldr	r3, [r3, #32]
}
  403c66:	4618      	mov	r0, r3
  403c68:	370c      	adds	r7, #12
  403c6a:	46bd      	mov	sp, r7
  403c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c70:	4770      	bx	lr
	...

00403c74 <hri_pmc_write_CKGR_PLLAR_MULA_bf>:
{
  403c74:	b480      	push	{r7}
  403c76:	b085      	sub	sp, #20
  403c78:	af00      	add	r7, sp, #0
  403c7a:	6078      	str	r0, [r7, #4]
  403c7c:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  403c7e:	687b      	ldr	r3, [r7, #4]
  403c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  403c82:	60fb      	str	r3, [r7, #12]
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  403c84:	68fa      	ldr	r2, [r7, #12]
  403c86:	4b09      	ldr	r3, [pc, #36]	; (403cac <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x38>)
  403c88:	4013      	ands	r3, r2
  403c8a:	60fb      	str	r3, [r7, #12]
	tmp |= CKGR_PLLAR_MULA(data);
  403c8c:	683b      	ldr	r3, [r7, #0]
  403c8e:	041a      	lsls	r2, r3, #16
  403c90:	4b07      	ldr	r3, [pc, #28]	; (403cb0 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x3c>)
  403c92:	4013      	ands	r3, r2
  403c94:	68fa      	ldr	r2, [r7, #12]
  403c96:	4313      	orrs	r3, r2
  403c98:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  403c9a:	687b      	ldr	r3, [r7, #4]
  403c9c:	68fa      	ldr	r2, [r7, #12]
  403c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
  403ca0:	bf00      	nop
  403ca2:	3714      	adds	r7, #20
  403ca4:	46bd      	mov	sp, r7
  403ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403caa:	4770      	bx	lr
  403cac:	f800ffff 	.word	0xf800ffff
  403cb0:	07ff0000 	.word	0x07ff0000

00403cb4 <hri_pmc_write_CKGR_PLLAR_reg>:
{
  403cb4:	b480      	push	{r7}
  403cb6:	b083      	sub	sp, #12
  403cb8:	af00      	add	r7, sp, #0
  403cba:	6078      	str	r0, [r7, #4]
  403cbc:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_PLLAR = data;
  403cbe:	687b      	ldr	r3, [r7, #4]
  403cc0:	683a      	ldr	r2, [r7, #0]
  403cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
  403cc4:	bf00      	nop
  403cc6:	370c      	adds	r7, #12
  403cc8:	46bd      	mov	sp, r7
  403cca:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cce:	4770      	bx	lr

00403cd0 <hri_pmc_write_MCKR_UPLLDIV2_bit>:
{
  403cd0:	b480      	push	{r7}
  403cd2:	b085      	sub	sp, #20
  403cd4:	af00      	add	r7, sp, #0
  403cd6:	6078      	str	r0, [r7, #4]
  403cd8:	460b      	mov	r3, r1
  403cda:	70fb      	strb	r3, [r7, #3]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403cdc:	687b      	ldr	r3, [r7, #4]
  403cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403ce0:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_UPLLDIV2;
  403ce2:	68fb      	ldr	r3, [r7, #12]
  403ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403ce8:	60fb      	str	r3, [r7, #12]
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  403cea:	78fb      	ldrb	r3, [r7, #3]
  403cec:	035b      	lsls	r3, r3, #13
  403cee:	461a      	mov	r2, r3
  403cf0:	68fb      	ldr	r3, [r7, #12]
  403cf2:	4313      	orrs	r3, r2
  403cf4:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403cf6:	687b      	ldr	r3, [r7, #4]
  403cf8:	68fa      	ldr	r2, [r7, #12]
  403cfa:	631a      	str	r2, [r3, #48]	; 0x30
}
  403cfc:	bf00      	nop
  403cfe:	3714      	adds	r7, #20
  403d00:	46bd      	mov	sp, r7
  403d02:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d06:	4770      	bx	lr

00403d08 <hri_pmc_write_MCKR_CSS_bf>:
{
  403d08:	b480      	push	{r7}
  403d0a:	b085      	sub	sp, #20
  403d0c:	af00      	add	r7, sp, #0
  403d0e:	6078      	str	r0, [r7, #4]
  403d10:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403d12:	687b      	ldr	r3, [r7, #4]
  403d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d16:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_CSS_Msk;
  403d18:	68fb      	ldr	r3, [r7, #12]
  403d1a:	f023 0303 	bic.w	r3, r3, #3
  403d1e:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_CSS(data);
  403d20:	683b      	ldr	r3, [r7, #0]
  403d22:	f003 0303 	and.w	r3, r3, #3
  403d26:	68fa      	ldr	r2, [r7, #12]
  403d28:	4313      	orrs	r3, r2
  403d2a:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403d2c:	687b      	ldr	r3, [r7, #4]
  403d2e:	68fa      	ldr	r2, [r7, #12]
  403d30:	631a      	str	r2, [r3, #48]	; 0x30
}
  403d32:	bf00      	nop
  403d34:	3714      	adds	r7, #20
  403d36:	46bd      	mov	sp, r7
  403d38:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d3c:	4770      	bx	lr

00403d3e <hri_pmc_write_MCKR_PRES_bf>:
{
  403d3e:	b480      	push	{r7}
  403d40:	b085      	sub	sp, #20
  403d42:	af00      	add	r7, sp, #0
  403d44:	6078      	str	r0, [r7, #4]
  403d46:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403d48:	687b      	ldr	r3, [r7, #4]
  403d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d4c:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_PRES_Msk;
  403d4e:	68fb      	ldr	r3, [r7, #12]
  403d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403d54:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_PRES(data);
  403d56:	683b      	ldr	r3, [r7, #0]
  403d58:	011b      	lsls	r3, r3, #4
  403d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403d5e:	68fa      	ldr	r2, [r7, #12]
  403d60:	4313      	orrs	r3, r2
  403d62:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403d64:	687b      	ldr	r3, [r7, #4]
  403d66:	68fa      	ldr	r2, [r7, #12]
  403d68:	631a      	str	r2, [r3, #48]	; 0x30
}
  403d6a:	bf00      	nop
  403d6c:	3714      	adds	r7, #20
  403d6e:	46bd      	mov	sp, r7
  403d70:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d74:	4770      	bx	lr

00403d76 <hri_pmc_write_MCKR_MDIV_bf>:
{
  403d76:	b480      	push	{r7}
  403d78:	b085      	sub	sp, #20
  403d7a:	af00      	add	r7, sp, #0
  403d7c:	6078      	str	r0, [r7, #4]
  403d7e:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403d80:	687b      	ldr	r3, [r7, #4]
  403d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d84:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_MDIV_Msk;
  403d86:	68fb      	ldr	r3, [r7, #12]
  403d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403d8c:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_MDIV(data);
  403d8e:	683b      	ldr	r3, [r7, #0]
  403d90:	021b      	lsls	r3, r3, #8
  403d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403d96:	68fa      	ldr	r2, [r7, #12]
  403d98:	4313      	orrs	r3, r2
  403d9a:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403d9c:	687b      	ldr	r3, [r7, #4]
  403d9e:	68fa      	ldr	r2, [r7, #12]
  403da0:	631a      	str	r2, [r3, #48]	; 0x30
}
  403da2:	bf00      	nop
  403da4:	3714      	adds	r7, #20
  403da6:	46bd      	mov	sp, r7
  403da8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dac:	4770      	bx	lr
	...

00403db0 <_pmc_init_sources>:
 * \brief Initializes clock generators
 *
 * All clock sources are running when this function returns.
 */
static void _pmc_init_sources(void)
{
  403db0:	b580      	push	{r7, lr}
  403db2:	b082      	sub	sp, #8
  403db4:	af00      	add	r7, sp, #0
	uint32_t data = 0;
  403db6:	2300      	movs	r3, #0
  403db8:	607b      	str	r3, [r7, #4]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  403dba:	4826      	ldr	r0, [pc, #152]	; (403e54 <_pmc_init_sources+0xa4>)
  403dbc:	4b26      	ldr	r3, [pc, #152]	; (403e58 <_pmc_init_sources+0xa8>)
  403dbe:	4798      	blx	r3
  403dc0:	4603      	mov	r3, r0
  403dc2:	f023 0302 	bic.w	r3, r3, #2
  403dc6:	607b      	str	r3, [r7, #4]
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  403dc8:	687a      	ldr	r2, [r7, #4]
  403dca:	4b24      	ldr	r3, [pc, #144]	; (403e5c <_pmc_init_sources+0xac>)
  403dcc:	4313      	orrs	r3, r2
  403dce:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
  403dd0:	6879      	ldr	r1, [r7, #4]
  403dd2:	4820      	ldr	r0, [pc, #128]	; (403e54 <_pmc_init_sources+0xa4>)
  403dd4:	4b22      	ldr	r3, [pc, #136]	; (403e60 <_pmc_init_sources+0xb0>)
  403dd6:	4798      	blx	r3
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  403dd8:	bf00      	nop
  403dda:	481e      	ldr	r0, [pc, #120]	; (403e54 <_pmc_init_sources+0xa4>)
  403ddc:	4b21      	ldr	r3, [pc, #132]	; (403e64 <_pmc_init_sources+0xb4>)
  403dde:	4798      	blx	r3
  403de0:	4603      	mov	r3, r0
  403de2:	f083 0301 	eor.w	r3, r3, #1
  403de6:	b2db      	uxtb	r3, r3
  403de8:	2b00      	cmp	r3, #0
  403dea:	d1f6      	bne.n	403dda <_pmc_init_sources+0x2a>
		/* Wait until the XTAL to stabilize */
	}
	hri_pmc_set_CKGR_MOR_reg(PMC, CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL);
  403dec:	491e      	ldr	r1, [pc, #120]	; (403e68 <_pmc_init_sources+0xb8>)
  403dee:	4819      	ldr	r0, [pc, #100]	; (403e54 <_pmc_init_sources+0xa4>)
  403df0:	4b1e      	ldr	r3, [pc, #120]	; (403e6c <_pmc_init_sources+0xbc>)
  403df2:	4798      	blx	r3
#endif
#endif
#endif

#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  403df4:	4b1e      	ldr	r3, [pc, #120]	; (403e70 <_pmc_init_sources+0xc0>)
  403df6:	607b      	str	r3, [r7, #4]
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
  403df8:	2100      	movs	r1, #0
  403dfa:	4816      	ldr	r0, [pc, #88]	; (403e54 <_pmc_init_sources+0xa4>)
  403dfc:	4b1d      	ldr	r3, [pc, #116]	; (403e74 <_pmc_init_sources+0xc4>)
  403dfe:	4798      	blx	r3
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
  403e00:	687b      	ldr	r3, [r7, #4]
  403e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403e06:	4619      	mov	r1, r3
  403e08:	4812      	ldr	r0, [pc, #72]	; (403e54 <_pmc_init_sources+0xa4>)
  403e0a:	4b1b      	ldr	r3, [pc, #108]	; (403e78 <_pmc_init_sources+0xc8>)
  403e0c:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  403e0e:	bf00      	nop
  403e10:	4810      	ldr	r0, [pc, #64]	; (403e54 <_pmc_init_sources+0xa4>)
  403e12:	4b1a      	ldr	r3, [pc, #104]	; (403e7c <_pmc_init_sources+0xcc>)
  403e14:	4798      	blx	r3
  403e16:	4603      	mov	r3, r0
  403e18:	f083 0301 	eor.w	r3, r3, #1
  403e1c:	b2db      	uxtb	r3, r3
  403e1e:	2b00      	cmp	r3, #0
  403e20:	d1f6      	bne.n	403e10 <_pmc_init_sources+0x60>
		/* Wait until PLLACK stabilize */
	}
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  403e22:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  403e26:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
  403e28:	687b      	ldr	r3, [r7, #4]
  403e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403e2e:	4619      	mov	r1, r3
  403e30:	4808      	ldr	r0, [pc, #32]	; (403e54 <_pmc_init_sources+0xa4>)
  403e32:	4b13      	ldr	r3, [pc, #76]	; (403e80 <_pmc_init_sources+0xd0>)
  403e34:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  403e36:	bf00      	nop
  403e38:	4806      	ldr	r0, [pc, #24]	; (403e54 <_pmc_init_sources+0xa4>)
  403e3a:	4b12      	ldr	r3, [pc, #72]	; (403e84 <_pmc_init_sources+0xd4>)
  403e3c:	4798      	blx	r3
  403e3e:	4603      	mov	r3, r0
  403e40:	f083 0301 	eor.w	r3, r3, #1
  403e44:	b2db      	uxtb	r3, r3
  403e46:	2b00      	cmp	r3, #0
  403e48:	d1f6      	bne.n	403e38 <_pmc_init_sources+0x88>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  403e4a:	bf00      	nop
  403e4c:	3708      	adds	r7, #8
  403e4e:	46bd      	mov	sp, r7
  403e50:	bd80      	pop	{r7, pc}
  403e52:	bf00      	nop
  403e54:	400e0600 	.word	0x400e0600
  403e58:	00403c5b 	.word	0x00403c5b
  403e5c:	00373e01 	.word	0x00373e01
  403e60:	00403c3f 	.word	0x00403c3f
  403e64:	00403b69 	.word	0x00403b69
  403e68:	01370000 	.word	0x01370000
  403e6c:	00403c1d 	.word	0x00403c1d
  403e70:	00183f01 	.word	0x00183f01
  403e74:	00403c75 	.word	0x00403c75
  403e78:	00403cb5 	.word	0x00403cb5
  403e7c:	00403b8f 	.word	0x00403b8f
  403e80:	00403c01 	.word	0x00403c01
  403e84:	00403bdb 	.word	0x00403bdb

00403e88 <_pmc_init_master_clock>:
 * \brief Initializes master clock generators
 *
 * Master clock are running when this function returns.
 */
static void _pmc_init_master_clock(void)
{
  403e88:	b580      	push	{r7, lr}
  403e8a:	af00      	add	r7, sp, #0
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
  403e8c:	2101      	movs	r1, #1
  403e8e:	481c      	ldr	r0, [pc, #112]	; (403f00 <_pmc_init_master_clock+0x78>)
  403e90:	4b1c      	ldr	r3, [pc, #112]	; (403f04 <_pmc_init_master_clock+0x7c>)
  403e92:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403e94:	bf00      	nop
  403e96:	481a      	ldr	r0, [pc, #104]	; (403f00 <_pmc_init_master_clock+0x78>)
  403e98:	4b1b      	ldr	r3, [pc, #108]	; (403f08 <_pmc_init_master_clock+0x80>)
  403e9a:	4798      	blx	r3
  403e9c:	4603      	mov	r3, r0
  403e9e:	f083 0301 	eor.w	r3, r3, #1
  403ea2:	b2db      	uxtb	r3, r3
  403ea4:	2b00      	cmp	r3, #0
  403ea6:	d1f6      	bne.n	403e96 <_pmc_init_master_clock+0xe>
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
  403ea8:	2100      	movs	r1, #0
  403eaa:	4815      	ldr	r0, [pc, #84]	; (403f00 <_pmc_init_master_clock+0x78>)
  403eac:	4b17      	ldr	r3, [pc, #92]	; (403f0c <_pmc_init_master_clock+0x84>)
  403eae:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403eb0:	bf00      	nop
  403eb2:	4813      	ldr	r0, [pc, #76]	; (403f00 <_pmc_init_master_clock+0x78>)
  403eb4:	4b14      	ldr	r3, [pc, #80]	; (403f08 <_pmc_init_master_clock+0x80>)
  403eb6:	4798      	blx	r3
  403eb8:	4603      	mov	r3, r0
  403eba:	f083 0301 	eor.w	r3, r3, #1
  403ebe:	b2db      	uxtb	r3, r3
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	d1f6      	bne.n	403eb2 <_pmc_init_master_clock+0x2a>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
  403ec4:	2101      	movs	r1, #1
  403ec6:	480e      	ldr	r0, [pc, #56]	; (403f00 <_pmc_init_master_clock+0x78>)
  403ec8:	4b11      	ldr	r3, [pc, #68]	; (403f10 <_pmc_init_master_clock+0x88>)
  403eca:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403ecc:	bf00      	nop
  403ece:	480c      	ldr	r0, [pc, #48]	; (403f00 <_pmc_init_master_clock+0x78>)
  403ed0:	4b0d      	ldr	r3, [pc, #52]	; (403f08 <_pmc_init_master_clock+0x80>)
  403ed2:	4798      	blx	r3
  403ed4:	4603      	mov	r3, r0
  403ed6:	f083 0301 	eor.w	r3, r3, #1
  403eda:	b2db      	uxtb	r3, r3
  403edc:	2b00      	cmp	r3, #0
  403ede:	d1f6      	bne.n	403ece <_pmc_init_master_clock+0x46>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
  403ee0:	2102      	movs	r1, #2
  403ee2:	4807      	ldr	r0, [pc, #28]	; (403f00 <_pmc_init_master_clock+0x78>)
  403ee4:	4b0b      	ldr	r3, [pc, #44]	; (403f14 <_pmc_init_master_clock+0x8c>)
  403ee6:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403ee8:	bf00      	nop
  403eea:	4805      	ldr	r0, [pc, #20]	; (403f00 <_pmc_init_master_clock+0x78>)
  403eec:	4b06      	ldr	r3, [pc, #24]	; (403f08 <_pmc_init_master_clock+0x80>)
  403eee:	4798      	blx	r3
  403ef0:	4603      	mov	r3, r0
  403ef2:	f083 0301 	eor.w	r3, r3, #1
  403ef6:	b2db      	uxtb	r3, r3
  403ef8:	2b00      	cmp	r3, #0
  403efa:	d1f6      	bne.n	403eea <_pmc_init_master_clock+0x62>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  403efc:	bf00      	nop
  403efe:	bd80      	pop	{r7, pc}
  403f00:	400e0600 	.word	0x400e0600
  403f04:	00403cd1 	.word	0x00403cd1
  403f08:	00403bb5 	.word	0x00403bb5
  403f0c:	00403d3f 	.word	0x00403d3f
  403f10:	00403d77 	.word	0x00403d77
  403f14:	00403d09 	.word	0x00403d09

00403f18 <_pmc_init_program_clock>:
 * \brief Initializes programmable clock generators
 *
 * Programmable clock are running when this function returns.
 */
static void _pmc_init_program_clock(void)
{
  403f18:	b480      	push	{r7}
  403f1a:	af00      	add	r7, sp, #0
	while (!hri_pmc_get_SR_PCKRDY0_bit(PMC)) {
		/* Wait until PCK6 clock is ready */
	}
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK6);
#endif
}
  403f1c:	bf00      	nop
  403f1e:	46bd      	mov	sp, r7
  403f20:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f24:	4770      	bx	lr

00403f26 <_pmc_init_fs_clock>:
 * \brief Initializes USB FS clock generators
 *
 * USB FS clock are running when this function returns.
 */
static void _pmc_init_fs_clock(void)
{
  403f26:	b480      	push	{r7}
  403f28:	af00      	add	r7, sp, #0
	}
	data |= PMC_USB_USBDIV(CONF_USB_48M_DIV - 1);
	hri_pmc_write_USB_reg(PMC, data);
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_USBCLK);
#endif
}
  403f2a:	bf00      	nop
  403f2c:	46bd      	mov	sp, r7
  403f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f32:	4770      	bx	lr

00403f34 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  403f34:	b580      	push	{r7, lr}
  403f36:	af00      	add	r7, sp, #0
	_pmc_init_sources();
  403f38:	4b04      	ldr	r3, [pc, #16]	; (403f4c <_pmc_init+0x18>)
  403f3a:	4798      	blx	r3
	_pmc_init_master_clock();
  403f3c:	4b04      	ldr	r3, [pc, #16]	; (403f50 <_pmc_init+0x1c>)
  403f3e:	4798      	blx	r3
	_pmc_init_program_clock();
  403f40:	4b04      	ldr	r3, [pc, #16]	; (403f54 <_pmc_init+0x20>)
  403f42:	4798      	blx	r3
	_pmc_init_fs_clock();
  403f44:	4b04      	ldr	r3, [pc, #16]	; (403f58 <_pmc_init+0x24>)
  403f46:	4798      	blx	r3
}
  403f48:	bf00      	nop
  403f4a:	bd80      	pop	{r7, pc}
  403f4c:	00403db1 	.word	0x00403db1
  403f50:	00403e89 	.word	0x00403e89
  403f54:	00403f19 	.word	0x00403f19
  403f58:	00403f27 	.word	0x00403f27

00403f5c <__NVIC_EnableIRQ>:
{
  403f5c:	b480      	push	{r7}
  403f5e:	b083      	sub	sp, #12
  403f60:	af00      	add	r7, sp, #0
  403f62:	4603      	mov	r3, r0
  403f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f6a:	2b00      	cmp	r3, #0
  403f6c:	db0b      	blt.n	403f86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403f6e:	4909      	ldr	r1, [pc, #36]	; (403f94 <__NVIC_EnableIRQ+0x38>)
  403f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f74:	095b      	lsrs	r3, r3, #5
  403f76:	79fa      	ldrb	r2, [r7, #7]
  403f78:	f002 021f 	and.w	r2, r2, #31
  403f7c:	2001      	movs	r0, #1
  403f7e:	fa00 f202 	lsl.w	r2, r0, r2
  403f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403f86:	bf00      	nop
  403f88:	370c      	adds	r7, #12
  403f8a:	46bd      	mov	sp, r7
  403f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f90:	4770      	bx	lr
  403f92:	bf00      	nop
  403f94:	e000e100 	.word	0xe000e100

00403f98 <hri_spi_get_SR_SPIENS_bit>:
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
  403f98:	b480      	push	{r7}
  403f9a:	b083      	sub	sp, #12
  403f9c:	af00      	add	r7, sp, #0
  403f9e:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  403fa0:	687b      	ldr	r3, [r7, #4]
  403fa2:	691b      	ldr	r3, [r3, #16]
  403fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403fa8:	2b00      	cmp	r3, #0
  403faa:	bf14      	ite	ne
  403fac:	2301      	movne	r3, #1
  403fae:	2300      	moveq	r3, #0
  403fb0:	b2db      	uxtb	r3, r3
}
  403fb2:	4618      	mov	r0, r3
  403fb4:	370c      	adds	r7, #12
  403fb6:	46bd      	mov	sp, r7
  403fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fbc:	4770      	bx	lr

00403fbe <hri_spi_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_MR_reg(const void *const hw, hri_spi_mr_reg_t data)
{
  403fbe:	b480      	push	{r7}
  403fc0:	b083      	sub	sp, #12
  403fc2:	af00      	add	r7, sp, #0
  403fc4:	6078      	str	r0, [r7, #4]
  403fc6:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MR = data;
  403fc8:	687b      	ldr	r3, [r7, #4]
  403fca:	683a      	ldr	r2, [r7, #0]
  403fcc:	605a      	str	r2, [r3, #4]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403fce:	bf00      	nop
  403fd0:	370c      	adds	r7, #12
  403fd2:	46bd      	mov	sp, r7
  403fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fd8:	4770      	bx	lr

00403fda <hri_spi_write_CSR_BITS_bf>:
	tmp = (tmp & SPI_CSR_BITS(mask)) >> SPI_CSR_BITS_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_BITS_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  403fda:	b480      	push	{r7}
  403fdc:	b087      	sub	sp, #28
  403fde:	af00      	add	r7, sp, #0
  403fe0:	60f8      	str	r0, [r7, #12]
  403fe2:	460b      	mov	r3, r1
  403fe4:	607a      	str	r2, [r7, #4]
  403fe6:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  403fe8:	7afa      	ldrb	r2, [r7, #11]
  403fea:	68fb      	ldr	r3, [r7, #12]
  403fec:	320c      	adds	r2, #12
  403fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403ff2:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_BITS_Msk;
  403ff4:	697b      	ldr	r3, [r7, #20]
  403ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403ffa:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_BITS(data);
  403ffc:	687b      	ldr	r3, [r7, #4]
  403ffe:	011b      	lsls	r3, r3, #4
  404000:	b2db      	uxtb	r3, r3
  404002:	697a      	ldr	r2, [r7, #20]
  404004:	4313      	orrs	r3, r2
  404006:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  404008:	7afa      	ldrb	r2, [r7, #11]
  40400a:	68fb      	ldr	r3, [r7, #12]
  40400c:	320c      	adds	r2, #12
  40400e:	6979      	ldr	r1, [r7, #20]
  404010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  404014:	bf00      	nop
  404016:	371c      	adds	r7, #28
  404018:	46bd      	mov	sp, r7
  40401a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40401e:	4770      	bx	lr

00404020 <hri_spi_write_CSR_SCBR_bf>:
	tmp = (tmp & SPI_CSR_SCBR(mask)) >> SPI_CSR_SCBR_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_SCBR_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  404020:	b480      	push	{r7}
  404022:	b087      	sub	sp, #28
  404024:	af00      	add	r7, sp, #0
  404026:	60f8      	str	r0, [r7, #12]
  404028:	460b      	mov	r3, r1
  40402a:	607a      	str	r2, [r7, #4]
  40402c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  40402e:	7afa      	ldrb	r2, [r7, #11]
  404030:	68fb      	ldr	r3, [r7, #12]
  404032:	320c      	adds	r2, #12
  404034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404038:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_SCBR_Msk;
  40403a:	697b      	ldr	r3, [r7, #20]
  40403c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  404040:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_SCBR(data);
  404042:	687b      	ldr	r3, [r7, #4]
  404044:	021b      	lsls	r3, r3, #8
  404046:	b29b      	uxth	r3, r3
  404048:	697a      	ldr	r2, [r7, #20]
  40404a:	4313      	orrs	r3, r2
  40404c:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  40404e:	7afa      	ldrb	r2, [r7, #11]
  404050:	68fb      	ldr	r3, [r7, #12]
  404052:	320c      	adds	r2, #12
  404054:	6979      	ldr	r1, [r7, #20]
  404056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  40405a:	bf00      	nop
  40405c:	371c      	adds	r7, #28
  40405e:	46bd      	mov	sp, r7
  404060:	f85d 7b04 	ldr.w	r7, [sp], #4
  404064:	4770      	bx	lr

00404066 <hri_spi_write_CSR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CSR_reg(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  404066:	b480      	push	{r7}
  404068:	b085      	sub	sp, #20
  40406a:	af00      	add	r7, sp, #0
  40406c:	60f8      	str	r0, [r7, #12]
  40406e:	460b      	mov	r3, r1
  404070:	607a      	str	r2, [r7, #4]
  404072:	72fb      	strb	r3, [r7, #11]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CSR[index] = data;
  404074:	7afa      	ldrb	r2, [r7, #11]
  404076:	68fb      	ldr	r3, [r7, #12]
  404078:	320c      	adds	r2, #12
  40407a:	6879      	ldr	r1, [r7, #4]
  40407c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  404080:	bf00      	nop
  404082:	3714      	adds	r7, #20
  404084:	46bd      	mov	sp, r7
  404086:	f85d 7b04 	ldr.w	r7, [sp], #4
  40408a:	4770      	bx	lr

0040408c <hri_spi_read_CSR_reg>:
	((Spi *)hw)->SPI_CSR[index] ^= mask;
	SPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_spi_csr_reg_t hri_spi_read_CSR_reg(const void *const hw, uint8_t index)
{
  40408c:	b480      	push	{r7}
  40408e:	b083      	sub	sp, #12
  404090:	af00      	add	r7, sp, #0
  404092:	6078      	str	r0, [r7, #4]
  404094:	460b      	mov	r3, r1
  404096:	70fb      	strb	r3, [r7, #3]
	return ((Spi *)hw)->SPI_CSR[index];
  404098:	78fa      	ldrb	r2, [r7, #3]
  40409a:	687b      	ldr	r3, [r7, #4]
  40409c:	320c      	adds	r2, #12
  40409e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  4040a2:	4618      	mov	r0, r3
  4040a4:	370c      	adds	r7, #12
  4040a6:	46bd      	mov	sp, r7
  4040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040ac:	4770      	bx	lr

004040ae <hri_spi_write_CR_reg>:
{
	return ((Spi *)hw)->SPI_WPMR;
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
  4040ae:	b480      	push	{r7}
  4040b0:	b083      	sub	sp, #12
  4040b2:	af00      	add	r7, sp, #0
  4040b4:	6078      	str	r0, [r7, #4]
  4040b6:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4040b8:	687b      	ldr	r3, [r7, #4]
  4040ba:	683a      	ldr	r2, [r7, #0]
  4040bc:	601a      	str	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4040be:	bf00      	nop
  4040c0:	370c      	adds	r7, #12
  4040c2:	46bd      	mov	sp, r7
  4040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040c8:	4770      	bx	lr
	...

004040cc <_spi_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _spi_get_irq_num(const void *const hw)
{
  4040cc:	b480      	push	{r7}
  4040ce:	b083      	sub	sp, #12
  4040d0:	af00      	add	r7, sp, #0
  4040d2:	6078      	str	r0, [r7, #4]

	if (hw == SPI0) {
  4040d4:	687b      	ldr	r3, [r7, #4]
  4040d6:	4a06      	ldr	r2, [pc, #24]	; (4040f0 <_spi_get_irq_num+0x24>)
  4040d8:	4293      	cmp	r3, r2
  4040da:	d101      	bne.n	4040e0 <_spi_get_irq_num+0x14>
		return SPI0_IRQn;
  4040dc:	2315      	movs	r3, #21
  4040de:	e000      	b.n	4040e2 <_spi_get_irq_num+0x16>
	} else {
		return SPI1_IRQn;
  4040e0:	232a      	movs	r3, #42	; 0x2a
	}
}
  4040e2:	4618      	mov	r0, r3
  4040e4:	370c      	adds	r7, #12
  4040e6:	46bd      	mov	sp, r7
  4040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040ec:	4770      	bx	lr
  4040ee:	bf00      	nop
  4040f0:	40008000 	.word	0x40008000

004040f4 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
  4040f4:	b580      	push	{r7, lr}
  4040f6:	b082      	sub	sp, #8
  4040f8:	af00      	add	r7, sp, #0
  4040fa:	6078      	str	r0, [r7, #4]
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);
  4040fc:	2101      	movs	r1, #1
  4040fe:	6878      	ldr	r0, [r7, #4]
  404100:	4b03      	ldr	r3, [pc, #12]	; (404110 <_spi_sync_enable+0x1c>)
  404102:	4798      	blx	r3

	return ERR_NONE;
  404104:	2300      	movs	r3, #0
}
  404106:	4618      	mov	r0, r3
  404108:	3708      	adds	r7, #8
  40410a:	46bd      	mov	sp, r7
  40410c:	bd80      	pop	{r7, pc}
  40410e:	bf00      	nop
  404110:	004040af 	.word	0x004040af

00404114 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
  404114:	b580      	push	{r7, lr}
  404116:	b082      	sub	sp, #8
  404118:	af00      	add	r7, sp, #0
  40411a:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
  40411c:	6878      	ldr	r0, [r7, #4]
  40411e:	4b07      	ldr	r3, [pc, #28]	; (40413c <_spi_async_enable+0x28>)
  404120:	4798      	blx	r3
	NVIC_EnableIRQ(_spi_get_irq_num(hw));
  404122:	6878      	ldr	r0, [r7, #4]
  404124:	4b06      	ldr	r3, [pc, #24]	; (404140 <_spi_async_enable+0x2c>)
  404126:	4798      	blx	r3
  404128:	4603      	mov	r3, r0
  40412a:	4618      	mov	r0, r3
  40412c:	4b05      	ldr	r3, [pc, #20]	; (404144 <_spi_async_enable+0x30>)
  40412e:	4798      	blx	r3

	return ERR_NONE;
  404130:	2300      	movs	r3, #0
}
  404132:	4618      	mov	r0, r3
  404134:	3708      	adds	r7, #8
  404136:	46bd      	mov	sp, r7
  404138:	bd80      	pop	{r7, pc}
  40413a:	bf00      	nop
  40413c:	004040f5 	.word	0x004040f5
  404140:	004040cd 	.word	0x004040cd
  404144:	00403f5d 	.word	0x00403f5d

00404148 <_spi_set_mode>:
 * \param[in] mode The mode to set
 *
 * \return Setting mode status
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
  404148:	b580      	push	{r7, lr}
  40414a:	b084      	sub	sp, #16
  40414c:	af00      	add	r7, sp, #0
  40414e:	6078      	str	r0, [r7, #4]
  404150:	460b      	mov	r3, r1
  404152:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;

	temp = hri_spi_read_CSR_reg(hw, 0);
  404154:	2100      	movs	r1, #0
  404156:	6878      	ldr	r0, [r7, #4]
  404158:	4b11      	ldr	r3, [pc, #68]	; (4041a0 <_spi_set_mode+0x58>)
  40415a:	4798      	blx	r3
  40415c:	60f8      	str	r0, [r7, #12]
	temp &= ~(SPI_CSR_CPOL | SPI_CSR_NCPHA);
  40415e:	68fb      	ldr	r3, [r7, #12]
  404160:	f023 0303 	bic.w	r3, r3, #3
  404164:	60fb      	str	r3, [r7, #12]
	temp |= (~(mode & 0x01u)) & 0x01u;
  404166:	78fb      	ldrb	r3, [r7, #3]
  404168:	f003 0301 	and.w	r3, r3, #1
  40416c:	2b00      	cmp	r3, #0
  40416e:	bf0c      	ite	eq
  404170:	2301      	moveq	r3, #1
  404172:	2300      	movne	r3, #0
  404174:	b2db      	uxtb	r3, r3
  404176:	461a      	mov	r2, r3
  404178:	68fb      	ldr	r3, [r7, #12]
  40417a:	4313      	orrs	r3, r2
  40417c:	60fb      	str	r3, [r7, #12]
	temp |= (mode & 0x02u) << 0;
  40417e:	78fb      	ldrb	r3, [r7, #3]
  404180:	f003 0302 	and.w	r3, r3, #2
  404184:	68fa      	ldr	r2, [r7, #12]
  404186:	4313      	orrs	r3, r2
  404188:	60fb      	str	r3, [r7, #12]
	hri_spi_write_CSR_reg(hw, 0, temp);
  40418a:	68fa      	ldr	r2, [r7, #12]
  40418c:	2100      	movs	r1, #0
  40418e:	6878      	ldr	r0, [r7, #4]
  404190:	4b04      	ldr	r3, [pc, #16]	; (4041a4 <_spi_set_mode+0x5c>)
  404192:	4798      	blx	r3

	return ERR_NONE;
  404194:	2300      	movs	r3, #0
}
  404196:	4618      	mov	r0, r3
  404198:	3710      	adds	r7, #16
  40419a:	46bd      	mov	sp, r7
  40419c:	bd80      	pop	{r7, pc}
  40419e:	bf00      	nop
  4041a0:	0040408d 	.word	0x0040408d
  4041a4:	00404067 	.word	0x00404067

004041a8 <_spi_set_baudrate>:
 * \param[in] baud_val The baudrate to set
 *
 * \return Setting baudrate status
 */
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
  4041a8:	b580      	push	{r7, lr}
  4041aa:	b082      	sub	sp, #8
  4041ac:	af00      	add	r7, sp, #0
  4041ae:	6078      	str	r0, [r7, #4]
  4041b0:	6039      	str	r1, [r7, #0]
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);
  4041b2:	683b      	ldr	r3, [r7, #0]
  4041b4:	b2db      	uxtb	r3, r3
  4041b6:	461a      	mov	r2, r3
  4041b8:	2100      	movs	r1, #0
  4041ba:	6878      	ldr	r0, [r7, #4]
  4041bc:	4b03      	ldr	r3, [pc, #12]	; (4041cc <_spi_set_baudrate+0x24>)
  4041be:	4798      	blx	r3

	return ERR_NONE;
  4041c0:	2300      	movs	r3, #0
}
  4041c2:	4618      	mov	r0, r3
  4041c4:	3708      	adds	r7, #8
  4041c6:	46bd      	mov	sp, r7
  4041c8:	bd80      	pop	{r7, pc}
  4041ca:	bf00      	nop
  4041cc:	00404021 	.word	0x00404021

004041d0 <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
  4041d0:	b480      	push	{r7}
  4041d2:	b085      	sub	sp, #20
  4041d4:	af00      	add	r7, sp, #0
  4041d6:	6078      	str	r0, [r7, #4]

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4041d8:	687a      	ldr	r2, [r7, #4]
  4041da:	4b08      	ldr	r3, [pc, #32]	; (4041fc <_spi_get_hardware_index+0x2c>)
  4041dc:	4413      	add	r3, r2
  4041de:	0c1b      	lsrs	r3, r3, #16
  4041e0:	73fb      	strb	r3, [r7, #15]

	if (index == 5) {
  4041e2:	7bfb      	ldrb	r3, [r7, #15]
  4041e4:	2b05      	cmp	r3, #5
  4041e6:	d101      	bne.n	4041ec <_spi_get_hardware_index+0x1c>
		return 1;
  4041e8:	2301      	movs	r3, #1
  4041ea:	e000      	b.n	4041ee <_spi_get_hardware_index+0x1e>
	} else {
		return 0;
  4041ec:	2300      	movs	r3, #0
	}
}
  4041ee:	4618      	mov	r0, r3
  4041f0:	3714      	adds	r7, #20
  4041f2:	46bd      	mov	sp, r7
  4041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041f8:	4770      	bx	lr
  4041fa:	bf00      	nop
  4041fc:	bfff8000 	.word	0xbfff8000

00404200 <_spi_get_tx_dma_channel>:
/** \brief Return the SPI TX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
  404200:	b580      	push	{r7, lr}
  404202:	b082      	sub	sp, #8
  404204:	af00      	add	r7, sp, #0
  404206:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  404208:	6878      	ldr	r0, [r7, #4]
  40420a:	4b06      	ldr	r3, [pc, #24]	; (404224 <_spi_get_tx_dma_channel+0x24>)
  40420c:	4798      	blx	r3
  40420e:	4603      	mov	r3, r0
  404210:	2b00      	cmp	r3, #0
  404212:	d101      	bne.n	404218 <_spi_get_tx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_TX_CHANNEL;
  404214:	2302      	movs	r3, #2
  404216:	e000      	b.n	40421a <_spi_get_tx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_TX_CHANNEL;
  404218:	2300      	movs	r3, #0
	}
}
  40421a:	4618      	mov	r0, r3
  40421c:	3708      	adds	r7, #8
  40421e:	46bd      	mov	sp, r7
  404220:	bd80      	pop	{r7, pc}
  404222:	bf00      	nop
  404224:	004041d1 	.word	0x004041d1

00404228 <_spi_get_rx_dma_channel>:
/** \brief Return the SPI RX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
  404228:	b580      	push	{r7, lr}
  40422a:	b082      	sub	sp, #8
  40422c:	af00      	add	r7, sp, #0
  40422e:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  404230:	6878      	ldr	r0, [r7, #4]
  404232:	4b06      	ldr	r3, [pc, #24]	; (40424c <_spi_get_rx_dma_channel+0x24>)
  404234:	4798      	blx	r3
  404236:	4603      	mov	r3, r0
  404238:	2b00      	cmp	r3, #0
  40423a:	d101      	bne.n	404240 <_spi_get_rx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_RX_CHANNEL;
  40423c:	2303      	movs	r3, #3
  40423e:	e000      	b.n	404242 <_spi_get_rx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_RX_CHANNEL;
  404240:	2301      	movs	r3, #1
	}
}
  404242:	4618      	mov	r0, r3
  404244:	3708      	adds	r7, #8
  404246:	46bd      	mov	sp, r7
  404248:	bd80      	pop	{r7, pc}
  40424a:	bf00      	nop
  40424c:	004041d1 	.word	0x004041d1

00404250 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
  404250:	b580      	push	{r7, lr}
  404252:	b084      	sub	sp, #16
  404254:	af00      	add	r7, sp, #0
  404256:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  404258:	687b      	ldr	r3, [r7, #4]
  40425a:	4618      	mov	r0, r3
  40425c:	4b12      	ldr	r3, [pc, #72]	; (4042a8 <_spi_get_regs+0x58>)
  40425e:	4798      	blx	r3
  404260:	4603      	mov	r3, r0
  404262:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  404264:	2300      	movs	r3, #0
  404266:	73fb      	strb	r3, [r7, #15]
  404268:	e015      	b.n	404296 <_spi_get_regs+0x46>
		if (spi_regs[i].number == n) {
  40426a:	7bfa      	ldrb	r2, [r7, #15]
  40426c:	490f      	ldr	r1, [pc, #60]	; (4042ac <_spi_get_regs+0x5c>)
  40426e:	4613      	mov	r3, r2
  404270:	009b      	lsls	r3, r3, #2
  404272:	4413      	add	r3, r2
  404274:	009b      	lsls	r3, r3, #2
  404276:	440b      	add	r3, r1
  404278:	781b      	ldrb	r3, [r3, #0]
  40427a:	7bba      	ldrb	r2, [r7, #14]
  40427c:	429a      	cmp	r2, r3
  40427e:	d107      	bne.n	404290 <_spi_get_regs+0x40>
			return &spi_regs[i];
  404280:	7bfa      	ldrb	r2, [r7, #15]
  404282:	4613      	mov	r3, r2
  404284:	009b      	lsls	r3, r3, #2
  404286:	4413      	add	r3, r2
  404288:	009b      	lsls	r3, r3, #2
  40428a:	4a08      	ldr	r2, [pc, #32]	; (4042ac <_spi_get_regs+0x5c>)
  40428c:	4413      	add	r3, r2
  40428e:	e006      	b.n	40429e <_spi_get_regs+0x4e>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  404290:	7bfb      	ldrb	r3, [r7, #15]
  404292:	3301      	adds	r3, #1
  404294:	73fb      	strb	r3, [r7, #15]
  404296:	7bfb      	ldrb	r3, [r7, #15]
  404298:	2b01      	cmp	r3, #1
  40429a:	d9e6      	bls.n	40426a <_spi_get_regs+0x1a>
		}
	}

	return NULL;
  40429c:	2300      	movs	r3, #0
}
  40429e:	4618      	mov	r0, r3
  4042a0:	3710      	adds	r7, #16
  4042a2:	46bd      	mov	sp, r7
  4042a4:	bd80      	pop	{r7, pc}
  4042a6:	bf00      	nop
  4042a8:	004041d1 	.word	0x004041d1
  4042ac:	00407644 	.word	0x00407644

004042b0 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
  4042b0:	b580      	push	{r7, lr}
  4042b2:	b084      	sub	sp, #16
  4042b4:	af00      	add	r7, sp, #0
  4042b6:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  4042b8:	687b      	ldr	r3, [r7, #4]
  4042ba:	689b      	ldr	r3, [r3, #8]
  4042bc:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.rx) {
  4042be:	68fb      	ldr	r3, [r7, #12]
  4042c0:	689b      	ldr	r3, [r3, #8]
  4042c2:	2b00      	cmp	r3, #0
  4042c4:	d003      	beq.n	4042ce <_spi_dma_rx_complete+0x1e>
		dev->callbacks.rx(resource);
  4042c6:	68fb      	ldr	r3, [r7, #12]
  4042c8:	689b      	ldr	r3, [r3, #8]
  4042ca:	6878      	ldr	r0, [r7, #4]
  4042cc:	4798      	blx	r3
	}
}
  4042ce:	bf00      	nop
  4042d0:	3710      	adds	r7, #16
  4042d2:	46bd      	mov	sp, r7
  4042d4:	bd80      	pop	{r7, pc}

004042d6 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
  4042d6:	b580      	push	{r7, lr}
  4042d8:	b084      	sub	sp, #16
  4042da:	af00      	add	r7, sp, #0
  4042dc:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  4042de:	687b      	ldr	r3, [r7, #4]
  4042e0:	689b      	ldr	r3, [r3, #8]
  4042e2:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.tx) {
  4042e4:	68fb      	ldr	r3, [r7, #12]
  4042e6:	685b      	ldr	r3, [r3, #4]
  4042e8:	2b00      	cmp	r3, #0
  4042ea:	d003      	beq.n	4042f4 <_spi_dma_tx_complete+0x1e>
		dev->callbacks.tx(resource);
  4042ec:	68fb      	ldr	r3, [r7, #12]
  4042ee:	685b      	ldr	r3, [r3, #4]
  4042f0:	6878      	ldr	r0, [r7, #4]
  4042f2:	4798      	blx	r3
	}
}
  4042f4:	bf00      	nop
  4042f6:	3710      	adds	r7, #16
  4042f8:	46bd      	mov	sp, r7
  4042fa:	bd80      	pop	{r7, pc}

004042fc <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
  4042fc:	b580      	push	{r7, lr}
  4042fe:	b084      	sub	sp, #16
  404300:	af00      	add	r7, sp, #0
  404302:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  404304:	687b      	ldr	r3, [r7, #4]
  404306:	689b      	ldr	r3, [r3, #8]
  404308:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.error) {
  40430a:	68fb      	ldr	r3, [r7, #12]
  40430c:	68db      	ldr	r3, [r3, #12]
  40430e:	2b00      	cmp	r3, #0
  404310:	d003      	beq.n	40431a <_spi_dma_error_occured+0x1e>
		dev->callbacks.error(resource);
  404312:	68fb      	ldr	r3, [r7, #12]
  404314:	68db      	ldr	r3, [r3, #12]
  404316:	6878      	ldr	r0, [r7, #4]
  404318:	4798      	blx	r3
	}
}
  40431a:	bf00      	nop
  40431c:	3710      	adds	r7, #16
  40431e:	46bd      	mov	sp, r7
  404320:	bd80      	pop	{r7, pc}

00404322 <_spi_m_get_source_for_dma>:

static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
  404322:	b480      	push	{r7}
  404324:	b083      	sub	sp, #12
  404326:	af00      	add	r7, sp, #0
  404328:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_RDR);
  40432a:	687b      	ldr	r3, [r7, #4]
  40432c:	3308      	adds	r3, #8
}
  40432e:	4618      	mov	r0, r3
  404330:	370c      	adds	r7, #12
  404332:	46bd      	mov	sp, r7
  404334:	f85d 7b04 	ldr.w	r7, [sp], #4
  404338:	4770      	bx	lr

0040433a <_spi_m_get_destination_for_dma>:

static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
  40433a:	b480      	push	{r7}
  40433c:	b083      	sub	sp, #12
  40433e:	af00      	add	r7, sp, #0
  404340:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_TDR);
  404342:	687b      	ldr	r3, [r7, #4]
  404344:	330c      	adds	r3, #12
}
  404346:	4618      	mov	r0, r3
  404348:	370c      	adds	r7, #12
  40434a:	46bd      	mov	sp, r7
  40434c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404350:	4770      	bx	lr
	...

00404354 <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
  404354:	b590      	push	{r4, r7, lr}
  404356:	b085      	sub	sp, #20
  404358:	af00      	add	r7, sp, #0
  40435a:	6078      	str	r0, [r7, #4]
  40435c:	6039      	str	r1, [r7, #0]
	struct _spi_m_dma_dev *    spid = dev;
  40435e:	687b      	ldr	r3, [r7, #4]
  404360:	60fb      	str	r3, [r7, #12]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
  404362:	683b      	ldr	r3, [r7, #0]
  404364:	4618      	mov	r0, r3
  404366:	4b34      	ldr	r3, [pc, #208]	; (404438 <_spi_m_dma_init+0xe4>)
  404368:	4798      	blx	r3
  40436a:	60b8      	str	r0, [r7, #8]

	/* Do hardware initialize. */
	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  40436c:	6838      	ldr	r0, [r7, #0]
  40436e:	4b33      	ldr	r3, [pc, #204]	; (40443c <_spi_m_dma_init+0xe8>)
  404370:	4798      	blx	r3
  404372:	4603      	mov	r3, r0
  404374:	2b00      	cmp	r3, #0
  404376:	d002      	beq.n	40437e <_spi_m_dma_init+0x2a>
		return ERR_DENIED;
  404378:	f06f 0310 	mvn.w	r3, #16
  40437c:	e057      	b.n	40442e <_spi_m_dma_init+0xda>
	}

	spid->prvt = hw;
  40437e:	68fb      	ldr	r3, [r7, #12]
  404380:	683a      	ldr	r2, [r7, #0]
  404382:	601a      	str	r2, [r3, #0]
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
  404384:	2180      	movs	r1, #128	; 0x80
  404386:	6838      	ldr	r0, [r7, #0]
  404388:	4b2d      	ldr	r3, [pc, #180]	; (404440 <_spi_m_dma_init+0xec>)
  40438a:	4798      	blx	r3
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  40438c:	68bb      	ldr	r3, [r7, #8]
  40438e:	685a      	ldr	r2, [r3, #4]
  404390:	4b2c      	ldr	r3, [pc, #176]	; (404444 <_spi_m_dma_init+0xf0>)
  404392:	4013      	ands	r3, r2
  404394:	4619      	mov	r1, r3
  404396:	6838      	ldr	r0, [r7, #0]
  404398:	4b29      	ldr	r3, [pc, #164]	; (404440 <_spi_m_dma_init+0xec>)
  40439a:	4798      	blx	r3
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  40439c:	68bb      	ldr	r3, [r7, #8]
  40439e:	689a      	ldr	r2, [r3, #8]
  4043a0:	4b29      	ldr	r3, [pc, #164]	; (404448 <_spi_m_dma_init+0xf4>)
  4043a2:	4013      	ands	r3, r2
  4043a4:	4a29      	ldr	r2, [pc, #164]	; (40444c <_spi_m_dma_init+0xf8>)
  4043a6:	431a      	orrs	r2, r3
  4043a8:	4611      	mov	r1, r2
  4043aa:	6838      	ldr	r0, [r7, #0]
  4043ac:	4b28      	ldr	r3, [pc, #160]	; (404450 <_spi_m_dma_init+0xfc>)
  4043ae:	4798      	blx	r3
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4043b0:	68bb      	ldr	r3, [r7, #8]
  4043b2:	68db      	ldr	r3, [r3, #12]
  4043b4:	461a      	mov	r2, r3
  4043b6:	2100      	movs	r1, #0
  4043b8:	6838      	ldr	r0, [r7, #0]
  4043ba:	4b26      	ldr	r3, [pc, #152]	; (404454 <_spi_m_dma_init+0x100>)
  4043bc:	4798      	blx	r3

	/* Initialize callbacks: must use them */
	spid->callbacks.error = NULL;
  4043be:	68fb      	ldr	r3, [r7, #12]
  4043c0:	2200      	movs	r2, #0
  4043c2:	60da      	str	r2, [r3, #12]
	spid->callbacks.rx    = NULL;
  4043c4:	68fb      	ldr	r3, [r7, #12]
  4043c6:	2200      	movs	r2, #0
  4043c8:	609a      	str	r2, [r3, #8]
	spid->callbacks.tx    = NULL;
  4043ca:	68fb      	ldr	r3, [r7, #12]
  4043cc:	2200      	movs	r2, #0
  4043ce:	605a      	str	r2, [r3, #4]

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
  4043d0:	687b      	ldr	r3, [r7, #4]
  4043d2:	f103 0418 	add.w	r4, r3, #24
  4043d6:	6838      	ldr	r0, [r7, #0]
  4043d8:	4b1f      	ldr	r3, [pc, #124]	; (404458 <_spi_m_dma_init+0x104>)
  4043da:	4798      	blx	r3
  4043dc:	4603      	mov	r3, r0
  4043de:	4619      	mov	r1, r3
  4043e0:	4620      	mov	r0, r4
  4043e2:	4b1e      	ldr	r3, [pc, #120]	; (40445c <_spi_m_dma_init+0x108>)
  4043e4:	4798      	blx	r3
	dev->resource->back                 = dev;
  4043e6:	687b      	ldr	r3, [r7, #4]
  4043e8:	699b      	ldr	r3, [r3, #24]
  4043ea:	687a      	ldr	r2, [r7, #4]
  4043ec:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
  4043ee:	687b      	ldr	r3, [r7, #4]
  4043f0:	699b      	ldr	r3, [r3, #24]
  4043f2:	4a1b      	ldr	r2, [pc, #108]	; (404460 <_spi_m_dma_init+0x10c>)
  4043f4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  4043f6:	687b      	ldr	r3, [r7, #4]
  4043f8:	699b      	ldr	r3, [r3, #24]
  4043fa:	4a1a      	ldr	r2, [pc, #104]	; (404464 <_spi_m_dma_init+0x110>)
  4043fc:	605a      	str	r2, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
  4043fe:	687b      	ldr	r3, [r7, #4]
  404400:	f103 0418 	add.w	r4, r3, #24
  404404:	6838      	ldr	r0, [r7, #0]
  404406:	4b18      	ldr	r3, [pc, #96]	; (404468 <_spi_m_dma_init+0x114>)
  404408:	4798      	blx	r3
  40440a:	4603      	mov	r3, r0
  40440c:	4619      	mov	r1, r3
  40440e:	4620      	mov	r0, r4
  404410:	4b12      	ldr	r3, [pc, #72]	; (40445c <_spi_m_dma_init+0x108>)
  404412:	4798      	blx	r3
	dev->resource->back                 = dev;
  404414:	687b      	ldr	r3, [r7, #4]
  404416:	699b      	ldr	r3, [r3, #24]
  404418:	687a      	ldr	r2, [r7, #4]
  40441a:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
  40441c:	687b      	ldr	r3, [r7, #4]
  40441e:	699b      	ldr	r3, [r3, #24]
  404420:	4a12      	ldr	r2, [pc, #72]	; (40446c <_spi_m_dma_init+0x118>)
  404422:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  404424:	687b      	ldr	r3, [r7, #4]
  404426:	699b      	ldr	r3, [r3, #24]
  404428:	4a0e      	ldr	r2, [pc, #56]	; (404464 <_spi_m_dma_init+0x110>)
  40442a:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
  40442c:	2300      	movs	r3, #0
}
  40442e:	4618      	mov	r0, r3
  404430:	3714      	adds	r7, #20
  404432:	46bd      	mov	sp, r7
  404434:	bd90      	pop	{r4, r7, pc}
  404436:	bf00      	nop
  404438:	00404251 	.word	0x00404251
  40443c:	00403f99 	.word	0x00403f99
  404440:	004040af 	.word	0x004040af
  404444:	feffff7c 	.word	0xfeffff7c
  404448:	fff1ff6f 	.word	0xfff1ff6f
  40444c:	000e0010 	.word	0x000e0010
  404450:	00403fbf 	.word	0x00403fbf
  404454:	00404067 	.word	0x00404067
  404458:	00404229 	.word	0x00404229
  40445c:	004072d5 	.word	0x004072d5
  404460:	004042b1 	.word	0x004042b1
  404464:	004042fd 	.word	0x004042fd
  404468:	00404201 	.word	0x00404201
  40446c:	004042d7 	.word	0x004042d7

00404470 <_spi_m_dma_enable>:
	ASSERT(dev && dev->prvt);

	return _spi_async_enable(dev->prvt);
}
int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
  404470:	b580      	push	{r7, lr}
  404472:	b082      	sub	sp, #8
  404474:	af00      	add	r7, sp, #0
  404476:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
  404478:	687b      	ldr	r3, [r7, #4]
  40447a:	2b00      	cmp	r3, #0
  40447c:	d005      	beq.n	40448a <_spi_m_dma_enable+0x1a>
  40447e:	687b      	ldr	r3, [r7, #4]
  404480:	681b      	ldr	r3, [r3, #0]
  404482:	2b00      	cmp	r3, #0
  404484:	d001      	beq.n	40448a <_spi_m_dma_enable+0x1a>
  404486:	2301      	movs	r3, #1
  404488:	e000      	b.n	40448c <_spi_m_dma_enable+0x1c>
  40448a:	2300      	movs	r3, #0
  40448c:	f003 0301 	and.w	r3, r3, #1
  404490:	b2db      	uxtb	r3, r3
  404492:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
  404496:	4907      	ldr	r1, [pc, #28]	; (4044b4 <_spi_m_dma_enable+0x44>)
  404498:	4618      	mov	r0, r3
  40449a:	4b07      	ldr	r3, [pc, #28]	; (4044b8 <_spi_m_dma_enable+0x48>)
  40449c:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
  40449e:	687b      	ldr	r3, [r7, #4]
  4044a0:	681b      	ldr	r3, [r3, #0]
  4044a2:	4618      	mov	r0, r3
  4044a4:	4b05      	ldr	r3, [pc, #20]	; (4044bc <_spi_m_dma_enable+0x4c>)
  4044a6:	4798      	blx	r3
  4044a8:	4603      	mov	r3, r0
}
  4044aa:	4618      	mov	r0, r3
  4044ac:	3708      	adds	r7, #8
  4044ae:	46bd      	mov	sp, r7
  4044b0:	bd80      	pop	{r7, pc}
  4044b2:	bf00      	nop
  4044b4:	0040766c 	.word	0x0040766c
  4044b8:	00402d25 	.word	0x00402d25
  4044bc:	00404115 	.word	0x00404115

004044c0 <_spi_m_dma_set_mode>:
	ASSERT(dev && dev->prvt);

	return _spi_set_mode(dev->prvt, mode);
}
int32_t _spi_m_dma_set_mode(struct _spi_m_dma_dev *dev, const enum spi_transfer_mode mode)
{
  4044c0:	b580      	push	{r7, lr}
  4044c2:	b082      	sub	sp, #8
  4044c4:	af00      	add	r7, sp, #0
  4044c6:	6078      	str	r0, [r7, #4]
  4044c8:	460b      	mov	r3, r1
  4044ca:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  4044cc:	687b      	ldr	r3, [r7, #4]
  4044ce:	2b00      	cmp	r3, #0
  4044d0:	d005      	beq.n	4044de <_spi_m_dma_set_mode+0x1e>
  4044d2:	687b      	ldr	r3, [r7, #4]
  4044d4:	681b      	ldr	r3, [r3, #0]
  4044d6:	2b00      	cmp	r3, #0
  4044d8:	d001      	beq.n	4044de <_spi_m_dma_set_mode+0x1e>
  4044da:	2301      	movs	r3, #1
  4044dc:	e000      	b.n	4044e0 <_spi_m_dma_set_mode+0x20>
  4044de:	2300      	movs	r3, #0
  4044e0:	f003 0301 	and.w	r3, r3, #1
  4044e4:	b2db      	uxtb	r3, r3
  4044e6:	f44f 7208 	mov.w	r2, #544	; 0x220
  4044ea:	4908      	ldr	r1, [pc, #32]	; (40450c <_spi_m_dma_set_mode+0x4c>)
  4044ec:	4618      	mov	r0, r3
  4044ee:	4b08      	ldr	r3, [pc, #32]	; (404510 <_spi_m_dma_set_mode+0x50>)
  4044f0:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
  4044f2:	687b      	ldr	r3, [r7, #4]
  4044f4:	681b      	ldr	r3, [r3, #0]
  4044f6:	78fa      	ldrb	r2, [r7, #3]
  4044f8:	4611      	mov	r1, r2
  4044fa:	4618      	mov	r0, r3
  4044fc:	4b05      	ldr	r3, [pc, #20]	; (404514 <_spi_m_dma_set_mode+0x54>)
  4044fe:	4798      	blx	r3
  404500:	4603      	mov	r3, r0
}
  404502:	4618      	mov	r0, r3
  404504:	3708      	adds	r7, #8
  404506:	46bd      	mov	sp, r7
  404508:	bd80      	pop	{r7, pc}
  40450a:	bf00      	nop
  40450c:	0040766c 	.word	0x0040766c
  404510:	00402d25 	.word	0x00402d25
  404514:	00404149 	.word	0x00404149

00404518 <_spi_m_dma_set_baudrate>:
	ASSERT(dev && dev->prvt);

	return _spi_set_baudrate(dev->prvt, baud_val);
}
int32_t _spi_m_dma_set_baudrate(struct _spi_m_dma_dev *dev, const uint32_t baud_val)
{
  404518:	b580      	push	{r7, lr}
  40451a:	b082      	sub	sp, #8
  40451c:	af00      	add	r7, sp, #0
  40451e:	6078      	str	r0, [r7, #4]
  404520:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->prvt);
  404522:	687b      	ldr	r3, [r7, #4]
  404524:	2b00      	cmp	r3, #0
  404526:	d005      	beq.n	404534 <_spi_m_dma_set_baudrate+0x1c>
  404528:	687b      	ldr	r3, [r7, #4]
  40452a:	681b      	ldr	r3, [r3, #0]
  40452c:	2b00      	cmp	r3, #0
  40452e:	d001      	beq.n	404534 <_spi_m_dma_set_baudrate+0x1c>
  404530:	2301      	movs	r3, #1
  404532:	e000      	b.n	404536 <_spi_m_dma_set_baudrate+0x1e>
  404534:	2300      	movs	r3, #0
  404536:	f003 0301 	and.w	r3, r3, #1
  40453a:	b2db      	uxtb	r3, r3
  40453c:	f240 2247 	movw	r2, #583	; 0x247
  404540:	4907      	ldr	r1, [pc, #28]	; (404560 <_spi_m_dma_set_baudrate+0x48>)
  404542:	4618      	mov	r0, r3
  404544:	4b07      	ldr	r3, [pc, #28]	; (404564 <_spi_m_dma_set_baudrate+0x4c>)
  404546:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  404548:	687b      	ldr	r3, [r7, #4]
  40454a:	681b      	ldr	r3, [r3, #0]
  40454c:	6839      	ldr	r1, [r7, #0]
  40454e:	4618      	mov	r0, r3
  404550:	4b05      	ldr	r3, [pc, #20]	; (404568 <_spi_m_dma_set_baudrate+0x50>)
  404552:	4798      	blx	r3
  404554:	4603      	mov	r3, r0
}
  404556:	4618      	mov	r0, r3
  404558:	3708      	adds	r7, #8
  40455a:	46bd      	mov	sp, r7
  40455c:	bd80      	pop	{r7, pc}
  40455e:	bf00      	nop
  404560:	0040766c 	.word	0x0040766c
  404564:	00402d25 	.word	0x00402d25
  404568:	004041a9 	.word	0x004041a9

0040456c <_spi_m_dma_set_char_size>:
	ASSERT(dev && dev->prvt);

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}
int32_t _spi_m_dma_set_char_size(struct _spi_m_dma_dev *dev, const enum spi_char_size char_size)
{
  40456c:	b580      	push	{r7, lr}
  40456e:	b082      	sub	sp, #8
  404570:	af00      	add	r7, sp, #0
  404572:	6078      	str	r0, [r7, #4]
  404574:	460b      	mov	r3, r1
  404576:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  404578:	687b      	ldr	r3, [r7, #4]
  40457a:	2b00      	cmp	r3, #0
  40457c:	d005      	beq.n	40458a <_spi_m_dma_set_char_size+0x1e>
  40457e:	687b      	ldr	r3, [r7, #4]
  404580:	681b      	ldr	r3, [r3, #0]
  404582:	2b00      	cmp	r3, #0
  404584:	d001      	beq.n	40458a <_spi_m_dma_set_char_size+0x1e>
  404586:	2301      	movs	r3, #1
  404588:	e000      	b.n	40458c <_spi_m_dma_set_char_size+0x20>
  40458a:	2300      	movs	r3, #0
  40458c:	f003 0301 	and.w	r3, r3, #1
  404590:	b2db      	uxtb	r3, r3
  404592:	f240 2272 	movw	r2, #626	; 0x272
  404596:	490a      	ldr	r1, [pc, #40]	; (4045c0 <_spi_m_dma_set_char_size+0x54>)
  404598:	4618      	mov	r0, r3
  40459a:	4b0a      	ldr	r3, [pc, #40]	; (4045c4 <_spi_m_dma_set_char_size+0x58>)
  40459c:	4798      	blx	r3

	hri_spi_write_CSR_BITS_bf(dev->prvt, 0, char_size);
  40459e:	687b      	ldr	r3, [r7, #4]
  4045a0:	681b      	ldr	r3, [r3, #0]
  4045a2:	78fa      	ldrb	r2, [r7, #3]
  4045a4:	2100      	movs	r1, #0
  4045a6:	4618      	mov	r0, r3
  4045a8:	4b07      	ldr	r3, [pc, #28]	; (4045c8 <_spi_m_dma_set_char_size+0x5c>)
  4045aa:	4798      	blx	r3

	return (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
  4045ac:	78fb      	ldrb	r3, [r7, #3]
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d101      	bne.n	4045b6 <_spi_m_dma_set_char_size+0x4a>
  4045b2:	2301      	movs	r3, #1
  4045b4:	e000      	b.n	4045b8 <_spi_m_dma_set_char_size+0x4c>
  4045b6:	2302      	movs	r3, #2
}
  4045b8:	4618      	mov	r0, r3
  4045ba:	3708      	adds	r7, #8
  4045bc:	46bd      	mov	sp, r7
  4045be:	bd80      	pop	{r7, pc}
  4045c0:	0040766c 	.word	0x0040766c
  4045c4:	00402d25 	.word	0x00402d25
  4045c8:	00403fdb 	.word	0x00403fdb

004045cc <_spi_m_dma_register_callback>:
                                const bool state)
{
	_spi_m_async_set_irq_state(device, type, state);
}
void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
  4045cc:	b580      	push	{r7, lr}
  4045ce:	b084      	sub	sp, #16
  4045d0:	af00      	add	r7, sp, #0
  4045d2:	60f8      	str	r0, [r7, #12]
  4045d4:	460b      	mov	r3, r1
  4045d6:	607a      	str	r2, [r7, #4]
  4045d8:	72fb      	strb	r3, [r7, #11]
	switch (type) {
  4045da:	7afb      	ldrb	r3, [r7, #11]
  4045dc:	2b03      	cmp	r3, #3
  4045de:	d85c      	bhi.n	40469a <_spi_m_dma_register_callback+0xce>
  4045e0:	a201      	add	r2, pc, #4	; (adr r2, 4045e8 <_spi_m_dma_register_callback+0x1c>)
  4045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4045e6:	bf00      	nop
  4045e8:	004045f9 	.word	0x004045f9
  4045ec:	00404623 	.word	0x00404623
  4045f0:	0040464d 	.word	0x0040464d
  4045f4:	00404699 	.word	0x00404699
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
  4045f8:	68fb      	ldr	r3, [r7, #12]
  4045fa:	687a      	ldr	r2, [r7, #4]
  4045fc:	605a      	str	r2, [r3, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  4045fe:	68fb      	ldr	r3, [r7, #12]
  404600:	681b      	ldr	r3, [r3, #0]
  404602:	4618      	mov	r0, r3
  404604:	4b27      	ldr	r3, [pc, #156]	; (4046a4 <_spi_m_dma_register_callback+0xd8>)
  404606:	4798      	blx	r3
  404608:	4603      	mov	r3, r0
  40460a:	4618      	mov	r0, r3
  40460c:	687b      	ldr	r3, [r7, #4]
  40460e:	2b00      	cmp	r3, #0
  404610:	bf14      	ite	ne
  404612:	2301      	movne	r3, #1
  404614:	2300      	moveq	r3, #0
  404616:	b2db      	uxtb	r3, r3
  404618:	461a      	mov	r2, r3
  40461a:	2100      	movs	r1, #0
  40461c:	4b22      	ldr	r3, [pc, #136]	; (4046a8 <_spi_m_dma_register_callback+0xdc>)
  40461e:	4798      	blx	r3
		break;
  404620:	e03b      	b.n	40469a <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
  404622:	68fb      	ldr	r3, [r7, #12]
  404624:	687a      	ldr	r2, [r7, #4]
  404626:	609a      	str	r2, [r3, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  404628:	68fb      	ldr	r3, [r7, #12]
  40462a:	681b      	ldr	r3, [r3, #0]
  40462c:	4618      	mov	r0, r3
  40462e:	4b1f      	ldr	r3, [pc, #124]	; (4046ac <_spi_m_dma_register_callback+0xe0>)
  404630:	4798      	blx	r3
  404632:	4603      	mov	r3, r0
  404634:	4618      	mov	r0, r3
  404636:	687b      	ldr	r3, [r7, #4]
  404638:	2b00      	cmp	r3, #0
  40463a:	bf14      	ite	ne
  40463c:	2301      	movne	r3, #1
  40463e:	2300      	moveq	r3, #0
  404640:	b2db      	uxtb	r3, r3
  404642:	461a      	mov	r2, r3
  404644:	2100      	movs	r1, #0
  404646:	4b18      	ldr	r3, [pc, #96]	; (4046a8 <_spi_m_dma_register_callback+0xdc>)
  404648:	4798      	blx	r3
		break;
  40464a:	e026      	b.n	40469a <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
  40464c:	68fb      	ldr	r3, [r7, #12]
  40464e:	687a      	ldr	r2, [r7, #4]
  404650:	60da      	str	r2, [r3, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  404652:	68fb      	ldr	r3, [r7, #12]
  404654:	681b      	ldr	r3, [r3, #0]
  404656:	4618      	mov	r0, r3
  404658:	4b14      	ldr	r3, [pc, #80]	; (4046ac <_spi_m_dma_register_callback+0xe0>)
  40465a:	4798      	blx	r3
  40465c:	4603      	mov	r3, r0
  40465e:	4618      	mov	r0, r3
  404660:	687b      	ldr	r3, [r7, #4]
  404662:	2b00      	cmp	r3, #0
  404664:	bf14      	ite	ne
  404666:	2301      	movne	r3, #1
  404668:	2300      	moveq	r3, #0
  40466a:	b2db      	uxtb	r3, r3
  40466c:	461a      	mov	r2, r3
  40466e:	2101      	movs	r1, #1
  404670:	4b0d      	ldr	r3, [pc, #52]	; (4046a8 <_spi_m_dma_register_callback+0xdc>)
  404672:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  404674:	68fb      	ldr	r3, [r7, #12]
  404676:	681b      	ldr	r3, [r3, #0]
  404678:	4618      	mov	r0, r3
  40467a:	4b0a      	ldr	r3, [pc, #40]	; (4046a4 <_spi_m_dma_register_callback+0xd8>)
  40467c:	4798      	blx	r3
  40467e:	4603      	mov	r3, r0
  404680:	4618      	mov	r0, r3
  404682:	687b      	ldr	r3, [r7, #4]
  404684:	2b00      	cmp	r3, #0
  404686:	bf14      	ite	ne
  404688:	2301      	movne	r3, #1
  40468a:	2300      	moveq	r3, #0
  40468c:	b2db      	uxtb	r3, r3
  40468e:	461a      	mov	r2, r3
  404690:	2101      	movs	r1, #1
  404692:	4b05      	ldr	r3, [pc, #20]	; (4046a8 <_spi_m_dma_register_callback+0xdc>)
  404694:	4798      	blx	r3
		break;
  404696:	e000      	b.n	40469a <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_N:
		break;
  404698:	bf00      	nop
	}
}
  40469a:	bf00      	nop
  40469c:	3710      	adds	r7, #16
  40469e:	46bd      	mov	sp, r7
  4046a0:	bd80      	pop	{r7, pc}
  4046a2:	bf00      	nop
  4046a4:	00404201 	.word	0x00404201
  4046a8:	00407305 	.word	0x00407305
  4046ac:	00404229 	.word	0x00404229

004046b0 <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
  4046b0:	b580      	push	{r7, lr}
  4046b2:	b086      	sub	sp, #24
  4046b4:	af00      	add	r7, sp, #0
  4046b6:	60f8      	str	r0, [r7, #12]
  4046b8:	60b9      	str	r1, [r7, #8]
  4046ba:	607a      	str	r2, [r7, #4]
  4046bc:	807b      	strh	r3, [r7, #2]
	const struct spi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
  4046be:	68fb      	ldr	r3, [r7, #12]
  4046c0:	681b      	ldr	r3, [r3, #0]
  4046c2:	4618      	mov	r0, r3
  4046c4:	4b39      	ldr	r3, [pc, #228]	; (4047ac <_spi_m_dma_transfer+0xfc>)
  4046c6:	4798      	blx	r3
  4046c8:	6178      	str	r0, [r7, #20]
	uint8_t                    rx_ch = _spi_get_rx_dma_channel(dev->prvt);
  4046ca:	68fb      	ldr	r3, [r7, #12]
  4046cc:	681b      	ldr	r3, [r3, #0]
  4046ce:	4618      	mov	r0, r3
  4046d0:	4b37      	ldr	r3, [pc, #220]	; (4047b0 <_spi_m_dma_transfer+0x100>)
  4046d2:	4798      	blx	r3
  4046d4:	4603      	mov	r3, r0
  4046d6:	74fb      	strb	r3, [r7, #19]
	uint8_t                    tx_ch = _spi_get_tx_dma_channel(dev->prvt);
  4046d8:	68fb      	ldr	r3, [r7, #12]
  4046da:	681b      	ldr	r3, [r3, #0]
  4046dc:	4618      	mov	r0, r3
  4046de:	4b35      	ldr	r3, [pc, #212]	; (4047b4 <_spi_m_dma_transfer+0x104>)
  4046e0:	4798      	blx	r3
  4046e2:	4603      	mov	r3, r0
  4046e4:	74bb      	strb	r3, [r7, #18]

	if (rxbuf) {
  4046e6:	687b      	ldr	r3, [r7, #4]
  4046e8:	2b00      	cmp	r3, #0
  4046ea:	d01b      	beq.n	404724 <_spi_m_dma_transfer+0x74>
		/* Enable spi rx */
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
  4046ec:	68fb      	ldr	r3, [r7, #12]
  4046ee:	681b      	ldr	r3, [r3, #0]
  4046f0:	4618      	mov	r0, r3
  4046f2:	4b31      	ldr	r3, [pc, #196]	; (4047b8 <_spi_m_dma_transfer+0x108>)
  4046f4:	4798      	blx	r3
  4046f6:	4603      	mov	r3, r0
  4046f8:	461a      	mov	r2, r3
  4046fa:	7cfb      	ldrb	r3, [r7, #19]
  4046fc:	4611      	mov	r1, r2
  4046fe:	4618      	mov	r0, r3
  404700:	4b2e      	ldr	r3, [pc, #184]	; (4047bc <_spi_m_dma_transfer+0x10c>)
  404702:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
  404704:	7cfb      	ldrb	r3, [r7, #19]
  404706:	6879      	ldr	r1, [r7, #4]
  404708:	4618      	mov	r0, r3
  40470a:	4b2d      	ldr	r3, [pc, #180]	; (4047c0 <_spi_m_dma_transfer+0x110>)
  40470c:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
  40470e:	887a      	ldrh	r2, [r7, #2]
  404710:	7cfb      	ldrb	r3, [r7, #19]
  404712:	4611      	mov	r1, r2
  404714:	4618      	mov	r0, r3
  404716:	4b2b      	ldr	r3, [pc, #172]	; (4047c4 <_spi_m_dma_transfer+0x114>)
  404718:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
  40471a:	7cfb      	ldrb	r3, [r7, #19]
  40471c:	2100      	movs	r1, #0
  40471e:	4618      	mov	r0, r3
  404720:	4b29      	ldr	r3, [pc, #164]	; (4047c8 <_spi_m_dma_transfer+0x118>)
  404722:	4798      	blx	r3
	}

	if (txbuf) {
  404724:	68bb      	ldr	r3, [r7, #8]
  404726:	2b00      	cmp	r3, #0
  404728:	d017      	beq.n	40475a <_spi_m_dma_transfer+0xaa>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
  40472a:	7cbb      	ldrb	r3, [r7, #18]
  40472c:	68b9      	ldr	r1, [r7, #8]
  40472e:	4618      	mov	r0, r3
  404730:	4b22      	ldr	r3, [pc, #136]	; (4047bc <_spi_m_dma_transfer+0x10c>)
  404732:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  404734:	68fb      	ldr	r3, [r7, #12]
  404736:	681b      	ldr	r3, [r3, #0]
  404738:	4618      	mov	r0, r3
  40473a:	4b24      	ldr	r3, [pc, #144]	; (4047cc <_spi_m_dma_transfer+0x11c>)
  40473c:	4798      	blx	r3
  40473e:	4603      	mov	r3, r0
  404740:	461a      	mov	r2, r3
  404742:	7cbb      	ldrb	r3, [r7, #18]
  404744:	4611      	mov	r1, r2
  404746:	4618      	mov	r0, r3
  404748:	4b1d      	ldr	r3, [pc, #116]	; (4047c0 <_spi_m_dma_transfer+0x110>)
  40474a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  40474c:	887a      	ldrh	r2, [r7, #2]
  40474e:	7cbb      	ldrb	r3, [r7, #18]
  404750:	4611      	mov	r1, r2
  404752:	4618      	mov	r0, r3
  404754:	4b1b      	ldr	r3, [pc, #108]	; (4047c4 <_spi_m_dma_transfer+0x114>)
  404756:	4798      	blx	r3
  404758:	e01e      	b.n	404798 <_spi_m_dma_transfer+0xe8>
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
  40475a:	697b      	ldr	r3, [r7, #20]
  40475c:	f103 0210 	add.w	r2, r3, #16
  404760:	7cbb      	ldrb	r3, [r7, #18]
  404762:	4611      	mov	r1, r2
  404764:	4618      	mov	r0, r3
  404766:	4b15      	ldr	r3, [pc, #84]	; (4047bc <_spi_m_dma_transfer+0x10c>)
  404768:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  40476a:	68fb      	ldr	r3, [r7, #12]
  40476c:	681b      	ldr	r3, [r3, #0]
  40476e:	4618      	mov	r0, r3
  404770:	4b16      	ldr	r3, [pc, #88]	; (4047cc <_spi_m_dma_transfer+0x11c>)
  404772:	4798      	blx	r3
  404774:	4603      	mov	r3, r0
  404776:	461a      	mov	r2, r3
  404778:	7cbb      	ldrb	r3, [r7, #18]
  40477a:	4611      	mov	r1, r2
  40477c:	4618      	mov	r0, r3
  40477e:	4b10      	ldr	r3, [pc, #64]	; (4047c0 <_spi_m_dma_transfer+0x110>)
  404780:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
  404782:	7cbb      	ldrb	r3, [r7, #18]
  404784:	2100      	movs	r1, #0
  404786:	4618      	mov	r0, r3
  404788:	4b11      	ldr	r3, [pc, #68]	; (4047d0 <_spi_m_dma_transfer+0x120>)
  40478a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  40478c:	887a      	ldrh	r2, [r7, #2]
  40478e:	7cbb      	ldrb	r3, [r7, #18]
  404790:	4611      	mov	r1, r2
  404792:	4618      	mov	r0, r3
  404794:	4b0b      	ldr	r3, [pc, #44]	; (4047c4 <_spi_m_dma_transfer+0x114>)
  404796:	4798      	blx	r3
	}
	_dma_enable_transaction(tx_ch, false);
  404798:	7cbb      	ldrb	r3, [r7, #18]
  40479a:	2100      	movs	r1, #0
  40479c:	4618      	mov	r0, r3
  40479e:	4b0a      	ldr	r3, [pc, #40]	; (4047c8 <_spi_m_dma_transfer+0x118>)
  4047a0:	4798      	blx	r3

	return ERR_NONE;
  4047a2:	2300      	movs	r3, #0
}
  4047a4:	4618      	mov	r0, r3
  4047a6:	3718      	adds	r7, #24
  4047a8:	46bd      	mov	sp, r7
  4047aa:	bd80      	pop	{r7, pc}
  4047ac:	00404251 	.word	0x00404251
  4047b0:	00404229 	.word	0x00404229
  4047b4:	00404201 	.word	0x00404201
  4047b8:	00404323 	.word	0x00404323
  4047bc:	004071a9 	.word	0x004071a9
  4047c0:	0040717d 	.word	0x0040717d
  4047c4:	00407245 	.word	0x00407245
  4047c8:	00407289 	.word	0x00407289
  4047cc:	0040433b 	.word	0x0040433b
  4047d0:	004071d5 	.word	0x004071d5

004047d4 <hri_twihs_get_SR_TXCOMP_bit>:
{
	((Twihs *)hw)->TWIHS_IDR = mask;
}

static inline bool hri_twihs_get_SR_TXCOMP_bit(const void *const hw)
{
  4047d4:	b480      	push	{r7}
  4047d6:	b083      	sub	sp, #12
  4047d8:	af00      	add	r7, sp, #0
  4047da:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  4047dc:	687b      	ldr	r3, [r7, #4]
  4047de:	6a1b      	ldr	r3, [r3, #32]
  4047e0:	f003 0301 	and.w	r3, r3, #1
  4047e4:	2b00      	cmp	r3, #0
  4047e6:	bf14      	ite	ne
  4047e8:	2301      	movne	r3, #1
  4047ea:	2300      	moveq	r3, #0
  4047ec:	b2db      	uxtb	r3, r3
}
  4047ee:	4618      	mov	r0, r3
  4047f0:	370c      	adds	r7, #12
  4047f2:	46bd      	mov	sp, r7
  4047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047f8:	4770      	bx	lr

004047fa <hri_twihs_get_SR_RXRDY_bit>:

static inline bool hri_twihs_get_SR_RXRDY_bit(const void *const hw)
{
  4047fa:	b480      	push	{r7}
  4047fc:	b083      	sub	sp, #12
  4047fe:	af00      	add	r7, sp, #0
  404800:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  404802:	687b      	ldr	r3, [r7, #4]
  404804:	6a1b      	ldr	r3, [r3, #32]
  404806:	f003 0302 	and.w	r3, r3, #2
  40480a:	2b00      	cmp	r3, #0
  40480c:	bf14      	ite	ne
  40480e:	2301      	movne	r3, #1
  404810:	2300      	moveq	r3, #0
  404812:	b2db      	uxtb	r3, r3
}
  404814:	4618      	mov	r0, r3
  404816:	370c      	adds	r7, #12
  404818:	46bd      	mov	sp, r7
  40481a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40481e:	4770      	bx	lr

00404820 <hri_twihs_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_sr_reg_t hri_twihs_read_SR_reg(const void *const hw)
{
  404820:	b480      	push	{r7}
  404822:	b083      	sub	sp, #12
  404824:	af00      	add	r7, sp, #0
  404826:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_SR;
  404828:	687b      	ldr	r3, [r7, #4]
  40482a:	6a1b      	ldr	r3, [r3, #32]
}
  40482c:	4618      	mov	r0, r3
  40482e:	370c      	adds	r7, #12
  404830:	46bd      	mov	sp, r7
  404832:	f85d 7b04 	ldr.w	r7, [sp], #4
  404836:	4770      	bx	lr

00404838 <hri_twihs_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_rhr_reg_t hri_twihs_read_RHR_reg(const void *const hw)
{
  404838:	b480      	push	{r7}
  40483a:	b083      	sub	sp, #12
  40483c:	af00      	add	r7, sp, #0
  40483e:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_RHR;
  404840:	687b      	ldr	r3, [r7, #4]
  404842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  404844:	4618      	mov	r0, r3
  404846:	370c      	adds	r7, #12
  404848:	46bd      	mov	sp, r7
  40484a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40484e:	4770      	bx	lr

00404850 <hri_twihs_write_MMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_MMR_reg(const void *const hw, hri_twihs_mmr_reg_t data)
{
  404850:	b480      	push	{r7}
  404852:	b083      	sub	sp, #12
  404854:	af00      	add	r7, sp, #0
  404856:	6078      	str	r0, [r7, #4]
  404858:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_MMR = data;
  40485a:	687b      	ldr	r3, [r7, #4]
  40485c:	683a      	ldr	r2, [r7, #0]
  40485e:	605a      	str	r2, [r3, #4]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404860:	bf00      	nop
  404862:	370c      	adds	r7, #12
  404864:	46bd      	mov	sp, r7
  404866:	f85d 7b04 	ldr.w	r7, [sp], #4
  40486a:	4770      	bx	lr

0040486c <hri_twihs_write_IADR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_IADR_reg(const void *const hw, hri_twihs_iadr_reg_t data)
{
  40486c:	b480      	push	{r7}
  40486e:	b083      	sub	sp, #12
  404870:	af00      	add	r7, sp, #0
  404872:	6078      	str	r0, [r7, #4]
  404874:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_IADR = data;
  404876:	687b      	ldr	r3, [r7, #4]
  404878:	683a      	ldr	r2, [r7, #0]
  40487a:	60da      	str	r2, [r3, #12]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  40487c:	bf00      	nop
  40487e:	370c      	adds	r7, #12
  404880:	46bd      	mov	sp, r7
  404882:	f85d 7b04 	ldr.w	r7, [sp], #4
  404886:	4770      	bx	lr

00404888 <hri_twihs_write_CWGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_CWGR_reg(const void *const hw, hri_twihs_cwgr_reg_t data)
{
  404888:	b480      	push	{r7}
  40488a:	b083      	sub	sp, #12
  40488c:	af00      	add	r7, sp, #0
  40488e:	6078      	str	r0, [r7, #4]
  404890:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CWGR = data;
  404892:	687b      	ldr	r3, [r7, #4]
  404894:	683a      	ldr	r2, [r7, #0]
  404896:	611a      	str	r2, [r3, #16]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404898:	bf00      	nop
  40489a:	370c      	adds	r7, #12
  40489c:	46bd      	mov	sp, r7
  40489e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048a2:	4770      	bx	lr

004048a4 <hri_twihs_write_SMBTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_SMBTR_reg(const void *const hw, hri_twihs_smbtr_reg_t data)
{
  4048a4:	b480      	push	{r7}
  4048a6:	b083      	sub	sp, #12
  4048a8:	af00      	add	r7, sp, #0
  4048aa:	6078      	str	r0, [r7, #4]
  4048ac:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_SMBTR = data;
  4048ae:	687b      	ldr	r3, [r7, #4]
  4048b0:	683a      	ldr	r2, [r7, #0]
  4048b2:	639a      	str	r2, [r3, #56]	; 0x38
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4048b4:	bf00      	nop
  4048b6:	370c      	adds	r7, #12
  4048b8:	46bd      	mov	sp, r7
  4048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048be:	4770      	bx	lr

004048c0 <hri_twihs_write_FILTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_FILTR_reg(const void *const hw, hri_twihs_filtr_reg_t data)
{
  4048c0:	b480      	push	{r7}
  4048c2:	b083      	sub	sp, #12
  4048c4:	af00      	add	r7, sp, #0
  4048c6:	6078      	str	r0, [r7, #4]
  4048c8:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_FILTR = data;
  4048ca:	687b      	ldr	r3, [r7, #4]
  4048cc:	683a      	ldr	r2, [r7, #0]
  4048ce:	645a      	str	r2, [r3, #68]	; 0x44
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4048d0:	bf00      	nop
  4048d2:	370c      	adds	r7, #12
  4048d4:	46bd      	mov	sp, r7
  4048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048da:	4770      	bx	lr

004048dc <hri_twihs_write_CR_reg>:
{
	return ((Twihs *)hw)->TWIHS_WPMR;
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
  4048dc:	b480      	push	{r7}
  4048de:	b083      	sub	sp, #12
  4048e0:	af00      	add	r7, sp, #0
  4048e2:	6078      	str	r0, [r7, #4]
  4048e4:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  4048e6:	687b      	ldr	r3, [r7, #4]
  4048e8:	683a      	ldr	r2, [r7, #0]
  4048ea:	601a      	str	r2, [r3, #0]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4048ec:	bf00      	nop
  4048ee:	370c      	adds	r7, #12
  4048f0:	46bd      	mov	sp, r7
  4048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048f6:	4770      	bx	lr

004048f8 <hri_twihs_write_THR_reg>:

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
  4048f8:	b480      	push	{r7}
  4048fa:	b083      	sub	sp, #12
  4048fc:	af00      	add	r7, sp, #0
  4048fe:	6078      	str	r0, [r7, #4]
  404900:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  404902:	687b      	ldr	r3, [r7, #4]
  404904:	683a      	ldr	r2, [r7, #0]
  404906:	635a      	str	r2, [r3, #52]	; 0x34
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404908:	bf00      	nop
  40490a:	370c      	adds	r7, #12
  40490c:	46bd      	mov	sp, r7
  40490e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404912:	4770      	bx	lr

00404914 <_get_i2cm_sync_cfg>:

/**
 * \berif Retrieve I2C Master Sync configuration instance
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
  404914:	b480      	push	{r7}
  404916:	b085      	sub	sp, #20
  404918:	af00      	add	r7, sp, #0
  40491a:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  40491c:	2300      	movs	r3, #0
  40491e:	73fb      	strb	r3, [r7, #15]
  404920:	e015      	b.n	40494e <_get_i2cm_sync_cfg+0x3a>
		if (_i2cm_sync_cfgs[i].hw == hw) {
  404922:	7bfa      	ldrb	r2, [r7, #15]
  404924:	490f      	ldr	r1, [pc, #60]	; (404964 <_get_i2cm_sync_cfg+0x50>)
  404926:	4613      	mov	r3, r2
  404928:	005b      	lsls	r3, r3, #1
  40492a:	4413      	add	r3, r2
  40492c:	00db      	lsls	r3, r3, #3
  40492e:	440b      	add	r3, r1
  404930:	681a      	ldr	r2, [r3, #0]
  404932:	687b      	ldr	r3, [r7, #4]
  404934:	429a      	cmp	r2, r3
  404936:	d107      	bne.n	404948 <_get_i2cm_sync_cfg+0x34>
			return &(_i2cm_sync_cfgs[i]);
  404938:	7bfa      	ldrb	r2, [r7, #15]
  40493a:	4613      	mov	r3, r2
  40493c:	005b      	lsls	r3, r3, #1
  40493e:	4413      	add	r3, r2
  404940:	00db      	lsls	r3, r3, #3
  404942:	4a08      	ldr	r2, [pc, #32]	; (404964 <_get_i2cm_sync_cfg+0x50>)
  404944:	4413      	add	r3, r2
  404946:	e006      	b.n	404956 <_get_i2cm_sync_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  404948:	7bfb      	ldrb	r3, [r7, #15]
  40494a:	3301      	adds	r3, #1
  40494c:	73fb      	strb	r3, [r7, #15]
  40494e:	7bfb      	ldrb	r3, [r7, #15]
  404950:	2b01      	cmp	r3, #1
  404952:	d9e6      	bls.n	404922 <_get_i2cm_sync_cfg+0xe>
		}
	}
	return NULL;
  404954:	2300      	movs	r3, #0
}
  404956:	4618      	mov	r0, r3
  404958:	3714      	adds	r7, #20
  40495a:	46bd      	mov	sp, r7
  40495c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404960:	4770      	bx	lr
  404962:	bf00      	nop
  404964:	00407684 	.word	0x00407684

00404968 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  404968:	b580      	push	{r7, lr}
  40496a:	b084      	sub	sp, #16
  40496c:	af00      	add	r7, sp, #0
  40496e:	6078      	str	r0, [r7, #4]
  404970:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
  404972:	687b      	ldr	r3, [r7, #4]
  404974:	2b00      	cmp	r3, #0
  404976:	d004      	beq.n	404982 <_i2c_m_sync_init+0x1a>
  404978:	683b      	ldr	r3, [r7, #0]
  40497a:	2b00      	cmp	r3, #0
  40497c:	d001      	beq.n	404982 <_i2c_m_sync_init+0x1a>
  40497e:	2301      	movs	r3, #1
  404980:	e000      	b.n	404984 <_i2c_m_sync_init+0x1c>
  404982:	2300      	movs	r3, #0
  404984:	f003 0301 	and.w	r3, r3, #1
  404988:	b2db      	uxtb	r3, r3
  40498a:	227e      	movs	r2, #126	; 0x7e
  40498c:	4918      	ldr	r1, [pc, #96]	; (4049f0 <_i2c_m_sync_init+0x88>)
  40498e:	4618      	mov	r0, r3
  404990:	4b18      	ldr	r3, [pc, #96]	; (4049f4 <_i2c_m_sync_init+0x8c>)
  404992:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  404994:	687b      	ldr	r3, [r7, #4]
  404996:	683a      	ldr	r2, [r7, #0]
  404998:	611a      	str	r2, [r3, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  40499a:	687b      	ldr	r3, [r7, #4]
  40499c:	691b      	ldr	r3, [r3, #16]
  40499e:	4618      	mov	r0, r3
  4049a0:	4b15      	ldr	r3, [pc, #84]	; (4049f8 <_i2c_m_sync_init+0x90>)
  4049a2:	4798      	blx	r3
  4049a4:	60f8      	str	r0, [r7, #12]

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  4049a6:	687b      	ldr	r3, [r7, #4]
  4049a8:	691a      	ldr	r2, [r3, #16]
  4049aa:	68fb      	ldr	r3, [r7, #12]
  4049ac:	685b      	ldr	r3, [r3, #4]
  4049ae:	4619      	mov	r1, r3
  4049b0:	4610      	mov	r0, r2
  4049b2:	4b12      	ldr	r3, [pc, #72]	; (4049fc <_i2c_m_sync_init+0x94>)
  4049b4:	4798      	blx	r3
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  4049b6:	687b      	ldr	r3, [r7, #4]
  4049b8:	691a      	ldr	r2, [r3, #16]
  4049ba:	68fb      	ldr	r3, [r7, #12]
  4049bc:	689b      	ldr	r3, [r3, #8]
  4049be:	4619      	mov	r1, r3
  4049c0:	4610      	mov	r0, r2
  4049c2:	4b0f      	ldr	r3, [pc, #60]	; (404a00 <_i2c_m_sync_init+0x98>)
  4049c4:	4798      	blx	r3
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  4049c6:	687b      	ldr	r3, [r7, #4]
  4049c8:	691a      	ldr	r2, [r3, #16]
  4049ca:	68fb      	ldr	r3, [r7, #12]
  4049cc:	68db      	ldr	r3, [r3, #12]
  4049ce:	4619      	mov	r1, r3
  4049d0:	4610      	mov	r0, r2
  4049d2:	4b0c      	ldr	r3, [pc, #48]	; (404a04 <_i2c_m_sync_init+0x9c>)
  4049d4:	4798      	blx	r3
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  4049d6:	687b      	ldr	r3, [r7, #4]
  4049d8:	691a      	ldr	r2, [r3, #16]
  4049da:	68fb      	ldr	r3, [r7, #12]
  4049dc:	691b      	ldr	r3, [r3, #16]
  4049de:	4619      	mov	r1, r3
  4049e0:	4610      	mov	r0, r2
  4049e2:	4b09      	ldr	r3, [pc, #36]	; (404a08 <_i2c_m_sync_init+0xa0>)
  4049e4:	4798      	blx	r3

	return ERR_NONE;
  4049e6:	2300      	movs	r3, #0
}
  4049e8:	4618      	mov	r0, r3
  4049ea:	3710      	adds	r7, #16
  4049ec:	46bd      	mov	sp, r7
  4049ee:	bd80      	pop	{r7, pc}
  4049f0:	004076b4 	.word	0x004076b4
  4049f4:	00402d25 	.word	0x00402d25
  4049f8:	00404915 	.word	0x00404915
  4049fc:	004048dd 	.word	0x004048dd
  404a00:	004048a5 	.word	0x004048a5
  404a04:	004048c1 	.word	0x004048c1
  404a08:	00404889 	.word	0x00404889

00404a0c <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404a0c:	b580      	push	{r7, lr}
  404a0e:	b082      	sub	sp, #8
  404a10:	af00      	add	r7, sp, #0
  404a12:	6078      	str	r0, [r7, #4]
  404a14:	6039      	str	r1, [r7, #0]
	ASSERT(dev && msg);
  404a16:	687b      	ldr	r3, [r7, #4]
  404a18:	2b00      	cmp	r3, #0
  404a1a:	d004      	beq.n	404a26 <_i2c_m_sync_transfer+0x1a>
  404a1c:	683b      	ldr	r3, [r7, #0]
  404a1e:	2b00      	cmp	r3, #0
  404a20:	d001      	beq.n	404a26 <_i2c_m_sync_transfer+0x1a>
  404a22:	2301      	movs	r3, #1
  404a24:	e000      	b.n	404a28 <_i2c_m_sync_transfer+0x1c>
  404a26:	2300      	movs	r3, #0
  404a28:	f003 0301 	and.w	r3, r3, #1
  404a2c:	b2db      	uxtb	r3, r3
  404a2e:	22c0      	movs	r2, #192	; 0xc0
  404a30:	4911      	ldr	r1, [pc, #68]	; (404a78 <_i2c_m_sync_transfer+0x6c>)
  404a32:	4618      	mov	r0, r3
  404a34:	4b11      	ldr	r3, [pc, #68]	; (404a7c <_i2c_m_sync_transfer+0x70>)
  404a36:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  404a38:	687b      	ldr	r3, [r7, #4]
  404a3a:	885b      	ldrh	r3, [r3, #2]
  404a3c:	b29b      	uxth	r3, r3
  404a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404a42:	2b00      	cmp	r3, #0
  404a44:	d002      	beq.n	404a4c <_i2c_m_sync_transfer+0x40>
		return I2C_ERR_BUSY;
  404a46:	f06f 0305 	mvn.w	r3, #5
  404a4a:	e011      	b.n	404a70 <_i2c_m_sync_transfer+0x64>
	}

	if (msg->flags & I2C_M_RD) {
  404a4c:	683b      	ldr	r3, [r7, #0]
  404a4e:	885b      	ldrh	r3, [r3, #2]
  404a50:	b29b      	uxth	r3, r3
  404a52:	f003 0301 	and.w	r3, r3, #1
  404a56:	2b00      	cmp	r3, #0
  404a58:	d005      	beq.n	404a66 <_i2c_m_sync_transfer+0x5a>
		return _i2c_m_sync_read(dev, msg);
  404a5a:	6839      	ldr	r1, [r7, #0]
  404a5c:	6878      	ldr	r0, [r7, #4]
  404a5e:	4b08      	ldr	r3, [pc, #32]	; (404a80 <_i2c_m_sync_transfer+0x74>)
  404a60:	4798      	blx	r3
  404a62:	4603      	mov	r3, r0
  404a64:	e004      	b.n	404a70 <_i2c_m_sync_transfer+0x64>
	} else {
		return _i2c_m_sync_write(dev, msg);
  404a66:	6839      	ldr	r1, [r7, #0]
  404a68:	6878      	ldr	r0, [r7, #4]
  404a6a:	4b06      	ldr	r3, [pc, #24]	; (404a84 <_i2c_m_sync_transfer+0x78>)
  404a6c:	4798      	blx	r3
  404a6e:	4603      	mov	r3, r0
	}
}
  404a70:	4618      	mov	r0, r3
  404a72:	3708      	adds	r7, #8
  404a74:	46bd      	mov	sp, r7
  404a76:	bd80      	pop	{r7, pc}
  404a78:	004076b4 	.word	0x004076b4
  404a7c:	00402d25 	.word	0x00402d25
  404a80:	00404bb9 	.word	0x00404bb9
  404a84:	00404a89 	.word	0x00404a89

00404a88 <_i2c_m_sync_write>:

static inline int32_t _i2c_m_sync_write(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404a88:	b580      	push	{r7, lr}
  404a8a:	b086      	sub	sp, #24
  404a8c:	af00      	add	r7, sp, #0
  404a8e:	6078      	str	r0, [r7, #4]
  404a90:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;
  404a92:	2300      	movs	r3, #0
  404a94:	613b      	str	r3, [r7, #16]

	msg->flags |= I2C_M_BUSY;
  404a96:	683b      	ldr	r3, [r7, #0]
  404a98:	885b      	ldrh	r3, [r3, #2]
  404a9a:	b29b      	uxth	r3, r3
  404a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404aa0:	b29a      	uxth	r2, r3
  404aa2:	683b      	ldr	r3, [r7, #0]
  404aa4:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  404aa6:	683b      	ldr	r3, [r7, #0]
  404aa8:	881b      	ldrh	r3, [r3, #0]
  404aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  404aae:	2b00      	cmp	r3, #0
  404ab0:	d01b      	beq.n	404aea <_i2c_m_sync_write+0x62>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  404ab2:	687b      	ldr	r3, [r7, #4]
  404ab4:	691a      	ldr	r2, [r3, #16]
  404ab6:	683b      	ldr	r3, [r7, #0]
  404ab8:	881b      	ldrh	r3, [r3, #0]
  404aba:	0a1b      	lsrs	r3, r3, #8
  404abc:	b29b      	uxth	r3, r3
  404abe:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  404ac2:	b29b      	uxth	r3, r3
  404ac4:	041b      	lsls	r3, r3, #16
  404ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404ace:	4619      	mov	r1, r3
  404ad0:	4610      	mov	r0, r2
  404ad2:	4b33      	ldr	r3, [pc, #204]	; (404ba0 <_i2c_m_sync_write+0x118>)
  404ad4:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  404ad6:	687b      	ldr	r3, [r7, #4]
  404ad8:	691a      	ldr	r2, [r3, #16]
  404ada:	683b      	ldr	r3, [r7, #0]
  404adc:	881b      	ldrh	r3, [r3, #0]
  404ade:	b2db      	uxtb	r3, r3
  404ae0:	4619      	mov	r1, r3
  404ae2:	4610      	mov	r0, r2
  404ae4:	4b2f      	ldr	r3, [pc, #188]	; (404ba4 <_i2c_m_sync_write+0x11c>)
  404ae6:	4798      	blx	r3
  404ae8:	e00a      	b.n	404b00 <_i2c_m_sync_write+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  404aea:	687b      	ldr	r3, [r7, #4]
  404aec:	691a      	ldr	r2, [r3, #16]
  404aee:	683b      	ldr	r3, [r7, #0]
  404af0:	881b      	ldrh	r3, [r3, #0]
  404af2:	041b      	lsls	r3, r3, #16
  404af4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404af8:	4619      	mov	r1, r3
  404afa:	4610      	mov	r0, r2
  404afc:	4b28      	ldr	r3, [pc, #160]	; (404ba0 <_i2c_m_sync_write+0x118>)
  404afe:	4798      	blx	r3
	}

	for (i = 0; i < msg->len; i++) {
  404b00:	2300      	movs	r3, #0
  404b02:	617b      	str	r3, [r7, #20]
  404b04:	e020      	b.n	404b48 <_i2c_m_sync_write+0xc0>
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
  404b06:	687b      	ldr	r3, [r7, #4]
  404b08:	691b      	ldr	r3, [r3, #16]
  404b0a:	4618      	mov	r0, r3
  404b0c:	4b26      	ldr	r3, [pc, #152]	; (404ba8 <_i2c_m_sync_write+0x120>)
  404b0e:	4798      	blx	r3
  404b10:	60f8      	str	r0, [r7, #12]
			if (sr & TWIHS_SR_NACK) {
  404b12:	68fb      	ldr	r3, [r7, #12]
  404b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404b18:	2b00      	cmp	r3, #0
  404b1a:	d003      	beq.n	404b24 <_i2c_m_sync_write+0x9c>
				ret = I2C_NACK;
  404b1c:	f06f 0301 	mvn.w	r3, #1
  404b20:	613b      	str	r3, [r7, #16]
				break;
  404b22:	e004      	b.n	404b2e <_i2c_m_sync_write+0xa6>
			}
		} while (!(sr & TWIHS_SR_TXRDY));
  404b24:	68fb      	ldr	r3, [r7, #12]
  404b26:	f003 0304 	and.w	r3, r3, #4
  404b2a:	2b00      	cmp	r3, #0
  404b2c:	d0eb      	beq.n	404b06 <_i2c_m_sync_write+0x7e>

		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  404b2e:	687b      	ldr	r3, [r7, #4]
  404b30:	6918      	ldr	r0, [r3, #16]
  404b32:	683b      	ldr	r3, [r7, #0]
  404b34:	689a      	ldr	r2, [r3, #8]
  404b36:	697b      	ldr	r3, [r7, #20]
  404b38:	4413      	add	r3, r2
  404b3a:	781b      	ldrb	r3, [r3, #0]
  404b3c:	4619      	mov	r1, r3
  404b3e:	4b1b      	ldr	r3, [pc, #108]	; (404bac <_i2c_m_sync_write+0x124>)
  404b40:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  404b42:	697b      	ldr	r3, [r7, #20]
  404b44:	3301      	adds	r3, #1
  404b46:	617b      	str	r3, [r7, #20]
  404b48:	683b      	ldr	r3, [r7, #0]
  404b4a:	685b      	ldr	r3, [r3, #4]
  404b4c:	461a      	mov	r2, r3
  404b4e:	697b      	ldr	r3, [r7, #20]
  404b50:	429a      	cmp	r2, r3
  404b52:	d8d8      	bhi.n	404b06 <_i2c_m_sync_write+0x7e>
	}

	if (msg->flags & I2C_M_STOP) {
  404b54:	683b      	ldr	r3, [r7, #0]
  404b56:	885b      	ldrh	r3, [r3, #2]
  404b58:	b29b      	uxth	r3, r3
  404b5a:	b21b      	sxth	r3, r3
  404b5c:	2b00      	cmp	r3, #0
  404b5e:	da11      	bge.n	404b84 <_i2c_m_sync_write+0xfc>
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  404b60:	687b      	ldr	r3, [r7, #4]
  404b62:	691b      	ldr	r3, [r3, #16]
  404b64:	2102      	movs	r1, #2
  404b66:	4618      	mov	r0, r3
  404b68:	4b11      	ldr	r3, [pc, #68]	; (404bb0 <_i2c_m_sync_write+0x128>)
  404b6a:	4798      	blx	r3
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  404b6c:	bf00      	nop
  404b6e:	687b      	ldr	r3, [r7, #4]
  404b70:	691b      	ldr	r3, [r3, #16]
  404b72:	4618      	mov	r0, r3
  404b74:	4b0f      	ldr	r3, [pc, #60]	; (404bb4 <_i2c_m_sync_write+0x12c>)
  404b76:	4798      	blx	r3
  404b78:	4603      	mov	r3, r0
  404b7a:	f083 0301 	eor.w	r3, r3, #1
  404b7e:	b2db      	uxtb	r3, r3
  404b80:	2b00      	cmp	r3, #0
  404b82:	d1f4      	bne.n	404b6e <_i2c_m_sync_write+0xe6>
		};
	}

	dev->service.msg.flags &= ~I2C_M_BUSY;
  404b84:	687b      	ldr	r3, [r7, #4]
  404b86:	885b      	ldrh	r3, [r3, #2]
  404b88:	b29b      	uxth	r3, r3
  404b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404b8e:	b29a      	uxth	r2, r3
  404b90:	687b      	ldr	r3, [r7, #4]
  404b92:	805a      	strh	r2, [r3, #2]

	return ret;
  404b94:	693b      	ldr	r3, [r7, #16]
}
  404b96:	4618      	mov	r0, r3
  404b98:	3718      	adds	r7, #24
  404b9a:	46bd      	mov	sp, r7
  404b9c:	bd80      	pop	{r7, pc}
  404b9e:	bf00      	nop
  404ba0:	00404851 	.word	0x00404851
  404ba4:	0040486d 	.word	0x0040486d
  404ba8:	00404821 	.word	0x00404821
  404bac:	004048f9 	.word	0x004048f9
  404bb0:	004048dd 	.word	0x004048dd
  404bb4:	004047d5 	.word	0x004047d5

00404bb8 <_i2c_m_sync_read>:

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404bb8:	b590      	push	{r4, r7, lr}
  404bba:	b085      	sub	sp, #20
  404bbc:	af00      	add	r7, sp, #0
  404bbe:	6078      	str	r0, [r7, #4]
  404bc0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  404bc2:	683b      	ldr	r3, [r7, #0]
  404bc4:	885b      	ldrh	r3, [r3, #2]
  404bc6:	b29b      	uxth	r3, r3
  404bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404bcc:	b29a      	uxth	r2, r3
  404bce:	683b      	ldr	r3, [r7, #0]
  404bd0:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  404bd2:	683b      	ldr	r3, [r7, #0]
  404bd4:	881b      	ldrh	r3, [r3, #0]
  404bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  404bda:	2b00      	cmp	r3, #0
  404bdc:	d01b      	beq.n	404c16 <_i2c_m_sync_read+0x5e>
		hri_twihs_write_MMR_reg(dev->hw,
  404bde:	687b      	ldr	r3, [r7, #4]
  404be0:	691a      	ldr	r2, [r3, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  404be2:	683b      	ldr	r3, [r7, #0]
  404be4:	881b      	ldrh	r3, [r3, #0]
  404be6:	0a1b      	lsrs	r3, r3, #8
  404be8:	b29b      	uxth	r3, r3
  404bea:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  404bee:	b29b      	uxth	r3, r3
  404bf0:	041b      	lsls	r3, r3, #16
  404bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404bf6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
		hri_twihs_write_MMR_reg(dev->hw,
  404bfa:	4619      	mov	r1, r3
  404bfc:	4610      	mov	r0, r2
  404bfe:	4b38      	ldr	r3, [pc, #224]	; (404ce0 <_i2c_m_sync_read+0x128>)
  404c00:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  404c02:	687b      	ldr	r3, [r7, #4]
  404c04:	691a      	ldr	r2, [r3, #16]
  404c06:	683b      	ldr	r3, [r7, #0]
  404c08:	881b      	ldrh	r3, [r3, #0]
  404c0a:	b2db      	uxtb	r3, r3
  404c0c:	4619      	mov	r1, r3
  404c0e:	4610      	mov	r0, r2
  404c10:	4b34      	ldr	r3, [pc, #208]	; (404ce4 <_i2c_m_sync_read+0x12c>)
  404c12:	4798      	blx	r3
  404c14:	e00c      	b.n	404c30 <_i2c_m_sync_read+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  404c16:	687b      	ldr	r3, [r7, #4]
  404c18:	691a      	ldr	r2, [r3, #16]
  404c1a:	683b      	ldr	r3, [r7, #0]
  404c1c:	881b      	ldrh	r3, [r3, #0]
  404c1e:	041b      	lsls	r3, r3, #16
  404c20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404c28:	4619      	mov	r1, r3
  404c2a:	4610      	mov	r0, r2
  404c2c:	4b2c      	ldr	r3, [pc, #176]	; (404ce0 <_i2c_m_sync_read+0x128>)
  404c2e:	4798      	blx	r3
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  404c30:	687b      	ldr	r3, [r7, #4]
  404c32:	691a      	ldr	r2, [r3, #16]
  404c34:	683b      	ldr	r3, [r7, #0]
  404c36:	685b      	ldr	r3, [r3, #4]
  404c38:	2b01      	cmp	r3, #1
  404c3a:	d101      	bne.n	404c40 <_i2c_m_sync_read+0x88>
  404c3c:	2303      	movs	r3, #3
  404c3e:	e000      	b.n	404c42 <_i2c_m_sync_read+0x8a>
  404c40:	2301      	movs	r3, #1
  404c42:	4619      	mov	r1, r3
  404c44:	4610      	mov	r0, r2
  404c46:	4b28      	ldr	r3, [pc, #160]	; (404ce8 <_i2c_m_sync_read+0x130>)
  404c48:	4798      	blx	r3

	for (i = 0; i < msg->len; i++) {
  404c4a:	2300      	movs	r3, #0
  404c4c:	60fb      	str	r3, [r7, #12]
  404c4e:	e027      	b.n	404ca0 <_i2c_m_sync_read+0xe8>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  404c50:	bf00      	nop
  404c52:	687b      	ldr	r3, [r7, #4]
  404c54:	691b      	ldr	r3, [r3, #16]
  404c56:	4618      	mov	r0, r3
  404c58:	4b24      	ldr	r3, [pc, #144]	; (404cec <_i2c_m_sync_read+0x134>)
  404c5a:	4798      	blx	r3
  404c5c:	4603      	mov	r3, r0
  404c5e:	f083 0301 	eor.w	r3, r3, #1
  404c62:	b2db      	uxtb	r3, r3
  404c64:	2b00      	cmp	r3, #0
  404c66:	d1f4      	bne.n	404c52 <_i2c_m_sync_read+0x9a>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  404c68:	683b      	ldr	r3, [r7, #0]
  404c6a:	689a      	ldr	r2, [r3, #8]
  404c6c:	68fb      	ldr	r3, [r7, #12]
  404c6e:	18d4      	adds	r4, r2, r3
  404c70:	687b      	ldr	r3, [r7, #4]
  404c72:	691b      	ldr	r3, [r3, #16]
  404c74:	4618      	mov	r0, r3
  404c76:	4b1e      	ldr	r3, [pc, #120]	; (404cf0 <_i2c_m_sync_read+0x138>)
  404c78:	4798      	blx	r3
  404c7a:	4603      	mov	r3, r0
  404c7c:	b2db      	uxtb	r3, r3
  404c7e:	7023      	strb	r3, [r4, #0]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  404c80:	683b      	ldr	r3, [r7, #0]
  404c82:	685b      	ldr	r3, [r3, #4]
  404c84:	3b02      	subs	r3, #2
  404c86:	461a      	mov	r2, r3
  404c88:	68fb      	ldr	r3, [r7, #12]
  404c8a:	429a      	cmp	r2, r3
  404c8c:	d105      	bne.n	404c9a <_i2c_m_sync_read+0xe2>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  404c8e:	687b      	ldr	r3, [r7, #4]
  404c90:	691b      	ldr	r3, [r3, #16]
  404c92:	2102      	movs	r1, #2
  404c94:	4618      	mov	r0, r3
  404c96:	4b14      	ldr	r3, [pc, #80]	; (404ce8 <_i2c_m_sync_read+0x130>)
  404c98:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  404c9a:	68fb      	ldr	r3, [r7, #12]
  404c9c:	3301      	adds	r3, #1
  404c9e:	60fb      	str	r3, [r7, #12]
  404ca0:	683b      	ldr	r3, [r7, #0]
  404ca2:	685b      	ldr	r3, [r3, #4]
  404ca4:	461a      	mov	r2, r3
  404ca6:	68fb      	ldr	r3, [r7, #12]
  404ca8:	429a      	cmp	r2, r3
  404caa:	d8d1      	bhi.n	404c50 <_i2c_m_sync_read+0x98>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  404cac:	bf00      	nop
  404cae:	687b      	ldr	r3, [r7, #4]
  404cb0:	691b      	ldr	r3, [r3, #16]
  404cb2:	4618      	mov	r0, r3
  404cb4:	4b0f      	ldr	r3, [pc, #60]	; (404cf4 <_i2c_m_sync_read+0x13c>)
  404cb6:	4798      	blx	r3
  404cb8:	4603      	mov	r3, r0
  404cba:	f083 0301 	eor.w	r3, r3, #1
  404cbe:	b2db      	uxtb	r3, r3
  404cc0:	2b00      	cmp	r3, #0
  404cc2:	d1f4      	bne.n	404cae <_i2c_m_sync_read+0xf6>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  404cc4:	687b      	ldr	r3, [r7, #4]
  404cc6:	885b      	ldrh	r3, [r3, #2]
  404cc8:	b29b      	uxth	r3, r3
  404cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404cce:	b29a      	uxth	r2, r3
  404cd0:	687b      	ldr	r3, [r7, #4]
  404cd2:	805a      	strh	r2, [r3, #2]

	return ERR_NONE;
  404cd4:	2300      	movs	r3, #0
}
  404cd6:	4618      	mov	r0, r3
  404cd8:	3714      	adds	r7, #20
  404cda:	46bd      	mov	sp, r7
  404cdc:	bd90      	pop	{r4, r7, pc}
  404cde:	bf00      	nop
  404ce0:	00404851 	.word	0x00404851
  404ce4:	0040486d 	.word	0x0040486d
  404ce8:	004048dd 	.word	0x004048dd
  404cec:	004047fb 	.word	0x004047fb
  404cf0:	00404839 	.word	0x00404839
  404cf4:	004047d5 	.word	0x004047d5

00404cf8 <__NVIC_EnableIRQ>:
{
  404cf8:	b480      	push	{r7}
  404cfa:	b083      	sub	sp, #12
  404cfc:	af00      	add	r7, sp, #0
  404cfe:	4603      	mov	r3, r0
  404d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d06:	2b00      	cmp	r3, #0
  404d08:	db0b      	blt.n	404d22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404d0a:	4909      	ldr	r1, [pc, #36]	; (404d30 <__NVIC_EnableIRQ+0x38>)
  404d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d10:	095b      	lsrs	r3, r3, #5
  404d12:	79fa      	ldrb	r2, [r7, #7]
  404d14:	f002 021f 	and.w	r2, r2, #31
  404d18:	2001      	movs	r0, #1
  404d1a:	fa00 f202 	lsl.w	r2, r0, r2
  404d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404d22:	bf00      	nop
  404d24:	370c      	adds	r7, #12
  404d26:	46bd      	mov	sp, r7
  404d28:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d2c:	4770      	bx	lr
  404d2e:	bf00      	nop
  404d30:	e000e100 	.word	0xe000e100

00404d34 <__NVIC_DisableIRQ>:
{
  404d34:	b480      	push	{r7}
  404d36:	b083      	sub	sp, #12
  404d38:	af00      	add	r7, sp, #0
  404d3a:	4603      	mov	r3, r0
  404d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d42:	2b00      	cmp	r3, #0
  404d44:	db10      	blt.n	404d68 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404d46:	490b      	ldr	r1, [pc, #44]	; (404d74 <__NVIC_DisableIRQ+0x40>)
  404d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d4c:	095b      	lsrs	r3, r3, #5
  404d4e:	79fa      	ldrb	r2, [r7, #7]
  404d50:	f002 021f 	and.w	r2, r2, #31
  404d54:	2001      	movs	r0, #1
  404d56:	fa00 f202 	lsl.w	r2, r0, r2
  404d5a:	3320      	adds	r3, #32
  404d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  404d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  404d64:	f3bf 8f6f 	isb	sy
}
  404d68:	bf00      	nop
  404d6a:	370c      	adds	r7, #12
  404d6c:	46bd      	mov	sp, r7
  404d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d72:	4770      	bx	lr
  404d74:	e000e100 	.word	0xe000e100

00404d78 <__NVIC_ClearPendingIRQ>:
{
  404d78:	b480      	push	{r7}
  404d7a:	b083      	sub	sp, #12
  404d7c:	af00      	add	r7, sp, #0
  404d7e:	4603      	mov	r3, r0
  404d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d86:	2b00      	cmp	r3, #0
  404d88:	db0c      	blt.n	404da4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404d8a:	4909      	ldr	r1, [pc, #36]	; (404db0 <__NVIC_ClearPendingIRQ+0x38>)
  404d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d90:	095b      	lsrs	r3, r3, #5
  404d92:	79fa      	ldrb	r2, [r7, #7]
  404d94:	f002 021f 	and.w	r2, r2, #31
  404d98:	2001      	movs	r0, #1
  404d9a:	fa00 f202 	lsl.w	r2, r0, r2
  404d9e:	3360      	adds	r3, #96	; 0x60
  404da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404da4:	bf00      	nop
  404da6:	370c      	adds	r7, #12
  404da8:	46bd      	mov	sp, r7
  404daa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dae:	4770      	bx	lr
  404db0:	e000e100 	.word	0xe000e100

00404db4 <hri_uart_get_IMR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IER = UART_IMR_RXRDY;
}

static inline bool hri_uart_get_IMR_RXRDY_bit(const void *const hw)
{
  404db4:	b480      	push	{r7}
  404db6:	b083      	sub	sp, #12
  404db8:	af00      	add	r7, sp, #0
  404dba:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_RXRDY) >> UART_IMR_RXRDY_Pos;
  404dbc:	687b      	ldr	r3, [r7, #4]
  404dbe:	691b      	ldr	r3, [r3, #16]
  404dc0:	f003 0301 	and.w	r3, r3, #1
  404dc4:	2b00      	cmp	r3, #0
  404dc6:	bf14      	ite	ne
  404dc8:	2301      	movne	r3, #1
  404dca:	2300      	moveq	r3, #0
  404dcc:	b2db      	uxtb	r3, r3
}
  404dce:	4618      	mov	r0, r3
  404dd0:	370c      	adds	r7, #12
  404dd2:	46bd      	mov	sp, r7
  404dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dd8:	4770      	bx	lr

00404dda <hri_uart_set_IMR_TXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_RXRDY;
}

static inline void hri_uart_set_IMR_TXRDY_bit(const void *const hw)
{
  404dda:	b480      	push	{r7}
  404ddc:	b083      	sub	sp, #12
  404dde:	af00      	add	r7, sp, #0
  404de0:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
  404de2:	687b      	ldr	r3, [r7, #4]
  404de4:	2202      	movs	r2, #2
  404de6:	609a      	str	r2, [r3, #8]
}
  404de8:	bf00      	nop
  404dea:	370c      	adds	r7, #12
  404dec:	46bd      	mov	sp, r7
  404dee:	f85d 7b04 	ldr.w	r7, [sp], #4
  404df2:	4770      	bx	lr

00404df4 <hri_uart_get_IMR_TXRDY_bit>:

static inline bool hri_uart_get_IMR_TXRDY_bit(const void *const hw)
{
  404df4:	b480      	push	{r7}
  404df6:	b083      	sub	sp, #12
  404df8:	af00      	add	r7, sp, #0
  404dfa:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXRDY) >> UART_IMR_TXRDY_Pos;
  404dfc:	687b      	ldr	r3, [r7, #4]
  404dfe:	691b      	ldr	r3, [r3, #16]
  404e00:	085b      	lsrs	r3, r3, #1
  404e02:	f003 0301 	and.w	r3, r3, #1
  404e06:	2b00      	cmp	r3, #0
  404e08:	bf14      	ite	ne
  404e0a:	2301      	movne	r3, #1
  404e0c:	2300      	moveq	r3, #0
  404e0e:	b2db      	uxtb	r3, r3
}
  404e10:	4618      	mov	r0, r3
  404e12:	370c      	adds	r7, #12
  404e14:	46bd      	mov	sp, r7
  404e16:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e1a:	4770      	bx	lr

00404e1c <hri_uart_clear_IMR_TXRDY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
	}
}

static inline void hri_uart_clear_IMR_TXRDY_bit(const void *const hw)
{
  404e1c:	b480      	push	{r7}
  404e1e:	b083      	sub	sp, #12
  404e20:	af00      	add	r7, sp, #0
  404e22:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXRDY;
  404e24:	687b      	ldr	r3, [r7, #4]
  404e26:	2202      	movs	r2, #2
  404e28:	60da      	str	r2, [r3, #12]
}
  404e2a:	bf00      	nop
  404e2c:	370c      	adds	r7, #12
  404e2e:	46bd      	mov	sp, r7
  404e30:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e34:	4770      	bx	lr

00404e36 <hri_uart_set_IMR_TXEMPTY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_PARE;
}

static inline void hri_uart_set_IMR_TXEMPTY_bit(const void *const hw)
{
  404e36:	b480      	push	{r7}
  404e38:	b083      	sub	sp, #12
  404e3a:	af00      	add	r7, sp, #0
  404e3c:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
  404e3e:	687b      	ldr	r3, [r7, #4]
  404e40:	f44f 7200 	mov.w	r2, #512	; 0x200
  404e44:	609a      	str	r2, [r3, #8]
}
  404e46:	bf00      	nop
  404e48:	370c      	adds	r7, #12
  404e4a:	46bd      	mov	sp, r7
  404e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e50:	4770      	bx	lr

00404e52 <hri_uart_get_IMR_TXEMPTY_bit>:

static inline bool hri_uart_get_IMR_TXEMPTY_bit(const void *const hw)
{
  404e52:	b480      	push	{r7}
  404e54:	b083      	sub	sp, #12
  404e56:	af00      	add	r7, sp, #0
  404e58:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXEMPTY) >> UART_IMR_TXEMPTY_Pos;
  404e5a:	687b      	ldr	r3, [r7, #4]
  404e5c:	691b      	ldr	r3, [r3, #16]
  404e5e:	0a5b      	lsrs	r3, r3, #9
  404e60:	f003 0301 	and.w	r3, r3, #1
  404e64:	2b00      	cmp	r3, #0
  404e66:	bf14      	ite	ne
  404e68:	2301      	movne	r3, #1
  404e6a:	2300      	moveq	r3, #0
  404e6c:	b2db      	uxtb	r3, r3
}
  404e6e:	4618      	mov	r0, r3
  404e70:	370c      	adds	r7, #12
  404e72:	46bd      	mov	sp, r7
  404e74:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e78:	4770      	bx	lr

00404e7a <hri_uart_clear_IMR_TXEMPTY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
	}
}

static inline void hri_uart_clear_IMR_TXEMPTY_bit(const void *const hw)
{
  404e7a:	b480      	push	{r7}
  404e7c:	b083      	sub	sp, #12
  404e7e:	af00      	add	r7, sp, #0
  404e80:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXEMPTY;
  404e82:	687b      	ldr	r3, [r7, #4]
  404e84:	f44f 7200 	mov.w	r2, #512	; 0x200
  404e88:	60da      	str	r2, [r3, #12]
}
  404e8a:	bf00      	nop
  404e8c:	370c      	adds	r7, #12
  404e8e:	46bd      	mov	sp, r7
  404e90:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e94:	4770      	bx	lr

00404e96 <hri_uart_get_SR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = mask;
}

static inline bool hri_uart_get_SR_RXRDY_bit(const void *const hw)
{
  404e96:	b480      	push	{r7}
  404e98:	b083      	sub	sp, #12
  404e9a:	af00      	add	r7, sp, #0
  404e9c:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  404e9e:	687b      	ldr	r3, [r7, #4]
  404ea0:	695b      	ldr	r3, [r3, #20]
  404ea2:	f003 0301 	and.w	r3, r3, #1
  404ea6:	2b00      	cmp	r3, #0
  404ea8:	bf14      	ite	ne
  404eaa:	2301      	movne	r3, #1
  404eac:	2300      	moveq	r3, #0
  404eae:	b2db      	uxtb	r3, r3
}
  404eb0:	4618      	mov	r0, r3
  404eb2:	370c      	adds	r7, #12
  404eb4:	46bd      	mov	sp, r7
  404eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404eba:	4770      	bx	lr

00404ebc <hri_uart_get_SR_TXRDY_bit>:

static inline bool hri_uart_get_SR_TXRDY_bit(const void *const hw)
{
  404ebc:	b480      	push	{r7}
  404ebe:	b083      	sub	sp, #12
  404ec0:	af00      	add	r7, sp, #0
  404ec2:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  404ec4:	687b      	ldr	r3, [r7, #4]
  404ec6:	695b      	ldr	r3, [r3, #20]
  404ec8:	f003 0302 	and.w	r3, r3, #2
  404ecc:	2b00      	cmp	r3, #0
  404ece:	bf14      	ite	ne
  404ed0:	2301      	movne	r3, #1
  404ed2:	2300      	moveq	r3, #0
  404ed4:	b2db      	uxtb	r3, r3
}
  404ed6:	4618      	mov	r0, r3
  404ed8:	370c      	adds	r7, #12
  404eda:	46bd      	mov	sp, r7
  404edc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ee0:	4770      	bx	lr

00404ee2 <hri_uart_get_SR_TXEMPTY_bit>:
{
	return (((Uart *)hw)->UART_SR & UART_SR_PARE) > 0;
}

static inline bool hri_uart_get_SR_TXEMPTY_bit(const void *const hw)
{
  404ee2:	b480      	push	{r7}
  404ee4:	b083      	sub	sp, #12
  404ee6:	af00      	add	r7, sp, #0
  404ee8:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  404eea:	687b      	ldr	r3, [r7, #4]
  404eec:	695b      	ldr	r3, [r3, #20]
  404eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
  404ef2:	2b00      	cmp	r3, #0
  404ef4:	bf14      	ite	ne
  404ef6:	2301      	movne	r3, #1
  404ef8:	2300      	moveq	r3, #0
  404efa:	b2db      	uxtb	r3, r3
}
  404efc:	4618      	mov	r0, r3
  404efe:	370c      	adds	r7, #12
  404f00:	46bd      	mov	sp, r7
  404f02:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f06:	4770      	bx	lr

00404f08 <hri_uart_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_sr_reg_t hri_uart_read_SR_reg(const void *const hw)
{
  404f08:	b480      	push	{r7}
  404f0a:	b083      	sub	sp, #12
  404f0c:	af00      	add	r7, sp, #0
  404f0e:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_SR;
  404f10:	687b      	ldr	r3, [r7, #4]
  404f12:	695b      	ldr	r3, [r3, #20]
}
  404f14:	4618      	mov	r0, r3
  404f16:	370c      	adds	r7, #12
  404f18:	46bd      	mov	sp, r7
  404f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f1e:	4770      	bx	lr

00404f20 <hri_uart_read_RHR_RXCHR_bf>:
{
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR(mask)) >> UART_RHR_RXCHR_Pos;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_RXCHR_bf(const void *const hw)
{
  404f20:	b480      	push	{r7}
  404f22:	b083      	sub	sp, #12
  404f24:	af00      	add	r7, sp, #0
  404f26:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  404f28:	687b      	ldr	r3, [r7, #4]
  404f2a:	699b      	ldr	r3, [r3, #24]
  404f2c:	b2db      	uxtb	r3, r3
}
  404f2e:	4618      	mov	r0, r3
  404f30:	370c      	adds	r7, #12
  404f32:	46bd      	mov	sp, r7
  404f34:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f38:	4770      	bx	lr

00404f3a <hri_uart_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_reg(const void *const hw)
{
  404f3a:	b480      	push	{r7}
  404f3c:	b083      	sub	sp, #12
  404f3e:	af00      	add	r7, sp, #0
  404f40:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_RHR;
  404f42:	687b      	ldr	r3, [r7, #4]
  404f44:	699b      	ldr	r3, [r3, #24]
}
  404f46:	4618      	mov	r0, r3
  404f48:	370c      	adds	r7, #12
  404f4a:	46bd      	mov	sp, r7
  404f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f50:	4770      	bx	lr

00404f52 <hri_uart_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_MR_reg(const void *const hw, hri_uart_mr_reg_t data)
{
  404f52:	b480      	push	{r7}
  404f54:	b083      	sub	sp, #12
  404f56:	af00      	add	r7, sp, #0
  404f58:	6078      	str	r0, [r7, #4]
  404f5a:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_MR = data;
  404f5c:	687b      	ldr	r3, [r7, #4]
  404f5e:	683a      	ldr	r2, [r7, #0]
  404f60:	605a      	str	r2, [r3, #4]
	UART_CRITICAL_SECTION_LEAVE();
}
  404f62:	bf00      	nop
  404f64:	370c      	adds	r7, #12
  404f66:	46bd      	mov	sp, r7
  404f68:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f6c:	4770      	bx	lr

00404f6e <hri_uart_write_BRGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_BRGR_reg(const void *const hw, hri_uart_brgr_reg_t data)
{
  404f6e:	b480      	push	{r7}
  404f70:	b083      	sub	sp, #12
  404f72:	af00      	add	r7, sp, #0
  404f74:	6078      	str	r0, [r7, #4]
  404f76:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_BRGR = data;
  404f78:	687b      	ldr	r3, [r7, #4]
  404f7a:	683a      	ldr	r2, [r7, #0]
  404f7c:	621a      	str	r2, [r3, #32]
	UART_CRITICAL_SECTION_LEAVE();
}
  404f7e:	bf00      	nop
  404f80:	370c      	adds	r7, #12
  404f82:	46bd      	mov	sp, r7
  404f84:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f88:	4770      	bx	lr

00404f8a <hri_uart_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
  404f8a:	b480      	push	{r7}
  404f8c:	b083      	sub	sp, #12
  404f8e:	af00      	add	r7, sp, #0
  404f90:	6078      	str	r0, [r7, #4]
  404f92:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  404f94:	687b      	ldr	r3, [r7, #4]
  404f96:	683a      	ldr	r2, [r7, #0]
  404f98:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	UART_CRITICAL_SECTION_LEAVE();
}
  404f9c:	bf00      	nop
  404f9e:	370c      	adds	r7, #12
  404fa0:	46bd      	mov	sp, r7
  404fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fa6:	4770      	bx	lr

00404fa8 <hri_uart_write_CR_reg>:
{
	return ((Uart *)hw)->UART_WPMR;
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
  404fa8:	b480      	push	{r7}
  404faa:	b083      	sub	sp, #12
  404fac:	af00      	add	r7, sp, #0
  404fae:	6078      	str	r0, [r7, #4]
  404fb0:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  404fb2:	687b      	ldr	r3, [r7, #4]
  404fb4:	683a      	ldr	r2, [r7, #0]
  404fb6:	601a      	str	r2, [r3, #0]
	UART_CRITICAL_SECTION_LEAVE();
}
  404fb8:	bf00      	nop
  404fba:	370c      	adds	r7, #12
  404fbc:	46bd      	mov	sp, r7
  404fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fc2:	4770      	bx	lr

00404fc4 <hri_uart_write_THR_reg>:

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
  404fc4:	b480      	push	{r7}
  404fc6:	b083      	sub	sp, #12
  404fc8:	af00      	add	r7, sp, #0
  404fca:	6078      	str	r0, [r7, #4]
  404fcc:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  404fce:	687b      	ldr	r3, [r7, #4]
  404fd0:	683a      	ldr	r2, [r7, #0]
  404fd2:	61da      	str	r2, [r3, #28]
	UART_CRITICAL_SECTION_LEAVE();
}
  404fd4:	bf00      	nop
  404fd6:	370c      	adds	r7, #12
  404fd8:	46bd      	mov	sp, r7
  404fda:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fde:	4770      	bx	lr

00404fe0 <_uart_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_irq_num(const void *const hw)
{
  404fe0:	b580      	push	{r7, lr}
  404fe2:	b084      	sub	sp, #16
  404fe4:	af00      	add	r7, sp, #0
  404fe6:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  404fe8:	687b      	ldr	r3, [r7, #4]
  404fea:	2b00      	cmp	r3, #0
  404fec:	bf14      	ite	ne
  404fee:	2301      	movne	r3, #1
  404ff0:	2300      	moveq	r3, #0
  404ff2:	b2db      	uxtb	r3, r3
  404ff4:	2288      	movs	r2, #136	; 0x88
  404ff6:	4916      	ldr	r1, [pc, #88]	; (405050 <_uart_get_irq_num+0x70>)
  404ff8:	4618      	mov	r0, r3
  404ffa:	4b16      	ldr	r3, [pc, #88]	; (405054 <_uart_get_irq_num+0x74>)
  404ffc:	4798      	blx	r3
	uint8_t i;
	i = _uart_get_hardware_index(hw);
  404ffe:	6878      	ldr	r0, [r7, #4]
  405000:	4b15      	ldr	r3, [pc, #84]	; (405058 <_uart_get_irq_num+0x78>)
  405002:	4798      	blx	r3
  405004:	4603      	mov	r3, r0
  405006:	73fb      	strb	r3, [r7, #15]
	switch (i) {
  405008:	7bfb      	ldrb	r3, [r7, #15]
  40500a:	2b04      	cmp	r3, #4
  40500c:	d816      	bhi.n	40503c <_uart_get_irq_num+0x5c>
  40500e:	a201      	add	r2, pc, #4	; (adr r2, 405014 <_uart_get_irq_num+0x34>)
  405010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405014:	00405029 	.word	0x00405029
  405018:	0040502d 	.word	0x0040502d
  40501c:	00405031 	.word	0x00405031
  405020:	00405035 	.word	0x00405035
  405024:	00405039 	.word	0x00405039
	case 0:
		return UART0_IRQn;
  405028:	2307      	movs	r3, #7
  40502a:	e00d      	b.n	405048 <_uart_get_irq_num+0x68>

	case 1:
		return UART1_IRQn;
  40502c:	2308      	movs	r3, #8
  40502e:	e00b      	b.n	405048 <_uart_get_irq_num+0x68>
	case 2:
		return UART2_IRQn;
  405030:	232c      	movs	r3, #44	; 0x2c
  405032:	e009      	b.n	405048 <_uart_get_irq_num+0x68>

	case 3:
		return UART3_IRQn;
  405034:	232d      	movs	r3, #45	; 0x2d
  405036:	e007      	b.n	405048 <_uart_get_irq_num+0x68>

	case 4:
		return UART4_IRQn;
  405038:	232e      	movs	r3, #46	; 0x2e
  40503a:	e005      	b.n	405048 <_uart_get_irq_num+0x68>
	default:
		ASSERT(false);
  40503c:	229a      	movs	r2, #154	; 0x9a
  40503e:	4904      	ldr	r1, [pc, #16]	; (405050 <_uart_get_irq_num+0x70>)
  405040:	2000      	movs	r0, #0
  405042:	4b04      	ldr	r3, [pc, #16]	; (405054 <_uart_get_irq_num+0x74>)
  405044:	4798      	blx	r3
		return ERR_INVALID_DATA;
  405046:	23ff      	movs	r3, #255	; 0xff
	}
}
  405048:	4618      	mov	r0, r3
  40504a:	3710      	adds	r7, #16
  40504c:	46bd      	mov	sp, r7
  40504e:	bd80      	pop	{r7, pc}
  405050:	004076d0 	.word	0x004076d0
  405054:	00402d25 	.word	0x00402d25
  405058:	00405391 	.word	0x00405391

0040505c <_uart_init_irq_param>:

/**
 * \brief Init irq param with the given twi hardware instance
 */
static void _uart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
  40505c:	b480      	push	{r7}
  40505e:	b083      	sub	sp, #12
  405060:	af00      	add	r7, sp, #0
  405062:	6078      	str	r0, [r7, #4]
  405064:	6039      	str	r1, [r7, #0]
	if (hw == UART4) {
  405066:	687b      	ldr	r3, [r7, #4]
  405068:	4a05      	ldr	r2, [pc, #20]	; (405080 <_uart_init_irq_param+0x24>)
  40506a:	4293      	cmp	r3, r2
  40506c:	d102      	bne.n	405074 <_uart_init_irq_param+0x18>
		_uart4_dev = dev;
  40506e:	4a05      	ldr	r2, [pc, #20]	; (405084 <_uart_init_irq_param+0x28>)
  405070:	683b      	ldr	r3, [r7, #0]
  405072:	6013      	str	r3, [r2, #0]
	}
}
  405074:	bf00      	nop
  405076:	370c      	adds	r7, #12
  405078:	46bd      	mov	sp, r7
  40507a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40507e:	4770      	bx	lr
  405080:	400e1e00 	.word	0x400e1e00
  405084:	204011c4 	.word	0x204011c4

00405088 <_usart_sync_init>:

/**
 * \brief Initialize synchronous UART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
  405088:	b580      	push	{r7, lr}
  40508a:	b082      	sub	sp, #8
  40508c:	af00      	add	r7, sp, #0
  40508e:	6078      	str	r0, [r7, #4]
  405090:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  405092:	687b      	ldr	r3, [r7, #4]
  405094:	2b00      	cmp	r3, #0
  405096:	bf14      	ite	ne
  405098:	2301      	movne	r3, #1
  40509a:	2300      	moveq	r3, #0
  40509c:	b2db      	uxtb	r3, r3
  40509e:	22ae      	movs	r2, #174	; 0xae
  4050a0:	490c      	ldr	r1, [pc, #48]	; (4050d4 <_usart_sync_init+0x4c>)
  4050a2:	4618      	mov	r0, r3
  4050a4:	4b0c      	ldr	r3, [pc, #48]	; (4050d8 <_usart_sync_init+0x50>)
  4050a6:	4798      	blx	r3
	ASSERT(hw);
  4050a8:	683b      	ldr	r3, [r7, #0]
  4050aa:	2b00      	cmp	r3, #0
  4050ac:	bf14      	ite	ne
  4050ae:	2301      	movne	r3, #1
  4050b0:	2300      	moveq	r3, #0
  4050b2:	b2db      	uxtb	r3, r3
  4050b4:	22af      	movs	r2, #175	; 0xaf
  4050b6:	4907      	ldr	r1, [pc, #28]	; (4050d4 <_usart_sync_init+0x4c>)
  4050b8:	4618      	mov	r0, r3
  4050ba:	4b07      	ldr	r3, [pc, #28]	; (4050d8 <_usart_sync_init+0x50>)
  4050bc:	4798      	blx	r3

	device->hw = hw;
  4050be:	687b      	ldr	r3, [r7, #4]
  4050c0:	683a      	ldr	r2, [r7, #0]
  4050c2:	601a      	str	r2, [r3, #0]

	return _uart_init(hw);
  4050c4:	6838      	ldr	r0, [r7, #0]
  4050c6:	4b05      	ldr	r3, [pc, #20]	; (4050dc <_usart_sync_init+0x54>)
  4050c8:	4798      	blx	r3
  4050ca:	4603      	mov	r3, r0
}
  4050cc:	4618      	mov	r0, r3
  4050ce:	3708      	adds	r7, #8
  4050d0:	46bd      	mov	sp, r7
  4050d2:	bd80      	pop	{r7, pc}
  4050d4:	004076d0 	.word	0x004076d0
  4050d8:	00402d25 	.word	0x00402d25
  4050dc:	004055f5 	.word	0x004055f5

004050e0 <_usart_async_init>:

/**
 * \brief Initialize asynchronous UART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
  4050e0:	b580      	push	{r7, lr}
  4050e2:	b084      	sub	sp, #16
  4050e4:	af00      	add	r7, sp, #0
  4050e6:	6078      	str	r0, [r7, #4]
  4050e8:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
  4050ea:	687b      	ldr	r3, [r7, #4]
  4050ec:	2b00      	cmp	r3, #0
  4050ee:	bf14      	ite	ne
  4050f0:	2301      	movne	r3, #1
  4050f2:	2300      	moveq	r3, #0
  4050f4:	b2db      	uxtb	r3, r3
  4050f6:	22bd      	movs	r2, #189	; 0xbd
  4050f8:	4918      	ldr	r1, [pc, #96]	; (40515c <_usart_async_init+0x7c>)
  4050fa:	4618      	mov	r0, r3
  4050fc:	4b18      	ldr	r3, [pc, #96]	; (405160 <_usart_async_init+0x80>)
  4050fe:	4798      	blx	r3

	init_status = _uart_init(hw);
  405100:	6838      	ldr	r0, [r7, #0]
  405102:	4b18      	ldr	r3, [pc, #96]	; (405164 <_usart_async_init+0x84>)
  405104:	4798      	blx	r3
  405106:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  405108:	68fb      	ldr	r3, [r7, #12]
  40510a:	2b00      	cmp	r3, #0
  40510c:	d001      	beq.n	405112 <_usart_async_init+0x32>
		return init_status;
  40510e:	68fb      	ldr	r3, [r7, #12]
  405110:	e01f      	b.n	405152 <_usart_async_init+0x72>
	}
	device->hw = hw;
  405112:	687b      	ldr	r3, [r7, #4]
  405114:	683a      	ldr	r2, [r7, #0]
  405116:	619a      	str	r2, [r3, #24]

	_uart_init_irq_param(hw, device);
  405118:	6879      	ldr	r1, [r7, #4]
  40511a:	6838      	ldr	r0, [r7, #0]
  40511c:	4b12      	ldr	r3, [pc, #72]	; (405168 <_usart_async_init+0x88>)
  40511e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  405120:	6838      	ldr	r0, [r7, #0]
  405122:	4b12      	ldr	r3, [pc, #72]	; (40516c <_usart_async_init+0x8c>)
  405124:	4798      	blx	r3
  405126:	4603      	mov	r3, r0
  405128:	b25b      	sxtb	r3, r3
  40512a:	4618      	mov	r0, r3
  40512c:	4b10      	ldr	r3, [pc, #64]	; (405170 <_usart_async_init+0x90>)
  40512e:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_uart_get_irq_num(hw));
  405130:	6838      	ldr	r0, [r7, #0]
  405132:	4b0e      	ldr	r3, [pc, #56]	; (40516c <_usart_async_init+0x8c>)
  405134:	4798      	blx	r3
  405136:	4603      	mov	r3, r0
  405138:	b25b      	sxtb	r3, r3
  40513a:	4618      	mov	r0, r3
  40513c:	4b0d      	ldr	r3, [pc, #52]	; (405174 <_usart_async_init+0x94>)
  40513e:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  405140:	6838      	ldr	r0, [r7, #0]
  405142:	4b0a      	ldr	r3, [pc, #40]	; (40516c <_usart_async_init+0x8c>)
  405144:	4798      	blx	r3
  405146:	4603      	mov	r3, r0
  405148:	b25b      	sxtb	r3, r3
  40514a:	4618      	mov	r0, r3
  40514c:	4b0a      	ldr	r3, [pc, #40]	; (405178 <_usart_async_init+0x98>)
  40514e:	4798      	blx	r3

	return ERR_NONE;
  405150:	2300      	movs	r3, #0
}
  405152:	4618      	mov	r0, r3
  405154:	3710      	adds	r7, #16
  405156:	46bd      	mov	sp, r7
  405158:	bd80      	pop	{r7, pc}
  40515a:	bf00      	nop
  40515c:	004076d0 	.word	0x004076d0
  405160:	00402d25 	.word	0x00402d25
  405164:	004055f5 	.word	0x004055f5
  405168:	0040505d 	.word	0x0040505d
  40516c:	00404fe1 	.word	0x00404fe1
  405170:	00404d35 	.word	0x00404d35
  405174:	00404d79 	.word	0x00404d79
  405178:	00404cf9 	.word	0x00404cf9

0040517c <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
  40517c:	b580      	push	{r7, lr}
  40517e:	b082      	sub	sp, #8
  405180:	af00      	add	r7, sp, #0
  405182:	6078      	str	r0, [r7, #4]
  405184:	460b      	mov	r3, r1
  405186:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  405188:	687b      	ldr	r3, [r7, #4]
  40518a:	2b00      	cmp	r3, #0
  40518c:	bf14      	ite	ne
  40518e:	2301      	movne	r3, #1
  405190:	2300      	moveq	r3, #0
  405192:	b2db      	uxtb	r3, r3
  405194:	f240 1299 	movw	r2, #409	; 0x199
  405198:	4907      	ldr	r1, [pc, #28]	; (4051b8 <_usart_sync_write_byte+0x3c>)
  40519a:	4618      	mov	r0, r3
  40519c:	4b07      	ldr	r3, [pc, #28]	; (4051bc <_usart_sync_write_byte+0x40>)
  40519e:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  4051a0:	687b      	ldr	r3, [r7, #4]
  4051a2:	681b      	ldr	r3, [r3, #0]
  4051a4:	78fa      	ldrb	r2, [r7, #3]
  4051a6:	4611      	mov	r1, r2
  4051a8:	4618      	mov	r0, r3
  4051aa:	4b05      	ldr	r3, [pc, #20]	; (4051c0 <_usart_sync_write_byte+0x44>)
  4051ac:	4798      	blx	r3
}
  4051ae:	bf00      	nop
  4051b0:	3708      	adds	r7, #8
  4051b2:	46bd      	mov	sp, r7
  4051b4:	bd80      	pop	{r7, pc}
  4051b6:	bf00      	nop
  4051b8:	004076d0 	.word	0x004076d0
  4051bc:	00402d25 	.word	0x00402d25
  4051c0:	00404fc5 	.word	0x00404fc5

004051c4 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
  4051c4:	b580      	push	{r7, lr}
  4051c6:	b082      	sub	sp, #8
  4051c8:	af00      	add	r7, sp, #0
  4051ca:	6078      	str	r0, [r7, #4]
  4051cc:	460b      	mov	r3, r1
  4051ce:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  4051d0:	687b      	ldr	r3, [r7, #4]
  4051d2:	2b00      	cmp	r3, #0
  4051d4:	bf14      	ite	ne
  4051d6:	2301      	movne	r3, #1
  4051d8:	2300      	moveq	r3, #0
  4051da:	b2db      	uxtb	r3, r3
  4051dc:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
  4051e0:	4907      	ldr	r1, [pc, #28]	; (405200 <_usart_async_write_byte+0x3c>)
  4051e2:	4618      	mov	r0, r3
  4051e4:	4b07      	ldr	r3, [pc, #28]	; (405204 <_usart_async_write_byte+0x40>)
  4051e6:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  4051e8:	687b      	ldr	r3, [r7, #4]
  4051ea:	699b      	ldr	r3, [r3, #24]
  4051ec:	78fa      	ldrb	r2, [r7, #3]
  4051ee:	4611      	mov	r1, r2
  4051f0:	4618      	mov	r0, r3
  4051f2:	4b05      	ldr	r3, [pc, #20]	; (405208 <_usart_async_write_byte+0x44>)
  4051f4:	4798      	blx	r3
}
  4051f6:	bf00      	nop
  4051f8:	3708      	adds	r7, #8
  4051fa:	46bd      	mov	sp, r7
  4051fc:	bd80      	pop	{r7, pc}
  4051fe:	bf00      	nop
  405200:	004076d0 	.word	0x004076d0
  405204:	00402d25 	.word	0x00402d25
  405208:	00404fc5 	.word	0x00404fc5

0040520c <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given UART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
  40520c:	b580      	push	{r7, lr}
  40520e:	b082      	sub	sp, #8
  405210:	af00      	add	r7, sp, #0
  405212:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405214:	687b      	ldr	r3, [r7, #4]
  405216:	2b00      	cmp	r3, #0
  405218:	bf14      	ite	ne
  40521a:	2301      	movne	r3, #1
  40521c:	2300      	moveq	r3, #0
  40521e:	b2db      	uxtb	r3, r3
  405220:	f240 12ab 	movw	r2, #427	; 0x1ab
  405224:	4907      	ldr	r1, [pc, #28]	; (405244 <_usart_sync_read_byte+0x38>)
  405226:	4618      	mov	r0, r3
  405228:	4b07      	ldr	r3, [pc, #28]	; (405248 <_usart_sync_read_byte+0x3c>)
  40522a:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  40522c:	687b      	ldr	r3, [r7, #4]
  40522e:	681b      	ldr	r3, [r3, #0]
  405230:	4618      	mov	r0, r3
  405232:	4b06      	ldr	r3, [pc, #24]	; (40524c <_usart_sync_read_byte+0x40>)
  405234:	4798      	blx	r3
  405236:	4603      	mov	r3, r0
  405238:	b2db      	uxtb	r3, r3
}
  40523a:	4618      	mov	r0, r3
  40523c:	3708      	adds	r7, #8
  40523e:	46bd      	mov	sp, r7
  405240:	bd80      	pop	{r7, pc}
  405242:	bf00      	nop
  405244:	004076d0 	.word	0x004076d0
  405248:	00402d25 	.word	0x00402d25
  40524c:	00404f21 	.word	0x00404f21

00405250 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if UART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
  405250:	b580      	push	{r7, lr}
  405252:	b082      	sub	sp, #8
  405254:	af00      	add	r7, sp, #0
  405256:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405258:	687b      	ldr	r3, [r7, #4]
  40525a:	2b00      	cmp	r3, #0
  40525c:	bf14      	ite	ne
  40525e:	2301      	movne	r3, #1
  405260:	2300      	moveq	r3, #0
  405262:	b2db      	uxtb	r3, r3
  405264:	f44f 72da 	mov.w	r2, #436	; 0x1b4
  405268:	4906      	ldr	r1, [pc, #24]	; (405284 <_usart_sync_is_ready_to_send+0x34>)
  40526a:	4618      	mov	r0, r3
  40526c:	4b06      	ldr	r3, [pc, #24]	; (405288 <_usart_sync_is_ready_to_send+0x38>)
  40526e:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  405270:	687b      	ldr	r3, [r7, #4]
  405272:	681b      	ldr	r3, [r3, #0]
  405274:	4618      	mov	r0, r3
  405276:	4b05      	ldr	r3, [pc, #20]	; (40528c <_usart_sync_is_ready_to_send+0x3c>)
  405278:	4798      	blx	r3
  40527a:	4603      	mov	r3, r0
}
  40527c:	4618      	mov	r0, r3
  40527e:	3708      	adds	r7, #8
  405280:	46bd      	mov	sp, r7
  405282:	bd80      	pop	{r7, pc}
  405284:	004076d0 	.word	0x004076d0
  405288:	00402d25 	.word	0x00402d25
  40528c:	00404ebd 	.word	0x00404ebd

00405290 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
  405290:	b580      	push	{r7, lr}
  405292:	b082      	sub	sp, #8
  405294:	af00      	add	r7, sp, #0
  405296:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405298:	687b      	ldr	r3, [r7, #4]
  40529a:	2b00      	cmp	r3, #0
  40529c:	bf14      	ite	ne
  40529e:	2301      	movne	r3, #1
  4052a0:	2300      	moveq	r3, #0
  4052a2:	b2db      	uxtb	r3, r3
  4052a4:	f240 12bd 	movw	r2, #445	; 0x1bd
  4052a8:	4906      	ldr	r1, [pc, #24]	; (4052c4 <_usart_sync_is_transmit_done+0x34>)
  4052aa:	4618      	mov	r0, r3
  4052ac:	4b06      	ldr	r3, [pc, #24]	; (4052c8 <_usart_sync_is_transmit_done+0x38>)
  4052ae:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  4052b0:	687b      	ldr	r3, [r7, #4]
  4052b2:	681b      	ldr	r3, [r3, #0]
  4052b4:	4618      	mov	r0, r3
  4052b6:	4b05      	ldr	r3, [pc, #20]	; (4052cc <_usart_sync_is_transmit_done+0x3c>)
  4052b8:	4798      	blx	r3
  4052ba:	4603      	mov	r3, r0
}
  4052bc:	4618      	mov	r0, r3
  4052be:	3708      	adds	r7, #8
  4052c0:	46bd      	mov	sp, r7
  4052c2:	bd80      	pop	{r7, pc}
  4052c4:	004076d0 	.word	0x004076d0
  4052c8:	00402d25 	.word	0x00402d25
  4052cc:	00404ee3 	.word	0x00404ee3

004052d0 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by UART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
  4052d0:	b580      	push	{r7, lr}
  4052d2:	b082      	sub	sp, #8
  4052d4:	af00      	add	r7, sp, #0
  4052d6:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4052d8:	687b      	ldr	r3, [r7, #4]
  4052da:	2b00      	cmp	r3, #0
  4052dc:	bf14      	ite	ne
  4052de:	2301      	movne	r3, #1
  4052e0:	2300      	moveq	r3, #0
  4052e2:	b2db      	uxtb	r3, r3
  4052e4:	f240 12cf 	movw	r2, #463	; 0x1cf
  4052e8:	4906      	ldr	r1, [pc, #24]	; (405304 <_usart_sync_is_byte_received+0x34>)
  4052ea:	4618      	mov	r0, r3
  4052ec:	4b06      	ldr	r3, [pc, #24]	; (405308 <_usart_sync_is_byte_received+0x38>)
  4052ee:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  4052f0:	687b      	ldr	r3, [r7, #4]
  4052f2:	681b      	ldr	r3, [r3, #0]
  4052f4:	4618      	mov	r0, r3
  4052f6:	4b05      	ldr	r3, [pc, #20]	; (40530c <_usart_sync_is_byte_received+0x3c>)
  4052f8:	4798      	blx	r3
  4052fa:	4603      	mov	r3, r0
}
  4052fc:	4618      	mov	r0, r3
  4052fe:	3708      	adds	r7, #8
  405300:	46bd      	mov	sp, r7
  405302:	bd80      	pop	{r7, pc}
  405304:	004076d0 	.word	0x004076d0
  405308:	00402d25 	.word	0x00402d25
  40530c:	00404e97 	.word	0x00404e97

00405310 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
  405310:	b580      	push	{r7, lr}
  405312:	b082      	sub	sp, #8
  405314:	af00      	add	r7, sp, #0
  405316:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405318:	687b      	ldr	r3, [r7, #4]
  40531a:	2b00      	cmp	r3, #0
  40531c:	bf14      	ite	ne
  40531e:	2301      	movne	r3, #1
  405320:	2300      	moveq	r3, #0
  405322:	b2db      	uxtb	r3, r3
  405324:	f240 220a 	movw	r2, #522	; 0x20a
  405328:	4906      	ldr	r1, [pc, #24]	; (405344 <_usart_async_enable_byte_sent_irq+0x34>)
  40532a:	4618      	mov	r0, r3
  40532c:	4b06      	ldr	r3, [pc, #24]	; (405348 <_usart_async_enable_byte_sent_irq+0x38>)
  40532e:	4798      	blx	r3
	hri_uart_set_IMR_TXRDY_bit(device->hw);
  405330:	687b      	ldr	r3, [r7, #4]
  405332:	699b      	ldr	r3, [r3, #24]
  405334:	4618      	mov	r0, r3
  405336:	4b05      	ldr	r3, [pc, #20]	; (40534c <_usart_async_enable_byte_sent_irq+0x3c>)
  405338:	4798      	blx	r3
}
  40533a:	bf00      	nop
  40533c:	3708      	adds	r7, #8
  40533e:	46bd      	mov	sp, r7
  405340:	bd80      	pop	{r7, pc}
  405342:	bf00      	nop
  405344:	004076d0 	.word	0x004076d0
  405348:	00402d25 	.word	0x00402d25
  40534c:	00404ddb 	.word	0x00404ddb

00405350 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
  405350:	b580      	push	{r7, lr}
  405352:	b082      	sub	sp, #8
  405354:	af00      	add	r7, sp, #0
  405356:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405358:	687b      	ldr	r3, [r7, #4]
  40535a:	2b00      	cmp	r3, #0
  40535c:	bf14      	ite	ne
  40535e:	2301      	movne	r3, #1
  405360:	2300      	moveq	r3, #0
  405362:	b2db      	uxtb	r3, r3
  405364:	f240 2213 	movw	r2, #531	; 0x213
  405368:	4906      	ldr	r1, [pc, #24]	; (405384 <_usart_async_enable_tx_done_irq+0x34>)
  40536a:	4618      	mov	r0, r3
  40536c:	4b06      	ldr	r3, [pc, #24]	; (405388 <_usart_async_enable_tx_done_irq+0x38>)
  40536e:	4798      	blx	r3
	hri_uart_set_IMR_TXEMPTY_bit(device->hw);
  405370:	687b      	ldr	r3, [r7, #4]
  405372:	699b      	ldr	r3, [r3, #24]
  405374:	4618      	mov	r0, r3
  405376:	4b05      	ldr	r3, [pc, #20]	; (40538c <_usart_async_enable_tx_done_irq+0x3c>)
  405378:	4798      	blx	r3
}
  40537a:	bf00      	nop
  40537c:	3708      	adds	r7, #8
  40537e:	46bd      	mov	sp, r7
  405380:	bd80      	pop	{r7, pc}
  405382:	bf00      	nop
  405384:	004076d0 	.word	0x004076d0
  405388:	00402d25 	.word	0x00402d25
  40538c:	00404e37 	.word	0x00404e37

00405390 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  405390:	b580      	push	{r7, lr}
  405392:	b082      	sub	sp, #8
  405394:	af00      	add	r7, sp, #0
  405396:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  405398:	687b      	ldr	r3, [r7, #4]
  40539a:	2b00      	cmp	r3, #0
  40539c:	bf14      	ite	ne
  40539e:	2301      	movne	r3, #1
  4053a0:	2300      	moveq	r3, #0
  4053a2:	b2db      	uxtb	r3, r3
  4053a4:	f240 221d 	movw	r2, #541	; 0x21d
  4053a8:	4913      	ldr	r1, [pc, #76]	; (4053f8 <_uart_get_hardware_index+0x68>)
  4053aa:	4618      	mov	r0, r3
  4053ac:	4b13      	ldr	r3, [pc, #76]	; (4053fc <_uart_get_hardware_index+0x6c>)
  4053ae:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4053b0:	687b      	ldr	r3, [r7, #4]
  4053b2:	4a13      	ldr	r2, [pc, #76]	; (405400 <_uart_get_hardware_index+0x70>)
  4053b4:	4293      	cmp	r3, r2
  4053b6:	d101      	bne.n	4053bc <_uart_get_hardware_index+0x2c>
		return 0;
  4053b8:	2300      	movs	r3, #0
  4053ba:	e018      	b.n	4053ee <_uart_get_hardware_index+0x5e>
	} else if (UART1 == hw) {
  4053bc:	687b      	ldr	r3, [r7, #4]
  4053be:	4a11      	ldr	r2, [pc, #68]	; (405404 <_uart_get_hardware_index+0x74>)
  4053c0:	4293      	cmp	r3, r2
  4053c2:	d101      	bne.n	4053c8 <_uart_get_hardware_index+0x38>
		return 1;
  4053c4:	2301      	movs	r3, #1
  4053c6:	e012      	b.n	4053ee <_uart_get_hardware_index+0x5e>
	} else if (UART2 == hw) {
  4053c8:	687b      	ldr	r3, [r7, #4]
  4053ca:	4a0f      	ldr	r2, [pc, #60]	; (405408 <_uart_get_hardware_index+0x78>)
  4053cc:	4293      	cmp	r3, r2
  4053ce:	d101      	bne.n	4053d4 <_uart_get_hardware_index+0x44>
		return 2;
  4053d0:	2302      	movs	r3, #2
  4053d2:	e00c      	b.n	4053ee <_uart_get_hardware_index+0x5e>
	} else if (UART3 == hw) {
  4053d4:	687b      	ldr	r3, [r7, #4]
  4053d6:	4a0d      	ldr	r2, [pc, #52]	; (40540c <_uart_get_hardware_index+0x7c>)
  4053d8:	4293      	cmp	r3, r2
  4053da:	d101      	bne.n	4053e0 <_uart_get_hardware_index+0x50>
		return 3;
  4053dc:	2303      	movs	r3, #3
  4053de:	e006      	b.n	4053ee <_uart_get_hardware_index+0x5e>
	} else if (UART4 == hw) {
  4053e0:	687b      	ldr	r3, [r7, #4]
  4053e2:	4a0b      	ldr	r2, [pc, #44]	; (405410 <_uart_get_hardware_index+0x80>)
  4053e4:	4293      	cmp	r3, r2
  4053e6:	d101      	bne.n	4053ec <_uart_get_hardware_index+0x5c>
		return 4;
  4053e8:	2304      	movs	r3, #4
  4053ea:	e000      	b.n	4053ee <_uart_get_hardware_index+0x5e>
	} else {
		return ERR_INVALID_DATA;
  4053ec:	23ff      	movs	r3, #255	; 0xff
	}
}
  4053ee:	4618      	mov	r0, r3
  4053f0:	3708      	adds	r7, #8
  4053f2:	46bd      	mov	sp, r7
  4053f4:	bd80      	pop	{r7, pc}
  4053f6:	bf00      	nop
  4053f8:	004076d0 	.word	0x004076d0
  4053fc:	00402d25 	.word	0x00402d25
  405400:	400e0800 	.word	0x400e0800
  405404:	400e0a00 	.word	0x400e0a00
  405408:	400e1a00 	.word	0x400e1a00
  40540c:	400e1c00 	.word	0x400e1c00
  405410:	400e1e00 	.word	0x400e1e00

00405414 <_uart_get_usart_sync>:

/**
 * \brief Retrieve usart sync helper functions
 */
void *_uart_get_usart_sync(void)
{
  405414:	b480      	push	{r7}
  405416:	af00      	add	r7, sp, #0
	return (void *)NULL;
  405418:	2300      	movs	r3, #0
}
  40541a:	4618      	mov	r0, r3
  40541c:	46bd      	mov	sp, r7
  40541e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405422:	4770      	bx	lr

00405424 <_uart_get_usart_async>:

/**
 * \brief Retrieve usart async helper functions
 */
void *_uart_get_usart_async(void)
{
  405424:	b480      	push	{r7}
  405426:	af00      	add	r7, sp, #0
	return (void *)NULL;
  405428:	2300      	movs	r3, #0
}
  40542a:	4618      	mov	r0, r3
  40542c:	46bd      	mov	sp, r7
  40542e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405432:	4770      	bx	lr

00405434 <_uart_interrupt_handler>:
 * \internal Uart interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _uart_interrupt_handler(struct _usart_async_device *device)
{
  405434:	b590      	push	{r4, r7, lr}
  405436:	b085      	sub	sp, #20
  405438:	af00      	add	r7, sp, #0
  40543a:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  40543c:	687b      	ldr	r3, [r7, #4]
  40543e:	2b00      	cmp	r3, #0
  405440:	bf14      	ite	ne
  405442:	2301      	movne	r3, #1
  405444:	2300      	moveq	r3, #0
  405446:	b2db      	uxtb	r3, r3
  405448:	f240 2281 	movw	r2, #641	; 0x281
  40544c:	4935      	ldr	r1, [pc, #212]	; (405524 <_uart_interrupt_handler+0xf0>)
  40544e:	4618      	mov	r0, r3
  405450:	4b35      	ldr	r3, [pc, #212]	; (405528 <_uart_interrupt_handler+0xf4>)
  405452:	4798      	blx	r3
	void *hw = device->hw;
  405454:	687b      	ldr	r3, [r7, #4]
  405456:	699b      	ldr	r3, [r3, #24]
  405458:	60fb      	str	r3, [r7, #12]

	if (hri_uart_get_SR_TXRDY_bit(hw) && hri_uart_get_IMR_TXRDY_bit(hw)) {
  40545a:	68f8      	ldr	r0, [r7, #12]
  40545c:	4b33      	ldr	r3, [pc, #204]	; (40552c <_uart_interrupt_handler+0xf8>)
  40545e:	4798      	blx	r3
  405460:	4603      	mov	r3, r0
  405462:	2b00      	cmp	r3, #0
  405464:	d00d      	beq.n	405482 <_uart_interrupt_handler+0x4e>
  405466:	68f8      	ldr	r0, [r7, #12]
  405468:	4b31      	ldr	r3, [pc, #196]	; (405530 <_uart_interrupt_handler+0xfc>)
  40546a:	4798      	blx	r3
  40546c:	4603      	mov	r3, r0
  40546e:	2b00      	cmp	r3, #0
  405470:	d007      	beq.n	405482 <_uart_interrupt_handler+0x4e>
		hri_uart_clear_IMR_TXRDY_bit(hw);
  405472:	68f8      	ldr	r0, [r7, #12]
  405474:	4b2f      	ldr	r3, [pc, #188]	; (405534 <_uart_interrupt_handler+0x100>)
  405476:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
  405478:	687b      	ldr	r3, [r7, #4]
  40547a:	681b      	ldr	r3, [r3, #0]
  40547c:	6878      	ldr	r0, [r7, #4]
  40547e:	4798      	blx	r3
  405480:	e04c      	b.n	40551c <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_TXEMPTY_bit(hw) && hri_uart_get_IMR_TXEMPTY_bit(hw)) {
  405482:	68f8      	ldr	r0, [r7, #12]
  405484:	4b2c      	ldr	r3, [pc, #176]	; (405538 <_uart_interrupt_handler+0x104>)
  405486:	4798      	blx	r3
  405488:	4603      	mov	r3, r0
  40548a:	2b00      	cmp	r3, #0
  40548c:	d00d      	beq.n	4054aa <_uart_interrupt_handler+0x76>
  40548e:	68f8      	ldr	r0, [r7, #12]
  405490:	4b2a      	ldr	r3, [pc, #168]	; (40553c <_uart_interrupt_handler+0x108>)
  405492:	4798      	blx	r3
  405494:	4603      	mov	r3, r0
  405496:	2b00      	cmp	r3, #0
  405498:	d007      	beq.n	4054aa <_uart_interrupt_handler+0x76>
		hri_uart_clear_IMR_TXEMPTY_bit(hw);
  40549a:	68f8      	ldr	r0, [r7, #12]
  40549c:	4b28      	ldr	r3, [pc, #160]	; (405540 <_uart_interrupt_handler+0x10c>)
  40549e:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
  4054a0:	687b      	ldr	r3, [r7, #4]
  4054a2:	689b      	ldr	r3, [r3, #8]
  4054a4:	6878      	ldr	r0, [r7, #4]
  4054a6:	4798      	blx	r3
  4054a8:	e038      	b.n	40551c <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_RXRDY_bit(hw) && hri_uart_get_IMR_RXRDY_bit(hw)) {
  4054aa:	68f8      	ldr	r0, [r7, #12]
  4054ac:	4b25      	ldr	r3, [pc, #148]	; (405544 <_uart_interrupt_handler+0x110>)
  4054ae:	4798      	blx	r3
  4054b0:	4603      	mov	r3, r0
  4054b2:	2b00      	cmp	r3, #0
  4054b4:	d021      	beq.n	4054fa <_uart_interrupt_handler+0xc6>
  4054b6:	68f8      	ldr	r0, [r7, #12]
  4054b8:	4b23      	ldr	r3, [pc, #140]	; (405548 <_uart_interrupt_handler+0x114>)
  4054ba:	4798      	blx	r3
  4054bc:	4603      	mov	r3, r0
  4054be:	2b00      	cmp	r3, #0
  4054c0:	d01b      	beq.n	4054fa <_uart_interrupt_handler+0xc6>
		if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  4054c2:	68f8      	ldr	r0, [r7, #12]
  4054c4:	4b21      	ldr	r3, [pc, #132]	; (40554c <_uart_interrupt_handler+0x118>)
  4054c6:	4798      	blx	r3
  4054c8:	4603      	mov	r3, r0
  4054ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  4054ce:	2b00      	cmp	r3, #0
  4054d0:	d008      	beq.n	4054e4 <_uart_interrupt_handler+0xb0>
			hri_uart_read_RHR_reg(hw);
  4054d2:	68f8      	ldr	r0, [r7, #12]
  4054d4:	4b1e      	ldr	r3, [pc, #120]	; (405550 <_uart_interrupt_handler+0x11c>)
  4054d6:	4798      	blx	r3
			hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  4054d8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4054dc:	68f8      	ldr	r0, [r7, #12]
  4054de:	4b1d      	ldr	r3, [pc, #116]	; (405554 <_uart_interrupt_handler+0x120>)
  4054e0:	4798      	blx	r3
			return;
  4054e2:	e01b      	b.n	40551c <_uart_interrupt_handler+0xe8>
		}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_uart_read_RHR_RXCHR_bf(hw));
  4054e4:	687b      	ldr	r3, [r7, #4]
  4054e6:	685c      	ldr	r4, [r3, #4]
  4054e8:	68f8      	ldr	r0, [r7, #12]
  4054ea:	4b1b      	ldr	r3, [pc, #108]	; (405558 <_uart_interrupt_handler+0x124>)
  4054ec:	4798      	blx	r3
  4054ee:	4603      	mov	r3, r0
  4054f0:	b2db      	uxtb	r3, r3
  4054f2:	4619      	mov	r1, r3
  4054f4:	6878      	ldr	r0, [r7, #4]
  4054f6:	47a0      	blx	r4
  4054f8:	e010      	b.n	40551c <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  4054fa:	68f8      	ldr	r0, [r7, #12]
  4054fc:	4b13      	ldr	r3, [pc, #76]	; (40554c <_uart_interrupt_handler+0x118>)
  4054fe:	4798      	blx	r3
  405500:	4603      	mov	r3, r0
  405502:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  405506:	2b00      	cmp	r3, #0
  405508:	d008      	beq.n	40551c <_uart_interrupt_handler+0xe8>
		hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  40550a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40550e:	68f8      	ldr	r0, [r7, #12]
  405510:	4b10      	ldr	r3, [pc, #64]	; (405554 <_uart_interrupt_handler+0x120>)
  405512:	4798      	blx	r3
		device->usart_cb.error_cb(device);
  405514:	687b      	ldr	r3, [r7, #4]
  405516:	68db      	ldr	r3, [r3, #12]
  405518:	6878      	ldr	r0, [r7, #4]
  40551a:	4798      	blx	r3
	}
}
  40551c:	3714      	adds	r7, #20
  40551e:	46bd      	mov	sp, r7
  405520:	bd90      	pop	{r4, r7, pc}
  405522:	bf00      	nop
  405524:	004076d0 	.word	0x004076d0
  405528:	00402d25 	.word	0x00402d25
  40552c:	00404ebd 	.word	0x00404ebd
  405530:	00404df5 	.word	0x00404df5
  405534:	00404e1d 	.word	0x00404e1d
  405538:	00404ee3 	.word	0x00404ee3
  40553c:	00404e53 	.word	0x00404e53
  405540:	00404e7b 	.word	0x00404e7b
  405544:	00404e97 	.word	0x00404e97
  405548:	00404db5 	.word	0x00404db5
  40554c:	00404f09 	.word	0x00404f09
  405550:	00404f3b 	.word	0x00404f3b
  405554:	00404fa9 	.word	0x00404fa9
  405558:	00404f21 	.word	0x00404f21

0040555c <UART4_Handler>:

/**
 * \internal UART interrupt handler
 */
void UART4_Handler(void)
{
  40555c:	b580      	push	{r7, lr}
  40555e:	af00      	add	r7, sp, #0
	_uart_interrupt_handler(_uart4_dev);
  405560:	4b03      	ldr	r3, [pc, #12]	; (405570 <UART4_Handler+0x14>)
  405562:	681b      	ldr	r3, [r3, #0]
  405564:	4618      	mov	r0, r3
  405566:	4b03      	ldr	r3, [pc, #12]	; (405574 <UART4_Handler+0x18>)
  405568:	4798      	blx	r3
}
  40556a:	bf00      	nop
  40556c:	bd80      	pop	{r7, pc}
  40556e:	bf00      	nop
  405570:	204011c4 	.word	0x204011c4
  405574:	00405435 	.word	0x00405435

00405578 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  405578:	b580      	push	{r7, lr}
  40557a:	b084      	sub	sp, #16
  40557c:	af00      	add	r7, sp, #0
  40557e:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  405580:	687b      	ldr	r3, [r7, #4]
  405582:	2b00      	cmp	r3, #0
  405584:	bf14      	ite	ne
  405586:	2301      	movne	r3, #1
  405588:	2300      	moveq	r3, #0
  40558a:	b2db      	uxtb	r3, r3
  40558c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  405590:	4914      	ldr	r1, [pc, #80]	; (4055e4 <_get_uart_index+0x6c>)
  405592:	4618      	mov	r0, r3
  405594:	4b14      	ldr	r3, [pc, #80]	; (4055e8 <_get_uart_index+0x70>)
  405596:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  405598:	6878      	ldr	r0, [r7, #4]
  40559a:	4b14      	ldr	r3, [pc, #80]	; (4055ec <_get_uart_index+0x74>)
  40559c:	4798      	blx	r3
  40559e:	4603      	mov	r3, r0
  4055a0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4055a2:	2300      	movs	r3, #0
  4055a4:	73fb      	strb	r3, [r7, #15]
  4055a6:	e00f      	b.n	4055c8 <_get_uart_index+0x50>
		if (_uarts[i].number == uart_offset) {
  4055a8:	7bfa      	ldrb	r2, [r7, #15]
  4055aa:	4911      	ldr	r1, [pc, #68]	; (4055f0 <_get_uart_index+0x78>)
  4055ac:	4613      	mov	r3, r2
  4055ae:	005b      	lsls	r3, r3, #1
  4055b0:	4413      	add	r3, r2
  4055b2:	009b      	lsls	r3, r3, #2
  4055b4:	440b      	add	r3, r1
  4055b6:	781b      	ldrb	r3, [r3, #0]
  4055b8:	7bba      	ldrb	r2, [r7, #14]
  4055ba:	429a      	cmp	r2, r3
  4055bc:	d101      	bne.n	4055c2 <_get_uart_index+0x4a>
			return i;
  4055be:	7bfb      	ldrb	r3, [r7, #15]
  4055c0:	e00c      	b.n	4055dc <_get_uart_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4055c2:	7bfb      	ldrb	r3, [r7, #15]
  4055c4:	3301      	adds	r3, #1
  4055c6:	73fb      	strb	r3, [r7, #15]
  4055c8:	7bfb      	ldrb	r3, [r7, #15]
  4055ca:	2b01      	cmp	r3, #1
  4055cc:	d9ec      	bls.n	4055a8 <_get_uart_index+0x30>
		}
	}

	ASSERT(false);
  4055ce:	f240 22b2 	movw	r2, #690	; 0x2b2
  4055d2:	4904      	ldr	r1, [pc, #16]	; (4055e4 <_get_uart_index+0x6c>)
  4055d4:	2000      	movs	r0, #0
  4055d6:	4b04      	ldr	r3, [pc, #16]	; (4055e8 <_get_uart_index+0x70>)
  4055d8:	4798      	blx	r3
	return 0;
  4055da:	2300      	movs	r3, #0
}
  4055dc:	4618      	mov	r0, r3
  4055de:	3710      	adds	r7, #16
  4055e0:	46bd      	mov	sp, r7
  4055e2:	bd80      	pop	{r7, pc}
  4055e4:	004076d0 	.word	0x004076d0
  4055e8:	00402d25 	.word	0x00402d25
  4055ec:	00405391 	.word	0x00405391
  4055f0:	20400008 	.word	0x20400008

004055f4 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  4055f4:	b580      	push	{r7, lr}
  4055f6:	b084      	sub	sp, #16
  4055f8:	af00      	add	r7, sp, #0
  4055fa:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4055fc:	687b      	ldr	r3, [r7, #4]
  4055fe:	2b00      	cmp	r3, #0
  405600:	bf14      	ite	ne
  405602:	2301      	movne	r3, #1
  405604:	2300      	moveq	r3, #0
  405606:	b2db      	uxtb	r3, r3
  405608:	f240 22bf 	movw	r2, #703	; 0x2bf
  40560c:	491a      	ldr	r1, [pc, #104]	; (405678 <_uart_init+0x84>)
  40560e:	4618      	mov	r0, r3
  405610:	4b1a      	ldr	r3, [pc, #104]	; (40567c <_uart_init+0x88>)
  405612:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  405614:	6878      	ldr	r0, [r7, #4]
  405616:	4b1a      	ldr	r3, [pc, #104]	; (405680 <_uart_init+0x8c>)
  405618:	4798      	blx	r3
  40561a:	4603      	mov	r3, r0
  40561c:	73fb      	strb	r3, [r7, #15]
	/* Disable the Write Protect. */
	hri_uart_write_WPMR_reg(hw, UART_WPMR_WPKEY_PASSWD);
  40561e:	4919      	ldr	r1, [pc, #100]	; (405684 <_uart_init+0x90>)
  405620:	6878      	ldr	r0, [r7, #4]
  405622:	4b19      	ldr	r3, [pc, #100]	; (405688 <_uart_init+0x94>)
  405624:	4798      	blx	r3

	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
  405626:	21ac      	movs	r1, #172	; 0xac
  405628:	6878      	ldr	r0, [r7, #4]
  40562a:	4b18      	ldr	r3, [pc, #96]	; (40568c <_uart_init+0x98>)
  40562c:	4798      	blx	r3
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  40562e:	f44f 7180 	mov.w	r1, #256	; 0x100
  405632:	6878      	ldr	r0, [r7, #4]
  405634:	4b15      	ldr	r3, [pc, #84]	; (40568c <_uart_init+0x98>)
  405636:	4798      	blx	r3

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  405638:	7bfa      	ldrb	r2, [r7, #15]
  40563a:	4915      	ldr	r1, [pc, #84]	; (405690 <_uart_init+0x9c>)
  40563c:	4613      	mov	r3, r2
  40563e:	005b      	lsls	r3, r3, #1
  405640:	4413      	add	r3, r2
  405642:	009b      	lsls	r3, r3, #2
  405644:	440b      	add	r3, r1
  405646:	3304      	adds	r3, #4
  405648:	681b      	ldr	r3, [r3, #0]
  40564a:	4619      	mov	r1, r3
  40564c:	6878      	ldr	r0, [r7, #4]
  40564e:	4b11      	ldr	r3, [pc, #68]	; (405694 <_uart_init+0xa0>)
  405650:	4798      	blx	r3
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);
  405652:	7bfa      	ldrb	r2, [r7, #15]
  405654:	490e      	ldr	r1, [pc, #56]	; (405690 <_uart_init+0x9c>)
  405656:	4613      	mov	r3, r2
  405658:	005b      	lsls	r3, r3, #1
  40565a:	4413      	add	r3, r2
  40565c:	009b      	lsls	r3, r3, #2
  40565e:	440b      	add	r3, r1
  405660:	3308      	adds	r3, #8
  405662:	681b      	ldr	r3, [r3, #0]
  405664:	4619      	mov	r1, r3
  405666:	6878      	ldr	r0, [r7, #4]
  405668:	4b0b      	ldr	r3, [pc, #44]	; (405698 <_uart_init+0xa4>)
  40566a:	4798      	blx	r3

	return ERR_NONE;
  40566c:	2300      	movs	r3, #0
}
  40566e:	4618      	mov	r0, r3
  405670:	3710      	adds	r7, #16
  405672:	46bd      	mov	sp, r7
  405674:	bd80      	pop	{r7, pc}
  405676:	bf00      	nop
  405678:	004076d0 	.word	0x004076d0
  40567c:	00402d25 	.word	0x00402d25
  405680:	00405579 	.word	0x00405579
  405684:	55415200 	.word	0x55415200
  405688:	00404f8b 	.word	0x00404f8b
  40568c:	00404fa9 	.word	0x00404fa9
  405690:	20400008 	.word	0x20400008
  405694:	00404f53 	.word	0x00404f53
  405698:	00404f6f 	.word	0x00404f6f

0040569c <hri_usbhs_get_DEVEPTISR_RXSTPI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_RXOUTI;
}

static inline bool hri_usbhs_get_DEVEPTISR_RXSTPI_bit(const void *const hw, uint8_t index)
{
  40569c:	b480      	push	{r7}
  40569e:	b083      	sub	sp, #12
  4056a0:	af00      	add	r7, sp, #0
  4056a2:	6078      	str	r0, [r7, #4]
  4056a4:	460b      	mov	r3, r1
  4056a6:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  4056a8:	78fa      	ldrb	r2, [r7, #3]
  4056aa:	687b      	ldr	r3, [r7, #4]
  4056ac:	324c      	adds	r2, #76	; 0x4c
  4056ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4056b2:	089b      	lsrs	r3, r3, #2
  4056b4:	f003 0301 	and.w	r3, r3, #1
  4056b8:	2b00      	cmp	r3, #0
  4056ba:	bf14      	ite	ne
  4056bc:	2301      	movne	r3, #1
  4056be:	2300      	moveq	r3, #0
  4056c0:	b2db      	uxtb	r3, r3
}
  4056c2:	4618      	mov	r0, r3
  4056c4:	370c      	adds	r7, #12
  4056c6:	46bd      	mov	sp, r7
  4056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056cc:	4770      	bx	lr

004056ce <hri_usbhs_get_DEVEPTISR_STALLEDI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_OVERFI;
}

static inline bool hri_usbhs_get_DEVEPTISR_STALLEDI_bit(const void *const hw, uint8_t index)
{
  4056ce:	b480      	push	{r7}
  4056d0:	b083      	sub	sp, #12
  4056d2:	af00      	add	r7, sp, #0
  4056d4:	6078      	str	r0, [r7, #4]
  4056d6:	460b      	mov	r3, r1
  4056d8:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  4056da:	78fa      	ldrb	r2, [r7, #3]
  4056dc:	687b      	ldr	r3, [r7, #4]
  4056de:	324c      	adds	r2, #76	; 0x4c
  4056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4056e4:	099b      	lsrs	r3, r3, #6
  4056e6:	f003 0301 	and.w	r3, r3, #1
  4056ea:	2b00      	cmp	r3, #0
  4056ec:	bf14      	ite	ne
  4056ee:	2301      	movne	r3, #1
  4056f0:	2300      	moveq	r3, #0
  4056f2:	b2db      	uxtb	r3, r3
}
  4056f4:	4618      	mov	r0, r3
  4056f6:	370c      	adds	r7, #12
  4056f8:	46bd      	mov	sp, r7
  4056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056fe:	4770      	bx	lr

00405700 <hri_usbhs_get_DEVEPTISR_reg>:
	return tmp;
}

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_get_DEVEPTISR_reg(const void *const hw, uint8_t index,
                                                                    hri_usbhs_deveptisr_reg_t mask)
{
  405700:	b480      	push	{r7}
  405702:	b087      	sub	sp, #28
  405704:	af00      	add	r7, sp, #0
  405706:	60f8      	str	r0, [r7, #12]
  405708:	460b      	mov	r3, r1
  40570a:	607a      	str	r2, [r7, #4]
  40570c:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  40570e:	7afa      	ldrb	r2, [r7, #11]
  405710:	68fb      	ldr	r3, [r7, #12]
  405712:	324c      	adds	r2, #76	; 0x4c
  405714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405718:	617b      	str	r3, [r7, #20]
	tmp &= mask;
  40571a:	697a      	ldr	r2, [r7, #20]
  40571c:	687b      	ldr	r3, [r7, #4]
  40571e:	4013      	ands	r3, r2
  405720:	617b      	str	r3, [r7, #20]
	return tmp;
  405722:	697b      	ldr	r3, [r7, #20]
}
  405724:	4618      	mov	r0, r3
  405726:	371c      	adds	r7, #28
  405728:	46bd      	mov	sp, r7
  40572a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40572e:	4770      	bx	lr

00405730 <hri_usbhs_read_DEVEPTISR_reg>:

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_read_DEVEPTISR_reg(const void *const hw, uint8_t index)
{
  405730:	b480      	push	{r7}
  405732:	b083      	sub	sp, #12
  405734:	af00      	add	r7, sp, #0
  405736:	6078      	str	r0, [r7, #4]
  405738:	460b      	mov	r3, r1
  40573a:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  40573c:	78fa      	ldrb	r2, [r7, #3]
  40573e:	687b      	ldr	r3, [r7, #4]
  405740:	324c      	adds	r2, #76	; 0x4c
  405742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  405746:	4618      	mov	r0, r3
  405748:	370c      	adds	r7, #12
  40574a:	46bd      	mov	sp, r7
  40574c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405750:	4770      	bx	lr

00405752 <hri_usbhs_write_DEVEPTICR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
  405752:	b480      	push	{r7}
  405754:	b085      	sub	sp, #20
  405756:	af00      	add	r7, sp, #0
  405758:	60f8      	str	r0, [r7, #12]
  40575a:	460b      	mov	r3, r1
  40575c:	607a      	str	r2, [r7, #4]
  40575e:	72fb      	strb	r3, [r7, #11]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  405760:	7afa      	ldrb	r2, [r7, #11]
  405762:	68fb      	ldr	r3, [r7, #12]
  405764:	3258      	adds	r2, #88	; 0x58
  405766:	6879      	ldr	r1, [r7, #4]
  405768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40576c:	bf00      	nop
  40576e:	3714      	adds	r7, #20
  405770:	46bd      	mov	sp, r7
  405772:	f85d 7b04 	ldr.w	r7, [sp], #4
  405776:	4770      	bx	lr

00405778 <hri_usbhs_set_DEVIMR_SUSPE_bit>:
{
	((Usbhs *)hw)->USBHS_SCR = data;
}

static inline void hri_usbhs_set_DEVIMR_SUSPE_bit(const void *const hw)
{
  405778:	b480      	push	{r7}
  40577a:	b083      	sub	sp, #12
  40577c:	af00      	add	r7, sp, #0
  40577e:	6078      	str	r0, [r7, #4]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  405780:	687b      	ldr	r3, [r7, #4]
  405782:	2201      	movs	r2, #1
  405784:	619a      	str	r2, [r3, #24]
}
  405786:	bf00      	nop
  405788:	370c      	adds	r7, #12
  40578a:	46bd      	mov	sp, r7
  40578c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405790:	4770      	bx	lr

00405792 <hri_usbhs_set_DEVIMR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_DMA_7;
}

static inline void hri_usbhs_set_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  405792:	b480      	push	{r7}
  405794:	b083      	sub	sp, #12
  405796:	af00      	add	r7, sp, #0
  405798:	6078      	str	r0, [r7, #4]
  40579a:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  40579c:	687b      	ldr	r3, [r7, #4]
  40579e:	683a      	ldr	r2, [r7, #0]
  4057a0:	619a      	str	r2, [r3, #24]
}
  4057a2:	bf00      	nop
  4057a4:	370c      	adds	r7, #12
  4057a6:	46bd      	mov	sp, r7
  4057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057ac:	4770      	bx	lr

004057ae <hri_usbhs_read_DEVIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devimr_reg_t hri_usbhs_read_DEVIMR_reg(const void *const hw)
{
  4057ae:	b480      	push	{r7}
  4057b0:	b083      	sub	sp, #12
  4057b2:	af00      	add	r7, sp, #0
  4057b4:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  4057b6:	687b      	ldr	r3, [r7, #4]
  4057b8:	691b      	ldr	r3, [r3, #16]
}
  4057ba:	4618      	mov	r0, r3
  4057bc:	370c      	adds	r7, #12
  4057be:	46bd      	mov	sp, r7
  4057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057c4:	4770      	bx	lr

004057c6 <hri_usbhs_clear_DEVIMR_reg>:
	((Usbhs *)hw)->USBHS_DEVIER = data;
	((Usbhs *)hw)->USBHS_DEVIDR = ~data;
}

static inline void hri_usbhs_clear_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  4057c6:	b480      	push	{r7}
  4057c8:	b083      	sub	sp, #12
  4057ca:	af00      	add	r7, sp, #0
  4057cc:	6078      	str	r0, [r7, #4]
  4057ce:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  4057d0:	687b      	ldr	r3, [r7, #4]
  4057d2:	683a      	ldr	r2, [r7, #0]
  4057d4:	615a      	str	r2, [r3, #20]
}
  4057d6:	bf00      	nop
  4057d8:	370c      	adds	r7, #12
  4057da:	46bd      	mov	sp, r7
  4057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057e0:	4770      	bx	lr

004057e2 <hri_usbhs_read_DEVISR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devisr_reg_t hri_usbhs_read_DEVISR_reg(const void *const hw)
{
  4057e2:	b480      	push	{r7}
  4057e4:	b083      	sub	sp, #12
  4057e6:	af00      	add	r7, sp, #0
  4057e8:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVISR;
  4057ea:	687b      	ldr	r3, [r7, #4]
  4057ec:	685b      	ldr	r3, [r3, #4]
}
  4057ee:	4618      	mov	r0, r3
  4057f0:	370c      	adds	r7, #12
  4057f2:	46bd      	mov	sp, r7
  4057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057f8:	4770      	bx	lr

004057fa <hri_usbhs_read_DEVEPTIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_deveptimr_reg_t hri_usbhs_read_DEVEPTIMR_reg(const void *const hw, uint8_t index)
{
  4057fa:	b480      	push	{r7}
  4057fc:	b083      	sub	sp, #12
  4057fe:	af00      	add	r7, sp, #0
  405800:	6078      	str	r0, [r7, #4]
  405802:	460b      	mov	r3, r1
  405804:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  405806:	78fa      	ldrb	r2, [r7, #3]
  405808:	687b      	ldr	r3, [r7, #4]
  40580a:	3270      	adds	r2, #112	; 0x70
  40580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  405810:	4618      	mov	r0, r3
  405812:	370c      	adds	r7, #12
  405814:	46bd      	mov	sp, r7
  405816:	f85d 7b04 	ldr.w	r7, [sp], #4
  40581a:	4770      	bx	lr

0040581c <hri_usbhs_set_DEVCTRL_ADDEN_bit>:
{
	return ((Usbhs *)hw)->USBHS_HSTPIPIMR[index];
}

static inline void hri_usbhs_set_DEVCTRL_ADDEN_bit(const void *const hw)
{
  40581c:	b480      	push	{r7}
  40581e:	b083      	sub	sp, #12
  405820:	af00      	add	r7, sp, #0
  405822:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  405824:	687b      	ldr	r3, [r7, #4]
  405826:	681b      	ldr	r3, [r3, #0]
  405828:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  40582c:	687b      	ldr	r3, [r7, #4]
  40582e:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405830:	bf00      	nop
  405832:	370c      	adds	r7, #12
  405834:	46bd      	mov	sp, r7
  405836:	f85d 7b04 	ldr.w	r7, [sp], #4
  40583a:	4770      	bx	lr

0040583c <hri_usbhs_clear_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
  40583c:	b480      	push	{r7}
  40583e:	b083      	sub	sp, #12
  405840:	af00      	add	r7, sp, #0
  405842:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  405844:	687b      	ldr	r3, [r7, #4]
  405846:	681b      	ldr	r3, [r3, #0]
  405848:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40584c:	687b      	ldr	r3, [r7, #4]
  40584e:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405850:	bf00      	nop
  405852:	370c      	adds	r7, #12
  405854:	46bd      	mov	sp, r7
  405856:	f85d 7b04 	ldr.w	r7, [sp], #4
  40585a:	4770      	bx	lr

0040585c <hri_usbhs_write_DEVCTRL_UADD_bf>:
	tmp = (tmp & USBHS_DEVCTRL_UADD(mask)) >> USBHS_DEVCTRL_UADD_Pos;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  40585c:	b480      	push	{r7}
  40585e:	b085      	sub	sp, #20
  405860:	af00      	add	r7, sp, #0
  405862:	6078      	str	r0, [r7, #4]
  405864:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  405866:	687b      	ldr	r3, [r7, #4]
  405868:	681b      	ldr	r3, [r3, #0]
  40586a:	60fb      	str	r3, [r7, #12]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  40586c:	68fb      	ldr	r3, [r7, #12]
  40586e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405872:	60fb      	str	r3, [r7, #12]
	tmp |= USBHS_DEVCTRL_UADD(data);
  405874:	683b      	ldr	r3, [r7, #0]
  405876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40587a:	68fa      	ldr	r2, [r7, #12]
  40587c:	4313      	orrs	r3, r2
  40587e:	60fb      	str	r3, [r7, #12]
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  405880:	687b      	ldr	r3, [r7, #4]
  405882:	68fa      	ldr	r2, [r7, #12]
  405884:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405886:	bf00      	nop
  405888:	3714      	adds	r7, #20
  40588a:	46bd      	mov	sp, r7
  40588c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405890:	4770      	bx	lr

00405892 <hri_usbhs_write_DEVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_reg(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  405892:	b480      	push	{r7}
  405894:	b083      	sub	sp, #12
  405896:	af00      	add	r7, sp, #0
  405898:	6078      	str	r0, [r7, #4]
  40589a:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  40589c:	687b      	ldr	r3, [r7, #4]
  40589e:	683a      	ldr	r2, [r7, #0]
  4058a0:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4058a2:	bf00      	nop
  4058a4:	370c      	adds	r7, #12
  4058a6:	46bd      	mov	sp, r7
  4058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058ac:	4770      	bx	lr

004058ae <hri_usbhs_set_DEVEPT_reg>:
	((Usbhs *)hw)->USBHS_DEVEPT ^= USBHS_DEVEPT_EPRST9;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t mask)
{
  4058ae:	b480      	push	{r7}
  4058b0:	b083      	sub	sp, #12
  4058b2:	af00      	add	r7, sp, #0
  4058b4:	6078      	str	r0, [r7, #4]
  4058b6:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT |= mask;
  4058b8:	687b      	ldr	r3, [r7, #4]
  4058ba:	69da      	ldr	r2, [r3, #28]
  4058bc:	683b      	ldr	r3, [r7, #0]
  4058be:	431a      	orrs	r2, r3
  4058c0:	687b      	ldr	r3, [r7, #4]
  4058c2:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4058c4:	bf00      	nop
  4058c6:	370c      	adds	r7, #12
  4058c8:	46bd      	mov	sp, r7
  4058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058ce:	4770      	bx	lr

004058d0 <hri_usbhs_clear_DEVEPT_reg>:
	((Usbhs *)hw)->USBHS_DEVEPT = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t mask)
{
  4058d0:	b480      	push	{r7}
  4058d2:	b083      	sub	sp, #12
  4058d4:	af00      	add	r7, sp, #0
  4058d6:	6078      	str	r0, [r7, #4]
  4058d8:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT &= ~mask;
  4058da:	687b      	ldr	r3, [r7, #4]
  4058dc:	69da      	ldr	r2, [r3, #28]
  4058de:	683b      	ldr	r3, [r7, #0]
  4058e0:	43db      	mvns	r3, r3
  4058e2:	401a      	ands	r2, r3
  4058e4:	687b      	ldr	r3, [r7, #4]
  4058e6:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4058e8:	bf00      	nop
  4058ea:	370c      	adds	r7, #12
  4058ec:	46bd      	mov	sp, r7
  4058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058f2:	4770      	bx	lr

004058f4 <hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  4058f4:	b480      	push	{r7}
  4058f6:	b083      	sub	sp, #12
  4058f8:	af00      	add	r7, sp, #0
  4058fa:	6078      	str	r0, [r7, #4]
  4058fc:	460b      	mov	r3, r1
  4058fe:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  405900:	78fa      	ldrb	r2, [r7, #3]
  405902:	78f9      	ldrb	r1, [r7, #3]
  405904:	687b      	ldr	r3, [r7, #4]
  405906:	3140      	adds	r1, #64	; 0x40
  405908:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40590c:	f423 7100 	bic.w	r1, r3, #512	; 0x200
  405910:	687b      	ldr	r3, [r7, #4]
  405912:	3240      	adds	r2, #64	; 0x40
  405914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405918:	bf00      	nop
  40591a:	370c      	adds	r7, #12
  40591c:	46bd      	mov	sp, r7
  40591e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405922:	4770      	bx	lr

00405924 <hri_usbhs_read_DEVEPTCFG_EPTYPE_bf>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPTYPE(mask);
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_deveptcfg_reg_t hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(const void *const hw, uint8_t index)
{
  405924:	b480      	push	{r7}
  405926:	b085      	sub	sp, #20
  405928:	af00      	add	r7, sp, #0
  40592a:	6078      	str	r0, [r7, #4]
  40592c:	460b      	mov	r3, r1
  40592e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  405930:	78fa      	ldrb	r2, [r7, #3]
  405932:	687b      	ldr	r3, [r7, #4]
  405934:	3240      	adds	r2, #64	; 0x40
  405936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40593a:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_DEVEPTCFG_EPTYPE_Msk) >> USBHS_DEVEPTCFG_EPTYPE_Pos;
  40593c:	68fb      	ldr	r3, [r7, #12]
  40593e:	0adb      	lsrs	r3, r3, #11
  405940:	f003 0303 	and.w	r3, r3, #3
  405944:	60fb      	str	r3, [r7, #12]
	return tmp;
  405946:	68fb      	ldr	r3, [r7, #12]
}
  405948:	4618      	mov	r0, r3
  40594a:	3714      	adds	r7, #20
  40594c:	46bd      	mov	sp, r7
  40594e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405952:	4770      	bx	lr

00405954 <hri_usbhs_get_CTRL_USBE_bit>:
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_CTRL_USBE_bit(const void *const hw)
{
  405954:	b480      	push	{r7}
  405956:	b085      	sub	sp, #20
  405958:	af00      	add	r7, sp, #0
  40595a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  40595c:	687b      	ldr	r3, [r7, #4]
  40595e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  405962:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_CTRL_USBE) >> USBHS_CTRL_USBE_Pos;
  405964:	68fb      	ldr	r3, [r7, #12]
  405966:	0bdb      	lsrs	r3, r3, #15
  405968:	f003 0301 	and.w	r3, r3, #1
  40596c:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
  40596e:	68fb      	ldr	r3, [r7, #12]
  405970:	2b00      	cmp	r3, #0
  405972:	bf14      	ite	ne
  405974:	2301      	movne	r3, #1
  405976:	2300      	moveq	r3, #0
  405978:	b2db      	uxtb	r3, r3
}
  40597a:	4618      	mov	r0, r3
  40597c:	3714      	adds	r7, #20
  40597e:	46bd      	mov	sp, r7
  405980:	f85d 7b04 	ldr.w	r7, [sp], #4
  405984:	4770      	bx	lr

00405986 <hri_usbhs_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_CTRL_reg(const void *const hw, hri_usbhs_ctrl_reg_t data)
{
  405986:	b480      	push	{r7}
  405988:	b083      	sub	sp, #12
  40598a:	af00      	add	r7, sp, #0
  40598c:	6078      	str	r0, [r7, #4]
  40598e:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL = data;
  405990:	687b      	ldr	r3, [r7, #4]
  405992:	683a      	ldr	r2, [r7, #0]
  405994:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405998:	bf00      	nop
  40599a:	370c      	adds	r7, #12
  40599c:	46bd      	mov	sp, r7
  40599e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059a2:	4770      	bx	lr

004059a4 <hri_usbhs_write_DEVICR_reg>:
{
	return ((Usbhs *)hw)->USBHS_CTRL;
}

static inline void hri_usbhs_write_DEVICR_reg(const void *const hw, hri_usbhs_devicr_reg_t data)
{
  4059a4:	b480      	push	{r7}
  4059a6:	b083      	sub	sp, #12
  4059a8:	af00      	add	r7, sp, #0
  4059aa:	6078      	str	r0, [r7, #4]
  4059ac:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVICR = data;
  4059ae:	687b      	ldr	r3, [r7, #4]
  4059b0:	683a      	ldr	r2, [r7, #0]
  4059b2:	609a      	str	r2, [r3, #8]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4059b4:	bf00      	nop
  4059b6:	370c      	adds	r7, #12
  4059b8:	46bd      	mov	sp, r7
  4059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059be:	4770      	bx	lr

004059c0 <hri_usbhs_write_DEVEPTIFR_reg>:
	((Usbhs *)hw)->USBHS_DEVIFR = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_write_DEVEPTIFR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptifr_reg_t data)
{
  4059c0:	b480      	push	{r7}
  4059c2:	b085      	sub	sp, #20
  4059c4:	af00      	add	r7, sp, #0
  4059c6:	60f8      	str	r0, [r7, #12]
  4059c8:	460b      	mov	r3, r1
  4059ca:	607a      	str	r2, [r7, #4]
  4059cc:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  4059ce:	7afa      	ldrb	r2, [r7, #11]
  4059d0:	68fb      	ldr	r3, [r7, #12]
  4059d2:	3264      	adds	r2, #100	; 0x64
  4059d4:	6879      	ldr	r1, [r7, #4]
  4059d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4059da:	bf00      	nop
  4059dc:	3714      	adds	r7, #20
  4059de:	46bd      	mov	sp, r7
  4059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059e4:	4770      	bx	lr

004059e6 <hri_usbhs_write_DEVEPTIER_reg>:

static inline void hri_usbhs_write_DEVEPTIER_reg(const void *const hw, uint8_t index, hri_usbhs_deveptier_reg_t data)
{
  4059e6:	b480      	push	{r7}
  4059e8:	b085      	sub	sp, #20
  4059ea:	af00      	add	r7, sp, #0
  4059ec:	60f8      	str	r0, [r7, #12]
  4059ee:	460b      	mov	r3, r1
  4059f0:	607a      	str	r2, [r7, #4]
  4059f2:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  4059f4:	7afa      	ldrb	r2, [r7, #11]
  4059f6:	68fb      	ldr	r3, [r7, #12]
  4059f8:	327c      	adds	r2, #124	; 0x7c
  4059fa:	6879      	ldr	r1, [r7, #4]
  4059fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405a00:	bf00      	nop
  405a02:	3714      	adds	r7, #20
  405a04:	46bd      	mov	sp, r7
  405a06:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a0a:	4770      	bx	lr

00405a0c <hri_usbhs_write_DEVEPTIDR_reg>:

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
  405a0c:	b480      	push	{r7}
  405a0e:	b085      	sub	sp, #20
  405a10:	af00      	add	r7, sp, #0
  405a12:	60f8      	str	r0, [r7, #12]
  405a14:	460b      	mov	r3, r1
  405a16:	607a      	str	r2, [r7, #4]
  405a18:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  405a1a:	7afa      	ldrb	r2, [r7, #11]
  405a1c:	68fb      	ldr	r3, [r7, #12]
  405a1e:	3288      	adds	r2, #136	; 0x88
  405a20:	6879      	ldr	r1, [r7, #4]
  405a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405a26:	bf00      	nop
  405a28:	3714      	adds	r7, #20
  405a2a:	46bd      	mov	sp, r7
  405a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a30:	4770      	bx	lr

00405a32 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  405a32:	b480      	push	{r7}
  405a34:	b083      	sub	sp, #12
  405a36:	af00      	add	r7, sp, #0
  405a38:	6078      	str	r0, [r7, #4]
  405a3a:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
}
  405a3c:	bf00      	nop
  405a3e:	370c      	adds	r7, #12
  405a40:	46bd      	mov	sp, r7
  405a42:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a46:	4770      	bx	lr

00405a48 <_dummy_func_return_false>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
  405a48:	b480      	push	{r7}
  405a4a:	b083      	sub	sp, #12
  405a4c:	af00      	add	r7, sp, #0
  405a4e:	6078      	str	r0, [r7, #4]
  405a50:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
  405a52:	2300      	movs	r3, #0
}
  405a54:	4618      	mov	r0, r3
  405a56:	370c      	adds	r7, #12
  405a58:	46bd      	mov	sp, r7
  405a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a5e:	4770      	bx	lr

00405a60 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
  405a60:	b580      	push	{r7, lr}
  405a62:	b082      	sub	sp, #8
  405a64:	af00      	add	r7, sp, #0
  405a66:	4603      	mov	r3, r0
  405a68:	6039      	str	r1, [r7, #0]
  405a6a:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTICR_reg(USBHS, epn, flags);
  405a6c:	79fb      	ldrb	r3, [r7, #7]
  405a6e:	683a      	ldr	r2, [r7, #0]
  405a70:	4619      	mov	r1, r3
  405a72:	4803      	ldr	r0, [pc, #12]	; (405a80 <_usbd_ep_int_ack+0x20>)
  405a74:	4b03      	ldr	r3, [pc, #12]	; (405a84 <_usbd_ep_int_ack+0x24>)
  405a76:	4798      	blx	r3
}
  405a78:	bf00      	nop
  405a7a:	3708      	adds	r7, #8
  405a7c:	46bd      	mov	sp, r7
  405a7e:	bd80      	pop	{r7, pc}
  405a80:	40038000 	.word	0x40038000
  405a84:	00405753 	.word	0x00405753

00405a88 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
  405a88:	b580      	push	{r7, lr}
  405a8a:	b082      	sub	sp, #8
  405a8c:	af00      	add	r7, sp, #0
  405a8e:	4603      	mov	r3, r0
  405a90:	6039      	str	r1, [r7, #0]
  405a92:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIER_reg(USBHS, epn, flags);
  405a94:	79fb      	ldrb	r3, [r7, #7]
  405a96:	683a      	ldr	r2, [r7, #0]
  405a98:	4619      	mov	r1, r3
  405a9a:	4808      	ldr	r0, [pc, #32]	; (405abc <_usbd_ep_int_en+0x34>)
  405a9c:	4b08      	ldr	r3, [pc, #32]	; (405ac0 <_usbd_ep_int_en+0x38>)
  405a9e:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  405aa0:	79fb      	ldrb	r3, [r7, #7]
  405aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405aa6:	fa02 f303 	lsl.w	r3, r2, r3
  405aaa:	4619      	mov	r1, r3
  405aac:	4803      	ldr	r0, [pc, #12]	; (405abc <_usbd_ep_int_en+0x34>)
  405aae:	4b05      	ldr	r3, [pc, #20]	; (405ac4 <_usbd_ep_int_en+0x3c>)
  405ab0:	4798      	blx	r3
}
  405ab2:	bf00      	nop
  405ab4:	3708      	adds	r7, #8
  405ab6:	46bd      	mov	sp, r7
  405ab8:	bd80      	pop	{r7, pc}
  405aba:	bf00      	nop
  405abc:	40038000 	.word	0x40038000
  405ac0:	004059e7 	.word	0x004059e7
  405ac4:	00405793 	.word	0x00405793

00405ac8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
  405ac8:	b580      	push	{r7, lr}
  405aca:	b082      	sub	sp, #8
  405acc:	af00      	add	r7, sp, #0
  405ace:	4603      	mov	r3, r0
  405ad0:	6039      	str	r1, [r7, #0]
  405ad2:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, flags);
  405ad4:	79fb      	ldrb	r3, [r7, #7]
  405ad6:	683a      	ldr	r2, [r7, #0]
  405ad8:	4619      	mov	r1, r3
  405ada:	4803      	ldr	r0, [pc, #12]	; (405ae8 <_usbd_ep_int_dis+0x20>)
  405adc:	4b03      	ldr	r3, [pc, #12]	; (405aec <_usbd_ep_int_dis+0x24>)
  405ade:	4798      	blx	r3
}
  405ae0:	bf00      	nop
  405ae2:	3708      	adds	r7, #8
  405ae4:	46bd      	mov	sp, r7
  405ae6:	bd80      	pop	{r7, pc}
  405ae8:	40038000 	.word	0x40038000
  405aec:	00405a0d 	.word	0x00405a0d

00405af0 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
  405af0:	b580      	push	{r7, lr}
  405af2:	b082      	sub	sp, #8
  405af4:	af00      	add	r7, sp, #0
  405af6:	4603      	mov	r3, r0
  405af8:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(USBHS, epn) == USB_D_EPCFG_CTRL);
  405afa:	79fb      	ldrb	r3, [r7, #7]
  405afc:	4619      	mov	r1, r3
  405afe:	4806      	ldr	r0, [pc, #24]	; (405b18 <_usbd_ep_is_ctrl+0x28>)
  405b00:	4b06      	ldr	r3, [pc, #24]	; (405b1c <_usbd_ep_is_ctrl+0x2c>)
  405b02:	4798      	blx	r3
  405b04:	4603      	mov	r3, r0
  405b06:	2b00      	cmp	r3, #0
  405b08:	bf0c      	ite	eq
  405b0a:	2301      	moveq	r3, #1
  405b0c:	2300      	movne	r3, #0
  405b0e:	b2db      	uxtb	r3, r3
}
  405b10:	4618      	mov	r0, r3
  405b12:	3708      	adds	r7, #8
  405b14:	46bd      	mov	sp, r7
  405b16:	bd80      	pop	{r7, pc}
  405b18:	40038000 	.word	0x40038000
  405b1c:	00405925 	.word	0x00405925

00405b20 <_usbd_ep_set_stall>:
/** \brief Set endpoint stall
 * \param[in] epn Endpoint number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, bool st)
{
  405b20:	b580      	push	{r7, lr}
  405b22:	b084      	sub	sp, #16
  405b24:	af00      	add	r7, sp, #0
  405b26:	4603      	mov	r3, r0
  405b28:	460a      	mov	r2, r1
  405b2a:	71fb      	strb	r3, [r7, #7]
  405b2c:	4613      	mov	r3, r2
  405b2e:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405b30:	4b0b      	ldr	r3, [pc, #44]	; (405b60 <_usbd_ep_set_stall+0x40>)
  405b32:	60fb      	str	r3, [r7, #12]

	if (st) {
  405b34:	79bb      	ldrb	r3, [r7, #6]
  405b36:	2b00      	cmp	r3, #0
  405b38:	d007      	beq.n	405b4a <_usbd_ep_set_stall+0x2a>
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_STALLRQS);
  405b3a:	79fb      	ldrb	r3, [r7, #7]
  405b3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405b40:	4619      	mov	r1, r3
  405b42:	68f8      	ldr	r0, [r7, #12]
  405b44:	4b07      	ldr	r3, [pc, #28]	; (405b64 <_usbd_ep_set_stall+0x44>)
  405b46:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
	}
}
  405b48:	e006      	b.n	405b58 <_usbd_ep_set_stall+0x38>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
  405b4a:	79fb      	ldrb	r3, [r7, #7]
  405b4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405b50:	4619      	mov	r1, r3
  405b52:	68f8      	ldr	r0, [r7, #12]
  405b54:	4b04      	ldr	r3, [pc, #16]	; (405b68 <_usbd_ep_set_stall+0x48>)
  405b56:	4798      	blx	r3
}
  405b58:	bf00      	nop
  405b5a:	3710      	adds	r7, #16
  405b5c:	46bd      	mov	sp, r7
  405b5e:	bd80      	pop	{r7, pc}
  405b60:	40038000 	.word	0x40038000
  405b64:	004059e7 	.word	0x004059e7
  405b68:	00405a0d 	.word	0x00405a0d

00405b6c <_usbd_ep_is_stall_sent>:
/** \brief Check if stall has been sent from the endpoint
 * \param[in] epn Endpoint number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn)
{
  405b6c:	b580      	push	{r7, lr}
  405b6e:	b082      	sub	sp, #8
  405b70:	af00      	add	r7, sp, #0
  405b72:	4603      	mov	r3, r0
  405b74:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_STALLEDI_bit(USBHS, epn));
  405b76:	79fb      	ldrb	r3, [r7, #7]
  405b78:	4619      	mov	r1, r3
  405b7a:	4804      	ldr	r0, [pc, #16]	; (405b8c <_usbd_ep_is_stall_sent+0x20>)
  405b7c:	4b04      	ldr	r3, [pc, #16]	; (405b90 <_usbd_ep_is_stall_sent+0x24>)
  405b7e:	4798      	blx	r3
  405b80:	4603      	mov	r3, r0
}
  405b82:	4618      	mov	r0, r3
  405b84:	3708      	adds	r7, #8
  405b86:	46bd      	mov	sp, r7
  405b88:	bd80      	pop	{r7, pc}
  405b8a:	bf00      	nop
  405b8c:	40038000 	.word	0x40038000
  405b90:	004056cf 	.word	0x004056cf

00405b94 <_usbd_ep_ack_stall>:

/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn)
{
  405b94:	b580      	push	{r7, lr}
  405b96:	b082      	sub	sp, #8
  405b98:	af00      	add	r7, sp, #0
  405b9a:	4603      	mov	r3, r0
  405b9c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_STALLEDI);
  405b9e:	79fb      	ldrb	r3, [r7, #7]
  405ba0:	2140      	movs	r1, #64	; 0x40
  405ba2:	4618      	mov	r0, r3
  405ba4:	4b02      	ldr	r3, [pc, #8]	; (405bb0 <_usbd_ep_ack_stall+0x1c>)
  405ba6:	4798      	blx	r3
}
  405ba8:	bf00      	nop
  405baa:	3708      	adds	r7, #8
  405bac:	46bd      	mov	sp, r7
  405bae:	bd80      	pop	{r7, pc}
  405bb0:	00405a61 	.word	0x00405a61

00405bb4 <_usbd_ep_int_stall_en>:
/** \brief Enable/disable endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, const bool en)
{
  405bb4:	b580      	push	{r7, lr}
  405bb6:	b082      	sub	sp, #8
  405bb8:	af00      	add	r7, sp, #0
  405bba:	4603      	mov	r3, r0
  405bbc:	460a      	mov	r2, r1
  405bbe:	71fb      	strb	r3, [r7, #7]
  405bc0:	4613      	mov	r3, r2
  405bc2:	71bb      	strb	r3, [r7, #6]
	if (en) {
  405bc4:	79bb      	ldrb	r3, [r7, #6]
  405bc6:	2b00      	cmp	r3, #0
  405bc8:	d005      	beq.n	405bd6 <_usbd_ep_int_stall_en+0x22>
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  405bca:	79fb      	ldrb	r3, [r7, #7]
  405bcc:	2140      	movs	r1, #64	; 0x40
  405bce:	4618      	mov	r0, r3
  405bd0:	4b05      	ldr	r3, [pc, #20]	; (405be8 <_usbd_ep_int_stall_en+0x34>)
  405bd2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
	}
}
  405bd4:	e004      	b.n	405be0 <_usbd_ep_int_stall_en+0x2c>
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  405bd6:	79fb      	ldrb	r3, [r7, #7]
  405bd8:	2140      	movs	r1, #64	; 0x40
  405bda:	4618      	mov	r0, r3
  405bdc:	4b03      	ldr	r3, [pc, #12]	; (405bec <_usbd_ep_int_stall_en+0x38>)
  405bde:	4798      	blx	r3
}
  405be0:	bf00      	nop
  405be2:	3708      	adds	r7, #8
  405be4:	46bd      	mov	sp, r7
  405be6:	bd80      	pop	{r7, pc}
  405be8:	00405a89 	.word	0x00405a89
  405bec:	00405ac9 	.word	0x00405ac9

00405bf0 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
  405bf0:	b580      	push	{r7, lr}
  405bf2:	b082      	sub	sp, #8
  405bf4:	af00      	add	r7, sp, #0
  405bf6:	4603      	mov	r3, r0
  405bf8:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, USBHS_DEVEPTIDR_RXSTPEC);
  405bfa:	79fb      	ldrb	r3, [r7, #7]
  405bfc:	2204      	movs	r2, #4
  405bfe:	4619      	mov	r1, r3
  405c00:	4803      	ldr	r0, [pc, #12]	; (405c10 <_usbd_ep_stop_setup+0x20>)
  405c02:	4b04      	ldr	r3, [pc, #16]	; (405c14 <_usbd_ep_stop_setup+0x24>)
  405c04:	4798      	blx	r3
}
  405c06:	bf00      	nop
  405c08:	3708      	adds	r7, #8
  405c0a:	46bd      	mov	sp, r7
  405c0c:	bd80      	pop	{r7, pc}
  405c0e:	bf00      	nop
  405c10:	40038000 	.word	0x40038000
  405c14:	00405a0d 	.word	0x00405a0d

00405c18 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
  405c18:	b580      	push	{r7, lr}
  405c1a:	b082      	sub	sp, #8
  405c1c:	af00      	add	r7, sp, #0
  405c1e:	4603      	mov	r3, r0
  405c20:	71fb      	strb	r3, [r7, #7]
	return hri_usbhs_get_DEVEPTISR_RXSTPI_bit(USBHS, epn);
  405c22:	79fb      	ldrb	r3, [r7, #7]
  405c24:	4619      	mov	r1, r3
  405c26:	4804      	ldr	r0, [pc, #16]	; (405c38 <_usbd_ep_is_setup+0x20>)
  405c28:	4b04      	ldr	r3, [pc, #16]	; (405c3c <_usbd_ep_is_setup+0x24>)
  405c2a:	4798      	blx	r3
  405c2c:	4603      	mov	r3, r0
}
  405c2e:	4618      	mov	r0, r3
  405c30:	3708      	adds	r7, #8
  405c32:	46bd      	mov	sp, r7
  405c34:	bd80      	pop	{r7, pc}
  405c36:	bf00      	nop
  405c38:	40038000 	.word	0x40038000
  405c3c:	0040569d 	.word	0x0040569d

00405c40 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
  405c40:	b580      	push	{r7, lr}
  405c42:	b082      	sub	sp, #8
  405c44:	af00      	add	r7, sp, #0
  405c46:	4603      	mov	r3, r0
  405c48:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_RXSTPI);
  405c4a:	79fb      	ldrb	r3, [r7, #7]
  405c4c:	2104      	movs	r1, #4
  405c4e:	4618      	mov	r0, r3
  405c50:	4b02      	ldr	r3, [pc, #8]	; (405c5c <_usbd_ep_ack_setup+0x1c>)
  405c52:	4798      	blx	r3
}
  405c54:	bf00      	nop
  405c56:	3708      	adds	r7, #8
  405c58:	46bd      	mov	sp, r7
  405c5a:	bd80      	pop	{r7, pc}
  405c5c:	00405a61 	.word	0x00405a61

00405c60 <_usbd_ep_reset>:

/** \brief Reset endpoint without configurations
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset(uint8_t epn)
{
  405c60:	b580      	push	{r7, lr}
  405c62:	b084      	sub	sp, #16
  405c64:	af00      	add	r7, sp, #0
  405c66:	4603      	mov	r3, r0
  405c68:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405c6a:	4b0c      	ldr	r3, [pc, #48]	; (405c9c <_usbd_ep_reset+0x3c>)
  405c6c:	60fb      	str	r3, [r7, #12]
	hri_usbhs_set_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  405c6e:	79fb      	ldrb	r3, [r7, #7]
  405c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405c74:	fa02 f303 	lsl.w	r3, r2, r3
  405c78:	4619      	mov	r1, r3
  405c7a:	68f8      	ldr	r0, [r7, #12]
  405c7c:	4b08      	ldr	r3, [pc, #32]	; (405ca0 <_usbd_ep_reset+0x40>)
  405c7e:	4798      	blx	r3
	hri_usbhs_clear_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  405c80:	79fb      	ldrb	r3, [r7, #7]
  405c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405c86:	fa02 f303 	lsl.w	r3, r2, r3
  405c8a:	4619      	mov	r1, r3
  405c8c:	68f8      	ldr	r0, [r7, #12]
  405c8e:	4b05      	ldr	r3, [pc, #20]	; (405ca4 <_usbd_ep_reset+0x44>)
  405c90:	4798      	blx	r3
}
  405c92:	bf00      	nop
  405c94:	3710      	adds	r7, #16
  405c96:	46bd      	mov	sp, r7
  405c98:	bd80      	pop	{r7, pc}
  405c9a:	bf00      	nop
  405c9c:	40038000 	.word	0x40038000
  405ca0:	004058af 	.word	0x004058af
  405ca4:	004058d1 	.word	0x004058d1

00405ca8 <_usbd_ep_reset_toggle>:

/** \brief Reset endpoint toggle value
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset_toggle(uint8_t epn)
{
  405ca8:	b580      	push	{r7, lr}
  405caa:	b084      	sub	sp, #16
  405cac:	af00      	add	r7, sp, #0
  405cae:	4603      	mov	r3, r0
  405cb0:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405cb2:	4b06      	ldr	r3, [pc, #24]	; (405ccc <_usbd_ep_reset_toggle+0x24>)
  405cb4:	60fb      	str	r3, [r7, #12]
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RSTDTS);
  405cb6:	79fb      	ldrb	r3, [r7, #7]
  405cb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  405cbc:	4619      	mov	r1, r3
  405cbe:	68f8      	ldr	r0, [r7, #12]
  405cc0:	4b03      	ldr	r3, [pc, #12]	; (405cd0 <_usbd_ep_reset_toggle+0x28>)
  405cc2:	4798      	blx	r3
}
  405cc4:	bf00      	nop
  405cc6:	3710      	adds	r7, #16
  405cc8:	46bd      	mov	sp, r7
  405cca:	bd80      	pop	{r7, pc}
  405ccc:	40038000 	.word	0x40038000
  405cd0:	004059e7 	.word	0x004059e7

00405cd4 <_usbd_ep_get_trans_count>:

/** \brief Get byte count for transactions
 * \param[in] epn Endpoint number.
 */
static inline uint16_t _usbd_ep_get_trans_count(uint8_t epn)
{
  405cd4:	b580      	push	{r7, lr}
  405cd6:	b082      	sub	sp, #8
  405cd8:	af00      	add	r7, sp, #0
  405cda:	4603      	mov	r3, r0
  405cdc:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  405cde:	79fb      	ldrb	r3, [r7, #7]
  405ce0:	4a05      	ldr	r2, [pc, #20]	; (405cf8 <_usbd_ep_get_trans_count+0x24>)
  405ce2:	4619      	mov	r1, r3
  405ce4:	4805      	ldr	r0, [pc, #20]	; (405cfc <_usbd_ep_get_trans_count+0x28>)
  405ce6:	4b06      	ldr	r3, [pc, #24]	; (405d00 <_usbd_ep_get_trans_count+0x2c>)
  405ce8:	4798      	blx	r3
  405cea:	4603      	mov	r3, r0
  405cec:	0d1b      	lsrs	r3, r3, #20
  405cee:	b29b      	uxth	r3, r3
}
  405cf0:	4618      	mov	r0, r3
  405cf2:	3708      	adds	r7, #8
  405cf4:	46bd      	mov	sp, r7
  405cf6:	bd80      	pop	{r7, pc}
  405cf8:	7ff00000 	.word	0x7ff00000
  405cfc:	40038000 	.word	0x40038000
  405d00:	00405701 	.word	0x00405701

00405d04 <_usbd_ep_send_zlp_in>:

/** \brief Send a ZLP IN on control endpoint
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_send_zlp_in(uint8_t epn)
{
  405d04:	b580      	push	{r7, lr}
  405d06:	b084      	sub	sp, #16
  405d08:	af00      	add	r7, sp, #0
  405d0a:	4603      	mov	r3, r0
  405d0c:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405d0e:	4b0c      	ldr	r3, [pc, #48]	; (405d40 <_usbd_ep_send_zlp_in+0x3c>)
  405d10:	60fb      	str	r3, [r7, #12]

	/* Send ZLP on IN endpoint. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  405d12:	79fb      	ldrb	r3, [r7, #7]
  405d14:	2201      	movs	r2, #1
  405d16:	4619      	mov	r1, r3
  405d18:	68f8      	ldr	r0, [r7, #12]
  405d1a:	4b0a      	ldr	r3, [pc, #40]	; (405d44 <_usbd_ep_send_zlp_in+0x40>)
  405d1c:	4798      	blx	r3

	/* To detect a protocol error, enable nak interrupt on data OUT phase. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_NAKOUTIC);
  405d1e:	79fb      	ldrb	r3, [r7, #7]
  405d20:	2208      	movs	r2, #8
  405d22:	4619      	mov	r1, r3
  405d24:	68f8      	ldr	r0, [r7, #12]
  405d26:	4b07      	ldr	r3, [pc, #28]	; (405d44 <_usbd_ep_send_zlp_in+0x40>)
  405d28:	4798      	blx	r3
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_NAKOUTES);
  405d2a:	79fb      	ldrb	r3, [r7, #7]
  405d2c:	2208      	movs	r2, #8
  405d2e:	4619      	mov	r1, r3
  405d30:	68f8      	ldr	r0, [r7, #12]
  405d32:	4b05      	ldr	r3, [pc, #20]	; (405d48 <_usbd_ep_send_zlp_in+0x44>)
  405d34:	4798      	blx	r3
}
  405d36:	bf00      	nop
  405d38:	3710      	adds	r7, #16
  405d3a:	46bd      	mov	sp, r7
  405d3c:	bd80      	pop	{r7, pc}
  405d3e:	bf00      	nop
  405d40:	40038000 	.word	0x40038000
  405d44:	00405753 	.word	0x00405753
  405d48:	004059e7 	.word	0x004059e7

00405d4c <_usbd_ep_set_in_rdy>:
/** Set IN ready for IN transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, const bool rdy)
{
  405d4c:	b580      	push	{r7, lr}
  405d4e:	b084      	sub	sp, #16
  405d50:	af00      	add	r7, sp, #0
  405d52:	4603      	mov	r3, r0
  405d54:	460a      	mov	r2, r1
  405d56:	71fb      	strb	r3, [r7, #7]
  405d58:	4613      	mov	r3, r2
  405d5a:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405d5c:	4b0a      	ldr	r3, [pc, #40]	; (405d88 <_usbd_ep_set_in_rdy+0x3c>)
  405d5e:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  405d60:	79bb      	ldrb	r3, [r7, #6]
  405d62:	2b00      	cmp	r3, #0
  405d64:	d006      	beq.n	405d74 <_usbd_ep_set_in_rdy+0x28>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  405d66:	79fb      	ldrb	r3, [r7, #7]
  405d68:	2201      	movs	r2, #1
  405d6a:	4619      	mov	r1, r3
  405d6c:	68f8      	ldr	r0, [r7, #12]
  405d6e:	4b07      	ldr	r3, [pc, #28]	; (405d8c <_usbd_ep_set_in_rdy+0x40>)
  405d70:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
	}
}
  405d72:	e005      	b.n	405d80 <_usbd_ep_set_in_rdy+0x34>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  405d74:	79fb      	ldrb	r3, [r7, #7]
  405d76:	2201      	movs	r2, #1
  405d78:	4619      	mov	r1, r3
  405d7a:	68f8      	ldr	r0, [r7, #12]
  405d7c:	4b04      	ldr	r3, [pc, #16]	; (405d90 <_usbd_ep_set_in_rdy+0x44>)
  405d7e:	4798      	blx	r3
}
  405d80:	bf00      	nop
  405d82:	3710      	adds	r7, #16
  405d84:	46bd      	mov	sp, r7
  405d86:	bd80      	pop	{r7, pc}
  405d88:	40038000 	.word	0x40038000
  405d8c:	00405753 	.word	0x00405753
  405d90:	004059c1 	.word	0x004059c1

00405d94 <_usbd_ep_set_out_rdy>:
/** \brief Set ready for OUT transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, const bool rdy)
{
  405d94:	b580      	push	{r7, lr}
  405d96:	b084      	sub	sp, #16
  405d98:	af00      	add	r7, sp, #0
  405d9a:	4603      	mov	r3, r0
  405d9c:	460a      	mov	r2, r1
  405d9e:	71fb      	strb	r3, [r7, #7]
  405da0:	4613      	mov	r3, r2
  405da2:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405da4:	4b0a      	ldr	r3, [pc, #40]	; (405dd0 <_usbd_ep_set_out_rdy+0x3c>)
  405da6:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  405da8:	79bb      	ldrb	r3, [r7, #6]
  405daa:	2b00      	cmp	r3, #0
  405dac:	d006      	beq.n	405dbc <_usbd_ep_set_out_rdy+0x28>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_RXOUTIS);
  405dae:	79fb      	ldrb	r3, [r7, #7]
  405db0:	2202      	movs	r2, #2
  405db2:	4619      	mov	r1, r3
  405db4:	68f8      	ldr	r0, [r7, #12]
  405db6:	4b07      	ldr	r3, [pc, #28]	; (405dd4 <_usbd_ep_set_out_rdy+0x40>)
  405db8:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
	}
}
  405dba:	e005      	b.n	405dc8 <_usbd_ep_set_out_rdy+0x34>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  405dbc:	79fb      	ldrb	r3, [r7, #7]
  405dbe:	2202      	movs	r2, #2
  405dc0:	4619      	mov	r1, r3
  405dc2:	68f8      	ldr	r0, [r7, #12]
  405dc4:	4b04      	ldr	r3, [pc, #16]	; (405dd8 <_usbd_ep_set_out_rdy+0x44>)
  405dc6:	4798      	blx	r3
}
  405dc8:	bf00      	nop
  405dca:	3710      	adds	r7, #16
  405dcc:	46bd      	mov	sp, r7
  405dce:	bd80      	pop	{r7, pc}
  405dd0:	40038000 	.word	0x40038000
  405dd4:	004059c1 	.word	0x004059c1
  405dd8:	00405753 	.word	0x00405753

00405ddc <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
  405ddc:	b580      	push	{r7, lr}
  405dde:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_SOFC);
  405de0:	2104      	movs	r1, #4
  405de2:	4804      	ldr	r0, [pc, #16]	; (405df4 <_usb_d_dev_sof+0x18>)
  405de4:	4b04      	ldr	r3, [pc, #16]	; (405df8 <_usb_d_dev_sof+0x1c>)
  405de6:	4798      	blx	r3
	dev_inst.callbacks.sof();
  405de8:	4b04      	ldr	r3, [pc, #16]	; (405dfc <_usb_d_dev_sof+0x20>)
  405dea:	681b      	ldr	r3, [r3, #0]
  405dec:	4798      	blx	r3
}
  405dee:	bf00      	nop
  405df0:	bd80      	pop	{r7, pc}
  405df2:	bf00      	nop
  405df4:	40038000 	.word	0x40038000
  405df8:	004059a5 	.word	0x004059a5
  405dfc:	204011c8 	.word	0x204011c8

00405e00 <_usb_d_dev_msof>:

/**
 * \brief Handles USB MSOF interrupt
 */
static inline void _usb_d_dev_msof(void)
{
  405e00:	b580      	push	{r7, lr}
  405e02:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_MSOFC);
  405e04:	2102      	movs	r1, #2
  405e06:	4804      	ldr	r0, [pc, #16]	; (405e18 <_usb_d_dev_msof+0x18>)
  405e08:	4b04      	ldr	r3, [pc, #16]	; (405e1c <_usb_d_dev_msof+0x1c>)
  405e0a:	4798      	blx	r3
	dev_inst.callbacks.sof();
  405e0c:	4b04      	ldr	r3, [pc, #16]	; (405e20 <_usb_d_dev_msof+0x20>)
  405e0e:	681b      	ldr	r3, [r3, #0]
  405e10:	4798      	blx	r3
}
  405e12:	bf00      	nop
  405e14:	bd80      	pop	{r7, pc}
  405e16:	bf00      	nop
  405e18:	40038000 	.word	0x40038000
  405e1c:	004059a5 	.word	0x004059a5
  405e20:	204011c8 	.word	0x204011c8

00405e24 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
  405e24:	b580      	push	{r7, lr}
  405e26:	b082      	sub	sp, #8
  405e28:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405e2a:	4b0b      	ldr	r3, [pc, #44]	; (405e58 <_usb_d_dev_wakeup+0x34>)
  405e2c:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405e2e:	2170      	movs	r1, #112	; 0x70
  405e30:	6878      	ldr	r0, [r7, #4]
  405e32:	4b0a      	ldr	r3, [pc, #40]	; (405e5c <_usb_d_dev_wakeup+0x38>)
  405e34:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405e36:	2170      	movs	r1, #112	; 0x70
  405e38:	6878      	ldr	r0, [r7, #4]
  405e3a:	4b09      	ldr	r3, [pc, #36]	; (405e60 <_usb_d_dev_wakeup+0x3c>)
  405e3c:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_SUSPE_bit(hw);
  405e3e:	6878      	ldr	r0, [r7, #4]
  405e40:	4b08      	ldr	r3, [pc, #32]	; (405e64 <_usb_d_dev_wakeup+0x40>)
  405e42:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  405e44:	4b08      	ldr	r3, [pc, #32]	; (405e68 <_usb_d_dev_wakeup+0x44>)
  405e46:	685b      	ldr	r3, [r3, #4]
  405e48:	2100      	movs	r1, #0
  405e4a:	2002      	movs	r0, #2
  405e4c:	4798      	blx	r3
}
  405e4e:	bf00      	nop
  405e50:	3708      	adds	r7, #8
  405e52:	46bd      	mov	sp, r7
  405e54:	bd80      	pop	{r7, pc}
  405e56:	bf00      	nop
  405e58:	40038000 	.word	0x40038000
  405e5c:	004059a5 	.word	0x004059a5
  405e60:	004057c7 	.word	0x004057c7
  405e64:	00405779 	.word	0x00405779
  405e68:	204011c8 	.word	0x204011c8

00405e6c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
  405e6c:	b580      	push	{r7, lr}
  405e6e:	b082      	sub	sp, #8
  405e70:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405e72:	4b0c      	ldr	r3, [pc, #48]	; (405ea4 <_usb_d_dev_reset+0x38>)
  405e74:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USBHS_DEVICR_EORSTC);
  405e76:	2108      	movs	r1, #8
  405e78:	6878      	ldr	r0, [r7, #4]
  405e7a:	4b0b      	ldr	r3, [pc, #44]	; (405ea8 <_usb_d_dev_reset+0x3c>)
  405e7c:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405e7e:	2170      	movs	r1, #112	; 0x70
  405e80:	6878      	ldr	r0, [r7, #4]
  405e82:	4b0a      	ldr	r3, [pc, #40]	; (405eac <_usb_d_dev_reset+0x40>)
  405e84:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  405e86:	2101      	movs	r1, #1
  405e88:	6878      	ldr	r0, [r7, #4]
  405e8a:	4b09      	ldr	r3, [pc, #36]	; (405eb0 <_usb_d_dev_reset+0x44>)
  405e8c:	4798      	blx	r3

	_usb_d_dev_reset_epts();
  405e8e:	4b09      	ldr	r3, [pc, #36]	; (405eb4 <_usb_d_dev_reset+0x48>)
  405e90:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  405e92:	4b09      	ldr	r3, [pc, #36]	; (405eb8 <_usb_d_dev_reset+0x4c>)
  405e94:	685b      	ldr	r3, [r3, #4]
  405e96:	2100      	movs	r1, #0
  405e98:	2001      	movs	r0, #1
  405e9a:	4798      	blx	r3
}
  405e9c:	bf00      	nop
  405e9e:	3708      	adds	r7, #8
  405ea0:	46bd      	mov	sp, r7
  405ea2:	bd80      	pop	{r7, pc}
  405ea4:	40038000 	.word	0x40038000
  405ea8:	004059a5 	.word	0x004059a5
  405eac:	004057c7 	.word	0x004057c7
  405eb0:	00405793 	.word	0x00405793
  405eb4:	00406651 	.word	0x00406651
  405eb8:	204011c8 	.word	0x204011c8

00405ebc <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
  405ebc:	b580      	push	{r7, lr}
  405ebe:	b082      	sub	sp, #8
  405ec0:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405ec2:	4b0b      	ldr	r3, [pc, #44]	; (405ef0 <_usb_d_dev_suspend+0x34>)
  405ec4:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  405ec6:	2101      	movs	r1, #1
  405ec8:	6878      	ldr	r0, [r7, #4]
  405eca:	4b0a      	ldr	r3, [pc, #40]	; (405ef4 <_usb_d_dev_suspend+0x38>)
  405ecc:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(USBHS, USB_D_SUSPEND_INT_FLAGS);
  405ece:	2101      	movs	r1, #1
  405ed0:	4807      	ldr	r0, [pc, #28]	; (405ef0 <_usb_d_dev_suspend+0x34>)
  405ed2:	4b09      	ldr	r3, [pc, #36]	; (405ef8 <_usb_d_dev_suspend+0x3c>)
  405ed4:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USB_D_WAKEUP_INT_FLAGS);
  405ed6:	2170      	movs	r1, #112	; 0x70
  405ed8:	4805      	ldr	r0, [pc, #20]	; (405ef0 <_usb_d_dev_suspend+0x34>)
  405eda:	4b08      	ldr	r3, [pc, #32]	; (405efc <_usb_d_dev_suspend+0x40>)
  405edc:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  405ede:	4b08      	ldr	r3, [pc, #32]	; (405f00 <_usb_d_dev_suspend+0x44>)
  405ee0:	685b      	ldr	r3, [r3, #4]
  405ee2:	2100      	movs	r1, #0
  405ee4:	2004      	movs	r0, #4
  405ee6:	4798      	blx	r3
}
  405ee8:	bf00      	nop
  405eea:	3708      	adds	r7, #8
  405eec:	46bd      	mov	sp, r7
  405eee:	bd80      	pop	{r7, pc}
  405ef0:	40038000 	.word	0x40038000
  405ef4:	004059a5 	.word	0x004059a5
  405ef8:	004057c7 	.word	0x004057c7
  405efc:	00405793 	.word	0x00405793
  405f00:	204011c8 	.word	0x204011c8

00405f04 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
  405f04:	b580      	push	{r7, lr}
  405f06:	b082      	sub	sp, #8
  405f08:	af00      	add	r7, sp, #0
	bool     rc    = true;
  405f0a:	2301      	movs	r3, #1
  405f0c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  405f0e:	481f      	ldr	r0, [pc, #124]	; (405f8c <_usb_d_dev_handle_nep+0x88>)
  405f10:	4b1f      	ldr	r3, [pc, #124]	; (405f90 <_usb_d_dev_handle_nep+0x8c>)
  405f12:	4798      	blx	r3
  405f14:	4603      	mov	r3, r0
  405f16:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  405f18:	481c      	ldr	r0, [pc, #112]	; (405f8c <_usb_d_dev_handle_nep+0x88>)
  405f1a:	4b1e      	ldr	r3, [pc, #120]	; (405f94 <_usb_d_dev_handle_nep+0x90>)
  405f1c:	4798      	blx	r3
  405f1e:	4603      	mov	r3, r0
  405f20:	b29a      	uxth	r2, r3
  405f22:	88bb      	ldrh	r3, [r7, #4]
  405f24:	4013      	ands	r3, r2
  405f26:	80bb      	strh	r3, [r7, #4]

	if (flags & USBHS_DEVISR_SOF) {
  405f28:	88bb      	ldrh	r3, [r7, #4]
  405f2a:	f003 0304 	and.w	r3, r3, #4
  405f2e:	2b00      	cmp	r3, #0
  405f30:	d003      	beq.n	405f3a <_usb_d_dev_handle_nep+0x36>
		_usb_d_dev_sof();
  405f32:	4b19      	ldr	r3, [pc, #100]	; (405f98 <_usb_d_dev_handle_nep+0x94>)
  405f34:	4798      	blx	r3
		return true;
  405f36:	2301      	movs	r3, #1
  405f38:	e023      	b.n	405f82 <_usb_d_dev_handle_nep+0x7e>
	} else if (flags & USBHS_DEVISR_MSOF) {
  405f3a:	88bb      	ldrh	r3, [r7, #4]
  405f3c:	f003 0302 	and.w	r3, r3, #2
  405f40:	2b00      	cmp	r3, #0
  405f42:	d003      	beq.n	405f4c <_usb_d_dev_handle_nep+0x48>
		_usb_d_dev_msof();
  405f44:	4b15      	ldr	r3, [pc, #84]	; (405f9c <_usb_d_dev_handle_nep+0x98>)
  405f46:	4798      	blx	r3
		return true;
  405f48:	2301      	movs	r3, #1
  405f4a:	e01a      	b.n	405f82 <_usb_d_dev_handle_nep+0x7e>
	}

	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  405f4c:	88bb      	ldrh	r3, [r7, #4]
  405f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405f52:	2b00      	cmp	r3, #0
  405f54:	d002      	beq.n	405f5c <_usb_d_dev_handle_nep+0x58>
		_usb_d_dev_wakeup();
  405f56:	4b12      	ldr	r3, [pc, #72]	; (405fa0 <_usb_d_dev_handle_nep+0x9c>)
  405f58:	4798      	blx	r3
  405f5a:	e011      	b.n	405f80 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_EORST) {
  405f5c:	88bb      	ldrh	r3, [r7, #4]
  405f5e:	f003 0308 	and.w	r3, r3, #8
  405f62:	2b00      	cmp	r3, #0
  405f64:	d002      	beq.n	405f6c <_usb_d_dev_handle_nep+0x68>
		_usb_d_dev_reset();
  405f66:	4b0f      	ldr	r3, [pc, #60]	; (405fa4 <_usb_d_dev_handle_nep+0xa0>)
  405f68:	4798      	blx	r3
  405f6a:	e009      	b.n	405f80 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_SUSP) {
  405f6c:	88bb      	ldrh	r3, [r7, #4]
  405f6e:	f003 0301 	and.w	r3, r3, #1
  405f72:	2b00      	cmp	r3, #0
  405f74:	d002      	beq.n	405f7c <_usb_d_dev_handle_nep+0x78>
		_usb_d_dev_suspend();
  405f76:	4b0c      	ldr	r3, [pc, #48]	; (405fa8 <_usb_d_dev_handle_nep+0xa4>)
  405f78:	4798      	blx	r3
  405f7a:	e001      	b.n	405f80 <_usb_d_dev_handle_nep+0x7c>
	} else {
		rc = false;
  405f7c:	2300      	movs	r3, #0
  405f7e:	71fb      	strb	r3, [r7, #7]
	}

	return rc;
  405f80:	79fb      	ldrb	r3, [r7, #7]
}
  405f82:	4618      	mov	r0, r3
  405f84:	3708      	adds	r7, #8
  405f86:	46bd      	mov	sp, r7
  405f88:	bd80      	pop	{r7, pc}
  405f8a:	bf00      	nop
  405f8c:	40038000 	.word	0x40038000
  405f90:	004057e3 	.word	0x004057e3
  405f94:	004057af 	.word	0x004057af
  405f98:	00405ddd 	.word	0x00405ddd
  405f9c:	00405e01 	.word	0x00405e01
  405fa0:	00405e25 	.word	0x00405e25
  405fa4:	00405e6d 	.word	0x00405e6d
  405fa8:	00405ebd 	.word	0x00405ebd

00405fac <_usb_d_dev_in_next>:
/**
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept)
{
  405fac:	b580      	push	{r7, lr}
  405fae:	b08a      	sub	sp, #40	; 0x28
  405fb0:	af00      	add	r7, sp, #0
  405fb2:	6078      	str	r0, [r7, #4]
	Usbhs *  hw       = USBHS;
  405fb4:	4b65      	ldr	r3, [pc, #404]	; (40614c <_usb_d_dev_in_next+0x1a0>)
  405fb6:	623b      	str	r3, [r7, #32]
	uint8_t  epn      = USB_EP_GET_N(ept->ep);
  405fb8:	687b      	ldr	r3, [r7, #4]
  405fba:	7c9b      	ldrb	r3, [r3, #18]
  405fbc:	f003 030f 	and.w	r3, r3, #15
  405fc0:	77fb      	strb	r3, [r7, #31]
	uint8_t *ptr_dest = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  405fc2:	7ffb      	ldrb	r3, [r7, #31]
  405fc4:	03da      	lsls	r2, r3, #15
  405fc6:	4b62      	ldr	r3, [pc, #392]	; (406150 <_usb_d_dev_in_next+0x1a4>)
  405fc8:	4413      	add	r3, r2
  405fca:	61bb      	str	r3, [r7, #24]
	uint8_t *ptr_src;

	uint16_t trans_count = ept->trans_load;
  405fcc:	687b      	ldr	r3, [r7, #4]
  405fce:	68db      	ldr	r3, [r3, #12]
  405fd0:	82fb      	strh	r3, [r7, #22]
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  405fd2:	687b      	ldr	r3, [r7, #4]
  405fd4:	8a1b      	ldrh	r3, [r3, #16]
  405fd6:	f240 32ff 	movw	r2, #1023	; 0x3ff
  405fda:	4293      	cmp	r3, r2
  405fdc:	d103      	bne.n	405fe6 <_usb_d_dev_in_next+0x3a>
  405fde:	687b      	ldr	r3, [r7, #4]
  405fe0:	8a1b      	ldrh	r3, [r3, #16]
  405fe2:	b21b      	sxth	r3, r3
  405fe4:	e004      	b.n	405ff0 <_usb_d_dev_in_next+0x44>
  405fe6:	687b      	ldr	r3, [r7, #4]
  405fe8:	8a1b      	ldrh	r3, [r3, #16]
  405fea:	3b01      	subs	r3, #1
  405fec:	b29b      	uxth	r3, r3
  405fee:	b21b      	sxth	r3, r3
  405ff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
  405ff4:	4013      	ands	r3, r2
  405ff6:	b21b      	sxth	r3, r3
  405ff8:	82bb      	strh	r3, [r7, #20]
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  405ffa:	687b      	ldr	r3, [r7, #4]
  405ffc:	7cdb      	ldrb	r3, [r3, #19]
  405ffe:	f003 0307 	and.w	r3, r3, #7
  406002:	b2db      	uxtb	r3, r3
  406004:	2b01      	cmp	r3, #1
  406006:	bf0c      	ite	eq
  406008:	2301      	moveq	r3, #1
  40600a:	2300      	movne	r3, #0
  40600c:	74fb      	strb	r3, [r7, #19]

	if (ept->trans_count >= ept->trans_size) {
  40600e:	687b      	ldr	r3, [r7, #4]
  406010:	689a      	ldr	r2, [r3, #8]
  406012:	687b      	ldr	r3, [r7, #4]
  406014:	685b      	ldr	r3, [r3, #4]
  406016:	429a      	cmp	r2, r3
  406018:	d358      	bcc.n	4060cc <_usb_d_dev_in_next+0x120>
		if (ept->flags.bits.need_zlp) {
  40601a:	687b      	ldr	r3, [r7, #4]
  40601c:	7cdb      	ldrb	r3, [r3, #19]
  40601e:	f003 0310 	and.w	r3, r3, #16
  406022:	b2db      	uxtb	r3, r3
  406024:	2b00      	cmp	r3, #0
  406026:	d019      	beq.n	40605c <_usb_d_dev_in_next+0xb0>
			ept->trans_load          = 0;
  406028:	687b      	ldr	r3, [r7, #4]
  40602a:	2200      	movs	r2, #0
  40602c:	60da      	str	r2, [r3, #12]
			ept->flags.bits.need_zlp = 0;
  40602e:	687a      	ldr	r2, [r7, #4]
  406030:	7cd3      	ldrb	r3, [r2, #19]
  406032:	f36f 1304 	bfc	r3, #4, #1
  406036:	74d3      	strb	r3, [r2, #19]
			_usbd_ep_send_zlp_in(epn);
  406038:	7ffb      	ldrb	r3, [r7, #31]
  40603a:	4618      	mov	r0, r3
  40603c:	4b45      	ldr	r3, [pc, #276]	; (406154 <_usb_d_dev_in_next+0x1a8>)
  40603e:	4798      	blx	r3
			if (!is_ctrl) {
  406040:	7cfb      	ldrb	r3, [r7, #19]
  406042:	f083 0301 	eor.w	r3, r3, #1
  406046:	b2db      	uxtb	r3, r3
  406048:	2b00      	cmp	r3, #0
  40604a:	d078      	beq.n	40613e <_usb_d_dev_in_next+0x192>
				/** Switch to next bank. */
				hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  40604c:	7ffb      	ldrb	r3, [r7, #31]
  40604e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406052:	4619      	mov	r1, r3
  406054:	6a38      	ldr	r0, [r7, #32]
  406056:	4b40      	ldr	r3, [pc, #256]	; (406158 <_usb_d_dev_in_next+0x1ac>)
  406058:	4798      	blx	r3
			}
			return;
  40605a:	e070      	b.n	40613e <_usb_d_dev_in_next+0x192>
		}

		/* Complete. */
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_TXINEC);
  40605c:	7ffb      	ldrb	r3, [r7, #31]
  40605e:	2201      	movs	r2, #1
  406060:	4619      	mov	r1, r3
  406062:	6a38      	ldr	r0, [r7, #32]
  406064:	4b3c      	ldr	r3, [pc, #240]	; (406158 <_usb_d_dev_in_next+0x1ac>)
  406066:	4798      	blx	r3
		if (!is_ctrl) {
  406068:	7cfb      	ldrb	r3, [r7, #19]
  40606a:	f083 0301 	eor.w	r3, r3, #1
  40606e:	b2db      	uxtb	r3, r3
  406070:	2b00      	cmp	r3, #0
  406072:	d008      	beq.n	406086 <_usb_d_dev_in_next+0xda>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406074:	7ffb      	ldrb	r3, [r7, #31]
  406076:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40607a:	fa02 f303 	lsl.w	r3, r2, r3
  40607e:	4619      	mov	r1, r3
  406080:	6a38      	ldr	r0, [r7, #32]
  406082:	4b36      	ldr	r3, [pc, #216]	; (40615c <_usb_d_dev_in_next+0x1b0>)
  406084:	4798      	blx	r3
		}

		ept->trans_size = ept->trans_count;
  406086:	687b      	ldr	r3, [r7, #4]
  406088:	689a      	ldr	r2, [r3, #8]
  40608a:	687b      	ldr	r3, [r7, #4]
  40608c:	605a      	str	r2, [r3, #4]

		/* No ping-pong, so ask more data without background transfer. */
		if (last_pkt == ept->size) {
  40608e:	687b      	ldr	r3, [r7, #4]
  406090:	8a1b      	ldrh	r3, [r3, #16]
  406092:	8aba      	ldrh	r2, [r7, #20]
  406094:	429a      	cmp	r2, r3
  406096:	d114      	bne.n	4060c2 <_usb_d_dev_in_next+0x116>
			ept->flags.bits.is_busy = 0;
  406098:	687a      	ldr	r2, [r7, #4]
  40609a:	7cd3      	ldrb	r3, [r2, #19]
  40609c:	f36f 1386 	bfc	r3, #6, #1
  4060a0:	74d3      	strb	r3, [r2, #19]
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  4060a2:	4b2f      	ldr	r3, [pc, #188]	; (406160 <_usb_d_dev_in_next+0x1b4>)
  4060a4:	68db      	ldr	r3, [r3, #12]
  4060a6:	687a      	ldr	r2, [r7, #4]
  4060a8:	7c90      	ldrb	r0, [r2, #18]
  4060aa:	687a      	ldr	r2, [r7, #4]
  4060ac:	6892      	ldr	r2, [r2, #8]
  4060ae:	4611      	mov	r1, r2
  4060b0:	4798      	blx	r3
  4060b2:	4603      	mov	r3, r0
  4060b4:	2b00      	cmp	r3, #0
  4060b6:	d144      	bne.n	406142 <_usb_d_dev_in_next+0x196>
				/* More data added. */
				return;
			}
			ept->flags.bits.is_busy = 1;
  4060b8:	687a      	ldr	r2, [r7, #4]
  4060ba:	7cd3      	ldrb	r3, [r2, #19]
  4060bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060c0:	74d3      	strb	r3, [r2, #19]
		}
		/* Finish normally. */
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4060c2:	2100      	movs	r1, #0
  4060c4:	6878      	ldr	r0, [r7, #4]
  4060c6:	4b27      	ldr	r3, [pc, #156]	; (406164 <_usb_d_dev_in_next+0x1b8>)
  4060c8:	4798      	blx	r3
		return;
  4060ca:	e03b      	b.n	406144 <_usb_d_dev_in_next+0x198>
	} else {
		trans_next = ept->trans_size - ept->trans_count;
  4060cc:	687b      	ldr	r3, [r7, #4]
  4060ce:	685b      	ldr	r3, [r3, #4]
  4060d0:	b29a      	uxth	r2, r3
  4060d2:	687b      	ldr	r3, [r7, #4]
  4060d4:	689b      	ldr	r3, [r3, #8]
  4060d6:	b29b      	uxth	r3, r3
  4060d8:	1ad3      	subs	r3, r2, r3
  4060da:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (trans_next > ept->size) {
  4060dc:	687b      	ldr	r3, [r7, #4]
  4060de:	8a1b      	ldrh	r3, [r3, #16]
  4060e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  4060e2:	429a      	cmp	r2, r3
  4060e4:	d902      	bls.n	4060ec <_usb_d_dev_in_next+0x140>
			trans_next = ept->size;
  4060e6:	687b      	ldr	r3, [r7, #4]
  4060e8:	8a1b      	ldrh	r3, [r3, #16]
  4060ea:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		ptr_src = &ept->trans_buf[ept->trans_count];
  4060ec:	687b      	ldr	r3, [r7, #4]
  4060ee:	681a      	ldr	r2, [r3, #0]
  4060f0:	687b      	ldr	r3, [r7, #4]
  4060f2:	689b      	ldr	r3, [r3, #8]
  4060f4:	4413      	add	r3, r2
  4060f6:	60fb      	str	r3, [r7, #12]
		memcpy(ptr_dest, ptr_src, trans_next);
  4060f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4060fa:	461a      	mov	r2, r3
  4060fc:	68f9      	ldr	r1, [r7, #12]
  4060fe:	69b8      	ldr	r0, [r7, #24]
  406100:	4b19      	ldr	r3, [pc, #100]	; (406168 <_usb_d_dev_in_next+0x1bc>)
  406102:	4798      	blx	r3
		ept->trans_load = trans_next;
  406104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  406106:	687b      	ldr	r3, [r7, #4]
  406108:	60da      	str	r2, [r3, #12]
		ept->trans_count += trans_next;
  40610a:	687b      	ldr	r3, [r7, #4]
  40610c:	689a      	ldr	r2, [r3, #8]
  40610e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  406110:	441a      	add	r2, r3
  406112:	687b      	ldr	r3, [r7, #4]
  406114:	609a      	str	r2, [r3, #8]
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  406116:	7ffb      	ldrb	r3, [r7, #31]
  406118:	2201      	movs	r2, #1
  40611a:	4619      	mov	r1, r3
  40611c:	6a38      	ldr	r0, [r7, #32]
  40611e:	4b13      	ldr	r3, [pc, #76]	; (40616c <_usb_d_dev_in_next+0x1c0>)
  406120:	4798      	blx	r3
		if (!is_ctrl) {
  406122:	7cfb      	ldrb	r3, [r7, #19]
  406124:	f083 0301 	eor.w	r3, r3, #1
  406128:	b2db      	uxtb	r3, r3
  40612a:	2b00      	cmp	r3, #0
  40612c:	d00a      	beq.n	406144 <_usb_d_dev_in_next+0x198>
			/** Switch to next bank. */
			hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  40612e:	7ffb      	ldrb	r3, [r7, #31]
  406130:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406134:	4619      	mov	r1, r3
  406136:	6a38      	ldr	r0, [r7, #32]
  406138:	4b07      	ldr	r3, [pc, #28]	; (406158 <_usb_d_dev_in_next+0x1ac>)
  40613a:	4798      	blx	r3
  40613c:	e002      	b.n	406144 <_usb_d_dev_in_next+0x198>
			return;
  40613e:	bf00      	nop
  406140:	e000      	b.n	406144 <_usb_d_dev_in_next+0x198>
				return;
  406142:	bf00      	nop
		}
	}
}
  406144:	3728      	adds	r7, #40	; 0x28
  406146:	46bd      	mov	sp, r7
  406148:	bd80      	pop	{r7, pc}
  40614a:	bf00      	nop
  40614c:	40038000 	.word	0x40038000
  406150:	a0100000 	.word	0xa0100000
  406154:	00405d05 	.word	0x00405d05
  406158:	00405a0d 	.word	0x00405a0d
  40615c:	004057c7 	.word	0x004057c7
  406160:	204011c8 	.word	0x204011c8
  406164:	00406939 	.word	0x00406939
  406168:	004074d9 	.word	0x004074d9
  40616c:	00405753 	.word	0x00405753

00406170 <_usb_d_dev_out_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept)
{
  406170:	b580      	push	{r7, lr}
  406172:	b088      	sub	sp, #32
  406174:	af00      	add	r7, sp, #0
  406176:	6078      	str	r0, [r7, #4]
	Usbhs *  hw          = USBHS;
  406178:	4b47      	ldr	r3, [pc, #284]	; (406298 <_usb_d_dev_out_next+0x128>)
  40617a:	61bb      	str	r3, [r7, #24]
	uint8_t  epn         = USB_EP_GET_N(ept->ep);
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	7c9b      	ldrb	r3, [r3, #18]
  406180:	f003 030f 	and.w	r3, r3, #15
  406184:	75fb      	strb	r3, [r7, #23]
	uint16_t last_trans  = _usbd_ep_get_trans_count(epn);
  406186:	7dfb      	ldrb	r3, [r7, #23]
  406188:	4618      	mov	r0, r3
  40618a:	4b44      	ldr	r3, [pc, #272]	; (40629c <_usb_d_dev_out_next+0x12c>)
  40618c:	4798      	blx	r3
  40618e:	4603      	mov	r3, r0
  406190:	83fb      	strh	r3, [r7, #30]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  406192:	687b      	ldr	r3, [r7, #4]
  406194:	685b      	ldr	r3, [r3, #4]
  406196:	b29a      	uxth	r2, r3
  406198:	687b      	ldr	r3, [r7, #4]
  40619a:	689b      	ldr	r3, [r3, #8]
  40619c:	b29b      	uxth	r3, r3
  40619e:	1ad3      	subs	r3, r2, r3
  4061a0:	82bb      	strh	r3, [r7, #20]
	uint8_t *ptr         = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  4061a2:	7dfb      	ldrb	r3, [r7, #23]
  4061a4:	03da      	lsls	r2, r3, #15
  4061a6:	4b3e      	ldr	r3, [pc, #248]	; (4062a0 <_usb_d_dev_out_next+0x130>)
  4061a8:	4413      	add	r3, r2
  4061aa:	613b      	str	r3, [r7, #16]
	bool     is_full = false, is_short = false;
  4061ac:	2300      	movs	r3, #0
  4061ae:	777b      	strb	r3, [r7, #29]
  4061b0:	2300      	movs	r3, #0
  4061b2:	773b      	strb	r3, [r7, #28]
	bool     is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4061b4:	687b      	ldr	r3, [r7, #4]
  4061b6:	7cdb      	ldrb	r3, [r3, #19]
  4061b8:	f003 0307 	and.w	r3, r3, #7
  4061bc:	b2db      	uxtb	r3, r3
  4061be:	2b01      	cmp	r3, #1
  4061c0:	bf0c      	ite	eq
  4061c2:	2301      	moveq	r3, #1
  4061c4:	2300      	movne	r3, #0
  4061c6:	73fb      	strb	r3, [r7, #15]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  4061c8:	7dfb      	ldrb	r3, [r7, #23]
  4061ca:	2202      	movs	r2, #2
  4061cc:	4619      	mov	r1, r3
  4061ce:	69b8      	ldr	r0, [r7, #24]
  4061d0:	4b34      	ldr	r3, [pc, #208]	; (4062a4 <_usb_d_dev_out_next+0x134>)
  4061d2:	4798      	blx	r3

	if (last_trans > 0) {
  4061d4:	8bfb      	ldrh	r3, [r7, #30]
  4061d6:	2b00      	cmp	r3, #0
  4061d8:	d021      	beq.n	40621e <_usb_d_dev_out_next+0xae>
		if (last_trans > last_remain) {
  4061da:	8bfa      	ldrh	r2, [r7, #30]
  4061dc:	8abb      	ldrh	r3, [r7, #20]
  4061de:	429a      	cmp	r2, r3
  4061e0:	d903      	bls.n	4061ea <_usb_d_dev_out_next+0x7a>
			last_trans = last_remain;
  4061e2:	8abb      	ldrh	r3, [r7, #20]
  4061e4:	83fb      	strh	r3, [r7, #30]
			is_full    = true;
  4061e6:	2301      	movs	r3, #1
  4061e8:	777b      	strb	r3, [r7, #29]
		}
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  4061ea:	687b      	ldr	r3, [r7, #4]
  4061ec:	681a      	ldr	r2, [r3, #0]
  4061ee:	687b      	ldr	r3, [r7, #4]
  4061f0:	689b      	ldr	r3, [r3, #8]
  4061f2:	4413      	add	r3, r2
  4061f4:	8bfa      	ldrh	r2, [r7, #30]
  4061f6:	6939      	ldr	r1, [r7, #16]
  4061f8:	4618      	mov	r0, r3
  4061fa:	4b2b      	ldr	r3, [pc, #172]	; (4062a8 <_usb_d_dev_out_next+0x138>)
  4061fc:	4798      	blx	r3
		ept->trans_count += last_trans;
  4061fe:	687b      	ldr	r3, [r7, #4]
  406200:	689a      	ldr	r2, [r3, #8]
  406202:	8bfb      	ldrh	r3, [r7, #30]
  406204:	441a      	add	r2, r3
  406206:	687b      	ldr	r3, [r7, #4]
  406208:	609a      	str	r2, [r3, #8]
		ept->trans_load = last_trans;
  40620a:	8bfa      	ldrh	r2, [r7, #30]
  40620c:	687b      	ldr	r3, [r7, #4]
  40620e:	60da      	str	r2, [r3, #12]
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  406210:	7dfb      	ldrb	r3, [r7, #23]
  406212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406216:	4619      	mov	r1, r3
  406218:	69b8      	ldr	r0, [r7, #24]
  40621a:	4b24      	ldr	r3, [pc, #144]	; (4062ac <_usb_d_dev_out_next+0x13c>)
  40621c:	4798      	blx	r3
	}

	if (last_trans < ept->size) {
  40621e:	687b      	ldr	r3, [r7, #4]
  406220:	8a1b      	ldrh	r3, [r3, #16]
  406222:	8bfa      	ldrh	r2, [r7, #30]
  406224:	429a      	cmp	r2, r3
  406226:	d207      	bcs.n	406238 <_usb_d_dev_out_next+0xc8>
		ept->flags.bits.need_zlp = 0;
  406228:	687a      	ldr	r2, [r7, #4]
  40622a:	7cd3      	ldrb	r3, [r2, #19]
  40622c:	f36f 1304 	bfc	r3, #4, #1
  406230:	74d3      	strb	r3, [r2, #19]
		is_short                 = true;
  406232:	2301      	movs	r3, #1
  406234:	773b      	strb	r3, [r7, #28]
  406236:	e007      	b.n	406248 <_usb_d_dev_out_next+0xd8>
	} else if (ept->trans_count >= ept->trans_size) {
  406238:	687b      	ldr	r3, [r7, #4]
  40623a:	689a      	ldr	r2, [r3, #8]
  40623c:	687b      	ldr	r3, [r7, #4]
  40623e:	685b      	ldr	r3, [r3, #4]
  406240:	429a      	cmp	r2, r3
  406242:	d301      	bcc.n	406248 <_usb_d_dev_out_next+0xd8>
		is_full = true;
  406244:	2301      	movs	r3, #1
  406246:	777b      	strb	r3, [r7, #29]
	}

	/* Complete. */
	if (is_full || is_short) {
  406248:	7f7b      	ldrb	r3, [r7, #29]
  40624a:	2b00      	cmp	r3, #0
  40624c:	d102      	bne.n	406254 <_usb_d_dev_out_next+0xe4>
  40624e:	7f3b      	ldrb	r3, [r7, #28]
  406250:	2b00      	cmp	r3, #0
  406252:	d01c      	beq.n	40628e <_usb_d_dev_out_next+0x11e>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_RXOUTEC);
  406254:	7dfb      	ldrb	r3, [r7, #23]
  406256:	2202      	movs	r2, #2
  406258:	4619      	mov	r1, r3
  40625a:	69b8      	ldr	r0, [r7, #24]
  40625c:	4b13      	ldr	r3, [pc, #76]	; (4062ac <_usb_d_dev_out_next+0x13c>)
  40625e:	4798      	blx	r3
		if (!is_ctrl) {
  406260:	7bfb      	ldrb	r3, [r7, #15]
  406262:	f083 0301 	eor.w	r3, r3, #1
  406266:	b2db      	uxtb	r3, r3
  406268:	2b00      	cmp	r3, #0
  40626a:	d008      	beq.n	40627e <_usb_d_dev_out_next+0x10e>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  40626c:	7dfb      	ldrb	r3, [r7, #23]
  40626e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406272:	fa02 f303 	lsl.w	r3, r2, r3
  406276:	4619      	mov	r1, r3
  406278:	69b8      	ldr	r0, [r7, #24]
  40627a:	4b0d      	ldr	r3, [pc, #52]	; (4062b0 <_usb_d_dev_out_next+0x140>)
  40627c:	4798      	blx	r3
		}
		ept->trans_size = ept->trans_count;
  40627e:	687b      	ldr	r3, [r7, #4]
  406280:	689a      	ldr	r2, [r3, #8]
  406282:	687b      	ldr	r3, [r7, #4]
  406284:	605a      	str	r2, [r3, #4]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  406286:	2100      	movs	r1, #0
  406288:	6878      	ldr	r0, [r7, #4]
  40628a:	4b0a      	ldr	r3, [pc, #40]	; (4062b4 <_usb_d_dev_out_next+0x144>)
  40628c:	4798      	blx	r3
	}
}
  40628e:	bf00      	nop
  406290:	3720      	adds	r7, #32
  406292:	46bd      	mov	sp, r7
  406294:	bd80      	pop	{r7, pc}
  406296:	bf00      	nop
  406298:	40038000 	.word	0x40038000
  40629c:	00405cd5 	.word	0x00405cd5
  4062a0:	a0100000 	.word	0xa0100000
  4062a4:	00405753 	.word	0x00405753
  4062a8:	004074d9 	.word	0x004074d9
  4062ac:	00405a0d 	.word	0x00405a0d
  4062b0:	004057c7 	.word	0x004057c7
  4062b4:	00406939 	.word	0x00406939

004062b8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  4062b8:	b580      	push	{r7, lr}
  4062ba:	b084      	sub	sp, #16
  4062bc:	af00      	add	r7, sp, #0
  4062be:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  4062c0:	687b      	ldr	r3, [r7, #4]
  4062c2:	7c9b      	ldrb	r3, [r3, #18]
  4062c4:	f003 030f 	and.w	r3, r3, #15
  4062c8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4062ca:	687b      	ldr	r3, [r7, #4]
  4062cc:	7cdb      	ldrb	r3, [r3, #19]
  4062ce:	f003 0307 	and.w	r3, r3, #7
  4062d2:	b2db      	uxtb	r3, r3
  4062d4:	2b01      	cmp	r3, #1
  4062d6:	bf0c      	ite	eq
  4062d8:	2301      	moveq	r3, #1
  4062da:	2300      	movne	r3, #0
  4062dc:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
  4062de:	7bbb      	ldrb	r3, [r7, #14]
  4062e0:	f083 0301 	eor.w	r3, r3, #1
  4062e4:	b2db      	uxtb	r3, r3
  4062e6:	2b00      	cmp	r3, #0
  4062e8:	d008      	beq.n	4062fc <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
  4062ea:	7bfb      	ldrb	r3, [r7, #15]
  4062ec:	4618      	mov	r0, r3
  4062ee:	4b1a      	ldr	r3, [pc, #104]	; (406358 <_usb_d_dev_handle_setup+0xa0>)
  4062f0:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
  4062f2:	7bfb      	ldrb	r3, [r7, #15]
  4062f4:	4618      	mov	r0, r3
  4062f6:	4b19      	ldr	r3, [pc, #100]	; (40635c <_usb_d_dev_handle_setup+0xa4>)
  4062f8:	4798      	blx	r3
		return;
  4062fa:	e02a      	b.n	406352 <_usb_d_dev_handle_setup+0x9a>

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  4062fc:	687b      	ldr	r3, [r7, #4]
  4062fe:	7cdb      	ldrb	r3, [r3, #19]
  406300:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406304:	b2db      	uxtb	r3, r3
  406306:	2b00      	cmp	r3, #0
  406308:	d00e      	beq.n	406328 <_usb_d_dev_handle_setup+0x70>
		ept->flags.bits.is_busy = 0;
  40630a:	687a      	ldr	r2, [r7, #4]
  40630c:	7cd3      	ldrb	r3, [r2, #19]
  40630e:	f36f 1386 	bfc	r3, #6, #1
  406312:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
  406314:	7bfb      	ldrb	r3, [r7, #15]
  406316:	2100      	movs	r1, #0
  406318:	4618      	mov	r0, r3
  40631a:	4b11      	ldr	r3, [pc, #68]	; (406360 <_usb_d_dev_handle_setup+0xa8>)
  40631c:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, false);
  40631e:	7bfb      	ldrb	r3, [r7, #15]
  406320:	2100      	movs	r1, #0
  406322:	4618      	mov	r0, r3
  406324:	4b0f      	ldr	r3, [pc, #60]	; (406364 <_usb_d_dev_handle_setup+0xac>)
  406326:	4798      	blx	r3
	}

	ept->flags.bits.is_stalled = 0;
  406328:	687a      	ldr	r2, [r7, #4]
  40632a:	7cd3      	ldrb	r3, [r2, #19]
  40632c:	f36f 03c3 	bfc	r3, #3, #1
  406330:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
  406332:	7bfb      	ldrb	r3, [r7, #15]
  406334:	2118      	movs	r1, #24
  406336:	4618      	mov	r0, r3
  406338:	4b0b      	ldr	r3, [pc, #44]	; (406368 <_usb_d_dev_handle_setup+0xb0>)
  40633a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
  40633c:	7bfb      	ldrb	r3, [r7, #15]
  40633e:	2118      	movs	r1, #24
  406340:	4618      	mov	r0, r3
  406342:	4b0a      	ldr	r3, [pc, #40]	; (40636c <_usb_d_dev_handle_setup+0xb4>)
  406344:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  406346:	4b0a      	ldr	r3, [pc, #40]	; (406370 <_usb_d_dev_handle_setup+0xb8>)
  406348:	689b      	ldr	r3, [r3, #8]
  40634a:	687a      	ldr	r2, [r7, #4]
  40634c:	7c92      	ldrb	r2, [r2, #18]
  40634e:	4610      	mov	r0, r2
  406350:	4798      	blx	r3
}
  406352:	3710      	adds	r7, #16
  406354:	46bd      	mov	sp, r7
  406356:	bd80      	pop	{r7, pc}
  406358:	00405c41 	.word	0x00405c41
  40635c:	00405bf1 	.word	0x00405bf1
  406360:	00405d4d 	.word	0x00405d4d
  406364:	00405d95 	.word	0x00405d95
  406368:	00405a61 	.word	0x00405a61
  40636c:	00405ac9 	.word	0x00405ac9
  406370:	204011c8 	.word	0x204011c8

00406374 <_usb_d_dev_handle_stall>:
/**
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept)
{
  406374:	b580      	push	{r7, lr}
  406376:	b084      	sub	sp, #16
  406378:	af00      	add	r7, sp, #0
  40637a:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40637c:	687b      	ldr	r3, [r7, #4]
  40637e:	7c9b      	ldrb	r3, [r3, #18]
  406380:	f003 030f 	and.w	r3, r3, #15
  406384:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, false);
  406386:	7bfb      	ldrb	r3, [r7, #15]
  406388:	2100      	movs	r1, #0
  40638a:	4618      	mov	r0, r3
  40638c:	4b04      	ldr	r3, [pc, #16]	; (4063a0 <_usb_d_dev_handle_stall+0x2c>)
  40638e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  406390:	2101      	movs	r1, #1
  406392:	6878      	ldr	r0, [r7, #4]
  406394:	4b03      	ldr	r3, [pc, #12]	; (4063a4 <_usb_d_dev_handle_stall+0x30>)
  406396:	4798      	blx	r3
}
  406398:	bf00      	nop
  40639a:	3710      	adds	r7, #16
  40639c:	46bd      	mov	sp, r7
  40639e:	bd80      	pop	{r7, pc}
  4063a0:	00405bb5 	.word	0x00405bb5
  4063a4:	00406939 	.word	0x00406939

004063a8 <_usb_d_dev_handle_overflow>:
/**
 * \brief Handles transaction overflow interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_overflow(struct _usb_d_dev_ep *ept)
{
  4063a8:	b580      	push	{r7, lr}
  4063aa:	b084      	sub	sp, #16
  4063ac:	af00      	add	r7, sp, #0
  4063ae:	6078      	str	r0, [r7, #4]
	Usbhs * hw  = USBHS;
  4063b0:	4b0f      	ldr	r3, [pc, #60]	; (4063f0 <_usb_d_dev_handle_overflow+0x48>)
  4063b2:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4063b4:	687b      	ldr	r3, [r7, #4]
  4063b6:	7c9b      	ldrb	r3, [r3, #18]
  4063b8:	f003 030f 	and.w	r3, r3, #15
  4063bc:	72fb      	strb	r3, [r7, #11]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_OVERFIC);
  4063be:	7afb      	ldrb	r3, [r7, #11]
  4063c0:	2220      	movs	r2, #32
  4063c2:	4619      	mov	r1, r3
  4063c4:	68f8      	ldr	r0, [r7, #12]
  4063c6:	4b0b      	ldr	r3, [pc, #44]	; (4063f4 <_usb_d_dev_handle_overflow+0x4c>)
  4063c8:	4798      	blx	r3
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  4063ca:	687b      	ldr	r3, [r7, #4]
  4063cc:	7cdb      	ldrb	r3, [r3, #19]
  4063ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4063d2:	b2db      	uxtb	r3, r3
  4063d4:	2b00      	cmp	r3, #0
  4063d6:	bf14      	ite	ne
  4063d8:	2301      	movne	r3, #1
  4063da:	2300      	moveq	r3, #0
  4063dc:	b2db      	uxtb	r3, r3
  4063de:	2204      	movs	r2, #4
  4063e0:	4619      	mov	r1, r3
  4063e2:	6878      	ldr	r0, [r7, #4]
  4063e4:	4b04      	ldr	r3, [pc, #16]	; (4063f8 <_usb_d_dev_handle_overflow+0x50>)
  4063e6:	4798      	blx	r3
}
  4063e8:	bf00      	nop
  4063ea:	3710      	adds	r7, #16
  4063ec:	46bd      	mov	sp, r7
  4063ee:	bd80      	pop	{r7, pc}
  4063f0:	40038000 	.word	0x40038000
  4063f4:	00405753 	.word	0x00405753
  4063f8:	00406981 	.word	0x00406981

004063fc <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  4063fc:	b580      	push	{r7, lr}
  4063fe:	b082      	sub	sp, #8
  406400:	af00      	add	r7, sp, #0
  406402:	6078      	str	r0, [r7, #4]
  406404:	460b      	mov	r3, r1
  406406:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  406408:	78fb      	ldrb	r3, [r7, #3]
  40640a:	f003 0304 	and.w	r3, r3, #4
  40640e:	2b00      	cmp	r3, #0
  406410:	d003      	beq.n	40641a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
  406412:	6878      	ldr	r0, [r7, #4]
  406414:	4b07      	ldr	r3, [pc, #28]	; (406434 <_usb_d_dev_trans_setup_isr+0x38>)
  406416:	4798      	blx	r3
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
		_usb_d_dev_handle_stall(ept);
	}
}
  406418:	e007      	b.n	40642a <_usb_d_dev_trans_setup_isr+0x2e>
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
  40641a:	78fb      	ldrb	r3, [r7, #3]
  40641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406420:	2b00      	cmp	r3, #0
  406422:	d002      	beq.n	40642a <_usb_d_dev_trans_setup_isr+0x2e>
		_usb_d_dev_handle_stall(ept);
  406424:	6878      	ldr	r0, [r7, #4]
  406426:	4b04      	ldr	r3, [pc, #16]	; (406438 <_usb_d_dev_trans_setup_isr+0x3c>)
  406428:	4798      	blx	r3
}
  40642a:	bf00      	nop
  40642c:	3708      	adds	r7, #8
  40642e:	46bd      	mov	sp, r7
  406430:	bd80      	pop	{r7, pc}
  406432:	bf00      	nop
  406434:	004062b9 	.word	0x004062b9
  406438:	00406375 	.word	0x00406375

0040643c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  40643c:	b580      	push	{r7, lr}
  40643e:	b082      	sub	sp, #8
  406440:	af00      	add	r7, sp, #0
  406442:	6078      	str	r0, [r7, #4]
  406444:	460b      	mov	r3, r1
  406446:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_TXINI) {
  406448:	78fb      	ldrb	r3, [r7, #3]
  40644a:	f003 0301 	and.w	r3, r3, #1
  40644e:	2b00      	cmp	r3, #0
  406450:	d003      	beq.n	40645a <_usb_d_dev_trans_in_isr+0x1e>
		_usb_d_dev_in_next(ept);
  406452:	6878      	ldr	r0, [r7, #4]
  406454:	4b0a      	ldr	r3, [pc, #40]	; (406480 <_usb_d_dev_trans_in_isr+0x44>)
  406456:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  406458:	e00e      	b.n	406478 <_usb_d_dev_trans_in_isr+0x3c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  40645a:	687b      	ldr	r3, [r7, #4]
  40645c:	7cdb      	ldrb	r3, [r3, #19]
  40645e:	f003 0307 	and.w	r3, r3, #7
  406462:	b2db      	uxtb	r3, r3
  406464:	2b01      	cmp	r3, #1
  406466:	d107      	bne.n	406478 <_usb_d_dev_trans_in_isr+0x3c>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  406468:	78fb      	ldrb	r3, [r7, #3]
  40646a:	f003 0304 	and.w	r3, r3, #4
  40646e:	2b00      	cmp	r3, #0
  406470:	d002      	beq.n	406478 <_usb_d_dev_trans_in_isr+0x3c>
			_usb_d_dev_handle_setup(ept);
  406472:	6878      	ldr	r0, [r7, #4]
  406474:	4b03      	ldr	r3, [pc, #12]	; (406484 <_usb_d_dev_trans_in_isr+0x48>)
  406476:	4798      	blx	r3
}
  406478:	bf00      	nop
  40647a:	3708      	adds	r7, #8
  40647c:	46bd      	mov	sp, r7
  40647e:	bd80      	pop	{r7, pc}
  406480:	00405fad 	.word	0x00405fad
  406484:	004062b9 	.word	0x004062b9

00406488 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  406488:	b580      	push	{r7, lr}
  40648a:	b082      	sub	sp, #8
  40648c:	af00      	add	r7, sp, #0
  40648e:	6078      	str	r0, [r7, #4]
  406490:	460b      	mov	r3, r1
  406492:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  406494:	78fb      	ldrb	r3, [r7, #3]
  406496:	f003 0320 	and.w	r3, r3, #32
  40649a:	2b00      	cmp	r3, #0
  40649c:	d003      	beq.n	4064a6 <_usb_d_dev_trans_out_isr+0x1e>
		_usb_d_dev_handle_overflow(ept);
  40649e:	6878      	ldr	r0, [r7, #4]
  4064a0:	4b0f      	ldr	r3, [pc, #60]	; (4064e0 <_usb_d_dev_trans_out_isr+0x58>)
  4064a2:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  4064a4:	e017      	b.n	4064d6 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  4064a6:	78fb      	ldrb	r3, [r7, #3]
  4064a8:	f003 0302 	and.w	r3, r3, #2
  4064ac:	2b00      	cmp	r3, #0
  4064ae:	d003      	beq.n	4064b8 <_usb_d_dev_trans_out_isr+0x30>
		_usb_d_dev_out_next(ept);
  4064b0:	6878      	ldr	r0, [r7, #4]
  4064b2:	4b0c      	ldr	r3, [pc, #48]	; (4064e4 <_usb_d_dev_trans_out_isr+0x5c>)
  4064b4:	4798      	blx	r3
}
  4064b6:	e00e      	b.n	4064d6 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  4064b8:	687b      	ldr	r3, [r7, #4]
  4064ba:	7cdb      	ldrb	r3, [r3, #19]
  4064bc:	f003 0307 	and.w	r3, r3, #7
  4064c0:	b2db      	uxtb	r3, r3
  4064c2:	2b01      	cmp	r3, #1
  4064c4:	d107      	bne.n	4064d6 <_usb_d_dev_trans_out_isr+0x4e>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4064c6:	78fb      	ldrb	r3, [r7, #3]
  4064c8:	f003 0304 	and.w	r3, r3, #4
  4064cc:	2b00      	cmp	r3, #0
  4064ce:	d002      	beq.n	4064d6 <_usb_d_dev_trans_out_isr+0x4e>
			_usb_d_dev_handle_setup(ept);
  4064d0:	6878      	ldr	r0, [r7, #4]
  4064d2:	4b05      	ldr	r3, [pc, #20]	; (4064e8 <_usb_d_dev_trans_out_isr+0x60>)
  4064d4:	4798      	blx	r3
}
  4064d6:	bf00      	nop
  4064d8:	3708      	adds	r7, #8
  4064da:	46bd      	mov	sp, r7
  4064dc:	bd80      	pop	{r7, pc}
  4064de:	bf00      	nop
  4064e0:	004063a9 	.word	0x004063a9
  4064e4:	00406171 	.word	0x00406171
  4064e8:	004062b9 	.word	0x004062b9

004064ec <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  4064ec:	b580      	push	{r7, lr}
  4064ee:	b084      	sub	sp, #16
  4064f0:	af00      	add	r7, sp, #0
  4064f2:	6078      	str	r0, [r7, #4]
  4064f4:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  4064f6:	4b28      	ldr	r3, [pc, #160]	; (406598 <_usb_d_dev_handle_eps+0xac>)
  4064f8:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4064fa:	683b      	ldr	r3, [r7, #0]
  4064fc:	7c9b      	ldrb	r3, [r3, #18]
  4064fe:	f003 030f 	and.w	r3, r3, #15
  406502:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
  406504:	7afb      	ldrb	r3, [r7, #11]
  406506:	2201      	movs	r2, #1
  406508:	409a      	lsls	r2, r3
  40650a:	687b      	ldr	r3, [r7, #4]
  40650c:	4013      	ands	r3, r2
  40650e:	2b00      	cmp	r3, #0
  406510:	d03d      	beq.n	40658e <_usb_d_dev_handle_eps+0xa2>
		return;
	}

	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  406512:	7afb      	ldrb	r3, [r7, #11]
  406514:	4619      	mov	r1, r3
  406516:	68f8      	ldr	r0, [r7, #12]
  406518:	4b20      	ldr	r3, [pc, #128]	; (40659c <_usb_d_dev_handle_eps+0xb0>)
  40651a:	4798      	blx	r3
  40651c:	4603      	mov	r3, r0
  40651e:	72bb      	strb	r3, [r7, #10]
	mask  = hri_usbhs_read_DEVEPTIMR_reg(hw, epn);
  406520:	7afb      	ldrb	r3, [r7, #11]
  406522:	4619      	mov	r1, r3
  406524:	68f8      	ldr	r0, [r7, #12]
  406526:	4b1e      	ldr	r3, [pc, #120]	; (4065a0 <_usb_d_dev_handle_eps+0xb4>)
  406528:	4798      	blx	r3
  40652a:	4603      	mov	r3, r0
  40652c:	727b      	strb	r3, [r7, #9]
	flags &= mask;
  40652e:	7aba      	ldrb	r2, [r7, #10]
  406530:	7a7b      	ldrb	r3, [r7, #9]
  406532:	4013      	ands	r3, r2
  406534:	72bb      	strb	r3, [r7, #10]

	if (flags) {
  406536:	7abb      	ldrb	r3, [r7, #10]
  406538:	2b00      	cmp	r3, #0
  40653a:	d029      	beq.n	406590 <_usb_d_dev_handle_eps+0xa4>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  40653c:	7abb      	ldrb	r3, [r7, #10]
  40653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406542:	2b00      	cmp	r3, #0
  406544:	d003      	beq.n	40654e <_usb_d_dev_handle_eps+0x62>
			_usb_d_dev_handle_stall(ept);
  406546:	6838      	ldr	r0, [r7, #0]
  406548:	4b16      	ldr	r3, [pc, #88]	; (4065a4 <_usb_d_dev_handle_eps+0xb8>)
  40654a:	4798      	blx	r3
  40654c:	e020      	b.n	406590 <_usb_d_dev_handle_eps+0xa4>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  40654e:	683b      	ldr	r3, [r7, #0]
  406550:	7cdb      	ldrb	r3, [r3, #19]
  406552:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406556:	b2db      	uxtb	r3, r3
  406558:	2b00      	cmp	r3, #0
  40655a:	d105      	bne.n	406568 <_usb_d_dev_handle_eps+0x7c>
			_usb_d_dev_trans_setup_isr(ept, flags);
  40655c:	7abb      	ldrb	r3, [r7, #10]
  40655e:	4619      	mov	r1, r3
  406560:	6838      	ldr	r0, [r7, #0]
  406562:	4b11      	ldr	r3, [pc, #68]	; (4065a8 <_usb_d_dev_handle_eps+0xbc>)
  406564:	4798      	blx	r3
  406566:	e013      	b.n	406590 <_usb_d_dev_handle_eps+0xa4>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  406568:	683b      	ldr	r3, [r7, #0]
  40656a:	7cdb      	ldrb	r3, [r3, #19]
  40656c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406570:	b2db      	uxtb	r3, r3
  406572:	2b00      	cmp	r3, #0
  406574:	d005      	beq.n	406582 <_usb_d_dev_handle_eps+0x96>
			_usb_d_dev_trans_in_isr(ept, flags);
  406576:	7abb      	ldrb	r3, [r7, #10]
  406578:	4619      	mov	r1, r3
  40657a:	6838      	ldr	r0, [r7, #0]
  40657c:	4b0b      	ldr	r3, [pc, #44]	; (4065ac <_usb_d_dev_handle_eps+0xc0>)
  40657e:	4798      	blx	r3
  406580:	e006      	b.n	406590 <_usb_d_dev_handle_eps+0xa4>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
  406582:	7abb      	ldrb	r3, [r7, #10]
  406584:	4619      	mov	r1, r3
  406586:	6838      	ldr	r0, [r7, #0]
  406588:	4b09      	ldr	r3, [pc, #36]	; (4065b0 <_usb_d_dev_handle_eps+0xc4>)
  40658a:	4798      	blx	r3
  40658c:	e000      	b.n	406590 <_usb_d_dev_handle_eps+0xa4>
		return;
  40658e:	bf00      	nop
		}
	}
}
  406590:	3710      	adds	r7, #16
  406592:	46bd      	mov	sp, r7
  406594:	bd80      	pop	{r7, pc}
  406596:	bf00      	nop
  406598:	40038000 	.word	0x40038000
  40659c:	00405731 	.word	0x00405731
  4065a0:	004057fb 	.word	0x004057fb
  4065a4:	00406375 	.word	0x00406375
  4065a8:	004063fd 	.word	0x004063fd
  4065ac:	0040643d 	.word	0x0040643d
  4065b0:	00406489 	.word	0x00406489

004065b4 <USBHS_Handler>:

/**
 * \brief USB device interrupt handler
 */
void USBHS_Handler(void)
{
  4065b4:	b590      	push	{r4, r7, lr}
  4065b6:	b087      	sub	sp, #28
  4065b8:	af00      	add	r7, sp, #0
	Usbhs *  hw = USBHS;
  4065ba:	4b1f      	ldr	r3, [pc, #124]	; (406638 <USBHS_Handler+0x84>)
  4065bc:	613b      	str	r3, [r7, #16]
	uint8_t  i;
	uint32_t flags, ep_int, dma_int;

	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  4065be:	6938      	ldr	r0, [r7, #16]
  4065c0:	4b1e      	ldr	r3, [pc, #120]	; (40663c <USBHS_Handler+0x88>)
  4065c2:	4798      	blx	r3
  4065c4:	4604      	mov	r4, r0
  4065c6:	6938      	ldr	r0, [r7, #16]
  4065c8:	4b1d      	ldr	r3, [pc, #116]	; (406640 <USBHS_Handler+0x8c>)
  4065ca:	4798      	blx	r3
  4065cc:	4603      	mov	r3, r0
  4065ce:	4023      	ands	r3, r4
  4065d0:	60fb      	str	r3, [r7, #12]

	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  4065d2:	68fb      	ldr	r3, [r7, #12]
  4065d4:	0b1b      	lsrs	r3, r3, #12
  4065d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  4065da:	60bb      	str	r3, [r7, #8]
#endif

#if (CONF_USB_D_DMA_ENABLE == 1)
	if ((ep_int == 0) && (dma_int == 0)) {
#else
	if (ep_int == 0) {
  4065dc:	68bb      	ldr	r3, [r7, #8]
  4065de:	2b00      	cmp	r3, #0
  4065e0:	d104      	bne.n	4065ec <USBHS_Handler+0x38>
#endif
		if (_usb_d_dev_handle_nep()) {
  4065e2:	4b18      	ldr	r3, [pc, #96]	; (406644 <USBHS_Handler+0x90>)
  4065e4:	4798      	blx	r3
  4065e6:	4603      	mov	r3, r0
  4065e8:	2b00      	cmp	r3, #0
  4065ea:	d120      	bne.n	40662e <USBHS_Handler+0x7a>
			return;
		}
	}

	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
  4065ec:	2300      	movs	r3, #0
  4065ee:	75fb      	strb	r3, [r7, #23]
  4065f0:	e019      	b.n	406626 <USBHS_Handler+0x72>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  4065f2:	7dfa      	ldrb	r2, [r7, #23]
  4065f4:	4613      	mov	r3, r2
  4065f6:	009b      	lsls	r3, r3, #2
  4065f8:	4413      	add	r3, r2
  4065fa:	009b      	lsls	r3, r3, #2
  4065fc:	3310      	adds	r3, #16
  4065fe:	4a12      	ldr	r2, [pc, #72]	; (406648 <USBHS_Handler+0x94>)
  406600:	4413      	add	r3, r2
  406602:	3304      	adds	r3, #4
  406604:	607b      	str	r3, [r7, #4]

		if (ept->ep == 0xFF) {
  406606:	687b      	ldr	r3, [r7, #4]
  406608:	7c9b      	ldrb	r3, [r3, #18]
  40660a:	2bff      	cmp	r3, #255	; 0xff
  40660c:	d007      	beq.n	40661e <USBHS_Handler+0x6a>
			continue;
		}
		if (ep_int) {
  40660e:	68bb      	ldr	r3, [r7, #8]
  406610:	2b00      	cmp	r3, #0
  406612:	d005      	beq.n	406620 <USBHS_Handler+0x6c>
			_usb_d_dev_handle_eps(ep_int, ept);
  406614:	6879      	ldr	r1, [r7, #4]
  406616:	68b8      	ldr	r0, [r7, #8]
  406618:	4b0c      	ldr	r3, [pc, #48]	; (40664c <USBHS_Handler+0x98>)
  40661a:	4798      	blx	r3
  40661c:	e000      	b.n	406620 <USBHS_Handler+0x6c>
			continue;
  40661e:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
  406620:	7dfb      	ldrb	r3, [r7, #23]
  406622:	3301      	adds	r3, #1
  406624:	75fb      	strb	r3, [r7, #23]
  406626:	7dfb      	ldrb	r3, [r7, #23]
  406628:	2b03      	cmp	r3, #3
  40662a:	d9e2      	bls.n	4065f2 <USBHS_Handler+0x3e>
  40662c:	e000      	b.n	406630 <USBHS_Handler+0x7c>
			return;
  40662e:	bf00      	nop
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
			_usb_d_dev_handle_dma(dma_int, ept);
		}
#endif
	}
}
  406630:	371c      	adds	r7, #28
  406632:	46bd      	mov	sp, r7
  406634:	bd90      	pop	{r4, r7, pc}
  406636:	bf00      	nop
  406638:	40038000 	.word	0x40038000
  40663c:	004057e3 	.word	0x004057e3
  406640:	004057af 	.word	0x004057af
  406644:	00405f05 	.word	0x00405f05
  406648:	204011c8 	.word	0x204011c8
  40664c:	004064ed 	.word	0x004064ed

00406650 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
  406650:	b580      	push	{r7, lr}
  406652:	b082      	sub	sp, #8
  406654:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Reset USB address to 0 */
	hri_usbhs_clear_DEVCTRL_ADDEN_bit(USBHS);
  406656:	481c      	ldr	r0, [pc, #112]	; (4066c8 <_usb_d_dev_reset_epts+0x78>)
  406658:	4b1c      	ldr	r3, [pc, #112]	; (4066cc <_usb_d_dev_reset_epts+0x7c>)
  40665a:	4798      	blx	r3
	hri_usbhs_write_DEVCTRL_UADD_bf(USBHS, 0);
  40665c:	2100      	movs	r1, #0
  40665e:	481a      	ldr	r0, [pc, #104]	; (4066c8 <_usb_d_dev_reset_epts+0x78>)
  406660:	4b1b      	ldr	r3, [pc, #108]	; (4066d0 <_usb_d_dev_reset_epts+0x80>)
  406662:	4798      	blx	r3
	hri_usbhs_set_DEVCTRL_ADDEN_bit(USBHS);
  406664:	4818      	ldr	r0, [pc, #96]	; (4066c8 <_usb_d_dev_reset_epts+0x78>)
  406666:	4b1b      	ldr	r3, [pc, #108]	; (4066d4 <_usb_d_dev_reset_epts+0x84>)
  406668:	4798      	blx	r3

	for (i = 0; i < USB_D_N_EP; i++) {
  40666a:	2300      	movs	r3, #0
  40666c:	71fb      	strb	r3, [r7, #7]
  40666e:	e023      	b.n	4066b8 <_usb_d_dev_reset_epts+0x68>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  406670:	79fa      	ldrb	r2, [r7, #7]
  406672:	4613      	mov	r3, r2
  406674:	009b      	lsls	r3, r3, #2
  406676:	4413      	add	r3, r2
  406678:	009b      	lsls	r3, r3, #2
  40667a:	3310      	adds	r3, #16
  40667c:	4a16      	ldr	r2, [pc, #88]	; (4066d8 <_usb_d_dev_reset_epts+0x88>)
  40667e:	4413      	add	r3, r2
  406680:	3304      	adds	r3, #4
  406682:	2103      	movs	r1, #3
  406684:	4618      	mov	r0, r3
  406686:	4b15      	ldr	r3, [pc, #84]	; (4066dc <_usb_d_dev_reset_epts+0x8c>)
  406688:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
  40668a:	79fa      	ldrb	r2, [r7, #7]
  40668c:	4912      	ldr	r1, [pc, #72]	; (4066d8 <_usb_d_dev_reset_epts+0x88>)
  40668e:	4613      	mov	r3, r2
  406690:	009b      	lsls	r3, r3, #2
  406692:	4413      	add	r3, r2
  406694:	009b      	lsls	r3, r3, #2
  406696:	440b      	add	r3, r1
  406698:	3326      	adds	r3, #38	; 0x26
  40669a:	22ff      	movs	r2, #255	; 0xff
  40669c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
  40669e:	79fa      	ldrb	r2, [r7, #7]
  4066a0:	490d      	ldr	r1, [pc, #52]	; (4066d8 <_usb_d_dev_reset_epts+0x88>)
  4066a2:	4613      	mov	r3, r2
  4066a4:	009b      	lsls	r3, r3, #2
  4066a6:	4413      	add	r3, r2
  4066a8:	009b      	lsls	r3, r3, #2
  4066aa:	440b      	add	r3, r1
  4066ac:	3327      	adds	r3, #39	; 0x27
  4066ae:	2200      	movs	r2, #0
  4066b0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
  4066b2:	79fb      	ldrb	r3, [r7, #7]
  4066b4:	3301      	adds	r3, #1
  4066b6:	71fb      	strb	r3, [r7, #7]
  4066b8:	79fb      	ldrb	r3, [r7, #7]
  4066ba:	2b03      	cmp	r3, #3
  4066bc:	d9d8      	bls.n	406670 <_usb_d_dev_reset_epts+0x20>
	}
}
  4066be:	bf00      	nop
  4066c0:	3708      	adds	r7, #8
  4066c2:	46bd      	mov	sp, r7
  4066c4:	bd80      	pop	{r7, pc}
  4066c6:	bf00      	nop
  4066c8:	40038000 	.word	0x40038000
  4066cc:	0040583d 	.word	0x0040583d
  4066d0:	0040585d 	.word	0x0040585d
  4066d4:	0040581d 	.word	0x0040581d
  4066d8:	204011c8 	.word	0x204011c8
  4066dc:	00406939 	.word	0x00406939

004066e0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
  4066e0:	b590      	push	{r4, r7, lr}
  4066e2:	b089      	sub	sp, #36	; 0x24
  4066e4:	af00      	add	r7, sp, #0
	Usbhs *        hw = USBHS;
  4066e6:	4b1d      	ldr	r3, [pc, #116]	; (40675c <_usb_d_dev_init+0x7c>)
  4066e8:	61fb      	str	r3, [r7, #28]
	uint32_t       data;
	uint8_t        speed      = CONF_USB_D_SPEED;
  4066ea:	2302      	movs	r3, #2
  4066ec:	76fb      	strb	r3, [r7, #27]
	const uint32_t spdconf[4] = {
  4066ee:	4b1c      	ldr	r3, [pc, #112]	; (406760 <_usb_d_dev_init+0x80>)
  4066f0:	1d3c      	adds	r4, r7, #4
  4066f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4066f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0,                                             /* HS */
		0                                              /* Reserved */
	};
#endif

	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  4066f8:	69f8      	ldr	r0, [r7, #28]
  4066fa:	4b1a      	ldr	r3, [pc, #104]	; (406764 <_usb_d_dev_init+0x84>)
  4066fc:	4798      	blx	r3
  4066fe:	4603      	mov	r3, r0
  406700:	2b00      	cmp	r3, #0
  406702:	d002      	beq.n	40670a <_usb_d_dev_init+0x2a>
		return ERR_DENIED;
  406704:	f06f 0310 	mvn.w	r3, #16
  406708:	e024      	b.n	406754 <_usb_d_dev_init+0x74>
	}

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  40670a:	4b17      	ldr	r3, [pc, #92]	; (406768 <_usb_d_dev_init+0x88>)
  40670c:	4a17      	ldr	r2, [pc, #92]	; (40676c <_usb_d_dev_init+0x8c>)
  40670e:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  406710:	4b15      	ldr	r3, [pc, #84]	; (406768 <_usb_d_dev_init+0x88>)
  406712:	4a16      	ldr	r2, [pc, #88]	; (40676c <_usb_d_dev_init+0x8c>)
  406714:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  406716:	4b14      	ldr	r3, [pc, #80]	; (406768 <_usb_d_dev_init+0x88>)
  406718:	4a14      	ldr	r2, [pc, #80]	; (40676c <_usb_d_dev_init+0x8c>)
  40671a:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  40671c:	4b12      	ldr	r3, [pc, #72]	; (406768 <_usb_d_dev_init+0x88>)
  40671e:	4a14      	ldr	r2, [pc, #80]	; (406770 <_usb_d_dev_init+0x90>)
  406720:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  406722:	4b11      	ldr	r3, [pc, #68]	; (406768 <_usb_d_dev_init+0x88>)
  406724:	4a11      	ldr	r2, [pc, #68]	; (40676c <_usb_d_dev_init+0x8c>)
  406726:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
  406728:	4b12      	ldr	r3, [pc, #72]	; (406774 <_usb_d_dev_init+0x94>)
  40672a:	4798      	blx	r3
	hri_usbhs_write_CTRL_reg(hw, USBHS_CTRL_UIMOD);
  40672c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406730:	69f8      	ldr	r0, [r7, #28]
  406732:	4b11      	ldr	r3, [pc, #68]	; (406778 <_usb_d_dev_init+0x98>)
  406734:	4798      	blx	r3

	data = spdconf[speed] | USBHS_DEVCTRL_DETACH;
  406736:	7efb      	ldrb	r3, [r7, #27]
  406738:	009b      	lsls	r3, r3, #2
  40673a:	f107 0220 	add.w	r2, r7, #32
  40673e:	4413      	add	r3, r2
  406740:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  406744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  406748:	617b      	str	r3, [r7, #20]
	hri_usbhs_write_DEVCTRL_reg(hw, data);
  40674a:	6979      	ldr	r1, [r7, #20]
  40674c:	69f8      	ldr	r0, [r7, #28]
  40674e:	4b0b      	ldr	r3, [pc, #44]	; (40677c <_usb_d_dev_init+0x9c>)
  406750:	4798      	blx	r3

	return ERR_NONE;
  406752:	2300      	movs	r3, #0
}
  406754:	4618      	mov	r0, r3
  406756:	3724      	adds	r7, #36	; 0x24
  406758:	46bd      	mov	sp, r7
  40675a:	bd90      	pop	{r4, r7, pc}
  40675c:	40038000 	.word	0x40038000
  406760:	004076e8 	.word	0x004076e8
  406764:	00405955 	.word	0x00405955
  406768:	204011c8 	.word	0x204011c8
  40676c:	00405a33 	.word	0x00405a33
  406770:	00405a49 	.word	0x00405a49
  406774:	00406651 	.word	0x00406651
  406778:	00405987 	.word	0x00405987
  40677c:	00405893 	.word	0x00405893

00406780 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept)
{
  406780:	b480      	push	{r7}
  406782:	b083      	sub	sp, #12
  406784:	af00      	add	r7, sp, #0
  406786:	6078      	str	r0, [r7, #4]
	return ept->flags.bits.is_stalled;
  406788:	687b      	ldr	r3, [r7, #4]
  40678a:	7cdb      	ldrb	r3, [r3, #19]
  40678c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406790:	b2db      	uxtb	r3, r3
}
  406792:	4618      	mov	r0, r3
  406794:	370c      	adds	r7, #12
  406796:	46bd      	mov	sp, r7
  406798:	f85d 7b04 	ldr.w	r7, [sp], #4
  40679c:	4770      	bx	lr
	...

004067a0 <_usb_d_dev_ep_stall_set>:
 * \brief Set endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept)
{
  4067a0:	b580      	push	{r7, lr}
  4067a2:	b084      	sub	sp, #16
  4067a4:	af00      	add	r7, sp, #0
  4067a6:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4067a8:	687b      	ldr	r3, [r7, #4]
  4067aa:	7c9b      	ldrb	r3, [r3, #18]
  4067ac:	f003 030f 	and.w	r3, r3, #15
  4067b0:	73fb      	strb	r3, [r7, #15]
	if (epn > CONF_USB_D_MAX_EP_N) {
  4067b2:	7bfb      	ldrb	r3, [r7, #15]
  4067b4:	2b03      	cmp	r3, #3
  4067b6:	d902      	bls.n	4067be <_usb_d_dev_ep_stall_set+0x1e>
		return ERR_NOT_FOUND;
  4067b8:	f06f 0309 	mvn.w	r3, #9
  4067bc:	e016      	b.n	4067ec <_usb_d_dev_ep_stall_set+0x4c>
	}
	if (!ept->flags.bits.is_stalled) {
  4067be:	687b      	ldr	r3, [r7, #4]
  4067c0:	7cdb      	ldrb	r3, [r3, #19]
  4067c2:	f003 0308 	and.w	r3, r3, #8
  4067c6:	b2db      	uxtb	r3, r3
  4067c8:	2b00      	cmp	r3, #0
  4067ca:	d10e      	bne.n	4067ea <_usb_d_dev_ep_stall_set+0x4a>
		ept->flags.bits.is_stalled = 1;
  4067cc:	687a      	ldr	r2, [r7, #4]
  4067ce:	7cd3      	ldrb	r3, [r2, #19]
  4067d0:	f043 0308 	orr.w	r3, r3, #8
  4067d4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  4067d6:	7bfb      	ldrb	r3, [r7, #15]
  4067d8:	2140      	movs	r1, #64	; 0x40
  4067da:	4618      	mov	r0, r3
  4067dc:	4b05      	ldr	r3, [pc, #20]	; (4067f4 <_usb_d_dev_ep_stall_set+0x54>)
  4067de:	4798      	blx	r3
		_usbd_ep_set_stall(epn, true);
  4067e0:	7bfb      	ldrb	r3, [r7, #15]
  4067e2:	2101      	movs	r1, #1
  4067e4:	4618      	mov	r0, r3
  4067e6:	4b04      	ldr	r3, [pc, #16]	; (4067f8 <_usb_d_dev_ep_stall_set+0x58>)
  4067e8:	4798      	blx	r3
	}

	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
  4067ea:	2300      	movs	r3, #0
}
  4067ec:	4618      	mov	r0, r3
  4067ee:	3710      	adds	r7, #16
  4067f0:	46bd      	mov	sp, r7
  4067f2:	bd80      	pop	{r7, pc}
  4067f4:	00405a89 	.word	0x00405a89
  4067f8:	00405b21 	.word	0x00405b21

004067fc <_usb_d_dev_ep_stall_clr>:
 * \brief Clear endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept)
{
  4067fc:	b580      	push	{r7, lr}
  4067fe:	b084      	sub	sp, #16
  406800:	af00      	add	r7, sp, #0
  406802:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406804:	687b      	ldr	r3, [r7, #4]
  406806:	7c9b      	ldrb	r3, [r3, #18]
  406808:	f003 030f 	and.w	r3, r3, #15
  40680c:	73fb      	strb	r3, [r7, #15]

	if (!ept->flags.bits.is_stalled) {
  40680e:	687b      	ldr	r3, [r7, #4]
  406810:	7cdb      	ldrb	r3, [r3, #19]
  406812:	f003 0308 	and.w	r3, r3, #8
  406816:	b2db      	uxtb	r3, r3
  406818:	2b00      	cmp	r3, #0
  40681a:	d101      	bne.n	406820 <_usb_d_dev_ep_stall_clr+0x24>
		return ERR_NONE;
  40681c:	2300      	movs	r3, #0
  40681e:	e039      	b.n	406894 <_usb_d_dev_ep_stall_clr+0x98>
	}
	_usbd_ep_set_stall(epn, false);
  406820:	7bfb      	ldrb	r3, [r7, #15]
  406822:	2100      	movs	r1, #0
  406824:	4618      	mov	r0, r3
  406826:	4b1d      	ldr	r3, [pc, #116]	; (40689c <_usb_d_dev_ep_stall_clr+0xa0>)
  406828:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  40682a:	7bfb      	ldrb	r3, [r7, #15]
  40682c:	2140      	movs	r1, #64	; 0x40
  40682e:	4618      	mov	r0, r3
  406830:	4b1b      	ldr	r3, [pc, #108]	; (4068a0 <_usb_d_dev_ep_stall_clr+0xa4>)
  406832:	4798      	blx	r3

	if (_usbd_ep_is_stall_sent(epn)) {
  406834:	7bfb      	ldrb	r3, [r7, #15]
  406836:	4618      	mov	r0, r3
  406838:	4b1a      	ldr	r3, [pc, #104]	; (4068a4 <_usb_d_dev_ep_stall_clr+0xa8>)
  40683a:	4798      	blx	r3
  40683c:	4603      	mov	r3, r0
  40683e:	2b00      	cmp	r3, #0
  406840:	d00b      	beq.n	40685a <_usb_d_dev_ep_stall_clr+0x5e>
		_usbd_ep_ack_stall(epn);
  406842:	7bfb      	ldrb	r3, [r7, #15]
  406844:	4618      	mov	r0, r3
  406846:	4b18      	ldr	r3, [pc, #96]	; (4068a8 <_usb_d_dev_ep_stall_clr+0xac>)
  406848:	4798      	blx	r3
		_usbd_ep_reset(epn);
  40684a:	7bfb      	ldrb	r3, [r7, #15]
  40684c:	4618      	mov	r0, r3
  40684e:	4b17      	ldr	r3, [pc, #92]	; (4068ac <_usb_d_dev_ep_stall_clr+0xb0>)
  406850:	4798      	blx	r3
		_usbd_ep_reset_toggle(epn);
  406852:	7bfb      	ldrb	r3, [r7, #15]
  406854:	4618      	mov	r0, r3
  406856:	4b16      	ldr	r3, [pc, #88]	; (4068b0 <_usb_d_dev_ep_stall_clr+0xb4>)
  406858:	4798      	blx	r3
	}

	if (_usb_d_dev_ep_is_ctrl(ept)) {
  40685a:	687b      	ldr	r3, [r7, #4]
  40685c:	7cdb      	ldrb	r3, [r3, #19]
  40685e:	f003 0307 	and.w	r3, r3, #7
  406862:	b2db      	uxtb	r3, r3
  406864:	2b01      	cmp	r3, #1
  406866:	d10f      	bne.n	406888 <_usb_d_dev_ep_stall_clr+0x8c>
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  406868:	7bfb      	ldrb	r3, [r7, #15]
  40686a:	4619      	mov	r1, r3
  40686c:	4811      	ldr	r0, [pc, #68]	; (4068b4 <_usb_d_dev_ep_stall_clr+0xb8>)
  40686e:	4b12      	ldr	r3, [pc, #72]	; (4068b8 <_usb_d_dev_ep_stall_clr+0xbc>)
  406870:	4798      	blx	r3
  406872:	4603      	mov	r3, r0
  406874:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406878:	2b00      	cmp	r3, #0
  40687a:	d10a      	bne.n	406892 <_usb_d_dev_ep_stall_clr+0x96>
			ept->flags.bits.is_stalled = 0;
  40687c:	687a      	ldr	r2, [r7, #4]
  40687e:	7cd3      	ldrb	r3, [r2, #19]
  406880:	f36f 03c3 	bfc	r3, #3, #1
  406884:	74d3      	strb	r3, [r2, #19]
  406886:	e004      	b.n	406892 <_usb_d_dev_ep_stall_clr+0x96>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
  406888:	687a      	ldr	r2, [r7, #4]
  40688a:	7cd3      	ldrb	r3, [r2, #19]
  40688c:	f36f 03c3 	bfc	r3, #3, #1
  406890:	74d3      	strb	r3, [r2, #19]
	}

	return ERR_NONE;
  406892:	2300      	movs	r3, #0
}
  406894:	4618      	mov	r0, r3
  406896:	3710      	adds	r7, #16
  406898:	46bd      	mov	sp, r7
  40689a:	bd80      	pop	{r7, pc}
  40689c:	00405b21 	.word	0x00405b21
  4068a0:	00405ac9 	.word	0x00405ac9
  4068a4:	00405b6d 	.word	0x00405b6d
  4068a8:	00405b95 	.word	0x00405b95
  4068ac:	00405c61 	.word	0x00405c61
  4068b0:	00405ca9 	.word	0x00405ca9
  4068b4:	40038000 	.word	0x40038000
  4068b8:	00405731 	.word	0x00405731

004068bc <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
  4068bc:	b580      	push	{r7, lr}
  4068be:	b086      	sub	sp, #24
  4068c0:	af00      	add	r7, sp, #0
  4068c2:	4603      	mov	r3, r0
  4068c4:	460a      	mov	r2, r1
  4068c6:	71fb      	strb	r3, [r7, #7]
  4068c8:	4613      	mov	r3, r2
  4068ca:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
  4068cc:	79fb      	ldrb	r3, [r7, #7]
  4068ce:	f003 030f 	and.w	r3, r3, #15
  4068d2:	74fb      	strb	r3, [r7, #19]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  4068d4:	7cfa      	ldrb	r2, [r7, #19]
  4068d6:	4613      	mov	r3, r2
  4068d8:	009b      	lsls	r3, r3, #2
  4068da:	4413      	add	r3, r2
  4068dc:	009b      	lsls	r3, r3, #2
  4068de:	3310      	adds	r3, #16
  4068e0:	4a11      	ldr	r2, [pc, #68]	; (406928 <_usb_d_dev_ep_stall+0x6c>)
  4068e2:	4413      	add	r3, r2
  4068e4:	3304      	adds	r3, #4
  4068e6:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
  4068e8:	7cfb      	ldrb	r3, [r7, #19]
  4068ea:	2b03      	cmp	r3, #3
  4068ec:	d902      	bls.n	4068f4 <_usb_d_dev_ep_stall+0x38>
		return -USB_ERR_PARAM;
  4068ee:	f06f 0311 	mvn.w	r3, #17
  4068f2:	e014      	b.n	40691e <_usb_d_dev_ep_stall+0x62>
	}

	if (USB_EP_STALL_SET == ctrl) {
  4068f4:	79bb      	ldrb	r3, [r7, #6]
  4068f6:	2b01      	cmp	r3, #1
  4068f8:	d104      	bne.n	406904 <_usb_d_dev_ep_stall+0x48>
		rc = _usb_d_dev_ep_stall_set(ept);
  4068fa:	68f8      	ldr	r0, [r7, #12]
  4068fc:	4b0b      	ldr	r3, [pc, #44]	; (40692c <_usb_d_dev_ep_stall+0x70>)
  4068fe:	4798      	blx	r3
  406900:	6178      	str	r0, [r7, #20]
  406902:	e00b      	b.n	40691c <_usb_d_dev_ep_stall+0x60>
	} else if (USB_EP_STALL_CLR == ctrl) {
  406904:	79bb      	ldrb	r3, [r7, #6]
  406906:	2b00      	cmp	r3, #0
  406908:	d104      	bne.n	406914 <_usb_d_dev_ep_stall+0x58>
		rc = _usb_d_dev_ep_stall_clr(ept);
  40690a:	68f8      	ldr	r0, [r7, #12]
  40690c:	4b08      	ldr	r3, [pc, #32]	; (406930 <_usb_d_dev_ep_stall+0x74>)
  40690e:	4798      	blx	r3
  406910:	6178      	str	r0, [r7, #20]
  406912:	e003      	b.n	40691c <_usb_d_dev_ep_stall+0x60>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept);
  406914:	68f8      	ldr	r0, [r7, #12]
  406916:	4b07      	ldr	r3, [pc, #28]	; (406934 <_usb_d_dev_ep_stall+0x78>)
  406918:	4798      	blx	r3
  40691a:	6178      	str	r0, [r7, #20]
	}

	return rc;
  40691c:	697b      	ldr	r3, [r7, #20]
}
  40691e:	4618      	mov	r0, r3
  406920:	3718      	adds	r7, #24
  406922:	46bd      	mov	sp, r7
  406924:	bd80      	pop	{r7, pc}
  406926:	bf00      	nop
  406928:	204011c8 	.word	0x204011c8
  40692c:	004067a1 	.word	0x004067a1
  406930:	004067fd 	.word	0x004067fd
  406934:	00406781 	.word	0x00406781

00406938 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  406938:	b580      	push	{r7, lr}
  40693a:	b082      	sub	sp, #8
  40693c:	af00      	add	r7, sp, #0
  40693e:	6078      	str	r0, [r7, #4]
  406940:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  406942:	687b      	ldr	r3, [r7, #4]
  406944:	7c9b      	ldrb	r3, [r3, #18]
  406946:	2bff      	cmp	r3, #255	; 0xff
  406948:	d014      	beq.n	406974 <_usb_d_dev_trans_done+0x3c>
  40694a:	687b      	ldr	r3, [r7, #4]
  40694c:	7cdb      	ldrb	r3, [r3, #19]
  40694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406952:	b2db      	uxtb	r3, r3
  406954:	2b00      	cmp	r3, #0
  406956:	d00d      	beq.n	406974 <_usb_d_dev_trans_done+0x3c>
		return;
	}

	ept->flags.bits.is_busy = 0;
  406958:	687a      	ldr	r2, [r7, #4]
  40695a:	7cd3      	ldrb	r3, [r2, #19]
  40695c:	f36f 1386 	bfc	r3, #6, #1
  406960:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  406962:	4b06      	ldr	r3, [pc, #24]	; (40697c <_usb_d_dev_trans_done+0x44>)
  406964:	691b      	ldr	r3, [r3, #16]
  406966:	687a      	ldr	r2, [r7, #4]
  406968:	7c90      	ldrb	r0, [r2, #18]
  40696a:	687a      	ldr	r2, [r7, #4]
  40696c:	6892      	ldr	r2, [r2, #8]
  40696e:	6839      	ldr	r1, [r7, #0]
  406970:	4798      	blx	r3
  406972:	e000      	b.n	406976 <_usb_d_dev_trans_done+0x3e>
		return;
  406974:	bf00      	nop
}
  406976:	3708      	adds	r7, #8
  406978:	46bd      	mov	sp, r7
  40697a:	bd80      	pop	{r7, pc}
  40697c:	204011c8 	.word	0x204011c8

00406980 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
  406980:	b580      	push	{r7, lr}
  406982:	b086      	sub	sp, #24
  406984:	af00      	add	r7, sp, #0
  406986:	60f8      	str	r0, [r7, #12]
  406988:	460b      	mov	r3, r1
  40698a:	607a      	str	r2, [r7, #4]
  40698c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40698e:	68fb      	ldr	r3, [r7, #12]
  406990:	7c9b      	ldrb	r3, [r3, #18]
  406992:	f003 030f 	and.w	r3, r3, #15
  406996:	75fb      	strb	r3, [r7, #23]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  406998:	68fb      	ldr	r3, [r7, #12]
  40699a:	7c9b      	ldrb	r3, [r3, #18]
  40699c:	2bff      	cmp	r3, #255	; 0xff
  40699e:	d019      	beq.n	4069d4 <_usb_d_dev_trans_stop+0x54>
  4069a0:	68fb      	ldr	r3, [r7, #12]
  4069a2:	7cdb      	ldrb	r3, [r3, #19]
  4069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4069a8:	b2db      	uxtb	r3, r3
  4069aa:	2b00      	cmp	r3, #0
  4069ac:	d012      	beq.n	4069d4 <_usb_d_dev_trans_stop+0x54>
		return;
	}

	/* Stop transfer */
	if (dir) {
  4069ae:	7afb      	ldrb	r3, [r7, #11]
  4069b0:	2b00      	cmp	r3, #0
  4069b2:	d005      	beq.n	4069c0 <_usb_d_dev_trans_stop+0x40>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, false);
  4069b4:	7dfb      	ldrb	r3, [r7, #23]
  4069b6:	2100      	movs	r1, #0
  4069b8:	4618      	mov	r0, r3
  4069ba:	4b08      	ldr	r3, [pc, #32]	; (4069dc <_usb_d_dev_trans_stop+0x5c>)
  4069bc:	4798      	blx	r3
  4069be:	e004      	b.n	4069ca <_usb_d_dev_trans_stop+0x4a>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
  4069c0:	7dfb      	ldrb	r3, [r7, #23]
  4069c2:	2100      	movs	r1, #0
  4069c4:	4618      	mov	r0, r3
  4069c6:	4b06      	ldr	r3, [pc, #24]	; (4069e0 <_usb_d_dev_trans_stop+0x60>)
  4069c8:	4798      	blx	r3
	}

	_usb_d_dev_trans_done(ept, code);
  4069ca:	6879      	ldr	r1, [r7, #4]
  4069cc:	68f8      	ldr	r0, [r7, #12]
  4069ce:	4b05      	ldr	r3, [pc, #20]	; (4069e4 <_usb_d_dev_trans_stop+0x64>)
  4069d0:	4798      	blx	r3
  4069d2:	e000      	b.n	4069d6 <_usb_d_dev_trans_stop+0x56>
		return;
  4069d4:	bf00      	nop
}
  4069d6:	3718      	adds	r7, #24
  4069d8:	46bd      	mov	sp, r7
  4069da:	bd80      	pop	{r7, pc}
  4069dc:	00405d4d 	.word	0x00405d4d
  4069e0:	00405d95 	.word	0x00405d95
  4069e4:	00406939 	.word	0x00406939

004069e8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
  4069e8:	b580      	push	{r7, lr}
  4069ea:	b084      	sub	sp, #16
  4069ec:	af00      	add	r7, sp, #0
  4069ee:	4603      	mov	r3, r0
  4069f0:	6039      	str	r1, [r7, #0]
  4069f2:	71fb      	strb	r3, [r7, #7]
	uint8_t epn = USB_EP_GET_N(ep);
  4069f4:	79fb      	ldrb	r3, [r7, #7]
  4069f6:	f003 030f 	and.w	r3, r3, #15
  4069fa:	73fb      	strb	r3, [r7, #15]

	uint16_t bytes = _usbd_ep_get_trans_count(epn);
  4069fc:	7bfb      	ldrb	r3, [r7, #15]
  4069fe:	4618      	mov	r0, r3
  406a00:	4b1c      	ldr	r3, [pc, #112]	; (406a74 <_usb_d_dev_ep_read_req+0x8c>)
  406a02:	4798      	blx	r3
  406a04:	4603      	mov	r3, r0
  406a06:	81bb      	strh	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  406a08:	7bfb      	ldrb	r3, [r7, #15]
  406a0a:	2b03      	cmp	r3, #3
  406a0c:	d802      	bhi.n	406a14 <_usb_d_dev_ep_read_req+0x2c>
  406a0e:	683b      	ldr	r3, [r7, #0]
  406a10:	2b00      	cmp	r3, #0
  406a12:	d102      	bne.n	406a1a <_usb_d_dev_ep_read_req+0x32>
		return -USB_ERR_PARAM;
  406a14:	f06f 0311 	mvn.w	r3, #17
  406a18:	e027      	b.n	406a6a <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  406a1a:	7bfb      	ldrb	r3, [r7, #15]
  406a1c:	4618      	mov	r0, r3
  406a1e:	4b16      	ldr	r3, [pc, #88]	; (406a78 <_usb_d_dev_ep_read_req+0x90>)
  406a20:	4798      	blx	r3
  406a22:	4603      	mov	r3, r0
  406a24:	f083 0301 	eor.w	r3, r3, #1
  406a28:	b2db      	uxtb	r3, r3
  406a2a:	2b00      	cmp	r3, #0
  406a2c:	d002      	beq.n	406a34 <_usb_d_dev_ep_read_req+0x4c>
		return -USB_ERR_FUNC;
  406a2e:	f06f 0312 	mvn.w	r3, #18
  406a32:	e01a      	b.n	406a6a <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_setup(epn)) {
  406a34:	7bfb      	ldrb	r3, [r7, #15]
  406a36:	4618      	mov	r0, r3
  406a38:	4b10      	ldr	r3, [pc, #64]	; (406a7c <_usb_d_dev_ep_read_req+0x94>)
  406a3a:	4798      	blx	r3
  406a3c:	4603      	mov	r3, r0
  406a3e:	f083 0301 	eor.w	r3, r3, #1
  406a42:	b2db      	uxtb	r3, r3
  406a44:	2b00      	cmp	r3, #0
  406a46:	d001      	beq.n	406a4c <_usb_d_dev_ep_read_req+0x64>
		return ERR_NONE;
  406a48:	2300      	movs	r3, #0
  406a4a:	e00e      	b.n	406a6a <_usb_d_dev_ep_read_req+0x82>
	}

	uint8_t *ptr = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  406a4c:	7bfb      	ldrb	r3, [r7, #15]
  406a4e:	03da      	lsls	r2, r3, #15
  406a50:	4b0b      	ldr	r3, [pc, #44]	; (406a80 <_usb_d_dev_ep_read_req+0x98>)
  406a52:	4413      	add	r3, r2
  406a54:	60bb      	str	r3, [r7, #8]
	memcpy(req_buf, (void *)ptr, 8);
  406a56:	2208      	movs	r2, #8
  406a58:	68b9      	ldr	r1, [r7, #8]
  406a5a:	6838      	ldr	r0, [r7, #0]
  406a5c:	4b09      	ldr	r3, [pc, #36]	; (406a84 <_usb_d_dev_ep_read_req+0x9c>)
  406a5e:	4798      	blx	r3

	_usbd_ep_ack_setup(epn);
  406a60:	7bfb      	ldrb	r3, [r7, #15]
  406a62:	4618      	mov	r0, r3
  406a64:	4b08      	ldr	r3, [pc, #32]	; (406a88 <_usb_d_dev_ep_read_req+0xa0>)
  406a66:	4798      	blx	r3

	return bytes;
  406a68:	89bb      	ldrh	r3, [r7, #12]
}
  406a6a:	4618      	mov	r0, r3
  406a6c:	3710      	adds	r7, #16
  406a6e:	46bd      	mov	sp, r7
  406a70:	bd80      	pop	{r7, pc}
  406a72:	bf00      	nop
  406a74:	00405cd5 	.word	0x00405cd5
  406a78:	00405af1 	.word	0x00405af1
  406a7c:	00405c19 	.word	0x00405c19
  406a80:	a0100000 	.word	0xa0100000
  406a84:	004074d9 	.word	0x004074d9
  406a88:	00405c41 	.word	0x00405c41

00406a8c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  406a8c:	b580      	push	{r7, lr}
  406a8e:	b088      	sub	sp, #32
  406a90:	af00      	add	r7, sp, #0
  406a92:	6078      	str	r0, [r7, #4]
	Usbhs *               hw  = USBHS;
  406a94:	4b5c      	ldr	r3, [pc, #368]	; (406c08 <_usb_d_dev_ep_trans+0x17c>)
  406a96:	61fb      	str	r3, [r7, #28]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  406a98:	687b      	ldr	r3, [r7, #4]
  406a9a:	7a1b      	ldrb	r3, [r3, #8]
  406a9c:	f003 030f 	and.w	r3, r3, #15
  406aa0:	76fb      	strb	r3, [r7, #27]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  406aa2:	687b      	ldr	r3, [r7, #4]
  406aa4:	7a1b      	ldrb	r3, [r3, #8]
  406aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406aaa:	2b00      	cmp	r3, #0
  406aac:	bf14      	ite	ne
  406aae:	2301      	movne	r3, #1
  406ab0:	2300      	moveq	r3, #0
  406ab2:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  406ab4:	7efa      	ldrb	r2, [r7, #27]
  406ab6:	4613      	mov	r3, r2
  406ab8:	009b      	lsls	r3, r3, #2
  406aba:	4413      	add	r3, r2
  406abc:	009b      	lsls	r3, r3, #2
  406abe:	3310      	adds	r3, #16
  406ac0:	4a52      	ldr	r2, [pc, #328]	; (406c0c <_usb_d_dev_ep_trans+0x180>)
  406ac2:	4413      	add	r3, r2
  406ac4:	3304      	adds	r3, #4
  406ac6:	617b      	str	r3, [r7, #20]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  406ac8:	697b      	ldr	r3, [r7, #20]
  406aca:	8a1b      	ldrh	r3, [r3, #16]
  406acc:	f240 32ff 	movw	r2, #1023	; 0x3ff
  406ad0:	4293      	cmp	r3, r2
  406ad2:	d004      	beq.n	406ade <_usb_d_dev_ep_trans+0x52>
  406ad4:	697b      	ldr	r3, [r7, #20]
  406ad6:	8a1b      	ldrh	r3, [r3, #16]
  406ad8:	3b01      	subs	r3, #1
  406ada:	b29b      	uxth	r3, r3
  406adc:	e001      	b.n	406ae2 <_usb_d_dev_ep_trans+0x56>
  406ade:	f240 33ff 	movw	r3, #1023	; 0x3ff
  406ae2:	827b      	strh	r3, [r7, #18]
	bool     size_n_aligned = (trans->size & size_mask);
  406ae4:	687b      	ldr	r3, [r7, #4]
  406ae6:	685a      	ldr	r2, [r3, #4]
  406ae8:	8a7b      	ldrh	r3, [r7, #18]
  406aea:	4013      	ands	r3, r2
  406aec:	2b00      	cmp	r3, #0
  406aee:	bf14      	ite	ne
  406af0:	2301      	movne	r3, #1
  406af2:	2300      	moveq	r3, #0
  406af4:	747b      	strb	r3, [r7, #17]
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  406af6:	697b      	ldr	r3, [r7, #20]
  406af8:	7cdb      	ldrb	r3, [r3, #19]
  406afa:	f003 0307 	and.w	r3, r3, #7
  406afe:	b2db      	uxtb	r3, r3
  406b00:	2b01      	cmp	r3, #1
  406b02:	bf0c      	ite	eq
  406b04:	2301      	moveq	r3, #1
  406b06:	2300      	movne	r3, #0
  406b08:	743b      	strb	r3, [r7, #16]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  406b0a:	7efb      	ldrb	r3, [r7, #27]
  406b0c:	2b03      	cmp	r3, #3
  406b0e:	d902      	bls.n	406b16 <_usb_d_dev_ep_trans+0x8a>
		return -USB_ERR_PARAM;
  406b10:	f06f 0311 	mvn.w	r3, #17
  406b14:	e074      	b.n	406c00 <_usb_d_dev_ep_trans+0x174>
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  406b16:	697b      	ldr	r3, [r7, #20]
  406b18:	7cdb      	ldrb	r3, [r3, #19]
  406b1a:	f003 0308 	and.w	r3, r3, #8
  406b1e:	b2db      	uxtb	r3, r3
  406b20:	2b00      	cmp	r3, #0
  406b22:	d001      	beq.n	406b28 <_usb_d_dev_ep_trans+0x9c>
		return USB_HALTED;
  406b24:	2302      	movs	r3, #2
  406b26:	e06b      	b.n	406c00 <_usb_d_dev_ep_trans+0x174>
	}

	/* Try to start transactions. */
	atomic_enter_critical(&flags);
  406b28:	f107 030c 	add.w	r3, r7, #12
  406b2c:	4618      	mov	r0, r3
  406b2e:	4b38      	ldr	r3, [pc, #224]	; (406c10 <_usb_d_dev_ep_trans+0x184>)
  406b30:	4798      	blx	r3

	if (_usb_d_dev_ep_is_busy(ept)) {
  406b32:	697b      	ldr	r3, [r7, #20]
  406b34:	7cdb      	ldrb	r3, [r3, #19]
  406b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406b3a:	b2db      	uxtb	r3, r3
  406b3c:	2b00      	cmp	r3, #0
  406b3e:	d006      	beq.n	406b4e <_usb_d_dev_ep_trans+0xc2>
		atomic_leave_critical(&flags);
  406b40:	f107 030c 	add.w	r3, r7, #12
  406b44:	4618      	mov	r0, r3
  406b46:	4b33      	ldr	r3, [pc, #204]	; (406c14 <_usb_d_dev_ep_trans+0x188>)
  406b48:	4798      	blx	r3
		return USB_BUSY;
  406b4a:	2301      	movs	r3, #1
  406b4c:	e058      	b.n	406c00 <_usb_d_dev_ep_trans+0x174>
	}

	ept->flags.bits.is_busy = 1;
  406b4e:	697a      	ldr	r2, [r7, #20]
  406b50:	7cd3      	ldrb	r3, [r2, #19]
  406b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b56:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
  406b58:	f107 030c 	add.w	r3, r7, #12
  406b5c:	4618      	mov	r0, r3
  406b5e:	4b2d      	ldr	r3, [pc, #180]	; (406c14 <_usb_d_dev_ep_trans+0x188>)
  406b60:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
  406b62:	687b      	ldr	r3, [r7, #4]
  406b64:	681a      	ldr	r2, [r3, #0]
  406b66:	697b      	ldr	r3, [r7, #20]
  406b68:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
  406b6a:	687b      	ldr	r3, [r7, #4]
  406b6c:	685a      	ldr	r2, [r3, #4]
  406b6e:	697b      	ldr	r3, [r7, #20]
  406b70:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
  406b72:	697b      	ldr	r3, [r7, #20]
  406b74:	2200      	movs	r2, #0
  406b76:	609a      	str	r2, [r3, #8]
	ept->trans_load  = 0;
  406b78:	697b      	ldr	r3, [r7, #20]
  406b7a:	2200      	movs	r2, #0
  406b7c:	60da      	str	r2, [r3, #12]

	ept->flags.bits.dir      = dir;
  406b7e:	697a      	ldr	r2, [r7, #20]
  406b80:	7cd3      	ldrb	r3, [r2, #19]
  406b82:	7eb9      	ldrb	r1, [r7, #26]
  406b84:	f361 13c7 	bfi	r3, r1, #7, #1
  406b88:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  406b8a:	687b      	ldr	r3, [r7, #4]
  406b8c:	7a5b      	ldrb	r3, [r3, #9]
  406b8e:	2b00      	cmp	r3, #0
  406b90:	d007      	beq.n	406ba2 <_usb_d_dev_ep_trans+0x116>
  406b92:	7c7b      	ldrb	r3, [r7, #17]
  406b94:	f083 0301 	eor.w	r3, r3, #1
  406b98:	b2db      	uxtb	r3, r3
  406b9a:	2b00      	cmp	r3, #0
  406b9c:	d001      	beq.n	406ba2 <_usb_d_dev_ep_trans+0x116>
  406b9e:	2301      	movs	r3, #1
  406ba0:	e000      	b.n	406ba4 <_usb_d_dev_ep_trans+0x118>
  406ba2:	2300      	movs	r3, #0
  406ba4:	b2db      	uxtb	r3, r3
  406ba6:	f003 0301 	and.w	r3, r3, #1
  406baa:	b2d9      	uxtb	r1, r3
  406bac:	697a      	ldr	r2, [r7, #20]
  406bae:	7cd3      	ldrb	r3, [r2, #19]
  406bb0:	f361 1304 	bfi	r3, r1, #4, #1
  406bb4:	74d3      	strb	r3, [r2, #19]
	if (_usb_d_dev_ep_is_dma(epn)) {
		hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(hw, epn);
		_usb_d_dev_dma_next(ept);
	} else {
#endif
		if (!is_ctrl) {
  406bb6:	7c3b      	ldrb	r3, [r7, #16]
  406bb8:	f083 0301 	eor.w	r3, r3, #1
  406bbc:	b2db      	uxtb	r3, r3
  406bbe:	2b00      	cmp	r3, #0
  406bc0:	d008      	beq.n	406bd4 <_usb_d_dev_ep_trans+0x148>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406bc2:	7efb      	ldrb	r3, [r7, #27]
  406bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406bc8:	fa02 f303 	lsl.w	r3, r2, r3
  406bcc:	4619      	mov	r1, r3
  406bce:	69f8      	ldr	r0, [r7, #28]
  406bd0:	4b11      	ldr	r3, [pc, #68]	; (406c18 <_usb_d_dev_ep_trans+0x18c>)
  406bd2:	4798      	blx	r3
		}
		hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(hw, epn);
  406bd4:	7efb      	ldrb	r3, [r7, #27]
  406bd6:	4619      	mov	r1, r3
  406bd8:	69f8      	ldr	r0, [r7, #28]
  406bda:	4b10      	ldr	r3, [pc, #64]	; (406c1c <_usb_d_dev_ep_trans+0x190>)
  406bdc:	4798      	blx	r3
		if (dir) {
  406bde:	7ebb      	ldrb	r3, [r7, #26]
  406be0:	2b00      	cmp	r3, #0
  406be2:	d006      	beq.n	406bf2 <_usb_d_dev_ep_trans+0x166>
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  406be4:	7efb      	ldrb	r3, [r7, #27]
  406be6:	2201      	movs	r2, #1
  406be8:	4619      	mov	r1, r3
  406bea:	69f8      	ldr	r0, [r7, #28]
  406bec:	4b0c      	ldr	r3, [pc, #48]	; (406c20 <_usb_d_dev_ep_trans+0x194>)
  406bee:	4798      	blx	r3
  406bf0:	e005      	b.n	406bfe <_usb_d_dev_ep_trans+0x172>
		} else {
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RXOUTES);
  406bf2:	7efb      	ldrb	r3, [r7, #27]
  406bf4:	2202      	movs	r2, #2
  406bf6:	4619      	mov	r1, r3
  406bf8:	69f8      	ldr	r0, [r7, #28]
  406bfa:	4b09      	ldr	r3, [pc, #36]	; (406c20 <_usb_d_dev_ep_trans+0x194>)
  406bfc:	4798      	blx	r3
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
  406bfe:	2300      	movs	r3, #0
}
  406c00:	4618      	mov	r0, r3
  406c02:	3720      	adds	r7, #32
  406c04:	46bd      	mov	sp, r7
  406c06:	bd80      	pop	{r7, pc}
  406c08:	40038000 	.word	0x40038000
  406c0c:	204011c8 	.word	0x204011c8
  406c10:	00401cfd 	.word	0x00401cfd
  406c14:	00401d23 	.word	0x00401d23
  406c18:	00405793 	.word	0x00405793
  406c1c:	004058f5 	.word	0x004058f5
  406c20:	004059e7 	.word	0x004059e7

00406c24 <_usb_d_dev_register_ep_callback>:
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
  406c24:	b480      	push	{r7}
  406c26:	b085      	sub	sp, #20
  406c28:	af00      	add	r7, sp, #0
  406c2a:	4603      	mov	r3, r0
  406c2c:	6039      	str	r1, [r7, #0]
  406c2e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  406c30:	683b      	ldr	r3, [r7, #0]
  406c32:	2b00      	cmp	r3, #0
  406c34:	d001      	beq.n	406c3a <_usb_d_dev_register_ep_callback+0x16>
  406c36:	683b      	ldr	r3, [r7, #0]
  406c38:	e000      	b.n	406c3c <_usb_d_dev_register_ep_callback+0x18>
  406c3a:	4b0e      	ldr	r3, [pc, #56]	; (406c74 <_usb_d_dev_register_ep_callback+0x50>)
  406c3c:	60fb      	str	r3, [r7, #12]

	if (type == USB_D_DEV_EP_CB_SETUP) {
  406c3e:	79fb      	ldrb	r3, [r7, #7]
  406c40:	2b00      	cmp	r3, #0
  406c42:	d103      	bne.n	406c4c <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  406c44:	4a0c      	ldr	r2, [pc, #48]	; (406c78 <_usb_d_dev_register_ep_callback+0x54>)
  406c46:	68fb      	ldr	r3, [r7, #12]
  406c48:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
  406c4a:	e00c      	b.n	406c66 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  406c4c:	79fb      	ldrb	r3, [r7, #7]
  406c4e:	2b01      	cmp	r3, #1
  406c50:	d103      	bne.n	406c5a <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  406c52:	4a09      	ldr	r2, [pc, #36]	; (406c78 <_usb_d_dev_register_ep_callback+0x54>)
  406c54:	68fb      	ldr	r3, [r7, #12]
  406c56:	60d3      	str	r3, [r2, #12]
}
  406c58:	e005      	b.n	406c66 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  406c5a:	79fb      	ldrb	r3, [r7, #7]
  406c5c:	2b02      	cmp	r3, #2
  406c5e:	d102      	bne.n	406c66 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  406c60:	4a05      	ldr	r2, [pc, #20]	; (406c78 <_usb_d_dev_register_ep_callback+0x54>)
  406c62:	68fb      	ldr	r3, [r7, #12]
  406c64:	6113      	str	r3, [r2, #16]
}
  406c66:	bf00      	nop
  406c68:	3714      	adds	r7, #20
  406c6a:	46bd      	mov	sp, r7
  406c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406c70:	4770      	bx	lr
  406c72:	bf00      	nop
  406c74:	00405a33 	.word	0x00405a33
  406c78:	204011c8 	.word	0x204011c8

00406c7c <__NVIC_EnableIRQ>:
{
  406c7c:	b480      	push	{r7}
  406c7e:	b083      	sub	sp, #12
  406c80:	af00      	add	r7, sp, #0
  406c82:	4603      	mov	r3, r0
  406c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  406c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406c8a:	2b00      	cmp	r3, #0
  406c8c:	db0b      	blt.n	406ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  406c8e:	4909      	ldr	r1, [pc, #36]	; (406cb4 <__NVIC_EnableIRQ+0x38>)
  406c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406c94:	095b      	lsrs	r3, r3, #5
  406c96:	79fa      	ldrb	r2, [r7, #7]
  406c98:	f002 021f 	and.w	r2, r2, #31
  406c9c:	2001      	movs	r0, #1
  406c9e:	fa00 f202 	lsl.w	r2, r0, r2
  406ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406ca6:	bf00      	nop
  406ca8:	370c      	adds	r7, #12
  406caa:	46bd      	mov	sp, r7
  406cac:	f85d 7b04 	ldr.w	r7, [sp], #4
  406cb0:	4770      	bx	lr
  406cb2:	bf00      	nop
  406cb4:	e000e100 	.word	0xe000e100

00406cb8 <__NVIC_DisableIRQ>:
{
  406cb8:	b480      	push	{r7}
  406cba:	b083      	sub	sp, #12
  406cbc:	af00      	add	r7, sp, #0
  406cbe:	4603      	mov	r3, r0
  406cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  406cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406cc6:	2b00      	cmp	r3, #0
  406cc8:	db10      	blt.n	406cec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  406cca:	490b      	ldr	r1, [pc, #44]	; (406cf8 <__NVIC_DisableIRQ+0x40>)
  406ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406cd0:	095b      	lsrs	r3, r3, #5
  406cd2:	79fa      	ldrb	r2, [r7, #7]
  406cd4:	f002 021f 	and.w	r2, r2, #31
  406cd8:	2001      	movs	r0, #1
  406cda:	fa00 f202 	lsl.w	r2, r0, r2
  406cde:	3320      	adds	r3, #32
  406ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  406ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  406ce8:	f3bf 8f6f 	isb	sy
}
  406cec:	bf00      	nop
  406cee:	370c      	adds	r7, #12
  406cf0:	46bd      	mov	sp, r7
  406cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406cf6:	4770      	bx	lr
  406cf8:	e000e100 	.word	0xe000e100

00406cfc <__NVIC_ClearPendingIRQ>:
{
  406cfc:	b480      	push	{r7}
  406cfe:	b083      	sub	sp, #12
  406d00:	af00      	add	r7, sp, #0
  406d02:	4603      	mov	r3, r0
  406d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  406d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406d0a:	2b00      	cmp	r3, #0
  406d0c:	db0c      	blt.n	406d28 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  406d0e:	4909      	ldr	r1, [pc, #36]	; (406d34 <__NVIC_ClearPendingIRQ+0x38>)
  406d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406d14:	095b      	lsrs	r3, r3, #5
  406d16:	79fa      	ldrb	r2, [r7, #7]
  406d18:	f002 021f 	and.w	r2, r2, #31
  406d1c:	2001      	movs	r0, #1
  406d1e:	fa00 f202 	lsl.w	r2, r0, r2
  406d22:	3360      	adds	r3, #96	; 0x60
  406d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406d28:	bf00      	nop
  406d2a:	370c      	adds	r7, #12
  406d2c:	46bd      	mov	sp, r7
  406d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d32:	4770      	bx	lr
  406d34:	e000e100 	.word	0xe000e100

00406d38 <hri_xdmac_set_CIM_reg>:
{
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = XDMAC_CIM_ROIM;
}

static inline void hri_xdmac_set_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  406d38:	b480      	push	{r7}
  406d3a:	b085      	sub	sp, #20
  406d3c:	af00      	add	r7, sp, #0
  406d3e:	60f8      	str	r0, [r7, #12]
  406d40:	460b      	mov	r3, r1
  406d42:	607a      	str	r2, [r7, #4]
  406d44:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = mask;
  406d46:	7afb      	ldrb	r3, [r7, #11]
  406d48:	68fa      	ldr	r2, [r7, #12]
  406d4a:	019b      	lsls	r3, r3, #6
  406d4c:	4413      	add	r3, r2
  406d4e:	3350      	adds	r3, #80	; 0x50
  406d50:	687a      	ldr	r2, [r7, #4]
  406d52:	601a      	str	r2, [r3, #0]
}
  406d54:	bf00      	nop
  406d56:	3714      	adds	r7, #20
  406d58:	46bd      	mov	sp, r7
  406d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d5e:	4770      	bx	lr

00406d60 <hri_xdmac_clear_CIM_reg>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = data;
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = ~data;
}

static inline void hri_xdmac_clear_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  406d60:	b480      	push	{r7}
  406d62:	b085      	sub	sp, #20
  406d64:	af00      	add	r7, sp, #0
  406d66:	60f8      	str	r0, [r7, #12]
  406d68:	460b      	mov	r3, r1
  406d6a:	607a      	str	r2, [r7, #4]
  406d6c:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = mask;
  406d6e:	7afb      	ldrb	r3, [r7, #11]
  406d70:	68fa      	ldr	r2, [r7, #12]
  406d72:	019b      	lsls	r3, r3, #6
  406d74:	4413      	add	r3, r2
  406d76:	3354      	adds	r3, #84	; 0x54
  406d78:	687a      	ldr	r2, [r7, #4]
  406d7a:	601a      	str	r2, [r3, #0]
}
  406d7c:	bf00      	nop
  406d7e:	3714      	adds	r7, #20
  406d80:	46bd      	mov	sp, r7
  406d82:	f85d 7b04 	ldr.w	r7, [sp], #4
  406d86:	4770      	bx	lr

00406d88 <hri_xdmac_read_CIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
  406d88:	b480      	push	{r7}
  406d8a:	b083      	sub	sp, #12
  406d8c:	af00      	add	r7, sp, #0
  406d8e:	6078      	str	r0, [r7, #4]
  406d90:	460b      	mov	r3, r1
  406d92:	70fb      	strb	r3, [r7, #3]
	return ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIS;
  406d94:	78fb      	ldrb	r3, [r7, #3]
  406d96:	687a      	ldr	r2, [r7, #4]
  406d98:	019b      	lsls	r3, r3, #6
  406d9a:	4413      	add	r3, r2
  406d9c:	335c      	adds	r3, #92	; 0x5c
  406d9e:	681b      	ldr	r3, [r3, #0]
}
  406da0:	4618      	mov	r0, r3
  406da2:	370c      	adds	r7, #12
  406da4:	46bd      	mov	sp, r7
  406da6:	f85d 7b04 	ldr.w	r7, [sp], #4
  406daa:	4770      	bx	lr

00406dac <hri_xdmac_write_CSA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csa_reg_t data)
{
  406dac:	b480      	push	{r7}
  406dae:	b085      	sub	sp, #20
  406db0:	af00      	add	r7, sp, #0
  406db2:	60f8      	str	r0, [r7, #12]
  406db4:	460b      	mov	r3, r1
  406db6:	607a      	str	r2, [r7, #4]
  406db8:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSA = data;
  406dba:	7afb      	ldrb	r3, [r7, #11]
  406dbc:	68fa      	ldr	r2, [r7, #12]
  406dbe:	019b      	lsls	r3, r3, #6
  406dc0:	4413      	add	r3, r2
  406dc2:	3360      	adds	r3, #96	; 0x60
  406dc4:	687a      	ldr	r2, [r7, #4]
  406dc6:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406dc8:	bf00      	nop
  406dca:	3714      	adds	r7, #20
  406dcc:	46bd      	mov	sp, r7
  406dce:	f85d 7b04 	ldr.w	r7, [sp], #4
  406dd2:	4770      	bx	lr

00406dd4 <hri_xdmac_write_CDA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cda_reg_t data)
{
  406dd4:	b480      	push	{r7}
  406dd6:	b085      	sub	sp, #20
  406dd8:	af00      	add	r7, sp, #0
  406dda:	60f8      	str	r0, [r7, #12]
  406ddc:	460b      	mov	r3, r1
  406dde:	607a      	str	r2, [r7, #4]
  406de0:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDA = data;
  406de2:	7afb      	ldrb	r3, [r7, #11]
  406de4:	68fa      	ldr	r2, [r7, #12]
  406de6:	019b      	lsls	r3, r3, #6
  406de8:	4413      	add	r3, r2
  406dea:	3364      	adds	r3, #100	; 0x64
  406dec:	687a      	ldr	r2, [r7, #4]
  406dee:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406df0:	bf00      	nop
  406df2:	3714      	adds	r7, #20
  406df4:	46bd      	mov	sp, r7
  406df6:	f85d 7b04 	ldr.w	r7, [sp], #4
  406dfa:	4770      	bx	lr

00406dfc <hri_xdmac_write_CNDC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
  406dfc:	b480      	push	{r7}
  406dfe:	b085      	sub	sp, #20
  406e00:	af00      	add	r7, sp, #0
  406e02:	60f8      	str	r0, [r7, #12]
  406e04:	460b      	mov	r3, r1
  406e06:	607a      	str	r2, [r7, #4]
  406e08:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CNDC = data;
  406e0a:	7afb      	ldrb	r3, [r7, #11]
  406e0c:	68fa      	ldr	r2, [r7, #12]
  406e0e:	019b      	lsls	r3, r3, #6
  406e10:	4413      	add	r3, r2
  406e12:	336c      	adds	r3, #108	; 0x6c
  406e14:	687a      	ldr	r2, [r7, #4]
  406e16:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406e18:	bf00      	nop
  406e1a:	3714      	adds	r7, #20
  406e1c:	46bd      	mov	sp, r7
  406e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e22:	4770      	bx	lr

00406e24 <hri_xdmac_write_CUBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CUBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cubc_reg_t data)
{
  406e24:	b480      	push	{r7}
  406e26:	b085      	sub	sp, #20
  406e28:	af00      	add	r7, sp, #0
  406e2a:	60f8      	str	r0, [r7, #12]
  406e2c:	460b      	mov	r3, r1
  406e2e:	607a      	str	r2, [r7, #4]
  406e30:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CUBC = data;
  406e32:	7afb      	ldrb	r3, [r7, #11]
  406e34:	68fa      	ldr	r2, [r7, #12]
  406e36:	019b      	lsls	r3, r3, #6
  406e38:	4413      	add	r3, r2
  406e3a:	3370      	adds	r3, #112	; 0x70
  406e3c:	687a      	ldr	r2, [r7, #4]
  406e3e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406e40:	bf00      	nop
  406e42:	3714      	adds	r7, #20
  406e44:	46bd      	mov	sp, r7
  406e46:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e4a:	4770      	bx	lr

00406e4c <hri_xdmac_write_CBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
  406e4c:	b480      	push	{r7}
  406e4e:	b085      	sub	sp, #20
  406e50:	af00      	add	r7, sp, #0
  406e52:	60f8      	str	r0, [r7, #12]
  406e54:	460b      	mov	r3, r1
  406e56:	607a      	str	r2, [r7, #4]
  406e58:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CBC = data;
  406e5a:	7afb      	ldrb	r3, [r7, #11]
  406e5c:	68fa      	ldr	r2, [r7, #12]
  406e5e:	019b      	lsls	r3, r3, #6
  406e60:	4413      	add	r3, r2
  406e62:	3374      	adds	r3, #116	; 0x74
  406e64:	687a      	ldr	r2, [r7, #4]
  406e66:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406e68:	bf00      	nop
  406e6a:	3714      	adds	r7, #20
  406e6c:	46bd      	mov	sp, r7
  406e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e72:	4770      	bx	lr

00406e74 <hri_xdmac_get_CC_DWIDTH_bf>:
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_get_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index,
                                                            hri_xdmac_cc_reg_t mask)
{
  406e74:	b480      	push	{r7}
  406e76:	b087      	sub	sp, #28
  406e78:	af00      	add	r7, sp, #0
  406e7a:	60f8      	str	r0, [r7, #12]
  406e7c:	460b      	mov	r3, r1
  406e7e:	607a      	str	r2, [r7, #4]
  406e80:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  406e82:	7afb      	ldrb	r3, [r7, #11]
  406e84:	68fa      	ldr	r2, [r7, #12]
  406e86:	019b      	lsls	r3, r3, #6
  406e88:	4413      	add	r3, r2
  406e8a:	3378      	adds	r3, #120	; 0x78
  406e8c:	681b      	ldr	r3, [r3, #0]
  406e8e:	617b      	str	r3, [r7, #20]
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  406e90:	687b      	ldr	r3, [r7, #4]
  406e92:	02da      	lsls	r2, r3, #11
  406e94:	697b      	ldr	r3, [r7, #20]
  406e96:	4013      	ands	r3, r2
  406e98:	0adb      	lsrs	r3, r3, #11
  406e9a:	f003 0303 	and.w	r3, r3, #3
  406e9e:	617b      	str	r3, [r7, #20]
	return tmp;
  406ea0:	697b      	ldr	r3, [r7, #20]
}
  406ea2:	4618      	mov	r0, r3
  406ea4:	371c      	adds	r7, #28
  406ea6:	46bd      	mov	sp, r7
  406ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
  406eac:	4770      	bx	lr

00406eae <hri_xdmac_read_CC_DWIDTH_bf>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC ^= XDMAC_CC_DWIDTH(mask);
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_read_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index)
{
  406eae:	b480      	push	{r7}
  406eb0:	b085      	sub	sp, #20
  406eb2:	af00      	add	r7, sp, #0
  406eb4:	6078      	str	r0, [r7, #4]
  406eb6:	460b      	mov	r3, r1
  406eb8:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  406eba:	78fb      	ldrb	r3, [r7, #3]
  406ebc:	687a      	ldr	r2, [r7, #4]
  406ebe:	019b      	lsls	r3, r3, #6
  406ec0:	4413      	add	r3, r2
  406ec2:	3378      	adds	r3, #120	; 0x78
  406ec4:	681b      	ldr	r3, [r3, #0]
  406ec6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & XDMAC_CC_DWIDTH_Msk) >> XDMAC_CC_DWIDTH_Pos;
  406ec8:	68fb      	ldr	r3, [r7, #12]
  406eca:	0adb      	lsrs	r3, r3, #11
  406ecc:	f003 0303 	and.w	r3, r3, #3
  406ed0:	60fb      	str	r3, [r7, #12]
	return tmp;
  406ed2:	68fb      	ldr	r3, [r7, #12]
}
  406ed4:	4618      	mov	r0, r3
  406ed6:	3714      	adds	r7, #20
  406ed8:	46bd      	mov	sp, r7
  406eda:	f85d 7b04 	ldr.w	r7, [sp], #4
  406ede:	4770      	bx	lr

00406ee0 <hri_xdmac_write_CC_SAM_bf>:
	tmp = (tmp & XDMAC_CC_SAM(mask)) >> XDMAC_CC_SAM_Pos;
	return tmp;
}

static inline void hri_xdmac_write_CC_SAM_bf(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  406ee0:	b480      	push	{r7}
  406ee2:	b087      	sub	sp, #28
  406ee4:	af00      	add	r7, sp, #0
  406ee6:	60f8      	str	r0, [r7, #12]
  406ee8:	460b      	mov	r3, r1
  406eea:	607a      	str	r2, [r7, #4]
  406eec:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  406eee:	7afb      	ldrb	r3, [r7, #11]
  406ef0:	68fa      	ldr	r2, [r7, #12]
  406ef2:	019b      	lsls	r3, r3, #6
  406ef4:	4413      	add	r3, r2
  406ef6:	3378      	adds	r3, #120	; 0x78
  406ef8:	681b      	ldr	r3, [r3, #0]
  406efa:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CC_SAM_Msk;
  406efc:	697b      	ldr	r3, [r7, #20]
  406efe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  406f02:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CC_SAM(data);
  406f04:	687b      	ldr	r3, [r7, #4]
  406f06:	041b      	lsls	r3, r3, #16
  406f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  406f0c:	697a      	ldr	r2, [r7, #20]
  406f0e:	4313      	orrs	r3, r2
  406f10:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = tmp;
  406f12:	7afb      	ldrb	r3, [r7, #11]
  406f14:	68fa      	ldr	r2, [r7, #12]
  406f16:	019b      	lsls	r3, r3, #6
  406f18:	4413      	add	r3, r2
  406f1a:	3378      	adds	r3, #120	; 0x78
  406f1c:	697a      	ldr	r2, [r7, #20]
  406f1e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406f20:	bf00      	nop
  406f22:	371c      	adds	r7, #28
  406f24:	46bd      	mov	sp, r7
  406f26:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f2a:	4770      	bx	lr

00406f2c <hri_xdmac_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  406f2c:	b480      	push	{r7}
  406f2e:	b085      	sub	sp, #20
  406f30:	af00      	add	r7, sp, #0
  406f32:	60f8      	str	r0, [r7, #12]
  406f34:	460b      	mov	r3, r1
  406f36:	607a      	str	r2, [r7, #4]
  406f38:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = data;
  406f3a:	7afb      	ldrb	r3, [r7, #11]
  406f3c:	68fa      	ldr	r2, [r7, #12]
  406f3e:	019b      	lsls	r3, r3, #6
  406f40:	4413      	add	r3, r2
  406f42:	3378      	adds	r3, #120	; 0x78
  406f44:	687a      	ldr	r2, [r7, #4]
  406f46:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406f48:	bf00      	nop
  406f4a:	3714      	adds	r7, #20
  406f4c:	46bd      	mov	sp, r7
  406f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f52:	4770      	bx	lr

00406f54 <hri_xdmac_write_CDS_MSP_SDS_MSP_bf>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_SDS_MSP_bf(const void *const hw, uint8_t submodule_index,
                                                      hri_xdmac_cds_msp_reg_t data)
{
  406f54:	b480      	push	{r7}
  406f56:	b087      	sub	sp, #28
  406f58:	af00      	add	r7, sp, #0
  406f5a:	60f8      	str	r0, [r7, #12]
  406f5c:	460b      	mov	r3, r1
  406f5e:	607a      	str	r2, [r7, #4]
  406f60:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP;
  406f62:	7afb      	ldrb	r3, [r7, #11]
  406f64:	68fa      	ldr	r2, [r7, #12]
  406f66:	019b      	lsls	r3, r3, #6
  406f68:	4413      	add	r3, r2
  406f6a:	337c      	adds	r3, #124	; 0x7c
  406f6c:	681b      	ldr	r3, [r3, #0]
  406f6e:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CDS_MSP_SDS_MSP_Msk;
  406f70:	697a      	ldr	r2, [r7, #20]
  406f72:	4b0a      	ldr	r3, [pc, #40]	; (406f9c <hri_xdmac_write_CDS_MSP_SDS_MSP_bf+0x48>)
  406f74:	4013      	ands	r3, r2
  406f76:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CDS_MSP_SDS_MSP(data);
  406f78:	687b      	ldr	r3, [r7, #4]
  406f7a:	b29b      	uxth	r3, r3
  406f7c:	697a      	ldr	r2, [r7, #20]
  406f7e:	4313      	orrs	r3, r2
  406f80:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = tmp;
  406f82:	7afb      	ldrb	r3, [r7, #11]
  406f84:	68fa      	ldr	r2, [r7, #12]
  406f86:	019b      	lsls	r3, r3, #6
  406f88:	4413      	add	r3, r2
  406f8a:	337c      	adds	r3, #124	; 0x7c
  406f8c:	697a      	ldr	r2, [r7, #20]
  406f8e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406f90:	bf00      	nop
  406f92:	371c      	adds	r7, #28
  406f94:	46bd      	mov	sp, r7
  406f96:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f9a:	4770      	bx	lr
  406f9c:	ffff0000 	.word	0xffff0000

00406fa0 <hri_xdmac_write_CDS_MSP_reg>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_reg(const void *const hw, uint8_t submodule_index,
                                               hri_xdmac_cds_msp_reg_t data)
{
  406fa0:	b480      	push	{r7}
  406fa2:	b085      	sub	sp, #20
  406fa4:	af00      	add	r7, sp, #0
  406fa6:	60f8      	str	r0, [r7, #12]
  406fa8:	460b      	mov	r3, r1
  406faa:	607a      	str	r2, [r7, #4]
  406fac:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = data;
  406fae:	7afb      	ldrb	r3, [r7, #11]
  406fb0:	68fa      	ldr	r2, [r7, #12]
  406fb2:	019b      	lsls	r3, r3, #6
  406fb4:	4413      	add	r3, r2
  406fb6:	337c      	adds	r3, #124	; 0x7c
  406fb8:	687a      	ldr	r2, [r7, #4]
  406fba:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406fbc:	bf00      	nop
  406fbe:	3714      	adds	r7, #20
  406fc0:	46bd      	mov	sp, r7
  406fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406fc6:	4770      	bx	lr

00406fc8 <hri_xdmac_write_CSUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
  406fc8:	b480      	push	{r7}
  406fca:	b085      	sub	sp, #20
  406fcc:	af00      	add	r7, sp, #0
  406fce:	60f8      	str	r0, [r7, #12]
  406fd0:	460b      	mov	r3, r1
  406fd2:	607a      	str	r2, [r7, #4]
  406fd4:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSUS = data;
  406fd6:	7afb      	ldrb	r3, [r7, #11]
  406fd8:	68fa      	ldr	r2, [r7, #12]
  406fda:	3302      	adds	r3, #2
  406fdc:	019b      	lsls	r3, r3, #6
  406fde:	4413      	add	r3, r2
  406fe0:	687a      	ldr	r2, [r7, #4]
  406fe2:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406fe4:	bf00      	nop
  406fe6:	3714      	adds	r7, #20
  406fe8:	46bd      	mov	sp, r7
  406fea:	f85d 7b04 	ldr.w	r7, [sp], #4
  406fee:	4770      	bx	lr

00406ff0 <hri_xdmac_write_CDUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
  406ff0:	b480      	push	{r7}
  406ff2:	b085      	sub	sp, #20
  406ff4:	af00      	add	r7, sp, #0
  406ff6:	60f8      	str	r0, [r7, #12]
  406ff8:	460b      	mov	r3, r1
  406ffa:	607a      	str	r2, [r7, #4]
  406ffc:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDUS = data;
  406ffe:	7afb      	ldrb	r3, [r7, #11]
  407000:	68fa      	ldr	r2, [r7, #12]
  407002:	3302      	adds	r3, #2
  407004:	019b      	lsls	r3, r3, #6
  407006:	4413      	add	r3, r2
  407008:	3304      	adds	r3, #4
  40700a:	687a      	ldr	r2, [r7, #4]
  40700c:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  40700e:	bf00      	nop
  407010:	3714      	adds	r7, #20
  407012:	46bd      	mov	sp, r7
  407014:	f85d 7b04 	ldr.w	r7, [sp], #4
  407018:	4770      	bx	lr

0040701a <hri_xdmac_set_GIM_reg>:
{
	((Xdmac *)hw)->XDMAC_GID = XDMAC_GIM_IM23;
}

static inline void hri_xdmac_set_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  40701a:	b480      	push	{r7}
  40701c:	b083      	sub	sp, #12
  40701e:	af00      	add	r7, sp, #0
  407020:	6078      	str	r0, [r7, #4]
  407022:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GIE = mask;
  407024:	687b      	ldr	r3, [r7, #4]
  407026:	683a      	ldr	r2, [r7, #0]
  407028:	60da      	str	r2, [r3, #12]
}
  40702a:	bf00      	nop
  40702c:	370c      	adds	r7, #12
  40702e:	46bd      	mov	sp, r7
  407030:	f85d 7b04 	ldr.w	r7, [sp], #4
  407034:	4770      	bx	lr

00407036 <hri_xdmac_clear_GIM_reg>:
	((Xdmac *)hw)->XDMAC_GIE = data;
	((Xdmac *)hw)->XDMAC_GID = ~data;
}

static inline void hri_xdmac_clear_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  407036:	b480      	push	{r7}
  407038:	b083      	sub	sp, #12
  40703a:	af00      	add	r7, sp, #0
  40703c:	6078      	str	r0, [r7, #4]
  40703e:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GID = mask;
  407040:	687b      	ldr	r3, [r7, #4]
  407042:	683a      	ldr	r2, [r7, #0]
  407044:	611a      	str	r2, [r3, #16]
}
  407046:	bf00      	nop
  407048:	370c      	adds	r7, #12
  40704a:	46bd      	mov	sp, r7
  40704c:	f85d 7b04 	ldr.w	r7, [sp], #4
  407050:	4770      	bx	lr

00407052 <hri_xdmac_set_GS_reg>:
{
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
  407052:	b480      	push	{r7}
  407054:	b083      	sub	sp, #12
  407056:	af00      	add	r7, sp, #0
  407058:	6078      	str	r0, [r7, #4]
  40705a:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GE = mask;
  40705c:	687b      	ldr	r3, [r7, #4]
  40705e:	683a      	ldr	r2, [r7, #0]
  407060:	61da      	str	r2, [r3, #28]
}
  407062:	bf00      	nop
  407064:	370c      	adds	r7, #12
  407066:	46bd      	mov	sp, r7
  407068:	f85d 7b04 	ldr.w	r7, [sp], #4
  40706c:	4770      	bx	lr

0040706e <hri_xdmac_read_GIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_gis_reg_t hri_xdmac_read_GIS_reg(const void *const hw)
{
  40706e:	b480      	push	{r7}
  407070:	b083      	sub	sp, #12
  407072:	af00      	add	r7, sp, #0
  407074:	6078      	str	r0, [r7, #4]
	return ((Xdmac *)hw)->XDMAC_GIS;
  407076:	687b      	ldr	r3, [r7, #4]
  407078:	699b      	ldr	r3, [r3, #24]
}
  40707a:	4618      	mov	r0, r3
  40707c:	370c      	adds	r7, #12
  40707e:	46bd      	mov	sp, r7
  407080:	f85d 7b04 	ldr.w	r7, [sp], #4
  407084:	4770      	bx	lr

00407086 <hri_xdmac_write_GSWR_reg>:
	((Xdmac *)hw)->XDMAC_GRWR = data;
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
  407086:	b480      	push	{r7}
  407088:	b083      	sub	sp, #12
  40708a:	af00      	add	r7, sp, #0
  40708c:	6078      	str	r0, [r7, #4]
  40708e:	6039      	str	r1, [r7, #0]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  407090:	687b      	ldr	r3, [r7, #4]
  407092:	683a      	ldr	r2, [r7, #0]
  407094:	639a      	str	r2, [r3, #56]	; 0x38
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407096:	bf00      	nop
  407098:	370c      	adds	r7, #12
  40709a:	46bd      	mov	sp, r7
  40709c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4070a0:	4770      	bx	lr
	...

004070a4 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4070a4:	b580      	push	{r7, lr}
  4070a6:	b082      	sub	sp, #8
  4070a8:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4070aa:	2300      	movs	r3, #0
  4070ac:	71fb      	strb	r3, [r7, #7]
  4070ae:	e007      	b.n	4070c0 <_dma_init+0x1c>
		hri_xdmac_read_CIS_reg(XDMAC, i);
  4070b0:	79fb      	ldrb	r3, [r7, #7]
  4070b2:	4619      	mov	r1, r3
  4070b4:	4825      	ldr	r0, [pc, #148]	; (40714c <_dma_init+0xa8>)
  4070b6:	4b26      	ldr	r3, [pc, #152]	; (407150 <_dma_init+0xac>)
  4070b8:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4070ba:	79fb      	ldrb	r3, [r7, #7]
  4070bc:	3301      	adds	r3, #1
  4070be:	71fb      	strb	r3, [r7, #7]
  4070c0:	79fb      	ldrb	r3, [r7, #7]
  4070c2:	2b17      	cmp	r3, #23
  4070c4:	d9f4      	bls.n	4070b0 <_dma_init+0xc>
	}
	/* Configuration Registers */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4070c6:	2300      	movs	r3, #0
  4070c8:	71fb      	strb	r3, [r7, #7]
  4070ca:	e02d      	b.n	407128 <_dma_init+0x84>
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
  4070cc:	79fb      	ldrb	r3, [r7, #7]
  4070ce:	2200      	movs	r2, #0
  4070d0:	4619      	mov	r1, r3
  4070d2:	481e      	ldr	r0, [pc, #120]	; (40714c <_dma_init+0xa8>)
  4070d4:	4b1f      	ldr	r3, [pc, #124]	; (407154 <_dma_init+0xb0>)
  4070d6:	4798      	blx	r3
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
  4070d8:	79fb      	ldrb	r3, [r7, #7]
  4070da:	2200      	movs	r2, #0
  4070dc:	4619      	mov	r1, r3
  4070de:	481b      	ldr	r0, [pc, #108]	; (40714c <_dma_init+0xa8>)
  4070e0:	4b1d      	ldr	r3, [pc, #116]	; (407158 <_dma_init+0xb4>)
  4070e2:	4798      	blx	r3
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
  4070e4:	79fb      	ldrb	r3, [r7, #7]
  4070e6:	2200      	movs	r2, #0
  4070e8:	4619      	mov	r1, r3
  4070ea:	4818      	ldr	r0, [pc, #96]	; (40714c <_dma_init+0xa8>)
  4070ec:	4b1b      	ldr	r3, [pc, #108]	; (40715c <_dma_init+0xb8>)
  4070ee:	4798      	blx	r3
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
  4070f0:	79fb      	ldrb	r3, [r7, #7]
  4070f2:	2200      	movs	r2, #0
  4070f4:	4619      	mov	r1, r3
  4070f6:	4815      	ldr	r0, [pc, #84]	; (40714c <_dma_init+0xa8>)
  4070f8:	4b19      	ldr	r3, [pc, #100]	; (407160 <_dma_init+0xbc>)
  4070fa:	4798      	blx	r3
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  4070fc:	79fb      	ldrb	r3, [r7, #7]
  4070fe:	4a19      	ldr	r2, [pc, #100]	; (407164 <_dma_init+0xc0>)
  407100:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  407104:	79fb      	ldrb	r3, [r7, #7]
  407106:	4619      	mov	r1, r3
  407108:	4810      	ldr	r0, [pc, #64]	; (40714c <_dma_init+0xa8>)
  40710a:	4b17      	ldr	r3, [pc, #92]	; (407168 <_dma_init+0xc4>)
  40710c:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  40710e:	79fb      	ldrb	r3, [r7, #7]
  407110:	4a14      	ldr	r2, [pc, #80]	; (407164 <_dma_init+0xc0>)
  407112:	00db      	lsls	r3, r3, #3
  407114:	4413      	add	r3, r2
  407116:	685a      	ldr	r2, [r3, #4]
  407118:	79fb      	ldrb	r3, [r7, #7]
  40711a:	4619      	mov	r1, r3
  40711c:	480b      	ldr	r0, [pc, #44]	; (40714c <_dma_init+0xa8>)
  40711e:	4b13      	ldr	r3, [pc, #76]	; (40716c <_dma_init+0xc8>)
  407120:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  407122:	79fb      	ldrb	r3, [r7, #7]
  407124:	3301      	adds	r3, #1
  407126:	71fb      	strb	r3, [r7, #7]
  407128:	79fb      	ldrb	r3, [r7, #7]
  40712a:	2b17      	cmp	r3, #23
  40712c:	d9ce      	bls.n	4070cc <_dma_init+0x28>
	}

	NVIC_DisableIRQ(XDMAC_IRQn);
  40712e:	203a      	movs	r0, #58	; 0x3a
  407130:	4b0f      	ldr	r3, [pc, #60]	; (407170 <_dma_init+0xcc>)
  407132:	4798      	blx	r3
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
  407134:	203a      	movs	r0, #58	; 0x3a
  407136:	4b0f      	ldr	r3, [pc, #60]	; (407174 <_dma_init+0xd0>)
  407138:	4798      	blx	r3
	NVIC_EnableIRQ(XDMAC_IRQn);
  40713a:	203a      	movs	r0, #58	; 0x3a
  40713c:	4b0e      	ldr	r3, [pc, #56]	; (407178 <_dma_init+0xd4>)
  40713e:	4798      	blx	r3

	return ERR_NONE;
  407140:	2300      	movs	r3, #0
}
  407142:	4618      	mov	r0, r3
  407144:	3708      	adds	r7, #8
  407146:	46bd      	mov	sp, r7
  407148:	bd80      	pop	{r7, pc}
  40714a:	bf00      	nop
  40714c:	40078000 	.word	0x40078000
  407150:	00406d89 	.word	0x00406d89
  407154:	00406dfd 	.word	0x00406dfd
  407158:	00406e4d 	.word	0x00406e4d
  40715c:	00406fc9 	.word	0x00406fc9
  407160:	00406ff1 	.word	0x00406ff1
  407164:	00407718 	.word	0x00407718
  407168:	00406f2d 	.word	0x00406f2d
  40716c:	00406fa1 	.word	0x00406fa1
  407170:	00406cb9 	.word	0x00406cb9
  407174:	00406cfd 	.word	0x00406cfd
  407178:	00406c7d 	.word	0x00406c7d

0040717c <_dma_set_destination_address>:

int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
  40717c:	b580      	push	{r7, lr}
  40717e:	b082      	sub	sp, #8
  407180:	af00      	add	r7, sp, #0
  407182:	4603      	mov	r3, r0
  407184:	6039      	str	r1, [r7, #0]
  407186:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);
  407188:	683a      	ldr	r2, [r7, #0]
  40718a:	79fb      	ldrb	r3, [r7, #7]
  40718c:	4619      	mov	r1, r3
  40718e:	4804      	ldr	r0, [pc, #16]	; (4071a0 <_dma_set_destination_address+0x24>)
  407190:	4b04      	ldr	r3, [pc, #16]	; (4071a4 <_dma_set_destination_address+0x28>)
  407192:	4798      	blx	r3

	return ERR_NONE;
  407194:	2300      	movs	r3, #0
}
  407196:	4618      	mov	r0, r3
  407198:	3708      	adds	r7, #8
  40719a:	46bd      	mov	sp, r7
  40719c:	bd80      	pop	{r7, pc}
  40719e:	bf00      	nop
  4071a0:	40078000 	.word	0x40078000
  4071a4:	00406dd5 	.word	0x00406dd5

004071a8 <_dma_set_source_address>:

int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
  4071a8:	b580      	push	{r7, lr}
  4071aa:	b082      	sub	sp, #8
  4071ac:	af00      	add	r7, sp, #0
  4071ae:	4603      	mov	r3, r0
  4071b0:	6039      	str	r1, [r7, #0]
  4071b2:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);
  4071b4:	683a      	ldr	r2, [r7, #0]
  4071b6:	79fb      	ldrb	r3, [r7, #7]
  4071b8:	4619      	mov	r1, r3
  4071ba:	4804      	ldr	r0, [pc, #16]	; (4071cc <_dma_set_source_address+0x24>)
  4071bc:	4b04      	ldr	r3, [pc, #16]	; (4071d0 <_dma_set_source_address+0x28>)
  4071be:	4798      	blx	r3

	return ERR_NONE;
  4071c0:	2300      	movs	r3, #0
}
  4071c2:	4618      	mov	r0, r3
  4071c4:	3708      	adds	r7, #8
  4071c6:	46bd      	mov	sp, r7
  4071c8:	bd80      	pop	{r7, pc}
  4071ca:	bf00      	nop
  4071cc:	40078000 	.word	0x40078000
  4071d0:	00406dad 	.word	0x00406dad

004071d4 <_dma_srcinc_enable>:

int32_t _dma_srcinc_enable(const uint8_t channel, const bool enable)
{
  4071d4:	b580      	push	{r7, lr}
  4071d6:	b082      	sub	sp, #8
  4071d8:	af00      	add	r7, sp, #0
  4071da:	4603      	mov	r3, r0
  4071dc:	460a      	mov	r2, r1
  4071de:	71fb      	strb	r3, [r7, #7]
  4071e0:	4613      	mov	r3, r2
  4071e2:	71bb      	strb	r3, [r7, #6]
	if (!enable && (hri_xdmac_read_CC_DWIDTH_bf(XDMAC, channel) != XDMAC_CC_DWIDTH_WORD_Val)) {
  4071e4:	79bb      	ldrb	r3, [r7, #6]
  4071e6:	f083 0301 	eor.w	r3, r3, #1
  4071ea:	b2db      	uxtb	r3, r3
  4071ec:	2b00      	cmp	r3, #0
  4071ee:	d015      	beq.n	40721c <_dma_srcinc_enable+0x48>
  4071f0:	79fb      	ldrb	r3, [r7, #7]
  4071f2:	4619      	mov	r1, r3
  4071f4:	480f      	ldr	r0, [pc, #60]	; (407234 <_dma_srcinc_enable+0x60>)
  4071f6:	4b10      	ldr	r3, [pc, #64]	; (407238 <_dma_srcinc_enable+0x64>)
  4071f8:	4798      	blx	r3
  4071fa:	4603      	mov	r3, r0
  4071fc:	2b02      	cmp	r3, #2
  4071fe:	d00d      	beq.n	40721c <_dma_srcinc_enable+0x48>
		 * are incremented by 8-bit or 16-bit.
		 * Workaround: The user can fix the problem by setting the source addressing
		 * mode to use micro block and data striding with micro block stride set to 0 and
		 * data stride set to -1.
		 */
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, XDMAC_CC_SAM_UBS_DS_AM_Val);
  407200:	79fb      	ldrb	r3, [r7, #7]
  407202:	2203      	movs	r2, #3
  407204:	4619      	mov	r1, r3
  407206:	480b      	ldr	r0, [pc, #44]	; (407234 <_dma_srcinc_enable+0x60>)
  407208:	4b0c      	ldr	r3, [pc, #48]	; (40723c <_dma_srcinc_enable+0x68>)
  40720a:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_SDS_MSP_bf(XDMAC, channel, (int16_t)(-1));
  40720c:	79fb      	ldrb	r3, [r7, #7]
  40720e:	f04f 32ff 	mov.w	r2, #4294967295
  407212:	4619      	mov	r1, r3
  407214:	4807      	ldr	r0, [pc, #28]	; (407234 <_dma_srcinc_enable+0x60>)
  407216:	4b0a      	ldr	r3, [pc, #40]	; (407240 <_dma_srcinc_enable+0x6c>)
  407218:	4798      	blx	r3
  40721a:	e005      	b.n	407228 <_dma_srcinc_enable+0x54>
	} else {
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, enable);
  40721c:	79ba      	ldrb	r2, [r7, #6]
  40721e:	79fb      	ldrb	r3, [r7, #7]
  407220:	4619      	mov	r1, r3
  407222:	4804      	ldr	r0, [pc, #16]	; (407234 <_dma_srcinc_enable+0x60>)
  407224:	4b05      	ldr	r3, [pc, #20]	; (40723c <_dma_srcinc_enable+0x68>)
  407226:	4798      	blx	r3
	}

	return ERR_NONE;
  407228:	2300      	movs	r3, #0
}
  40722a:	4618      	mov	r0, r3
  40722c:	3708      	adds	r7, #8
  40722e:	46bd      	mov	sp, r7
  407230:	bd80      	pop	{r7, pc}
  407232:	bf00      	nop
  407234:	40078000 	.word	0x40078000
  407238:	00406eaf 	.word	0x00406eaf
  40723c:	00406ee1 	.word	0x00406ee1
  407240:	00406f55 	.word	0x00406f55

00407244 <_dma_set_data_amount>:

	return ERR_NONE;
}

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
  407244:	b580      	push	{r7, lr}
  407246:	b084      	sub	sp, #16
  407248:	af00      	add	r7, sp, #0
  40724a:	4603      	mov	r3, r0
  40724c:	6039      	str	r1, [r7, #0]
  40724e:	71fb      	strb	r3, [r7, #7]
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
  407250:	79fb      	ldrb	r3, [r7, #7]
  407252:	2203      	movs	r2, #3
  407254:	4619      	mov	r1, r3
  407256:	4809      	ldr	r0, [pc, #36]	; (40727c <_dma_set_data_amount+0x38>)
  407258:	4b09      	ldr	r3, [pc, #36]	; (407280 <_dma_set_data_amount+0x3c>)
  40725a:	4798      	blx	r3
  40725c:	4603      	mov	r3, r0
  40725e:	73fb      	strb	r3, [r7, #15]
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  407260:	7bfb      	ldrb	r3, [r7, #15]
  407262:	683a      	ldr	r2, [r7, #0]
  407264:	40da      	lsrs	r2, r3
  407266:	79fb      	ldrb	r3, [r7, #7]
  407268:	4619      	mov	r1, r3
  40726a:	4804      	ldr	r0, [pc, #16]	; (40727c <_dma_set_data_amount+0x38>)
  40726c:	4b05      	ldr	r3, [pc, #20]	; (407284 <_dma_set_data_amount+0x40>)
  40726e:	4798      	blx	r3

	return ERR_NONE;
  407270:	2300      	movs	r3, #0
}
  407272:	4618      	mov	r0, r3
  407274:	3710      	adds	r7, #16
  407276:	46bd      	mov	sp, r7
  407278:	bd80      	pop	{r7, pc}
  40727a:	bf00      	nop
  40727c:	40078000 	.word	0x40078000
  407280:	00406e75 	.word	0x00406e75
  407284:	00406e25 	.word	0x00406e25

00407288 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
  407288:	b580      	push	{r7, lr}
  40728a:	b082      	sub	sp, #8
  40728c:	af00      	add	r7, sp, #0
  40728e:	4603      	mov	r3, r0
  407290:	460a      	mov	r2, r1
  407292:	71fb      	strb	r3, [r7, #7]
  407294:	4613      	mov	r3, r2
  407296:	71bb      	strb	r3, [r7, #6]
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  407298:	79fb      	ldrb	r3, [r7, #7]
  40729a:	2201      	movs	r2, #1
  40729c:	fa02 f303 	lsl.w	r3, r2, r3
  4072a0:	4619      	mov	r1, r3
  4072a2:	4809      	ldr	r0, [pc, #36]	; (4072c8 <_dma_enable_transaction+0x40>)
  4072a4:	4b09      	ldr	r3, [pc, #36]	; (4072cc <_dma_enable_transaction+0x44>)
  4072a6:	4798      	blx	r3

	if (software_trigger) {
  4072a8:	79bb      	ldrb	r3, [r7, #6]
  4072aa:	2b00      	cmp	r3, #0
  4072ac:	d007      	beq.n	4072be <_dma_enable_transaction+0x36>
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
  4072ae:	79fb      	ldrb	r3, [r7, #7]
  4072b0:	2201      	movs	r2, #1
  4072b2:	fa02 f303 	lsl.w	r3, r2, r3
  4072b6:	4619      	mov	r1, r3
  4072b8:	4803      	ldr	r0, [pc, #12]	; (4072c8 <_dma_enable_transaction+0x40>)
  4072ba:	4b05      	ldr	r3, [pc, #20]	; (4072d0 <_dma_enable_transaction+0x48>)
  4072bc:	4798      	blx	r3
	}

	return ERR_NONE;
  4072be:	2300      	movs	r3, #0
}
  4072c0:	4618      	mov	r0, r3
  4072c2:	3708      	adds	r7, #8
  4072c4:	46bd      	mov	sp, r7
  4072c6:	bd80      	pop	{r7, pc}
  4072c8:	40078000 	.word	0x40078000
  4072cc:	00407053 	.word	0x00407053
  4072d0:	00407087 	.word	0x00407087

004072d4 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
  4072d4:	b480      	push	{r7}
  4072d6:	b083      	sub	sp, #12
  4072d8:	af00      	add	r7, sp, #0
  4072da:	6078      	str	r0, [r7, #4]
  4072dc:	460b      	mov	r3, r1
  4072de:	70fb      	strb	r3, [r7, #3]
	*resource = &_resources[channel];
  4072e0:	78fa      	ldrb	r2, [r7, #3]
  4072e2:	4613      	mov	r3, r2
  4072e4:	005b      	lsls	r3, r3, #1
  4072e6:	4413      	add	r3, r2
  4072e8:	009b      	lsls	r3, r3, #2
  4072ea:	4a05      	ldr	r2, [pc, #20]	; (407300 <_dma_get_channel_resource+0x2c>)
  4072ec:	441a      	add	r2, r3
  4072ee:	687b      	ldr	r3, [r7, #4]
  4072f0:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  4072f2:	2300      	movs	r3, #0
}
  4072f4:	4618      	mov	r0, r3
  4072f6:	370c      	adds	r7, #12
  4072f8:	46bd      	mov	sp, r7
  4072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072fe:	4770      	bx	lr
  407300:	2040122c 	.word	0x2040122c

00407304 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
  407304:	b580      	push	{r7, lr}
  407306:	b082      	sub	sp, #8
  407308:	af00      	add	r7, sp, #0
  40730a:	4603      	mov	r3, r0
  40730c:	71fb      	strb	r3, [r7, #7]
  40730e:	460b      	mov	r3, r1
  407310:	71bb      	strb	r3, [r7, #6]
  407312:	4613      	mov	r3, r2
  407314:	717b      	strb	r3, [r7, #5]
	if (state) {
  407316:	797b      	ldrb	r3, [r7, #5]
  407318:	2b00      	cmp	r3, #0
  40731a:	d01b      	beq.n	407354 <_dma_set_irq_state+0x50>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40731c:	79bb      	ldrb	r3, [r7, #6]
  40731e:	2b00      	cmp	r3, #0
  407320:	d106      	bne.n	407330 <_dma_set_irq_state+0x2c>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
  407322:	79fb      	ldrb	r3, [r7, #7]
  407324:	2201      	movs	r2, #1
  407326:	4619      	mov	r1, r3
  407328:	481a      	ldr	r0, [pc, #104]	; (407394 <_dma_set_irq_state+0x90>)
  40732a:	4b1b      	ldr	r3, [pc, #108]	; (407398 <_dma_set_irq_state+0x94>)
  40732c:	4798      	blx	r3
  40732e:	e008      	b.n	407342 <_dma_set_irq_state+0x3e>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  407330:	79bb      	ldrb	r3, [r7, #6]
  407332:	2b01      	cmp	r3, #1
  407334:	d105      	bne.n	407342 <_dma_set_irq_state+0x3e>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
  407336:	79fb      	ldrb	r3, [r7, #7]
  407338:	2270      	movs	r2, #112	; 0x70
  40733a:	4619      	mov	r1, r3
  40733c:	4815      	ldr	r0, [pc, #84]	; (407394 <_dma_set_irq_state+0x90>)
  40733e:	4b16      	ldr	r3, [pc, #88]	; (407398 <_dma_set_irq_state+0x94>)
  407340:	4798      	blx	r3
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  407342:	79fb      	ldrb	r3, [r7, #7]
  407344:	2201      	movs	r2, #1
  407346:	fa02 f303 	lsl.w	r3, r2, r3
  40734a:	4619      	mov	r1, r3
  40734c:	4811      	ldr	r0, [pc, #68]	; (407394 <_dma_set_irq_state+0x90>)
  40734e:	4b13      	ldr	r3, [pc, #76]	; (40739c <_dma_set_irq_state+0x98>)
  407350:	4798      	blx	r3
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
	}
}
  407352:	e01a      	b.n	40738a <_dma_set_irq_state+0x86>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  407354:	79bb      	ldrb	r3, [r7, #6]
  407356:	2b00      	cmp	r3, #0
  407358:	d106      	bne.n	407368 <_dma_set_irq_state+0x64>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
  40735a:	79fb      	ldrb	r3, [r7, #7]
  40735c:	2201      	movs	r2, #1
  40735e:	4619      	mov	r1, r3
  407360:	480c      	ldr	r0, [pc, #48]	; (407394 <_dma_set_irq_state+0x90>)
  407362:	4b0f      	ldr	r3, [pc, #60]	; (4073a0 <_dma_set_irq_state+0x9c>)
  407364:	4798      	blx	r3
  407366:	e008      	b.n	40737a <_dma_set_irq_state+0x76>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  407368:	79bb      	ldrb	r3, [r7, #6]
  40736a:	2b01      	cmp	r3, #1
  40736c:	d105      	bne.n	40737a <_dma_set_irq_state+0x76>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
  40736e:	79fb      	ldrb	r3, [r7, #7]
  407370:	2270      	movs	r2, #112	; 0x70
  407372:	4619      	mov	r1, r3
  407374:	4807      	ldr	r0, [pc, #28]	; (407394 <_dma_set_irq_state+0x90>)
  407376:	4b0a      	ldr	r3, [pc, #40]	; (4073a0 <_dma_set_irq_state+0x9c>)
  407378:	4798      	blx	r3
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  40737a:	79fb      	ldrb	r3, [r7, #7]
  40737c:	2201      	movs	r2, #1
  40737e:	fa02 f303 	lsl.w	r3, r2, r3
  407382:	4619      	mov	r1, r3
  407384:	4803      	ldr	r0, [pc, #12]	; (407394 <_dma_set_irq_state+0x90>)
  407386:	4b07      	ldr	r3, [pc, #28]	; (4073a4 <_dma_set_irq_state+0xa0>)
  407388:	4798      	blx	r3
}
  40738a:	bf00      	nop
  40738c:	3708      	adds	r7, #8
  40738e:	46bd      	mov	sp, r7
  407390:	bd80      	pop	{r7, pc}
  407392:	bf00      	nop
  407394:	40078000 	.word	0x40078000
  407398:	00406d39 	.word	0x00406d39
  40739c:	0040701b 	.word	0x0040701b
  4073a0:	00406d61 	.word	0x00406d61
  4073a4:	00407037 	.word	0x00407037

004073a8 <XDMAC_Handler>:

/**
 * \internal XDMAC interrupt handler
 */
void XDMAC_Handler(void)
{
  4073a8:	b580      	push	{r7, lr}
  4073aa:	b084      	sub	sp, #16
  4073ac:	af00      	add	r7, sp, #0
	uint32_t              status;
	struct _dma_resource *tmp_resource;
	int8_t                channel = -1;
  4073ae:	23ff      	movs	r3, #255	; 0xff
  4073b0:	73fb      	strb	r3, [r7, #15]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);
  4073b2:	4821      	ldr	r0, [pc, #132]	; (407438 <XDMAC_Handler+0x90>)
  4073b4:	4b21      	ldr	r3, [pc, #132]	; (40743c <XDMAC_Handler+0x94>)
  4073b6:	4798      	blx	r3
  4073b8:	60b8      	str	r0, [r7, #8]

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4073ba:	2300      	movs	r3, #0
  4073bc:	73bb      	strb	r3, [r7, #14]
  4073be:	e00d      	b.n	4073dc <XDMAC_Handler+0x34>
		if ((pend >> i) & 1) {
  4073c0:	7bbb      	ldrb	r3, [r7, #14]
  4073c2:	68ba      	ldr	r2, [r7, #8]
  4073c4:	fa22 f303 	lsr.w	r3, r2, r3
  4073c8:	f003 0301 	and.w	r3, r3, #1
  4073cc:	2b00      	cmp	r3, #0
  4073ce:	d002      	beq.n	4073d6 <XDMAC_Handler+0x2e>
			channel = i;
  4073d0:	7bbb      	ldrb	r3, [r7, #14]
  4073d2:	73fb      	strb	r3, [r7, #15]
			break;
  4073d4:	e005      	b.n	4073e2 <XDMAC_Handler+0x3a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4073d6:	7bbb      	ldrb	r3, [r7, #14]
  4073d8:	3301      	adds	r3, #1
  4073da:	73bb      	strb	r3, [r7, #14]
  4073dc:	7bbb      	ldrb	r3, [r7, #14]
  4073de:	2b17      	cmp	r3, #23
  4073e0:	d9ee      	bls.n	4073c0 <XDMAC_Handler+0x18>
		}
	}

	if (channel < 0) {
  4073e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4073e6:	2b00      	cmp	r3, #0
  4073e8:	db22      	blt.n	407430 <XDMAC_Handler+0x88>
		return;
	}

	tmp_resource = &_resources[channel];
  4073ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4073ee:	4613      	mov	r3, r2
  4073f0:	005b      	lsls	r3, r3, #1
  4073f2:	4413      	add	r3, r2
  4073f4:	009b      	lsls	r3, r3, #2
  4073f6:	4a12      	ldr	r2, [pc, #72]	; (407440 <XDMAC_Handler+0x98>)
  4073f8:	4413      	add	r3, r2
  4073fa:	607b      	str	r3, [r7, #4]
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  4073fc:	7bfb      	ldrb	r3, [r7, #15]
  4073fe:	4619      	mov	r1, r3
  407400:	480d      	ldr	r0, [pc, #52]	; (407438 <XDMAC_Handler+0x90>)
  407402:	4b10      	ldr	r3, [pc, #64]	; (407444 <XDMAC_Handler+0x9c>)
  407404:	4798      	blx	r3
  407406:	6038      	str	r0, [r7, #0]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  407408:	683b      	ldr	r3, [r7, #0]
  40740a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40740e:	2b00      	cmp	r3, #0
  407410:	d004      	beq.n	40741c <XDMAC_Handler+0x74>
		tmp_resource->dma_cb.error(tmp_resource);
  407412:	687b      	ldr	r3, [r7, #4]
  407414:	685b      	ldr	r3, [r3, #4]
  407416:	6878      	ldr	r0, [r7, #4]
  407418:	4798      	blx	r3
  40741a:	e00a      	b.n	407432 <XDMAC_Handler+0x8a>
	} else if (status & XDMAC_CIS_BIS) {
  40741c:	683b      	ldr	r3, [r7, #0]
  40741e:	f003 0301 	and.w	r3, r3, #1
  407422:	2b00      	cmp	r3, #0
  407424:	d005      	beq.n	407432 <XDMAC_Handler+0x8a>
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  407426:	687b      	ldr	r3, [r7, #4]
  407428:	681b      	ldr	r3, [r3, #0]
  40742a:	6878      	ldr	r0, [r7, #4]
  40742c:	4798      	blx	r3
  40742e:	e000      	b.n	407432 <XDMAC_Handler+0x8a>
		return;
  407430:	bf00      	nop
	}
}
  407432:	3710      	adds	r7, #16
  407434:	46bd      	mov	sp, r7
  407436:	bd80      	pop	{r7, pc}
  407438:	40078000 	.word	0x40078000
  40743c:	0040706f 	.word	0x0040706f
  407440:	2040122c 	.word	0x2040122c
  407444:	00406d89 	.word	0x00406d89

00407448 <main>:
#include "AT86_Impl.h"

uint8_t started = 0;

int main(void)
{
  407448:	b580      	push	{r7, lr}
  40744a:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40744c:	4b0a      	ldr	r3, [pc, #40]	; (407478 <main+0x30>)
  40744e:	4798      	blx	r3
		SCB_EnableICache();
		SCB_EnableDCache();
	}
	*/

	glue_set_peripherals_inited();
  407450:	4b0a      	ldr	r3, [pc, #40]	; (40747c <main+0x34>)
  407452:	4798      	blx	r3
	
	glue_enforce_driver_init();	
  407454:	4b0a      	ldr	r3, [pc, #40]	; (407480 <main+0x38>)
  407456:	4798      	blx	r3
	
	glue_init();
  407458:	4b0a      	ldr	r3, [pc, #40]	; (407484 <main+0x3c>)
  40745a:	4798      	blx	r3
	
	delay_ms(100);
  40745c:	2064      	movs	r0, #100	; 0x64
  40745e:	4b0a      	ldr	r3, [pc, #40]	; (407488 <main+0x40>)
  407460:	4798      	blx	r3
	
	/* Replace with your application code */
	while (1)
	{
		AT86_Tick(AT86_INSTANCE0);
  407462:	2000      	movs	r0, #0
  407464:	4b09      	ldr	r3, [pc, #36]	; (40748c <main+0x44>)
  407466:	4798      	blx	r3
		AT86_Tick(AT86_INSTANCE1);
  407468:	2001      	movs	r0, #1
  40746a:	4b08      	ldr	r3, [pc, #32]	; (40748c <main+0x44>)
  40746c:	4798      	blx	r3

		//gpio_set_pin_pull_mode(PB0, GPIO_PULL_UP);
		delay_ms(10);
  40746e:	200a      	movs	r0, #10
  407470:	4b05      	ldr	r3, [pc, #20]	; (407488 <main+0x40>)
  407472:	4798      	blx	r3
		AT86_Tick(AT86_INSTANCE0);
  407474:	e7f5      	b.n	407462 <main+0x1a>
  407476:	bf00      	nop
  407478:	00400add 	.word	0x00400add
  40747c:	004019ad 	.word	0x004019ad
  407480:	004019c5 	.word	0x004019c5
  407484:	00401835 	.word	0x00401835
  407488:	00401e01 	.word	0x00401e01
  40748c:	004002ed 	.word	0x004002ed

00407490 <__libc_init_array>:
  407490:	b570      	push	{r4, r5, r6, lr}
  407492:	4e0d      	ldr	r6, [pc, #52]	; (4074c8 <__libc_init_array+0x38>)
  407494:	4c0d      	ldr	r4, [pc, #52]	; (4074cc <__libc_init_array+0x3c>)
  407496:	1ba4      	subs	r4, r4, r6
  407498:	10a4      	asrs	r4, r4, #2
  40749a:	2500      	movs	r5, #0
  40749c:	42a5      	cmp	r5, r4
  40749e:	d109      	bne.n	4074b4 <__libc_init_array+0x24>
  4074a0:	4e0b      	ldr	r6, [pc, #44]	; (4074d0 <__libc_init_array+0x40>)
  4074a2:	4c0c      	ldr	r4, [pc, #48]	; (4074d4 <__libc_init_array+0x44>)
  4074a4:	f000 f998 	bl	4077d8 <_init>
  4074a8:	1ba4      	subs	r4, r4, r6
  4074aa:	10a4      	asrs	r4, r4, #2
  4074ac:	2500      	movs	r5, #0
  4074ae:	42a5      	cmp	r5, r4
  4074b0:	d105      	bne.n	4074be <__libc_init_array+0x2e>
  4074b2:	bd70      	pop	{r4, r5, r6, pc}
  4074b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4074b8:	4798      	blx	r3
  4074ba:	3501      	adds	r5, #1
  4074bc:	e7ee      	b.n	40749c <__libc_init_array+0xc>
  4074be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4074c2:	4798      	blx	r3
  4074c4:	3501      	adds	r5, #1
  4074c6:	e7f2      	b.n	4074ae <__libc_init_array+0x1e>
  4074c8:	004077e4 	.word	0x004077e4
  4074cc:	004077e4 	.word	0x004077e4
  4074d0:	004077e4 	.word	0x004077e4
  4074d4:	004077e8 	.word	0x004077e8

004074d8 <memcpy>:
  4074d8:	b510      	push	{r4, lr}
  4074da:	1e43      	subs	r3, r0, #1
  4074dc:	440a      	add	r2, r1
  4074de:	4291      	cmp	r1, r2
  4074e0:	d100      	bne.n	4074e4 <memcpy+0xc>
  4074e2:	bd10      	pop	{r4, pc}
  4074e4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4074e8:	f803 4f01 	strb.w	r4, [r3, #1]!
  4074ec:	e7f7      	b.n	4074de <memcpy+0x6>

004074ee <memset>:
  4074ee:	4402      	add	r2, r0
  4074f0:	4603      	mov	r3, r0
  4074f2:	4293      	cmp	r3, r2
  4074f4:	d100      	bne.n	4074f8 <memset+0xa>
  4074f6:	4770      	bx	lr
  4074f8:	f803 1b01 	strb.w	r1, [r3], #1
  4074fc:	e7f9      	b.n	4074f2 <memset+0x4>
  4074fe:	0000      	movs	r0, r0
  407500:	682f2e2e 	.word	0x682f2e2e
  407504:	702f6c70 	.word	0x702f6c70
  407508:	682f6f69 	.word	0x682f6f69
  40750c:	675f6c70 	.word	0x675f6c70
  407510:	5f6f6970 	.word	0x5f6f6970
  407514:	65736162 	.word	0x65736162
  407518:	0000682e 	.word	0x0000682e
  40751c:	682f2e2e 	.word	0x682f2e2e
  407520:	732f6c61 	.word	0x732f6c61
  407524:	682f6372 	.word	0x682f6372
  407528:	645f6c61 	.word	0x645f6c61
  40752c:	735f6361 	.word	0x735f6361
  407530:	2e636e79 	.word	0x2e636e79
  407534:	00000063 	.word	0x00000063
  407538:	682f2e2e 	.word	0x682f2e2e
  40753c:	732f6c61 	.word	0x732f6c61
  407540:	682f6372 	.word	0x682f6372
  407544:	695f6c61 	.word	0x695f6c61
  407548:	6d5f6332 	.word	0x6d5f6332
  40754c:	6e79735f 	.word	0x6e79735f
  407550:	00632e63 	.word	0x00632e63
  407554:	682f2e2e 	.word	0x682f2e2e
  407558:	732f6c61 	.word	0x732f6c61
  40755c:	682f6372 	.word	0x682f6372
  407560:	735f6c61 	.word	0x735f6c61
  407564:	6d5f6970 	.word	0x6d5f6970
  407568:	616d645f 	.word	0x616d645f
  40756c:	0000632e 	.word	0x0000632e
  407570:	682f2e2e 	.word	0x682f2e2e
  407574:	732f6c61 	.word	0x732f6c61
  407578:	682f6372 	.word	0x682f6372
  40757c:	755f6c61 	.word	0x755f6c61
  407580:	74726173 	.word	0x74726173
  407584:	7973615f 	.word	0x7973615f
  407588:	632e636e 	.word	0x632e636e
  40758c:	00000000 	.word	0x00000000
  407590:	682f2e2e 	.word	0x682f2e2e
  407594:	732f6c61 	.word	0x732f6c61
  407598:	682f6372 	.word	0x682f6372
  40759c:	755f6c61 	.word	0x755f6c61
  4075a0:	74726173 	.word	0x74726173
  4075a4:	6e79735f 	.word	0x6e79735f
  4075a8:	00632e63 	.word	0x00632e63
  4075ac:	682f2e2e 	.word	0x682f2e2e
  4075b0:	752f6c61 	.word	0x752f6c61
  4075b4:	736c6974 	.word	0x736c6974
  4075b8:	6372732f 	.word	0x6372732f
  4075bc:	6974752f 	.word	0x6974752f
  4075c0:	725f736c 	.word	0x725f736c
  4075c4:	62676e69 	.word	0x62676e69
  4075c8:	65666675 	.word	0x65666675
  4075cc:	00632e72 	.word	0x00632e72
  4075d0:	682f2e2e 	.word	0x682f2e2e
  4075d4:	642f6c70 	.word	0x642f6c70
  4075d8:	682f6361 	.word	0x682f6361
  4075dc:	645f6c70 	.word	0x645f6c70
  4075e0:	632e6361 	.word	0x632e6361
  4075e4:	00000000 	.word	0x00000000

004075e8 <_pio_irq_n>:
  4075e8:	100c0b0a 00000011                       ........

004075f0 <_ext_irq>:
  4075f0:	00000001 00000001 00000001 00000001     ................
  407600:	00000000 00000001 00000000 00000003     ................
  407610:	00800000 00800000 00800000 00000000     ................
  407620:	00800000 00000000 682f2e2e 702f6c70     ........../hpl/p
  407630:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  407640:	00000000                                ....

00407644 <spi_regs>:
  407644:	00000000 80000000 00000001 04960c02     ................
  407654:	0000ffff 00000001 80000000 00000001     ................
  407664:	04960c02 0000ffff 682f2e2e 732f6c70     ........../hpl/s
  407674:	682f6970 735f6c70 632e6970 00000000     pi/hpl_spi.c....

00407684 <_i2cm_sync_cfgs>:
  407684:	40018000 00000020 00000000 00000000     ...@ ...........
  407694:	0002baba 000249f0 4001c000 00000020     .....I.....@ ...
	...
  4076ac:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  4076bc:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  4076cc:	00000000 682f2e2e 752f6c70 2f747261     ....../hpl/uart/
  4076dc:	5f6c7068 74726175 0000632e 00001000     hpl_uart.c......
  4076ec:	00000c00 00000000 00000000 00000201     ................
  4076fc:	682f2e2e 752f6c70 73686273 6c70682f     ../hpl/usbhs/hpl
  40770c:	6273755f 632e7368 00000000              _usbhs.c....

00407718 <_cfgs>:
  407718:	030d4011 ffff0000 04072001 0000ffff     .@....... ......
  407728:	010d4011 ffff0000 02072001 0000ffff     .@....... ......
  407738:	00000040 00000000 00000040 00000000     @.......@.......
  407748:	00000040 00000000 00000040 00000000     @.......@.......
  407758:	00000040 00000000 00000040 00000000     @.......@.......
  407768:	00000040 00000000 00000040 00000000     @.......@.......
  407778:	00000040 00000000 00000040 00000000     @.......@.......
  407788:	00000040 00000000 00000040 00000000     @.......@.......
  407798:	00000040 00000000 00000040 00000000     @.......@.......
  4077a8:	00000040 00000000 00000040 00000000     @.......@.......
  4077b8:	00000040 00000000 00000040 00000000     @.......@.......
  4077c8:	00000040 00000000 00000040 00000000     @.......@.......

004077d8 <_init>:
  4077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4077da:	bf00      	nop
  4077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4077de:	bc08      	pop	{r3}
  4077e0:	469e      	mov	lr, r3
  4077e2:	4770      	bx	lr

004077e4 <__init_array_start>:
  4077e4:	00400179 	.word	0x00400179

004077e8 <_fini>:
  4077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4077ea:	bf00      	nop
  4077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4077ee:	bc08      	pop	{r3}
  4077f0:	469e      	mov	lr, r3
  4077f2:	4770      	bx	lr

004077f4 <__fini_array_start>:
  4077f4:	00400155 	.word	0x00400155
