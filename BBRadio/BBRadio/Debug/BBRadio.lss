
BBRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009874  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000088  20400000  00409874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001934  20400088  004098fc  00020088  2**2
                  ALLOC
  3 .heap         00000204  204019bc  0040b230  00020088  2**0
                  ALLOC
  4 .stack        00000400  20401bc0  0040b434  00020088  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022eb9  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000424c  00000000  00000000  00042fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000100a9  00000000  00000000  00047214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001c78  00000000  00000000  000572bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001a90  00000000  00000000  00058f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00039a6f  00000000  00000000  0005a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001da43  00000000  00000000  00094434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001063fc  00000000  00000000  000b1e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00007774  00000000  00000000  001b8274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 1f 40 20 69 03 40 00 ed 03 40 00 ed 03 40 00     ..@ i.@...@...@.
  400010:	ed 03 40 00 ed 03 40 00 ed 03 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ed 03 40 00 ed 03 40 00 00 00 00 00 ed 03 40 00     ..@...@.......@.
  40003c:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  40004c:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  40005c:	ed 03 40 00 ed 03 40 00 00 00 00 00 ed 03 40 00     ..@...@.......@.
  40006c:	f1 34 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     .4@...@...@...@.
  40007c:	ed 03 40 00 e1 34 40 00 ed 03 40 00 ed 03 40 00     ..@..4@...@...@.
  40008c:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  40009c:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  4000ac:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  4000bc:	ed 03 40 00 ed 03 40 00 ed 03 40 00 31 68 40 00     ..@...@...@.1h@.
	...
  4000e0:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  4000f0:	ed 03 40 00 ed 03 40 00 e9 50 40 00 ed 03 40 00     ..@...@..P@...@.
  400100:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  400110:	ed 03 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	ed 03 40 00 ed 03 40 00 21 7c 40 00 ed 03 40 00     ..@...@.!|@...@.
  400130:	ed 03 40 00 ed 03 40 00 ed 03 40 00 ed 03 40 00     ..@...@...@...@.
  400140:	ed 03 40 00 ed 03 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400150:	ed 03 40 00                                         ..@.

00400154 <__do_global_dtors_aux>:
  400154:	b510      	push	{r4, lr}
  400156:	4c05      	ldr	r4, [pc, #20]	; (40016c <__do_global_dtors_aux+0x18>)
  400158:	7823      	ldrb	r3, [r4, #0]
  40015a:	b933      	cbnz	r3, 40016a <__do_global_dtors_aux+0x16>
  40015c:	4b04      	ldr	r3, [pc, #16]	; (400170 <__do_global_dtors_aux+0x1c>)
  40015e:	b113      	cbz	r3, 400166 <__do_global_dtors_aux+0x12>
  400160:	4804      	ldr	r0, [pc, #16]	; (400174 <__do_global_dtors_aux+0x20>)
  400162:	f3af 8000 	nop.w
  400166:	2301      	movs	r3, #1
  400168:	7023      	strb	r3, [r4, #0]
  40016a:	bd10      	pop	{r4, pc}
  40016c:	20400088 	.word	0x20400088
  400170:	00000000 	.word	0x00000000
  400174:	00409874 	.word	0x00409874

00400178 <frame_dummy>:
  400178:	4b0c      	ldr	r3, [pc, #48]	; (4001ac <frame_dummy+0x34>)
  40017a:	b143      	cbz	r3, 40018e <frame_dummy+0x16>
  40017c:	480c      	ldr	r0, [pc, #48]	; (4001b0 <frame_dummy+0x38>)
  40017e:	490d      	ldr	r1, [pc, #52]	; (4001b4 <frame_dummy+0x3c>)
  400180:	b510      	push	{r4, lr}
  400182:	f3af 8000 	nop.w
  400186:	480c      	ldr	r0, [pc, #48]	; (4001b8 <frame_dummy+0x40>)
  400188:	6803      	ldr	r3, [r0, #0]
  40018a:	b923      	cbnz	r3, 400196 <frame_dummy+0x1e>
  40018c:	bd10      	pop	{r4, pc}
  40018e:	480a      	ldr	r0, [pc, #40]	; (4001b8 <frame_dummy+0x40>)
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	b933      	cbnz	r3, 4001a2 <frame_dummy+0x2a>
  400194:	4770      	bx	lr
  400196:	4b09      	ldr	r3, [pc, #36]	; (4001bc <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f7      	beq.n	40018c <frame_dummy+0x14>
  40019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a0:	4718      	bx	r3
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <frame_dummy+0x44>)
  4001a4:	2b00      	cmp	r3, #0
  4001a6:	d0f5      	beq.n	400194 <frame_dummy+0x1c>
  4001a8:	4718      	bx	r3
  4001aa:	bf00      	nop
  4001ac:	00000000 	.word	0x00000000
  4001b0:	00409874 	.word	0x00409874
  4001b4:	2040008c 	.word	0x2040008c
  4001b8:	00409874 	.word	0x00409874
  4001bc:	00000000 	.word	0x00000000

004001c0 <AT86_Init>:
 * @pre All peripheral devices must be initialized before this function runs.
 *
 * @return     returns at86_return_codes enum values
 */
uint8_t AT86_Init(SpiDevice *spi_dev, IRQDevice *irq_dev, uint8_t atDev)
{
  4001c0:	b480      	push	{r7}
  4001c2:	b087      	sub	sp, #28
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	60f8      	str	r0, [r7, #12]
  4001c8:	60b9      	str	r1, [r7, #8]
  4001ca:	4613      	mov	r3, r2
  4001cc:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *at = &Instance[atDev];
  4001ce:	79fa      	ldrb	r2, [r7, #7]
  4001d0:	4613      	mov	r3, r2
  4001d2:	005b      	lsls	r3, r3, #1
  4001d4:	4413      	add	r3, r2
  4001d6:	011b      	lsls	r3, r3, #4
  4001d8:	4a49      	ldr	r2, [pc, #292]	; (400300 <AT86_Init+0x140>)
  4001da:	4413      	add	r3, r2
  4001dc:	613b      	str	r3, [r7, #16]
	
	if (spi_dev == NULL || irq_dev == NULL)
  4001de:	68fb      	ldr	r3, [r7, #12]
  4001e0:	2b00      	cmp	r3, #0
  4001e2:	d002      	beq.n	4001ea <AT86_Init+0x2a>
  4001e4:	68bb      	ldr	r3, [r7, #8]
  4001e6:	2b00      	cmp	r3, #0
  4001e8:	d101      	bne.n	4001ee <AT86_Init+0x2e>
	{
		return AT86_ERROR;
  4001ea:	2302      	movs	r3, #2
  4001ec:	e081      	b.n	4002f2 <AT86_Init+0x132>
	}

	if (currentInstances == MAX_AT86_INSTANCES)
  4001ee:	4b45      	ldr	r3, [pc, #276]	; (400304 <AT86_Init+0x144>)
  4001f0:	781b      	ldrb	r3, [r3, #0]
  4001f2:	2b03      	cmp	r3, #3
  4001f4:	d101      	bne.n	4001fa <AT86_Init+0x3a>
	{
		return AT86_ERROR;
  4001f6:	2302      	movs	r3, #2
  4001f8:	e07b      	b.n	4002f2 <AT86_Init+0x132>
	}

	if (at->initialized == 1)
  4001fa:	693b      	ldr	r3, [r7, #16]
  4001fc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
  400200:	2b01      	cmp	r3, #1
  400202:	d101      	bne.n	400208 <AT86_Init+0x48>
	{
		return AT86_ERROR;
  400204:	2302      	movs	r3, #2
  400206:	e074      	b.n	4002f2 <AT86_Init+0x132>
	}

	// Each AT86 must have its own SPI/IRQ handlers, no doubling up.
	if (currentInstances != 0)
  400208:	4b3e      	ldr	r3, [pc, #248]	; (400304 <AT86_Init+0x144>)
  40020a:	781b      	ldrb	r3, [r3, #0]
  40020c:	2b00      	cmp	r3, #0
  40020e:	d025      	beq.n	40025c <AT86_Init+0x9c>
	{
		uint8_t i;
		for (i = 0; i < currentInstances; i++)
  400210:	2300      	movs	r3, #0
  400212:	75fb      	strb	r3, [r7, #23]
  400214:	e01d      	b.n	400252 <AT86_Init+0x92>
		{
			if ((IRQDevice *) &(Instance[i].irqDev) == irq_dev)
  400216:	7dfa      	ldrb	r2, [r7, #23]
  400218:	4613      	mov	r3, r2
  40021a:	005b      	lsls	r3, r3, #1
  40021c:	4413      	add	r3, r2
  40021e:	011b      	lsls	r3, r3, #4
  400220:	3328      	adds	r3, #40	; 0x28
  400222:	4a37      	ldr	r2, [pc, #220]	; (400300 <AT86_Init+0x140>)
  400224:	441a      	add	r2, r3
  400226:	68bb      	ldr	r3, [r7, #8]
  400228:	429a      	cmp	r2, r3
  40022a:	d101      	bne.n	400230 <AT86_Init+0x70>
			{
				return AT86_ERROR;
  40022c:	2302      	movs	r3, #2
  40022e:	e060      	b.n	4002f2 <AT86_Init+0x132>
			}

			if ((SpiDevice *) &(Instance[i].spiDev) == spi_dev)
  400230:	7dfa      	ldrb	r2, [r7, #23]
  400232:	4613      	mov	r3, r2
  400234:	005b      	lsls	r3, r3, #1
  400236:	4413      	add	r3, r2
  400238:	011b      	lsls	r3, r3, #4
  40023a:	3320      	adds	r3, #32
  40023c:	4a30      	ldr	r2, [pc, #192]	; (400300 <AT86_Init+0x140>)
  40023e:	4413      	add	r3, r2
  400240:	1d1a      	adds	r2, r3, #4
  400242:	68fb      	ldr	r3, [r7, #12]
  400244:	429a      	cmp	r2, r3
  400246:	d101      	bne.n	40024c <AT86_Init+0x8c>
			{
				return AT86_ERROR;
  400248:	2302      	movs	r3, #2
  40024a:	e052      	b.n	4002f2 <AT86_Init+0x132>
		for (i = 0; i < currentInstances; i++)
  40024c:	7dfb      	ldrb	r3, [r7, #23]
  40024e:	3301      	adds	r3, #1
  400250:	75fb      	strb	r3, [r7, #23]
  400252:	4b2c      	ldr	r3, [pc, #176]	; (400304 <AT86_Init+0x144>)
  400254:	781b      	ldrb	r3, [r3, #0]
  400256:	7dfa      	ldrb	r2, [r7, #23]
  400258:	429a      	cmp	r2, r3
  40025a:	d3dc      	bcc.n	400216 <AT86_Init+0x56>
			}
		}
	}
	
	currentInstances++;
  40025c:	4b29      	ldr	r3, [pc, #164]	; (400304 <AT86_Init+0x144>)
  40025e:	781b      	ldrb	r3, [r3, #0]
  400260:	3301      	adds	r3, #1
  400262:	b2da      	uxtb	r2, r3
  400264:	4b27      	ldr	r3, [pc, #156]	; (400304 <AT86_Init+0x144>)
  400266:	701a      	strb	r2, [r3, #0]

	at->baseband_2400.baseband_state = AFE_STATE_POWER_OFF;
  400268:	693b      	ldr	r3, [r7, #16]
  40026a:	2200      	movs	r2, #0
  40026c:	741a      	strb	r2, [r3, #16]
	at->baseband_900.baseband_state = AFE_STATE_POWER_OFF;
  40026e:	693b      	ldr	r3, [r7, #16]
  400270:	2200      	movs	r2, #0
  400272:	701a      	strb	r2, [r3, #0]
	at->at86_state = AT86_STATE_INIT;
  400274:	693b      	ldr	r3, [r7, #16]
  400276:	2200      	movs	r2, #0
  400278:	f883 2020 	strb.w	r2, [r3, #32]

	at->baseband_900.lastIRQ = 0;
  40027c:	693b      	ldr	r3, [r7, #16]
  40027e:	2200      	movs	r2, #0
  400280:	809a      	strh	r2, [r3, #4]
	at->baseband_2400.lastIRQ = 0;
  400282:	693b      	ldr	r3, [r7, #16]
  400284:	2200      	movs	r2, #0
  400286:	829a      	strh	r2, [r3, #20]

	at->baseband_2400.CSMA_EN = 0;
  400288:	693b      	ldr	r3, [r7, #16]
  40028a:	2200      	movs	r2, #0
  40028c:	759a      	strb	r2, [r3, #22]
	at->baseband_900.CSMA_EN = 0;
  40028e:	693b      	ldr	r3, [r7, #16]
  400290:	2200      	movs	r2, #0
  400292:	719a      	strb	r2, [r3, #6]
	
	at->numInterrupts = 0;
  400294:	693b      	ldr	r3, [r7, #16]
  400296:	2200      	movs	r2, #0
  400298:	859a      	strh	r2, [r3, #44]	; 0x2c
	
	at->baseband_2400.channel_power_assesment = 0; // Special baseband state.
  40029a:	693b      	ldr	r3, [r7, #16]
  40029c:	2200      	movs	r2, #0
  40029e:	75da      	strb	r2, [r3, #23]
	at->baseband_900.channel_power_assesment = 0; // Special baseband state.
  4002a0:	693b      	ldr	r3, [r7, #16]
  4002a2:	2200      	movs	r2, #0
  4002a4:	71da      	strb	r2, [r3, #7]
	
	//TODO: Connect this logic to configuration parameters.
	//THIS IS JUST FOR TESTING LOOPBACK.
	if (atDev == 0)
  4002a6:	79fb      	ldrb	r3, [r7, #7]
  4002a8:	2b00      	cmp	r3, #0
  4002aa:	d106      	bne.n	4002ba <AT86_Init+0xfa>
	{
		at->baseband_2400.pendingTransmit = 0;
  4002ac:	693b      	ldr	r3, [r7, #16]
  4002ae:	2200      	movs	r2, #0
  4002b0:	761a      	strb	r2, [r3, #24]
		at->baseband_900.pendingTransmit = 0;
  4002b2:	693b      	ldr	r3, [r7, #16]
  4002b4:	2200      	movs	r2, #0
  4002b6:	721a      	strb	r2, [r3, #8]
  4002b8:	e005      	b.n	4002c6 <AT86_Init+0x106>
	}
	else
	{
		at->baseband_2400.pendingTransmit = 1;
  4002ba:	693b      	ldr	r3, [r7, #16]
  4002bc:	2201      	movs	r2, #1
  4002be:	761a      	strb	r2, [r3, #24]
		at->baseband_900.pendingTransmit = 1;
  4002c0:	693b      	ldr	r3, [r7, #16]
  4002c2:	2201      	movs	r2, #1
  4002c4:	721a      	strb	r2, [r3, #8]
	}

	at->baseband_900.parent = at;
  4002c6:	693b      	ldr	r3, [r7, #16]
  4002c8:	693a      	ldr	r2, [r7, #16]
  4002ca:	60da      	str	r2, [r3, #12]
	at->baseband_2400.parent = at;
  4002cc:	693b      	ldr	r3, [r7, #16]
  4002ce:	693a      	ldr	r2, [r7, #16]
  4002d0:	61da      	str	r2, [r3, #28]

	//We set the peripheral interface associated with the driver here
	irq_dev->deviceDriver = (void *) at;
  4002d2:	68bb      	ldr	r3, [r7, #8]
  4002d4:	693a      	ldr	r2, [r7, #16]
  4002d6:	605a      	str	r2, [r3, #4]
	spi_dev->deviceDriver = (void *) at;
  4002d8:	68fb      	ldr	r3, [r7, #12]
  4002da:	693a      	ldr	r2, [r7, #16]
  4002dc:	605a      	str	r2, [r3, #4]
	
	//Set the devices here.
	at->irqDev = irq_dev;
  4002de:	693b      	ldr	r3, [r7, #16]
  4002e0:	68ba      	ldr	r2, [r7, #8]
  4002e2:	629a      	str	r2, [r3, #40]	; 0x28
	at->spiDev = spi_dev;
  4002e4:	693b      	ldr	r3, [r7, #16]
  4002e6:	68fa      	ldr	r2, [r7, #12]
  4002e8:	625a      	str	r2, [r3, #36]	; 0x24

	//This is most definitely wrong.
	irq_dev->callback = (void *)(AT86_IRQ_Handler);
  4002ea:	68bb      	ldr	r3, [r7, #8]
  4002ec:	4a06      	ldr	r2, [pc, #24]	; (400308 <AT86_Init+0x148>)
  4002ee:	609a      	str	r2, [r3, #8]
	
	//at->initialized = 1;

	return AT86_OK;  
  4002f0:	2300      	movs	r3, #0
}
  4002f2:	4618      	mov	r0, r3
  4002f4:	371c      	adds	r7, #28
  4002f6:	46bd      	mov	sp, r7
  4002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop
  400300:	204000a4 	.word	0x204000a4
  400304:	20400134 	.word	0x20400134
  400308:	0040030d 	.word	0x0040030d

0040030c <AT86_IRQ_Handler>:
}

//TODO: Define pin number when initing the atDev in Glue and don't
//      put the real pin numbers here in the irq handler.
void AT86_IRQ_Handler(uint8_t pinNum)
{
  40030c:	b480      	push	{r7}
  40030e:	b083      	sub	sp, #12
  400310:	af00      	add	r7, sp, #0
  400312:	4603      	mov	r3, r0
  400314:	71fb      	strb	r3, [r7, #7]
	//Increment the number of interrupts that occurred
	//since the last time the FSM was run.
	if (pinNum == 32)
  400316:	79fb      	ldrb	r3, [r7, #7]
  400318:	2b20      	cmp	r3, #32
  40031a:	d105      	bne.n	400328 <AT86_IRQ_Handler+0x1c>
	{
		Instance[AT86_INSTANCE0].numInterrupts++;;
  40031c:	4b0b      	ldr	r3, [pc, #44]	; (40034c <AT86_IRQ_Handler+0x40>)
  40031e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  400320:	3301      	adds	r3, #1
  400322:	b29a      	uxth	r2, r3
  400324:	4b09      	ldr	r3, [pc, #36]	; (40034c <AT86_IRQ_Handler+0x40>)
  400326:	859a      	strh	r2, [r3, #44]	; 0x2c
	}
	if (pinNum == 119)
  400328:	79fb      	ldrb	r3, [r7, #7]
  40032a:	2b77      	cmp	r3, #119	; 0x77
  40032c:	d107      	bne.n	40033e <AT86_IRQ_Handler+0x32>
	{
		Instance[AT86_INSTANCE1].numInterrupts++;;
  40032e:	4b07      	ldr	r3, [pc, #28]	; (40034c <AT86_IRQ_Handler+0x40>)
  400330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
  400334:	3301      	adds	r3, #1
  400336:	b29a      	uxth	r2, r3
  400338:	4b04      	ldr	r3, [pc, #16]	; (40034c <AT86_IRQ_Handler+0x40>)
  40033a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	}
}
  40033e:	bf00      	nop
  400340:	370c      	adds	r7, #12
  400342:	46bd      	mov	sp, r7
  400344:	f85d 7b04 	ldr.w	r7, [sp], #4
  400348:	4770      	bx	lr
  40034a:	bf00      	nop
  40034c:	204000a4 	.word	0x204000a4

00400350 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  400350:	b580      	push	{r7, lr}
  400352:	af00      	add	r7, sp, #0
	system_init();
  400354:	4b02      	ldr	r3, [pc, #8]	; (400360 <atmel_start_init+0x10>)
  400356:	4798      	blx	r3
	usb_init();
  400358:	4b02      	ldr	r3, [pc, #8]	; (400364 <atmel_start_init+0x14>)
  40035a:	4798      	blx	r3
}
  40035c:	bf00      	nop
  40035e:	bd80      	pop	{r7, pc}
  400360:	00400ddd 	.word	0x00400ddd
  400364:	004094c5 	.word	0x004094c5

00400368 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400368:	b580      	push	{r7, lr}
  40036a:	b082      	sub	sp, #8
  40036c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40036e:	4b16      	ldr	r3, [pc, #88]	; (4003c8 <Reset_Handler+0x60>)
  400370:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  400372:	4b16      	ldr	r3, [pc, #88]	; (4003cc <Reset_Handler+0x64>)
  400374:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  400376:	687a      	ldr	r2, [r7, #4]
  400378:	683b      	ldr	r3, [r7, #0]
  40037a:	429a      	cmp	r2, r3
  40037c:	d00c      	beq.n	400398 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40037e:	e007      	b.n	400390 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400380:	683b      	ldr	r3, [r7, #0]
  400382:	1d1a      	adds	r2, r3, #4
  400384:	603a      	str	r2, [r7, #0]
  400386:	687a      	ldr	r2, [r7, #4]
  400388:	1d11      	adds	r1, r2, #4
  40038a:	6079      	str	r1, [r7, #4]
  40038c:	6812      	ldr	r2, [r2, #0]
  40038e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400390:	683b      	ldr	r3, [r7, #0]
  400392:	4a0f      	ldr	r2, [pc, #60]	; (4003d0 <Reset_Handler+0x68>)
  400394:	4293      	cmp	r3, r2
  400396:	d3f3      	bcc.n	400380 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400398:	4b0e      	ldr	r3, [pc, #56]	; (4003d4 <Reset_Handler+0x6c>)
  40039a:	603b      	str	r3, [r7, #0]
  40039c:	e004      	b.n	4003a8 <Reset_Handler+0x40>
                *pDest++ = 0;
  40039e:	683b      	ldr	r3, [r7, #0]
  4003a0:	1d1a      	adds	r2, r3, #4
  4003a2:	603a      	str	r2, [r7, #0]
  4003a4:	2200      	movs	r2, #0
  4003a6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4003a8:	683b      	ldr	r3, [r7, #0]
  4003aa:	4a0b      	ldr	r2, [pc, #44]	; (4003d8 <Reset_Handler+0x70>)
  4003ac:	4293      	cmp	r3, r2
  4003ae:	d3f6      	bcc.n	40039e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4003b0:	4b0a      	ldr	r3, [pc, #40]	; (4003dc <Reset_Handler+0x74>)
  4003b2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4003b4:	4a0a      	ldr	r2, [pc, #40]	; (4003e0 <Reset_Handler+0x78>)
  4003b6:	687b      	ldr	r3, [r7, #4]
  4003b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4003bc:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4003be:	4b09      	ldr	r3, [pc, #36]	; (4003e4 <Reset_Handler+0x7c>)
  4003c0:	4798      	blx	r3

        /* Branch to main function */
        main();
  4003c2:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <Reset_Handler+0x80>)
  4003c4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4003c6:	e7fe      	b.n	4003c6 <Reset_Handler+0x5e>
  4003c8:	00409874 	.word	0x00409874
  4003cc:	20400000 	.word	0x20400000
  4003d0:	20400088 	.word	0x20400088
  4003d4:	20400088 	.word	0x20400088
  4003d8:	204019bc 	.word	0x204019bc
  4003dc:	00400000 	.word	0x00400000
  4003e0:	e000ed00 	.word	0xe000ed00
  4003e4:	004094d5 	.word	0x004094d5
  4003e8:	00407dc9 	.word	0x00407dc9

004003ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4003ec:	b480      	push	{r7}
  4003ee:	af00      	add	r7, sp, #0
        while (1) {
  4003f0:	e7fe      	b.n	4003f0 <Dummy_Handler+0x4>

004003f2 <hri_matrix_set_CCFG_SYSIO_reg>:
	((Matrix *)hw)->CCFG_SYSIO ^= CCFG_SYSIO_SYSIO12;
	MATRIX_CRITICAL_SECTION_LEAVE();
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
  4003f2:	b480      	push	{r7}
  4003f4:	b083      	sub	sp, #12
  4003f6:	af00      	add	r7, sp, #0
  4003f8:	6078      	str	r0, [r7, #4]
  4003fa:	6039      	str	r1, [r7, #0]
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400402:	683b      	ldr	r3, [r7, #0]
  400404:	431a      	orrs	r2, r3
  400406:	687b      	ldr	r3, [r7, #4]
  400408:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	MATRIX_CRITICAL_SECTION_LEAVE();
}
  40040c:	bf00      	nop
  40040e:	370c      	adds	r7, #12
  400410:	46bd      	mov	sp, r7
  400412:	f85d 7b04 	ldr.w	r7, [sp], #4
  400416:	4770      	bx	lr

00400418 <hri_pio_set_PSR_reg>:
{
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400418:	b480      	push	{r7}
  40041a:	b083      	sub	sp, #12
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
  400420:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  400422:	687b      	ldr	r3, [r7, #4]
  400424:	683a      	ldr	r2, [r7, #0]
  400426:	601a      	str	r2, [r3, #0]
}
  400428:	bf00      	nop
  40042a:	370c      	adds	r7, #12
  40042c:	46bd      	mov	sp, r7
  40042e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400432:	4770      	bx	lr

00400434 <hri_pio_clear_PSR_reg>:
	((Pio *)hw)->PIO_PER = data;
	((Pio *)hw)->PIO_PDR = ~data;
}

static inline void hri_pio_clear_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400434:	b480      	push	{r7}
  400436:	b083      	sub	sp, #12
  400438:	af00      	add	r7, sp, #0
  40043a:	6078      	str	r0, [r7, #4]
  40043c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  40043e:	687b      	ldr	r3, [r7, #4]
  400440:	683a      	ldr	r2, [r7, #0]
  400442:	605a      	str	r2, [r3, #4]
}
  400444:	bf00      	nop
  400446:	370c      	adds	r7, #12
  400448:	46bd      	mov	sp, r7
  40044a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40044e:	4770      	bx	lr

00400450 <hri_pio_set_OSR_reg>:
{
	((Pio *)hw)->PIO_ODR = PIO_OSR_P31;
}

static inline void hri_pio_set_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400450:	b480      	push	{r7}
  400452:	b083      	sub	sp, #12
  400454:	af00      	add	r7, sp, #0
  400456:	6078      	str	r0, [r7, #4]
  400458:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  40045a:	687b      	ldr	r3, [r7, #4]
  40045c:	683a      	ldr	r2, [r7, #0]
  40045e:	611a      	str	r2, [r3, #16]
}
  400460:	bf00      	nop
  400462:	370c      	adds	r7, #12
  400464:	46bd      	mov	sp, r7
  400466:	f85d 7b04 	ldr.w	r7, [sp], #4
  40046a:	4770      	bx	lr

0040046c <hri_pio_clear_OSR_reg>:
	((Pio *)hw)->PIO_OER = data;
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  40046c:	b480      	push	{r7}
  40046e:	b083      	sub	sp, #12
  400470:	af00      	add	r7, sp, #0
  400472:	6078      	str	r0, [r7, #4]
  400474:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400476:	687b      	ldr	r3, [r7, #4]
  400478:	683a      	ldr	r2, [r7, #0]
  40047a:	615a      	str	r2, [r3, #20]
}
  40047c:	bf00      	nop
  40047e:	370c      	adds	r7, #12
  400480:	46bd      	mov	sp, r7
  400482:	f85d 7b04 	ldr.w	r7, [sp], #4
  400486:	4770      	bx	lr

00400488 <hri_pio_set_ODSR_reg>:
{
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400488:	b480      	push	{r7}
  40048a:	b083      	sub	sp, #12
  40048c:	af00      	add	r7, sp, #0
  40048e:	6078      	str	r0, [r7, #4]
  400490:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400492:	687b      	ldr	r3, [r7, #4]
  400494:	683a      	ldr	r2, [r7, #0]
  400496:	631a      	str	r2, [r3, #48]	; 0x30
}
  400498:	bf00      	nop
  40049a:	370c      	adds	r7, #12
  40049c:	46bd      	mov	sp, r7
  40049e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a2:	4770      	bx	lr

004004a4 <hri_pio_clear_ODSR_reg>:
	((Pio *)hw)->PIO_SODR = data;
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  4004a4:	b480      	push	{r7}
  4004a6:	b083      	sub	sp, #12
  4004a8:	af00      	add	r7, sp, #0
  4004aa:	6078      	str	r0, [r7, #4]
  4004ac:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4004ae:	687b      	ldr	r3, [r7, #4]
  4004b0:	683a      	ldr	r2, [r7, #0]
  4004b2:	635a      	str	r2, [r3, #52]	; 0x34
}
  4004b4:	bf00      	nop
  4004b6:	370c      	adds	r7, #12
  4004b8:	46bd      	mov	sp, r7
  4004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004be:	4770      	bx	lr

004004c0 <hri_pio_set_PUSR_reg>:
{
	((Pio *)hw)->PIO_PUDR = PIO_PUSR_P31;
}

static inline void hri_pio_set_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  4004c0:	b480      	push	{r7}
  4004c2:	b083      	sub	sp, #12
  4004c4:	af00      	add	r7, sp, #0
  4004c6:	6078      	str	r0, [r7, #4]
  4004c8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUER = mask;
  4004ca:	687b      	ldr	r3, [r7, #4]
  4004cc:	683a      	ldr	r2, [r7, #0]
  4004ce:	665a      	str	r2, [r3, #100]	; 0x64
}
  4004d0:	bf00      	nop
  4004d2:	370c      	adds	r7, #12
  4004d4:	46bd      	mov	sp, r7
  4004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004da:	4770      	bx	lr

004004dc <hri_pio_clear_PUSR_reg>:
	((Pio *)hw)->PIO_PUER = data;
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  4004dc:	b480      	push	{r7}
  4004de:	b083      	sub	sp, #12
  4004e0:	af00      	add	r7, sp, #0
  4004e2:	6078      	str	r0, [r7, #4]
  4004e4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUDR = mask;
  4004e6:	687b      	ldr	r3, [r7, #4]
  4004e8:	683a      	ldr	r2, [r7, #0]
  4004ea:	661a      	str	r2, [r3, #96]	; 0x60
}
  4004ec:	bf00      	nop
  4004ee:	370c      	adds	r7, #12
  4004f0:	46bd      	mov	sp, r7
  4004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004f6:	4770      	bx	lr

004004f8 <hri_pio_set_PPDSR_reg>:
{
	((Pio *)hw)->PIO_PPDDR = PIO_PPDSR_P31;
}

static inline void hri_pio_set_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  4004f8:	b480      	push	{r7}
  4004fa:	b083      	sub	sp, #12
  4004fc:	af00      	add	r7, sp, #0
  4004fe:	6078      	str	r0, [r7, #4]
  400500:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDER = mask;
  400502:	687b      	ldr	r3, [r7, #4]
  400504:	683a      	ldr	r2, [r7, #0]
  400506:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
  40050a:	bf00      	nop
  40050c:	370c      	adds	r7, #12
  40050e:	46bd      	mov	sp, r7
  400510:	f85d 7b04 	ldr.w	r7, [sp], #4
  400514:	4770      	bx	lr

00400516 <hri_pio_clear_PPDSR_reg>:
	((Pio *)hw)->PIO_PPDER = data;
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  400516:	b480      	push	{r7}
  400518:	b083      	sub	sp, #12
  40051a:	af00      	add	r7, sp, #0
  40051c:	6078      	str	r0, [r7, #4]
  40051e:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDDR = mask;
  400520:	687b      	ldr	r3, [r7, #4]
  400522:	683a      	ldr	r2, [r7, #0]
  400524:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  400528:	bf00      	nop
  40052a:	370c      	adds	r7, #12
  40052c:	46bd      	mov	sp, r7
  40052e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400532:	4770      	bx	lr

00400534 <hri_pio_set_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] ^= PIO_ABCDSR_P31;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400534:	b480      	push	{r7}
  400536:	b085      	sub	sp, #20
  400538:	af00      	add	r7, sp, #0
  40053a:	60f8      	str	r0, [r7, #12]
  40053c:	460b      	mov	r3, r1
  40053e:	607a      	str	r2, [r7, #4]
  400540:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400542:	7afa      	ldrb	r2, [r7, #11]
  400544:	7af9      	ldrb	r1, [r7, #11]
  400546:	68fb      	ldr	r3, [r7, #12]
  400548:	311c      	adds	r1, #28
  40054a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  40054e:	687b      	ldr	r3, [r7, #4]
  400550:	4319      	orrs	r1, r3
  400552:	68fb      	ldr	r3, [r7, #12]
  400554:	321c      	adds	r2, #28
  400556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  40055a:	bf00      	nop
  40055c:	3714      	adds	r7, #20
  40055e:	46bd      	mov	sp, r7
  400560:	f85d 7b04 	ldr.w	r7, [sp], #4
  400564:	4770      	bx	lr

00400566 <hri_pio_clear_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] = data;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400566:	b480      	push	{r7}
  400568:	b085      	sub	sp, #20
  40056a:	af00      	add	r7, sp, #0
  40056c:	60f8      	str	r0, [r7, #12]
  40056e:	460b      	mov	r3, r1
  400570:	607a      	str	r2, [r7, #4]
  400572:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400574:	7afa      	ldrb	r2, [r7, #11]
  400576:	7af9      	ldrb	r1, [r7, #11]
  400578:	68fb      	ldr	r3, [r7, #12]
  40057a:	311c      	adds	r1, #28
  40057c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400580:	687b      	ldr	r3, [r7, #4]
  400582:	43db      	mvns	r3, r3
  400584:	4019      	ands	r1, r3
  400586:	68fb      	ldr	r3, [r7, #12]
  400588:	321c      	adds	r2, #28
  40058a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  40058e:	bf00      	nop
  400590:	3714      	adds	r7, #20
  400592:	46bd      	mov	sp, r7
  400594:	f85d 7b04 	ldr.w	r7, [sp], #4
  400598:	4770      	bx	lr

0040059a <hri_pmc_set_PCSR0_reg>:
{
	((Pmc *)hw)->PMC_PCDR0 = PMC_PCSR0_PID31;
}

static inline void hri_pmc_set_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  40059a:	b480      	push	{r7}
  40059c:	b083      	sub	sp, #12
  40059e:	af00      	add	r7, sp, #0
  4005a0:	6078      	str	r0, [r7, #4]
  4005a2:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  4005a4:	687b      	ldr	r3, [r7, #4]
  4005a6:	683a      	ldr	r2, [r7, #0]
  4005a8:	611a      	str	r2, [r3, #16]
}
  4005aa:	bf00      	nop
  4005ac:	370c      	adds	r7, #12
  4005ae:	46bd      	mov	sp, r7
  4005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005b4:	4770      	bx	lr

004005b6 <hri_pmc_get_PCSR0_reg>:

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  4005b6:	b480      	push	{r7}
  4005b8:	b085      	sub	sp, #20
  4005ba:	af00      	add	r7, sp, #0
  4005bc:	6078      	str	r0, [r7, #4]
  4005be:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4005c0:	687b      	ldr	r3, [r7, #4]
  4005c2:	699b      	ldr	r3, [r3, #24]
  4005c4:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4005c6:	68fa      	ldr	r2, [r7, #12]
  4005c8:	683b      	ldr	r3, [r7, #0]
  4005ca:	4013      	ands	r3, r2
  4005cc:	60fb      	str	r3, [r7, #12]
	return tmp;
  4005ce:	68fb      	ldr	r3, [r7, #12]
}
  4005d0:	4618      	mov	r0, r3
  4005d2:	3714      	adds	r7, #20
  4005d4:	46bd      	mov	sp, r7
  4005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005da:	4770      	bx	lr

004005dc <hri_pmc_set_PCSR1_reg>:
{
	((Pmc *)hw)->PMC_PCDR1 = PMC_PCSR1_PID60;
}

static inline void hri_pmc_set_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  4005dc:	b480      	push	{r7}
  4005de:	b083      	sub	sp, #12
  4005e0:	af00      	add	r7, sp, #0
  4005e2:	6078      	str	r0, [r7, #4]
  4005e4:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  4005e6:	687b      	ldr	r3, [r7, #4]
  4005e8:	683a      	ldr	r2, [r7, #0]
  4005ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  4005ee:	bf00      	nop
  4005f0:	370c      	adds	r7, #12
  4005f2:	46bd      	mov	sp, r7
  4005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005f8:	4770      	bx	lr

004005fa <hri_pmc_get_PCSR1_reg>:

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  4005fa:	b480      	push	{r7}
  4005fc:	b085      	sub	sp, #20
  4005fe:	af00      	add	r7, sp, #0
  400600:	6078      	str	r0, [r7, #4]
  400602:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400604:	687b      	ldr	r3, [r7, #4]
  400606:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40060a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  40060c:	68fa      	ldr	r2, [r7, #12]
  40060e:	683b      	ldr	r3, [r7, #0]
  400610:	4013      	ands	r3, r2
  400612:	60fb      	str	r3, [r7, #12]
	return tmp;
  400614:	68fb      	ldr	r3, [r7, #12]
}
  400616:	4618      	mov	r0, r3
  400618:	3714      	adds	r7, #20
  40061a:	46bd      	mov	sp, r7
  40061c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400620:	4770      	bx	lr

00400622 <hri_pmc_write_PCR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_PCR_reg(const void *const hw, hri_pmc_pcr_reg_t data)
{
  400622:	b480      	push	{r7}
  400624:	b083      	sub	sp, #12
  400626:	af00      	add	r7, sp, #0
  400628:	6078      	str	r0, [r7, #4]
  40062a:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCR = data;
  40062c:	687b      	ldr	r3, [r7, #4]
  40062e:	683a      	ldr	r2, [r7, #0]
  400630:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC_CRITICAL_SECTION_LEAVE();
}
  400634:	bf00      	nop
  400636:	370c      	adds	r7, #12
  400638:	46bd      	mov	sp, r7
  40063a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40063e:	4770      	bx	lr

00400640 <hri_pmc_read_PCR_reg>:
	((Pmc *)hw)->PMC_PCR ^= mask;
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_pcr_reg_t hri_pmc_read_PCR_reg(const void *const hw)
{
  400640:	b480      	push	{r7}
  400642:	b083      	sub	sp, #12
  400644:	af00      	add	r7, sp, #0
  400646:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  400648:	687b      	ldr	r3, [r7, #4]
  40064a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  40064e:	4618      	mov	r0, r3
  400650:	370c      	adds	r7, #12
  400652:	46bd      	mov	sp, r7
  400654:	f85d 7b04 	ldr.w	r7, [sp], #4
  400658:	4770      	bx	lr

0040065a <hri_wdt_set_MR_WDDIS_bit>:
	((Wdt *)hw)->WDT_MR ^= WDT_MR_WDRSTEN;
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
  40065a:	b480      	push	{r7}
  40065c:	b083      	sub	sp, #12
  40065e:	af00      	add	r7, sp, #0
  400660:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400662:	687b      	ldr	r3, [r7, #4]
  400664:	685b      	ldr	r3, [r3, #4]
  400666:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	605a      	str	r2, [r3, #4]
	WDT_CRITICAL_SECTION_LEAVE();
}
  40066e:	bf00      	nop
  400670:	370c      	adds	r7, #12
  400672:	46bd      	mov	sp, r7
  400674:	f85d 7b04 	ldr.w	r7, [sp], #4
  400678:	4770      	bx	lr
	...

0040067c <port_to_reg>:

/**
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
  40067c:	b480      	push	{r7}
  40067e:	b083      	sub	sp, #12
  400680:	af00      	add	r7, sp, #0
  400682:	4603      	mov	r3, r0
  400684:	71fb      	strb	r3, [r7, #7]
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  400686:	79fb      	ldrb	r3, [r7, #7]
  400688:	025b      	lsls	r3, r3, #9
  40068a:	461a      	mov	r2, r3
  40068c:	4b03      	ldr	r3, [pc, #12]	; (40069c <port_to_reg+0x20>)
  40068e:	4413      	add	r3, r2
}
  400690:	4618      	mov	r0, r3
  400692:	370c      	adds	r7, #12
  400694:	46bd      	mov	sp, r7
  400696:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069a:	4770      	bx	lr
  40069c:	400e0e00 	.word	0x400e0e00

004006a0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
  4006a0:	b580      	push	{r7, lr}
  4006a2:	b084      	sub	sp, #16
  4006a4:	af00      	add	r7, sp, #0
  4006a6:	4603      	mov	r3, r0
  4006a8:	6039      	str	r1, [r7, #0]
  4006aa:	71fb      	strb	r3, [r7, #7]
  4006ac:	4613      	mov	r3, r2
  4006ae:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  4006b0:	79fb      	ldrb	r3, [r7, #7]
  4006b2:	4618      	mov	r0, r3
  4006b4:	4b0e      	ldr	r3, [pc, #56]	; (4006f0 <_gpio_set_direction+0x50>)
  4006b6:	4798      	blx	r3
  4006b8:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  4006ba:	79bb      	ldrb	r3, [r7, #6]
  4006bc:	2b00      	cmp	r3, #0
  4006be:	db0e      	blt.n	4006de <_gpio_set_direction+0x3e>
  4006c0:	2b01      	cmp	r3, #1
  4006c2:	dd02      	ble.n	4006ca <_gpio_set_direction+0x2a>
  4006c4:	2b02      	cmp	r3, #2
  4006c6:	d005      	beq.n	4006d4 <_gpio_set_direction+0x34>
  4006c8:	e009      	b.n	4006de <_gpio_set_direction+0x3e>
	case GPIO_DIRECTION_OFF:
	case GPIO_DIRECTION_IN:
		hri_pio_clear_OSR_reg(hw, mask);
  4006ca:	6839      	ldr	r1, [r7, #0]
  4006cc:	68f8      	ldr	r0, [r7, #12]
  4006ce:	4b09      	ldr	r3, [pc, #36]	; (4006f4 <_gpio_set_direction+0x54>)
  4006d0:	4798      	blx	r3
		break;
  4006d2:	e009      	b.n	4006e8 <_gpio_set_direction+0x48>

	case GPIO_DIRECTION_OUT:
		hri_pio_set_OSR_reg(hw, mask);
  4006d4:	6839      	ldr	r1, [r7, #0]
  4006d6:	68f8      	ldr	r0, [r7, #12]
  4006d8:	4b07      	ldr	r3, [pc, #28]	; (4006f8 <_gpio_set_direction+0x58>)
  4006da:	4798      	blx	r3
		break;
  4006dc:	e004      	b.n	4006e8 <_gpio_set_direction+0x48>

	default:
		ASSERT(false);
  4006de:	2241      	movs	r2, #65	; 0x41
  4006e0:	4906      	ldr	r1, [pc, #24]	; (4006fc <_gpio_set_direction+0x5c>)
  4006e2:	2000      	movs	r0, #0
  4006e4:	4b06      	ldr	r3, [pc, #24]	; (400700 <_gpio_set_direction+0x60>)
  4006e6:	4798      	blx	r3
	}
}
  4006e8:	bf00      	nop
  4006ea:	3710      	adds	r7, #16
  4006ec:	46bd      	mov	sp, r7
  4006ee:	bd80      	pop	{r7, pc}
  4006f0:	0040067d 	.word	0x0040067d
  4006f4:	0040046d 	.word	0x0040046d
  4006f8:	00400451 	.word	0x00400451
  4006fc:	00409544 	.word	0x00409544
  400700:	004027fd 	.word	0x004027fd

00400704 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
  400704:	b580      	push	{r7, lr}
  400706:	b084      	sub	sp, #16
  400708:	af00      	add	r7, sp, #0
  40070a:	4603      	mov	r3, r0
  40070c:	6039      	str	r1, [r7, #0]
  40070e:	71fb      	strb	r3, [r7, #7]
  400710:	4613      	mov	r3, r2
  400712:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400714:	79fb      	ldrb	r3, [r7, #7]
  400716:	4618      	mov	r0, r3
  400718:	4b09      	ldr	r3, [pc, #36]	; (400740 <_gpio_set_level+0x3c>)
  40071a:	4798      	blx	r3
  40071c:	60f8      	str	r0, [r7, #12]
	if (level) {
  40071e:	79bb      	ldrb	r3, [r7, #6]
  400720:	2b00      	cmp	r3, #0
  400722:	d004      	beq.n	40072e <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  400724:	6839      	ldr	r1, [r7, #0]
  400726:	68f8      	ldr	r0, [r7, #12]
  400728:	4b06      	ldr	r3, [pc, #24]	; (400744 <_gpio_set_level+0x40>)
  40072a:	4798      	blx	r3
	} else {
		hri_pio_clear_ODSR_reg(hw, mask);
	}
}
  40072c:	e003      	b.n	400736 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  40072e:	6839      	ldr	r1, [r7, #0]
  400730:	68f8      	ldr	r0, [r7, #12]
  400732:	4b05      	ldr	r3, [pc, #20]	; (400748 <_gpio_set_level+0x44>)
  400734:	4798      	blx	r3
}
  400736:	bf00      	nop
  400738:	3710      	adds	r7, #16
  40073a:	46bd      	mov	sp, r7
  40073c:	bd80      	pop	{r7, pc}
  40073e:	bf00      	nop
  400740:	0040067d 	.word	0x0040067d
  400744:	00400489 	.word	0x00400489
  400748:	004004a5 	.word	0x004004a5

0040074c <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
  40074c:	b580      	push	{r7, lr}
  40074e:	b084      	sub	sp, #16
  400750:	af00      	add	r7, sp, #0
  400752:	4603      	mov	r3, r0
  400754:	71fb      	strb	r3, [r7, #7]
  400756:	460b      	mov	r3, r1
  400758:	71bb      	strb	r3, [r7, #6]
  40075a:	4613      	mov	r3, r2
  40075c:	717b      	strb	r3, [r7, #5]
	void *const hw = port_to_reg(port);
  40075e:	79fb      	ldrb	r3, [r7, #7]
  400760:	4618      	mov	r0, r3
  400762:	4b23      	ldr	r3, [pc, #140]	; (4007f0 <_gpio_set_pin_pull_mode+0xa4>)
  400764:	4798      	blx	r3
  400766:	60f8      	str	r0, [r7, #12]
	switch (pull_mode) {
  400768:	797b      	ldrb	r3, [r7, #5]
  40076a:	2b01      	cmp	r3, #1
  40076c:	d014      	beq.n	400798 <_gpio_set_pin_pull_mode+0x4c>
  40076e:	2b02      	cmp	r3, #2
  400770:	d023      	beq.n	4007ba <_gpio_set_pin_pull_mode+0x6e>
  400772:	2b00      	cmp	r3, #0
  400774:	d132      	bne.n	4007dc <_gpio_set_pin_pull_mode+0x90>
	case GPIO_PULL_OFF:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400776:	79bb      	ldrb	r3, [r7, #6]
  400778:	2201      	movs	r2, #1
  40077a:	fa02 f303 	lsl.w	r3, r2, r3
  40077e:	4619      	mov	r1, r3
  400780:	68f8      	ldr	r0, [r7, #12]
  400782:	4b1c      	ldr	r3, [pc, #112]	; (4007f4 <_gpio_set_pin_pull_mode+0xa8>)
  400784:	4798      	blx	r3
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400786:	79bb      	ldrb	r3, [r7, #6]
  400788:	2201      	movs	r2, #1
  40078a:	fa02 f303 	lsl.w	r3, r2, r3
  40078e:	4619      	mov	r1, r3
  400790:	68f8      	ldr	r0, [r7, #12]
  400792:	4b19      	ldr	r3, [pc, #100]	; (4007f8 <_gpio_set_pin_pull_mode+0xac>)
  400794:	4798      	blx	r3
		break;
  400796:	e027      	b.n	4007e8 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_UP:
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400798:	79bb      	ldrb	r3, [r7, #6]
  40079a:	2201      	movs	r2, #1
  40079c:	fa02 f303 	lsl.w	r3, r2, r3
  4007a0:	4619      	mov	r1, r3
  4007a2:	68f8      	ldr	r0, [r7, #12]
  4007a4:	4b14      	ldr	r3, [pc, #80]	; (4007f8 <_gpio_set_pin_pull_mode+0xac>)
  4007a6:	4798      	blx	r3
		hri_pio_set_PUSR_reg(hw, 1U << pin);
  4007a8:	79bb      	ldrb	r3, [r7, #6]
  4007aa:	2201      	movs	r2, #1
  4007ac:	fa02 f303 	lsl.w	r3, r2, r3
  4007b0:	4619      	mov	r1, r3
  4007b2:	68f8      	ldr	r0, [r7, #12]
  4007b4:	4b11      	ldr	r3, [pc, #68]	; (4007fc <_gpio_set_pin_pull_mode+0xb0>)
  4007b6:	4798      	blx	r3
		break;
  4007b8:	e016      	b.n	4007e8 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_DOWN:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  4007ba:	79bb      	ldrb	r3, [r7, #6]
  4007bc:	2201      	movs	r2, #1
  4007be:	fa02 f303 	lsl.w	r3, r2, r3
  4007c2:	4619      	mov	r1, r3
  4007c4:	68f8      	ldr	r0, [r7, #12]
  4007c6:	4b0b      	ldr	r3, [pc, #44]	; (4007f4 <_gpio_set_pin_pull_mode+0xa8>)
  4007c8:	4798      	blx	r3
		hri_pio_set_PPDSR_reg(hw, 1U << pin);
  4007ca:	79bb      	ldrb	r3, [r7, #6]
  4007cc:	2201      	movs	r2, #1
  4007ce:	fa02 f303 	lsl.w	r3, r2, r3
  4007d2:	4619      	mov	r1, r3
  4007d4:	68f8      	ldr	r0, [r7, #12]
  4007d6:	4b0a      	ldr	r3, [pc, #40]	; (400800 <_gpio_set_pin_pull_mode+0xb4>)
  4007d8:	4798      	blx	r3
		break;
  4007da:	e005      	b.n	4007e8 <_gpio_set_pin_pull_mode+0x9c>

	default:
		ASSERT(false);
  4007dc:	2283      	movs	r2, #131	; 0x83
  4007de:	4909      	ldr	r1, [pc, #36]	; (400804 <_gpio_set_pin_pull_mode+0xb8>)
  4007e0:	2000      	movs	r0, #0
  4007e2:	4b09      	ldr	r3, [pc, #36]	; (400808 <_gpio_set_pin_pull_mode+0xbc>)
  4007e4:	4798      	blx	r3
		break;
  4007e6:	bf00      	nop
	}
}
  4007e8:	bf00      	nop
  4007ea:	3710      	adds	r7, #16
  4007ec:	46bd      	mov	sp, r7
  4007ee:	bd80      	pop	{r7, pc}
  4007f0:	0040067d 	.word	0x0040067d
  4007f4:	004004dd 	.word	0x004004dd
  4007f8:	00400517 	.word	0x00400517
  4007fc:	004004c1 	.word	0x004004c1
  400800:	004004f9 	.word	0x004004f9
  400804:	00409544 	.word	0x00409544
  400808:	004027fd 	.word	0x004027fd

0040080c <_gpio_set_pin_function>:

/**
 * \brief Set pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
  40080c:	b580      	push	{r7, lr}
  40080e:	b084      	sub	sp, #16
  400810:	af00      	add	r7, sp, #0
  400812:	6078      	str	r0, [r7, #4]
  400814:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  400816:	687b      	ldr	r3, [r7, #4]
  400818:	095b      	lsrs	r3, r3, #5
  40081a:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	b2db      	uxtb	r3, r3
  400820:	f003 031f 	and.w	r3, r3, #31
  400824:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  400826:	7bfb      	ldrb	r3, [r7, #15]
  400828:	4618      	mov	r0, r3
  40082a:	4b33      	ldr	r3, [pc, #204]	; (4008f8 <_gpio_set_pin_function+0xec>)
  40082c:	4798      	blx	r3
  40082e:	60b8      	str	r0, [r7, #8]

	if ((enum gpio_port)port == GPIO_PORTB) {
  400830:	7bfb      	ldrb	r3, [r7, #15]
  400832:	2b01      	cmp	r3, #1
  400834:	d116      	bne.n	400864 <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  400836:	7bbb      	ldrb	r3, [r7, #14]
  400838:	2b04      	cmp	r3, #4
  40083a:	d00b      	beq.n	400854 <_gpio_set_pin_function+0x48>
  40083c:	7bbb      	ldrb	r3, [r7, #14]
  40083e:	2b05      	cmp	r3, #5
  400840:	d008      	beq.n	400854 <_gpio_set_pin_function+0x48>
  400842:	7bbb      	ldrb	r3, [r7, #14]
  400844:	2b06      	cmp	r3, #6
  400846:	d005      	beq.n	400854 <_gpio_set_pin_function+0x48>
  400848:	7bbb      	ldrb	r3, [r7, #14]
  40084a:	2b07      	cmp	r3, #7
  40084c:	d002      	beq.n	400854 <_gpio_set_pin_function+0x48>
  40084e:	7bbb      	ldrb	r3, [r7, #14]
  400850:	2b0c      	cmp	r3, #12
  400852:	d107      	bne.n	400864 <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  400854:	7bbb      	ldrb	r3, [r7, #14]
  400856:	2201      	movs	r2, #1
  400858:	fa02 f303 	lsl.w	r3, r2, r3
  40085c:	4619      	mov	r1, r3
  40085e:	4827      	ldr	r0, [pc, #156]	; (4008fc <_gpio_set_pin_function+0xf0>)
  400860:	4b27      	ldr	r3, [pc, #156]	; (400900 <_gpio_set_pin_function+0xf4>)
  400862:	4798      	blx	r3
		}
	}

	if (function == GPIO_PIN_FUNCTION_OFF) {
  400864:	683b      	ldr	r3, [r7, #0]
  400866:	f1b3 3fff 	cmp.w	r3, #4294967295
  40086a:	d108      	bne.n	40087e <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  40086c:	7bbb      	ldrb	r3, [r7, #14]
  40086e:	2201      	movs	r2, #1
  400870:	fa02 f303 	lsl.w	r3, r2, r3
  400874:	4619      	mov	r1, r3
  400876:	68b8      	ldr	r0, [r7, #8]
  400878:	4b22      	ldr	r3, [pc, #136]	; (400904 <_gpio_set_pin_function+0xf8>)
  40087a:	4798      	blx	r3
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
		}

		hri_pio_clear_PSR_reg(hw, 1U << pin);
	}
}
  40087c:	e037      	b.n	4008ee <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  40087e:	683b      	ldr	r3, [r7, #0]
  400880:	f003 0301 	and.w	r3, r3, #1
  400884:	2b00      	cmp	r3, #0
  400886:	d009      	beq.n	40089c <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  400888:	7bbb      	ldrb	r3, [r7, #14]
  40088a:	2201      	movs	r2, #1
  40088c:	fa02 f303 	lsl.w	r3, r2, r3
  400890:	461a      	mov	r2, r3
  400892:	2100      	movs	r1, #0
  400894:	68b8      	ldr	r0, [r7, #8]
  400896:	4b1c      	ldr	r3, [pc, #112]	; (400908 <_gpio_set_pin_function+0xfc>)
  400898:	4798      	blx	r3
  40089a:	e008      	b.n	4008ae <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  40089c:	7bbb      	ldrb	r3, [r7, #14]
  40089e:	2201      	movs	r2, #1
  4008a0:	fa02 f303 	lsl.w	r3, r2, r3
  4008a4:	461a      	mov	r2, r3
  4008a6:	2100      	movs	r1, #0
  4008a8:	68b8      	ldr	r0, [r7, #8]
  4008aa:	4b18      	ldr	r3, [pc, #96]	; (40090c <_gpio_set_pin_function+0x100>)
  4008ac:	4798      	blx	r3
		if (function & 0x2) {
  4008ae:	683b      	ldr	r3, [r7, #0]
  4008b0:	f003 0302 	and.w	r3, r3, #2
  4008b4:	2b00      	cmp	r3, #0
  4008b6:	d009      	beq.n	4008cc <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  4008b8:	7bbb      	ldrb	r3, [r7, #14]
  4008ba:	2201      	movs	r2, #1
  4008bc:	fa02 f303 	lsl.w	r3, r2, r3
  4008c0:	461a      	mov	r2, r3
  4008c2:	2101      	movs	r1, #1
  4008c4:	68b8      	ldr	r0, [r7, #8]
  4008c6:	4b10      	ldr	r3, [pc, #64]	; (400908 <_gpio_set_pin_function+0xfc>)
  4008c8:	4798      	blx	r3
  4008ca:	e008      	b.n	4008de <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  4008cc:	7bbb      	ldrb	r3, [r7, #14]
  4008ce:	2201      	movs	r2, #1
  4008d0:	fa02 f303 	lsl.w	r3, r2, r3
  4008d4:	461a      	mov	r2, r3
  4008d6:	2101      	movs	r1, #1
  4008d8:	68b8      	ldr	r0, [r7, #8]
  4008da:	4b0c      	ldr	r3, [pc, #48]	; (40090c <_gpio_set_pin_function+0x100>)
  4008dc:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  4008de:	7bbb      	ldrb	r3, [r7, #14]
  4008e0:	2201      	movs	r2, #1
  4008e2:	fa02 f303 	lsl.w	r3, r2, r3
  4008e6:	4619      	mov	r1, r3
  4008e8:	68b8      	ldr	r0, [r7, #8]
  4008ea:	4b09      	ldr	r3, [pc, #36]	; (400910 <_gpio_set_pin_function+0x104>)
  4008ec:	4798      	blx	r3
}
  4008ee:	bf00      	nop
  4008f0:	3710      	adds	r7, #16
  4008f2:	46bd      	mov	sp, r7
  4008f4:	bd80      	pop	{r7, pc}
  4008f6:	bf00      	nop
  4008f8:	0040067d 	.word	0x0040067d
  4008fc:	40088000 	.word	0x40088000
  400900:	004003f3 	.word	0x004003f3
  400904:	00400419 	.word	0x00400419
  400908:	00400535 	.word	0x00400535
  40090c:	00400567 	.word	0x00400567
  400910:	00400435 	.word	0x00400435

00400914 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
  400914:	b580      	push	{r7, lr}
  400916:	b082      	sub	sp, #8
  400918:	af00      	add	r7, sp, #0
  40091a:	4603      	mov	r3, r0
  40091c:	460a      	mov	r2, r1
  40091e:	71fb      	strb	r3, [r7, #7]
  400920:	4613      	mov	r3, r2
  400922:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
  400924:	79fb      	ldrb	r3, [r7, #7]
  400926:	095b      	lsrs	r3, r3, #5
  400928:	b2d8      	uxtb	r0, r3
  40092a:	79fb      	ldrb	r3, [r7, #7]
  40092c:	f003 031f 	and.w	r3, r3, #31
  400930:	b2db      	uxtb	r3, r3
  400932:	79ba      	ldrb	r2, [r7, #6]
  400934:	4619      	mov	r1, r3
  400936:	4b03      	ldr	r3, [pc, #12]	; (400944 <gpio_set_pin_pull_mode+0x30>)
  400938:	4798      	blx	r3
}
  40093a:	bf00      	nop
  40093c:	3708      	adds	r7, #8
  40093e:	46bd      	mov	sp, r7
  400940:	bd80      	pop	{r7, pc}
  400942:	bf00      	nop
  400944:	0040074d 	.word	0x0040074d

00400948 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
  400948:	b580      	push	{r7, lr}
  40094a:	b082      	sub	sp, #8
  40094c:	af00      	add	r7, sp, #0
  40094e:	6078      	str	r0, [r7, #4]
  400950:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  400952:	6839      	ldr	r1, [r7, #0]
  400954:	6878      	ldr	r0, [r7, #4]
  400956:	4b03      	ldr	r3, [pc, #12]	; (400964 <gpio_set_pin_function+0x1c>)
  400958:	4798      	blx	r3
}
  40095a:	bf00      	nop
  40095c:	3708      	adds	r7, #8
  40095e:	46bd      	mov	sp, r7
  400960:	bd80      	pop	{r7, pc}
  400962:	bf00      	nop
  400964:	0040080d 	.word	0x0040080d

00400968 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
  400968:	b580      	push	{r7, lr}
  40096a:	b082      	sub	sp, #8
  40096c:	af00      	add	r7, sp, #0
  40096e:	4603      	mov	r3, r0
  400970:	460a      	mov	r2, r1
  400972:	71fb      	strb	r3, [r7, #7]
  400974:	4613      	mov	r3, r2
  400976:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  400978:	79fb      	ldrb	r3, [r7, #7]
  40097a:	095b      	lsrs	r3, r3, #5
  40097c:	b2d8      	uxtb	r0, r3
  40097e:	79fb      	ldrb	r3, [r7, #7]
  400980:	f003 031f 	and.w	r3, r3, #31
  400984:	2201      	movs	r2, #1
  400986:	fa02 f303 	lsl.w	r3, r2, r3
  40098a:	79ba      	ldrb	r2, [r7, #6]
  40098c:	4619      	mov	r1, r3
  40098e:	4b03      	ldr	r3, [pc, #12]	; (40099c <gpio_set_pin_direction+0x34>)
  400990:	4798      	blx	r3
}
  400992:	bf00      	nop
  400994:	3708      	adds	r7, #8
  400996:	46bd      	mov	sp, r7
  400998:	bd80      	pop	{r7, pc}
  40099a:	bf00      	nop
  40099c:	004006a1 	.word	0x004006a1

004009a0 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
  4009a0:	b580      	push	{r7, lr}
  4009a2:	b082      	sub	sp, #8
  4009a4:	af00      	add	r7, sp, #0
  4009a6:	4603      	mov	r3, r0
  4009a8:	460a      	mov	r2, r1
  4009aa:	71fb      	strb	r3, [r7, #7]
  4009ac:	4613      	mov	r3, r2
  4009ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4009b0:	79fb      	ldrb	r3, [r7, #7]
  4009b2:	095b      	lsrs	r3, r3, #5
  4009b4:	b2d8      	uxtb	r0, r3
  4009b6:	79fb      	ldrb	r3, [r7, #7]
  4009b8:	f003 031f 	and.w	r3, r3, #31
  4009bc:	2201      	movs	r2, #1
  4009be:	fa02 f303 	lsl.w	r3, r2, r3
  4009c2:	79ba      	ldrb	r2, [r7, #6]
  4009c4:	4619      	mov	r1, r3
  4009c6:	4b03      	ldr	r3, [pc, #12]	; (4009d4 <gpio_set_pin_level+0x34>)
  4009c8:	4798      	blx	r3
}
  4009ca:	bf00      	nop
  4009cc:	3708      	adds	r7, #8
  4009ce:	46bd      	mov	sp, r7
  4009d0:	bd80      	pop	{r7, pc}
  4009d2:	bf00      	nop
  4009d4:	00400705 	.word	0x00400705

004009d8 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
  4009d8:	b580      	push	{r7, lr}
  4009da:	af00      	add	r7, sp, #0
	_init_chip();
  4009dc:	4b01      	ldr	r3, [pc, #4]	; (4009e4 <init_mcu+0xc>)
  4009de:	4798      	blx	r3
}
  4009e0:	bf00      	nop
  4009e2:	bd80      	pop	{r7, pc}
  4009e4:	00402ea9 	.word	0x00402ea9

004009e8 <_pmc_enable_periph_clock>:
 *
 * \param periph_id Peripheral ID
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
  4009e8:	b580      	push	{r7, lr}
  4009ea:	b084      	sub	sp, #16
  4009ec:	af00      	add	r7, sp, #0
  4009ee:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	2b1f      	cmp	r3, #31
  4009f4:	d813      	bhi.n	400a1e <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4009f6:	2201      	movs	r2, #1
  4009f8:	687b      	ldr	r3, [r7, #4]
  4009fa:	fa02 f303 	lsl.w	r3, r2, r3
  4009fe:	4619      	mov	r1, r3
  400a00:	481f      	ldr	r0, [pc, #124]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a02:	4b20      	ldr	r3, [pc, #128]	; (400a84 <_pmc_enable_periph_clock+0x9c>)
  400a04:	4798      	blx	r3
  400a06:	4603      	mov	r3, r0
  400a08:	2b00      	cmp	r3, #0
  400a0a:	d135      	bne.n	400a78 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  400a0c:	2201      	movs	r2, #1
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	fa02 f303 	lsl.w	r3, r2, r3
  400a14:	4619      	mov	r1, r3
  400a16:	481a      	ldr	r0, [pc, #104]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a18:	4b1b      	ldr	r3, [pc, #108]	; (400a88 <_pmc_enable_periph_clock+0xa0>)
  400a1a:	4798      	blx	r3
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
		tmp = hri_pmc_read_PCR_reg(PMC);
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
		hri_pmc_write_PCR_reg(PMC, tmp);
	}
}
  400a1c:	e02c      	b.n	400a78 <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  400a1e:	687b      	ldr	r3, [r7, #4]
  400a20:	2b3f      	cmp	r3, #63	; 0x3f
  400a22:	d816      	bhi.n	400a52 <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  400a24:	687b      	ldr	r3, [r7, #4]
  400a26:	3b20      	subs	r3, #32
  400a28:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400a2a:	2201      	movs	r2, #1
  400a2c:	687b      	ldr	r3, [r7, #4]
  400a2e:	fa02 f303 	lsl.w	r3, r2, r3
  400a32:	4619      	mov	r1, r3
  400a34:	4812      	ldr	r0, [pc, #72]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a36:	4b15      	ldr	r3, [pc, #84]	; (400a8c <_pmc_enable_periph_clock+0xa4>)
  400a38:	4798      	blx	r3
  400a3a:	4603      	mov	r3, r0
  400a3c:	2b00      	cmp	r3, #0
  400a3e:	d11b      	bne.n	400a78 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  400a40:	2201      	movs	r2, #1
  400a42:	687b      	ldr	r3, [r7, #4]
  400a44:	fa02 f303 	lsl.w	r3, r2, r3
  400a48:	4619      	mov	r1, r3
  400a4a:	480d      	ldr	r0, [pc, #52]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a4c:	4b10      	ldr	r3, [pc, #64]	; (400a90 <_pmc_enable_periph_clock+0xa8>)
  400a4e:	4798      	blx	r3
}
  400a50:	e012      	b.n	400a78 <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  400a52:	687b      	ldr	r3, [r7, #4]
  400a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  400a58:	4619      	mov	r1, r3
  400a5a:	4809      	ldr	r0, [pc, #36]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a5c:	4b0d      	ldr	r3, [pc, #52]	; (400a94 <_pmc_enable_periph_clock+0xac>)
  400a5e:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  400a60:	4807      	ldr	r0, [pc, #28]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a62:	4b0d      	ldr	r3, [pc, #52]	; (400a98 <_pmc_enable_periph_clock+0xb0>)
  400a64:	4798      	blx	r3
  400a66:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  400a68:	68fb      	ldr	r3, [r7, #12]
  400a6a:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  400a6e:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  400a70:	68f9      	ldr	r1, [r7, #12]
  400a72:	4803      	ldr	r0, [pc, #12]	; (400a80 <_pmc_enable_periph_clock+0x98>)
  400a74:	4b07      	ldr	r3, [pc, #28]	; (400a94 <_pmc_enable_periph_clock+0xac>)
  400a76:	4798      	blx	r3
}
  400a78:	bf00      	nop
  400a7a:	3710      	adds	r7, #16
  400a7c:	46bd      	mov	sp, r7
  400a7e:	bd80      	pop	{r7, pc}
  400a80:	400e0600 	.word	0x400e0600
  400a84:	004005b7 	.word	0x004005b7
  400a88:	0040059b 	.word	0x0040059b
  400a8c:	004005fb 	.word	0x004005fb
  400a90:	004005dd 	.word	0x004005dd
  400a94:	00400623 	.word	0x00400623
  400a98:	00400641 	.word	0x00400641

00400a9c <DAC_0_PORT_init>:
struct i2c_m_sync_desc I2C_INSTANCE;

struct usart_sync_descriptor USART_0;

void DAC_0_PORT_init(void)
{
  400a9c:	b580      	push	{r7, lr}
  400a9e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, GPIO_PIN_FUNCTION_OFF);
  400aa0:	f04f 31ff 	mov.w	r1, #4294967295
  400aa4:	202d      	movs	r0, #45	; 0x2d
  400aa6:	4b04      	ldr	r3, [pc, #16]	; (400ab8 <DAC_0_PORT_init+0x1c>)
  400aa8:	4798      	blx	r3

	gpio_set_pin_function(PD0, GPIO_PIN_FUNCTION_OFF);
  400aaa:	f04f 31ff 	mov.w	r1, #4294967295
  400aae:	2060      	movs	r0, #96	; 0x60
  400ab0:	4b01      	ldr	r3, [pc, #4]	; (400ab8 <DAC_0_PORT_init+0x1c>)
  400ab2:	4798      	blx	r3
}
  400ab4:	bf00      	nop
  400ab6:	bd80      	pop	{r7, pc}
  400ab8:	00400949 	.word	0x00400949

00400abc <DAC_0_CLOCK_init>:

void DAC_0_CLOCK_init(void)
{
  400abc:	b580      	push	{r7, lr}
  400abe:	af00      	add	r7, sp, #0

	_pmc_enable_periph_clock(ID_DACC);
  400ac0:	201e      	movs	r0, #30
  400ac2:	4b02      	ldr	r3, [pc, #8]	; (400acc <DAC_0_CLOCK_init+0x10>)
  400ac4:	4798      	blx	r3
}
  400ac6:	bf00      	nop
  400ac8:	bd80      	pop	{r7, pc}
  400aca:	bf00      	nop
  400acc:	004009e9 	.word	0x004009e9

00400ad0 <DAC_0_init>:

void DAC_0_init(void)
{
  400ad0:	b580      	push	{r7, lr}
  400ad2:	af00      	add	r7, sp, #0
	DAC_0_CLOCK_init();
  400ad4:	4b04      	ldr	r3, [pc, #16]	; (400ae8 <DAC_0_init+0x18>)
  400ad6:	4798      	blx	r3
	dac_sync_init(&DAC_0, DACC);
  400ad8:	4904      	ldr	r1, [pc, #16]	; (400aec <DAC_0_init+0x1c>)
  400ada:	4805      	ldr	r0, [pc, #20]	; (400af0 <DAC_0_init+0x20>)
  400adc:	4b05      	ldr	r3, [pc, #20]	; (400af4 <DAC_0_init+0x24>)
  400ade:	4798      	blx	r3
	DAC_0_PORT_init();
  400ae0:	4b05      	ldr	r3, [pc, #20]	; (400af8 <DAC_0_init+0x28>)
  400ae2:	4798      	blx	r3
}
  400ae4:	bf00      	nop
  400ae6:	bd80      	pop	{r7, pc}
  400ae8:	00400abd 	.word	0x00400abd
  400aec:	40040000 	.word	0x40040000
  400af0:	204018e4 	.word	0x204018e4
  400af4:	004013c1 	.word	0x004013c1
  400af8:	00400a9d 	.word	0x00400a9d

00400afc <EXTERNAL_IRQ_1_init>:

void EXTERNAL_IRQ_1_init(void)
{
  400afc:	b580      	push	{r7, lr}
  400afe:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PD23, GPIO_DIRECTION_IN);
  400b00:	2101      	movs	r1, #1
  400b02:	2077      	movs	r0, #119	; 0x77
  400b04:	4b06      	ldr	r3, [pc, #24]	; (400b20 <EXTERNAL_IRQ_1_init+0x24>)
  400b06:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD23,
  400b08:	2100      	movs	r1, #0
  400b0a:	2077      	movs	r0, #119	; 0x77
  400b0c:	4b05      	ldr	r3, [pc, #20]	; (400b24 <EXTERNAL_IRQ_1_init+0x28>)
  400b0e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD23, GPIO_PIN_FUNCTION_OFF);
  400b10:	f04f 31ff 	mov.w	r1, #4294967295
  400b14:	2077      	movs	r0, #119	; 0x77
  400b16:	4b04      	ldr	r3, [pc, #16]	; (400b28 <EXTERNAL_IRQ_1_init+0x2c>)
  400b18:	4798      	blx	r3
}
  400b1a:	bf00      	nop
  400b1c:	bd80      	pop	{r7, pc}
  400b1e:	bf00      	nop
  400b20:	00400969 	.word	0x00400969
  400b24:	00400915 	.word	0x00400915
  400b28:	00400949 	.word	0x00400949

00400b2c <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
  400b2c:	b580      	push	{r7, lr}
  400b2e:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PB0, GPIO_DIRECTION_IN);
  400b30:	2101      	movs	r1, #1
  400b32:	2020      	movs	r0, #32
  400b34:	4b06      	ldr	r3, [pc, #24]	; (400b50 <EXTERNAL_IRQ_0_init+0x24>)
  400b36:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB0,
  400b38:	2100      	movs	r1, #0
  400b3a:	2020      	movs	r0, #32
  400b3c:	4b05      	ldr	r3, [pc, #20]	; (400b54 <EXTERNAL_IRQ_0_init+0x28>)
  400b3e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB0, GPIO_PIN_FUNCTION_OFF);
  400b40:	f04f 31ff 	mov.w	r1, #4294967295
  400b44:	2020      	movs	r0, #32
  400b46:	4b04      	ldr	r3, [pc, #16]	; (400b58 <EXTERNAL_IRQ_0_init+0x2c>)
  400b48:	4798      	blx	r3
}
  400b4a:	bf00      	nop
  400b4c:	bd80      	pop	{r7, pc}
  400b4e:	bf00      	nop
  400b50:	00400969 	.word	0x00400969
  400b54:	00400915 	.word	0x00400915
  400b58:	00400949 	.word	0x00400949

00400b5c <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
  400b5c:	b580      	push	{r7, lr}
  400b5e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD20, MUX_PD20B_SPI0_MISO);
  400b60:	2101      	movs	r1, #1
  400b62:	2074      	movs	r0, #116	; 0x74
  400b64:	4b05      	ldr	r3, [pc, #20]	; (400b7c <SPI_1_PORT_init+0x20>)
  400b66:	4798      	blx	r3

	gpio_set_pin_function(PD21, MUX_PD21B_SPI0_MOSI);
  400b68:	2101      	movs	r1, #1
  400b6a:	2075      	movs	r0, #117	; 0x75
  400b6c:	4b03      	ldr	r3, [pc, #12]	; (400b7c <SPI_1_PORT_init+0x20>)
  400b6e:	4798      	blx	r3

	gpio_set_pin_function(PD22, MUX_PD22B_SPI0_SPCK);
  400b70:	2101      	movs	r1, #1
  400b72:	2076      	movs	r0, #118	; 0x76
  400b74:	4b01      	ldr	r3, [pc, #4]	; (400b7c <SPI_1_PORT_init+0x20>)
  400b76:	4798      	blx	r3
}
  400b78:	bf00      	nop
  400b7a:	bd80      	pop	{r7, pc}
  400b7c:	00400949 	.word	0x00400949

00400b80 <SPI_1_CLOCK_init>:

void SPI_1_CLOCK_init(void)
{
  400b80:	b580      	push	{r7, lr}
  400b82:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI0);
  400b84:	2015      	movs	r0, #21
  400b86:	4b02      	ldr	r3, [pc, #8]	; (400b90 <SPI_1_CLOCK_init+0x10>)
  400b88:	4798      	blx	r3
}
  400b8a:	bf00      	nop
  400b8c:	bd80      	pop	{r7, pc}
  400b8e:	bf00      	nop
  400b90:	004009e9 	.word	0x004009e9

00400b94 <SPI_1_init>:

void SPI_1_init(void)
{
  400b94:	b580      	push	{r7, lr}
  400b96:	af00      	add	r7, sp, #0
	SPI_1_CLOCK_init();
  400b98:	4b04      	ldr	r3, [pc, #16]	; (400bac <SPI_1_init+0x18>)
  400b9a:	4798      	blx	r3
	spi_m_dma_init(&SPI_1, SPI0);
  400b9c:	4904      	ldr	r1, [pc, #16]	; (400bb0 <SPI_1_init+0x1c>)
  400b9e:	4805      	ldr	r0, [pc, #20]	; (400bb4 <SPI_1_init+0x20>)
  400ba0:	4b05      	ldr	r3, [pc, #20]	; (400bb8 <SPI_1_init+0x24>)
  400ba2:	4798      	blx	r3
	SPI_1_PORT_init();
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <SPI_1_init+0x28>)
  400ba6:	4798      	blx	r3
}
  400ba8:	bf00      	nop
  400baa:	bd80      	pop	{r7, pc}
  400bac:	00400b81 	.word	0x00400b81
  400bb0:	40008000 	.word	0x40008000
  400bb4:	204018bc 	.word	0x204018bc
  400bb8:	004017d5 	.word	0x004017d5
  400bbc:	00400b5d 	.word	0x00400b5d

00400bc0 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
  400bc0:	b580      	push	{r7, lr}
  400bc2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(MISO, MUX_PC26C_SPI1_MISO);
  400bc4:	2102      	movs	r1, #2
  400bc6:	205a      	movs	r0, #90	; 0x5a
  400bc8:	4b05      	ldr	r3, [pc, #20]	; (400be0 <SPI_0_PORT_init+0x20>)
  400bca:	4798      	blx	r3

	gpio_set_pin_function(MOSI, MUX_PC27C_SPI1_MOSI);
  400bcc:	2102      	movs	r1, #2
  400bce:	205b      	movs	r0, #91	; 0x5b
  400bd0:	4b03      	ldr	r3, [pc, #12]	; (400be0 <SPI_0_PORT_init+0x20>)
  400bd2:	4798      	blx	r3

	gpio_set_pin_function(SCLK, MUX_PC24C_SPI1_SPCK);
  400bd4:	2102      	movs	r1, #2
  400bd6:	2058      	movs	r0, #88	; 0x58
  400bd8:	4b01      	ldr	r3, [pc, #4]	; (400be0 <SPI_0_PORT_init+0x20>)
  400bda:	4798      	blx	r3
}
  400bdc:	bf00      	nop
  400bde:	bd80      	pop	{r7, pc}
  400be0:	00400949 	.word	0x00400949

00400be4 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
  400be4:	b580      	push	{r7, lr}
  400be6:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI1);
  400be8:	202a      	movs	r0, #42	; 0x2a
  400bea:	4b02      	ldr	r3, [pc, #8]	; (400bf4 <SPI_0_CLOCK_init+0x10>)
  400bec:	4798      	blx	r3
}
  400bee:	bf00      	nop
  400bf0:	bd80      	pop	{r7, pc}
  400bf2:	bf00      	nop
  400bf4:	004009e9 	.word	0x004009e9

00400bf8 <SPI_0_init>:

void SPI_0_init(void)
{
  400bf8:	b580      	push	{r7, lr}
  400bfa:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
  400bfc:	4b04      	ldr	r3, [pc, #16]	; (400c10 <SPI_0_init+0x18>)
  400bfe:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SPI1);
  400c00:	4904      	ldr	r1, [pc, #16]	; (400c14 <SPI_0_init+0x1c>)
  400c02:	4805      	ldr	r0, [pc, #20]	; (400c18 <SPI_0_init+0x20>)
  400c04:	4b05      	ldr	r3, [pc, #20]	; (400c1c <SPI_0_init+0x24>)
  400c06:	4798      	blx	r3
	SPI_0_PORT_init();
  400c08:	4b05      	ldr	r3, [pc, #20]	; (400c20 <SPI_0_init+0x28>)
  400c0a:	4798      	blx	r3
}
  400c0c:	bf00      	nop
  400c0e:	bd80      	pop	{r7, pc}
  400c10:	00400be5 	.word	0x00400be5
  400c14:	40058000 	.word	0x40058000
  400c18:	204018f8 	.word	0x204018f8
  400c1c:	004017d5 	.word	0x004017d5
  400c20:	00400bc1 	.word	0x00400bc1

00400c24 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
  400c24:	b580      	push	{r7, lr}
  400c26:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA4, MUX_PA4A_TWIHS0_TWCK0);
  400c28:	2100      	movs	r1, #0
  400c2a:	2004      	movs	r0, #4
  400c2c:	4b03      	ldr	r3, [pc, #12]	; (400c3c <I2C_0_PORT_init+0x18>)
  400c2e:	4798      	blx	r3

	gpio_set_pin_function(PA3, MUX_PA3A_TWIHS0_TWD0);
  400c30:	2100      	movs	r1, #0
  400c32:	2003      	movs	r0, #3
  400c34:	4b01      	ldr	r3, [pc, #4]	; (400c3c <I2C_0_PORT_init+0x18>)
  400c36:	4798      	blx	r3
}
  400c38:	bf00      	nop
  400c3a:	bd80      	pop	{r7, pc}
  400c3c:	00400949 	.word	0x00400949

00400c40 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
  400c40:	b580      	push	{r7, lr}
  400c42:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS0);
  400c44:	2013      	movs	r0, #19
  400c46:	4b02      	ldr	r3, [pc, #8]	; (400c50 <I2C_0_CLOCK_init+0x10>)
  400c48:	4798      	blx	r3
}
  400c4a:	bf00      	nop
  400c4c:	bd80      	pop	{r7, pc}
  400c4e:	bf00      	nop
  400c50:	004009e9 	.word	0x004009e9

00400c54 <I2C_0_init>:

void I2C_0_init(void)
{
  400c54:	b580      	push	{r7, lr}
  400c56:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
  400c58:	4b04      	ldr	r3, [pc, #16]	; (400c6c <I2C_0_init+0x18>)
  400c5a:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400c5c:	4904      	ldr	r1, [pc, #16]	; (400c70 <I2C_0_init+0x1c>)
  400c5e:	4805      	ldr	r0, [pc, #20]	; (400c74 <I2C_0_init+0x20>)
  400c60:	4b05      	ldr	r3, [pc, #20]	; (400c78 <I2C_0_init+0x24>)
  400c62:	4798      	blx	r3

	I2C_0_PORT_init();
  400c64:	4b05      	ldr	r3, [pc, #20]	; (400c7c <I2C_0_init+0x28>)
  400c66:	4798      	blx	r3
}
  400c68:	bf00      	nop
  400c6a:	bd80      	pop	{r7, pc}
  400c6c:	00400c41 	.word	0x00400c41
  400c70:	40018000 	.word	0x40018000
  400c74:	2040199c 	.word	0x2040199c
  400c78:	00401775 	.word	0x00401775
  400c7c:	00400c25 	.word	0x00400c25

00400c80 <I2C_INSTANCE_PORT_init>:

void I2C_INSTANCE_PORT_init(void)
{
  400c80:	b480      	push	{r7}
  400c82:	af00      	add	r7, sp, #0
}
  400c84:	bf00      	nop
  400c86:	46bd      	mov	sp, r7
  400c88:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c8c:	4770      	bx	lr
	...

00400c90 <I2C_INSTANCE_CLOCK_init>:

void I2C_INSTANCE_CLOCK_init(void)
{
  400c90:	b580      	push	{r7, lr}
  400c92:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS1);
  400c94:	2014      	movs	r0, #20
  400c96:	4b02      	ldr	r3, [pc, #8]	; (400ca0 <I2C_INSTANCE_CLOCK_init+0x10>)
  400c98:	4798      	blx	r3
}
  400c9a:	bf00      	nop
  400c9c:	bd80      	pop	{r7, pc}
  400c9e:	bf00      	nop
  400ca0:	004009e9 	.word	0x004009e9

00400ca4 <I2C_INSTANCE_init>:

void I2C_INSTANCE_init(void)
{
  400ca4:	b580      	push	{r7, lr}
  400ca6:	af00      	add	r7, sp, #0
	I2C_INSTANCE_CLOCK_init();
  400ca8:	4b04      	ldr	r3, [pc, #16]	; (400cbc <I2C_INSTANCE_init+0x18>)
  400caa:	4798      	blx	r3

	i2c_m_sync_init(&I2C_INSTANCE, TWIHS1);
  400cac:	4904      	ldr	r1, [pc, #16]	; (400cc0 <I2C_INSTANCE_init+0x1c>)
  400cae:	4805      	ldr	r0, [pc, #20]	; (400cc4 <I2C_INSTANCE_init+0x20>)
  400cb0:	4b05      	ldr	r3, [pc, #20]	; (400cc8 <I2C_INSTANCE_init+0x24>)
  400cb2:	4798      	blx	r3

	I2C_INSTANCE_PORT_init();
  400cb4:	4b05      	ldr	r3, [pc, #20]	; (400ccc <I2C_INSTANCE_init+0x28>)
  400cb6:	4798      	blx	r3
}
  400cb8:	bf00      	nop
  400cba:	bd80      	pop	{r7, pc}
  400cbc:	00400c91 	.word	0x00400c91
  400cc0:	4001c000 	.word	0x4001c000
  400cc4:	2040192c 	.word	0x2040192c
  400cc8:	00401775 	.word	0x00401775
  400ccc:	00400c81 	.word	0x00400c81

00400cd0 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA9, MUX_PA9A_UART0_URXD0);
  400cd4:	2100      	movs	r1, #0
  400cd6:	2009      	movs	r0, #9
  400cd8:	4b03      	ldr	r3, [pc, #12]	; (400ce8 <USART_0_PORT_init+0x18>)
  400cda:	4798      	blx	r3

	gpio_set_pin_function(PA10, MUX_PA10A_UART0_UTXD0);
  400cdc:	2100      	movs	r1, #0
  400cde:	200a      	movs	r0, #10
  400ce0:	4b01      	ldr	r3, [pc, #4]	; (400ce8 <USART_0_PORT_init+0x18>)
  400ce2:	4798      	blx	r3
}
  400ce4:	bf00      	nop
  400ce6:	bd80      	pop	{r7, pc}
  400ce8:	00400949 	.word	0x00400949

00400cec <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
  400cec:	b580      	push	{r7, lr}
  400cee:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART0);
  400cf0:	2007      	movs	r0, #7
  400cf2:	4b02      	ldr	r3, [pc, #8]	; (400cfc <USART_0_CLOCK_init+0x10>)
  400cf4:	4798      	blx	r3
}
  400cf6:	bf00      	nop
  400cf8:	bd80      	pop	{r7, pc}
  400cfa:	bf00      	nop
  400cfc:	004009e9 	.word	0x004009e9

00400d00 <USART_0_init>:

void USART_0_init(void)
{
  400d00:	b580      	push	{r7, lr}
  400d02:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
  400d04:	4b06      	ldr	r3, [pc, #24]	; (400d20 <USART_0_init+0x20>)
  400d06:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  400d08:	4b06      	ldr	r3, [pc, #24]	; (400d24 <USART_0_init+0x24>)
  400d0a:	4798      	blx	r3
  400d0c:	4603      	mov	r3, r0
  400d0e:	461a      	mov	r2, r3
  400d10:	4905      	ldr	r1, [pc, #20]	; (400d28 <USART_0_init+0x28>)
  400d12:	4806      	ldr	r0, [pc, #24]	; (400d2c <USART_0_init+0x2c>)
  400d14:	4b06      	ldr	r3, [pc, #24]	; (400d30 <USART_0_init+0x30>)
  400d16:	4798      	blx	r3
	USART_0_PORT_init();
  400d18:	4b06      	ldr	r3, [pc, #24]	; (400d34 <USART_0_init+0x34>)
  400d1a:	4798      	blx	r3
}
  400d1c:	bf00      	nop
  400d1e:	bd80      	pop	{r7, pc}
  400d20:	00400ced 	.word	0x00400ced
  400d24:	00404fa1 	.word	0x00404fa1
  400d28:	400e0800 	.word	0x400e0800
  400d2c:	20401920 	.word	0x20401920
  400d30:	00401d31 	.word	0x00401d31
  400d34:	00400cd1 	.word	0x00400cd1

00400d38 <USART_1_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_1_CLOCK_init()
{
  400d38:	b580      	push	{r7, lr}
  400d3a:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART4);
  400d3c:	202e      	movs	r0, #46	; 0x2e
  400d3e:	4b02      	ldr	r3, [pc, #8]	; (400d48 <USART_1_CLOCK_init+0x10>)
  400d40:	4798      	blx	r3
}
  400d42:	bf00      	nop
  400d44:	bd80      	pop	{r7, pc}
  400d46:	bf00      	nop
  400d48:	004009e9 	.word	0x004009e9

00400d4c <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
  400d4c:	b580      	push	{r7, lr}
  400d4e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD18, MUX_PD18C_UART4_URXD4);
  400d50:	2102      	movs	r1, #2
  400d52:	2072      	movs	r0, #114	; 0x72
  400d54:	4b03      	ldr	r3, [pc, #12]	; (400d64 <USART_1_PORT_init+0x18>)
  400d56:	4798      	blx	r3

	gpio_set_pin_function(PD19, MUX_PD19C_UART4_UTXD4);
  400d58:	2102      	movs	r1, #2
  400d5a:	2073      	movs	r0, #115	; 0x73
  400d5c:	4b01      	ldr	r3, [pc, #4]	; (400d64 <USART_1_PORT_init+0x18>)
  400d5e:	4798      	blx	r3
}
  400d60:	bf00      	nop
  400d62:	bd80      	pop	{r7, pc}
  400d64:	00400949 	.word	0x00400949

00400d68 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
  400d68:	b590      	push	{r4, r7, lr}
  400d6a:	b083      	sub	sp, #12
  400d6c:	af02      	add	r7, sp, #8
	USART_1_CLOCK_init();
  400d6e:	4b09      	ldr	r3, [pc, #36]	; (400d94 <USART_1_init+0x2c>)
  400d70:	4798      	blx	r3
	usart_async_init(&USART_1, UART4, USART_1_buffer, USART_1_BUFFER_SIZE, _uart_get_usart_async());
  400d72:	4b09      	ldr	r3, [pc, #36]	; (400d98 <USART_1_init+0x30>)
  400d74:	4798      	blx	r3
  400d76:	4603      	mov	r3, r0
  400d78:	9300      	str	r3, [sp, #0]
  400d7a:	2310      	movs	r3, #16
  400d7c:	4a07      	ldr	r2, [pc, #28]	; (400d9c <USART_1_init+0x34>)
  400d7e:	4908      	ldr	r1, [pc, #32]	; (400da0 <USART_1_init+0x38>)
  400d80:	4808      	ldr	r0, [pc, #32]	; (400da4 <USART_1_init+0x3c>)
  400d82:	4c09      	ldr	r4, [pc, #36]	; (400da8 <USART_1_init+0x40>)
  400d84:	47a0      	blx	r4
	USART_1_PORT_init();
  400d86:	4b09      	ldr	r3, [pc, #36]	; (400dac <USART_1_init+0x44>)
  400d88:	4798      	blx	r3
}
  400d8a:	bf00      	nop
  400d8c:	3704      	adds	r7, #4
  400d8e:	46bd      	mov	sp, r7
  400d90:	bd90      	pop	{r4, r7, pc}
  400d92:	bf00      	nop
  400d94:	00400d39 	.word	0x00400d39
  400d98:	00404fb1 	.word	0x00404fb1
  400d9c:	2040113c 	.word	0x2040113c
  400da0:	400e1e00 	.word	0x400e1e00
  400da4:	2040194c 	.word	0x2040194c
  400da8:	00401a2d 	.word	0x00401a2d
  400dac:	00400d4d 	.word	0x00400d4d

00400db0 <USB_DEVICE_INSTANCE_CLOCK_init>:
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif
#endif

void USB_DEVICE_INSTANCE_CLOCK_init(void)
{
  400db0:	b580      	push	{r7, lr}
  400db2:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_USBHS);
  400db4:	2022      	movs	r0, #34	; 0x22
  400db6:	4b02      	ldr	r3, [pc, #8]	; (400dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x10>)
  400db8:	4798      	blx	r3
}
  400dba:	bf00      	nop
  400dbc:	bd80      	pop	{r7, pc}
  400dbe:	bf00      	nop
  400dc0:	004009e9 	.word	0x004009e9

00400dc4 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
  400dc4:	b580      	push	{r7, lr}
  400dc6:	af00      	add	r7, sp, #0
	USB_DEVICE_INSTANCE_CLOCK_init();
  400dc8:	4b02      	ldr	r3, [pc, #8]	; (400dd4 <USB_DEVICE_INSTANCE_init+0x10>)
  400dca:	4798      	blx	r3
	usb_d_init();
  400dcc:	4b02      	ldr	r3, [pc, #8]	; (400dd8 <USB_DEVICE_INSTANCE_init+0x14>)
  400dce:	4798      	blx	r3
}
  400dd0:	bf00      	nop
  400dd2:	bd80      	pop	{r7, pc}
  400dd4:	00400db1 	.word	0x00400db1
  400dd8:	004022a9 	.word	0x004022a9

00400ddc <system_init>:

void system_init(void)
{
  400ddc:	b580      	push	{r7, lr}
  400dde:	af00      	add	r7, sp, #0
	init_mcu();
  400de0:	4b33      	ldr	r3, [pc, #204]	; (400eb0 <system_init+0xd4>)
  400de2:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOB);
  400de4:	200b      	movs	r0, #11
  400de6:	4b33      	ldr	r3, [pc, #204]	; (400eb4 <system_init+0xd8>)
  400de8:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOC);
  400dea:	200c      	movs	r0, #12
  400dec:	4b31      	ldr	r3, [pc, #196]	; (400eb4 <system_init+0xd8>)
  400dee:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOD);
  400df0:	2010      	movs	r0, #16
  400df2:	4b30      	ldr	r3, [pc, #192]	; (400eb4 <system_init+0xd8>)
  400df4:	4798      	blx	r3

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);
  400df6:	4830      	ldr	r0, [pc, #192]	; (400eb8 <system_init+0xdc>)
  400df8:	4b30      	ldr	r3, [pc, #192]	; (400ebc <system_init+0xe0>)
  400dfa:	4798      	blx	r3

	/* GPIO on PB1 */

	gpio_set_pin_level(AT86_1_RST,
  400dfc:	2100      	movs	r1, #0
  400dfe:	2021      	movs	r0, #33	; 0x21
  400e00:	4b2f      	ldr	r3, [pc, #188]	; (400ec0 <system_init+0xe4>)
  400e02:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(AT86_1_RST, GPIO_DIRECTION_OUT);
  400e04:	2102      	movs	r1, #2
  400e06:	2021      	movs	r0, #33	; 0x21
  400e08:	4b2e      	ldr	r3, [pc, #184]	; (400ec4 <system_init+0xe8>)
  400e0a:	4798      	blx	r3

	gpio_set_pin_function(AT86_1_RST, GPIO_PIN_FUNCTION_OFF);
  400e0c:	f04f 31ff 	mov.w	r1, #4294967295
  400e10:	2021      	movs	r0, #33	; 0x21
  400e12:	4b2d      	ldr	r3, [pc, #180]	; (400ec8 <system_init+0xec>)
  400e14:	4798      	blx	r3

	/* GPIO on PC7 */

	gpio_set_pin_level(LED0,
  400e16:	2100      	movs	r1, #0
  400e18:	2047      	movs	r0, #71	; 0x47
  400e1a:	4b29      	ldr	r3, [pc, #164]	; (400ec0 <system_init+0xe4>)
  400e1c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
  400e1e:	2102      	movs	r1, #2
  400e20:	2047      	movs	r0, #71	; 0x47
  400e22:	4b28      	ldr	r3, [pc, #160]	; (400ec4 <system_init+0xe8>)
  400e24:	4798      	blx	r3

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
  400e26:	f04f 31ff 	mov.w	r1, #4294967295
  400e2a:	2047      	movs	r0, #71	; 0x47
  400e2c:	4b26      	ldr	r3, [pc, #152]	; (400ec8 <system_init+0xec>)
  400e2e:	4798      	blx	r3

	/* GPIO on PC25 */

	gpio_set_pin_level(CS,
  400e30:	2100      	movs	r1, #0
  400e32:	2059      	movs	r0, #89	; 0x59
  400e34:	4b22      	ldr	r3, [pc, #136]	; (400ec0 <system_init+0xe4>)
  400e36:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS, GPIO_DIRECTION_OUT);
  400e38:	2102      	movs	r1, #2
  400e3a:	2059      	movs	r0, #89	; 0x59
  400e3c:	4b21      	ldr	r3, [pc, #132]	; (400ec4 <system_init+0xe8>)
  400e3e:	4798      	blx	r3

	gpio_set_pin_function(CS, GPIO_PIN_FUNCTION_OFF);
  400e40:	f04f 31ff 	mov.w	r1, #4294967295
  400e44:	2059      	movs	r0, #89	; 0x59
  400e46:	4b20      	ldr	r3, [pc, #128]	; (400ec8 <system_init+0xec>)
  400e48:	4798      	blx	r3

	/* GPIO on PD17 */

	gpio_set_pin_level(CS_2,
  400e4a:	2100      	movs	r1, #0
  400e4c:	2071      	movs	r0, #113	; 0x71
  400e4e:	4b1c      	ldr	r3, [pc, #112]	; (400ec0 <system_init+0xe4>)
  400e50:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS_2, GPIO_DIRECTION_OUT);
  400e52:	2102      	movs	r1, #2
  400e54:	2071      	movs	r0, #113	; 0x71
  400e56:	4b1b      	ldr	r3, [pc, #108]	; (400ec4 <system_init+0xe8>)
  400e58:	4798      	blx	r3

	gpio_set_pin_function(CS_2, GPIO_PIN_FUNCTION_OFF);
  400e5a:	f04f 31ff 	mov.w	r1, #4294967295
  400e5e:	2071      	movs	r0, #113	; 0x71
  400e60:	4b19      	ldr	r3, [pc, #100]	; (400ec8 <system_init+0xec>)
  400e62:	4798      	blx	r3

	/* GPIO on PD24 */

	gpio_set_pin_level(AT86_2_RST,
  400e64:	2100      	movs	r1, #0
  400e66:	2078      	movs	r0, #120	; 0x78
  400e68:	4b15      	ldr	r3, [pc, #84]	; (400ec0 <system_init+0xe4>)
  400e6a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(AT86_2_RST, GPIO_DIRECTION_OUT);
  400e6c:	2102      	movs	r1, #2
  400e6e:	2078      	movs	r0, #120	; 0x78
  400e70:	4b14      	ldr	r3, [pc, #80]	; (400ec4 <system_init+0xe8>)
  400e72:	4798      	blx	r3

	gpio_set_pin_function(AT86_2_RST, GPIO_PIN_FUNCTION_OFF);
  400e74:	f04f 31ff 	mov.w	r1, #4294967295
  400e78:	2078      	movs	r0, #120	; 0x78
  400e7a:	4b13      	ldr	r3, [pc, #76]	; (400ec8 <system_init+0xec>)
  400e7c:	4798      	blx	r3

	DAC_0_init();
  400e7e:	4b13      	ldr	r3, [pc, #76]	; (400ecc <system_init+0xf0>)
  400e80:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  400e82:	4b13      	ldr	r3, [pc, #76]	; (400ed0 <system_init+0xf4>)
  400e84:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400e86:	4b13      	ldr	r3, [pc, #76]	; (400ed4 <system_init+0xf8>)
  400e88:	4798      	blx	r3

	SPI_1_init();
  400e8a:	4b13      	ldr	r3, [pc, #76]	; (400ed8 <system_init+0xfc>)
  400e8c:	4798      	blx	r3

	SPI_0_init();
  400e8e:	4b13      	ldr	r3, [pc, #76]	; (400edc <system_init+0x100>)
  400e90:	4798      	blx	r3

	I2C_0_init();
  400e92:	4b13      	ldr	r3, [pc, #76]	; (400ee0 <system_init+0x104>)
  400e94:	4798      	blx	r3

	I2C_INSTANCE_init();
  400e96:	4b13      	ldr	r3, [pc, #76]	; (400ee4 <system_init+0x108>)
  400e98:	4798      	blx	r3

	USART_0_init();
  400e9a:	4b13      	ldr	r3, [pc, #76]	; (400ee8 <system_init+0x10c>)
  400e9c:	4798      	blx	r3
	USART_1_init();
  400e9e:	4b13      	ldr	r3, [pc, #76]	; (400eec <system_init+0x110>)
  400ea0:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
  400ea2:	4b13      	ldr	r3, [pc, #76]	; (400ef0 <system_init+0x114>)
  400ea4:	4798      	blx	r3

	ext_irq_init();
  400ea6:	4b13      	ldr	r3, [pc, #76]	; (400ef4 <system_init+0x118>)
  400ea8:	4798      	blx	r3
}
  400eaa:	bf00      	nop
  400eac:	bd80      	pop	{r7, pc}
  400eae:	bf00      	nop
  400eb0:	004009d9 	.word	0x004009d9
  400eb4:	004009e9 	.word	0x004009e9
  400eb8:	400e1850 	.word	0x400e1850
  400ebc:	0040065b 	.word	0x0040065b
  400ec0:	004009a1 	.word	0x004009a1
  400ec4:	00400969 	.word	0x00400969
  400ec8:	00400949 	.word	0x00400949
  400ecc:	00400ad1 	.word	0x00400ad1
  400ed0:	00400afd 	.word	0x00400afd
  400ed4:	00400b2d 	.word	0x00400b2d
  400ed8:	00400b95 	.word	0x00400b95
  400edc:	00400bf9 	.word	0x00400bf9
  400ee0:	00400c55 	.word	0x00400c55
  400ee4:	00400ca5 	.word	0x00400ca5
  400ee8:	00400d01 	.word	0x00400d01
  400eec:	00400d69 	.word	0x00400d69
  400ef0:	00400dc5 	.word	0x00400dc5
  400ef4:	004014ad 	.word	0x004014ad

00400ef8 <hri_pio_set_ODSR_reg>:
{
  400ef8:	b480      	push	{r7}
  400efa:	b083      	sub	sp, #12
  400efc:	af00      	add	r7, sp, #0
  400efe:	6078      	str	r0, [r7, #4]
  400f00:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400f02:	687b      	ldr	r3, [r7, #4]
  400f04:	683a      	ldr	r2, [r7, #0]
  400f06:	631a      	str	r2, [r3, #48]	; 0x30
}
  400f08:	bf00      	nop
  400f0a:	370c      	adds	r7, #12
  400f0c:	46bd      	mov	sp, r7
  400f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f12:	4770      	bx	lr

00400f14 <hri_pio_get_ODSR_reg>:
{
  400f14:	b480      	push	{r7}
  400f16:	b085      	sub	sp, #20
  400f18:	af00      	add	r7, sp, #0
  400f1a:	6078      	str	r0, [r7, #4]
  400f1c:	6039      	str	r1, [r7, #0]
	tmp = ((Pio *)hw)->PIO_ODSR;
  400f1e:	687b      	ldr	r3, [r7, #4]
  400f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f22:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400f24:	68fa      	ldr	r2, [r7, #12]
  400f26:	683b      	ldr	r3, [r7, #0]
  400f28:	4013      	ands	r3, r2
  400f2a:	60fb      	str	r3, [r7, #12]
	return tmp;
  400f2c:	68fb      	ldr	r3, [r7, #12]
}
  400f2e:	4618      	mov	r0, r3
  400f30:	3714      	adds	r7, #20
  400f32:	46bd      	mov	sp, r7
  400f34:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f38:	4770      	bx	lr

00400f3a <hri_pio_clear_ODSR_reg>:
{
  400f3a:	b480      	push	{r7}
  400f3c:	b083      	sub	sp, #12
  400f3e:	af00      	add	r7, sp, #0
  400f40:	6078      	str	r0, [r7, #4]
  400f42:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400f44:	687b      	ldr	r3, [r7, #4]
  400f46:	683a      	ldr	r2, [r7, #0]
  400f48:	635a      	str	r2, [r3, #52]	; 0x34
}
  400f4a:	bf00      	nop
  400f4c:	370c      	adds	r7, #12
  400f4e:	46bd      	mov	sp, r7
  400f50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f54:	4770      	bx	lr
	...

00400f58 <port_to_reg>:
{
  400f58:	b480      	push	{r7}
  400f5a:	b083      	sub	sp, #12
  400f5c:	af00      	add	r7, sp, #0
  400f5e:	4603      	mov	r3, r0
  400f60:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  400f62:	79fb      	ldrb	r3, [r7, #7]
  400f64:	025b      	lsls	r3, r3, #9
  400f66:	461a      	mov	r2, r3
  400f68:	4b03      	ldr	r3, [pc, #12]	; (400f78 <port_to_reg+0x20>)
  400f6a:	4413      	add	r3, r2
}
  400f6c:	4618      	mov	r0, r3
  400f6e:	370c      	adds	r7, #12
  400f70:	46bd      	mov	sp, r7
  400f72:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f76:	4770      	bx	lr
  400f78:	400e0e00 	.word	0x400e0e00

00400f7c <_gpio_set_level>:
{
  400f7c:	b580      	push	{r7, lr}
  400f7e:	b084      	sub	sp, #16
  400f80:	af00      	add	r7, sp, #0
  400f82:	4603      	mov	r3, r0
  400f84:	6039      	str	r1, [r7, #0]
  400f86:	71fb      	strb	r3, [r7, #7]
  400f88:	4613      	mov	r3, r2
  400f8a:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400f8c:	79fb      	ldrb	r3, [r7, #7]
  400f8e:	4618      	mov	r0, r3
  400f90:	4b09      	ldr	r3, [pc, #36]	; (400fb8 <_gpio_set_level+0x3c>)
  400f92:	4798      	blx	r3
  400f94:	60f8      	str	r0, [r7, #12]
	if (level) {
  400f96:	79bb      	ldrb	r3, [r7, #6]
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d004      	beq.n	400fa6 <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  400f9c:	6839      	ldr	r1, [r7, #0]
  400f9e:	68f8      	ldr	r0, [r7, #12]
  400fa0:	4b06      	ldr	r3, [pc, #24]	; (400fbc <_gpio_set_level+0x40>)
  400fa2:	4798      	blx	r3
}
  400fa4:	e003      	b.n	400fae <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  400fa6:	6839      	ldr	r1, [r7, #0]
  400fa8:	68f8      	ldr	r0, [r7, #12]
  400faa:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <_gpio_set_level+0x44>)
  400fac:	4798      	blx	r3
}
  400fae:	bf00      	nop
  400fb0:	3710      	adds	r7, #16
  400fb2:	46bd      	mov	sp, r7
  400fb4:	bd80      	pop	{r7, pc}
  400fb6:	bf00      	nop
  400fb8:	00400f59 	.word	0x00400f59
  400fbc:	00400ef9 	.word	0x00400ef9
  400fc0:	00400f3b 	.word	0x00400f3b

00400fc4 <_gpio_toggle_level>:
{
  400fc4:	b580      	push	{r7, lr}
  400fc6:	b086      	sub	sp, #24
  400fc8:	af00      	add	r7, sp, #0
  400fca:	4603      	mov	r3, r0
  400fcc:	6039      	str	r1, [r7, #0]
  400fce:	71fb      	strb	r3, [r7, #7]
	void *const hw = port_to_reg(port);
  400fd0:	79fb      	ldrb	r3, [r7, #7]
  400fd2:	4618      	mov	r0, r3
  400fd4:	4b0c      	ldr	r3, [pc, #48]	; (401008 <_gpio_toggle_level+0x44>)
  400fd6:	4798      	blx	r3
  400fd8:	6178      	str	r0, [r7, #20]
	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
  400fda:	6839      	ldr	r1, [r7, #0]
  400fdc:	6978      	ldr	r0, [r7, #20]
  400fde:	4b0b      	ldr	r3, [pc, #44]	; (40100c <_gpio_toggle_level+0x48>)
  400fe0:	4798      	blx	r3
  400fe2:	6138      	str	r0, [r7, #16]
	bits_set   = (~bits_clear) & mask;
  400fe4:	693b      	ldr	r3, [r7, #16]
  400fe6:	43da      	mvns	r2, r3
  400fe8:	683b      	ldr	r3, [r7, #0]
  400fea:	4013      	ands	r3, r2
  400fec:	60fb      	str	r3, [r7, #12]
	hri_pio_set_ODSR_reg(hw, bits_set);
  400fee:	68f9      	ldr	r1, [r7, #12]
  400ff0:	6978      	ldr	r0, [r7, #20]
  400ff2:	4b07      	ldr	r3, [pc, #28]	; (401010 <_gpio_toggle_level+0x4c>)
  400ff4:	4798      	blx	r3
	hri_pio_clear_ODSR_reg(hw, bits_clear);
  400ff6:	6939      	ldr	r1, [r7, #16]
  400ff8:	6978      	ldr	r0, [r7, #20]
  400ffa:	4b06      	ldr	r3, [pc, #24]	; (401014 <_gpio_toggle_level+0x50>)
  400ffc:	4798      	blx	r3
}
  400ffe:	bf00      	nop
  401000:	3718      	adds	r7, #24
  401002:	46bd      	mov	sp, r7
  401004:	bd80      	pop	{r7, pc}
  401006:	bf00      	nop
  401008:	00400f59 	.word	0x00400f59
  40100c:	00400f15 	.word	0x00400f15
  401010:	00400ef9 	.word	0x00400ef9
  401014:	00400f3b 	.word	0x00400f3b

00401018 <gpio_set_pin_level>:
{
  401018:	b580      	push	{r7, lr}
  40101a:	b082      	sub	sp, #8
  40101c:	af00      	add	r7, sp, #0
  40101e:	4603      	mov	r3, r0
  401020:	460a      	mov	r2, r1
  401022:	71fb      	strb	r3, [r7, #7]
  401024:	4613      	mov	r3, r2
  401026:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  401028:	79fb      	ldrb	r3, [r7, #7]
  40102a:	095b      	lsrs	r3, r3, #5
  40102c:	b2d8      	uxtb	r0, r3
  40102e:	79fb      	ldrb	r3, [r7, #7]
  401030:	f003 031f 	and.w	r3, r3, #31
  401034:	2201      	movs	r2, #1
  401036:	fa02 f303 	lsl.w	r3, r2, r3
  40103a:	79ba      	ldrb	r2, [r7, #6]
  40103c:	4619      	mov	r1, r3
  40103e:	4b03      	ldr	r3, [pc, #12]	; (40104c <gpio_set_pin_level+0x34>)
  401040:	4798      	blx	r3
}
  401042:	bf00      	nop
  401044:	3708      	adds	r7, #8
  401046:	46bd      	mov	sp, r7
  401048:	bd80      	pop	{r7, pc}
  40104a:	bf00      	nop
  40104c:	00400f7d 	.word	0x00400f7d

00401050 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
  401050:	b580      	push	{r7, lr}
  401052:	b082      	sub	sp, #8
  401054:	af00      	add	r7, sp, #0
  401056:	4603      	mov	r3, r0
  401058:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  40105a:	79fb      	ldrb	r3, [r7, #7]
  40105c:	095b      	lsrs	r3, r3, #5
  40105e:	b2d8      	uxtb	r0, r3
  401060:	79fb      	ldrb	r3, [r7, #7]
  401062:	f003 031f 	and.w	r3, r3, #31
  401066:	2201      	movs	r2, #1
  401068:	fa02 f303 	lsl.w	r3, r2, r3
  40106c:	4619      	mov	r1, r3
  40106e:	4b03      	ldr	r3, [pc, #12]	; (40107c <gpio_toggle_pin_level+0x2c>)
  401070:	4798      	blx	r3
}
  401072:	bf00      	nop
  401074:	3708      	adds	r7, #8
  401076:	46bd      	mov	sp, r7
  401078:	bd80      	pop	{r7, pc}
  40107a:	bf00      	nop
  40107c:	00400fc5 	.word	0x00400fc5

00401080 <glue_crash_and_burn>:

bool glue_spi_in_process(SpiDevice *spi_dev);

//For use during debugging.  Mainly used to check that things don't return zero.
static inline void glue_crash_and_burn(void)
{
  401080:	b580      	push	{r7, lr}
  401082:	b082      	sub	sp, #8
  401084:	af00      	add	r7, sp, #0
	while(1)
	{
		gpio_toggle_pin_level(LED0);
  401086:	2047      	movs	r0, #71	; 0x47
  401088:	4b07      	ldr	r3, [pc, #28]	; (4010a8 <glue_crash_and_burn+0x28>)
  40108a:	4798      	blx	r3
		//delay_ms(1);
		uint8_t test;
		for(uint32_t i = 0; i < 150000000; i++)
  40108c:	2300      	movs	r3, #0
  40108e:	603b      	str	r3, [r7, #0]
  401090:	e005      	b.n	40109e <glue_crash_and_burn+0x1e>
		{
			test++;
  401092:	79fb      	ldrb	r3, [r7, #7]
  401094:	3301      	adds	r3, #1
  401096:	71fb      	strb	r3, [r7, #7]
		for(uint32_t i = 0; i < 150000000; i++)
  401098:	683b      	ldr	r3, [r7, #0]
  40109a:	3301      	adds	r3, #1
  40109c:	603b      	str	r3, [r7, #0]
  40109e:	683b      	ldr	r3, [r7, #0]
  4010a0:	4a02      	ldr	r2, [pc, #8]	; (4010ac <glue_crash_and_burn+0x2c>)
  4010a2:	4293      	cmp	r3, r2
  4010a4:	d9f5      	bls.n	401092 <glue_crash_and_burn+0x12>
	{
  4010a6:	e7ee      	b.n	401086 <glue_crash_and_burn+0x6>
  4010a8:	00401051 	.word	0x00401051
  4010ac:	08f0d17f 	.word	0x08f0d17f

004010b0 <glue_init>:
		//};
}
*/

void glue_init(void)
{
  4010b0:	b580      	push	{r7, lr}
  4010b2:	af00      	add	r7, sp, #0
	//Set up USB communications
	//init_usb_stack();
	
	//Set up SPI0
	//Set up IRQ0
	SPI_ZERO.halSpiDriver = &SPI_0;
  4010b4:	4b46      	ldr	r3, [pc, #280]	; (4011d0 <glue_init+0x120>)
  4010b6:	4a47      	ldr	r2, [pc, #284]	; (4011d4 <glue_init+0x124>)
  4010b8:	601a      	str	r2, [r3, #0]
	SPI_ONE.halSpiDriver = &SPI_1;
  4010ba:	4b47      	ldr	r3, [pc, #284]	; (4011d8 <glue_init+0x128>)
  4010bc:	4a47      	ldr	r2, [pc, #284]	; (4011dc <glue_init+0x12c>)
  4010be:	601a      	str	r2, [r3, #0]
	//IRQ_ZERO.halIRQDriver = IRQ0;
	
	AT86_Init(&SPI_ZERO, &IRQ_ZERO, AT86_INSTANCE0);
  4010c0:	2200      	movs	r2, #0
  4010c2:	4947      	ldr	r1, [pc, #284]	; (4011e0 <glue_init+0x130>)
  4010c4:	4842      	ldr	r0, [pc, #264]	; (4011d0 <glue_init+0x120>)
  4010c6:	4b47      	ldr	r3, [pc, #284]	; (4011e4 <glue_init+0x134>)
  4010c8:	4798      	blx	r3
	AT86_Init(&SPI_ONE, &IRQ_ONE, AT86_INSTANCE1);
  4010ca:	2201      	movs	r2, #1
  4010cc:	4946      	ldr	r1, [pc, #280]	; (4011e8 <glue_init+0x138>)
  4010ce:	4842      	ldr	r0, [pc, #264]	; (4011d8 <glue_init+0x128>)
  4010d0:	4b44      	ldr	r3, [pc, #272]	; (4011e4 <glue_init+0x134>)
  4010d2:	4798      	blx	r3
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi0_cb_tx_done);
  4010d4:	4b3e      	ldr	r3, [pc, #248]	; (4011d0 <glue_init+0x120>)
  4010d6:	681b      	ldr	r3, [r3, #0]
  4010d8:	4a44      	ldr	r2, [pc, #272]	; (4011ec <glue_init+0x13c>)
  4010da:	2100      	movs	r1, #0
  4010dc:	4618      	mov	r0, r3
  4010de:	4b44      	ldr	r3, [pc, #272]	; (4011f0 <glue_init+0x140>)
  4010e0:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi0_cb_rx_done);
  4010e2:	4b3b      	ldr	r3, [pc, #236]	; (4011d0 <glue_init+0x120>)
  4010e4:	681b      	ldr	r3, [r3, #0]
  4010e6:	4a43      	ldr	r2, [pc, #268]	; (4011f4 <glue_init+0x144>)
  4010e8:	2101      	movs	r1, #1
  4010ea:	4618      	mov	r0, r3
  4010ec:	4b40      	ldr	r3, [pc, #256]	; (4011f0 <glue_init+0x140>)
  4010ee:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi0_cb_error);
  4010f0:	4b37      	ldr	r3, [pc, #220]	; (4011d0 <glue_init+0x120>)
  4010f2:	681b      	ldr	r3, [r3, #0]
  4010f4:	4a40      	ldr	r2, [pc, #256]	; (4011f8 <glue_init+0x148>)
  4010f6:	2102      	movs	r1, #2
  4010f8:	4618      	mov	r0, r3
  4010fa:	4b3d      	ldr	r3, [pc, #244]	; (4011f0 <glue_init+0x140>)
  4010fc:	4798      	blx	r3
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi1_cb_tx_done);
  4010fe:	4b36      	ldr	r3, [pc, #216]	; (4011d8 <glue_init+0x128>)
  401100:	681b      	ldr	r3, [r3, #0]
  401102:	4a3e      	ldr	r2, [pc, #248]	; (4011fc <glue_init+0x14c>)
  401104:	2100      	movs	r1, #0
  401106:	4618      	mov	r0, r3
  401108:	4b39      	ldr	r3, [pc, #228]	; (4011f0 <glue_init+0x140>)
  40110a:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi1_cb_rx_done);
  40110c:	4b32      	ldr	r3, [pc, #200]	; (4011d8 <glue_init+0x128>)
  40110e:	681b      	ldr	r3, [r3, #0]
  401110:	4a3b      	ldr	r2, [pc, #236]	; (401200 <glue_init+0x150>)
  401112:	2101      	movs	r1, #1
  401114:	4618      	mov	r0, r3
  401116:	4b36      	ldr	r3, [pc, #216]	; (4011f0 <glue_init+0x140>)
  401118:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi1_cb_error);
  40111a:	4b2f      	ldr	r3, [pc, #188]	; (4011d8 <glue_init+0x128>)
  40111c:	681b      	ldr	r3, [r3, #0]
  40111e:	4a39      	ldr	r2, [pc, #228]	; (401204 <glue_init+0x154>)
  401120:	2102      	movs	r1, #2
  401122:	4618      	mov	r0, r3
  401124:	4b32      	ldr	r3, [pc, #200]	; (4011f0 <glue_init+0x140>)
  401126:	4798      	blx	r3
	
	ext_irq_register(PIO_PB0_IDX, IRQ_ZERO.callback);
  401128:	4b2d      	ldr	r3, [pc, #180]	; (4011e0 <glue_init+0x130>)
  40112a:	689b      	ldr	r3, [r3, #8]
  40112c:	4619      	mov	r1, r3
  40112e:	2020      	movs	r0, #32
  401130:	4b35      	ldr	r3, [pc, #212]	; (401208 <glue_init+0x158>)
  401132:	4798      	blx	r3
	ext_irq_register(PIO_PD23_IDX, IRQ_ONE.callback);
  401134:	4b2c      	ldr	r3, [pc, #176]	; (4011e8 <glue_init+0x138>)
  401136:	689b      	ldr	r3, [r3, #8]
  401138:	4619      	mov	r1, r3
  40113a:	2077      	movs	r0, #119	; 0x77
  40113c:	4b32      	ldr	r3, [pc, #200]	; (401208 <glue_init+0x158>)
  40113e:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_0, SPI_MODE_0);
  401140:	2100      	movs	r1, #0
  401142:	4824      	ldr	r0, [pc, #144]	; (4011d4 <glue_init+0x124>)
  401144:	4b31      	ldr	r3, [pc, #196]	; (40120c <glue_init+0x15c>)
  401146:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_0, 1000000);
  401148:	4931      	ldr	r1, [pc, #196]	; (401210 <glue_init+0x160>)
  40114a:	4822      	ldr	r0, [pc, #136]	; (4011d4 <glue_init+0x124>)
  40114c:	4b31      	ldr	r3, [pc, #196]	; (401214 <glue_init+0x164>)
  40114e:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
  401150:	2100      	movs	r1, #0
  401152:	4820      	ldr	r0, [pc, #128]	; (4011d4 <glue_init+0x124>)
  401154:	4b30      	ldr	r3, [pc, #192]	; (401218 <glue_init+0x168>)
  401156:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_1, SPI_MODE_0);
  401158:	2100      	movs	r1, #0
  40115a:	4820      	ldr	r0, [pc, #128]	; (4011dc <glue_init+0x12c>)
  40115c:	4b2b      	ldr	r3, [pc, #172]	; (40120c <glue_init+0x15c>)
  40115e:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_1, 1000000);
  401160:	492b      	ldr	r1, [pc, #172]	; (401210 <glue_init+0x160>)
  401162:	481e      	ldr	r0, [pc, #120]	; (4011dc <glue_init+0x12c>)
  401164:	4b2b      	ldr	r3, [pc, #172]	; (401214 <glue_init+0x164>)
  401166:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_1, SPI_CHAR_SIZE_8);
  401168:	2100      	movs	r1, #0
  40116a:	481c      	ldr	r0, [pc, #112]	; (4011dc <glue_init+0x12c>)
  40116c:	4b2a      	ldr	r3, [pc, #168]	; (401218 <glue_init+0x168>)
  40116e:	4798      	blx	r3
	
	spi_m_dma_enable(&SPI_0);
  401170:	4818      	ldr	r0, [pc, #96]	; (4011d4 <glue_init+0x124>)
  401172:	4b2a      	ldr	r3, [pc, #168]	; (40121c <glue_init+0x16c>)
  401174:	4798      	blx	r3
	spi_m_dma_enable(&SPI_1);
  401176:	4819      	ldr	r0, [pc, #100]	; (4011dc <glue_init+0x12c>)
  401178:	4b28      	ldr	r3, [pc, #160]	; (40121c <glue_init+0x16c>)
  40117a:	4798      	blx	r3
	
	gpio_set_pin_level(CS, true);
  40117c:	2101      	movs	r1, #1
  40117e:	2059      	movs	r0, #89	; 0x59
  401180:	4b27      	ldr	r3, [pc, #156]	; (401220 <glue_init+0x170>)
  401182:	4798      	blx	r3
	gpio_set_pin_level(CS_2, true);
  401184:	2101      	movs	r1, #1
  401186:	2071      	movs	r0, #113	; 0x71
  401188:	4b25      	ldr	r3, [pc, #148]	; (401220 <glue_init+0x170>)
  40118a:	4798      	blx	r3
	
	gpio_set_pin_level(LED0, false);
  40118c:	2100      	movs	r1, #0
  40118e:	2047      	movs	r0, #71	; 0x47
  401190:	4b23      	ldr	r3, [pc, #140]	; (401220 <glue_init+0x170>)
  401192:	4798      	blx	r3
	gpio_set_pin_level(AT86_1_RST, false);	
  401194:	2100      	movs	r1, #0
  401196:	2021      	movs	r0, #33	; 0x21
  401198:	4b21      	ldr	r3, [pc, #132]	; (401220 <glue_init+0x170>)
  40119a:	4798      	blx	r3
	delay_us(100000);
  40119c:	f248 60a0 	movw	r0, #34464	; 0x86a0
  4011a0:	4b20      	ldr	r3, [pc, #128]	; (401224 <glue_init+0x174>)
  4011a2:	4798      	blx	r3
	gpio_set_pin_level(AT86_1_RST, true);
  4011a4:	2101      	movs	r1, #1
  4011a6:	2021      	movs	r0, #33	; 0x21
  4011a8:	4b1d      	ldr	r3, [pc, #116]	; (401220 <glue_init+0x170>)
  4011aa:	4798      	blx	r3
	
	gpio_set_pin_level(AT86_2_RST, false);
  4011ac:	2100      	movs	r1, #0
  4011ae:	2078      	movs	r0, #120	; 0x78
  4011b0:	4b1b      	ldr	r3, [pc, #108]	; (401220 <glue_init+0x170>)
  4011b2:	4798      	blx	r3
	delay_us(100000);
  4011b4:	f248 60a0 	movw	r0, #34464	; 0x86a0
  4011b8:	4b1a      	ldr	r3, [pc, #104]	; (401224 <glue_init+0x174>)
  4011ba:	4798      	blx	r3
	gpio_set_pin_level(AT86_2_RST, true);
  4011bc:	2101      	movs	r1, #1
  4011be:	2078      	movs	r0, #120	; 0x78
  4011c0:	4b17      	ldr	r3, [pc, #92]	; (401220 <glue_init+0x170>)
  4011c2:	4798      	blx	r3
	
	gpio_set_pin_level(LED0, true);
  4011c4:	2101      	movs	r1, #1
  4011c6:	2047      	movs	r0, #71	; 0x47
  4011c8:	4b15      	ldr	r3, [pc, #84]	; (401220 <glue_init+0x170>)
  4011ca:	4798      	blx	r3
}
  4011cc:	bf00      	nop
  4011ce:	bd80      	pop	{r7, pc}
  4011d0:	204015ac 	.word	0x204015ac
  4011d4:	204018f8 	.word	0x204018f8
  4011d8:	204015c0 	.word	0x204015c0
  4011dc:	204018bc 	.word	0x204018bc
  4011e0:	204015b4 	.word	0x204015b4
  4011e4:	004001c1 	.word	0x004001c1
  4011e8:	204015c8 	.word	0x204015c8
  4011ec:	00401265 	.word	0x00401265
  4011f0:	004019e9 	.word	0x004019e9
  4011f4:	00401295 	.word	0x00401295
  4011f8:	004012c5 	.word	0x004012c5
  4011fc:	004012ed 	.word	0x004012ed
  401200:	0040131d 	.word	0x0040131d
  401204:	0040134d 	.word	0x0040134d
  401208:	004014f9 	.word	0x004014f9
  40120c:	004018c9 	.word	0x004018c9
  401210:	000f4240 	.word	0x000f4240
  401214:	00401889 	.word	0x00401889
  401218:	0040190d 	.word	0x0040190d
  40121c:	0040184d 	.word	0x0040184d
  401220:	00401019 	.word	0x00401019
  401224:	00401445 	.word	0x00401445

00401228 <glue_set_peripherals_inited>:

void glue_set_peripherals_inited(void)
{
  401228:	b480      	push	{r7}
  40122a:	af00      	add	r7, sp, #0
	peripherals_inited = true;
  40122c:	4b03      	ldr	r3, [pc, #12]	; (40123c <glue_set_peripherals_inited+0x14>)
  40122e:	2201      	movs	r2, #1
  401230:	701a      	strb	r2, [r3, #0]
}
  401232:	bf00      	nop
  401234:	46bd      	mov	sp, r7
  401236:	f85d 7b04 	ldr.w	r7, [sp], #4
  40123a:	4770      	bx	lr
  40123c:	2040158c 	.word	0x2040158c

00401240 <glue_enforce_driver_init>:

//Returns if glue_set_peripherals_inited was called before.  Crashes otherwise.
void glue_enforce_driver_init(void)
{
  401240:	b580      	push	{r7, lr}
  401242:	af00      	add	r7, sp, #0
	if (peripherals_inited == false)
  401244:	4b05      	ldr	r3, [pc, #20]	; (40125c <glue_enforce_driver_init+0x1c>)
  401246:	781b      	ldrb	r3, [r3, #0]
  401248:	b2db      	uxtb	r3, r3
  40124a:	f083 0301 	eor.w	r3, r3, #1
  40124e:	b2db      	uxtb	r3, r3
  401250:	2b00      	cmp	r3, #0
  401252:	d001      	beq.n	401258 <glue_enforce_driver_init+0x18>
	{
		glue_crash_and_burn();
  401254:	4b02      	ldr	r3, [pc, #8]	; (401260 <glue_enforce_driver_init+0x20>)
  401256:	4798      	blx	r3
	}
}
  401258:	bf00      	nop
  40125a:	bd80      	pop	{r7, pc}
  40125c:	2040158c 	.word	0x2040158c
  401260:	00401081 	.word	0x00401081

00401264 <glue_spi0_cb_tx_done>:
// See: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0646b/BABIGDDC.html
// There are potentially silicon eratta issues with cache coherency on this chip revision.
// See: http://community.atmel.com/forum/samv7-scbdisabledcache-crashes-hardfault

void glue_spi0_cb_tx_done(struct _dma_resource *resource)
{
  401264:	b480      	push	{r7}
  401266:	b083      	sub	sp, #12
  401268:	af00      	add	r7, sp, #0
  40126a:	6078      	str	r0, [r7, #4]
	spi0_dma_tx_in_process = false;
  40126c:	4b07      	ldr	r3, [pc, #28]	; (40128c <glue_spi0_cb_tx_done+0x28>)
  40126e:	2200      	movs	r2, #0
  401270:	701a      	strb	r2, [r3, #0]
	txInts++;
  401272:	4b07      	ldr	r3, [pc, #28]	; (401290 <glue_spi0_cb_tx_done+0x2c>)
  401274:	881b      	ldrh	r3, [r3, #0]
  401276:	3301      	adds	r3, #1
  401278:	b29a      	uxth	r2, r3
  40127a:	4b05      	ldr	r3, [pc, #20]	; (401290 <glue_spi0_cb_tx_done+0x2c>)
  40127c:	801a      	strh	r2, [r3, #0]
}
  40127e:	bf00      	nop
  401280:	370c      	adds	r7, #12
  401282:	46bd      	mov	sp, r7
  401284:	f85d 7b04 	ldr.w	r7, [sp], #4
  401288:	4770      	bx	lr
  40128a:	bf00      	nop
  40128c:	2040158d 	.word	0x2040158d
  401290:	204015a8 	.word	0x204015a8

00401294 <glue_spi0_cb_rx_done>:

void glue_spi0_cb_rx_done(struct _dma_resource *resource)
{
  401294:	b480      	push	{r7}
  401296:	b083      	sub	sp, #12
  401298:	af00      	add	r7, sp, #0
  40129a:	6078      	str	r0, [r7, #4]
		
		spi0_rx_buf_ptr = NULL;
		current_spi0_transfer_size = 0;
	}
	*/
	spi0_dma_rx_in_process = false;
  40129c:	4b07      	ldr	r3, [pc, #28]	; (4012bc <glue_spi0_cb_rx_done+0x28>)
  40129e:	2200      	movs	r2, #0
  4012a0:	701a      	strb	r2, [r3, #0]
	rxInts++;
  4012a2:	4b07      	ldr	r3, [pc, #28]	; (4012c0 <glue_spi0_cb_rx_done+0x2c>)
  4012a4:	881b      	ldrh	r3, [r3, #0]
  4012a6:	3301      	adds	r3, #1
  4012a8:	b29a      	uxth	r2, r3
  4012aa:	4b05      	ldr	r3, [pc, #20]	; (4012c0 <glue_spi0_cb_rx_done+0x2c>)
  4012ac:	801a      	strh	r2, [r3, #0]
}
  4012ae:	bf00      	nop
  4012b0:	370c      	adds	r7, #12
  4012b2:	46bd      	mov	sp, r7
  4012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012b8:	4770      	bx	lr
  4012ba:	bf00      	nop
  4012bc:	2040158e 	.word	0x2040158e
  4012c0:	204015aa 	.word	0x204015aa

004012c4 <glue_spi0_cb_error>:

void glue_spi0_cb_error(struct _dma_resource *resource)
{
  4012c4:	b480      	push	{r7}
  4012c6:	b083      	sub	sp, #12
  4012c8:	af00      	add	r7, sp, #0
  4012ca:	6078      	str	r0, [r7, #4]
	spi0_dma_tx_in_process = false;
  4012cc:	4b05      	ldr	r3, [pc, #20]	; (4012e4 <glue_spi0_cb_error+0x20>)
  4012ce:	2200      	movs	r2, #0
  4012d0:	701a      	strb	r2, [r3, #0]
	spi0_dma_rx_in_process = false;
  4012d2:	4b05      	ldr	r3, [pc, #20]	; (4012e8 <glue_spi0_cb_error+0x24>)
  4012d4:	2200      	movs	r2, #0
  4012d6:	701a      	strb	r2, [r3, #0]
}
  4012d8:	bf00      	nop
  4012da:	370c      	adds	r7, #12
  4012dc:	46bd      	mov	sp, r7
  4012de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012e2:	4770      	bx	lr
  4012e4:	2040158d 	.word	0x2040158d
  4012e8:	2040158e 	.word	0x2040158e

004012ec <glue_spi1_cb_tx_done>:

void glue_spi1_cb_tx_done(struct _dma_resource *resource)
{
  4012ec:	b480      	push	{r7}
  4012ee:	b083      	sub	sp, #12
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	6078      	str	r0, [r7, #4]
	spi1_dma_tx_in_process = false;
  4012f4:	4b07      	ldr	r3, [pc, #28]	; (401314 <glue_spi1_cb_tx_done+0x28>)
  4012f6:	2200      	movs	r2, #0
  4012f8:	701a      	strb	r2, [r3, #0]
	txInts++;
  4012fa:	4b07      	ldr	r3, [pc, #28]	; (401318 <glue_spi1_cb_tx_done+0x2c>)
  4012fc:	881b      	ldrh	r3, [r3, #0]
  4012fe:	3301      	adds	r3, #1
  401300:	b29a      	uxth	r2, r3
  401302:	4b05      	ldr	r3, [pc, #20]	; (401318 <glue_spi1_cb_tx_done+0x2c>)
  401304:	801a      	strh	r2, [r3, #0]
}
  401306:	bf00      	nop
  401308:	370c      	adds	r7, #12
  40130a:	46bd      	mov	sp, r7
  40130c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401310:	4770      	bx	lr
  401312:	bf00      	nop
  401314:	2040158f 	.word	0x2040158f
  401318:	204015a8 	.word	0x204015a8

0040131c <glue_spi1_cb_rx_done>:

void glue_spi1_cb_rx_done(struct _dma_resource *resource)
{
  40131c:	b480      	push	{r7}
  40131e:	b083      	sub	sp, #12
  401320:	af00      	add	r7, sp, #0
  401322:	6078      	str	r0, [r7, #4]
		
		spi0_rx_buf_ptr = NULL;
		current_spi0_transfer_size = 0;
	}
	*/
	spi1_dma_rx_in_process = false;
  401324:	4b07      	ldr	r3, [pc, #28]	; (401344 <glue_spi1_cb_rx_done+0x28>)
  401326:	2200      	movs	r2, #0
  401328:	701a      	strb	r2, [r3, #0]
	rxInts++;
  40132a:	4b07      	ldr	r3, [pc, #28]	; (401348 <glue_spi1_cb_rx_done+0x2c>)
  40132c:	881b      	ldrh	r3, [r3, #0]
  40132e:	3301      	adds	r3, #1
  401330:	b29a      	uxth	r2, r3
  401332:	4b05      	ldr	r3, [pc, #20]	; (401348 <glue_spi1_cb_rx_done+0x2c>)
  401334:	801a      	strh	r2, [r3, #0]
}
  401336:	bf00      	nop
  401338:	370c      	adds	r7, #12
  40133a:	46bd      	mov	sp, r7
  40133c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401340:	4770      	bx	lr
  401342:	bf00      	nop
  401344:	20401590 	.word	0x20401590
  401348:	204015aa 	.word	0x204015aa

0040134c <glue_spi1_cb_error>:

void glue_spi1_cb_error(struct _dma_resource *resource)
{
  40134c:	b480      	push	{r7}
  40134e:	b083      	sub	sp, #12
  401350:	af00      	add	r7, sp, #0
  401352:	6078      	str	r0, [r7, #4]
	spi1_dma_tx_in_process = false;
  401354:	4b05      	ldr	r3, [pc, #20]	; (40136c <glue_spi1_cb_error+0x20>)
  401356:	2200      	movs	r2, #0
  401358:	701a      	strb	r2, [r3, #0]
	spi1_dma_rx_in_process = false;
  40135a:	4b05      	ldr	r3, [pc, #20]	; (401370 <glue_spi1_cb_error+0x24>)
  40135c:	2200      	movs	r2, #0
  40135e:	701a      	strb	r2, [r3, #0]
}
  401360:	bf00      	nop
  401362:	370c      	adds	r7, #12
  401364:	46bd      	mov	sp, r7
  401366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136a:	4770      	bx	lr
  40136c:	2040158f 	.word	0x2040158f
  401370:	20401590 	.word	0x20401590

00401374 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
  401374:	b480      	push	{r7}
  401376:	b085      	sub	sp, #20
  401378:	af00      	add	r7, sp, #0
  40137a:	6078      	str	r0, [r7, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40137c:	f3ef 8310 	mrs	r3, PRIMASK
  401380:	60fb      	str	r3, [r7, #12]
  return(result);
  401382:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
  401384:	687b      	ldr	r3, [r7, #4]
  401386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401388:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40138a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  40138e:	bf00      	nop
  401390:	3714      	adds	r7, #20
  401392:	46bd      	mov	sp, r7
  401394:	f85d 7b04 	ldr.w	r7, [sp], #4
  401398:	4770      	bx	lr

0040139a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
  40139a:	b480      	push	{r7}
  40139c:	b085      	sub	sp, #20
  40139e:	af00      	add	r7, sp, #0
  4013a0:	6078      	str	r0, [r7, #4]
  4013a2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
  4013a6:	687b      	ldr	r3, [r7, #4]
  4013a8:	681b      	ldr	r3, [r3, #0]
  4013aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4013ac:	68fb      	ldr	r3, [r7, #12]
  4013ae:	f383 8810 	msr	PRIMASK, r3
}
  4013b2:	bf00      	nop
  4013b4:	3714      	adds	r7, #20
  4013b6:	46bd      	mov	sp, r7
  4013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013bc:	4770      	bx	lr
	...

004013c0 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
  4013c0:	b580      	push	{r7, lr}
  4013c2:	b084      	sub	sp, #16
  4013c4:	af00      	add	r7, sp, #0
  4013c6:	6078      	str	r0, [r7, #4]
  4013c8:	6039      	str	r1, [r7, #0]
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
  4013ca:	687b      	ldr	r3, [r7, #4]
  4013cc:	2b00      	cmp	r3, #0
  4013ce:	d004      	beq.n	4013da <dac_sync_init+0x1a>
  4013d0:	683b      	ldr	r3, [r7, #0]
  4013d2:	2b00      	cmp	r3, #0
  4013d4:	d001      	beq.n	4013da <dac_sync_init+0x1a>
  4013d6:	2301      	movs	r3, #1
  4013d8:	e000      	b.n	4013dc <dac_sync_init+0x1c>
  4013da:	2300      	movs	r3, #0
  4013dc:	f003 0301 	and.w	r3, r3, #1
  4013e0:	b2db      	uxtb	r3, r3
  4013e2:	2232      	movs	r2, #50	; 0x32
  4013e4:	4914      	ldr	r1, [pc, #80]	; (401438 <dac_sync_init+0x78>)
  4013e6:	4618      	mov	r0, r3
  4013e8:	4b14      	ldr	r3, [pc, #80]	; (40143c <dac_sync_init+0x7c>)
  4013ea:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
  4013ec:	687b      	ldr	r3, [r7, #4]
  4013ee:	6839      	ldr	r1, [r7, #0]
  4013f0:	4618      	mov	r0, r3
  4013f2:	4b13      	ldr	r3, [pc, #76]	; (401440 <dac_sync_init+0x80>)
  4013f4:	4798      	blx	r3
  4013f6:	60b8      	str	r0, [r7, #8]
	if (rc) {
  4013f8:	68bb      	ldr	r3, [r7, #8]
  4013fa:	2b00      	cmp	r3, #0
  4013fc:	d001      	beq.n	401402 <dac_sync_init+0x42>
		return rc;
  4013fe:	68bb      	ldr	r3, [r7, #8]
  401400:	e015      	b.n	40142e <dac_sync_init+0x6e>
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
  401402:	2300      	movs	r3, #0
  401404:	73fb      	strb	r3, [r7, #15]
  401406:	e00e      	b.n	401426 <dac_sync_init+0x66>
		descr->sel_ch[i].buffer = NULL;
  401408:	7bfb      	ldrb	r3, [r7, #15]
  40140a:	687a      	ldr	r2, [r7, #4]
  40140c:	00db      	lsls	r3, r3, #3
  40140e:	4413      	add	r3, r2
  401410:	2200      	movs	r2, #0
  401412:	605a      	str	r2, [r3, #4]
		descr->sel_ch[i].length = 0;
  401414:	7bfb      	ldrb	r3, [r7, #15]
  401416:	687a      	ldr	r2, [r7, #4]
  401418:	00db      	lsls	r3, r3, #3
  40141a:	4413      	add	r3, r2
  40141c:	2200      	movs	r2, #0
  40141e:	609a      	str	r2, [r3, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
  401420:	7bfb      	ldrb	r3, [r7, #15]
  401422:	3301      	adds	r3, #1
  401424:	73fb      	strb	r3, [r7, #15]
  401426:	7bfb      	ldrb	r3, [r7, #15]
  401428:	2b01      	cmp	r3, #1
  40142a:	d9ed      	bls.n	401408 <dac_sync_init+0x48>
	}

	return ERR_NONE;
  40142c:	2300      	movs	r3, #0
}
  40142e:	4618      	mov	r0, r3
  401430:	3710      	adds	r7, #16
  401432:	46bd      	mov	sp, r7
  401434:	bd80      	pop	{r7, pc}
  401436:	bf00      	nop
  401438:	00409560 	.word	0x00409560
  40143c:	004027fd 	.word	0x004027fd
  401440:	00402f75 	.word	0x00402f75

00401444 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  401444:	b590      	push	{r4, r7, lr}
  401446:	b083      	sub	sp, #12
  401448:	af00      	add	r7, sp, #0
  40144a:	4603      	mov	r3, r0
  40144c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
  40144e:	4b07      	ldr	r3, [pc, #28]	; (40146c <delay_us+0x28>)
  401450:	681c      	ldr	r4, [r3, #0]
  401452:	88fb      	ldrh	r3, [r7, #6]
  401454:	4618      	mov	r0, r3
  401456:	4b06      	ldr	r3, [pc, #24]	; (401470 <delay_us+0x2c>)
  401458:	4798      	blx	r3
  40145a:	4603      	mov	r3, r0
  40145c:	4619      	mov	r1, r3
  40145e:	4620      	mov	r0, r4
  401460:	4b04      	ldr	r3, [pc, #16]	; (401474 <delay_us+0x30>)
  401462:	4798      	blx	r3
}
  401464:	bf00      	nop
  401466:	370c      	adds	r7, #12
  401468:	46bd      	mov	sp, r7
  40146a:	bd90      	pop	{r4, r7, pc}
  40146c:	204015d8 	.word	0x204015d8
  401470:	00402b65 	.word	0x00402b65
  401474:	00402c9d 	.word	0x00402c9d

00401478 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401478:	b590      	push	{r4, r7, lr}
  40147a:	b083      	sub	sp, #12
  40147c:	af00      	add	r7, sp, #0
  40147e:	4603      	mov	r3, r0
  401480:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401482:	4b07      	ldr	r3, [pc, #28]	; (4014a0 <delay_ms+0x28>)
  401484:	681c      	ldr	r4, [r3, #0]
  401486:	88fb      	ldrh	r3, [r7, #6]
  401488:	4618      	mov	r0, r3
  40148a:	4b06      	ldr	r3, [pc, #24]	; (4014a4 <delay_ms+0x2c>)
  40148c:	4798      	blx	r3
  40148e:	4603      	mov	r3, r0
  401490:	4619      	mov	r1, r3
  401492:	4620      	mov	r0, r4
  401494:	4b04      	ldr	r3, [pc, #16]	; (4014a8 <delay_ms+0x30>)
  401496:	4798      	blx	r3
}
  401498:	bf00      	nop
  40149a:	370c      	adds	r7, #12
  40149c:	46bd      	mov	sp, r7
  40149e:	bd90      	pop	{r4, r7, pc}
  4014a0:	204015d8 	.word	0x204015d8
  4014a4:	00402c75 	.word	0x00402c75
  4014a8:	00402c9d 	.word	0x00402c9d

004014ac <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
  4014ac:	b580      	push	{r7, lr}
  4014ae:	b082      	sub	sp, #8
  4014b0:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4014b2:	2300      	movs	r3, #0
  4014b4:	80fb      	strh	r3, [r7, #6]
  4014b6:	e00e      	b.n	4014d6 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4014b8:	88fb      	ldrh	r3, [r7, #6]
  4014ba:	4a0c      	ldr	r2, [pc, #48]	; (4014ec <ext_irq_init+0x40>)
  4014bc:	00db      	lsls	r3, r3, #3
  4014be:	4413      	add	r3, r2
  4014c0:	f04f 32ff 	mov.w	r2, #4294967295
  4014c4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
  4014c6:	88fb      	ldrh	r3, [r7, #6]
  4014c8:	4a08      	ldr	r2, [pc, #32]	; (4014ec <ext_irq_init+0x40>)
  4014ca:	2100      	movs	r1, #0
  4014cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4014d0:	88fb      	ldrh	r3, [r7, #6]
  4014d2:	3301      	adds	r3, #1
  4014d4:	80fb      	strh	r3, [r7, #6]
  4014d6:	88fb      	ldrh	r3, [r7, #6]
  4014d8:	2b01      	cmp	r3, #1
  4014da:	d9ed      	bls.n	4014b8 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
  4014dc:	4804      	ldr	r0, [pc, #16]	; (4014f0 <ext_irq_init+0x44>)
  4014de:	4b05      	ldr	r3, [pc, #20]	; (4014f4 <ext_irq_init+0x48>)
  4014e0:	4798      	blx	r3
  4014e2:	4603      	mov	r3, r0
}
  4014e4:	4618      	mov	r0, r3
  4014e6:	3708      	adds	r7, #8
  4014e8:	46bd      	mov	sp, r7
  4014ea:	bd80      	pop	{r7, pc}
  4014ec:	204015dc 	.word	0x204015dc
  4014f0:	00401651 	.word	0x00401651
  4014f4:	00403635 	.word	0x00403635

004014f8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
  4014f8:	b580      	push	{r7, lr}
  4014fa:	b086      	sub	sp, #24
  4014fc:	af00      	add	r7, sp, #0
  4014fe:	6078      	str	r0, [r7, #4]
  401500:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
  401502:	2300      	movs	r3, #0
  401504:	75fb      	strb	r3, [r7, #23]
  401506:	2300      	movs	r3, #0
  401508:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
  40150a:	2300      	movs	r3, #0
  40150c:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
  40150e:	e012      	b.n	401536 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
  401510:	7dfb      	ldrb	r3, [r7, #23]
  401512:	4a4d      	ldr	r2, [pc, #308]	; (401648 <ext_irq_register+0x150>)
  401514:	00db      	lsls	r3, r3, #3
  401516:	4413      	add	r3, r2
  401518:	685a      	ldr	r2, [r3, #4]
  40151a:	687b      	ldr	r3, [r7, #4]
  40151c:	429a      	cmp	r2, r3
  40151e:	d107      	bne.n	401530 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
  401520:	7dfb      	ldrb	r3, [r7, #23]
  401522:	4949      	ldr	r1, [pc, #292]	; (401648 <ext_irq_register+0x150>)
  401524:	683a      	ldr	r2, [r7, #0]
  401526:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
  40152a:	2301      	movs	r3, #1
  40152c:	757b      	strb	r3, [r7, #21]
			break;
  40152e:	e005      	b.n	40153c <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401530:	7dfb      	ldrb	r3, [r7, #23]
  401532:	3301      	adds	r3, #1
  401534:	75fb      	strb	r3, [r7, #23]
  401536:	7dfb      	ldrb	r3, [r7, #23]
  401538:	2b01      	cmp	r3, #1
  40153a:	d9e9      	bls.n	401510 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
  40153c:	683b      	ldr	r3, [r7, #0]
  40153e:	2b00      	cmp	r3, #0
  401540:	d10e      	bne.n	401560 <ext_irq_register+0x68>
		if (!found) {
  401542:	7d7b      	ldrb	r3, [r7, #21]
  401544:	f083 0301 	eor.w	r3, r3, #1
  401548:	b2db      	uxtb	r3, r3
  40154a:	2b00      	cmp	r3, #0
  40154c:	d002      	beq.n	401554 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
  40154e:	f06f 030c 	mvn.w	r3, #12
  401552:	e074      	b.n	40163e <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
  401554:	2100      	movs	r1, #0
  401556:	6878      	ldr	r0, [r7, #4]
  401558:	4b3c      	ldr	r3, [pc, #240]	; (40164c <ext_irq_register+0x154>)
  40155a:	4798      	blx	r3
  40155c:	4603      	mov	r3, r0
  40155e:	e06e      	b.n	40163e <ext_irq_register+0x146>
	}

	if (!found) {
  401560:	7d7b      	ldrb	r3, [r7, #21]
  401562:	f083 0301 	eor.w	r3, r3, #1
  401566:	b2db      	uxtb	r3, r3
  401568:	2b00      	cmp	r3, #0
  40156a:	d05a      	beq.n	401622 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40156c:	2300      	movs	r3, #0
  40156e:	75fb      	strb	r3, [r7, #23]
  401570:	e016      	b.n	4015a0 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
  401572:	7dfb      	ldrb	r3, [r7, #23]
  401574:	4a34      	ldr	r2, [pc, #208]	; (401648 <ext_irq_register+0x150>)
  401576:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40157a:	2b00      	cmp	r3, #0
  40157c:	d10d      	bne.n	40159a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
  40157e:	7dfb      	ldrb	r3, [r7, #23]
  401580:	4931      	ldr	r1, [pc, #196]	; (401648 <ext_irq_register+0x150>)
  401582:	683a      	ldr	r2, [r7, #0]
  401584:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
  401588:	7dfb      	ldrb	r3, [r7, #23]
  40158a:	4a2f      	ldr	r2, [pc, #188]	; (401648 <ext_irq_register+0x150>)
  40158c:	00db      	lsls	r3, r3, #3
  40158e:	4413      	add	r3, r2
  401590:	687a      	ldr	r2, [r7, #4]
  401592:	605a      	str	r2, [r3, #4]
				found           = true;
  401594:	2301      	movs	r3, #1
  401596:	757b      	strb	r3, [r7, #21]
				break;
  401598:	e005      	b.n	4015a6 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  40159a:	7dfb      	ldrb	r3, [r7, #23]
  40159c:	3301      	adds	r3, #1
  40159e:	75fb      	strb	r3, [r7, #23]
  4015a0:	7dfb      	ldrb	r3, [r7, #23]
  4015a2:	2b01      	cmp	r3, #1
  4015a4:	d9e5      	bls.n	401572 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4015a6:	e036      	b.n	401616 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4015a8:	7dfb      	ldrb	r3, [r7, #23]
  4015aa:	4a27      	ldr	r2, [pc, #156]	; (401648 <ext_irq_register+0x150>)
  4015ac:	00db      	lsls	r3, r3, #3
  4015ae:	4413      	add	r3, r2
  4015b0:	685a      	ldr	r2, [r3, #4]
  4015b2:	7dbb      	ldrb	r3, [r7, #22]
  4015b4:	4924      	ldr	r1, [pc, #144]	; (401648 <ext_irq_register+0x150>)
  4015b6:	00db      	lsls	r3, r3, #3
  4015b8:	440b      	add	r3, r1
  4015ba:	685b      	ldr	r3, [r3, #4]
  4015bc:	429a      	cmp	r2, r3
  4015be:	d227      	bcs.n	401610 <ext_irq_register+0x118>
  4015c0:	7dbb      	ldrb	r3, [r7, #22]
  4015c2:	4a21      	ldr	r2, [pc, #132]	; (401648 <ext_irq_register+0x150>)
  4015c4:	00db      	lsls	r3, r3, #3
  4015c6:	4413      	add	r3, r2
  4015c8:	685b      	ldr	r3, [r3, #4]
  4015ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015ce:	d01f      	beq.n	401610 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
  4015d0:	7dbb      	ldrb	r3, [r7, #22]
  4015d2:	491d      	ldr	r1, [pc, #116]	; (401648 <ext_irq_register+0x150>)
  4015d4:	f107 020c 	add.w	r2, r7, #12
  4015d8:	00db      	lsls	r3, r3, #3
  4015da:	440b      	add	r3, r1
  4015dc:	e893 0003 	ldmia.w	r3, {r0, r1}
  4015e0:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
  4015e4:	7dbb      	ldrb	r3, [r7, #22]
  4015e6:	7dfa      	ldrb	r2, [r7, #23]
  4015e8:	4817      	ldr	r0, [pc, #92]	; (401648 <ext_irq_register+0x150>)
  4015ea:	4917      	ldr	r1, [pc, #92]	; (401648 <ext_irq_register+0x150>)
  4015ec:	00db      	lsls	r3, r3, #3
  4015ee:	4403      	add	r3, r0
  4015f0:	00d2      	lsls	r2, r2, #3
  4015f2:	440a      	add	r2, r1
  4015f4:	e892 0003 	ldmia.w	r2, {r0, r1}
  4015f8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
  4015fc:	7dfb      	ldrb	r3, [r7, #23]
  4015fe:	4a12      	ldr	r2, [pc, #72]	; (401648 <ext_irq_register+0x150>)
  401600:	00db      	lsls	r3, r3, #3
  401602:	4413      	add	r3, r2
  401604:	f107 020c 	add.w	r2, r7, #12
  401608:	e892 0003 	ldmia.w	r2, {r0, r1}
  40160c:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401610:	7dbb      	ldrb	r3, [r7, #22]
  401612:	3301      	adds	r3, #1
  401614:	75bb      	strb	r3, [r7, #22]
  401616:	7dbb      	ldrb	r3, [r7, #22]
  401618:	2b01      	cmp	r3, #1
  40161a:	d802      	bhi.n	401622 <ext_irq_register+0x12a>
  40161c:	7dfb      	ldrb	r3, [r7, #23]
  40161e:	2b01      	cmp	r3, #1
  401620:	d9c2      	bls.n	4015a8 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
  401622:	7d7b      	ldrb	r3, [r7, #21]
  401624:	f083 0301 	eor.w	r3, r3, #1
  401628:	b2db      	uxtb	r3, r3
  40162a:	2b00      	cmp	r3, #0
  40162c:	d002      	beq.n	401634 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
  40162e:	f06f 030c 	mvn.w	r3, #12
  401632:	e004      	b.n	40163e <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
  401634:	2101      	movs	r1, #1
  401636:	6878      	ldr	r0, [r7, #4]
  401638:	4b04      	ldr	r3, [pc, #16]	; (40164c <ext_irq_register+0x154>)
  40163a:	4798      	blx	r3
  40163c:	4603      	mov	r3, r0
}
  40163e:	4618      	mov	r0, r3
  401640:	3718      	adds	r7, #24
  401642:	46bd      	mov	sp, r7
  401644:	bd80      	pop	{r7, pc}
  401646:	bf00      	nop
  401648:	204015dc 	.word	0x204015dc
  40164c:	00403669 	.word	0x00403669

00401650 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401650:	b580      	push	{r7, lr}
  401652:	b084      	sub	sp, #16
  401654:	af00      	add	r7, sp, #0
  401656:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401658:	2300      	movs	r3, #0
  40165a:	73fb      	strb	r3, [r7, #15]
  40165c:	2302      	movs	r3, #2
  40165e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
  401660:	e02a      	b.n	4016b8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
  401662:	7bba      	ldrb	r2, [r7, #14]
  401664:	7bfb      	ldrb	r3, [r7, #15]
  401666:	4413      	add	r3, r2
  401668:	105b      	asrs	r3, r3, #1
  40166a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
  40166c:	7b7b      	ldrb	r3, [r7, #13]
  40166e:	2b01      	cmp	r3, #1
  401670:	d827      	bhi.n	4016c2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  401672:	7b7b      	ldrb	r3, [r7, #13]
  401674:	4a16      	ldr	r2, [pc, #88]	; (4016d0 <process_ext_irq+0x80>)
  401676:	00db      	lsls	r3, r3, #3
  401678:	4413      	add	r3, r2
  40167a:	685a      	ldr	r2, [r3, #4]
  40167c:	687b      	ldr	r3, [r7, #4]
  40167e:	429a      	cmp	r2, r3
  401680:	d10b      	bne.n	40169a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
  401682:	7b7b      	ldrb	r3, [r7, #13]
  401684:	4a12      	ldr	r2, [pc, #72]	; (4016d0 <process_ext_irq+0x80>)
  401686:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40168a:	2b00      	cmp	r3, #0
  40168c:	d01b      	beq.n	4016c6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
  40168e:	7b7b      	ldrb	r3, [r7, #13]
  401690:	4a0f      	ldr	r2, [pc, #60]	; (4016d0 <process_ext_irq+0x80>)
  401692:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401696:	4798      	blx	r3
			}
			return;
  401698:	e015      	b.n	4016c6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
  40169a:	7b7b      	ldrb	r3, [r7, #13]
  40169c:	4a0c      	ldr	r2, [pc, #48]	; (4016d0 <process_ext_irq+0x80>)
  40169e:	00db      	lsls	r3, r3, #3
  4016a0:	4413      	add	r3, r2
  4016a2:	685a      	ldr	r2, [r3, #4]
  4016a4:	687b      	ldr	r3, [r7, #4]
  4016a6:	429a      	cmp	r2, r3
  4016a8:	d203      	bcs.n	4016b2 <process_ext_irq+0x62>
			lower = middle + 1;
  4016aa:	7b7b      	ldrb	r3, [r7, #13]
  4016ac:	3301      	adds	r3, #1
  4016ae:	73fb      	strb	r3, [r7, #15]
  4016b0:	e002      	b.n	4016b8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
  4016b2:	7b7b      	ldrb	r3, [r7, #13]
  4016b4:	3b01      	subs	r3, #1
  4016b6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
  4016b8:	7bba      	ldrb	r2, [r7, #14]
  4016ba:	7bfb      	ldrb	r3, [r7, #15]
  4016bc:	429a      	cmp	r2, r3
  4016be:	d2d0      	bcs.n	401662 <process_ext_irq+0x12>
  4016c0:	e002      	b.n	4016c8 <process_ext_irq+0x78>
			return;
  4016c2:	bf00      	nop
  4016c4:	e000      	b.n	4016c8 <process_ext_irq+0x78>
			return;
  4016c6:	bf00      	nop
		}
	}
}
  4016c8:	3710      	adds	r7, #16
  4016ca:	46bd      	mov	sp, r7
  4016cc:	bd80      	pop	{r7, pc}
  4016ce:	bf00      	nop
  4016d0:	204015dc 	.word	0x204015dc

004016d4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
  4016d4:	b580      	push	{r7, lr}
  4016d6:	b08a      	sub	sp, #40	; 0x28
  4016d8:	af00      	add	r7, sp, #0
  4016da:	60f8      	str	r0, [r7, #12]
  4016dc:	60b9      	str	r1, [r7, #8]
  4016de:	4613      	mov	r3, r2
  4016e0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  4016e2:	68fb      	ldr	r3, [r7, #12]
  4016e4:	3b14      	subs	r3, #20
  4016e6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  4016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016ea:	8b9b      	ldrh	r3, [r3, #28]
  4016ec:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  4016ee:	88fb      	ldrh	r3, [r7, #6]
  4016f0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  4016f2:	f248 0301 	movw	r3, #32769	; 0x8001
  4016f6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
  4016f8:	68bb      	ldr	r3, [r7, #8]
  4016fa:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4016fe:	f107 0214 	add.w	r2, r7, #20
  401702:	4611      	mov	r1, r2
  401704:	4618      	mov	r0, r3
  401706:	4b06      	ldr	r3, [pc, #24]	; (401720 <i2c_m_sync_read+0x4c>)
  401708:	4798      	blx	r3
  40170a:	6238      	str	r0, [r7, #32]

	if (ret) {
  40170c:	6a3b      	ldr	r3, [r7, #32]
  40170e:	2b00      	cmp	r3, #0
  401710:	d001      	beq.n	401716 <i2c_m_sync_read+0x42>
		return ret;
  401712:	6a3b      	ldr	r3, [r7, #32]
  401714:	e000      	b.n	401718 <i2c_m_sync_read+0x44>
	}

	return n;
  401716:	88fb      	ldrh	r3, [r7, #6]
}
  401718:	4618      	mov	r0, r3
  40171a:	3728      	adds	r7, #40	; 0x28
  40171c:	46bd      	mov	sp, r7
  40171e:	bd80      	pop	{r7, pc}
  401720:	00404599 	.word	0x00404599

00401724 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  401724:	b580      	push	{r7, lr}
  401726:	b08a      	sub	sp, #40	; 0x28
  401728:	af00      	add	r7, sp, #0
  40172a:	60f8      	str	r0, [r7, #12]
  40172c:	60b9      	str	r1, [r7, #8]
  40172e:	4613      	mov	r3, r2
  401730:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  401732:	68fb      	ldr	r3, [r7, #12]
  401734:	3b14      	subs	r3, #20
  401736:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  401738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40173a:	8b9b      	ldrh	r3, [r3, #28]
  40173c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  40173e:	88fb      	ldrh	r3, [r7, #6]
  401740:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
  401742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401746:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
  401748:	68bb      	ldr	r3, [r7, #8]
  40174a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  40174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40174e:	f107 0214 	add.w	r2, r7, #20
  401752:	4611      	mov	r1, r2
  401754:	4618      	mov	r0, r3
  401756:	4b06      	ldr	r3, [pc, #24]	; (401770 <i2c_m_sync_write+0x4c>)
  401758:	4798      	blx	r3
  40175a:	6238      	str	r0, [r7, #32]

	if (ret) {
  40175c:	6a3b      	ldr	r3, [r7, #32]
  40175e:	2b00      	cmp	r3, #0
  401760:	d001      	beq.n	401766 <i2c_m_sync_write+0x42>
		return ret;
  401762:	6a3b      	ldr	r3, [r7, #32]
  401764:	e000      	b.n	401768 <i2c_m_sync_write+0x44>
	}

	return n;
  401766:	88fb      	ldrh	r3, [r7, #6]
}
  401768:	4618      	mov	r0, r3
  40176a:	3728      	adds	r7, #40	; 0x28
  40176c:	46bd      	mov	sp, r7
  40176e:	bd80      	pop	{r7, pc}
  401770:	00404599 	.word	0x00404599

00401774 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  401774:	b580      	push	{r7, lr}
  401776:	b084      	sub	sp, #16
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
  40177c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
  40177e:	687b      	ldr	r3, [r7, #4]
  401780:	2b00      	cmp	r3, #0
  401782:	bf14      	ite	ne
  401784:	2301      	movne	r3, #1
  401786:	2300      	moveq	r3, #0
  401788:	b2db      	uxtb	r3, r3
  40178a:	225e      	movs	r2, #94	; 0x5e
  40178c:	490c      	ldr	r1, [pc, #48]	; (4017c0 <i2c_m_sync_init+0x4c>)
  40178e:	4618      	mov	r0, r3
  401790:	4b0c      	ldr	r3, [pc, #48]	; (4017c4 <i2c_m_sync_init+0x50>)
  401792:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  401794:	687b      	ldr	r3, [r7, #4]
  401796:	6839      	ldr	r1, [r7, #0]
  401798:	4618      	mov	r0, r3
  40179a:	4b0b      	ldr	r3, [pc, #44]	; (4017c8 <i2c_m_sync_init+0x54>)
  40179c:	4798      	blx	r3
  40179e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  4017a0:	68fb      	ldr	r3, [r7, #12]
  4017a2:	2b00      	cmp	r3, #0
  4017a4:	d001      	beq.n	4017aa <i2c_m_sync_init+0x36>
		return init_status;
  4017a6:	68fb      	ldr	r3, [r7, #12]
  4017a8:	e006      	b.n	4017b8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  4017aa:	687b      	ldr	r3, [r7, #4]
  4017ac:	4a07      	ldr	r2, [pc, #28]	; (4017cc <i2c_m_sync_init+0x58>)
  4017ae:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
  4017b0:	687b      	ldr	r3, [r7, #4]
  4017b2:	4a07      	ldr	r2, [pc, #28]	; (4017d0 <i2c_m_sync_init+0x5c>)
  4017b4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  4017b6:	2300      	movs	r3, #0
}
  4017b8:	4618      	mov	r0, r3
  4017ba:	3710      	adds	r7, #16
  4017bc:	46bd      	mov	sp, r7
  4017be:	bd80      	pop	{r7, pc}
  4017c0:	0040957c 	.word	0x0040957c
  4017c4:	004027fd 	.word	0x004027fd
  4017c8:	004044f5 	.word	0x004044f5
  4017cc:	004016d5 	.word	0x004016d5
  4017d0:	00401725 	.word	0x00401725

004017d4 <spi_m_dma_init>:

static int32_t _spi_m_dma_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_dma_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_dma_init(struct spi_m_dma_descriptor *spi, void *const hw)
{
  4017d4:	b580      	push	{r7, lr}
  4017d6:	b084      	sub	sp, #16
  4017d8:	af00      	add	r7, sp, #0
  4017da:	6078      	str	r0, [r7, #4]
  4017dc:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
  4017de:	2300      	movs	r3, #0
  4017e0:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
  4017e2:	687b      	ldr	r3, [r7, #4]
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d004      	beq.n	4017f2 <spi_m_dma_init+0x1e>
  4017e8:	683b      	ldr	r3, [r7, #0]
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d001      	beq.n	4017f2 <spi_m_dma_init+0x1e>
  4017ee:	2301      	movs	r3, #1
  4017f0:	e000      	b.n	4017f4 <spi_m_dma_init+0x20>
  4017f2:	2300      	movs	r3, #0
  4017f4:	f003 0301 	and.w	r3, r3, #1
  4017f8:	b2db      	uxtb	r3, r3
  4017fa:	2233      	movs	r2, #51	; 0x33
  4017fc:	490e      	ldr	r1, [pc, #56]	; (401838 <spi_m_dma_init+0x64>)
  4017fe:	4618      	mov	r0, r3
  401800:	4b0e      	ldr	r3, [pc, #56]	; (40183c <spi_m_dma_init+0x68>)
  401802:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  401804:	687b      	ldr	r3, [r7, #4]
  401806:	683a      	ldr	r2, [r7, #0]
  401808:	601a      	str	r2, [r3, #0]

	rc = _spi_m_dma_init(&spi->dev, hw);
  40180a:	687b      	ldr	r3, [r7, #4]
  40180c:	6839      	ldr	r1, [r7, #0]
  40180e:	4618      	mov	r0, r3
  401810:	4b0b      	ldr	r3, [pc, #44]	; (401840 <spi_m_dma_init+0x6c>)
  401812:	4798      	blx	r3
  401814:	60f8      	str	r0, [r7, #12]
	if (rc) {
  401816:	68fb      	ldr	r3, [r7, #12]
  401818:	2b00      	cmp	r3, #0
  40181a:	d001      	beq.n	401820 <spi_m_dma_init+0x4c>
		return rc;
  40181c:	68fb      	ldr	r3, [r7, #12]
  40181e:	e006      	b.n	40182e <spi_m_dma_init+0x5a>
	}

	spi->io.read  = _spi_m_dma_io_read;
  401820:	687b      	ldr	r3, [r7, #4]
  401822:	4a08      	ldr	r2, [pc, #32]	; (401844 <spi_m_dma_init+0x70>)
  401824:	621a      	str	r2, [r3, #32]
	spi->io.write = _spi_m_dma_io_write;
  401826:	687b      	ldr	r3, [r7, #4]
  401828:	4a07      	ldr	r2, [pc, #28]	; (401848 <spi_m_dma_init+0x74>)
  40182a:	61da      	str	r2, [r3, #28]

	return ERR_NONE;
  40182c:	2300      	movs	r3, #0
}
  40182e:	4618      	mov	r0, r3
  401830:	3710      	adds	r7, #16
  401832:	46bd      	mov	sp, r7
  401834:	bd80      	pop	{r7, pc}
  401836:	bf00      	nop
  401838:	00409598 	.word	0x00409598
  40183c:	004027fd 	.word	0x004027fd
  401840:	00403ee1 	.word	0x00403ee1
  401844:	00401951 	.word	0x00401951
  401848:	0040199d 	.word	0x0040199d

0040184c <spi_m_dma_enable>:

	_spi_m_dma_deinit(&spi->dev);
}

void spi_m_dma_enable(struct spi_m_dma_descriptor *spi)
{
  40184c:	b580      	push	{r7, lr}
  40184e:	b082      	sub	sp, #8
  401850:	af00      	add	r7, sp, #0
  401852:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
  401854:	687b      	ldr	r3, [r7, #4]
  401856:	2b00      	cmp	r3, #0
  401858:	bf14      	ite	ne
  40185a:	2301      	movne	r3, #1
  40185c:	2300      	moveq	r3, #0
  40185e:	b2db      	uxtb	r3, r3
  401860:	224a      	movs	r2, #74	; 0x4a
  401862:	4906      	ldr	r1, [pc, #24]	; (40187c <spi_m_dma_enable+0x30>)
  401864:	4618      	mov	r0, r3
  401866:	4b06      	ldr	r3, [pc, #24]	; (401880 <spi_m_dma_enable+0x34>)
  401868:	4798      	blx	r3

	_spi_m_dma_enable(&spi->dev);
  40186a:	687b      	ldr	r3, [r7, #4]
  40186c:	4618      	mov	r0, r3
  40186e:	4b05      	ldr	r3, [pc, #20]	; (401884 <spi_m_dma_enable+0x38>)
  401870:	4798      	blx	r3
}
  401872:	bf00      	nop
  401874:	3708      	adds	r7, #8
  401876:	46bd      	mov	sp, r7
  401878:	bd80      	pop	{r7, pc}
  40187a:	bf00      	nop
  40187c:	00409598 	.word	0x00409598
  401880:	004027fd 	.word	0x004027fd
  401884:	00403ffd 	.word	0x00403ffd

00401888 <spi_m_dma_set_baudrate>:

	_spi_m_dma_disable(&spi->dev);
}

int32_t spi_m_dma_set_baudrate(struct spi_m_dma_descriptor *spi, const uint32_t baud_val)
{
  401888:	b580      	push	{r7, lr}
  40188a:	b082      	sub	sp, #8
  40188c:	af00      	add	r7, sp, #0
  40188e:	6078      	str	r0, [r7, #4]
  401890:	6039      	str	r1, [r7, #0]
	ASSERT(spi);
  401892:	687b      	ldr	r3, [r7, #4]
  401894:	2b00      	cmp	r3, #0
  401896:	bf14      	ite	ne
  401898:	2301      	movne	r3, #1
  40189a:	2300      	moveq	r3, #0
  40189c:	b2db      	uxtb	r3, r3
  40189e:	2258      	movs	r2, #88	; 0x58
  4018a0:	4906      	ldr	r1, [pc, #24]	; (4018bc <spi_m_dma_set_baudrate+0x34>)
  4018a2:	4618      	mov	r0, r3
  4018a4:	4b06      	ldr	r3, [pc, #24]	; (4018c0 <spi_m_dma_set_baudrate+0x38>)
  4018a6:	4798      	blx	r3

	return _spi_m_dma_set_baudrate(&spi->dev, baud_val);
  4018a8:	687b      	ldr	r3, [r7, #4]
  4018aa:	6839      	ldr	r1, [r7, #0]
  4018ac:	4618      	mov	r0, r3
  4018ae:	4b05      	ldr	r3, [pc, #20]	; (4018c4 <spi_m_dma_set_baudrate+0x3c>)
  4018b0:	4798      	blx	r3
  4018b2:	4603      	mov	r3, r0
}
  4018b4:	4618      	mov	r0, r3
  4018b6:	3708      	adds	r7, #8
  4018b8:	46bd      	mov	sp, r7
  4018ba:	bd80      	pop	{r7, pc}
  4018bc:	00409598 	.word	0x00409598
  4018c0:	004027fd 	.word	0x004027fd
  4018c4:	004040a5 	.word	0x004040a5

004018c8 <spi_m_dma_set_mode>:

int32_t spi_m_dma_set_mode(struct spi_m_dma_descriptor *spi, const enum spi_transfer_mode mode)
{
  4018c8:	b580      	push	{r7, lr}
  4018ca:	b082      	sub	sp, #8
  4018cc:	af00      	add	r7, sp, #0
  4018ce:	6078      	str	r0, [r7, #4]
  4018d0:	460b      	mov	r3, r1
  4018d2:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  4018d4:	687b      	ldr	r3, [r7, #4]
  4018d6:	2b00      	cmp	r3, #0
  4018d8:	bf14      	ite	ne
  4018da:	2301      	movne	r3, #1
  4018dc:	2300      	moveq	r3, #0
  4018de:	b2db      	uxtb	r3, r3
  4018e0:	225f      	movs	r2, #95	; 0x5f
  4018e2:	4907      	ldr	r1, [pc, #28]	; (401900 <spi_m_dma_set_mode+0x38>)
  4018e4:	4618      	mov	r0, r3
  4018e6:	4b07      	ldr	r3, [pc, #28]	; (401904 <spi_m_dma_set_mode+0x3c>)
  4018e8:	4798      	blx	r3

	return _spi_m_dma_set_mode(&spi->dev, mode);
  4018ea:	687b      	ldr	r3, [r7, #4]
  4018ec:	78fa      	ldrb	r2, [r7, #3]
  4018ee:	4611      	mov	r1, r2
  4018f0:	4618      	mov	r0, r3
  4018f2:	4b05      	ldr	r3, [pc, #20]	; (401908 <spi_m_dma_set_mode+0x40>)
  4018f4:	4798      	blx	r3
  4018f6:	4603      	mov	r3, r0
}
  4018f8:	4618      	mov	r0, r3
  4018fa:	3708      	adds	r7, #8
  4018fc:	46bd      	mov	sp, r7
  4018fe:	bd80      	pop	{r7, pc}
  401900:	00409598 	.word	0x00409598
  401904:	004027fd 	.word	0x004027fd
  401908:	0040404d 	.word	0x0040404d

0040190c <spi_m_dma_set_char_size>:

int32_t spi_m_dma_set_char_size(struct spi_m_dma_descriptor *spi, const enum spi_char_size char_size)
{
  40190c:	b580      	push	{r7, lr}
  40190e:	b082      	sub	sp, #8
  401910:	af00      	add	r7, sp, #0
  401912:	6078      	str	r0, [r7, #4]
  401914:	460b      	mov	r3, r1
  401916:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  401918:	687b      	ldr	r3, [r7, #4]
  40191a:	2b00      	cmp	r3, #0
  40191c:	bf14      	ite	ne
  40191e:	2301      	movne	r3, #1
  401920:	2300      	moveq	r3, #0
  401922:	b2db      	uxtb	r3, r3
  401924:	2266      	movs	r2, #102	; 0x66
  401926:	4907      	ldr	r1, [pc, #28]	; (401944 <spi_m_dma_set_char_size+0x38>)
  401928:	4618      	mov	r0, r3
  40192a:	4b07      	ldr	r3, [pc, #28]	; (401948 <spi_m_dma_set_char_size+0x3c>)
  40192c:	4798      	blx	r3

	return _spi_m_dma_set_char_size(&spi->dev, char_size);
  40192e:	687b      	ldr	r3, [r7, #4]
  401930:	78fa      	ldrb	r2, [r7, #3]
  401932:	4611      	mov	r1, r2
  401934:	4618      	mov	r0, r3
  401936:	4b05      	ldr	r3, [pc, #20]	; (40194c <spi_m_dma_set_char_size+0x40>)
  401938:	4798      	blx	r3
  40193a:	4603      	mov	r3, r0
}
  40193c:	4618      	mov	r0, r3
  40193e:	3708      	adds	r7, #8
  401940:	46bd      	mov	sp, r7
  401942:	bd80      	pop	{r7, pc}
  401944:	00409598 	.word	0x00409598
  401948:	004027fd 	.word	0x004027fd
  40194c:	004040f9 	.word	0x004040f9

00401950 <_spi_m_dma_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
  401950:	b590      	push	{r4, r7, lr}
  401952:	b087      	sub	sp, #28
  401954:	af00      	add	r7, sp, #0
  401956:	60f8      	str	r0, [r7, #12]
  401958:	60b9      	str	r1, [r7, #8]
  40195a:	4613      	mov	r3, r2
  40195c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  40195e:	68fb      	ldr	r3, [r7, #12]
  401960:	2b00      	cmp	r3, #0
  401962:	bf14      	ite	ne
  401964:	2301      	movne	r3, #1
  401966:	2300      	moveq	r3, #0
  401968:	b2db      	uxtb	r3, r3
  40196a:	2280      	movs	r2, #128	; 0x80
  40196c:	4908      	ldr	r1, [pc, #32]	; (401990 <_spi_m_dma_io_read+0x40>)
  40196e:	4618      	mov	r0, r3
  401970:	4b08      	ldr	r3, [pc, #32]	; (401994 <_spi_m_dma_io_read+0x44>)
  401972:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  401974:	68fb      	ldr	r3, [r7, #12]
  401976:	3b1c      	subs	r3, #28
  401978:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
  40197a:	6978      	ldr	r0, [r7, #20]
  40197c:	88fb      	ldrh	r3, [r7, #6]
  40197e:	68ba      	ldr	r2, [r7, #8]
  401980:	2100      	movs	r1, #0
  401982:	4c05      	ldr	r4, [pc, #20]	; (401998 <_spi_m_dma_io_read+0x48>)
  401984:	47a0      	blx	r4
  401986:	4603      	mov	r3, r0
}
  401988:	4618      	mov	r0, r3
  40198a:	371c      	adds	r7, #28
  40198c:	46bd      	mov	sp, r7
  40198e:	bd90      	pop	{r4, r7, pc}
  401990:	00409598 	.word	0x00409598
  401994:	004027fd 	.word	0x004027fd
  401998:	0040423d 	.word	0x0040423d

0040199c <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  40199c:	b590      	push	{r4, r7, lr}
  40199e:	b087      	sub	sp, #28
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	60f8      	str	r0, [r7, #12]
  4019a4:	60b9      	str	r1, [r7, #8]
  4019a6:	4613      	mov	r3, r2
  4019a8:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	2b00      	cmp	r3, #0
  4019ae:	bf14      	ite	ne
  4019b0:	2301      	movne	r3, #1
  4019b2:	2300      	moveq	r3, #0
  4019b4:	b2db      	uxtb	r3, r3
  4019b6:	2298      	movs	r2, #152	; 0x98
  4019b8:	4908      	ldr	r1, [pc, #32]	; (4019dc <_spi_m_dma_io_write+0x40>)
  4019ba:	4618      	mov	r0, r3
  4019bc:	4b08      	ldr	r3, [pc, #32]	; (4019e0 <_spi_m_dma_io_write+0x44>)
  4019be:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  4019c0:	68fb      	ldr	r3, [r7, #12]
  4019c2:	3b1c      	subs	r3, #28
  4019c4:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
  4019c6:	6978      	ldr	r0, [r7, #20]
  4019c8:	88fb      	ldrh	r3, [r7, #6]
  4019ca:	2200      	movs	r2, #0
  4019cc:	68b9      	ldr	r1, [r7, #8]
  4019ce:	4c05      	ldr	r4, [pc, #20]	; (4019e4 <_spi_m_dma_io_write+0x48>)
  4019d0:	47a0      	blx	r4
  4019d2:	4603      	mov	r3, r0
}
  4019d4:	4618      	mov	r0, r3
  4019d6:	371c      	adds	r7, #28
  4019d8:	46bd      	mov	sp, r7
  4019da:	bd90      	pop	{r4, r7, pc}
  4019dc:	00409598 	.word	0x00409598
  4019e0:	004027fd 	.word	0x004027fd
  4019e4:	0040423d 	.word	0x0040423d

004019e8 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
  4019e8:	b580      	push	{r7, lr}
  4019ea:	b084      	sub	sp, #16
  4019ec:	af00      	add	r7, sp, #0
  4019ee:	60f8      	str	r0, [r7, #12]
  4019f0:	460b      	mov	r3, r1
  4019f2:	607a      	str	r2, [r7, #4]
  4019f4:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi);
  4019f6:	68fb      	ldr	r3, [r7, #12]
  4019f8:	2b00      	cmp	r3, #0
  4019fa:	bf14      	ite	ne
  4019fc:	2301      	movne	r3, #1
  4019fe:	2300      	moveq	r3, #0
  401a00:	b2db      	uxtb	r3, r3
  401a02:	22aa      	movs	r2, #170	; 0xaa
  401a04:	4906      	ldr	r1, [pc, #24]	; (401a20 <spi_m_dma_register_callback+0x38>)
  401a06:	4618      	mov	r0, r3
  401a08:	4b06      	ldr	r3, [pc, #24]	; (401a24 <spi_m_dma_register_callback+0x3c>)
  401a0a:	4798      	blx	r3

	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
  401a0c:	68fb      	ldr	r3, [r7, #12]
  401a0e:	7af9      	ldrb	r1, [r7, #11]
  401a10:	687a      	ldr	r2, [r7, #4]
  401a12:	4618      	mov	r0, r3
  401a14:	4b04      	ldr	r3, [pc, #16]	; (401a28 <spi_m_dma_register_callback+0x40>)
  401a16:	4798      	blx	r3
}
  401a18:	bf00      	nop
  401a1a:	3710      	adds	r7, #16
  401a1c:	46bd      	mov	sp, r7
  401a1e:	bd80      	pop	{r7, pc}
  401a20:	00409598 	.word	0x00409598
  401a24:	004027fd 	.word	0x004027fd
  401a28:	00404159 	.word	0x00404159

00401a2c <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
  401a2c:	b580      	push	{r7, lr}
  401a2e:	b086      	sub	sp, #24
  401a30:	af00      	add	r7, sp, #0
  401a32:	60f8      	str	r0, [r7, #12]
  401a34:	60b9      	str	r1, [r7, #8]
  401a36:	607a      	str	r2, [r7, #4]
  401a38:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  401a3a:	68fb      	ldr	r3, [r7, #12]
  401a3c:	2b00      	cmp	r3, #0
  401a3e:	d00a      	beq.n	401a56 <usart_async_init+0x2a>
  401a40:	68bb      	ldr	r3, [r7, #8]
  401a42:	2b00      	cmp	r3, #0
  401a44:	d007      	beq.n	401a56 <usart_async_init+0x2a>
  401a46:	687b      	ldr	r3, [r7, #4]
  401a48:	2b00      	cmp	r3, #0
  401a4a:	d004      	beq.n	401a56 <usart_async_init+0x2a>
  401a4c:	887b      	ldrh	r3, [r7, #2]
  401a4e:	2b00      	cmp	r3, #0
  401a50:	d001      	beq.n	401a56 <usart_async_init+0x2a>
  401a52:	2301      	movs	r3, #1
  401a54:	e000      	b.n	401a58 <usart_async_init+0x2c>
  401a56:	2300      	movs	r3, #0
  401a58:	f003 0301 	and.w	r3, r3, #1
  401a5c:	b2db      	uxtb	r3, r3
  401a5e:	223a      	movs	r2, #58	; 0x3a
  401a60:	4919      	ldr	r1, [pc, #100]	; (401ac8 <usart_async_init+0x9c>)
  401a62:	4618      	mov	r0, r3
  401a64:	4b19      	ldr	r3, [pc, #100]	; (401acc <usart_async_init+0xa0>)
  401a66:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  401a68:	68fb      	ldr	r3, [r7, #12]
  401a6a:	3334      	adds	r3, #52	; 0x34
  401a6c:	887a      	ldrh	r2, [r7, #2]
  401a6e:	6879      	ldr	r1, [r7, #4]
  401a70:	4618      	mov	r0, r3
  401a72:	4b17      	ldr	r3, [pc, #92]	; (401ad0 <usart_async_init+0xa4>)
  401a74:	4798      	blx	r3
  401a76:	4603      	mov	r3, r0
  401a78:	2b00      	cmp	r3, #0
  401a7a:	d002      	beq.n	401a82 <usart_async_init+0x56>
		return ERR_INVALID_ARG;
  401a7c:	f06f 030c 	mvn.w	r3, #12
  401a80:	e01e      	b.n	401ac0 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
  401a82:	68fb      	ldr	r3, [r7, #12]
  401a84:	3308      	adds	r3, #8
  401a86:	68b9      	ldr	r1, [r7, #8]
  401a88:	4618      	mov	r0, r3
  401a8a:	4b12      	ldr	r3, [pc, #72]	; (401ad4 <usart_async_init+0xa8>)
  401a8c:	4798      	blx	r3
  401a8e:	6178      	str	r0, [r7, #20]
	if (init_status) {
  401a90:	697b      	ldr	r3, [r7, #20]
  401a92:	2b00      	cmp	r3, #0
  401a94:	d001      	beq.n	401a9a <usart_async_init+0x6e>
		return init_status;
  401a96:	697b      	ldr	r3, [r7, #20]
  401a98:	e012      	b.n	401ac0 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
  401a9a:	68fb      	ldr	r3, [r7, #12]
  401a9c:	4a0e      	ldr	r2, [pc, #56]	; (401ad8 <usart_async_init+0xac>)
  401a9e:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
  401aa0:	68fb      	ldr	r3, [r7, #12]
  401aa2:	4a0e      	ldr	r2, [pc, #56]	; (401adc <usart_async_init+0xb0>)
  401aa4:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  401aa6:	68fb      	ldr	r3, [r7, #12]
  401aa8:	4a0d      	ldr	r2, [pc, #52]	; (401ae0 <usart_async_init+0xb4>)
  401aaa:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  401aac:	68fb      	ldr	r3, [r7, #12]
  401aae:	4a0d      	ldr	r2, [pc, #52]	; (401ae4 <usart_async_init+0xb8>)
  401ab0:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  401ab2:	68fb      	ldr	r3, [r7, #12]
  401ab4:	4a0c      	ldr	r2, [pc, #48]	; (401ae8 <usart_async_init+0xbc>)
  401ab6:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  401ab8:	68fb      	ldr	r3, [r7, #12]
  401aba:	4a0c      	ldr	r2, [pc, #48]	; (401aec <usart_async_init+0xc0>)
  401abc:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  401abe:	2300      	movs	r3, #0
}
  401ac0:	4618      	mov	r0, r3
  401ac2:	3718      	adds	r7, #24
  401ac4:	46bd      	mov	sp, r7
  401ac6:	bd80      	pop	{r7, pc}
  401ac8:	004095b4 	.word	0x004095b4
  401acc:	004027fd 	.word	0x004027fd
  401ad0:	004028d9 	.word	0x004028d9
  401ad4:	00404c6d 	.word	0x00404c6d
  401ad8:	00401b81 	.word	0x00401b81
  401adc:	00401af1 	.word	0x00401af1
  401ae0:	00401c31 	.word	0x00401c31
  401ae4:	00401cc9 	.word	0x00401cc9
  401ae8:	00401c9d 	.word	0x00401c9d
  401aec:	00401d05 	.word	0x00401d05

00401af0 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401af0:	b580      	push	{r7, lr}
  401af2:	b086      	sub	sp, #24
  401af4:	af00      	add	r7, sp, #0
  401af6:	60f8      	str	r0, [r7, #12]
  401af8:	60b9      	str	r1, [r7, #8]
  401afa:	4613      	mov	r3, r2
  401afc:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  401afe:	68fb      	ldr	r3, [r7, #12]
  401b00:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
  401b02:	697b      	ldr	r3, [r7, #20]
  401b04:	2b00      	cmp	r3, #0
  401b06:	d007      	beq.n	401b18 <usart_async_write+0x28>
  401b08:	68bb      	ldr	r3, [r7, #8]
  401b0a:	2b00      	cmp	r3, #0
  401b0c:	d004      	beq.n	401b18 <usart_async_write+0x28>
  401b0e:	88fb      	ldrh	r3, [r7, #6]
  401b10:	2b00      	cmp	r3, #0
  401b12:	d001      	beq.n	401b18 <usart_async_write+0x28>
  401b14:	2301      	movs	r3, #1
  401b16:	e000      	b.n	401b1a <usart_async_write+0x2a>
  401b18:	2300      	movs	r3, #0
  401b1a:	f003 0301 	and.w	r3, r3, #1
  401b1e:	b2db      	uxtb	r3, r3
  401b20:	f240 123b 	movw	r2, #315	; 0x13b
  401b24:	4913      	ldr	r1, [pc, #76]	; (401b74 <usart_async_write+0x84>)
  401b26:	4618      	mov	r0, r3
  401b28:	4b13      	ldr	r3, [pc, #76]	; (401b78 <usart_async_write+0x88>)
  401b2a:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
  401b2c:	697b      	ldr	r3, [r7, #20]
  401b2e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  401b32:	697b      	ldr	r3, [r7, #20]
  401b34:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  401b38:	429a      	cmp	r2, r3
  401b3a:	d002      	beq.n	401b42 <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
  401b3c:	f06f 031b 	mvn.w	r3, #27
  401b40:	e013      	b.n	401b6a <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
  401b42:	697b      	ldr	r3, [r7, #20]
  401b44:	68ba      	ldr	r2, [r7, #8]
  401b46:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
  401b48:	697b      	ldr	r3, [r7, #20]
  401b4a:	88fa      	ldrh	r2, [r7, #6]
  401b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
  401b50:	697b      	ldr	r3, [r7, #20]
  401b52:	2200      	movs	r2, #0
  401b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  401b58:	697b      	ldr	r3, [r7, #20]
  401b5a:	2201      	movs	r2, #1
  401b5c:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  401b5e:	697b      	ldr	r3, [r7, #20]
  401b60:	3308      	adds	r3, #8
  401b62:	4618      	mov	r0, r3
  401b64:	4b05      	ldr	r3, [pc, #20]	; (401b7c <usart_async_write+0x8c>)
  401b66:	4798      	blx	r3

	return (int32_t)length;
  401b68:	88fb      	ldrh	r3, [r7, #6]
}
  401b6a:	4618      	mov	r0, r3
  401b6c:	3718      	adds	r7, #24
  401b6e:	46bd      	mov	sp, r7
  401b70:	bd80      	pop	{r7, pc}
  401b72:	bf00      	nop
  401b74:	004095b4 	.word	0x004095b4
  401b78:	004027fd 	.word	0x004027fd
  401b7c:	00404e9d 	.word	0x00404e9d

00401b80 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401b80:	b580      	push	{r7, lr}
  401b82:	b088      	sub	sp, #32
  401b84:	af00      	add	r7, sp, #0
  401b86:	60f8      	str	r0, [r7, #12]
  401b88:	60b9      	str	r1, [r7, #8]
  401b8a:	4613      	mov	r3, r2
  401b8c:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
  401b8e:	2300      	movs	r3, #0
  401b90:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  401b92:	68fb      	ldr	r3, [r7, #12]
  401b94:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
  401b96:	69bb      	ldr	r3, [r7, #24]
  401b98:	2b00      	cmp	r3, #0
  401b9a:	d007      	beq.n	401bac <usart_async_read+0x2c>
  401b9c:	68bb      	ldr	r3, [r7, #8]
  401b9e:	2b00      	cmp	r3, #0
  401ba0:	d004      	beq.n	401bac <usart_async_read+0x2c>
  401ba2:	88fb      	ldrh	r3, [r7, #6]
  401ba4:	2b00      	cmp	r3, #0
  401ba6:	d001      	beq.n	401bac <usart_async_read+0x2c>
  401ba8:	2301      	movs	r3, #1
  401baa:	e000      	b.n	401bae <usart_async_read+0x2e>
  401bac:	2300      	movs	r3, #0
  401bae:	f003 0301 	and.w	r3, r3, #1
  401bb2:	b2db      	uxtb	r3, r3
  401bb4:	f44f 72ac 	mov.w	r2, #344	; 0x158
  401bb8:	4917      	ldr	r1, [pc, #92]	; (401c18 <usart_async_read+0x98>)
  401bba:	4618      	mov	r0, r3
  401bbc:	4b17      	ldr	r3, [pc, #92]	; (401c1c <usart_async_read+0x9c>)
  401bbe:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
  401bc0:	f107 0310 	add.w	r3, r7, #16
  401bc4:	4618      	mov	r0, r3
  401bc6:	4b16      	ldr	r3, [pc, #88]	; (401c20 <usart_async_read+0xa0>)
  401bc8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  401bca:	69bb      	ldr	r3, [r7, #24]
  401bcc:	3334      	adds	r3, #52	; 0x34
  401bce:	4618      	mov	r0, r3
  401bd0:	4b14      	ldr	r3, [pc, #80]	; (401c24 <usart_async_read+0xa4>)
  401bd2:	4798      	blx	r3
  401bd4:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
  401bd6:	f107 0310 	add.w	r3, r7, #16
  401bda:	4618      	mov	r0, r3
  401bdc:	4b12      	ldr	r3, [pc, #72]	; (401c28 <usart_async_read+0xa8>)
  401bde:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
  401be0:	e00c      	b.n	401bfc <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  401be2:	69bb      	ldr	r3, [r7, #24]
  401be4:	f103 0234 	add.w	r2, r3, #52	; 0x34
  401be8:	8bfb      	ldrh	r3, [r7, #30]
  401bea:	1c59      	adds	r1, r3, #1
  401bec:	83f9      	strh	r1, [r7, #30]
  401bee:	4619      	mov	r1, r3
  401bf0:	68bb      	ldr	r3, [r7, #8]
  401bf2:	440b      	add	r3, r1
  401bf4:	4619      	mov	r1, r3
  401bf6:	4610      	mov	r0, r2
  401bf8:	4b0c      	ldr	r3, [pc, #48]	; (401c2c <usart_async_read+0xac>)
  401bfa:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  401bfc:	8bfa      	ldrh	r2, [r7, #30]
  401bfe:	697b      	ldr	r3, [r7, #20]
  401c00:	429a      	cmp	r2, r3
  401c02:	d203      	bcs.n	401c0c <usart_async_read+0x8c>
  401c04:	8bfa      	ldrh	r2, [r7, #30]
  401c06:	88fb      	ldrh	r3, [r7, #6]
  401c08:	429a      	cmp	r2, r3
  401c0a:	d3ea      	bcc.n	401be2 <usart_async_read+0x62>
	}

	return (int32_t)was_read;
  401c0c:	8bfb      	ldrh	r3, [r7, #30]
}
  401c0e:	4618      	mov	r0, r3
  401c10:	3720      	adds	r7, #32
  401c12:	46bd      	mov	sp, r7
  401c14:	bd80      	pop	{r7, pc}
  401c16:	bf00      	nop
  401c18:	004095b4 	.word	0x004095b4
  401c1c:	004027fd 	.word	0x004027fd
  401c20:	00401375 	.word	0x00401375
  401c24:	00402a31 	.word	0x00402a31
  401c28:	0040139b 	.word	0x0040139b
  401c2c:	0040294d 	.word	0x0040294d

00401c30 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
  401c30:	b590      	push	{r4, r7, lr}
  401c32:	b085      	sub	sp, #20
  401c34:	af00      	add	r7, sp, #0
  401c36:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401c38:	687b      	ldr	r3, [r7, #4]
  401c3a:	3b08      	subs	r3, #8
  401c3c:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
  401c3e:	68fb      	ldr	r3, [r7, #12]
  401c40:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  401c44:	68fb      	ldr	r3, [r7, #12]
  401c46:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  401c4a:	429a      	cmp	r2, r3
  401c4c:	d017      	beq.n	401c7e <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  401c4e:	68fb      	ldr	r3, [r7, #12]
  401c50:	f103 0008 	add.w	r0, r3, #8
  401c54:	68fb      	ldr	r3, [r7, #12]
  401c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401c58:	68fb      	ldr	r3, [r7, #12]
  401c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  401c5e:	1c59      	adds	r1, r3, #1
  401c60:	b28c      	uxth	r4, r1
  401c62:	68f9      	ldr	r1, [r7, #12]
  401c64:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
  401c68:	4413      	add	r3, r2
  401c6a:	781b      	ldrb	r3, [r3, #0]
  401c6c:	4619      	mov	r1, r3
  401c6e:	4b08      	ldr	r3, [pc, #32]	; (401c90 <usart_process_byte_sent+0x60>)
  401c70:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  401c72:	68fb      	ldr	r3, [r7, #12]
  401c74:	3308      	adds	r3, #8
  401c76:	4618      	mov	r0, r3
  401c78:	4b06      	ldr	r3, [pc, #24]	; (401c94 <usart_process_byte_sent+0x64>)
  401c7a:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
  401c7c:	e004      	b.n	401c88 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
  401c7e:	68fb      	ldr	r3, [r7, #12]
  401c80:	3308      	adds	r3, #8
  401c82:	4618      	mov	r0, r3
  401c84:	4b04      	ldr	r3, [pc, #16]	; (401c98 <usart_process_byte_sent+0x68>)
  401c86:	4798      	blx	r3
}
  401c88:	bf00      	nop
  401c8a:	3714      	adds	r7, #20
  401c8c:	46bd      	mov	sp, r7
  401c8e:	bd90      	pop	{r4, r7, pc}
  401c90:	00404d51 	.word	0x00404d51
  401c94:	00404e9d 	.word	0x00404e9d
  401c98:	00404edd 	.word	0x00404edd

00401c9c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  401c9c:	b580      	push	{r7, lr}
  401c9e:	b084      	sub	sp, #16
  401ca0:	af00      	add	r7, sp, #0
  401ca2:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401ca4:	687b      	ldr	r3, [r7, #4]
  401ca6:	3b08      	subs	r3, #8
  401ca8:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  401caa:	68fb      	ldr	r3, [r7, #12]
  401cac:	2200      	movs	r2, #0
  401cae:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
  401cb0:	68fb      	ldr	r3, [r7, #12]
  401cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401cb4:	2b00      	cmp	r3, #0
  401cb6:	d003      	beq.n	401cc0 <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
  401cb8:	68fb      	ldr	r3, [r7, #12]
  401cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401cbc:	68f8      	ldr	r0, [r7, #12]
  401cbe:	4798      	blx	r3
	}
}
  401cc0:	bf00      	nop
  401cc2:	3710      	adds	r7, #16
  401cc4:	46bd      	mov	sp, r7
  401cc6:	bd80      	pop	{r7, pc}

00401cc8 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
  401cc8:	b580      	push	{r7, lr}
  401cca:	b084      	sub	sp, #16
  401ccc:	af00      	add	r7, sp, #0
  401cce:	6078      	str	r0, [r7, #4]
  401cd0:	460b      	mov	r3, r1
  401cd2:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	3b08      	subs	r3, #8
  401cd8:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
  401cda:	68fb      	ldr	r3, [r7, #12]
  401cdc:	3334      	adds	r3, #52	; 0x34
  401cde:	78fa      	ldrb	r2, [r7, #3]
  401ce0:	4611      	mov	r1, r2
  401ce2:	4618      	mov	r0, r3
  401ce4:	4b06      	ldr	r3, [pc, #24]	; (401d00 <usart_fill_rx_buffer+0x38>)
  401ce6:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
  401ce8:	68fb      	ldr	r3, [r7, #12]
  401cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401cec:	2b00      	cmp	r3, #0
  401cee:	d003      	beq.n	401cf8 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
  401cf0:	68fb      	ldr	r3, [r7, #12]
  401cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401cf4:	68f8      	ldr	r0, [r7, #12]
  401cf6:	4798      	blx	r3
	}
}
  401cf8:	bf00      	nop
  401cfa:	3710      	adds	r7, #16
  401cfc:	46bd      	mov	sp, r7
  401cfe:	bd80      	pop	{r7, pc}
  401d00:	004029bd 	.word	0x004029bd

00401d04 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  401d04:	b580      	push	{r7, lr}
  401d06:	b084      	sub	sp, #16
  401d08:	af00      	add	r7, sp, #0
  401d0a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401d0c:	687b      	ldr	r3, [r7, #4]
  401d0e:	3b08      	subs	r3, #8
  401d10:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  401d12:	68fb      	ldr	r3, [r7, #12]
  401d14:	2200      	movs	r2, #0
  401d16:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
  401d18:	68fb      	ldr	r3, [r7, #12]
  401d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d1c:	2b00      	cmp	r3, #0
  401d1e:	d003      	beq.n	401d28 <usart_error+0x24>
		descr->usart_cb.error(descr);
  401d20:	68fb      	ldr	r3, [r7, #12]
  401d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d24:	68f8      	ldr	r0, [r7, #12]
  401d26:	4798      	blx	r3
	}
}
  401d28:	bf00      	nop
  401d2a:	3710      	adds	r7, #16
  401d2c:	46bd      	mov	sp, r7
  401d2e:	bd80      	pop	{r7, pc}

00401d30 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
  401d30:	b580      	push	{r7, lr}
  401d32:	b086      	sub	sp, #24
  401d34:	af00      	add	r7, sp, #0
  401d36:	60f8      	str	r0, [r7, #12]
  401d38:	60b9      	str	r1, [r7, #8]
  401d3a:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
  401d3c:	68fb      	ldr	r3, [r7, #12]
  401d3e:	2b00      	cmp	r3, #0
  401d40:	d004      	beq.n	401d4c <usart_sync_init+0x1c>
  401d42:	68bb      	ldr	r3, [r7, #8]
  401d44:	2b00      	cmp	r3, #0
  401d46:	d001      	beq.n	401d4c <usart_sync_init+0x1c>
  401d48:	2301      	movs	r3, #1
  401d4a:	e000      	b.n	401d4e <usart_sync_init+0x1e>
  401d4c:	2300      	movs	r3, #0
  401d4e:	f003 0301 	and.w	r3, r3, #1
  401d52:	b2db      	uxtb	r3, r3
  401d54:	2234      	movs	r2, #52	; 0x34
  401d56:	490d      	ldr	r1, [pc, #52]	; (401d8c <usart_sync_init+0x5c>)
  401d58:	4618      	mov	r0, r3
  401d5a:	4b0d      	ldr	r3, [pc, #52]	; (401d90 <usart_sync_init+0x60>)
  401d5c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401d5e:	68fb      	ldr	r3, [r7, #12]
  401d60:	3308      	adds	r3, #8
  401d62:	68b9      	ldr	r1, [r7, #8]
  401d64:	4618      	mov	r0, r3
  401d66:	4b0b      	ldr	r3, [pc, #44]	; (401d94 <usart_sync_init+0x64>)
  401d68:	4798      	blx	r3
  401d6a:	6178      	str	r0, [r7, #20]
	if (init_status) {
  401d6c:	697b      	ldr	r3, [r7, #20]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d001      	beq.n	401d76 <usart_sync_init+0x46>
		return init_status;
  401d72:	697b      	ldr	r3, [r7, #20]
  401d74:	e006      	b.n	401d84 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
  401d76:	68fb      	ldr	r3, [r7, #12]
  401d78:	4a07      	ldr	r2, [pc, #28]	; (401d98 <usart_sync_init+0x68>)
  401d7a:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
  401d7c:	68fb      	ldr	r3, [r7, #12]
  401d7e:	4a07      	ldr	r2, [pc, #28]	; (401d9c <usart_sync_init+0x6c>)
  401d80:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  401d82:	2300      	movs	r3, #0
}
  401d84:	4618      	mov	r0, r3
  401d86:	3718      	adds	r7, #24
  401d88:	46bd      	mov	sp, r7
  401d8a:	bd80      	pop	{r7, pc}
  401d8c:	004095d4 	.word	0x004095d4
  401d90:	004027fd 	.word	0x004027fd
  401d94:	00404c15 	.word	0x00404c15
  401d98:	00401e69 	.word	0x00401e69
  401d9c:	00401da1 	.word	0x00401da1

00401da0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401da0:	b580      	push	{r7, lr}
  401da2:	b086      	sub	sp, #24
  401da4:	af00      	add	r7, sp, #0
  401da6:	60f8      	str	r0, [r7, #12]
  401da8:	60b9      	str	r1, [r7, #8]
  401daa:	4613      	mov	r3, r2
  401dac:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  401dae:	2300      	movs	r3, #0
  401db0:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  401db2:	68fb      	ldr	r3, [r7, #12]
  401db4:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  401db6:	68fb      	ldr	r3, [r7, #12]
  401db8:	2b00      	cmp	r3, #0
  401dba:	d007      	beq.n	401dcc <usart_sync_write+0x2c>
  401dbc:	68bb      	ldr	r3, [r7, #8]
  401dbe:	2b00      	cmp	r3, #0
  401dc0:	d004      	beq.n	401dcc <usart_sync_write+0x2c>
  401dc2:	88fb      	ldrh	r3, [r7, #6]
  401dc4:	2b00      	cmp	r3, #0
  401dc6:	d001      	beq.n	401dcc <usart_sync_write+0x2c>
  401dc8:	2301      	movs	r3, #1
  401dca:	e000      	b.n	401dce <usart_sync_write+0x2e>
  401dcc:	2300      	movs	r3, #0
  401dce:	f003 0301 	and.w	r3, r3, #1
  401dd2:	b2db      	uxtb	r3, r3
  401dd4:	22f1      	movs	r2, #241	; 0xf1
  401dd6:	491f      	ldr	r1, [pc, #124]	; (401e54 <usart_sync_write+0xb4>)
  401dd8:	4618      	mov	r0, r3
  401dda:	4b1f      	ldr	r3, [pc, #124]	; (401e58 <usart_sync_write+0xb8>)
  401ddc:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  401dde:	bf00      	nop
  401de0:	693b      	ldr	r3, [r7, #16]
  401de2:	3308      	adds	r3, #8
  401de4:	4618      	mov	r0, r3
  401de6:	4b1d      	ldr	r3, [pc, #116]	; (401e5c <usart_sync_write+0xbc>)
  401de8:	4798      	blx	r3
  401dea:	4603      	mov	r3, r0
  401dec:	f083 0301 	eor.w	r3, r3, #1
  401df0:	b2db      	uxtb	r3, r3
  401df2:	2b00      	cmp	r3, #0
  401df4:	d1f4      	bne.n	401de0 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401df6:	693b      	ldr	r3, [r7, #16]
  401df8:	f103 0008 	add.w	r0, r3, #8
  401dfc:	68ba      	ldr	r2, [r7, #8]
  401dfe:	697b      	ldr	r3, [r7, #20]
  401e00:	4413      	add	r3, r2
  401e02:	781b      	ldrb	r3, [r3, #0]
  401e04:	4619      	mov	r1, r3
  401e06:	4b16      	ldr	r3, [pc, #88]	; (401e60 <usart_sync_write+0xc0>)
  401e08:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  401e0a:	bf00      	nop
  401e0c:	693b      	ldr	r3, [r7, #16]
  401e0e:	3308      	adds	r3, #8
  401e10:	4618      	mov	r0, r3
  401e12:	4b12      	ldr	r3, [pc, #72]	; (401e5c <usart_sync_write+0xbc>)
  401e14:	4798      	blx	r3
  401e16:	4603      	mov	r3, r0
  401e18:	f083 0301 	eor.w	r3, r3, #1
  401e1c:	b2db      	uxtb	r3, r3
  401e1e:	2b00      	cmp	r3, #0
  401e20:	d1f4      	bne.n	401e0c <usart_sync_write+0x6c>
			;
	} while (++offset < length);
  401e22:	697b      	ldr	r3, [r7, #20]
  401e24:	3301      	adds	r3, #1
  401e26:	617b      	str	r3, [r7, #20]
  401e28:	88fb      	ldrh	r3, [r7, #6]
  401e2a:	697a      	ldr	r2, [r7, #20]
  401e2c:	429a      	cmp	r2, r3
  401e2e:	d3e2      	bcc.n	401df6 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
  401e30:	bf00      	nop
  401e32:	693b      	ldr	r3, [r7, #16]
  401e34:	3308      	adds	r3, #8
  401e36:	4618      	mov	r0, r3
  401e38:	4b0a      	ldr	r3, [pc, #40]	; (401e64 <usart_sync_write+0xc4>)
  401e3a:	4798      	blx	r3
  401e3c:	4603      	mov	r3, r0
  401e3e:	f083 0301 	eor.w	r3, r3, #1
  401e42:	b2db      	uxtb	r3, r3
  401e44:	2b00      	cmp	r3, #0
  401e46:	d1f4      	bne.n	401e32 <usart_sync_write+0x92>
		;
	return (int32_t)offset;
  401e48:	697b      	ldr	r3, [r7, #20]
}
  401e4a:	4618      	mov	r0, r3
  401e4c:	3718      	adds	r7, #24
  401e4e:	46bd      	mov	sp, r7
  401e50:	bd80      	pop	{r7, pc}
  401e52:	bf00      	nop
  401e54:	004095d4 	.word	0x004095d4
  401e58:	004027fd 	.word	0x004027fd
  401e5c:	00404ddd 	.word	0x00404ddd
  401e60:	00404d09 	.word	0x00404d09
  401e64:	00404e1d 	.word	0x00404e1d

00401e68 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401e68:	b590      	push	{r4, r7, lr}
  401e6a:	b087      	sub	sp, #28
  401e6c:	af00      	add	r7, sp, #0
  401e6e:	60f8      	str	r0, [r7, #12]
  401e70:	60b9      	str	r1, [r7, #8]
  401e72:	4613      	mov	r3, r2
  401e74:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  401e76:	2300      	movs	r3, #0
  401e78:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  401e7a:	68fb      	ldr	r3, [r7, #12]
  401e7c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  401e7e:	68fb      	ldr	r3, [r7, #12]
  401e80:	2b00      	cmp	r3, #0
  401e82:	d007      	beq.n	401e94 <usart_sync_read+0x2c>
  401e84:	68bb      	ldr	r3, [r7, #8]
  401e86:	2b00      	cmp	r3, #0
  401e88:	d004      	beq.n	401e94 <usart_sync_read+0x2c>
  401e8a:	88fb      	ldrh	r3, [r7, #6]
  401e8c:	2b00      	cmp	r3, #0
  401e8e:	d001      	beq.n	401e94 <usart_sync_read+0x2c>
  401e90:	2301      	movs	r3, #1
  401e92:	e000      	b.n	401e96 <usart_sync_read+0x2e>
  401e94:	2300      	movs	r3, #0
  401e96:	f003 0301 	and.w	r3, r3, #1
  401e9a:	b2db      	uxtb	r3, r3
  401e9c:	f44f 7286 	mov.w	r2, #268	; 0x10c
  401ea0:	4912      	ldr	r1, [pc, #72]	; (401eec <usart_sync_read+0x84>)
  401ea2:	4618      	mov	r0, r3
  401ea4:	4b12      	ldr	r3, [pc, #72]	; (401ef0 <usart_sync_read+0x88>)
  401ea6:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401ea8:	bf00      	nop
  401eaa:	693b      	ldr	r3, [r7, #16]
  401eac:	3308      	adds	r3, #8
  401eae:	4618      	mov	r0, r3
  401eb0:	4b10      	ldr	r3, [pc, #64]	; (401ef4 <usart_sync_read+0x8c>)
  401eb2:	4798      	blx	r3
  401eb4:	4603      	mov	r3, r0
  401eb6:	f083 0301 	eor.w	r3, r3, #1
  401eba:	b2db      	uxtb	r3, r3
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	d1f4      	bne.n	401eaa <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401ec0:	68ba      	ldr	r2, [r7, #8]
  401ec2:	697b      	ldr	r3, [r7, #20]
  401ec4:	18d4      	adds	r4, r2, r3
  401ec6:	693b      	ldr	r3, [r7, #16]
  401ec8:	3308      	adds	r3, #8
  401eca:	4618      	mov	r0, r3
  401ecc:	4b0a      	ldr	r3, [pc, #40]	; (401ef8 <usart_sync_read+0x90>)
  401ece:	4798      	blx	r3
  401ed0:	4603      	mov	r3, r0
  401ed2:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
  401ed4:	697b      	ldr	r3, [r7, #20]
  401ed6:	3301      	adds	r3, #1
  401ed8:	617b      	str	r3, [r7, #20]
  401eda:	88fb      	ldrh	r3, [r7, #6]
  401edc:	697a      	ldr	r2, [r7, #20]
  401ede:	429a      	cmp	r2, r3
  401ee0:	d3e2      	bcc.n	401ea8 <usart_sync_read+0x40>

	return (int32_t)offset;
  401ee2:	697b      	ldr	r3, [r7, #20]
}
  401ee4:	4618      	mov	r0, r3
  401ee6:	371c      	adds	r7, #28
  401ee8:	46bd      	mov	sp, r7
  401eea:	bd90      	pop	{r4, r7, pc}
  401eec:	004095d4 	.word	0x004095d4
  401ef0:	004027fd 	.word	0x004027fd
  401ef4:	00404e5d 	.word	0x00404e5d
  401ef8:	00404d99 	.word	0x00404d99

00401efc <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
  401efc:	b480      	push	{r7}
  401efe:	b085      	sub	sp, #20
  401f00:	af00      	add	r7, sp, #0
  401f02:	4603      	mov	r3, r0
  401f04:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  401f06:	2300      	movs	r3, #0
  401f08:	73fb      	strb	r3, [r7, #15]
  401f0a:	e029      	b.n	401f60 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  401f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f10:	4a19      	ldr	r2, [pc, #100]	; (401f78 <_usb_d_find_ep+0x7c>)
  401f12:	015b      	lsls	r3, r3, #5
  401f14:	4413      	add	r3, r2
  401f16:	3301      	adds	r3, #1
  401f18:	781b      	ldrb	r3, [r3, #0]
  401f1a:	79fa      	ldrb	r2, [r7, #7]
  401f1c:	429a      	cmp	r2, r3
  401f1e:	d102      	bne.n	401f26 <_usb_d_find_ep+0x2a>
			return i;
  401f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f24:	e022      	b.n	401f6c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  401f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f2a:	4a13      	ldr	r2, [pc, #76]	; (401f78 <_usb_d_find_ep+0x7c>)
  401f2c:	015b      	lsls	r3, r3, #5
  401f2e:	4413      	add	r3, r2
  401f30:	781b      	ldrb	r3, [r3, #0]
  401f32:	2b00      	cmp	r3, #0
  401f34:	d10e      	bne.n	401f54 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  401f36:	79fb      	ldrb	r3, [r7, #7]
  401f38:	f003 030f 	and.w	r3, r3, #15
  401f3c:	f997 200f 	ldrsb.w	r2, [r7, #15]
  401f40:	490d      	ldr	r1, [pc, #52]	; (401f78 <_usb_d_find_ep+0x7c>)
  401f42:	0152      	lsls	r2, r2, #5
  401f44:	440a      	add	r2, r1
  401f46:	3201      	adds	r2, #1
  401f48:	7812      	ldrb	r2, [r2, #0]
  401f4a:	4293      	cmp	r3, r2
  401f4c:	d102      	bne.n	401f54 <_usb_d_find_ep+0x58>
			return i;
  401f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f52:	e00b      	b.n	401f6c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  401f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f58:	b2db      	uxtb	r3, r3
  401f5a:	3301      	adds	r3, #1
  401f5c:	b2db      	uxtb	r3, r3
  401f5e:	73fb      	strb	r3, [r7, #15]
  401f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f64:	2b03      	cmp	r3, #3
  401f66:	ddd1      	ble.n	401f0c <_usb_d_find_ep+0x10>
		}
	}
	return -1;
  401f68:	f04f 33ff 	mov.w	r3, #4294967295
}
  401f6c:	4618      	mov	r0, r3
  401f6e:	3714      	adds	r7, #20
  401f70:	46bd      	mov	sp, r7
  401f72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f76:	4770      	bx	lr
  401f78:	204015ec 	.word	0x204015ec

00401f7c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
  401f7c:	b580      	push	{r7, lr}
  401f7e:	b088      	sub	sp, #32
  401f80:	af00      	add	r7, sp, #0
  401f82:	60ba      	str	r2, [r7, #8]
  401f84:	607b      	str	r3, [r7, #4]
  401f86:	4603      	mov	r3, r0
  401f88:	73fb      	strb	r3, [r7, #15]
  401f8a:	460b      	mov	r3, r1
  401f8c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
  401f8e:	68bb      	ldr	r3, [r7, #8]
  401f90:	617b      	str	r3, [r7, #20]
  401f92:	687b      	ldr	r3, [r7, #4]
  401f94:	61bb      	str	r3, [r7, #24]
  401f96:	7bbb      	ldrb	r3, [r7, #14]
  401f98:	2b00      	cmp	r3, #0
  401f9a:	d004      	beq.n	401fa6 <_usb_d_trans+0x2a>
  401f9c:	7bfb      	ldrb	r3, [r7, #15]
  401f9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401fa2:	b2db      	uxtb	r3, r3
  401fa4:	e003      	b.n	401fae <_usb_d_trans+0x32>
  401fa6:	7bfb      	ldrb	r3, [r7, #15]
  401fa8:	f003 030f 	and.w	r3, r3, #15
  401fac:	b2db      	uxtb	r3, r3
  401fae:	773b      	strb	r3, [r7, #28]
  401fb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  401fb4:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
  401fb6:	f107 0314 	add.w	r3, r7, #20
  401fba:	4618      	mov	r0, r3
  401fbc:	4b03      	ldr	r3, [pc, #12]	; (401fcc <_usb_d_trans+0x50>)
  401fbe:	4798      	blx	r3
  401fc0:	4603      	mov	r3, r0
}
  401fc2:	4618      	mov	r0, r3
  401fc4:	3720      	adds	r7, #32
  401fc6:	46bd      	mov	sp, r7
  401fc8:	bd80      	pop	{r7, pc}
  401fca:	bf00      	nop
  401fcc:	00407295 	.word	0x00407295

00401fd0 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
  401fd0:	b480      	push	{r7}
  401fd2:	b085      	sub	sp, #20
  401fd4:	af00      	add	r7, sp, #0
  401fd6:	60f8      	str	r0, [r7, #12]
  401fd8:	60b9      	str	r1, [r7, #8]
  401fda:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
  401fdc:	2300      	movs	r3, #0
}
  401fde:	4618      	mov	r0, r3
  401fe0:	3714      	adds	r7, #20
  401fe2:	46bd      	mov	sp, r7
  401fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fe8:	4770      	bx	lr
	...

00401fec <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
  401fec:	b580      	push	{r7, lr}
  401fee:	b086      	sub	sp, #24
  401ff0:	af00      	add	r7, sp, #0
  401ff2:	4603      	mov	r3, r0
  401ff4:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401ff6:	79fb      	ldrb	r3, [r7, #7]
  401ff8:	4618      	mov	r0, r3
  401ffa:	4b2a      	ldr	r3, [pc, #168]	; (4020a4 <usb_d_cb_trans_setup+0xb8>)
  401ffc:	4798      	blx	r3
  401ffe:	4603      	mov	r3, r0
  402000:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402002:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402006:	015b      	lsls	r3, r3, #5
  402008:	4a27      	ldr	r2, [pc, #156]	; (4020a8 <usb_d_cb_trans_setup+0xbc>)
  40200a:	4413      	add	r3, r2
  40200c:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
  40200e:	693b      	ldr	r3, [r7, #16]
  402010:	330c      	adds	r3, #12
  402012:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  402014:	79fb      	ldrb	r3, [r7, #7]
  402016:	68f9      	ldr	r1, [r7, #12]
  402018:	4618      	mov	r0, r3
  40201a:	4b24      	ldr	r3, [pc, #144]	; (4020ac <usb_d_cb_trans_setup+0xc0>)
  40201c:	4798      	blx	r3
  40201e:	4603      	mov	r3, r0
  402020:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
  402022:	7afb      	ldrb	r3, [r7, #11]
  402024:	2b08      	cmp	r3, #8
  402026:	d00d      	beq.n	402044 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  402028:	79fb      	ldrb	r3, [r7, #7]
  40202a:	2101      	movs	r1, #1
  40202c:	4618      	mov	r0, r3
  40202e:	4b20      	ldr	r3, [pc, #128]	; (4020b0 <usb_d_cb_trans_setup+0xc4>)
  402030:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  402032:	79fb      	ldrb	r3, [r7, #7]
  402034:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402038:	b2db      	uxtb	r3, r3
  40203a:	2101      	movs	r1, #1
  40203c:	4618      	mov	r0, r3
  40203e:	4b1c      	ldr	r3, [pc, #112]	; (4020b0 <usb_d_cb_trans_setup+0xc4>)
  402040:	4798      	blx	r3
		return;
  402042:	e02b      	b.n	40209c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  402044:	79fb      	ldrb	r3, [r7, #7]
  402046:	2100      	movs	r1, #0
  402048:	4618      	mov	r0, r3
  40204a:	4b19      	ldr	r3, [pc, #100]	; (4020b0 <usb_d_cb_trans_setup+0xc4>)
  40204c:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  40204e:	79fb      	ldrb	r3, [r7, #7]
  402050:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402054:	b2db      	uxtb	r3, r3
  402056:	2100      	movs	r1, #0
  402058:	4618      	mov	r0, r3
  40205a:	4b15      	ldr	r3, [pc, #84]	; (4020b0 <usb_d_cb_trans_setup+0xc4>)
  40205c:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  40205e:	693b      	ldr	r3, [r7, #16]
  402060:	2201      	movs	r2, #1
  402062:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  402064:	693b      	ldr	r3, [r7, #16]
  402066:	695b      	ldr	r3, [r3, #20]
  402068:	79fa      	ldrb	r2, [r7, #7]
  40206a:	68f9      	ldr	r1, [r7, #12]
  40206c:	4610      	mov	r0, r2
  40206e:	4798      	blx	r3
  402070:	4603      	mov	r3, r0
  402072:	f083 0301 	eor.w	r3, r3, #1
  402076:	b2db      	uxtb	r3, r3
  402078:	2b00      	cmp	r3, #0
  40207a:	d00f      	beq.n	40209c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  40207c:	693b      	ldr	r3, [r7, #16]
  40207e:	2205      	movs	r2, #5
  402080:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  402082:	79fb      	ldrb	r3, [r7, #7]
  402084:	2101      	movs	r1, #1
  402086:	4618      	mov	r0, r3
  402088:	4b09      	ldr	r3, [pc, #36]	; (4020b0 <usb_d_cb_trans_setup+0xc4>)
  40208a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  40208c:	79fb      	ldrb	r3, [r7, #7]
  40208e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402092:	b2db      	uxtb	r3, r3
  402094:	2101      	movs	r1, #1
  402096:	4618      	mov	r0, r3
  402098:	4b05      	ldr	r3, [pc, #20]	; (4020b0 <usb_d_cb_trans_setup+0xc4>)
  40209a:	4798      	blx	r3
	}
}
  40209c:	3718      	adds	r7, #24
  40209e:	46bd      	mov	sp, r7
  4020a0:	bd80      	pop	{r7, pc}
  4020a2:	bf00      	nop
  4020a4:	00401efd 	.word	0x00401efd
  4020a8:	204015ec 	.word	0x204015ec
  4020ac:	004071f1 	.word	0x004071f1
  4020b0:	004070c5 	.word	0x004070c5

004020b4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  4020b4:	b580      	push	{r7, lr}
  4020b6:	b084      	sub	sp, #16
  4020b8:	af00      	add	r7, sp, #0
  4020ba:	4603      	mov	r3, r0
  4020bc:	6039      	str	r1, [r7, #0]
  4020be:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  4020c0:	79fb      	ldrb	r3, [r7, #7]
  4020c2:	4618      	mov	r0, r3
  4020c4:	4b0d      	ldr	r3, [pc, #52]	; (4020fc <usb_d_cb_trans_more+0x48>)
  4020c6:	4798      	blx	r3
  4020c8:	4603      	mov	r3, r0
  4020ca:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4020cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4020d0:	015b      	lsls	r3, r3, #5
  4020d2:	4a0b      	ldr	r2, [pc, #44]	; (402100 <usb_d_cb_trans_more+0x4c>)
  4020d4:	4413      	add	r3, r2
  4020d6:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  4020d8:	68bb      	ldr	r3, [r7, #8]
  4020da:	789b      	ldrb	r3, [r3, #2]
  4020dc:	2b03      	cmp	r3, #3
  4020de:	d107      	bne.n	4020f0 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
  4020e0:	68bb      	ldr	r3, [r7, #8]
  4020e2:	699b      	ldr	r3, [r3, #24]
  4020e4:	79fa      	ldrb	r2, [r7, #7]
  4020e6:	6839      	ldr	r1, [r7, #0]
  4020e8:	4610      	mov	r0, r2
  4020ea:	4798      	blx	r3
  4020ec:	4603      	mov	r3, r0
  4020ee:	e000      	b.n	4020f2 <usb_d_cb_trans_more+0x3e>
	}
	return false;
  4020f0:	2300      	movs	r3, #0
}
  4020f2:	4618      	mov	r0, r3
  4020f4:	3710      	adds	r7, #16
  4020f6:	46bd      	mov	sp, r7
  4020f8:	bd80      	pop	{r7, pc}
  4020fa:	bf00      	nop
  4020fc:	00401efd 	.word	0x00401efd
  402100:	204015ec 	.word	0x204015ec

00402104 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
  402104:	b590      	push	{r4, r7, lr}
  402106:	b087      	sub	sp, #28
  402108:	af02      	add	r7, sp, #8
  40210a:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
  40210c:	687b      	ldr	r3, [r7, #4]
  40210e:	789b      	ldrb	r3, [r3, #2]
  402110:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  402112:	687b      	ldr	r3, [r7, #4]
  402114:	7b1b      	ldrb	r3, [r3, #12]
  402116:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40211a:	2b00      	cmp	r3, #0
  40211c:	bf14      	ite	ne
  40211e:	2301      	movne	r3, #1
  402120:	2300      	moveq	r3, #0
  402122:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
  402124:	7bfb      	ldrb	r3, [r7, #15]
  402126:	2b03      	cmp	r3, #3
  402128:	d13a      	bne.n	4021a0 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  40212a:	687b      	ldr	r3, [r7, #4]
  40212c:	69db      	ldr	r3, [r3, #28]
  40212e:	687a      	ldr	r2, [r7, #4]
  402130:	7850      	ldrb	r0, [r2, #1]
  402132:	687a      	ldr	r2, [r7, #4]
  402134:	320c      	adds	r2, #12
  402136:	2101      	movs	r1, #1
  402138:	4798      	blx	r3
  40213a:	4603      	mov	r3, r0
  40213c:	737b      	strb	r3, [r7, #13]
		if (err) {
  40213e:	7b7b      	ldrb	r3, [r7, #13]
  402140:	2b00      	cmp	r3, #0
  402142:	d015      	beq.n	402170 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  402144:	687b      	ldr	r3, [r7, #4]
  402146:	2205      	movs	r2, #5
  402148:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  40214a:	687b      	ldr	r3, [r7, #4]
  40214c:	2202      	movs	r2, #2
  40214e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  402150:	7bbb      	ldrb	r3, [r7, #14]
  402152:	2b00      	cmp	r3, #0
  402154:	d002      	beq.n	40215c <usb_d_ctrl_trans_done+0x58>
  402156:	687b      	ldr	r3, [r7, #4]
  402158:	785b      	ldrb	r3, [r3, #1]
  40215a:	e004      	b.n	402166 <usb_d_ctrl_trans_done+0x62>
  40215c:	687b      	ldr	r3, [r7, #4]
  40215e:	785b      	ldrb	r3, [r3, #1]
  402160:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402164:	b2db      	uxtb	r3, r3
  402166:	2101      	movs	r1, #1
  402168:	4618      	mov	r0, r3
  40216a:	4b15      	ldr	r3, [pc, #84]	; (4021c0 <usb_d_ctrl_trans_done+0xbc>)
  40216c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
  40216e:	e022      	b.n	4021b6 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  402170:	687b      	ldr	r3, [r7, #4]
  402172:	2204      	movs	r2, #4
  402174:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  402176:	687b      	ldr	r3, [r7, #4]
  402178:	7858      	ldrb	r0, [r3, #1]
  40217a:	7bbb      	ldrb	r3, [r7, #14]
  40217c:	2b00      	cmp	r3, #0
  40217e:	bf14      	ite	ne
  402180:	2301      	movne	r3, #1
  402182:	2300      	moveq	r3, #0
  402184:	b2db      	uxtb	r3, r3
  402186:	f083 0301 	eor.w	r3, r3, #1
  40218a:	b2db      	uxtb	r3, r3
  40218c:	f003 0301 	and.w	r3, r3, #1
  402190:	b2d9      	uxtb	r1, r3
  402192:	2301      	movs	r3, #1
  402194:	9300      	str	r3, [sp, #0]
  402196:	2300      	movs	r3, #0
  402198:	2200      	movs	r2, #0
  40219a:	4c0a      	ldr	r4, [pc, #40]	; (4021c4 <usb_d_ctrl_trans_done+0xc0>)
  40219c:	47a0      	blx	r4
}
  40219e:	e00a      	b.n	4021b6 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  4021a0:	687b      	ldr	r3, [r7, #4]
  4021a2:	69db      	ldr	r3, [r3, #28]
  4021a4:	687a      	ldr	r2, [r7, #4]
  4021a6:	7850      	ldrb	r0, [r2, #1]
  4021a8:	687a      	ldr	r2, [r7, #4]
  4021aa:	320c      	adds	r2, #12
  4021ac:	2100      	movs	r1, #0
  4021ae:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4021b0:	687b      	ldr	r3, [r7, #4]
  4021b2:	2202      	movs	r2, #2
  4021b4:	709a      	strb	r2, [r3, #2]
}
  4021b6:	bf00      	nop
  4021b8:	3714      	adds	r7, #20
  4021ba:	46bd      	mov	sp, r7
  4021bc:	bd90      	pop	{r4, r7, pc}
  4021be:	bf00      	nop
  4021c0:	004070c5 	.word	0x004070c5
  4021c4:	00401f7d 	.word	0x00401f7d

004021c8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  4021c8:	b580      	push	{r7, lr}
  4021ca:	b086      	sub	sp, #24
  4021cc:	af00      	add	r7, sp, #0
  4021ce:	4603      	mov	r3, r0
  4021d0:	60b9      	str	r1, [r7, #8]
  4021d2:	607a      	str	r2, [r7, #4]
  4021d4:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
  4021d6:	7bfb      	ldrb	r3, [r7, #15]
  4021d8:	4618      	mov	r0, r3
  4021da:	4b2f      	ldr	r3, [pc, #188]	; (402298 <_usb_d_cb_trans_done+0xd0>)
  4021dc:	4798      	blx	r3
  4021de:	4603      	mov	r3, r0
  4021e0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4021e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4021e6:	015b      	lsls	r3, r3, #5
  4021e8:	4a2c      	ldr	r2, [pc, #176]	; (40229c <_usb_d_cb_trans_done+0xd4>)
  4021ea:	4413      	add	r3, r2
  4021ec:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
  4021ee:	68bb      	ldr	r3, [r7, #8]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	d10e      	bne.n	402212 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
  4021f4:	693b      	ldr	r3, [r7, #16]
  4021f6:	2200      	movs	r2, #0
  4021f8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4021fa:	693b      	ldr	r3, [r7, #16]
  4021fc:	781b      	ldrb	r3, [r3, #0]
  4021fe:	2b00      	cmp	r3, #0
  402200:	d103      	bne.n	40220a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
  402202:	6938      	ldr	r0, [r7, #16]
  402204:	4b26      	ldr	r3, [pc, #152]	; (4022a0 <_usb_d_cb_trans_done+0xd8>)
  402206:	4798      	blx	r3
			return;
  402208:	e043      	b.n	402292 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  40220a:	693b      	ldr	r3, [r7, #16]
  40220c:	2201      	movs	r2, #1
  40220e:	709a      	strb	r2, [r3, #2]
  402210:	e038      	b.n	402284 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
  402212:	68bb      	ldr	r3, [r7, #8]
  402214:	2b01      	cmp	r3, #1
  402216:	d113      	bne.n	402240 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
  402218:	693b      	ldr	r3, [r7, #16]
  40221a:	2202      	movs	r2, #2
  40221c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  40221e:	693b      	ldr	r3, [r7, #16]
  402220:	781b      	ldrb	r3, [r3, #0]
  402222:	2b00      	cmp	r3, #0
  402224:	d108      	bne.n	402238 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402226:	693b      	ldr	r3, [r7, #16]
  402228:	2202      	movs	r2, #2
  40222a:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  40222c:	7bfb      	ldrb	r3, [r7, #15]
  40222e:	2100      	movs	r1, #0
  402230:	4618      	mov	r0, r3
  402232:	4b1c      	ldr	r3, [pc, #112]	; (4022a4 <_usb_d_cb_trans_done+0xdc>)
  402234:	4798      	blx	r3
  402236:	e025      	b.n	402284 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  402238:	693b      	ldr	r3, [r7, #16]
  40223a:	2205      	movs	r2, #5
  40223c:	709a      	strb	r2, [r3, #2]
  40223e:	e021      	b.n	402284 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
  402240:	68bb      	ldr	r3, [r7, #8]
  402242:	2b02      	cmp	r3, #2
  402244:	d10e      	bne.n	402264 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  402246:	693b      	ldr	r3, [r7, #16]
  402248:	2204      	movs	r2, #4
  40224a:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  40224c:	693b      	ldr	r3, [r7, #16]
  40224e:	781b      	ldrb	r3, [r3, #0]
  402250:	2b00      	cmp	r3, #0
  402252:	d103      	bne.n	40225c <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402254:	693b      	ldr	r3, [r7, #16]
  402256:	2202      	movs	r2, #2
  402258:	709a      	strb	r2, [r3, #2]
			return;
  40225a:	e01a      	b.n	402292 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  40225c:	693b      	ldr	r3, [r7, #16]
  40225e:	2201      	movs	r2, #1
  402260:	709a      	strb	r2, [r3, #2]
  402262:	e00f      	b.n	402284 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
  402264:	68bb      	ldr	r3, [r7, #8]
  402266:	2b03      	cmp	r3, #3
  402268:	d106      	bne.n	402278 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  40226a:	693b      	ldr	r3, [r7, #16]
  40226c:	2200      	movs	r2, #0
  40226e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  402270:	693b      	ldr	r3, [r7, #16]
  402272:	2205      	movs	r2, #5
  402274:	70da      	strb	r2, [r3, #3]
  402276:	e005      	b.n	402284 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  402278:	693b      	ldr	r3, [r7, #16]
  40227a:	2206      	movs	r2, #6
  40227c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  40227e:	693b      	ldr	r3, [r7, #16]
  402280:	2206      	movs	r2, #6
  402282:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  402284:	693b      	ldr	r3, [r7, #16]
  402286:	69db      	ldr	r3, [r3, #28]
  402288:	693a      	ldr	r2, [r7, #16]
  40228a:	78d1      	ldrb	r1, [r2, #3]
  40228c:	687a      	ldr	r2, [r7, #4]
  40228e:	7bf8      	ldrb	r0, [r7, #15]
  402290:	4798      	blx	r3
}
  402292:	3718      	adds	r7, #24
  402294:	46bd      	mov	sp, r7
  402296:	bd80      	pop	{r7, pc}
  402298:	00401efd 	.word	0x00401efd
  40229c:	204015ec 	.word	0x204015ec
  4022a0:	00402105 	.word	0x00402105
  4022a4:	004070c5 	.word	0x004070c5

004022a8 <usb_d_init>:

int32_t usb_d_init(void)
{
  4022a8:	b580      	push	{r7, lr}
  4022aa:	b082      	sub	sp, #8
  4022ac:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
  4022ae:	4b21      	ldr	r3, [pc, #132]	; (402334 <usb_d_init+0x8c>)
  4022b0:	4798      	blx	r3
  4022b2:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
  4022b4:	683b      	ldr	r3, [r7, #0]
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	da01      	bge.n	4022be <usb_d_init+0x16>
		return rc;
  4022ba:	683b      	ldr	r3, [r7, #0]
  4022bc:	e036      	b.n	40232c <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  4022be:	2280      	movs	r2, #128	; 0x80
  4022c0:	2100      	movs	r1, #0
  4022c2:	481d      	ldr	r0, [pc, #116]	; (402338 <usb_d_init+0x90>)
  4022c4:	4b1d      	ldr	r3, [pc, #116]	; (40233c <usb_d_init+0x94>)
  4022c6:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4022c8:	2300      	movs	r3, #0
  4022ca:	71fb      	strb	r3, [r7, #7]
  4022cc:	e01e      	b.n	40230c <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  4022ce:	79fb      	ldrb	r3, [r7, #7]
  4022d0:	4a19      	ldr	r2, [pc, #100]	; (402338 <usb_d_init+0x90>)
  4022d2:	015b      	lsls	r3, r3, #5
  4022d4:	4413      	add	r3, r2
  4022d6:	3301      	adds	r3, #1
  4022d8:	22ff      	movs	r2, #255	; 0xff
  4022da:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  4022dc:	79fb      	ldrb	r3, [r7, #7]
  4022de:	4a16      	ldr	r2, [pc, #88]	; (402338 <usb_d_init+0x90>)
  4022e0:	015b      	lsls	r3, r3, #5
  4022e2:	4413      	add	r3, r2
  4022e4:	3314      	adds	r3, #20
  4022e6:	4a16      	ldr	r2, [pc, #88]	; (402340 <usb_d_init+0x98>)
  4022e8:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  4022ea:	79fb      	ldrb	r3, [r7, #7]
  4022ec:	4a12      	ldr	r2, [pc, #72]	; (402338 <usb_d_init+0x90>)
  4022ee:	015b      	lsls	r3, r3, #5
  4022f0:	4413      	add	r3, r2
  4022f2:	3318      	adds	r3, #24
  4022f4:	4a12      	ldr	r2, [pc, #72]	; (402340 <usb_d_init+0x98>)
  4022f6:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  4022f8:	79fb      	ldrb	r3, [r7, #7]
  4022fa:	4a0f      	ldr	r2, [pc, #60]	; (402338 <usb_d_init+0x90>)
  4022fc:	015b      	lsls	r3, r3, #5
  4022fe:	4413      	add	r3, r2
  402300:	331c      	adds	r3, #28
  402302:	4a0f      	ldr	r2, [pc, #60]	; (402340 <usb_d_init+0x98>)
  402304:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402306:	79fb      	ldrb	r3, [r7, #7]
  402308:	3301      	adds	r3, #1
  40230a:	71fb      	strb	r3, [r7, #7]
  40230c:	79fb      	ldrb	r3, [r7, #7]
  40230e:	2b03      	cmp	r3, #3
  402310:	d9dd      	bls.n	4022ce <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  402312:	490c      	ldr	r1, [pc, #48]	; (402344 <usb_d_init+0x9c>)
  402314:	2000      	movs	r0, #0
  402316:	4b0c      	ldr	r3, [pc, #48]	; (402348 <usb_d_init+0xa0>)
  402318:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  40231a:	490c      	ldr	r1, [pc, #48]	; (40234c <usb_d_init+0xa4>)
  40231c:	2001      	movs	r0, #1
  40231e:	4b0a      	ldr	r3, [pc, #40]	; (402348 <usb_d_init+0xa0>)
  402320:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  402322:	490b      	ldr	r1, [pc, #44]	; (402350 <usb_d_init+0xa8>)
  402324:	2002      	movs	r0, #2
  402326:	4b08      	ldr	r3, [pc, #32]	; (402348 <usb_d_init+0xa0>)
  402328:	4798      	blx	r3
	return ERR_NONE;
  40232a:	2300      	movs	r3, #0
}
  40232c:	4618      	mov	r0, r3
  40232e:	3708      	adds	r7, #8
  402330:	46bd      	mov	sp, r7
  402332:	bd80      	pop	{r7, pc}
  402334:	00406989 	.word	0x00406989
  402338:	204015ec 	.word	0x204015ec
  40233c:	00409533 	.word	0x00409533
  402340:	00401fd1 	.word	0x00401fd1
  402344:	00401fed 	.word	0x00401fed
  402348:	0040749d 	.word	0x0040749d
  40234c:	004020b5 	.word	0x004020b5
  402350:	004021c9 	.word	0x004021c9

00402354 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
  402354:	b580      	push	{r7, lr}
  402356:	b082      	sub	sp, #8
  402358:	af00      	add	r7, sp, #0
  40235a:	4603      	mov	r3, r0
  40235c:	6039      	str	r1, [r7, #0]
  40235e:	71fb      	strb	r3, [r7, #7]
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
  402360:	79fb      	ldrb	r3, [r7, #7]
  402362:	6839      	ldr	r1, [r7, #0]
  402364:	4618      	mov	r0, r3
  402366:	4b03      	ldr	r3, [pc, #12]	; (402374 <usb_d_register_callback+0x20>)
  402368:	4798      	blx	r3
}
  40236a:	bf00      	nop
  40236c:	3708      	adds	r7, #8
  40236e:	46bd      	mov	sp, r7
  402370:	bd80      	pop	{r7, pc}
  402372:	bf00      	nop
  402374:	00407455 	.word	0x00407455

00402378 <usb_d_enable>:

int32_t usb_d_enable(void)
{
  402378:	b580      	push	{r7, lr}
  40237a:	af00      	add	r7, sp, #0
	return _usb_d_dev_enable();
  40237c:	4b02      	ldr	r3, [pc, #8]	; (402388 <usb_d_enable+0x10>)
  40237e:	4798      	blx	r3
  402380:	4603      	mov	r3, r0
}
  402382:	4618      	mov	r0, r3
  402384:	bd80      	pop	{r7, pc}
  402386:	bf00      	nop
  402388:	00406a29 	.word	0x00406a29

0040238c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
  40238c:	b580      	push	{r7, lr}
  40238e:	af00      	add	r7, sp, #0
	_usb_d_dev_attach();
  402390:	4b01      	ldr	r3, [pc, #4]	; (402398 <usb_d_attach+0xc>)
  402392:	4798      	blx	r3
}
  402394:	bf00      	nop
  402396:	bd80      	pop	{r7, pc}
  402398:	00406a99 	.word	0x00406a99

0040239c <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
  40239c:	b580      	push	{r7, lr}
  40239e:	b082      	sub	sp, #8
  4023a0:	af00      	add	r7, sp, #0
  4023a2:	4603      	mov	r3, r0
  4023a4:	71fb      	strb	r3, [r7, #7]
	_usb_d_dev_set_address(addr);
  4023a6:	79fb      	ldrb	r3, [r7, #7]
  4023a8:	4618      	mov	r0, r3
  4023aa:	4b03      	ldr	r3, [pc, #12]	; (4023b8 <usb_d_set_address+0x1c>)
  4023ac:	4798      	blx	r3
}
  4023ae:	bf00      	nop
  4023b0:	3708      	adds	r7, #8
  4023b2:	46bd      	mov	sp, r7
  4023b4:	bd80      	pop	{r7, pc}
  4023b6:	bf00      	nop
  4023b8:	00406ab1 	.word	0x00406ab1

004023bc <usb_d_ep0_init>:
{
	_usb_d_dev_send_remotewakeup();
}

int32_t usb_d_ep0_init(const uint8_t max_pkt_size)
{
  4023bc:	b580      	push	{r7, lr}
  4023be:	b082      	sub	sp, #8
  4023c0:	af00      	add	r7, sp, #0
  4023c2:	4603      	mov	r3, r0
  4023c4:	71fb      	strb	r3, [r7, #7]
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
  4023c6:	79fb      	ldrb	r3, [r7, #7]
  4023c8:	b29b      	uxth	r3, r3
  4023ca:	461a      	mov	r2, r3
  4023cc:	2100      	movs	r1, #0
  4023ce:	2000      	movs	r0, #0
  4023d0:	4b03      	ldr	r3, [pc, #12]	; (4023e0 <usb_d_ep0_init+0x24>)
  4023d2:	4798      	blx	r3
  4023d4:	4603      	mov	r3, r0
}
  4023d6:	4618      	mov	r0, r3
  4023d8:	3708      	adds	r7, #8
  4023da:	46bd      	mov	sp, r7
  4023dc:	bd80      	pop	{r7, pc}
  4023de:	bf00      	nop
  4023e0:	004023e5 	.word	0x004023e5

004023e4 <usb_d_ep_init>:

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
  4023e4:	b580      	push	{r7, lr}
  4023e6:	b086      	sub	sp, #24
  4023e8:	af00      	add	r7, sp, #0
  4023ea:	4603      	mov	r3, r0
  4023ec:	71fb      	strb	r3, [r7, #7]
  4023ee:	460b      	mov	r3, r1
  4023f0:	71bb      	strb	r3, [r7, #6]
  4023f2:	4613      	mov	r3, r2
  4023f4:	80bb      	strh	r3, [r7, #4]
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
  4023f6:	79fb      	ldrb	r3, [r7, #7]
  4023f8:	4618      	mov	r0, r3
  4023fa:	4b1e      	ldr	r3, [pc, #120]	; (402474 <usb_d_ep_init+0x90>)
  4023fc:	4798      	blx	r3
  4023fe:	4603      	mov	r3, r0
  402400:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402402:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402406:	015b      	lsls	r3, r3, #5
  402408:	4a1b      	ldr	r2, [pc, #108]	; (402478 <usb_d_ep_init+0x94>)
  40240a:	4413      	add	r3, r2
  40240c:	613b      	str	r3, [r7, #16]
	if (ep_index >= 0) {
  40240e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402412:	2b00      	cmp	r3, #0
  402414:	db02      	blt.n	40241c <usb_d_ep_init+0x38>
		return -USB_ERR_REDO;
  402416:	f06f 0313 	mvn.w	r3, #19
  40241a:	e027      	b.n	40246c <usb_d_ep_init+0x88>
	} else {
		ep_index = _usb_d_find_ep(0xFF);
  40241c:	20ff      	movs	r0, #255	; 0xff
  40241e:	4b15      	ldr	r3, [pc, #84]	; (402474 <usb_d_ep_init+0x90>)
  402420:	4798      	blx	r3
  402422:	4603      	mov	r3, r0
  402424:	75fb      	strb	r3, [r7, #23]
		if (ep_index < 0) {
  402426:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40242a:	2b00      	cmp	r3, #0
  40242c:	da02      	bge.n	402434 <usb_d_ep_init+0x50>
			return -USB_ERR_ALLOC_FAIL;
  40242e:	f06f 0314 	mvn.w	r3, #20
  402432:	e01b      	b.n	40246c <usb_d_ep_init+0x88>
		}
		ept = &usb_d_inst.ep[ep_index];
  402434:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402438:	015b      	lsls	r3, r3, #5
  40243a:	4a0f      	ldr	r2, [pc, #60]	; (402478 <usb_d_ep_init+0x94>)
  40243c:	4413      	add	r3, r2
  40243e:	613b      	str	r3, [r7, #16]
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
  402440:	88ba      	ldrh	r2, [r7, #4]
  402442:	79b9      	ldrb	r1, [r7, #6]
  402444:	79fb      	ldrb	r3, [r7, #7]
  402446:	4618      	mov	r0, r3
  402448:	4b0c      	ldr	r3, [pc, #48]	; (40247c <usb_d_ep_init+0x98>)
  40244a:	4798      	blx	r3
  40244c:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
  40244e:	68fb      	ldr	r3, [r7, #12]
  402450:	2b00      	cmp	r3, #0
  402452:	da01      	bge.n	402458 <usb_d_ep_init+0x74>
		return rc;
  402454:	68fb      	ldr	r3, [r7, #12]
  402456:	e009      	b.n	40246c <usb_d_ep_init+0x88>
	}
	ept->xfer.hdr.ep   = ep;
  402458:	693b      	ldr	r3, [r7, #16]
  40245a:	79fa      	ldrb	r2, [r7, #7]
  40245c:	705a      	strb	r2, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
  40245e:	79bb      	ldrb	r3, [r7, #6]
  402460:	f003 0303 	and.w	r3, r3, #3
  402464:	b2da      	uxtb	r2, r3
  402466:	693b      	ldr	r3, [r7, #16]
  402468:	701a      	strb	r2, [r3, #0]
	return ERR_NONE;
  40246a:	2300      	movs	r3, #0
}
  40246c:	4618      	mov	r0, r3
  40246e:	3718      	adds	r7, #24
  402470:	46bd      	mov	sp, r7
  402472:	bd80      	pop	{r7, pc}
  402474:	00401efd 	.word	0x00401efd
  402478:	204015ec 	.word	0x204015ec
  40247c:	00406b59 	.word	0x00406b59

00402480 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
  402480:	b580      	push	{r7, lr}
  402482:	b084      	sub	sp, #16
  402484:	af00      	add	r7, sp, #0
  402486:	4603      	mov	r3, r0
  402488:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  40248a:	79fb      	ldrb	r3, [r7, #7]
  40248c:	4618      	mov	r0, r3
  40248e:	4b0d      	ldr	r3, [pc, #52]	; (4024c4 <usb_d_ep_deinit+0x44>)
  402490:	4798      	blx	r3
  402492:	4603      	mov	r3, r0
  402494:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402496:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40249a:	015b      	lsls	r3, r3, #5
  40249c:	4a0a      	ldr	r2, [pc, #40]	; (4024c8 <usb_d_ep_deinit+0x48>)
  40249e:	4413      	add	r3, r2
  4024a0:	60bb      	str	r3, [r7, #8]
	if (ep_index < 0) {
  4024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4024a6:	2b00      	cmp	r3, #0
  4024a8:	db07      	blt.n	4024ba <usb_d_ep_deinit+0x3a>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
  4024aa:	79fb      	ldrb	r3, [r7, #7]
  4024ac:	4618      	mov	r0, r3
  4024ae:	4b07      	ldr	r3, [pc, #28]	; (4024cc <usb_d_ep_deinit+0x4c>)
  4024b0:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
  4024b2:	68bb      	ldr	r3, [r7, #8]
  4024b4:	22ff      	movs	r2, #255	; 0xff
  4024b6:	705a      	strb	r2, [r3, #1]
  4024b8:	e000      	b.n	4024bc <usb_d_ep_deinit+0x3c>
		return;
  4024ba:	bf00      	nop
}
  4024bc:	3710      	adds	r7, #16
  4024be:	46bd      	mov	sp, r7
  4024c0:	bd80      	pop	{r7, pc}
  4024c2:	bf00      	nop
  4024c4:	00401efd 	.word	0x00401efd
  4024c8:	204015ec 	.word	0x204015ec
  4024cc:	00406cf9 	.word	0x00406cf9

004024d0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
  4024d0:	b580      	push	{r7, lr}
  4024d2:	b086      	sub	sp, #24
  4024d4:	af00      	add	r7, sp, #0
  4024d6:	4603      	mov	r3, r0
  4024d8:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  4024da:	79fb      	ldrb	r3, [r7, #7]
  4024dc:	4618      	mov	r0, r3
  4024de:	4b15      	ldr	r3, [pc, #84]	; (402534 <usb_d_ep_enable+0x64>)
  4024e0:	4798      	blx	r3
  4024e2:	4603      	mov	r3, r0
  4024e4:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4024e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4024ea:	015b      	lsls	r3, r3, #5
  4024ec:	4a12      	ldr	r2, [pc, #72]	; (402538 <usb_d_ep_enable+0x68>)
  4024ee:	4413      	add	r3, r2
  4024f0:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
  4024f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4024f6:	2b00      	cmp	r3, #0
  4024f8:	da02      	bge.n	402500 <usb_d_ep_enable+0x30>
		return -USB_ERR_PARAM;
  4024fa:	f06f 0311 	mvn.w	r3, #17
  4024fe:	e014      	b.n	40252a <usb_d_ep_enable+0x5a>
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
  402500:	693b      	ldr	r3, [r7, #16]
  402502:	781b      	ldrb	r3, [r3, #0]
  402504:	2b00      	cmp	r3, #0
  402506:	d101      	bne.n	40250c <usb_d_ep_enable+0x3c>
  402508:	2202      	movs	r2, #2
  40250a:	e000      	b.n	40250e <usb_d_ep_enable+0x3e>
  40250c:	2201      	movs	r2, #1
  40250e:	693b      	ldr	r3, [r7, #16]
  402510:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
  402512:	79fb      	ldrb	r3, [r7, #7]
  402514:	4618      	mov	r0, r3
  402516:	4b09      	ldr	r3, [pc, #36]	; (40253c <usb_d_ep_enable+0x6c>)
  402518:	4798      	blx	r3
  40251a:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
  40251c:	68fb      	ldr	r3, [r7, #12]
  40251e:	2b00      	cmp	r3, #0
  402520:	da02      	bge.n	402528 <usb_d_ep_enable+0x58>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
  402522:	693b      	ldr	r3, [r7, #16]
  402524:	2200      	movs	r2, #0
  402526:	709a      	strb	r2, [r3, #2]
	}
	return rc;
  402528:	68fb      	ldr	r3, [r7, #12]
}
  40252a:	4618      	mov	r0, r3
  40252c:	3718      	adds	r7, #24
  40252e:	46bd      	mov	sp, r7
  402530:	bd80      	pop	{r7, pc}
  402532:	bf00      	nop
  402534:	00401efd 	.word	0x00401efd
  402538:	204015ec 	.word	0x204015ec
  40253c:	00406d85 	.word	0x00406d85

00402540 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
  402540:	b590      	push	{r4, r7, lr}
  402542:	b08d      	sub	sp, #52	; 0x34
  402544:	af02      	add	r7, sp, #8
  402546:	6078      	str	r0, [r7, #4]
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
  402548:	687b      	ldr	r3, [r7, #4]
  40254a:	7a1b      	ldrb	r3, [r3, #8]
  40254c:	4618      	mov	r0, r3
  40254e:	4b51      	ldr	r3, [pc, #324]	; (402694 <usb_d_ep_transfer+0x154>)
  402550:	4798      	blx	r3
  402552:	4603      	mov	r3, r0
  402554:	77fb      	strb	r3, [r7, #31]
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
  402556:	f997 301f 	ldrsb.w	r3, [r7, #31]
  40255a:	015b      	lsls	r3, r3, #5
  40255c:	4a4e      	ldr	r2, [pc, #312]	; (402698 <usb_d_ep_transfer+0x158>)
  40255e:	4413      	add	r3, r2
  402560:	61bb      	str	r3, [r7, #24]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
  402562:	687b      	ldr	r3, [r7, #4]
  402564:	7a1b      	ldrb	r3, [r3, #8]
  402566:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40256a:	2b00      	cmp	r3, #0
  40256c:	bf14      	ite	ne
  40256e:	2301      	movne	r3, #1
  402570:	2300      	moveq	r3, #0
  402572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  402576:	687b      	ldr	r3, [r7, #4]
  402578:	7a5b      	ldrb	r3, [r3, #9]
  40257a:	2b00      	cmp	r3, #0
  40257c:	bf14      	ite	ne
  40257e:	2301      	movne	r3, #1
  402580:	2300      	moveq	r3, #0
  402582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t              len = xfer->size;
  402586:	687b      	ldr	r3, [r7, #4]
  402588:	685b      	ldr	r3, [r3, #4]
  40258a:	623b      	str	r3, [r7, #32]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
  40258c:	f997 301f 	ldrsb.w	r3, [r7, #31]
  402590:	2b00      	cmp	r3, #0
  402592:	da02      	bge.n	40259a <usb_d_ep_transfer+0x5a>
		return -USB_ERR_PARAM;
  402594:	f06f 0311 	mvn.w	r3, #17
  402598:	e077      	b.n	40268a <usb_d_ep_transfer+0x14a>
	}

	atomic_enter_critical(&flags);
  40259a:	f107 0308 	add.w	r3, r7, #8
  40259e:	4618      	mov	r0, r3
  4025a0:	4b3e      	ldr	r3, [pc, #248]	; (40269c <usb_d_ep_transfer+0x15c>)
  4025a2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
  4025a4:	69bb      	ldr	r3, [r7, #24]
  4025a6:	789b      	ldrb	r3, [r3, #2]
  4025a8:	73fb      	strb	r3, [r7, #15]
	if (state == USB_EP_S_IDLE) {
  4025aa:	7bfb      	ldrb	r3, [r7, #15]
  4025ac:	b2db      	uxtb	r3, r3
  4025ae:	2b01      	cmp	r3, #1
  4025b0:	d10c      	bne.n	4025cc <usb_d_ep_transfer+0x8c>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
  4025b2:	69bb      	ldr	r3, [r7, #24]
  4025b4:	2203      	movs	r2, #3
  4025b6:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
  4025b8:	f107 0308 	add.w	r3, r7, #8
  4025bc:	4618      	mov	r0, r3
  4025be:	4b38      	ldr	r3, [pc, #224]	; (4026a0 <usb_d_ep_transfer+0x160>)
  4025c0:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4025c2:	69bb      	ldr	r3, [r7, #24]
  4025c4:	781b      	ldrb	r3, [r3, #0]
  4025c6:	2b00      	cmp	r3, #0
  4025c8:	d151      	bne.n	40266e <usb_d_ep_transfer+0x12e>
  4025ca:	e017      	b.n	4025fc <usb_d_ep_transfer+0xbc>
		atomic_leave_critical(&flags);
  4025cc:	f107 0308 	add.w	r3, r7, #8
  4025d0:	4618      	mov	r0, r3
  4025d2:	4b33      	ldr	r3, [pc, #204]	; (4026a0 <usb_d_ep_transfer+0x160>)
  4025d4:	4798      	blx	r3
		switch (state) {
  4025d6:	7bfb      	ldrb	r3, [r7, #15]
  4025d8:	b2db      	uxtb	r3, r3
  4025da:	2b05      	cmp	r3, #5
  4025dc:	d004      	beq.n	4025e8 <usb_d_ep_transfer+0xa8>
  4025de:	2b06      	cmp	r3, #6
  4025e0:	d004      	beq.n	4025ec <usb_d_ep_transfer+0xac>
  4025e2:	2b00      	cmp	r3, #0
  4025e4:	d005      	beq.n	4025f2 <usb_d_ep_transfer+0xb2>
  4025e6:	e007      	b.n	4025f8 <usb_d_ep_transfer+0xb8>
			return USB_HALTED;
  4025e8:	2302      	movs	r3, #2
  4025ea:	e04e      	b.n	40268a <usb_d_ep_transfer+0x14a>
			return -USB_ERROR;
  4025ec:	f06f 030f 	mvn.w	r3, #15
  4025f0:	e04b      	b.n	40268a <usb_d_ep_transfer+0x14a>
			return -USB_ERR_FUNC;
  4025f2:	f06f 0312 	mvn.w	r3, #18
  4025f6:	e048      	b.n	40268a <usb_d_ep_transfer+0x14a>
			return USB_BUSY;
  4025f8:	2301      	movs	r3, #1
  4025fa:	e046      	b.n	40268a <usb_d_ep_transfer+0x14a>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
  4025fc:	69bb      	ldr	r3, [r7, #24]
  4025fe:	7c9b      	ldrb	r3, [r3, #18]
  402600:	b29a      	uxth	r2, r3
  402602:	69bb      	ldr	r3, [r7, #24]
  402604:	7cdb      	ldrb	r3, [r3, #19]
  402606:	b29b      	uxth	r3, r3
  402608:	021b      	lsls	r3, r3, #8
  40260a:	b29b      	uxth	r3, r3
  40260c:	4413      	add	r3, r2
  40260e:	82fb      	strh	r3, [r7, #22]
		/* SETUP without data: ZLP IN as status. */
		if (req_len == 0) {
  402610:	8afb      	ldrh	r3, [r7, #22]
  402612:	2b00      	cmp	r3, #0
  402614:	d10b      	bne.n	40262e <usb_d_ep_transfer+0xee>
			dir                 = true;
  402616:	2301      	movs	r3, #1
  402618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			len                 = 0;
  40261c:	2300      	movs	r3, #0
  40261e:	623b      	str	r3, [r7, #32]
			zlp                 = true;
  402620:	2301      	movs	r3, #1
  402622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  402626:	69bb      	ldr	r3, [r7, #24]
  402628:	2204      	movs	r2, #4
  40262a:	709a      	strb	r2, [r3, #2]
  40262c:	e01f      	b.n	40266e <usb_d_ep_transfer+0x12e>
		} else {
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
  40262e:	69bb      	ldr	r3, [r7, #24]
  402630:	7b1b      	ldrb	r3, [r3, #12]
  402632:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402636:	2b00      	cmp	r3, #0
  402638:	bf14      	ite	ne
  40263a:	2301      	movne	r3, #1
  40263c:	2300      	moveq	r3, #0
  40263e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			/* Data length not exceed requested. */
			if (len > req_len) {
  402642:	8afa      	ldrh	r2, [r7, #22]
  402644:	6a3b      	ldr	r3, [r7, #32]
  402646:	429a      	cmp	r2, r3
  402648:	d201      	bcs.n	40264e <usb_d_ep_transfer+0x10e>
				len = req_len;
  40264a:	8afb      	ldrh	r3, [r7, #22]
  40264c:	623b      	str	r3, [r7, #32]
			}
			if (dir) {
  40264e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  402652:	2b00      	cmp	r3, #0
  402654:	d008      	beq.n	402668 <usb_d_ep_transfer+0x128>
				/* Setup -> In */
				zlp = (req_len > len);
  402656:	8afa      	ldrh	r2, [r7, #22]
  402658:	6a3b      	ldr	r3, [r7, #32]
  40265a:	429a      	cmp	r2, r3
  40265c:	bf8c      	ite	hi
  40265e:	2301      	movhi	r3, #1
  402660:	2300      	movls	r3, #0
  402662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  402666:	e002      	b.n	40266e <usb_d_ep_transfer+0x12e>
			} else {
				zlp = false;
  402668:	2300      	movs	r3, #0
  40266a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
  40266e:	687b      	ldr	r3, [r7, #4]
  402670:	7a18      	ldrb	r0, [r3, #8]
  402672:	687b      	ldr	r3, [r7, #4]
  402674:	681a      	ldr	r2, [r3, #0]
  402676:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  40267a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
  40267e:	9300      	str	r3, [sp, #0]
  402680:	6a3b      	ldr	r3, [r7, #32]
  402682:	4c08      	ldr	r4, [pc, #32]	; (4026a4 <usb_d_ep_transfer+0x164>)
  402684:	47a0      	blx	r4
  402686:	6138      	str	r0, [r7, #16]
	return rc;
  402688:	693b      	ldr	r3, [r7, #16]
}
  40268a:	4618      	mov	r0, r3
  40268c:	372c      	adds	r7, #44	; 0x2c
  40268e:	46bd      	mov	sp, r7
  402690:	bd90      	pop	{r4, r7, pc}
  402692:	bf00      	nop
  402694:	00401efd 	.word	0x00401efd
  402698:	204015ec 	.word	0x204015ec
  40269c:	00401375 	.word	0x00401375
  4026a0:	0040139b 	.word	0x0040139b
  4026a4:	00401f7d 	.word	0x00401f7d

004026a8 <_usb_d_ep_halt_clr>:
		return USB_BUSY;
	}
}

static inline int32_t _usb_d_ep_halt_clr(const uint8_t ep)
{
  4026a8:	b580      	push	{r7, lr}
  4026aa:	b086      	sub	sp, #24
  4026ac:	af00      	add	r7, sp, #0
  4026ae:	4603      	mov	r3, r0
  4026b0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  4026b2:	79fb      	ldrb	r3, [r7, #7]
  4026b4:	4618      	mov	r0, r3
  4026b6:	4b1a      	ldr	r3, [pc, #104]	; (402720 <_usb_d_ep_halt_clr+0x78>)
  4026b8:	4798      	blx	r3
  4026ba:	4603      	mov	r3, r0
  4026bc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4026be:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4026c2:	015b      	lsls	r3, r3, #5
  4026c4:	4a17      	ldr	r2, [pc, #92]	; (402724 <_usb_d_ep_halt_clr+0x7c>)
  4026c6:	4413      	add	r3, r2
  4026c8:	613b      	str	r3, [r7, #16]
	int32_t          rc;
	if (ep_index < 0) {
  4026ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4026ce:	2b00      	cmp	r3, #0
  4026d0:	da02      	bge.n	4026d8 <_usb_d_ep_halt_clr+0x30>
		return -USB_ERR_PARAM;
  4026d2:	f06f 0311 	mvn.w	r3, #17
  4026d6:	e01f      	b.n	402718 <_usb_d_ep_halt_clr+0x70>
	}
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
  4026d8:	79fb      	ldrb	r3, [r7, #7]
  4026da:	2102      	movs	r1, #2
  4026dc:	4618      	mov	r0, r3
  4026de:	4b12      	ldr	r3, [pc, #72]	; (402728 <_usb_d_ep_halt_clr+0x80>)
  4026e0:	4798      	blx	r3
  4026e2:	4603      	mov	r3, r0
  4026e4:	2b00      	cmp	r3, #0
  4026e6:	d016      	beq.n	402716 <_usb_d_ep_halt_clr+0x6e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  4026e8:	79fb      	ldrb	r3, [r7, #7]
  4026ea:	2100      	movs	r1, #0
  4026ec:	4618      	mov	r0, r3
  4026ee:	4b0e      	ldr	r3, [pc, #56]	; (402728 <_usb_d_ep_halt_clr+0x80>)
  4026f0:	4798      	blx	r3
  4026f2:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
  4026f4:	68fb      	ldr	r3, [r7, #12]
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	da01      	bge.n	4026fe <_usb_d_ep_halt_clr+0x56>
			return rc;
  4026fa:	68fb      	ldr	r3, [r7, #12]
  4026fc:	e00c      	b.n	402718 <_usb_d_ep_halt_clr+0x70>
		}
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
  4026fe:	693b      	ldr	r3, [r7, #16]
  402700:	2201      	movs	r2, #1
  402702:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
  402704:	693b      	ldr	r3, [r7, #16]
  402706:	2203      	movs	r2, #3
  402708:	70da      	strb	r2, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
  40270a:	693b      	ldr	r3, [r7, #16]
  40270c:	69db      	ldr	r3, [r3, #28]
  40270e:	79f8      	ldrb	r0, [r7, #7]
  402710:	2200      	movs	r2, #0
  402712:	2103      	movs	r1, #3
  402714:	4798      	blx	r3
	}
	return ERR_NONE;
  402716:	2300      	movs	r3, #0
}
  402718:	4618      	mov	r0, r3
  40271a:	3718      	adds	r7, #24
  40271c:	46bd      	mov	sp, r7
  40271e:	bd80      	pop	{r7, pc}
  402720:	00401efd 	.word	0x00401efd
  402724:	204015ec 	.word	0x204015ec
  402728:	004070c5 	.word	0x004070c5

0040272c <usb_d_ep_halt>:

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
  40272c:	b580      	push	{r7, lr}
  40272e:	b082      	sub	sp, #8
  402730:	af00      	add	r7, sp, #0
  402732:	4603      	mov	r3, r0
  402734:	460a      	mov	r2, r1
  402736:	71fb      	strb	r3, [r7, #7]
  402738:	4613      	mov	r3, r2
  40273a:	71bb      	strb	r3, [r7, #6]
	if (ctrl == USB_EP_HALT_CLR) {
  40273c:	79bb      	ldrb	r3, [r7, #6]
  40273e:	2b00      	cmp	r3, #0
  402740:	d105      	bne.n	40274e <usb_d_ep_halt+0x22>
		return _usb_d_ep_halt_clr(ep);
  402742:	79fb      	ldrb	r3, [r7, #7]
  402744:	4618      	mov	r0, r3
  402746:	4b0c      	ldr	r3, [pc, #48]	; (402778 <usb_d_ep_halt+0x4c>)
  402748:	4798      	blx	r3
  40274a:	4603      	mov	r3, r0
  40274c:	e00f      	b.n	40276e <usb_d_ep_halt+0x42>
	} else if (ctrl == USB_EP_HALT_SET) {
  40274e:	79bb      	ldrb	r3, [r7, #6]
  402750:	2b01      	cmp	r3, #1
  402752:	d106      	bne.n	402762 <usb_d_ep_halt+0x36>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  402754:	79fb      	ldrb	r3, [r7, #7]
  402756:	2101      	movs	r1, #1
  402758:	4618      	mov	r0, r3
  40275a:	4b08      	ldr	r3, [pc, #32]	; (40277c <usb_d_ep_halt+0x50>)
  40275c:	4798      	blx	r3
  40275e:	4603      	mov	r3, r0
  402760:	e005      	b.n	40276e <usb_d_ep_halt+0x42>
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
  402762:	79fb      	ldrb	r3, [r7, #7]
  402764:	2102      	movs	r1, #2
  402766:	4618      	mov	r0, r3
  402768:	4b04      	ldr	r3, [pc, #16]	; (40277c <usb_d_ep_halt+0x50>)
  40276a:	4798      	blx	r3
  40276c:	4603      	mov	r3, r0
	}
}
  40276e:	4618      	mov	r0, r3
  402770:	3708      	adds	r7, #8
  402772:	46bd      	mov	sp, r7
  402774:	bd80      	pop	{r7, pc}
  402776:	bf00      	nop
  402778:	004026a9 	.word	0x004026a9
  40277c:	004070c5 	.word	0x004070c5

00402780 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
  402780:	b580      	push	{r7, lr}
  402782:	b086      	sub	sp, #24
  402784:	af00      	add	r7, sp, #0
  402786:	4603      	mov	r3, r0
  402788:	603a      	str	r2, [r7, #0]
  40278a:	71fb      	strb	r3, [r7, #7]
  40278c:	460b      	mov	r3, r1
  40278e:	71bb      	strb	r3, [r7, #6]
	int8_t           ep_index = _usb_d_find_ep(ep);
  402790:	79fb      	ldrb	r3, [r7, #7]
  402792:	4618      	mov	r0, r3
  402794:	4b16      	ldr	r3, [pc, #88]	; (4027f0 <usb_d_ep_register_callback+0x70>)
  402796:	4798      	blx	r3
  402798:	4603      	mov	r3, r0
  40279a:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  40279c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4027a0:	015b      	lsls	r3, r3, #5
  4027a2:	4a14      	ldr	r2, [pc, #80]	; (4027f4 <usb_d_ep_register_callback+0x74>)
  4027a4:	4413      	add	r3, r2
  4027a6:	613b      	str	r3, [r7, #16]
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
  4027a8:	683b      	ldr	r3, [r7, #0]
  4027aa:	2b00      	cmp	r3, #0
  4027ac:	d001      	beq.n	4027b2 <usb_d_ep_register_callback+0x32>
  4027ae:	683b      	ldr	r3, [r7, #0]
  4027b0:	e000      	b.n	4027b4 <usb_d_ep_register_callback+0x34>
  4027b2:	4b11      	ldr	r3, [pc, #68]	; (4027f8 <usb_d_ep_register_callback+0x78>)
  4027b4:	60fb      	str	r3, [r7, #12]
	if (ep_index < 0) {
  4027b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4027ba:	2b00      	cmp	r3, #0
  4027bc:	db13      	blt.n	4027e6 <usb_d_ep_register_callback+0x66>
		return;
	}
	switch (type) {
  4027be:	79bb      	ldrb	r3, [r7, #6]
  4027c0:	2b01      	cmp	r3, #1
  4027c2:	d008      	beq.n	4027d6 <usb_d_ep_register_callback+0x56>
  4027c4:	2b02      	cmp	r3, #2
  4027c6:	d00a      	beq.n	4027de <usb_d_ep_register_callback+0x5e>
  4027c8:	2b00      	cmp	r3, #0
  4027ca:	d000      	beq.n	4027ce <usb_d_ep_register_callback+0x4e>
		break;
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
  4027cc:	e00c      	b.n	4027e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
  4027ce:	693b      	ldr	r3, [r7, #16]
  4027d0:	68fa      	ldr	r2, [r7, #12]
  4027d2:	615a      	str	r2, [r3, #20]
		break;
  4027d4:	e008      	b.n	4027e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
  4027d6:	693b      	ldr	r3, [r7, #16]
  4027d8:	68fa      	ldr	r2, [r7, #12]
  4027da:	619a      	str	r2, [r3, #24]
		break;
  4027dc:	e004      	b.n	4027e8 <usb_d_ep_register_callback+0x68>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
  4027de:	693b      	ldr	r3, [r7, #16]
  4027e0:	68fa      	ldr	r2, [r7, #12]
  4027e2:	61da      	str	r2, [r3, #28]
		break;
  4027e4:	e000      	b.n	4027e8 <usb_d_ep_register_callback+0x68>
		return;
  4027e6:	bf00      	nop
	}
}
  4027e8:	3718      	adds	r7, #24
  4027ea:	46bd      	mov	sp, r7
  4027ec:	bd80      	pop	{r7, pc}
  4027ee:	bf00      	nop
  4027f0:	00401efd 	.word	0x00401efd
  4027f4:	204015ec 	.word	0x204015ec
  4027f8:	00401fd1 	.word	0x00401fd1

004027fc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
  4027fc:	b480      	push	{r7}
  4027fe:	b085      	sub	sp, #20
  402800:	af00      	add	r7, sp, #0
  402802:	4603      	mov	r3, r0
  402804:	60b9      	str	r1, [r7, #8]
  402806:	607a      	str	r2, [r7, #4]
  402808:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
  40280a:	7bfb      	ldrb	r3, [r7, #15]
  40280c:	f083 0301 	eor.w	r3, r3, #1
  402810:	b2db      	uxtb	r3, r3
  402812:	2b00      	cmp	r3, #0
  402814:	d000      	beq.n	402818 <assert+0x1c>
		__asm("BKPT #0");
  402816:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  402818:	bf00      	nop
  40281a:	3714      	adds	r7, #20
  40281c:	46bd      	mov	sp, r7
  40281e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402822:	4770      	bx	lr

00402824 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
  402824:	b480      	push	{r7}
  402826:	b085      	sub	sp, #20
  402828:	af00      	add	r7, sp, #0
  40282a:	6078      	str	r0, [r7, #4]
  40282c:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  40282e:	687b      	ldr	r3, [r7, #4]
  402830:	681b      	ldr	r3, [r3, #0]
  402832:	60fb      	str	r3, [r7, #12]
  402834:	e008      	b.n	402848 <is_list_element+0x24>
		if (it == element) {
  402836:	68fa      	ldr	r2, [r7, #12]
  402838:	683b      	ldr	r3, [r7, #0]
  40283a:	429a      	cmp	r2, r3
  40283c:	d101      	bne.n	402842 <is_list_element+0x1e>
			return true;
  40283e:	2301      	movs	r3, #1
  402840:	e006      	b.n	402850 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
  402842:	68fb      	ldr	r3, [r7, #12]
  402844:	681b      	ldr	r3, [r3, #0]
  402846:	60fb      	str	r3, [r7, #12]
  402848:	68fb      	ldr	r3, [r7, #12]
  40284a:	2b00      	cmp	r3, #0
  40284c:	d1f3      	bne.n	402836 <is_list_element+0x12>
		}
	}

	return false;
  40284e:	2300      	movs	r3, #0
}
  402850:	4618      	mov	r0, r3
  402852:	3714      	adds	r7, #20
  402854:	46bd      	mov	sp, r7
  402856:	f85d 7b04 	ldr.w	r7, [sp], #4
  40285a:	4770      	bx	lr

0040285c <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
  40285c:	b580      	push	{r7, lr}
  40285e:	b084      	sub	sp, #16
  402860:	af00      	add	r7, sp, #0
  402862:	6078      	str	r0, [r7, #4]
  402864:	6039      	str	r1, [r7, #0]
	struct list_element *it = list->head;
  402866:	687b      	ldr	r3, [r7, #4]
  402868:	681b      	ldr	r3, [r3, #0]
  40286a:	60fb      	str	r3, [r7, #12]

	ASSERT(!is_list_element(list, element));
  40286c:	6839      	ldr	r1, [r7, #0]
  40286e:	6878      	ldr	r0, [r7, #4]
  402870:	4b16      	ldr	r3, [pc, #88]	; (4028cc <list_insert_at_end+0x70>)
  402872:	4798      	blx	r3
  402874:	4603      	mov	r3, r0
  402876:	2b00      	cmp	r3, #0
  402878:	bf14      	ite	ne
  40287a:	2301      	movne	r3, #1
  40287c:	2300      	moveq	r3, #0
  40287e:	b2db      	uxtb	r3, r3
  402880:	f083 0301 	eor.w	r3, r3, #1
  402884:	b2db      	uxtb	r3, r3
  402886:	f003 0301 	and.w	r3, r3, #1
  40288a:	b2db      	uxtb	r3, r3
  40288c:	224f      	movs	r2, #79	; 0x4f
  40288e:	4910      	ldr	r1, [pc, #64]	; (4028d0 <list_insert_at_end+0x74>)
  402890:	4618      	mov	r0, r3
  402892:	4b10      	ldr	r3, [pc, #64]	; (4028d4 <list_insert_at_end+0x78>)
  402894:	4798      	blx	r3

	if (!list->head) {
  402896:	687b      	ldr	r3, [r7, #4]
  402898:	681b      	ldr	r3, [r3, #0]
  40289a:	2b00      	cmp	r3, #0
  40289c:	d109      	bne.n	4028b2 <list_insert_at_end+0x56>
		list->head                             = (struct list_element *)element;
  40289e:	687b      	ldr	r3, [r7, #4]
  4028a0:	683a      	ldr	r2, [r7, #0]
  4028a2:	601a      	str	r2, [r3, #0]
		((struct list_element *)element)->next = NULL;
  4028a4:	683b      	ldr	r3, [r7, #0]
  4028a6:	2200      	movs	r2, #0
  4028a8:	601a      	str	r2, [r3, #0]
		return;
  4028aa:	e00c      	b.n	4028c6 <list_insert_at_end+0x6a>
	}

	while (it->next) {
		it = it->next;
  4028ac:	68fb      	ldr	r3, [r7, #12]
  4028ae:	681b      	ldr	r3, [r3, #0]
  4028b0:	60fb      	str	r3, [r7, #12]
	while (it->next) {
  4028b2:	68fb      	ldr	r3, [r7, #12]
  4028b4:	681b      	ldr	r3, [r3, #0]
  4028b6:	2b00      	cmp	r3, #0
  4028b8:	d1f8      	bne.n	4028ac <list_insert_at_end+0x50>
	}
	it->next                               = (struct list_element *)element;
  4028ba:	68fb      	ldr	r3, [r7, #12]
  4028bc:	683a      	ldr	r2, [r7, #0]
  4028be:	601a      	str	r2, [r3, #0]
	((struct list_element *)element)->next = NULL;
  4028c0:	683b      	ldr	r3, [r7, #0]
  4028c2:	2200      	movs	r2, #0
  4028c4:	601a      	str	r2, [r3, #0]
}
  4028c6:	3710      	adds	r7, #16
  4028c8:	46bd      	mov	sp, r7
  4028ca:	bd80      	pop	{r7, pc}
  4028cc:	00402825 	.word	0x00402825
  4028d0:	004095f0 	.word	0x004095f0
  4028d4:	004027fd 	.word	0x004027fd

004028d8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4028d8:	b580      	push	{r7, lr}
  4028da:	b084      	sub	sp, #16
  4028dc:	af00      	add	r7, sp, #0
  4028de:	60f8      	str	r0, [r7, #12]
  4028e0:	60b9      	str	r1, [r7, #8]
  4028e2:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
  4028e4:	68fb      	ldr	r3, [r7, #12]
  4028e6:	2b00      	cmp	r3, #0
  4028e8:	d007      	beq.n	4028fa <ringbuffer_init+0x22>
  4028ea:	68bb      	ldr	r3, [r7, #8]
  4028ec:	2b00      	cmp	r3, #0
  4028ee:	d004      	beq.n	4028fa <ringbuffer_init+0x22>
  4028f0:	687b      	ldr	r3, [r7, #4]
  4028f2:	2b00      	cmp	r3, #0
  4028f4:	d001      	beq.n	4028fa <ringbuffer_init+0x22>
  4028f6:	2301      	movs	r3, #1
  4028f8:	e000      	b.n	4028fc <ringbuffer_init+0x24>
  4028fa:	2300      	movs	r3, #0
  4028fc:	f003 0301 	and.w	r3, r3, #1
  402900:	b2db      	uxtb	r3, r3
  402902:	2228      	movs	r2, #40	; 0x28
  402904:	490f      	ldr	r1, [pc, #60]	; (402944 <ringbuffer_init+0x6c>)
  402906:	4618      	mov	r0, r3
  402908:	4b0f      	ldr	r3, [pc, #60]	; (402948 <ringbuffer_init+0x70>)
  40290a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  40290c:	687b      	ldr	r3, [r7, #4]
  40290e:	1e5a      	subs	r2, r3, #1
  402910:	687b      	ldr	r3, [r7, #4]
  402912:	4013      	ands	r3, r2
  402914:	2b00      	cmp	r3, #0
  402916:	d002      	beq.n	40291e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
  402918:	f06f 030c 	mvn.w	r3, #12
  40291c:	e00e      	b.n	40293c <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  40291e:	687b      	ldr	r3, [r7, #4]
  402920:	1e5a      	subs	r2, r3, #1
  402922:	68fb      	ldr	r3, [r7, #12]
  402924:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
  402926:	68fb      	ldr	r3, [r7, #12]
  402928:	2200      	movs	r2, #0
  40292a:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
  40292c:	68fb      	ldr	r3, [r7, #12]
  40292e:	689a      	ldr	r2, [r3, #8]
  402930:	68fb      	ldr	r3, [r7, #12]
  402932:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
  402934:	68fb      	ldr	r3, [r7, #12]
  402936:	68ba      	ldr	r2, [r7, #8]
  402938:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  40293a:	2300      	movs	r3, #0
}
  40293c:	4618      	mov	r0, r3
  40293e:	3710      	adds	r7, #16
  402940:	46bd      	mov	sp, r7
  402942:	bd80      	pop	{r7, pc}
  402944:	00409610 	.word	0x00409610
  402948:	004027fd 	.word	0x004027fd

0040294c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  40294c:	b580      	push	{r7, lr}
  40294e:	b082      	sub	sp, #8
  402950:	af00      	add	r7, sp, #0
  402952:	6078      	str	r0, [r7, #4]
  402954:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
  402956:	687b      	ldr	r3, [r7, #4]
  402958:	2b00      	cmp	r3, #0
  40295a:	d004      	beq.n	402966 <ringbuffer_get+0x1a>
  40295c:	683b      	ldr	r3, [r7, #0]
  40295e:	2b00      	cmp	r3, #0
  402960:	d001      	beq.n	402966 <ringbuffer_get+0x1a>
  402962:	2301      	movs	r3, #1
  402964:	e000      	b.n	402968 <ringbuffer_get+0x1c>
  402966:	2300      	movs	r3, #0
  402968:	f003 0301 	and.w	r3, r3, #1
  40296c:	b2db      	uxtb	r3, r3
  40296e:	2240      	movs	r2, #64	; 0x40
  402970:	4910      	ldr	r1, [pc, #64]	; (4029b4 <ringbuffer_get+0x68>)
  402972:	4618      	mov	r0, r3
  402974:	4b10      	ldr	r3, [pc, #64]	; (4029b8 <ringbuffer_get+0x6c>)
  402976:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  402978:	687b      	ldr	r3, [r7, #4]
  40297a:	68da      	ldr	r2, [r3, #12]
  40297c:	687b      	ldr	r3, [r7, #4]
  40297e:	689b      	ldr	r3, [r3, #8]
  402980:	429a      	cmp	r2, r3
  402982:	d011      	beq.n	4029a8 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
  402984:	687b      	ldr	r3, [r7, #4]
  402986:	681a      	ldr	r2, [r3, #0]
  402988:	687b      	ldr	r3, [r7, #4]
  40298a:	6899      	ldr	r1, [r3, #8]
  40298c:	687b      	ldr	r3, [r7, #4]
  40298e:	685b      	ldr	r3, [r3, #4]
  402990:	400b      	ands	r3, r1
  402992:	4413      	add	r3, r2
  402994:	781a      	ldrb	r2, [r3, #0]
  402996:	683b      	ldr	r3, [r7, #0]
  402998:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
  40299a:	687b      	ldr	r3, [r7, #4]
  40299c:	689b      	ldr	r3, [r3, #8]
  40299e:	1c5a      	adds	r2, r3, #1
  4029a0:	687b      	ldr	r3, [r7, #4]
  4029a2:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
  4029a4:	2300      	movs	r3, #0
  4029a6:	e001      	b.n	4029ac <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
  4029a8:	f06f 0309 	mvn.w	r3, #9
}
  4029ac:	4618      	mov	r0, r3
  4029ae:	3708      	adds	r7, #8
  4029b0:	46bd      	mov	sp, r7
  4029b2:	bd80      	pop	{r7, pc}
  4029b4:	00409610 	.word	0x00409610
  4029b8:	004027fd 	.word	0x004027fd

004029bc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4029bc:	b580      	push	{r7, lr}
  4029be:	b082      	sub	sp, #8
  4029c0:	af00      	add	r7, sp, #0
  4029c2:	6078      	str	r0, [r7, #4]
  4029c4:	460b      	mov	r3, r1
  4029c6:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
  4029c8:	687b      	ldr	r3, [r7, #4]
  4029ca:	2b00      	cmp	r3, #0
  4029cc:	bf14      	ite	ne
  4029ce:	2301      	movne	r3, #1
  4029d0:	2300      	moveq	r3, #0
  4029d2:	b2db      	uxtb	r3, r3
  4029d4:	2251      	movs	r2, #81	; 0x51
  4029d6:	4914      	ldr	r1, [pc, #80]	; (402a28 <ringbuffer_put+0x6c>)
  4029d8:	4618      	mov	r0, r3
  4029da:	4b14      	ldr	r3, [pc, #80]	; (402a2c <ringbuffer_put+0x70>)
  4029dc:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4029de:	687b      	ldr	r3, [r7, #4]
  4029e0:	681a      	ldr	r2, [r3, #0]
  4029e2:	687b      	ldr	r3, [r7, #4]
  4029e4:	68d9      	ldr	r1, [r3, #12]
  4029e6:	687b      	ldr	r3, [r7, #4]
  4029e8:	685b      	ldr	r3, [r3, #4]
  4029ea:	400b      	ands	r3, r1
  4029ec:	4413      	add	r3, r2
  4029ee:	78fa      	ldrb	r2, [r7, #3]
  4029f0:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4029f2:	687b      	ldr	r3, [r7, #4]
  4029f4:	68da      	ldr	r2, [r3, #12]
  4029f6:	687b      	ldr	r3, [r7, #4]
  4029f8:	689b      	ldr	r3, [r3, #8]
  4029fa:	1ad2      	subs	r2, r2, r3
  4029fc:	687b      	ldr	r3, [r7, #4]
  4029fe:	685b      	ldr	r3, [r3, #4]
  402a00:	429a      	cmp	r2, r3
  402a02:	d906      	bls.n	402a12 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
  402a04:	687b      	ldr	r3, [r7, #4]
  402a06:	68da      	ldr	r2, [r3, #12]
  402a08:	687b      	ldr	r3, [r7, #4]
  402a0a:	685b      	ldr	r3, [r3, #4]
  402a0c:	1ad2      	subs	r2, r2, r3
  402a0e:	687b      	ldr	r3, [r7, #4]
  402a10:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
  402a12:	687b      	ldr	r3, [r7, #4]
  402a14:	68db      	ldr	r3, [r3, #12]
  402a16:	1c5a      	adds	r2, r3, #1
  402a18:	687b      	ldr	r3, [r7, #4]
  402a1a:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
  402a1c:	2300      	movs	r3, #0
}
  402a1e:	4618      	mov	r0, r3
  402a20:	3708      	adds	r7, #8
  402a22:	46bd      	mov	sp, r7
  402a24:	bd80      	pop	{r7, pc}
  402a26:	bf00      	nop
  402a28:	00409610 	.word	0x00409610
  402a2c:	004027fd 	.word	0x004027fd

00402a30 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  402a30:	b580      	push	{r7, lr}
  402a32:	b082      	sub	sp, #8
  402a34:	af00      	add	r7, sp, #0
  402a36:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
  402a38:	687b      	ldr	r3, [r7, #4]
  402a3a:	2b00      	cmp	r3, #0
  402a3c:	bf14      	ite	ne
  402a3e:	2301      	movne	r3, #1
  402a40:	2300      	moveq	r3, #0
  402a42:	b2db      	uxtb	r3, r3
  402a44:	2267      	movs	r2, #103	; 0x67
  402a46:	4906      	ldr	r1, [pc, #24]	; (402a60 <ringbuffer_num+0x30>)
  402a48:	4618      	mov	r0, r3
  402a4a:	4b06      	ldr	r3, [pc, #24]	; (402a64 <ringbuffer_num+0x34>)
  402a4c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  402a4e:	687b      	ldr	r3, [r7, #4]
  402a50:	68da      	ldr	r2, [r3, #12]
  402a52:	687b      	ldr	r3, [r7, #4]
  402a54:	689b      	ldr	r3, [r3, #8]
  402a56:	1ad3      	subs	r3, r2, r3
}
  402a58:	4618      	mov	r0, r3
  402a5a:	3708      	adds	r7, #8
  402a5c:	46bd      	mov	sp, r7
  402a5e:	bd80      	pop	{r7, pc}
  402a60:	00409610 	.word	0x00409610
  402a64:	004027fd 	.word	0x004027fd

00402a68 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
  402a68:	b480      	push	{r7}
  402a6a:	b083      	sub	sp, #12
  402a6c:	af00      	add	r7, sp, #0
  402a6e:	4603      	mov	r3, r0
  402a70:	6039      	str	r1, [r7, #0]
  402a72:	80fb      	strh	r3, [r7, #6]
  402a74:	4613      	mov	r3, r2
  402a76:	717b      	strb	r3, [r7, #5]
	switch (power) {
  402a78:	797b      	ldrb	r3, [r7, #5]
  402a7a:	3b05      	subs	r3, #5
  402a7c:	2b04      	cmp	r3, #4
  402a7e:	d852      	bhi.n	402b26 <_get_cycles_for_us_internal+0xbe>
  402a80:	a201      	add	r2, pc, #4	; (adr r2, 402a88 <_get_cycles_for_us_internal+0x20>)
  402a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402a86:	bf00      	nop
  402a88:	00402b07 	.word	0x00402b07
  402a8c:	00402ae9 	.word	0x00402ae9
  402a90:	00402acd 	.word	0x00402acd
  402a94:	00402aaf 	.word	0x00402aaf
  402a98:	00402a9d 	.word	0x00402a9d
	case 9:
		return (us * (freq / 1000000));
  402a9c:	88fb      	ldrh	r3, [r7, #6]
  402a9e:	683a      	ldr	r2, [r7, #0]
  402aa0:	4929      	ldr	r1, [pc, #164]	; (402b48 <_get_cycles_for_us_internal+0xe0>)
  402aa2:	fba1 1202 	umull	r1, r2, r1, r2
  402aa6:	0c92      	lsrs	r2, r2, #18
  402aa8:	fb02 f303 	mul.w	r3, r2, r3
  402aac:	e045      	b.n	402b3a <_get_cycles_for_us_internal+0xd2>
	case 8:
		return (us * (freq / 100000) + 9) / 10;
  402aae:	88fb      	ldrh	r3, [r7, #6]
  402ab0:	683a      	ldr	r2, [r7, #0]
  402ab2:	0952      	lsrs	r2, r2, #5
  402ab4:	4925      	ldr	r1, [pc, #148]	; (402b4c <_get_cycles_for_us_internal+0xe4>)
  402ab6:	fba1 1202 	umull	r1, r2, r1, r2
  402aba:	09d2      	lsrs	r2, r2, #7
  402abc:	fb02 f303 	mul.w	r3, r2, r3
  402ac0:	3309      	adds	r3, #9
  402ac2:	4a23      	ldr	r2, [pc, #140]	; (402b50 <_get_cycles_for_us_internal+0xe8>)
  402ac4:	fba2 2303 	umull	r2, r3, r2, r3
  402ac8:	08db      	lsrs	r3, r3, #3
  402aca:	e036      	b.n	402b3a <_get_cycles_for_us_internal+0xd2>
	case 7:
		return (us * (freq / 10000) + 99) / 100;
  402acc:	88fb      	ldrh	r3, [r7, #6]
  402ace:	683a      	ldr	r2, [r7, #0]
  402ad0:	4920      	ldr	r1, [pc, #128]	; (402b54 <_get_cycles_for_us_internal+0xec>)
  402ad2:	fba1 1202 	umull	r1, r2, r1, r2
  402ad6:	0b52      	lsrs	r2, r2, #13
  402ad8:	fb02 f303 	mul.w	r3, r2, r3
  402adc:	3363      	adds	r3, #99	; 0x63
  402ade:	4a1e      	ldr	r2, [pc, #120]	; (402b58 <_get_cycles_for_us_internal+0xf0>)
  402ae0:	fba2 2303 	umull	r2, r3, r2, r3
  402ae4:	095b      	lsrs	r3, r3, #5
  402ae6:	e028      	b.n	402b3a <_get_cycles_for_us_internal+0xd2>
	case 6:
		return (us * (freq / 1000) + 999) / 1000;
  402ae8:	88fb      	ldrh	r3, [r7, #6]
  402aea:	683a      	ldr	r2, [r7, #0]
  402aec:	491b      	ldr	r1, [pc, #108]	; (402b5c <_get_cycles_for_us_internal+0xf4>)
  402aee:	fba1 1202 	umull	r1, r2, r1, r2
  402af2:	0992      	lsrs	r2, r2, #6
  402af4:	fb02 f303 	mul.w	r3, r2, r3
  402af8:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  402afc:	4a17      	ldr	r2, [pc, #92]	; (402b5c <_get_cycles_for_us_internal+0xf4>)
  402afe:	fba2 2303 	umull	r2, r3, r2, r3
  402b02:	099b      	lsrs	r3, r3, #6
  402b04:	e019      	b.n	402b3a <_get_cycles_for_us_internal+0xd2>
	case 5:
		return (us * (freq / 100) + 9999) / 10000;
  402b06:	88fb      	ldrh	r3, [r7, #6]
  402b08:	683a      	ldr	r2, [r7, #0]
  402b0a:	4913      	ldr	r1, [pc, #76]	; (402b58 <_get_cycles_for_us_internal+0xf0>)
  402b0c:	fba1 1202 	umull	r1, r2, r1, r2
  402b10:	0952      	lsrs	r2, r2, #5
  402b12:	fb02 f203 	mul.w	r2, r2, r3
  402b16:	f242 730f 	movw	r3, #9999	; 0x270f
  402b1a:	4413      	add	r3, r2
  402b1c:	4a0d      	ldr	r2, [pc, #52]	; (402b54 <_get_cycles_for_us_internal+0xec>)
  402b1e:	fba2 2303 	umull	r2, r3, r2, r3
  402b22:	0b5b      	lsrs	r3, r3, #13
  402b24:	e009      	b.n	402b3a <_get_cycles_for_us_internal+0xd2>
	default:
		return (us * freq + 999999) / 1000000;
  402b26:	88fb      	ldrh	r3, [r7, #6]
  402b28:	683a      	ldr	r2, [r7, #0]
  402b2a:	fb02 f203 	mul.w	r2, r2, r3
  402b2e:	4b0c      	ldr	r3, [pc, #48]	; (402b60 <_get_cycles_for_us_internal+0xf8>)
  402b30:	4413      	add	r3, r2
  402b32:	4a05      	ldr	r2, [pc, #20]	; (402b48 <_get_cycles_for_us_internal+0xe0>)
  402b34:	fba2 2303 	umull	r2, r3, r2, r3
  402b38:	0c9b      	lsrs	r3, r3, #18
	}
}
  402b3a:	4618      	mov	r0, r3
  402b3c:	370c      	adds	r7, #12
  402b3e:	46bd      	mov	sp, r7
  402b40:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b44:	4770      	bx	lr
  402b46:	bf00      	nop
  402b48:	431bde83 	.word	0x431bde83
  402b4c:	0a7c5ac5 	.word	0x0a7c5ac5
  402b50:	cccccccd 	.word	0xcccccccd
  402b54:	d1b71759 	.word	0xd1b71759
  402b58:	51eb851f 	.word	0x51eb851f
  402b5c:	10624dd3 	.word	0x10624dd3
  402b60:	000f423f 	.word	0x000f423f

00402b64 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
  402b64:	b580      	push	{r7, lr}
  402b66:	b082      	sub	sp, #8
  402b68:	af00      	add	r7, sp, #0
  402b6a:	4603      	mov	r3, r0
  402b6c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  402b6e:	88fb      	ldrh	r3, [r7, #6]
  402b70:	2209      	movs	r2, #9
  402b72:	4904      	ldr	r1, [pc, #16]	; (402b84 <_get_cycles_for_us+0x20>)
  402b74:	4618      	mov	r0, r3
  402b76:	4b04      	ldr	r3, [pc, #16]	; (402b88 <_get_cycles_for_us+0x24>)
  402b78:	4798      	blx	r3
  402b7a:	4603      	mov	r3, r0
}
  402b7c:	4618      	mov	r0, r3
  402b7e:	3708      	adds	r7, #8
  402b80:	46bd      	mov	sp, r7
  402b82:	bd80      	pop	{r7, pc}
  402b84:	11e1a300 	.word	0x11e1a300
  402b88:	00402a69 	.word	0x00402a69

00402b8c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
  402b8c:	b480      	push	{r7}
  402b8e:	b083      	sub	sp, #12
  402b90:	af00      	add	r7, sp, #0
  402b92:	4603      	mov	r3, r0
  402b94:	6039      	str	r1, [r7, #0]
  402b96:	80fb      	strh	r3, [r7, #6]
  402b98:	4613      	mov	r3, r2
  402b9a:	717b      	strb	r3, [r7, #5]
	switch (power) {
  402b9c:	797b      	ldrb	r3, [r7, #5]
  402b9e:	3b05      	subs	r3, #5
  402ba0:	2b04      	cmp	r3, #4
  402ba2:	d84b      	bhi.n	402c3c <_get_cycles_for_ms_internal+0xb0>
  402ba4:	a201      	add	r2, pc, #4	; (adr r2, 402bac <_get_cycles_for_ms_internal+0x20>)
  402ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402baa:	bf00      	nop
  402bac:	00402c21 	.word	0x00402c21
  402bb0:	00402c0f 	.word	0x00402c0f
  402bb4:	00402bf5 	.word	0x00402bf5
  402bb8:	00402bdb 	.word	0x00402bdb
  402bbc:	00402bc1 	.word	0x00402bc1
	case 9:
		return (ms * (freq / 1000000) * 1000);
  402bc0:	88fb      	ldrh	r3, [r7, #6]
  402bc2:	683a      	ldr	r2, [r7, #0]
  402bc4:	4925      	ldr	r1, [pc, #148]	; (402c5c <_get_cycles_for_ms_internal+0xd0>)
  402bc6:	fba1 1202 	umull	r1, r2, r1, r2
  402bca:	0c92      	lsrs	r2, r2, #18
  402bcc:	fb02 f303 	mul.w	r3, r2, r3
  402bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  402bd4:	fb02 f303 	mul.w	r3, r2, r3
  402bd8:	e03a      	b.n	402c50 <_get_cycles_for_ms_internal+0xc4>
	case 8:
		return (ms * (freq / 100000) * 100);
  402bda:	88fb      	ldrh	r3, [r7, #6]
  402bdc:	683a      	ldr	r2, [r7, #0]
  402bde:	0952      	lsrs	r2, r2, #5
  402be0:	491f      	ldr	r1, [pc, #124]	; (402c60 <_get_cycles_for_ms_internal+0xd4>)
  402be2:	fba1 1202 	umull	r1, r2, r1, r2
  402be6:	09d2      	lsrs	r2, r2, #7
  402be8:	fb02 f303 	mul.w	r3, r2, r3
  402bec:	2264      	movs	r2, #100	; 0x64
  402bee:	fb02 f303 	mul.w	r3, r2, r3
  402bf2:	e02d      	b.n	402c50 <_get_cycles_for_ms_internal+0xc4>
	case 7:
		return (ms * (freq / 10000) * 10);
  402bf4:	88fb      	ldrh	r3, [r7, #6]
  402bf6:	683a      	ldr	r2, [r7, #0]
  402bf8:	491a      	ldr	r1, [pc, #104]	; (402c64 <_get_cycles_for_ms_internal+0xd8>)
  402bfa:	fba1 1202 	umull	r1, r2, r1, r2
  402bfe:	0b52      	lsrs	r2, r2, #13
  402c00:	fb02 f203 	mul.w	r2, r2, r3
  402c04:	4613      	mov	r3, r2
  402c06:	009b      	lsls	r3, r3, #2
  402c08:	4413      	add	r3, r2
  402c0a:	005b      	lsls	r3, r3, #1
  402c0c:	e020      	b.n	402c50 <_get_cycles_for_ms_internal+0xc4>
	case 6:
		return (ms * (freq / 1000));
  402c0e:	88fb      	ldrh	r3, [r7, #6]
  402c10:	683a      	ldr	r2, [r7, #0]
  402c12:	4915      	ldr	r1, [pc, #84]	; (402c68 <_get_cycles_for_ms_internal+0xdc>)
  402c14:	fba1 1202 	umull	r1, r2, r1, r2
  402c18:	0992      	lsrs	r2, r2, #6
  402c1a:	fb02 f303 	mul.w	r3, r2, r3
  402c1e:	e017      	b.n	402c50 <_get_cycles_for_ms_internal+0xc4>
	case 5:
		return (ms * (freq / 100) + 9) / 10;
  402c20:	88fb      	ldrh	r3, [r7, #6]
  402c22:	683a      	ldr	r2, [r7, #0]
  402c24:	4911      	ldr	r1, [pc, #68]	; (402c6c <_get_cycles_for_ms_internal+0xe0>)
  402c26:	fba1 1202 	umull	r1, r2, r1, r2
  402c2a:	0952      	lsrs	r2, r2, #5
  402c2c:	fb02 f303 	mul.w	r3, r2, r3
  402c30:	3309      	adds	r3, #9
  402c32:	4a0f      	ldr	r2, [pc, #60]	; (402c70 <_get_cycles_for_ms_internal+0xe4>)
  402c34:	fba2 2303 	umull	r2, r3, r2, r3
  402c38:	08db      	lsrs	r3, r3, #3
  402c3a:	e009      	b.n	402c50 <_get_cycles_for_ms_internal+0xc4>
	default:
		return (ms * (freq / 1) + 999) / 1000;
  402c3c:	88fb      	ldrh	r3, [r7, #6]
  402c3e:	683a      	ldr	r2, [r7, #0]
  402c40:	fb02 f303 	mul.w	r3, r2, r3
  402c44:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  402c48:	4a07      	ldr	r2, [pc, #28]	; (402c68 <_get_cycles_for_ms_internal+0xdc>)
  402c4a:	fba2 2303 	umull	r2, r3, r2, r3
  402c4e:	099b      	lsrs	r3, r3, #6
	}
}
  402c50:	4618      	mov	r0, r3
  402c52:	370c      	adds	r7, #12
  402c54:	46bd      	mov	sp, r7
  402c56:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c5a:	4770      	bx	lr
  402c5c:	431bde83 	.word	0x431bde83
  402c60:	0a7c5ac5 	.word	0x0a7c5ac5
  402c64:	d1b71759 	.word	0xd1b71759
  402c68:	10624dd3 	.word	0x10624dd3
  402c6c:	51eb851f 	.word	0x51eb851f
  402c70:	cccccccd 	.word	0xcccccccd

00402c74 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
  402c74:	b580      	push	{r7, lr}
  402c76:	b082      	sub	sp, #8
  402c78:	af00      	add	r7, sp, #0
  402c7a:	4603      	mov	r3, r0
  402c7c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  402c7e:	88fb      	ldrh	r3, [r7, #6]
  402c80:	2209      	movs	r2, #9
  402c82:	4904      	ldr	r1, [pc, #16]	; (402c94 <_get_cycles_for_ms+0x20>)
  402c84:	4618      	mov	r0, r3
  402c86:	4b04      	ldr	r3, [pc, #16]	; (402c98 <_get_cycles_for_ms+0x24>)
  402c88:	4798      	blx	r3
  402c8a:	4603      	mov	r3, r0
}
  402c8c:	4618      	mov	r0, r3
  402c8e:	3708      	adds	r7, #8
  402c90:	46bd      	mov	sp, r7
  402c92:	bd80      	pop	{r7, pc}
  402c94:	11e1a300 	.word	0x11e1a300
  402c98:	00402b8d 	.word	0x00402b8d

00402c9c <_delay_cycles>:
 * \note In theory, a single loop runs take 2 cycles or more. But we find it
 * really only needs 1 cycle through debugging.
 *
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
  402c9c:	b480      	push	{r7}
  402c9e:	b083      	sub	sp, #12
  402ca0:	af00      	add	r7, sp, #0
  402ca2:	6078      	str	r0, [r7, #4]
  402ca4:	6039      	str	r1, [r7, #0]

00402ca6 <__delay>:
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  402ca6:	3901      	subs	r1, #1
  402ca8:	d8fd      	bhi.n	402ca6 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
  402caa:	bf00      	nop
  402cac:	370c      	adds	r7, #12
  402cae:	46bd      	mov	sp, r7
  402cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cb4:	4770      	bx	lr

00402cb6 <hri_efc_write_EEFC_FMR_FWS_bf>:
	tmp = (tmp & EEFC_FMR_FWS(mask)) >> EEFC_FMR_FWS_Pos;
	return tmp;
}

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
  402cb6:	b480      	push	{r7}
  402cb8:	b085      	sub	sp, #20
  402cba:	af00      	add	r7, sp, #0
  402cbc:	6078      	str	r0, [r7, #4]
  402cbe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  402cc0:	687b      	ldr	r3, [r7, #4]
  402cc2:	681b      	ldr	r3, [r3, #0]
  402cc4:	60fb      	str	r3, [r7, #12]
	tmp &= ~EEFC_FMR_FWS_Msk;
  402cc6:	68fb      	ldr	r3, [r7, #12]
  402cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  402ccc:	60fb      	str	r3, [r7, #12]
	tmp |= EEFC_FMR_FWS(data);
  402cce:	683b      	ldr	r3, [r7, #0]
  402cd0:	021b      	lsls	r3, r3, #8
  402cd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  402cd6:	68fa      	ldr	r2, [r7, #12]
  402cd8:	4313      	orrs	r3, r2
  402cda:	60fb      	str	r3, [r7, #12]
	((Efc *)hw)->EEFC_FMR = tmp;
  402cdc:	687b      	ldr	r3, [r7, #4]
  402cde:	68fa      	ldr	r2, [r7, #12]
  402ce0:	601a      	str	r2, [r3, #0]
	EFC_CRITICAL_SECTION_LEAVE();
}
  402ce2:	bf00      	nop
  402ce4:	3714      	adds	r7, #20
  402ce6:	46bd      	mov	sp, r7
  402ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cec:	4770      	bx	lr

00402cee <hri_pmc_set_PCSR0_reg>:
{
  402cee:	b480      	push	{r7}
  402cf0:	b083      	sub	sp, #12
  402cf2:	af00      	add	r7, sp, #0
  402cf4:	6078      	str	r0, [r7, #4]
  402cf6:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  402cf8:	687b      	ldr	r3, [r7, #4]
  402cfa:	683a      	ldr	r2, [r7, #0]
  402cfc:	611a      	str	r2, [r3, #16]
}
  402cfe:	bf00      	nop
  402d00:	370c      	adds	r7, #12
  402d02:	46bd      	mov	sp, r7
  402d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d08:	4770      	bx	lr

00402d0a <hri_pmc_get_PCSR0_reg>:
{
  402d0a:	b480      	push	{r7}
  402d0c:	b085      	sub	sp, #20
  402d0e:	af00      	add	r7, sp, #0
  402d10:	6078      	str	r0, [r7, #4]
  402d12:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  402d14:	687b      	ldr	r3, [r7, #4]
  402d16:	699b      	ldr	r3, [r3, #24]
  402d18:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  402d1a:	68fa      	ldr	r2, [r7, #12]
  402d1c:	683b      	ldr	r3, [r7, #0]
  402d1e:	4013      	ands	r3, r2
  402d20:	60fb      	str	r3, [r7, #12]
	return tmp;
  402d22:	68fb      	ldr	r3, [r7, #12]
}
  402d24:	4618      	mov	r0, r3
  402d26:	3714      	adds	r7, #20
  402d28:	46bd      	mov	sp, r7
  402d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d2e:	4770      	bx	lr

00402d30 <hri_pmc_set_PCSR1_reg>:
{
  402d30:	b480      	push	{r7}
  402d32:	b083      	sub	sp, #12
  402d34:	af00      	add	r7, sp, #0
  402d36:	6078      	str	r0, [r7, #4]
  402d38:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  402d3a:	687b      	ldr	r3, [r7, #4]
  402d3c:	683a      	ldr	r2, [r7, #0]
  402d3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  402d42:	bf00      	nop
  402d44:	370c      	adds	r7, #12
  402d46:	46bd      	mov	sp, r7
  402d48:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d4c:	4770      	bx	lr

00402d4e <hri_pmc_get_PCSR1_reg>:
{
  402d4e:	b480      	push	{r7}
  402d50:	b085      	sub	sp, #20
  402d52:	af00      	add	r7, sp, #0
  402d54:	6078      	str	r0, [r7, #4]
  402d56:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  402d58:	687b      	ldr	r3, [r7, #4]
  402d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  402d5e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  402d60:	68fa      	ldr	r2, [r7, #12]
  402d62:	683b      	ldr	r3, [r7, #0]
  402d64:	4013      	ands	r3, r2
  402d66:	60fb      	str	r3, [r7, #12]
	return tmp;
  402d68:	68fb      	ldr	r3, [r7, #12]
}
  402d6a:	4618      	mov	r0, r3
  402d6c:	3714      	adds	r7, #20
  402d6e:	46bd      	mov	sp, r7
  402d70:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d74:	4770      	bx	lr

00402d76 <hri_pmc_write_PCR_reg>:
{
  402d76:	b480      	push	{r7}
  402d78:	b083      	sub	sp, #12
  402d7a:	af00      	add	r7, sp, #0
  402d7c:	6078      	str	r0, [r7, #4]
  402d7e:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCR = data;
  402d80:	687b      	ldr	r3, [r7, #4]
  402d82:	683a      	ldr	r2, [r7, #0]
  402d84:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
  402d88:	bf00      	nop
  402d8a:	370c      	adds	r7, #12
  402d8c:	46bd      	mov	sp, r7
  402d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d92:	4770      	bx	lr

00402d94 <hri_pmc_read_PCR_reg>:
{
  402d94:	b480      	push	{r7}
  402d96:	b083      	sub	sp, #12
  402d98:	af00      	add	r7, sp, #0
  402d9a:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  402d9c:	687b      	ldr	r3, [r7, #4]
  402d9e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  402da2:	4618      	mov	r0, r3
  402da4:	370c      	adds	r7, #12
  402da6:	46bd      	mov	sp, r7
  402da8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402dac:	4770      	bx	lr
	...

00402db0 <_pmc_enable_periph_clock>:
{
  402db0:	b580      	push	{r7, lr}
  402db2:	b084      	sub	sp, #16
  402db4:	af00      	add	r7, sp, #0
  402db6:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  402db8:	687b      	ldr	r3, [r7, #4]
  402dba:	2b1f      	cmp	r3, #31
  402dbc:	d813      	bhi.n	402de6 <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  402dbe:	2201      	movs	r2, #1
  402dc0:	687b      	ldr	r3, [r7, #4]
  402dc2:	fa02 f303 	lsl.w	r3, r2, r3
  402dc6:	4619      	mov	r1, r3
  402dc8:	481f      	ldr	r0, [pc, #124]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402dca:	4b20      	ldr	r3, [pc, #128]	; (402e4c <_pmc_enable_periph_clock+0x9c>)
  402dcc:	4798      	blx	r3
  402dce:	4603      	mov	r3, r0
  402dd0:	2b00      	cmp	r3, #0
  402dd2:	d135      	bne.n	402e40 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  402dd4:	2201      	movs	r2, #1
  402dd6:	687b      	ldr	r3, [r7, #4]
  402dd8:	fa02 f303 	lsl.w	r3, r2, r3
  402ddc:	4619      	mov	r1, r3
  402dde:	481a      	ldr	r0, [pc, #104]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402de0:	4b1b      	ldr	r3, [pc, #108]	; (402e50 <_pmc_enable_periph_clock+0xa0>)
  402de2:	4798      	blx	r3
}
  402de4:	e02c      	b.n	402e40 <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  402de6:	687b      	ldr	r3, [r7, #4]
  402de8:	2b3f      	cmp	r3, #63	; 0x3f
  402dea:	d816      	bhi.n	402e1a <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  402dec:	687b      	ldr	r3, [r7, #4]
  402dee:	3b20      	subs	r3, #32
  402df0:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  402df2:	2201      	movs	r2, #1
  402df4:	687b      	ldr	r3, [r7, #4]
  402df6:	fa02 f303 	lsl.w	r3, r2, r3
  402dfa:	4619      	mov	r1, r3
  402dfc:	4812      	ldr	r0, [pc, #72]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402dfe:	4b15      	ldr	r3, [pc, #84]	; (402e54 <_pmc_enable_periph_clock+0xa4>)
  402e00:	4798      	blx	r3
  402e02:	4603      	mov	r3, r0
  402e04:	2b00      	cmp	r3, #0
  402e06:	d11b      	bne.n	402e40 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  402e08:	2201      	movs	r2, #1
  402e0a:	687b      	ldr	r3, [r7, #4]
  402e0c:	fa02 f303 	lsl.w	r3, r2, r3
  402e10:	4619      	mov	r1, r3
  402e12:	480d      	ldr	r0, [pc, #52]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402e14:	4b10      	ldr	r3, [pc, #64]	; (402e58 <_pmc_enable_periph_clock+0xa8>)
  402e16:	4798      	blx	r3
}
  402e18:	e012      	b.n	402e40 <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  402e1a:	687b      	ldr	r3, [r7, #4]
  402e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  402e20:	4619      	mov	r1, r3
  402e22:	4809      	ldr	r0, [pc, #36]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402e24:	4b0d      	ldr	r3, [pc, #52]	; (402e5c <_pmc_enable_periph_clock+0xac>)
  402e26:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  402e28:	4807      	ldr	r0, [pc, #28]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402e2a:	4b0d      	ldr	r3, [pc, #52]	; (402e60 <_pmc_enable_periph_clock+0xb0>)
  402e2c:	4798      	blx	r3
  402e2e:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  402e30:	68fb      	ldr	r3, [r7, #12]
  402e32:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  402e36:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  402e38:	68f9      	ldr	r1, [r7, #12]
  402e3a:	4803      	ldr	r0, [pc, #12]	; (402e48 <_pmc_enable_periph_clock+0x98>)
  402e3c:	4b07      	ldr	r3, [pc, #28]	; (402e5c <_pmc_enable_periph_clock+0xac>)
  402e3e:	4798      	blx	r3
}
  402e40:	bf00      	nop
  402e42:	3710      	adds	r7, #16
  402e44:	46bd      	mov	sp, r7
  402e46:	bd80      	pop	{r7, pc}
  402e48:	400e0600 	.word	0x400e0600
  402e4c:	00402d0b 	.word	0x00402d0b
  402e50:	00402cef 	.word	0x00402cef
  402e54:	00402d4f 	.word	0x00402d4f
  402e58:	00402d31 	.word	0x00402d31
  402e5c:	00402d77 	.word	0x00402d77
  402e60:	00402d95 	.word	0x00402d95

00402e64 <_fpu_enable>:

/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
  402e64:	b580      	push	{r7, lr}
  402e66:	b082      	sub	sp, #8
  402e68:	af00      	add	r7, sp, #0
	CRITICAL_SECTION_ENTER()
  402e6a:	1d3b      	adds	r3, r7, #4
  402e6c:	4618      	mov	r0, r3
  402e6e:	4b0b      	ldr	r3, [pc, #44]	; (402e9c <_fpu_enable+0x38>)
  402e70:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  402e72:	4a0b      	ldr	r2, [pc, #44]	; (402ea0 <_fpu_enable+0x3c>)
  402e74:	4b0a      	ldr	r3, [pc, #40]	; (402ea0 <_fpu_enable+0x3c>)
  402e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  402e7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402e7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  402e82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  402e86:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  402e8a:	1d3b      	adds	r3, r7, #4
  402e8c:	4618      	mov	r0, r3
  402e8e:	4b05      	ldr	r3, [pc, #20]	; (402ea4 <_fpu_enable+0x40>)
  402e90:	4798      	blx	r3
}
  402e92:	bf00      	nop
  402e94:	3708      	adds	r7, #8
  402e96:	46bd      	mov	sp, r7
  402e98:	bd80      	pop	{r7, pc}
  402e9a:	bf00      	nop
  402e9c:	00401375 	.word	0x00401375
  402ea0:	e000ed00 	.word	0xe000ed00
  402ea4:	0040139b 	.word	0x0040139b

00402ea8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  402ea8:	b580      	push	{r7, lr}
  402eaa:	af00      	add	r7, sp, #0
	_fpu_enable();
  402eac:	4b07      	ldr	r3, [pc, #28]	; (402ecc <_init_chip+0x24>)
  402eae:	4798      	blx	r3
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);
  402eb0:	2105      	movs	r1, #5
  402eb2:	4807      	ldr	r0, [pc, #28]	; (402ed0 <_init_chip+0x28>)
  402eb4:	4b07      	ldr	r3, [pc, #28]	; (402ed4 <_init_chip+0x2c>)
  402eb6:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_XDMAC);
  402eb8:	203a      	movs	r0, #58	; 0x3a
  402eba:	4b07      	ldr	r3, [pc, #28]	; (402ed8 <_init_chip+0x30>)
  402ebc:	4798      	blx	r3
	_dma_init();
  402ebe:	4b07      	ldr	r3, [pc, #28]	; (402edc <_init_chip+0x34>)
  402ec0:	4798      	blx	r3

	_pmc_init();
  402ec2:	4b07      	ldr	r3, [pc, #28]	; (402ee0 <_init_chip+0x38>)
  402ec4:	4798      	blx	r3
}
  402ec6:	bf00      	nop
  402ec8:	bd80      	pop	{r7, pc}
  402eca:	bf00      	nop
  402ecc:	00402e65 	.word	0x00402e65
  402ed0:	400e0c00 	.word	0x400e0c00
  402ed4:	00402cb7 	.word	0x00402cb7
  402ed8:	00402db1 	.word	0x00402db1
  402edc:	0040791d 	.word	0x0040791d
  402ee0:	00403ac1 	.word	0x00403ac1

00402ee4 <hri_dacc_write_CHDR_reg>:
{
	((Dacc *)hw)->DACC_CHDR = mask;
}

static inline void hri_dacc_write_CHDR_reg(const void *const hw, hri_dacc_chsr_reg_t data)
{
  402ee4:	b480      	push	{r7}
  402ee6:	b083      	sub	sp, #12
  402ee8:	af00      	add	r7, sp, #0
  402eea:	6078      	str	r0, [r7, #4]
  402eec:	6039      	str	r1, [r7, #0]
	((Dacc *)hw)->DACC_CHDR = data;
  402eee:	687b      	ldr	r3, [r7, #4]
  402ef0:	683a      	ldr	r2, [r7, #0]
  402ef2:	615a      	str	r2, [r3, #20]
}
  402ef4:	bf00      	nop
  402ef6:	370c      	adds	r7, #12
  402ef8:	46bd      	mov	sp, r7
  402efa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402efe:	4770      	bx	lr

00402f00 <hri_dacc_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_MR_reg(const void *const hw, hri_dacc_mr_reg_t data)
{
  402f00:	b480      	push	{r7}
  402f02:	b083      	sub	sp, #12
  402f04:	af00      	add	r7, sp, #0
  402f06:	6078      	str	r0, [r7, #4]
  402f08:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_MR = data;
  402f0a:	687b      	ldr	r3, [r7, #4]
  402f0c:	683a      	ldr	r2, [r7, #0]
  402f0e:	605a      	str	r2, [r3, #4]
	DACC_CRITICAL_SECTION_LEAVE();
}
  402f10:	bf00      	nop
  402f12:	370c      	adds	r7, #12
  402f14:	46bd      	mov	sp, r7
  402f16:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f1a:	4770      	bx	lr

00402f1c <hri_dacc_write_TRIGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_TRIGR_reg(const void *const hw, hri_dacc_trigr_reg_t data)
{
  402f1c:	b480      	push	{r7}
  402f1e:	b083      	sub	sp, #12
  402f20:	af00      	add	r7, sp, #0
  402f22:	6078      	str	r0, [r7, #4]
  402f24:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_TRIGR = data;
  402f26:	687b      	ldr	r3, [r7, #4]
  402f28:	683a      	ldr	r2, [r7, #0]
  402f2a:	609a      	str	r2, [r3, #8]
	DACC_CRITICAL_SECTION_LEAVE();
}
  402f2c:	bf00      	nop
  402f2e:	370c      	adds	r7, #12
  402f30:	46bd      	mov	sp, r7
  402f32:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f36:	4770      	bx	lr

00402f38 <hri_dacc_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_WPMR_reg(const void *const hw, hri_dacc_wpmr_reg_t data)
{
  402f38:	b480      	push	{r7}
  402f3a:	b083      	sub	sp, #12
  402f3c:	af00      	add	r7, sp, #0
  402f3e:	6078      	str	r0, [r7, #4]
  402f40:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_WPMR = data;
  402f42:	687b      	ldr	r3, [r7, #4]
  402f44:	683a      	ldr	r2, [r7, #0]
  402f46:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC_CRITICAL_SECTION_LEAVE();
}
  402f4a:	bf00      	nop
  402f4c:	370c      	adds	r7, #12
  402f4e:	46bd      	mov	sp, r7
  402f50:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f54:	4770      	bx	lr

00402f56 <hri_dacc_write_CR_reg>:
{
	return ((Dacc *)hw)->DACC_WPMR;
}

static inline void hri_dacc_write_CR_reg(const void *const hw, hri_dacc_cr_reg_t data)
{
  402f56:	b480      	push	{r7}
  402f58:	b083      	sub	sp, #12
  402f5a:	af00      	add	r7, sp, #0
  402f5c:	6078      	str	r0, [r7, #4]
  402f5e:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_CR = data;
  402f60:	687b      	ldr	r3, [r7, #4]
  402f62:	683a      	ldr	r2, [r7, #0]
  402f64:	601a      	str	r2, [r3, #0]
	DACC_CRITICAL_SECTION_LEAVE();
}
  402f66:	bf00      	nop
  402f68:	370c      	adds	r7, #12
  402f6a:	46bd      	mov	sp, r7
  402f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f70:	4770      	bx	lr
	...

00402f74 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
  402f74:	b580      	push	{r7, lr}
  402f76:	b082      	sub	sp, #8
  402f78:	af00      	add	r7, sp, #0
  402f7a:	6078      	str	r0, [r7, #4]
  402f7c:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  402f7e:	687b      	ldr	r3, [r7, #4]
  402f80:	2b00      	cmp	r3, #0
  402f82:	bf14      	ite	ne
  402f84:	2301      	movne	r3, #1
  402f86:	2300      	moveq	r3, #0
  402f88:	b2db      	uxtb	r3, r3
  402f8a:	2251      	movs	r2, #81	; 0x51
  402f8c:	4908      	ldr	r1, [pc, #32]	; (402fb0 <_dac_sync_init+0x3c>)
  402f8e:	4618      	mov	r0, r3
  402f90:	4b08      	ldr	r3, [pc, #32]	; (402fb4 <_dac_sync_init+0x40>)
  402f92:	4798      	blx	r3

	device->hw = hw;
  402f94:	687b      	ldr	r3, [r7, #4]
  402f96:	683a      	ldr	r2, [r7, #0]
  402f98:	601a      	str	r2, [r3, #0]

	return _dac_init(device->hw);
  402f9a:	687b      	ldr	r3, [r7, #4]
  402f9c:	681b      	ldr	r3, [r3, #0]
  402f9e:	4618      	mov	r0, r3
  402fa0:	4b05      	ldr	r3, [pc, #20]	; (402fb8 <_dac_sync_init+0x44>)
  402fa2:	4798      	blx	r3
  402fa4:	4603      	mov	r3, r0
}
  402fa6:	4618      	mov	r0, r3
  402fa8:	3708      	adds	r7, #8
  402faa:	46bd      	mov	sp, r7
  402fac:	bd80      	pop	{r7, pc}
  402fae:	bf00      	nop
  402fb0:	00409634 	.word	0x00409634
  402fb4:	004027fd 	.word	0x004027fd
  402fb8:	00402fbd 	.word	0x00402fbd

00402fbc <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
  402fbc:	b580      	push	{r7, lr}
  402fbe:	b082      	sub	sp, #8
  402fc0:	af00      	add	r7, sp, #0
  402fc2:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  402fc4:	687b      	ldr	r3, [r7, #4]
  402fc6:	2b00      	cmp	r3, #0
  402fc8:	bf14      	ite	ne
  402fca:	2301      	movne	r3, #1
  402fcc:	2300      	moveq	r3, #0
  402fce:	b2db      	uxtb	r3, r3
  402fd0:	22f5      	movs	r2, #245	; 0xf5
  402fd2:	4910      	ldr	r1, [pc, #64]	; (403014 <_dac_init+0x58>)
  402fd4:	4618      	mov	r0, r3
  402fd6:	4b10      	ldr	r3, [pc, #64]	; (403018 <_dac_init+0x5c>)
  402fd8:	4798      	blx	r3

	hri_dacc_write_CR_reg(hw, DACC_CR_SWRST);
  402fda:	2101      	movs	r1, #1
  402fdc:	6878      	ldr	r0, [r7, #4]
  402fde:	4b0f      	ldr	r3, [pc, #60]	; (40301c <_dac_init+0x60>)
  402fe0:	4798      	blx	r3
	hri_dacc_write_CHDR_reg(hw, DACC_CHDR_Msk);
  402fe2:	2103      	movs	r1, #3
  402fe4:	6878      	ldr	r0, [r7, #4]
  402fe6:	4b0e      	ldr	r3, [pc, #56]	; (403020 <_dac_init+0x64>)
  402fe8:	4798      	blx	r3
	_dac_write_protection_disable(hw);
  402fea:	6878      	ldr	r0, [r7, #4]
  402fec:	4b0d      	ldr	r3, [pc, #52]	; (403024 <_dac_init+0x68>)
  402fee:	4798      	blx	r3
	hri_dacc_write_MR_reg(hw, _dac.mr);
  402ff0:	4b0d      	ldr	r3, [pc, #52]	; (403028 <_dac_init+0x6c>)
  402ff2:	681b      	ldr	r3, [r3, #0]
  402ff4:	4619      	mov	r1, r3
  402ff6:	6878      	ldr	r0, [r7, #4]
  402ff8:	4b0c      	ldr	r3, [pc, #48]	; (40302c <_dac_init+0x70>)
  402ffa:	4798      	blx	r3
	hri_dacc_write_TRIGR_reg(hw, _dac.trigr);
  402ffc:	4b0a      	ldr	r3, [pc, #40]	; (403028 <_dac_init+0x6c>)
  402ffe:	685b      	ldr	r3, [r3, #4]
  403000:	4619      	mov	r1, r3
  403002:	6878      	ldr	r0, [r7, #4]
  403004:	4b0a      	ldr	r3, [pc, #40]	; (403030 <_dac_init+0x74>)
  403006:	4798      	blx	r3

	return ERR_NONE;
  403008:	2300      	movs	r3, #0
}
  40300a:	4618      	mov	r0, r3
  40300c:	3708      	adds	r7, #8
  40300e:	46bd      	mov	sp, r7
  403010:	bd80      	pop	{r7, pc}
  403012:	bf00      	nop
  403014:	00409634 	.word	0x00409634
  403018:	004027fd 	.word	0x004027fd
  40301c:	00402f57 	.word	0x00402f57
  403020:	00402ee5 	.word	0x00402ee5
  403024:	00403035 	.word	0x00403035
  403028:	20400000 	.word	0x20400000
  40302c:	00402f01 	.word	0x00402f01
  403030:	00402f1d 	.word	0x00402f1d

00403034 <_dac_write_protection_disable>:
 * \internal Disable DAC write protection
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _dac_write_protection_disable(void *const hw)
{
  403034:	b580      	push	{r7, lr}
  403036:	b082      	sub	sp, #8
  403038:	af00      	add	r7, sp, #0
  40303a:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  40303c:	687b      	ldr	r3, [r7, #4]
  40303e:	2b00      	cmp	r3, #0
  403040:	bf14      	ite	ne
  403042:	2301      	movne	r3, #1
  403044:	2300      	moveq	r3, #0
  403046:	b2db      	uxtb	r3, r3
  403048:	f44f 72a7 	mov.w	r2, #334	; 0x14e
  40304c:	4905      	ldr	r1, [pc, #20]	; (403064 <_dac_write_protection_disable+0x30>)
  40304e:	4618      	mov	r0, r3
  403050:	4b05      	ldr	r3, [pc, #20]	; (403068 <_dac_write_protection_disable+0x34>)
  403052:	4798      	blx	r3
	hri_dacc_write_WPMR_reg(hw, (hri_dacc_wpmr_reg_t)DACC_WPMR_WPKEY_PASSWD);
  403054:	4905      	ldr	r1, [pc, #20]	; (40306c <_dac_write_protection_disable+0x38>)
  403056:	6878      	ldr	r0, [r7, #4]
  403058:	4b05      	ldr	r3, [pc, #20]	; (403070 <_dac_write_protection_disable+0x3c>)
  40305a:	4798      	blx	r3
}
  40305c:	bf00      	nop
  40305e:	3708      	adds	r7, #8
  403060:	46bd      	mov	sp, r7
  403062:	bd80      	pop	{r7, pc}
  403064:	00409634 	.word	0x00409634
  403068:	004027fd 	.word	0x004027fd
  40306c:	44414300 	.word	0x44414300
  403070:	00402f39 	.word	0x00402f39

00403074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403074:	b480      	push	{r7}
  403076:	b083      	sub	sp, #12
  403078:	af00      	add	r7, sp, #0
  40307a:	4603      	mov	r3, r0
  40307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403082:	2b00      	cmp	r3, #0
  403084:	db0b      	blt.n	40309e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403086:	4909      	ldr	r1, [pc, #36]	; (4030ac <__NVIC_EnableIRQ+0x38>)
  403088:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40308c:	095b      	lsrs	r3, r3, #5
  40308e:	79fa      	ldrb	r2, [r7, #7]
  403090:	f002 021f 	and.w	r2, r2, #31
  403094:	2001      	movs	r0, #1
  403096:	fa00 f202 	lsl.w	r2, r0, r2
  40309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40309e:	bf00      	nop
  4030a0:	370c      	adds	r7, #12
  4030a2:	46bd      	mov	sp, r7
  4030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030a8:	4770      	bx	lr
  4030aa:	bf00      	nop
  4030ac:	e000e100 	.word	0xe000e100

004030b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  4030b0:	b480      	push	{r7}
  4030b2:	b083      	sub	sp, #12
  4030b4:	af00      	add	r7, sp, #0
  4030b6:	4603      	mov	r3, r0
  4030b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030be:	2b00      	cmp	r3, #0
  4030c0:	db10      	blt.n	4030e4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4030c2:	490b      	ldr	r1, [pc, #44]	; (4030f0 <__NVIC_DisableIRQ+0x40>)
  4030c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030c8:	095b      	lsrs	r3, r3, #5
  4030ca:	79fa      	ldrb	r2, [r7, #7]
  4030cc:	f002 021f 	and.w	r2, r2, #31
  4030d0:	2001      	movs	r0, #1
  4030d2:	fa00 f202 	lsl.w	r2, r0, r2
  4030d6:	3320      	adds	r3, #32
  4030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4030dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4030e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  4030e4:	bf00      	nop
  4030e6:	370c      	adds	r7, #12
  4030e8:	46bd      	mov	sp, r7
  4030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ee:	4770      	bx	lr
  4030f0:	e000e100 	.word	0xe000e100

004030f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  4030f4:	b480      	push	{r7}
  4030f6:	b083      	sub	sp, #12
  4030f8:	af00      	add	r7, sp, #0
  4030fa:	4603      	mov	r3, r0
  4030fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403102:	2b00      	cmp	r3, #0
  403104:	db0c      	blt.n	403120 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403106:	4909      	ldr	r1, [pc, #36]	; (40312c <__NVIC_ClearPendingIRQ+0x38>)
  403108:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40310c:	095b      	lsrs	r3, r3, #5
  40310e:	79fa      	ldrb	r2, [r7, #7]
  403110:	f002 021f 	and.w	r2, r2, #31
  403114:	2001      	movs	r0, #1
  403116:	fa00 f202 	lsl.w	r2, r0, r2
  40311a:	3360      	adds	r3, #96	; 0x60
  40311c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  403120:	bf00      	nop
  403122:	370c      	adds	r7, #12
  403124:	46bd      	mov	sp, r7
  403126:	f85d 7b04 	ldr.w	r7, [sp], #4
  40312a:	4770      	bx	lr
  40312c:	e000e100 	.word	0xe000e100

00403130 <hri_pio_read_ISR_reg>:
{
  403130:	b480      	push	{r7}
  403132:	b083      	sub	sp, #12
  403134:	af00      	add	r7, sp, #0
  403136:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_ISR;
  403138:	687b      	ldr	r3, [r7, #4]
  40313a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40313c:	4618      	mov	r0, r3
  40313e:	370c      	adds	r7, #12
  403140:	46bd      	mov	sp, r7
  403142:	f85d 7b04 	ldr.w	r7, [sp], #4
  403146:	4770      	bx	lr

00403148 <hri_pio_set_IMR_reg>:
{
  403148:	b480      	push	{r7}
  40314a:	b083      	sub	sp, #12
  40314c:	af00      	add	r7, sp, #0
  40314e:	6078      	str	r0, [r7, #4]
  403150:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IER = mask;
  403152:	687b      	ldr	r3, [r7, #4]
  403154:	683a      	ldr	r2, [r7, #0]
  403156:	641a      	str	r2, [r3, #64]	; 0x40
}
  403158:	bf00      	nop
  40315a:	370c      	adds	r7, #12
  40315c:	46bd      	mov	sp, r7
  40315e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403162:	4770      	bx	lr

00403164 <hri_pio_read_IMR_reg>:
{
  403164:	b480      	push	{r7}
  403166:	b083      	sub	sp, #12
  403168:	af00      	add	r7, sp, #0
  40316a:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_IMR;
  40316c:	687b      	ldr	r3, [r7, #4]
  40316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  403170:	4618      	mov	r0, r3
  403172:	370c      	adds	r7, #12
  403174:	46bd      	mov	sp, r7
  403176:	f85d 7b04 	ldr.w	r7, [sp], #4
  40317a:	4770      	bx	lr

0040317c <hri_pio_clear_IMR_reg>:
{
  40317c:	b480      	push	{r7}
  40317e:	b083      	sub	sp, #12
  403180:	af00      	add	r7, sp, #0
  403182:	6078      	str	r0, [r7, #4]
  403184:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IDR = mask;
  403186:	687b      	ldr	r3, [r7, #4]
  403188:	683a      	ldr	r2, [r7, #0]
  40318a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40318c:	bf00      	nop
  40318e:	370c      	adds	r7, #12
  403190:	46bd      	mov	sp, r7
  403192:	f85d 7b04 	ldr.w	r7, [sp], #4
  403196:	4770      	bx	lr

00403198 <hri_pio_set_AIMMR_reg>:
{
  403198:	b480      	push	{r7}
  40319a:	b083      	sub	sp, #12
  40319c:	af00      	add	r7, sp, #0
  40319e:	6078      	str	r0, [r7, #4]
  4031a0:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_AIMER = mask;
  4031a2:	687b      	ldr	r3, [r7, #4]
  4031a4:	683a      	ldr	r2, [r7, #0]
  4031a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
  4031aa:	bf00      	nop
  4031ac:	370c      	adds	r7, #12
  4031ae:	46bd      	mov	sp, r7
  4031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031b4:	4770      	bx	lr

004031b6 <hri_pio_set_ELSR_reg>:
{
  4031b6:	b480      	push	{r7}
  4031b8:	b083      	sub	sp, #12
  4031ba:	af00      	add	r7, sp, #0
  4031bc:	6078      	str	r0, [r7, #4]
  4031be:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_LSR = mask;
  4031c0:	687b      	ldr	r3, [r7, #4]
  4031c2:	683a      	ldr	r2, [r7, #0]
  4031c4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  4031c8:	bf00      	nop
  4031ca:	370c      	adds	r7, #12
  4031cc:	46bd      	mov	sp, r7
  4031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031d2:	4770      	bx	lr

004031d4 <hri_pio_clear_ELSR_reg>:
{
  4031d4:	b480      	push	{r7}
  4031d6:	b083      	sub	sp, #12
  4031d8:	af00      	add	r7, sp, #0
  4031da:	6078      	str	r0, [r7, #4]
  4031dc:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ESR = mask;
  4031de:	687b      	ldr	r3, [r7, #4]
  4031e0:	683a      	ldr	r2, [r7, #0]
  4031e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
  4031e6:	bf00      	nop
  4031e8:	370c      	adds	r7, #12
  4031ea:	46bd      	mov	sp, r7
  4031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031f0:	4770      	bx	lr

004031f2 <hri_pio_set_FRLHSR_reg>:
{
  4031f2:	b480      	push	{r7}
  4031f4:	b083      	sub	sp, #12
  4031f6:	af00      	add	r7, sp, #0
  4031f8:	6078      	str	r0, [r7, #4]
  4031fa:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_REHLSR = mask;
  4031fc:	687b      	ldr	r3, [r7, #4]
  4031fe:	683a      	ldr	r2, [r7, #0]
  403200:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
  403204:	bf00      	nop
  403206:	370c      	adds	r7, #12
  403208:	46bd      	mov	sp, r7
  40320a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320e:	4770      	bx	lr

00403210 <hri_pio_clear_FRLHSR_reg>:
{
  403210:	b480      	push	{r7}
  403212:	b083      	sub	sp, #12
  403214:	af00      	add	r7, sp, #0
  403216:	6078      	str	r0, [r7, #4]
  403218:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_FELLSR = mask;
  40321a:	687b      	ldr	r3, [r7, #4]
  40321c:	683a      	ldr	r2, [r7, #0]
  40321e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
  403222:	bf00      	nop
  403224:	370c      	adds	r7, #12
  403226:	46bd      	mov	sp, r7
  403228:	f85d 7b04 	ldr.w	r7, [sp], #4
  40322c:	4770      	bx	lr

0040322e <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  40322e:	b480      	push	{r7}
  403230:	b087      	sub	sp, #28
  403232:	af00      	add	r7, sp, #0
  403234:	6078      	str	r0, [r7, #4]
  403236:	460b      	mov	r3, r1
  403238:	70fb      	strb	r3, [r7, #3]
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  40323a:	2300      	movs	r3, #0
  40323c:	617b      	str	r3, [r7, #20]
  40323e:	e01e      	b.n	40327e <_ffs+0x50>
		bit = 1;
  403240:	2301      	movs	r3, #1
  403242:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  403244:	2300      	movs	r3, #0
  403246:	613b      	str	r3, [r7, #16]
  403248:	e013      	b.n	403272 <_ffs+0x44>
			if (v[i] & bit) {
  40324a:	697b      	ldr	r3, [r7, #20]
  40324c:	009b      	lsls	r3, r3, #2
  40324e:	687a      	ldr	r2, [r7, #4]
  403250:	4413      	add	r3, r2
  403252:	681a      	ldr	r2, [r3, #0]
  403254:	68fb      	ldr	r3, [r7, #12]
  403256:	4013      	ands	r3, r2
  403258:	2b00      	cmp	r3, #0
  40325a:	d004      	beq.n	403266 <_ffs+0x38>
				return i * 32 + j;
  40325c:	697b      	ldr	r3, [r7, #20]
  40325e:	015a      	lsls	r2, r3, #5
  403260:	693b      	ldr	r3, [r7, #16]
  403262:	4413      	add	r3, r2
  403264:	e011      	b.n	40328a <_ffs+0x5c>
			}
			bit <<= 1;
  403266:	68fb      	ldr	r3, [r7, #12]
  403268:	005b      	lsls	r3, r3, #1
  40326a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  40326c:	693b      	ldr	r3, [r7, #16]
  40326e:	3301      	adds	r3, #1
  403270:	613b      	str	r3, [r7, #16]
  403272:	693b      	ldr	r3, [r7, #16]
  403274:	2b1f      	cmp	r3, #31
  403276:	d9e8      	bls.n	40324a <_ffs+0x1c>
	for (i = 0; i < len; i++) {
  403278:	697b      	ldr	r3, [r7, #20]
  40327a:	3301      	adds	r3, #1
  40327c:	617b      	str	r3, [r7, #20]
  40327e:	78fa      	ldrb	r2, [r7, #3]
  403280:	697b      	ldr	r3, [r7, #20]
  403282:	429a      	cmp	r2, r3
  403284:	d8dc      	bhi.n	403240 <_ffs+0x12>
		}
	}

	return -1;
  403286:	f04f 33ff 	mov.w	r3, #4294967295
}
  40328a:	4618      	mov	r0, r3
  40328c:	371c      	adds	r7, #28
  40328e:	46bd      	mov	sp, r7
  403290:	f85d 7b04 	ldr.w	r7, [sp], #4
  403294:	4770      	bx	lr
	...

00403298 <_get_hardware_instance>:
 * \param[in] pin The PIO pin
 *
 * \return The instance of PIO hardware
 */
static inline void *_get_hardware_instance(const uint8_t pin)
{
  403298:	b580      	push	{r7, lr}
  40329a:	b082      	sub	sp, #8
  40329c:	af00      	add	r7, sp, #0
  40329e:	4603      	mov	r3, r0
  4032a0:	71fb      	strb	r3, [r7, #7]
	ASSERT(pin < 160);
  4032a2:	79fb      	ldrb	r3, [r7, #7]
  4032a4:	2b9f      	cmp	r3, #159	; 0x9f
  4032a6:	bf94      	ite	ls
  4032a8:	2301      	movls	r3, #1
  4032aa:	2300      	movhi	r3, #0
  4032ac:	b2db      	uxtb	r3, r3
  4032ae:	22c3      	movs	r2, #195	; 0xc3
  4032b0:	4907      	ldr	r1, [pc, #28]	; (4032d0 <_get_hardware_instance+0x38>)
  4032b2:	4618      	mov	r0, r3
  4032b4:	4b07      	ldr	r3, [pc, #28]	; (4032d4 <_get_hardware_instance+0x3c>)
  4032b6:	4798      	blx	r3

	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  4032b8:	79fb      	ldrb	r3, [r7, #7]
  4032ba:	095b      	lsrs	r3, r3, #5
  4032bc:	b2db      	uxtb	r3, r3
  4032be:	025b      	lsls	r3, r3, #9
  4032c0:	461a      	mov	r2, r3
  4032c2:	4b05      	ldr	r3, [pc, #20]	; (4032d8 <_get_hardware_instance+0x40>)
  4032c4:	4413      	add	r3, r2
}
  4032c6:	4618      	mov	r0, r3
  4032c8:	3708      	adds	r7, #8
  4032ca:	46bd      	mov	sp, r7
  4032cc:	bd80      	pop	{r7, pc}
  4032ce:	bf00      	nop
  4032d0:	0040968c 	.word	0x0040968c
  4032d4:	004027fd 	.word	0x004027fd
  4032d8:	400e0e00 	.word	0x400e0e00

004032dc <_pio_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of hardware instance
 */
static uint8_t _pio_get_hardware_index(const void *const hw)
{
  4032dc:	b580      	push	{r7, lr}
  4032de:	b082      	sub	sp, #8
  4032e0:	af00      	add	r7, sp, #0
  4032e2:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4032e4:	687b      	ldr	r3, [r7, #4]
  4032e6:	2b00      	cmp	r3, #0
  4032e8:	bf14      	ite	ne
  4032ea:	2301      	movne	r3, #1
  4032ec:	2300      	moveq	r3, #0
  4032ee:	b2db      	uxtb	r3, r3
  4032f0:	22d2      	movs	r2, #210	; 0xd2
  4032f2:	4906      	ldr	r1, [pc, #24]	; (40330c <_pio_get_hardware_index+0x30>)
  4032f4:	4618      	mov	r0, r3
  4032f6:	4b06      	ldr	r3, [pc, #24]	; (403310 <_pio_get_hardware_index+0x34>)
  4032f8:	4798      	blx	r3

	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  4032fa:	687a      	ldr	r2, [r7, #4]
  4032fc:	4b05      	ldr	r3, [pc, #20]	; (403314 <_pio_get_hardware_index+0x38>)
  4032fe:	4413      	add	r3, r2
  403300:	0a5b      	lsrs	r3, r3, #9
  403302:	b2db      	uxtb	r3, r3
}
  403304:	4618      	mov	r0, r3
  403306:	3708      	adds	r7, #8
  403308:	46bd      	mov	sp, r7
  40330a:	bd80      	pop	{r7, pc}
  40330c:	0040968c 	.word	0x0040968c
  403310:	004027fd 	.word	0x004027fd
  403314:	bff1f200 	.word	0xbff1f200

00403318 <_pio_get_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given PIO hardware instance
 */
static int8_t _pio_get_index(const void *const hw)
{
  403318:	b580      	push	{r7, lr}
  40331a:	b084      	sub	sp, #16
  40331c:	af00      	add	r7, sp, #0
  40331e:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403320:	687b      	ldr	r3, [r7, #4]
  403322:	2b00      	cmp	r3, #0
  403324:	bf14      	ite	ne
  403326:	2301      	movne	r3, #1
  403328:	2300      	moveq	r3, #0
  40332a:	b2db      	uxtb	r3, r3
  40332c:	22e0      	movs	r2, #224	; 0xe0
  40332e:	4913      	ldr	r1, [pc, #76]	; (40337c <_pio_get_index+0x64>)
  403330:	4618      	mov	r0, r3
  403332:	4b13      	ldr	r3, [pc, #76]	; (403380 <_pio_get_index+0x68>)
  403334:	4798      	blx	r3

	uint8_t offset = _pio_get_hardware_index(hw);
  403336:	6878      	ldr	r0, [r7, #4]
  403338:	4b12      	ldr	r3, [pc, #72]	; (403384 <_pio_get_index+0x6c>)
  40333a:	4798      	blx	r3
  40333c:	4603      	mov	r3, r0
  40333e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  403340:	2300      	movs	r3, #0
  403342:	73fb      	strb	r3, [r7, #15]
  403344:	e010      	b.n	403368 <_pio_get_index+0x50>
		if (_ext_irq[i].number == offset) {
  403346:	7bfa      	ldrb	r2, [r7, #15]
  403348:	490f      	ldr	r1, [pc, #60]	; (403388 <_pio_get_index+0x70>)
  40334a:	4613      	mov	r3, r2
  40334c:	00db      	lsls	r3, r3, #3
  40334e:	1a9b      	subs	r3, r3, r2
  403350:	009b      	lsls	r3, r3, #2
  403352:	440b      	add	r3, r1
  403354:	781b      	ldrb	r3, [r3, #0]
  403356:	7bba      	ldrb	r2, [r7, #14]
  403358:	429a      	cmp	r2, r3
  40335a:	d102      	bne.n	403362 <_pio_get_index+0x4a>
			return i;
  40335c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403360:	e007      	b.n	403372 <_pio_get_index+0x5a>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  403362:	7bfb      	ldrb	r3, [r7, #15]
  403364:	3301      	adds	r3, #1
  403366:	73fb      	strb	r3, [r7, #15]
  403368:	7bfb      	ldrb	r3, [r7, #15]
  40336a:	2b01      	cmp	r3, #1
  40336c:	d9eb      	bls.n	403346 <_pio_get_index+0x2e>
		}
	}

	return ERR_INVALID_DATA;
  40336e:	f04f 33ff 	mov.w	r3, #4294967295
}
  403372:	4618      	mov	r0, r3
  403374:	3710      	adds	r7, #16
  403376:	46bd      	mov	sp, r7
  403378:	bd80      	pop	{r7, pc}
  40337a:	bf00      	nop
  40337c:	0040968c 	.word	0x0040968c
  403380:	004027fd 	.word	0x004027fd
  403384:	004032dd 	.word	0x004032dd
  403388:	00409654 	.word	0x00409654

0040338c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  40338c:	b580      	push	{r7, lr}
  40338e:	b088      	sub	sp, #32
  403390:	af00      	add	r7, sp, #0
	uint32_t flag_total = 0, flags[5] = {
  403392:	2300      	movs	r3, #0
  403394:	61fb      	str	r3, [r7, #28]
  403396:	1d3b      	adds	r3, r7, #4
  403398:	2200      	movs	r2, #0
  40339a:	601a      	str	r2, [r3, #0]
  40339c:	605a      	str	r2, [r3, #4]
  40339e:	609a      	str	r2, [r3, #8]
  4033a0:	60da      	str	r2, [r3, #12]
  4033a2:	611a      	str	r2, [r3, #16]
	                             0,
	                         };
	int8_t pos;

	ASSERT(callback);
  4033a4:	4b46      	ldr	r3, [pc, #280]	; (4034c0 <_ext_irq_handler+0x134>)
  4033a6:	681b      	ldr	r3, [r3, #0]
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	bf14      	ite	ne
  4033ac:	2301      	movne	r3, #1
  4033ae:	2300      	moveq	r3, #0
  4033b0:	b2db      	uxtb	r3, r3
  4033b2:	22f8      	movs	r2, #248	; 0xf8
  4033b4:	4943      	ldr	r1, [pc, #268]	; (4034c4 <_ext_irq_handler+0x138>)
  4033b6:	4618      	mov	r0, r3
  4033b8:	4b43      	ldr	r3, [pc, #268]	; (4034c8 <_ext_irq_handler+0x13c>)
  4033ba:	4798      	blx	r3
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
  4033bc:	4843      	ldr	r0, [pc, #268]	; (4034cc <_ext_irq_handler+0x140>)
  4033be:	4b44      	ldr	r3, [pc, #272]	; (4034d0 <_ext_irq_handler+0x144>)
  4033c0:	4798      	blx	r3
  4033c2:	4603      	mov	r3, r0
  4033c4:	60bb      	str	r3, [r7, #8]
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  4033c6:	4841      	ldr	r0, [pc, #260]	; (4034cc <_ext_irq_handler+0x140>)
  4033c8:	4b42      	ldr	r3, [pc, #264]	; (4034d4 <_ext_irq_handler+0x148>)
  4033ca:	4798      	blx	r3
  4033cc:	4602      	mov	r2, r0
  4033ce:	68bb      	ldr	r3, [r7, #8]
  4033d0:	4013      	ands	r3, r2
  4033d2:	60bb      	str	r3, [r7, #8]
	flag_total |= flags[1];
  4033d4:	68bb      	ldr	r3, [r7, #8]
  4033d6:	69fa      	ldr	r2, [r7, #28]
  4033d8:	4313      	orrs	r3, r2
  4033da:	61fb      	str	r3, [r7, #28]
	flags[2] &= hri_pio_read_IMR_reg(PIOC);
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
  4033dc:	483e      	ldr	r0, [pc, #248]	; (4034d8 <_ext_irq_handler+0x14c>)
  4033de:	4b3c      	ldr	r3, [pc, #240]	; (4034d0 <_ext_irq_handler+0x144>)
  4033e0:	4798      	blx	r3
  4033e2:	4603      	mov	r3, r0
  4033e4:	613b      	str	r3, [r7, #16]
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  4033e6:	483c      	ldr	r0, [pc, #240]	; (4034d8 <_ext_irq_handler+0x14c>)
  4033e8:	4b3a      	ldr	r3, [pc, #232]	; (4034d4 <_ext_irq_handler+0x148>)
  4033ea:	4798      	blx	r3
  4033ec:	4602      	mov	r2, r0
  4033ee:	693b      	ldr	r3, [r7, #16]
  4033f0:	4013      	ands	r3, r2
  4033f2:	613b      	str	r3, [r7, #16]
	flag_total |= flags[3];
  4033f4:	693b      	ldr	r3, [r7, #16]
  4033f6:	69fa      	ldr	r2, [r7, #28]
  4033f8:	4313      	orrs	r3, r2
  4033fa:	61fb      	str	r3, [r7, #28]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  4033fc:	e058      	b.n	4034b0 <_ext_irq_handler+0x124>
		pos = _ffs(flags, 5);
  4033fe:	1d3b      	adds	r3, r7, #4
  403400:	2105      	movs	r1, #5
  403402:	4618      	mov	r0, r3
  403404:	4b35      	ldr	r3, [pc, #212]	; (4034dc <_ext_irq_handler+0x150>)
  403406:	4798      	blx	r3
  403408:	4603      	mov	r3, r0
  40340a:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  40340c:	e029      	b.n	403462 <_ext_irq_handler+0xd6>
			callback(pos);
  40340e:	4b2c      	ldr	r3, [pc, #176]	; (4034c0 <_ext_irq_handler+0x134>)
  403410:	681b      	ldr	r3, [r3, #0]
  403412:	f997 201b 	ldrsb.w	r2, [r7, #27]
  403416:	4610      	mov	r0, r2
  403418:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  40341a:	f997 301b 	ldrsb.w	r3, [r7, #27]
  40341e:	115b      	asrs	r3, r3, #5
  403420:	b25b      	sxtb	r3, r3
  403422:	4618      	mov	r0, r3
  403424:	f997 301b 	ldrsb.w	r3, [r7, #27]
  403428:	115b      	asrs	r3, r3, #5
  40342a:	b25b      	sxtb	r3, r3
  40342c:	009b      	lsls	r3, r3, #2
  40342e:	f107 0220 	add.w	r2, r7, #32
  403432:	4413      	add	r3, r2
  403434:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  403438:	7efa      	ldrb	r2, [r7, #27]
  40343a:	f002 021f 	and.w	r2, r2, #31
  40343e:	2101      	movs	r1, #1
  403440:	fa01 f202 	lsl.w	r2, r1, r2
  403444:	43d2      	mvns	r2, r2
  403446:	401a      	ands	r2, r3
  403448:	0083      	lsls	r3, r0, #2
  40344a:	f107 0120 	add.w	r1, r7, #32
  40344e:	440b      	add	r3, r1
  403450:	f843 2c1c 	str.w	r2, [r3, #-28]
			pos = _ffs(flags, 5);
  403454:	1d3b      	adds	r3, r7, #4
  403456:	2105      	movs	r1, #5
  403458:	4618      	mov	r0, r3
  40345a:	4b20      	ldr	r3, [pc, #128]	; (4034dc <_ext_irq_handler+0x150>)
  40345c:	4798      	blx	r3
  40345e:	4603      	mov	r3, r0
  403460:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  403462:	f997 301b 	ldrsb.w	r3, [r7, #27]
  403466:	f1b3 3fff 	cmp.w	r3, #4294967295
  40346a:	d1d0      	bne.n	40340e <_ext_irq_handler+0x82>
		}
		flag_total = 0;
  40346c:	2300      	movs	r3, #0
  40346e:	61fb      	str	r3, [r7, #28]
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
  403470:	4816      	ldr	r0, [pc, #88]	; (4034cc <_ext_irq_handler+0x140>)
  403472:	4b17      	ldr	r3, [pc, #92]	; (4034d0 <_ext_irq_handler+0x144>)
  403474:	4798      	blx	r3
  403476:	4603      	mov	r3, r0
  403478:	60bb      	str	r3, [r7, #8]
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  40347a:	4814      	ldr	r0, [pc, #80]	; (4034cc <_ext_irq_handler+0x140>)
  40347c:	4b15      	ldr	r3, [pc, #84]	; (4034d4 <_ext_irq_handler+0x148>)
  40347e:	4798      	blx	r3
  403480:	4602      	mov	r2, r0
  403482:	68bb      	ldr	r3, [r7, #8]
  403484:	4013      	ands	r3, r2
  403486:	60bb      	str	r3, [r7, #8]
		flag_total |= flags[1];
  403488:	68bb      	ldr	r3, [r7, #8]
  40348a:	69fa      	ldr	r2, [r7, #28]
  40348c:	4313      	orrs	r3, r2
  40348e:	61fb      	str	r3, [r7, #28]
		flags[2] &= hri_pio_read_IMR_reg(PIOC);
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
  403490:	4811      	ldr	r0, [pc, #68]	; (4034d8 <_ext_irq_handler+0x14c>)
  403492:	4b0f      	ldr	r3, [pc, #60]	; (4034d0 <_ext_irq_handler+0x144>)
  403494:	4798      	blx	r3
  403496:	4603      	mov	r3, r0
  403498:	613b      	str	r3, [r7, #16]
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40349a:	480f      	ldr	r0, [pc, #60]	; (4034d8 <_ext_irq_handler+0x14c>)
  40349c:	4b0d      	ldr	r3, [pc, #52]	; (4034d4 <_ext_irq_handler+0x148>)
  40349e:	4798      	blx	r3
  4034a0:	4602      	mov	r2, r0
  4034a2:	693b      	ldr	r3, [r7, #16]
  4034a4:	4013      	ands	r3, r2
  4034a6:	613b      	str	r3, [r7, #16]
		flag_total |= flags[3];
  4034a8:	693b      	ldr	r3, [r7, #16]
  4034aa:	69fa      	ldr	r2, [r7, #28]
  4034ac:	4313      	orrs	r3, r2
  4034ae:	61fb      	str	r3, [r7, #28]
	while (flag_total) {
  4034b0:	69fb      	ldr	r3, [r7, #28]
  4034b2:	2b00      	cmp	r3, #0
  4034b4:	d1a3      	bne.n	4033fe <_ext_irq_handler+0x72>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  4034b6:	bf00      	nop
  4034b8:	3720      	adds	r7, #32
  4034ba:	46bd      	mov	sp, r7
  4034bc:	bd80      	pop	{r7, pc}
  4034be:	bf00      	nop
  4034c0:	2040166c 	.word	0x2040166c
  4034c4:	0040968c 	.word	0x0040968c
  4034c8:	004027fd 	.word	0x004027fd
  4034cc:	400e1000 	.word	0x400e1000
  4034d0:	00403131 	.word	0x00403131
  4034d4:	00403165 	.word	0x00403165
  4034d8:	400e1400 	.word	0x400e1400
  4034dc:	0040322f 	.word	0x0040322f

004034e0 <PIOD_Handler>:

void PIOD_Handler(void)
{
  4034e0:	b580      	push	{r7, lr}
  4034e2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  4034e4:	4b01      	ldr	r3, [pc, #4]	; (4034ec <PIOD_Handler+0xc>)
  4034e6:	4798      	blx	r3
}
  4034e8:	bf00      	nop
  4034ea:	bd80      	pop	{r7, pc}
  4034ec:	0040338d 	.word	0x0040338d

004034f0 <PIOB_Handler>:

void PIOB_Handler(void)
{
  4034f0:	b580      	push	{r7, lr}
  4034f2:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  4034f4:	4b01      	ldr	r3, [pc, #4]	; (4034fc <PIOB_Handler+0xc>)
  4034f6:	4798      	blx	r3
}
  4034f8:	bf00      	nop
  4034fa:	bd80      	pop	{r7, pc}
  4034fc:	0040338d 	.word	0x0040338d

00403500 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  403500:	b580      	push	{r7, lr}
  403502:	b084      	sub	sp, #16
  403504:	af00      	add	r7, sp, #0
  403506:	6078      	str	r0, [r7, #4]
	int8_t i;

	ASSERT(hw);
  403508:	687b      	ldr	r3, [r7, #4]
  40350a:	2b00      	cmp	r3, #0
  40350c:	bf14      	ite	ne
  40350e:	2301      	movne	r3, #1
  403510:	2300      	moveq	r3, #0
  403512:	b2db      	uxtb	r3, r3
  403514:	f240 1259 	movw	r2, #345	; 0x159
  403518:	4938      	ldr	r1, [pc, #224]	; (4035fc <_pio_init+0xfc>)
  40351a:	4618      	mov	r0, r3
  40351c:	4b38      	ldr	r3, [pc, #224]	; (403600 <_pio_init+0x100>)
  40351e:	4798      	blx	r3

	i = _pio_get_index(hw);
  403520:	6878      	ldr	r0, [r7, #4]
  403522:	4b38      	ldr	r3, [pc, #224]	; (403604 <_pio_init+0x104>)
  403524:	4798      	blx	r3
  403526:	4603      	mov	r3, r0
  403528:	73fb      	strb	r3, [r7, #15]
	if (i < 0) {
  40352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40352e:	2b00      	cmp	r3, #0
  403530:	da02      	bge.n	403538 <_pio_init+0x38>
		return ERR_DENIED;
  403532:	f06f 0310 	mvn.w	r3, #16
  403536:	e05d      	b.n	4035f4 <_pio_init+0xf4>
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  403538:	f997 200f 	ldrsb.w	r2, [r7, #15]
  40353c:	4932      	ldr	r1, [pc, #200]	; (403608 <_pio_init+0x108>)
  40353e:	4613      	mov	r3, r2
  403540:	00db      	lsls	r3, r3, #3
  403542:	1a9b      	subs	r3, r3, r2
  403544:	009b      	lsls	r3, r3, #2
  403546:	440b      	add	r3, r1
  403548:	3308      	adds	r3, #8
  40354a:	681b      	ldr	r3, [r3, #0]
  40354c:	4619      	mov	r1, r3
  40354e:	6878      	ldr	r0, [r7, #4]
  403550:	4b2e      	ldr	r3, [pc, #184]	; (40360c <_pio_init+0x10c>)
  403552:	4798      	blx	r3
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  403554:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403558:	492b      	ldr	r1, [pc, #172]	; (403608 <_pio_init+0x108>)
  40355a:	4613      	mov	r3, r2
  40355c:	00db      	lsls	r3, r3, #3
  40355e:	1a9b      	subs	r3, r3, r2
  403560:	009b      	lsls	r3, r3, #2
  403562:	440b      	add	r3, r1
  403564:	330c      	adds	r3, #12
  403566:	681b      	ldr	r3, [r3, #0]
  403568:	4619      	mov	r1, r3
  40356a:	6878      	ldr	r0, [r7, #4]
  40356c:	4b28      	ldr	r3, [pc, #160]	; (403610 <_pio_init+0x110>)
  40356e:	4798      	blx	r3
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  403570:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403574:	4924      	ldr	r1, [pc, #144]	; (403608 <_pio_init+0x108>)
  403576:	4613      	mov	r3, r2
  403578:	00db      	lsls	r3, r3, #3
  40357a:	1a9b      	subs	r3, r3, r2
  40357c:	009b      	lsls	r3, r3, #2
  40357e:	440b      	add	r3, r1
  403580:	3310      	adds	r3, #16
  403582:	681b      	ldr	r3, [r3, #0]
  403584:	4619      	mov	r1, r3
  403586:	6878      	ldr	r0, [r7, #4]
  403588:	4b22      	ldr	r3, [pc, #136]	; (403614 <_pio_init+0x114>)
  40358a:	4798      	blx	r3
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  40358c:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403590:	491d      	ldr	r1, [pc, #116]	; (403608 <_pio_init+0x108>)
  403592:	4613      	mov	r3, r2
  403594:	00db      	lsls	r3, r3, #3
  403596:	1a9b      	subs	r3, r3, r2
  403598:	009b      	lsls	r3, r3, #2
  40359a:	440b      	add	r3, r1
  40359c:	3318      	adds	r3, #24
  40359e:	681b      	ldr	r3, [r3, #0]
  4035a0:	4619      	mov	r1, r3
  4035a2:	6878      	ldr	r0, [r7, #4]
  4035a4:	4b1c      	ldr	r3, [pc, #112]	; (403618 <_pio_init+0x118>)
  4035a6:	4798      	blx	r3
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  4035a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4035ac:	4916      	ldr	r1, [pc, #88]	; (403608 <_pio_init+0x108>)
  4035ae:	4613      	mov	r3, r2
  4035b0:	00db      	lsls	r3, r3, #3
  4035b2:	1a9b      	subs	r3, r3, r2
  4035b4:	009b      	lsls	r3, r3, #2
  4035b6:	440b      	add	r3, r1
  4035b8:	3314      	adds	r3, #20
  4035ba:	681b      	ldr	r3, [r3, #0]
  4035bc:	4619      	mov	r1, r3
  4035be:	6878      	ldr	r0, [r7, #4]
  4035c0:	4b16      	ldr	r3, [pc, #88]	; (40361c <_pio_init+0x11c>)
  4035c2:	4798      	blx	r3

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  4035c4:	6878      	ldr	r0, [r7, #4]
  4035c6:	4b16      	ldr	r3, [pc, #88]	; (403620 <_pio_init+0x120>)
  4035c8:	4798      	blx	r3
  4035ca:	4603      	mov	r3, r0
  4035cc:	461a      	mov	r2, r3
  4035ce:	4b15      	ldr	r3, [pc, #84]	; (403624 <_pio_init+0x124>)
  4035d0:	5c9b      	ldrb	r3, [r3, r2]
  4035d2:	73fb      	strb	r3, [r7, #15]
	NVIC_DisableIRQ((IRQn_Type)i);
  4035d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4035d8:	4618      	mov	r0, r3
  4035da:	4b13      	ldr	r3, [pc, #76]	; (403628 <_pio_init+0x128>)
  4035dc:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)i);
  4035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4035e2:	4618      	mov	r0, r3
  4035e4:	4b11      	ldr	r3, [pc, #68]	; (40362c <_pio_init+0x12c>)
  4035e6:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)i);
  4035e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4035ec:	4618      	mov	r0, r3
  4035ee:	4b10      	ldr	r3, [pc, #64]	; (403630 <_pio_init+0x130>)
  4035f0:	4798      	blx	r3

	return ERR_NONE;
  4035f2:	2300      	movs	r3, #0
}
  4035f4:	4618      	mov	r0, r3
  4035f6:	3710      	adds	r7, #16
  4035f8:	46bd      	mov	sp, r7
  4035fa:	bd80      	pop	{r7, pc}
  4035fc:	0040968c 	.word	0x0040968c
  403600:	004027fd 	.word	0x004027fd
  403604:	00403319 	.word	0x00403319
  403608:	00409654 	.word	0x00409654
  40360c:	00403199 	.word	0x00403199
  403610:	004031d5 	.word	0x004031d5
  403614:	004031b7 	.word	0x004031b7
  403618:	00403211 	.word	0x00403211
  40361c:	004031f3 	.word	0x004031f3
  403620:	004032dd 	.word	0x004032dd
  403624:	0040964c 	.word	0x0040964c
  403628:	004030b1 	.word	0x004030b1
  40362c:	004030f5 	.word	0x004030f5
  403630:	00403075 	.word	0x00403075

00403634 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  403634:	b580      	push	{r7, lr}
  403636:	b082      	sub	sp, #8
  403638:	af00      	add	r7, sp, #0
  40363a:	6078      	str	r0, [r7, #4]
#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  40363c:	4806      	ldr	r0, [pc, #24]	; (403658 <_ext_irq_init+0x24>)
  40363e:	4b07      	ldr	r3, [pc, #28]	; (40365c <_ext_irq_init+0x28>)
  403640:	4798      	blx	r3
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  403642:	4807      	ldr	r0, [pc, #28]	; (403660 <_ext_irq_init+0x2c>)
  403644:	4b05      	ldr	r3, [pc, #20]	; (40365c <_ext_irq_init+0x28>)
  403646:	4798      	blx	r3

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  403648:	4a06      	ldr	r2, [pc, #24]	; (403664 <_ext_irq_init+0x30>)
  40364a:	687b      	ldr	r3, [r7, #4]
  40364c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
  40364e:	2300      	movs	r3, #0
}
  403650:	4618      	mov	r0, r3
  403652:	3708      	adds	r7, #8
  403654:	46bd      	mov	sp, r7
  403656:	bd80      	pop	{r7, pc}
  403658:	400e1000 	.word	0x400e1000
  40365c:	00403501 	.word	0x00403501
  403660:	400e1400 	.word	0x400e1400
  403664:	2040166c 	.word	0x2040166c

00403668 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  403668:	b580      	push	{r7, lr}
  40366a:	b084      	sub	sp, #16
  40366c:	af00      	add	r7, sp, #0
  40366e:	6078      	str	r0, [r7, #4]
  403670:	460b      	mov	r3, r1
  403672:	70fb      	strb	r3, [r7, #3]
	void *   hw   = PIOA;
  403674:	4b19      	ldr	r3, [pc, #100]	; (4036dc <_ext_irq_enable+0x74>)
  403676:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
  403678:	2300      	movs	r3, #0
  40367a:	60bb      	str	r3, [r7, #8]

	ASSERT(pin < 160);
  40367c:	687b      	ldr	r3, [r7, #4]
  40367e:	2b9f      	cmp	r3, #159	; 0x9f
  403680:	bf94      	ite	ls
  403682:	2301      	movls	r3, #1
  403684:	2300      	movhi	r3, #0
  403686:	b2db      	uxtb	r3, r3
  403688:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  40368c:	4914      	ldr	r1, [pc, #80]	; (4036e0 <_ext_irq_enable+0x78>)
  40368e:	4618      	mov	r0, r3
  403690:	4b14      	ldr	r3, [pc, #80]	; (4036e4 <_ext_irq_enable+0x7c>)
  403692:	4798      	blx	r3

	hw   = _get_hardware_instance(pin);
  403694:	687b      	ldr	r3, [r7, #4]
  403696:	b2db      	uxtb	r3, r3
  403698:	4618      	mov	r0, r3
  40369a:	4b13      	ldr	r3, [pc, #76]	; (4036e8 <_ext_irq_enable+0x80>)
  40369c:	4798      	blx	r3
  40369e:	60f8      	str	r0, [r7, #12]
	temp = pin & 31;
  4036a0:	687b      	ldr	r3, [r7, #4]
  4036a2:	f003 031f 	and.w	r3, r3, #31
  4036a6:	60bb      	str	r3, [r7, #8]

	if (enable) {
  4036a8:	78fb      	ldrb	r3, [r7, #3]
  4036aa:	2b00      	cmp	r3, #0
  4036ac:	d008      	beq.n	4036c0 <_ext_irq_enable+0x58>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  4036ae:	2201      	movs	r2, #1
  4036b0:	68bb      	ldr	r3, [r7, #8]
  4036b2:	fa02 f303 	lsl.w	r3, r2, r3
  4036b6:	4619      	mov	r1, r3
  4036b8:	68f8      	ldr	r0, [r7, #12]
  4036ba:	4b0c      	ldr	r3, [pc, #48]	; (4036ec <_ext_irq_enable+0x84>)
  4036bc:	4798      	blx	r3
  4036be:	e007      	b.n	4036d0 <_ext_irq_enable+0x68>
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  4036c0:	2201      	movs	r2, #1
  4036c2:	68bb      	ldr	r3, [r7, #8]
  4036c4:	fa02 f303 	lsl.w	r3, r2, r3
  4036c8:	4619      	mov	r1, r3
  4036ca:	68f8      	ldr	r0, [r7, #12]
  4036cc:	4b08      	ldr	r3, [pc, #32]	; (4036f0 <_ext_irq_enable+0x88>)
  4036ce:	4798      	blx	r3
	}

	return ERR_NONE;
  4036d0:	2300      	movs	r3, #0
}
  4036d2:	4618      	mov	r0, r3
  4036d4:	3710      	adds	r7, #16
  4036d6:	46bd      	mov	sp, r7
  4036d8:	bd80      	pop	{r7, pc}
  4036da:	bf00      	nop
  4036dc:	400e0e00 	.word	0x400e0e00
  4036e0:	0040968c 	.word	0x0040968c
  4036e4:	004027fd 	.word	0x004027fd
  4036e8:	00403299 	.word	0x00403299
  4036ec:	00403149 	.word	0x00403149
  4036f0:	0040317d 	.word	0x0040317d

004036f4 <hri_pmc_get_SR_MOSCXTS_bit>:
{
  4036f4:	b480      	push	{r7}
  4036f6:	b083      	sub	sp, #12
  4036f8:	af00      	add	r7, sp, #0
  4036fa:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4036fc:	687b      	ldr	r3, [r7, #4]
  4036fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403700:	f003 0301 	and.w	r3, r3, #1
  403704:	2b00      	cmp	r3, #0
  403706:	bf14      	ite	ne
  403708:	2301      	movne	r3, #1
  40370a:	2300      	moveq	r3, #0
  40370c:	b2db      	uxtb	r3, r3
}
  40370e:	4618      	mov	r0, r3
  403710:	370c      	adds	r7, #12
  403712:	46bd      	mov	sp, r7
  403714:	f85d 7b04 	ldr.w	r7, [sp], #4
  403718:	4770      	bx	lr

0040371a <hri_pmc_get_SR_LOCKA_bit>:
{
  40371a:	b480      	push	{r7}
  40371c:	b083      	sub	sp, #12
  40371e:	af00      	add	r7, sp, #0
  403720:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  403722:	687b      	ldr	r3, [r7, #4]
  403724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403726:	f003 0302 	and.w	r3, r3, #2
  40372a:	2b00      	cmp	r3, #0
  40372c:	bf14      	ite	ne
  40372e:	2301      	movne	r3, #1
  403730:	2300      	moveq	r3, #0
  403732:	b2db      	uxtb	r3, r3
}
  403734:	4618      	mov	r0, r3
  403736:	370c      	adds	r7, #12
  403738:	46bd      	mov	sp, r7
  40373a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40373e:	4770      	bx	lr

00403740 <hri_pmc_get_SR_MCKRDY_bit>:
{
  403740:	b480      	push	{r7}
  403742:	b083      	sub	sp, #12
  403744:	af00      	add	r7, sp, #0
  403746:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  403748:	687b      	ldr	r3, [r7, #4]
  40374a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40374c:	f003 0308 	and.w	r3, r3, #8
  403750:	2b00      	cmp	r3, #0
  403752:	bf14      	ite	ne
  403754:	2301      	movne	r3, #1
  403756:	2300      	moveq	r3, #0
  403758:	b2db      	uxtb	r3, r3
}
  40375a:	4618      	mov	r0, r3
  40375c:	370c      	adds	r7, #12
  40375e:	46bd      	mov	sp, r7
  403760:	f85d 7b04 	ldr.w	r7, [sp], #4
  403764:	4770      	bx	lr

00403766 <hri_pmc_get_SR_LOCKU_bit>:
{
  403766:	b480      	push	{r7}
  403768:	b083      	sub	sp, #12
  40376a:	af00      	add	r7, sp, #0
  40376c:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  40376e:	687b      	ldr	r3, [r7, #4]
  403770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403772:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403776:	2b00      	cmp	r3, #0
  403778:	bf14      	ite	ne
  40377a:	2301      	movne	r3, #1
  40377c:	2300      	moveq	r3, #0
  40377e:	b2db      	uxtb	r3, r3
}
  403780:	4618      	mov	r0, r3
  403782:	370c      	adds	r7, #12
  403784:	46bd      	mov	sp, r7
  403786:	f85d 7b04 	ldr.w	r7, [sp], #4
  40378a:	4770      	bx	lr

0040378c <hri_pmc_write_CKGR_UCKR_reg>:
{
  40378c:	b480      	push	{r7}
  40378e:	b083      	sub	sp, #12
  403790:	af00      	add	r7, sp, #0
  403792:	6078      	str	r0, [r7, #4]
  403794:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_UCKR = data;
  403796:	687b      	ldr	r3, [r7, #4]
  403798:	683a      	ldr	r2, [r7, #0]
  40379a:	61da      	str	r2, [r3, #28]
}
  40379c:	bf00      	nop
  40379e:	370c      	adds	r7, #12
  4037a0:	46bd      	mov	sp, r7
  4037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037a6:	4770      	bx	lr

004037a8 <hri_pmc_set_CKGR_MOR_reg>:
{
  4037a8:	b480      	push	{r7}
  4037aa:	b083      	sub	sp, #12
  4037ac:	af00      	add	r7, sp, #0
  4037ae:	6078      	str	r0, [r7, #4]
  4037b0:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR |= mask;
  4037b2:	687b      	ldr	r3, [r7, #4]
  4037b4:	6a1a      	ldr	r2, [r3, #32]
  4037b6:	683b      	ldr	r3, [r7, #0]
  4037b8:	431a      	orrs	r2, r3
  4037ba:	687b      	ldr	r3, [r7, #4]
  4037bc:	621a      	str	r2, [r3, #32]
}
  4037be:	bf00      	nop
  4037c0:	370c      	adds	r7, #12
  4037c2:	46bd      	mov	sp, r7
  4037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037c8:	4770      	bx	lr

004037ca <hri_pmc_write_CKGR_MOR_reg>:
{
  4037ca:	b480      	push	{r7}
  4037cc:	b083      	sub	sp, #12
  4037ce:	af00      	add	r7, sp, #0
  4037d0:	6078      	str	r0, [r7, #4]
  4037d2:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR = data;
  4037d4:	687b      	ldr	r3, [r7, #4]
  4037d6:	683a      	ldr	r2, [r7, #0]
  4037d8:	621a      	str	r2, [r3, #32]
}
  4037da:	bf00      	nop
  4037dc:	370c      	adds	r7, #12
  4037de:	46bd      	mov	sp, r7
  4037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037e4:	4770      	bx	lr

004037e6 <hri_pmc_read_CKGR_MOR_reg>:
{
  4037e6:	b480      	push	{r7}
  4037e8:	b083      	sub	sp, #12
  4037ea:	af00      	add	r7, sp, #0
  4037ec:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->CKGR_MOR;
  4037ee:	687b      	ldr	r3, [r7, #4]
  4037f0:	6a1b      	ldr	r3, [r3, #32]
}
  4037f2:	4618      	mov	r0, r3
  4037f4:	370c      	adds	r7, #12
  4037f6:	46bd      	mov	sp, r7
  4037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037fc:	4770      	bx	lr
	...

00403800 <hri_pmc_write_CKGR_PLLAR_MULA_bf>:
{
  403800:	b480      	push	{r7}
  403802:	b085      	sub	sp, #20
  403804:	af00      	add	r7, sp, #0
  403806:	6078      	str	r0, [r7, #4]
  403808:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40380a:	687b      	ldr	r3, [r7, #4]
  40380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40380e:	60fb      	str	r3, [r7, #12]
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  403810:	68fa      	ldr	r2, [r7, #12]
  403812:	4b09      	ldr	r3, [pc, #36]	; (403838 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x38>)
  403814:	4013      	ands	r3, r2
  403816:	60fb      	str	r3, [r7, #12]
	tmp |= CKGR_PLLAR_MULA(data);
  403818:	683b      	ldr	r3, [r7, #0]
  40381a:	041a      	lsls	r2, r3, #16
  40381c:	4b07      	ldr	r3, [pc, #28]	; (40383c <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x3c>)
  40381e:	4013      	ands	r3, r2
  403820:	68fa      	ldr	r2, [r7, #12]
  403822:	4313      	orrs	r3, r2
  403824:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  403826:	687b      	ldr	r3, [r7, #4]
  403828:	68fa      	ldr	r2, [r7, #12]
  40382a:	629a      	str	r2, [r3, #40]	; 0x28
}
  40382c:	bf00      	nop
  40382e:	3714      	adds	r7, #20
  403830:	46bd      	mov	sp, r7
  403832:	f85d 7b04 	ldr.w	r7, [sp], #4
  403836:	4770      	bx	lr
  403838:	f800ffff 	.word	0xf800ffff
  40383c:	07ff0000 	.word	0x07ff0000

00403840 <hri_pmc_write_CKGR_PLLAR_reg>:
{
  403840:	b480      	push	{r7}
  403842:	b083      	sub	sp, #12
  403844:	af00      	add	r7, sp, #0
  403846:	6078      	str	r0, [r7, #4]
  403848:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_PLLAR = data;
  40384a:	687b      	ldr	r3, [r7, #4]
  40384c:	683a      	ldr	r2, [r7, #0]
  40384e:	629a      	str	r2, [r3, #40]	; 0x28
}
  403850:	bf00      	nop
  403852:	370c      	adds	r7, #12
  403854:	46bd      	mov	sp, r7
  403856:	f85d 7b04 	ldr.w	r7, [sp], #4
  40385a:	4770      	bx	lr

0040385c <hri_pmc_write_MCKR_UPLLDIV2_bit>:
{
  40385c:	b480      	push	{r7}
  40385e:	b085      	sub	sp, #20
  403860:	af00      	add	r7, sp, #0
  403862:	6078      	str	r0, [r7, #4]
  403864:	460b      	mov	r3, r1
  403866:	70fb      	strb	r3, [r7, #3]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403868:	687b      	ldr	r3, [r7, #4]
  40386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40386c:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_UPLLDIV2;
  40386e:	68fb      	ldr	r3, [r7, #12]
  403870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403874:	60fb      	str	r3, [r7, #12]
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  403876:	78fb      	ldrb	r3, [r7, #3]
  403878:	035b      	lsls	r3, r3, #13
  40387a:	461a      	mov	r2, r3
  40387c:	68fb      	ldr	r3, [r7, #12]
  40387e:	4313      	orrs	r3, r2
  403880:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403882:	687b      	ldr	r3, [r7, #4]
  403884:	68fa      	ldr	r2, [r7, #12]
  403886:	631a      	str	r2, [r3, #48]	; 0x30
}
  403888:	bf00      	nop
  40388a:	3714      	adds	r7, #20
  40388c:	46bd      	mov	sp, r7
  40388e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403892:	4770      	bx	lr

00403894 <hri_pmc_write_MCKR_CSS_bf>:
{
  403894:	b480      	push	{r7}
  403896:	b085      	sub	sp, #20
  403898:	af00      	add	r7, sp, #0
  40389a:	6078      	str	r0, [r7, #4]
  40389c:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40389e:	687b      	ldr	r3, [r7, #4]
  4038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038a2:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_CSS_Msk;
  4038a4:	68fb      	ldr	r3, [r7, #12]
  4038a6:	f023 0303 	bic.w	r3, r3, #3
  4038aa:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_CSS(data);
  4038ac:	683b      	ldr	r3, [r7, #0]
  4038ae:	f003 0303 	and.w	r3, r3, #3
  4038b2:	68fa      	ldr	r2, [r7, #12]
  4038b4:	4313      	orrs	r3, r2
  4038b6:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  4038b8:	687b      	ldr	r3, [r7, #4]
  4038ba:	68fa      	ldr	r2, [r7, #12]
  4038bc:	631a      	str	r2, [r3, #48]	; 0x30
}
  4038be:	bf00      	nop
  4038c0:	3714      	adds	r7, #20
  4038c2:	46bd      	mov	sp, r7
  4038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4038c8:	4770      	bx	lr

004038ca <hri_pmc_write_MCKR_PRES_bf>:
{
  4038ca:	b480      	push	{r7}
  4038cc:	b085      	sub	sp, #20
  4038ce:	af00      	add	r7, sp, #0
  4038d0:	6078      	str	r0, [r7, #4]
  4038d2:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4038d4:	687b      	ldr	r3, [r7, #4]
  4038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4038d8:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_PRES_Msk;
  4038da:	68fb      	ldr	r3, [r7, #12]
  4038dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4038e0:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_PRES(data);
  4038e2:	683b      	ldr	r3, [r7, #0]
  4038e4:	011b      	lsls	r3, r3, #4
  4038e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4038ea:	68fa      	ldr	r2, [r7, #12]
  4038ec:	4313      	orrs	r3, r2
  4038ee:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  4038f0:	687b      	ldr	r3, [r7, #4]
  4038f2:	68fa      	ldr	r2, [r7, #12]
  4038f4:	631a      	str	r2, [r3, #48]	; 0x30
}
  4038f6:	bf00      	nop
  4038f8:	3714      	adds	r7, #20
  4038fa:	46bd      	mov	sp, r7
  4038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  403900:	4770      	bx	lr

00403902 <hri_pmc_write_MCKR_MDIV_bf>:
{
  403902:	b480      	push	{r7}
  403904:	b085      	sub	sp, #20
  403906:	af00      	add	r7, sp, #0
  403908:	6078      	str	r0, [r7, #4]
  40390a:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40390c:	687b      	ldr	r3, [r7, #4]
  40390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403910:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_MDIV_Msk;
  403912:	68fb      	ldr	r3, [r7, #12]
  403914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403918:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_MDIV(data);
  40391a:	683b      	ldr	r3, [r7, #0]
  40391c:	021b      	lsls	r3, r3, #8
  40391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403922:	68fa      	ldr	r2, [r7, #12]
  403924:	4313      	orrs	r3, r2
  403926:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403928:	687b      	ldr	r3, [r7, #4]
  40392a:	68fa      	ldr	r2, [r7, #12]
  40392c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40392e:	bf00      	nop
  403930:	3714      	adds	r7, #20
  403932:	46bd      	mov	sp, r7
  403934:	f85d 7b04 	ldr.w	r7, [sp], #4
  403938:	4770      	bx	lr
	...

0040393c <_pmc_init_sources>:
 * \brief Initializes clock generators
 *
 * All clock sources are running when this function returns.
 */
static void _pmc_init_sources(void)
{
  40393c:	b580      	push	{r7, lr}
  40393e:	b082      	sub	sp, #8
  403940:	af00      	add	r7, sp, #0
	uint32_t data = 0;
  403942:	2300      	movs	r3, #0
  403944:	607b      	str	r3, [r7, #4]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  403946:	4826      	ldr	r0, [pc, #152]	; (4039e0 <_pmc_init_sources+0xa4>)
  403948:	4b26      	ldr	r3, [pc, #152]	; (4039e4 <_pmc_init_sources+0xa8>)
  40394a:	4798      	blx	r3
  40394c:	4603      	mov	r3, r0
  40394e:	f023 0302 	bic.w	r3, r3, #2
  403952:	607b      	str	r3, [r7, #4]
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  403954:	687a      	ldr	r2, [r7, #4]
  403956:	4b24      	ldr	r3, [pc, #144]	; (4039e8 <_pmc_init_sources+0xac>)
  403958:	4313      	orrs	r3, r2
  40395a:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
  40395c:	6879      	ldr	r1, [r7, #4]
  40395e:	4820      	ldr	r0, [pc, #128]	; (4039e0 <_pmc_init_sources+0xa4>)
  403960:	4b22      	ldr	r3, [pc, #136]	; (4039ec <_pmc_init_sources+0xb0>)
  403962:	4798      	blx	r3
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  403964:	bf00      	nop
  403966:	481e      	ldr	r0, [pc, #120]	; (4039e0 <_pmc_init_sources+0xa4>)
  403968:	4b21      	ldr	r3, [pc, #132]	; (4039f0 <_pmc_init_sources+0xb4>)
  40396a:	4798      	blx	r3
  40396c:	4603      	mov	r3, r0
  40396e:	f083 0301 	eor.w	r3, r3, #1
  403972:	b2db      	uxtb	r3, r3
  403974:	2b00      	cmp	r3, #0
  403976:	d1f6      	bne.n	403966 <_pmc_init_sources+0x2a>
		/* Wait until the XTAL to stabilize */
	}
	hri_pmc_set_CKGR_MOR_reg(PMC, CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL);
  403978:	491e      	ldr	r1, [pc, #120]	; (4039f4 <_pmc_init_sources+0xb8>)
  40397a:	4819      	ldr	r0, [pc, #100]	; (4039e0 <_pmc_init_sources+0xa4>)
  40397c:	4b1e      	ldr	r3, [pc, #120]	; (4039f8 <_pmc_init_sources+0xbc>)
  40397e:	4798      	blx	r3
#endif
#endif
#endif

#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  403980:	4b1e      	ldr	r3, [pc, #120]	; (4039fc <_pmc_init_sources+0xc0>)
  403982:	607b      	str	r3, [r7, #4]
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
  403984:	2100      	movs	r1, #0
  403986:	4816      	ldr	r0, [pc, #88]	; (4039e0 <_pmc_init_sources+0xa4>)
  403988:	4b1d      	ldr	r3, [pc, #116]	; (403a00 <_pmc_init_sources+0xc4>)
  40398a:	4798      	blx	r3
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
  40398c:	687b      	ldr	r3, [r7, #4]
  40398e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403992:	4619      	mov	r1, r3
  403994:	4812      	ldr	r0, [pc, #72]	; (4039e0 <_pmc_init_sources+0xa4>)
  403996:	4b1b      	ldr	r3, [pc, #108]	; (403a04 <_pmc_init_sources+0xc8>)
  403998:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40399a:	bf00      	nop
  40399c:	4810      	ldr	r0, [pc, #64]	; (4039e0 <_pmc_init_sources+0xa4>)
  40399e:	4b1a      	ldr	r3, [pc, #104]	; (403a08 <_pmc_init_sources+0xcc>)
  4039a0:	4798      	blx	r3
  4039a2:	4603      	mov	r3, r0
  4039a4:	f083 0301 	eor.w	r3, r3, #1
  4039a8:	b2db      	uxtb	r3, r3
  4039aa:	2b00      	cmp	r3, #0
  4039ac:	d1f6      	bne.n	40399c <_pmc_init_sources+0x60>
		/* Wait until PLLACK stabilize */
	}
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4039ae:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  4039b2:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
  4039b4:	687b      	ldr	r3, [r7, #4]
  4039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4039ba:	4619      	mov	r1, r3
  4039bc:	4808      	ldr	r0, [pc, #32]	; (4039e0 <_pmc_init_sources+0xa4>)
  4039be:	4b13      	ldr	r3, [pc, #76]	; (403a0c <_pmc_init_sources+0xd0>)
  4039c0:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  4039c2:	bf00      	nop
  4039c4:	4806      	ldr	r0, [pc, #24]	; (4039e0 <_pmc_init_sources+0xa4>)
  4039c6:	4b12      	ldr	r3, [pc, #72]	; (403a10 <_pmc_init_sources+0xd4>)
  4039c8:	4798      	blx	r3
  4039ca:	4603      	mov	r3, r0
  4039cc:	f083 0301 	eor.w	r3, r3, #1
  4039d0:	b2db      	uxtb	r3, r3
  4039d2:	2b00      	cmp	r3, #0
  4039d4:	d1f6      	bne.n	4039c4 <_pmc_init_sources+0x88>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4039d6:	bf00      	nop
  4039d8:	3708      	adds	r7, #8
  4039da:	46bd      	mov	sp, r7
  4039dc:	bd80      	pop	{r7, pc}
  4039de:	bf00      	nop
  4039e0:	400e0600 	.word	0x400e0600
  4039e4:	004037e7 	.word	0x004037e7
  4039e8:	00373e01 	.word	0x00373e01
  4039ec:	004037cb 	.word	0x004037cb
  4039f0:	004036f5 	.word	0x004036f5
  4039f4:	01370000 	.word	0x01370000
  4039f8:	004037a9 	.word	0x004037a9
  4039fc:	00183f01 	.word	0x00183f01
  403a00:	00403801 	.word	0x00403801
  403a04:	00403841 	.word	0x00403841
  403a08:	0040371b 	.word	0x0040371b
  403a0c:	0040378d 	.word	0x0040378d
  403a10:	00403767 	.word	0x00403767

00403a14 <_pmc_init_master_clock>:
 * \brief Initializes master clock generators
 *
 * Master clock are running when this function returns.
 */
static void _pmc_init_master_clock(void)
{
  403a14:	b580      	push	{r7, lr}
  403a16:	af00      	add	r7, sp, #0
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
  403a18:	2101      	movs	r1, #1
  403a1a:	481c      	ldr	r0, [pc, #112]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a1c:	4b1c      	ldr	r3, [pc, #112]	; (403a90 <_pmc_init_master_clock+0x7c>)
  403a1e:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403a20:	bf00      	nop
  403a22:	481a      	ldr	r0, [pc, #104]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a24:	4b1b      	ldr	r3, [pc, #108]	; (403a94 <_pmc_init_master_clock+0x80>)
  403a26:	4798      	blx	r3
  403a28:	4603      	mov	r3, r0
  403a2a:	f083 0301 	eor.w	r3, r3, #1
  403a2e:	b2db      	uxtb	r3, r3
  403a30:	2b00      	cmp	r3, #0
  403a32:	d1f6      	bne.n	403a22 <_pmc_init_master_clock+0xe>
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
  403a34:	2100      	movs	r1, #0
  403a36:	4815      	ldr	r0, [pc, #84]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a38:	4b17      	ldr	r3, [pc, #92]	; (403a98 <_pmc_init_master_clock+0x84>)
  403a3a:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403a3c:	bf00      	nop
  403a3e:	4813      	ldr	r0, [pc, #76]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a40:	4b14      	ldr	r3, [pc, #80]	; (403a94 <_pmc_init_master_clock+0x80>)
  403a42:	4798      	blx	r3
  403a44:	4603      	mov	r3, r0
  403a46:	f083 0301 	eor.w	r3, r3, #1
  403a4a:	b2db      	uxtb	r3, r3
  403a4c:	2b00      	cmp	r3, #0
  403a4e:	d1f6      	bne.n	403a3e <_pmc_init_master_clock+0x2a>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
  403a50:	2101      	movs	r1, #1
  403a52:	480e      	ldr	r0, [pc, #56]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a54:	4b11      	ldr	r3, [pc, #68]	; (403a9c <_pmc_init_master_clock+0x88>)
  403a56:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403a58:	bf00      	nop
  403a5a:	480c      	ldr	r0, [pc, #48]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a5c:	4b0d      	ldr	r3, [pc, #52]	; (403a94 <_pmc_init_master_clock+0x80>)
  403a5e:	4798      	blx	r3
  403a60:	4603      	mov	r3, r0
  403a62:	f083 0301 	eor.w	r3, r3, #1
  403a66:	b2db      	uxtb	r3, r3
  403a68:	2b00      	cmp	r3, #0
  403a6a:	d1f6      	bne.n	403a5a <_pmc_init_master_clock+0x46>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
  403a6c:	2102      	movs	r1, #2
  403a6e:	4807      	ldr	r0, [pc, #28]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a70:	4b0b      	ldr	r3, [pc, #44]	; (403aa0 <_pmc_init_master_clock+0x8c>)
  403a72:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403a74:	bf00      	nop
  403a76:	4805      	ldr	r0, [pc, #20]	; (403a8c <_pmc_init_master_clock+0x78>)
  403a78:	4b06      	ldr	r3, [pc, #24]	; (403a94 <_pmc_init_master_clock+0x80>)
  403a7a:	4798      	blx	r3
  403a7c:	4603      	mov	r3, r0
  403a7e:	f083 0301 	eor.w	r3, r3, #1
  403a82:	b2db      	uxtb	r3, r3
  403a84:	2b00      	cmp	r3, #0
  403a86:	d1f6      	bne.n	403a76 <_pmc_init_master_clock+0x62>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  403a88:	bf00      	nop
  403a8a:	bd80      	pop	{r7, pc}
  403a8c:	400e0600 	.word	0x400e0600
  403a90:	0040385d 	.word	0x0040385d
  403a94:	00403741 	.word	0x00403741
  403a98:	004038cb 	.word	0x004038cb
  403a9c:	00403903 	.word	0x00403903
  403aa0:	00403895 	.word	0x00403895

00403aa4 <_pmc_init_program_clock>:
 * \brief Initializes programmable clock generators
 *
 * Programmable clock are running when this function returns.
 */
static void _pmc_init_program_clock(void)
{
  403aa4:	b480      	push	{r7}
  403aa6:	af00      	add	r7, sp, #0
	while (!hri_pmc_get_SR_PCKRDY0_bit(PMC)) {
		/* Wait until PCK6 clock is ready */
	}
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK6);
#endif
}
  403aa8:	bf00      	nop
  403aaa:	46bd      	mov	sp, r7
  403aac:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ab0:	4770      	bx	lr

00403ab2 <_pmc_init_fs_clock>:
 * \brief Initializes USB FS clock generators
 *
 * USB FS clock are running when this function returns.
 */
static void _pmc_init_fs_clock(void)
{
  403ab2:	b480      	push	{r7}
  403ab4:	af00      	add	r7, sp, #0
	}
	data |= PMC_USB_USBDIV(CONF_USB_48M_DIV - 1);
	hri_pmc_write_USB_reg(PMC, data);
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_USBCLK);
#endif
}
  403ab6:	bf00      	nop
  403ab8:	46bd      	mov	sp, r7
  403aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  403abe:	4770      	bx	lr

00403ac0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  403ac0:	b580      	push	{r7, lr}
  403ac2:	af00      	add	r7, sp, #0
	_pmc_init_sources();
  403ac4:	4b04      	ldr	r3, [pc, #16]	; (403ad8 <_pmc_init+0x18>)
  403ac6:	4798      	blx	r3
	_pmc_init_master_clock();
  403ac8:	4b04      	ldr	r3, [pc, #16]	; (403adc <_pmc_init+0x1c>)
  403aca:	4798      	blx	r3
	_pmc_init_program_clock();
  403acc:	4b04      	ldr	r3, [pc, #16]	; (403ae0 <_pmc_init+0x20>)
  403ace:	4798      	blx	r3
	_pmc_init_fs_clock();
  403ad0:	4b04      	ldr	r3, [pc, #16]	; (403ae4 <_pmc_init+0x24>)
  403ad2:	4798      	blx	r3
}
  403ad4:	bf00      	nop
  403ad6:	bd80      	pop	{r7, pc}
  403ad8:	0040393d 	.word	0x0040393d
  403adc:	00403a15 	.word	0x00403a15
  403ae0:	00403aa5 	.word	0x00403aa5
  403ae4:	00403ab3 	.word	0x00403ab3

00403ae8 <__NVIC_EnableIRQ>:
{
  403ae8:	b480      	push	{r7}
  403aea:	b083      	sub	sp, #12
  403aec:	af00      	add	r7, sp, #0
  403aee:	4603      	mov	r3, r0
  403af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403af6:	2b00      	cmp	r3, #0
  403af8:	db0b      	blt.n	403b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403afa:	4909      	ldr	r1, [pc, #36]	; (403b20 <__NVIC_EnableIRQ+0x38>)
  403afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b00:	095b      	lsrs	r3, r3, #5
  403b02:	79fa      	ldrb	r2, [r7, #7]
  403b04:	f002 021f 	and.w	r2, r2, #31
  403b08:	2001      	movs	r0, #1
  403b0a:	fa00 f202 	lsl.w	r2, r0, r2
  403b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403b12:	bf00      	nop
  403b14:	370c      	adds	r7, #12
  403b16:	46bd      	mov	sp, r7
  403b18:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b1c:	4770      	bx	lr
  403b1e:	bf00      	nop
  403b20:	e000e100 	.word	0xe000e100

00403b24 <hri_spi_get_SR_SPIENS_bit>:
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
  403b24:	b480      	push	{r7}
  403b26:	b083      	sub	sp, #12
  403b28:	af00      	add	r7, sp, #0
  403b2a:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  403b2c:	687b      	ldr	r3, [r7, #4]
  403b2e:	691b      	ldr	r3, [r3, #16]
  403b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403b34:	2b00      	cmp	r3, #0
  403b36:	bf14      	ite	ne
  403b38:	2301      	movne	r3, #1
  403b3a:	2300      	moveq	r3, #0
  403b3c:	b2db      	uxtb	r3, r3
}
  403b3e:	4618      	mov	r0, r3
  403b40:	370c      	adds	r7, #12
  403b42:	46bd      	mov	sp, r7
  403b44:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b48:	4770      	bx	lr

00403b4a <hri_spi_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_MR_reg(const void *const hw, hri_spi_mr_reg_t data)
{
  403b4a:	b480      	push	{r7}
  403b4c:	b083      	sub	sp, #12
  403b4e:	af00      	add	r7, sp, #0
  403b50:	6078      	str	r0, [r7, #4]
  403b52:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MR = data;
  403b54:	687b      	ldr	r3, [r7, #4]
  403b56:	683a      	ldr	r2, [r7, #0]
  403b58:	605a      	str	r2, [r3, #4]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403b5a:	bf00      	nop
  403b5c:	370c      	adds	r7, #12
  403b5e:	46bd      	mov	sp, r7
  403b60:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b64:	4770      	bx	lr

00403b66 <hri_spi_write_CSR_BITS_bf>:
	tmp = (tmp & SPI_CSR_BITS(mask)) >> SPI_CSR_BITS_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_BITS_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  403b66:	b480      	push	{r7}
  403b68:	b087      	sub	sp, #28
  403b6a:	af00      	add	r7, sp, #0
  403b6c:	60f8      	str	r0, [r7, #12]
  403b6e:	460b      	mov	r3, r1
  403b70:	607a      	str	r2, [r7, #4]
  403b72:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  403b74:	7afa      	ldrb	r2, [r7, #11]
  403b76:	68fb      	ldr	r3, [r7, #12]
  403b78:	320c      	adds	r2, #12
  403b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403b7e:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_BITS_Msk;
  403b80:	697b      	ldr	r3, [r7, #20]
  403b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  403b86:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_BITS(data);
  403b88:	687b      	ldr	r3, [r7, #4]
  403b8a:	011b      	lsls	r3, r3, #4
  403b8c:	b2db      	uxtb	r3, r3
  403b8e:	697a      	ldr	r2, [r7, #20]
  403b90:	4313      	orrs	r3, r2
  403b92:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  403b94:	7afa      	ldrb	r2, [r7, #11]
  403b96:	68fb      	ldr	r3, [r7, #12]
  403b98:	320c      	adds	r2, #12
  403b9a:	6979      	ldr	r1, [r7, #20]
  403b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403ba0:	bf00      	nop
  403ba2:	371c      	adds	r7, #28
  403ba4:	46bd      	mov	sp, r7
  403ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403baa:	4770      	bx	lr

00403bac <hri_spi_write_CSR_SCBR_bf>:
	tmp = (tmp & SPI_CSR_SCBR(mask)) >> SPI_CSR_SCBR_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_SCBR_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  403bac:	b480      	push	{r7}
  403bae:	b087      	sub	sp, #28
  403bb0:	af00      	add	r7, sp, #0
  403bb2:	60f8      	str	r0, [r7, #12]
  403bb4:	460b      	mov	r3, r1
  403bb6:	607a      	str	r2, [r7, #4]
  403bb8:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  403bba:	7afa      	ldrb	r2, [r7, #11]
  403bbc:	68fb      	ldr	r3, [r7, #12]
  403bbe:	320c      	adds	r2, #12
  403bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403bc4:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_SCBR_Msk;
  403bc6:	697b      	ldr	r3, [r7, #20]
  403bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  403bcc:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_SCBR(data);
  403bce:	687b      	ldr	r3, [r7, #4]
  403bd0:	021b      	lsls	r3, r3, #8
  403bd2:	b29b      	uxth	r3, r3
  403bd4:	697a      	ldr	r2, [r7, #20]
  403bd6:	4313      	orrs	r3, r2
  403bd8:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  403bda:	7afa      	ldrb	r2, [r7, #11]
  403bdc:	68fb      	ldr	r3, [r7, #12]
  403bde:	320c      	adds	r2, #12
  403be0:	6979      	ldr	r1, [r7, #20]
  403be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403be6:	bf00      	nop
  403be8:	371c      	adds	r7, #28
  403bea:	46bd      	mov	sp, r7
  403bec:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bf0:	4770      	bx	lr

00403bf2 <hri_spi_write_CSR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CSR_reg(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  403bf2:	b480      	push	{r7}
  403bf4:	b085      	sub	sp, #20
  403bf6:	af00      	add	r7, sp, #0
  403bf8:	60f8      	str	r0, [r7, #12]
  403bfa:	460b      	mov	r3, r1
  403bfc:	607a      	str	r2, [r7, #4]
  403bfe:	72fb      	strb	r3, [r7, #11]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CSR[index] = data;
  403c00:	7afa      	ldrb	r2, [r7, #11]
  403c02:	68fb      	ldr	r3, [r7, #12]
  403c04:	320c      	adds	r2, #12
  403c06:	6879      	ldr	r1, [r7, #4]
  403c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403c0c:	bf00      	nop
  403c0e:	3714      	adds	r7, #20
  403c10:	46bd      	mov	sp, r7
  403c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c16:	4770      	bx	lr

00403c18 <hri_spi_read_CSR_reg>:
	((Spi *)hw)->SPI_CSR[index] ^= mask;
	SPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_spi_csr_reg_t hri_spi_read_CSR_reg(const void *const hw, uint8_t index)
{
  403c18:	b480      	push	{r7}
  403c1a:	b083      	sub	sp, #12
  403c1c:	af00      	add	r7, sp, #0
  403c1e:	6078      	str	r0, [r7, #4]
  403c20:	460b      	mov	r3, r1
  403c22:	70fb      	strb	r3, [r7, #3]
	return ((Spi *)hw)->SPI_CSR[index];
  403c24:	78fa      	ldrb	r2, [r7, #3]
  403c26:	687b      	ldr	r3, [r7, #4]
  403c28:	320c      	adds	r2, #12
  403c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  403c2e:	4618      	mov	r0, r3
  403c30:	370c      	adds	r7, #12
  403c32:	46bd      	mov	sp, r7
  403c34:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c38:	4770      	bx	lr

00403c3a <hri_spi_write_CR_reg>:
{
	return ((Spi *)hw)->SPI_WPMR;
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
  403c3a:	b480      	push	{r7}
  403c3c:	b083      	sub	sp, #12
  403c3e:	af00      	add	r7, sp, #0
  403c40:	6078      	str	r0, [r7, #4]
  403c42:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  403c44:	687b      	ldr	r3, [r7, #4]
  403c46:	683a      	ldr	r2, [r7, #0]
  403c48:	601a      	str	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403c4a:	bf00      	nop
  403c4c:	370c      	adds	r7, #12
  403c4e:	46bd      	mov	sp, r7
  403c50:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c54:	4770      	bx	lr
	...

00403c58 <_spi_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _spi_get_irq_num(const void *const hw)
{
  403c58:	b480      	push	{r7}
  403c5a:	b083      	sub	sp, #12
  403c5c:	af00      	add	r7, sp, #0
  403c5e:	6078      	str	r0, [r7, #4]

	if (hw == SPI0) {
  403c60:	687b      	ldr	r3, [r7, #4]
  403c62:	4a06      	ldr	r2, [pc, #24]	; (403c7c <_spi_get_irq_num+0x24>)
  403c64:	4293      	cmp	r3, r2
  403c66:	d101      	bne.n	403c6c <_spi_get_irq_num+0x14>
		return SPI0_IRQn;
  403c68:	2315      	movs	r3, #21
  403c6a:	e000      	b.n	403c6e <_spi_get_irq_num+0x16>
	} else {
		return SPI1_IRQn;
  403c6c:	232a      	movs	r3, #42	; 0x2a
	}
}
  403c6e:	4618      	mov	r0, r3
  403c70:	370c      	adds	r7, #12
  403c72:	46bd      	mov	sp, r7
  403c74:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c78:	4770      	bx	lr
  403c7a:	bf00      	nop
  403c7c:	40008000 	.word	0x40008000

00403c80 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
  403c80:	b580      	push	{r7, lr}
  403c82:	b082      	sub	sp, #8
  403c84:	af00      	add	r7, sp, #0
  403c86:	6078      	str	r0, [r7, #4]
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);
  403c88:	2101      	movs	r1, #1
  403c8a:	6878      	ldr	r0, [r7, #4]
  403c8c:	4b03      	ldr	r3, [pc, #12]	; (403c9c <_spi_sync_enable+0x1c>)
  403c8e:	4798      	blx	r3

	return ERR_NONE;
  403c90:	2300      	movs	r3, #0
}
  403c92:	4618      	mov	r0, r3
  403c94:	3708      	adds	r7, #8
  403c96:	46bd      	mov	sp, r7
  403c98:	bd80      	pop	{r7, pc}
  403c9a:	bf00      	nop
  403c9c:	00403c3b 	.word	0x00403c3b

00403ca0 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
  403ca0:	b580      	push	{r7, lr}
  403ca2:	b082      	sub	sp, #8
  403ca4:	af00      	add	r7, sp, #0
  403ca6:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
  403ca8:	6878      	ldr	r0, [r7, #4]
  403caa:	4b07      	ldr	r3, [pc, #28]	; (403cc8 <_spi_async_enable+0x28>)
  403cac:	4798      	blx	r3
	NVIC_EnableIRQ(_spi_get_irq_num(hw));
  403cae:	6878      	ldr	r0, [r7, #4]
  403cb0:	4b06      	ldr	r3, [pc, #24]	; (403ccc <_spi_async_enable+0x2c>)
  403cb2:	4798      	blx	r3
  403cb4:	4603      	mov	r3, r0
  403cb6:	4618      	mov	r0, r3
  403cb8:	4b05      	ldr	r3, [pc, #20]	; (403cd0 <_spi_async_enable+0x30>)
  403cba:	4798      	blx	r3

	return ERR_NONE;
  403cbc:	2300      	movs	r3, #0
}
  403cbe:	4618      	mov	r0, r3
  403cc0:	3708      	adds	r7, #8
  403cc2:	46bd      	mov	sp, r7
  403cc4:	bd80      	pop	{r7, pc}
  403cc6:	bf00      	nop
  403cc8:	00403c81 	.word	0x00403c81
  403ccc:	00403c59 	.word	0x00403c59
  403cd0:	00403ae9 	.word	0x00403ae9

00403cd4 <_spi_set_mode>:
 * \param[in] mode The mode to set
 *
 * \return Setting mode status
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
  403cd4:	b580      	push	{r7, lr}
  403cd6:	b084      	sub	sp, #16
  403cd8:	af00      	add	r7, sp, #0
  403cda:	6078      	str	r0, [r7, #4]
  403cdc:	460b      	mov	r3, r1
  403cde:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;

	temp = hri_spi_read_CSR_reg(hw, 0);
  403ce0:	2100      	movs	r1, #0
  403ce2:	6878      	ldr	r0, [r7, #4]
  403ce4:	4b11      	ldr	r3, [pc, #68]	; (403d2c <_spi_set_mode+0x58>)
  403ce6:	4798      	blx	r3
  403ce8:	60f8      	str	r0, [r7, #12]
	temp &= ~(SPI_CSR_CPOL | SPI_CSR_NCPHA);
  403cea:	68fb      	ldr	r3, [r7, #12]
  403cec:	f023 0303 	bic.w	r3, r3, #3
  403cf0:	60fb      	str	r3, [r7, #12]
	temp |= (~(mode & 0x01u)) & 0x01u;
  403cf2:	78fb      	ldrb	r3, [r7, #3]
  403cf4:	f003 0301 	and.w	r3, r3, #1
  403cf8:	2b00      	cmp	r3, #0
  403cfa:	bf0c      	ite	eq
  403cfc:	2301      	moveq	r3, #1
  403cfe:	2300      	movne	r3, #0
  403d00:	b2db      	uxtb	r3, r3
  403d02:	461a      	mov	r2, r3
  403d04:	68fb      	ldr	r3, [r7, #12]
  403d06:	4313      	orrs	r3, r2
  403d08:	60fb      	str	r3, [r7, #12]
	temp |= (mode & 0x02u) << 0;
  403d0a:	78fb      	ldrb	r3, [r7, #3]
  403d0c:	f003 0302 	and.w	r3, r3, #2
  403d10:	68fa      	ldr	r2, [r7, #12]
  403d12:	4313      	orrs	r3, r2
  403d14:	60fb      	str	r3, [r7, #12]
	hri_spi_write_CSR_reg(hw, 0, temp);
  403d16:	68fa      	ldr	r2, [r7, #12]
  403d18:	2100      	movs	r1, #0
  403d1a:	6878      	ldr	r0, [r7, #4]
  403d1c:	4b04      	ldr	r3, [pc, #16]	; (403d30 <_spi_set_mode+0x5c>)
  403d1e:	4798      	blx	r3

	return ERR_NONE;
  403d20:	2300      	movs	r3, #0
}
  403d22:	4618      	mov	r0, r3
  403d24:	3710      	adds	r7, #16
  403d26:	46bd      	mov	sp, r7
  403d28:	bd80      	pop	{r7, pc}
  403d2a:	bf00      	nop
  403d2c:	00403c19 	.word	0x00403c19
  403d30:	00403bf3 	.word	0x00403bf3

00403d34 <_spi_set_baudrate>:
 * \param[in] baud_val The baudrate to set
 *
 * \return Setting baudrate status
 */
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
  403d34:	b580      	push	{r7, lr}
  403d36:	b082      	sub	sp, #8
  403d38:	af00      	add	r7, sp, #0
  403d3a:	6078      	str	r0, [r7, #4]
  403d3c:	6039      	str	r1, [r7, #0]
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);
  403d3e:	683b      	ldr	r3, [r7, #0]
  403d40:	b2db      	uxtb	r3, r3
  403d42:	461a      	mov	r2, r3
  403d44:	2100      	movs	r1, #0
  403d46:	6878      	ldr	r0, [r7, #4]
  403d48:	4b03      	ldr	r3, [pc, #12]	; (403d58 <_spi_set_baudrate+0x24>)
  403d4a:	4798      	blx	r3

	return ERR_NONE;
  403d4c:	2300      	movs	r3, #0
}
  403d4e:	4618      	mov	r0, r3
  403d50:	3708      	adds	r7, #8
  403d52:	46bd      	mov	sp, r7
  403d54:	bd80      	pop	{r7, pc}
  403d56:	bf00      	nop
  403d58:	00403bad 	.word	0x00403bad

00403d5c <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
  403d5c:	b480      	push	{r7}
  403d5e:	b085      	sub	sp, #20
  403d60:	af00      	add	r7, sp, #0
  403d62:	6078      	str	r0, [r7, #4]

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  403d64:	687a      	ldr	r2, [r7, #4]
  403d66:	4b08      	ldr	r3, [pc, #32]	; (403d88 <_spi_get_hardware_index+0x2c>)
  403d68:	4413      	add	r3, r2
  403d6a:	0c1b      	lsrs	r3, r3, #16
  403d6c:	73fb      	strb	r3, [r7, #15]

	if (index == 5) {
  403d6e:	7bfb      	ldrb	r3, [r7, #15]
  403d70:	2b05      	cmp	r3, #5
  403d72:	d101      	bne.n	403d78 <_spi_get_hardware_index+0x1c>
		return 1;
  403d74:	2301      	movs	r3, #1
  403d76:	e000      	b.n	403d7a <_spi_get_hardware_index+0x1e>
	} else {
		return 0;
  403d78:	2300      	movs	r3, #0
	}
}
  403d7a:	4618      	mov	r0, r3
  403d7c:	3714      	adds	r7, #20
  403d7e:	46bd      	mov	sp, r7
  403d80:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d84:	4770      	bx	lr
  403d86:	bf00      	nop
  403d88:	bfff8000 	.word	0xbfff8000

00403d8c <_spi_get_tx_dma_channel>:
/** \brief Return the SPI TX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
  403d8c:	b580      	push	{r7, lr}
  403d8e:	b082      	sub	sp, #8
  403d90:	af00      	add	r7, sp, #0
  403d92:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  403d94:	6878      	ldr	r0, [r7, #4]
  403d96:	4b06      	ldr	r3, [pc, #24]	; (403db0 <_spi_get_tx_dma_channel+0x24>)
  403d98:	4798      	blx	r3
  403d9a:	4603      	mov	r3, r0
  403d9c:	2b00      	cmp	r3, #0
  403d9e:	d101      	bne.n	403da4 <_spi_get_tx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_TX_CHANNEL;
  403da0:	2302      	movs	r3, #2
  403da2:	e000      	b.n	403da6 <_spi_get_tx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_TX_CHANNEL;
  403da4:	2300      	movs	r3, #0
	}
}
  403da6:	4618      	mov	r0, r3
  403da8:	3708      	adds	r7, #8
  403daa:	46bd      	mov	sp, r7
  403dac:	bd80      	pop	{r7, pc}
  403dae:	bf00      	nop
  403db0:	00403d5d 	.word	0x00403d5d

00403db4 <_spi_get_rx_dma_channel>:
/** \brief Return the SPI RX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
  403db4:	b580      	push	{r7, lr}
  403db6:	b082      	sub	sp, #8
  403db8:	af00      	add	r7, sp, #0
  403dba:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  403dbc:	6878      	ldr	r0, [r7, #4]
  403dbe:	4b06      	ldr	r3, [pc, #24]	; (403dd8 <_spi_get_rx_dma_channel+0x24>)
  403dc0:	4798      	blx	r3
  403dc2:	4603      	mov	r3, r0
  403dc4:	2b00      	cmp	r3, #0
  403dc6:	d101      	bne.n	403dcc <_spi_get_rx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_RX_CHANNEL;
  403dc8:	2303      	movs	r3, #3
  403dca:	e000      	b.n	403dce <_spi_get_rx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_RX_CHANNEL;
  403dcc:	2301      	movs	r3, #1
	}
}
  403dce:	4618      	mov	r0, r3
  403dd0:	3708      	adds	r7, #8
  403dd2:	46bd      	mov	sp, r7
  403dd4:	bd80      	pop	{r7, pc}
  403dd6:	bf00      	nop
  403dd8:	00403d5d 	.word	0x00403d5d

00403ddc <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
  403ddc:	b580      	push	{r7, lr}
  403dde:	b084      	sub	sp, #16
  403de0:	af00      	add	r7, sp, #0
  403de2:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  403de4:	687b      	ldr	r3, [r7, #4]
  403de6:	4618      	mov	r0, r3
  403de8:	4b12      	ldr	r3, [pc, #72]	; (403e34 <_spi_get_regs+0x58>)
  403dea:	4798      	blx	r3
  403dec:	4603      	mov	r3, r0
  403dee:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  403df0:	2300      	movs	r3, #0
  403df2:	73fb      	strb	r3, [r7, #15]
  403df4:	e015      	b.n	403e22 <_spi_get_regs+0x46>
		if (spi_regs[i].number == n) {
  403df6:	7bfa      	ldrb	r2, [r7, #15]
  403df8:	490f      	ldr	r1, [pc, #60]	; (403e38 <_spi_get_regs+0x5c>)
  403dfa:	4613      	mov	r3, r2
  403dfc:	009b      	lsls	r3, r3, #2
  403dfe:	4413      	add	r3, r2
  403e00:	009b      	lsls	r3, r3, #2
  403e02:	440b      	add	r3, r1
  403e04:	781b      	ldrb	r3, [r3, #0]
  403e06:	7bba      	ldrb	r2, [r7, #14]
  403e08:	429a      	cmp	r2, r3
  403e0a:	d107      	bne.n	403e1c <_spi_get_regs+0x40>
			return &spi_regs[i];
  403e0c:	7bfa      	ldrb	r2, [r7, #15]
  403e0e:	4613      	mov	r3, r2
  403e10:	009b      	lsls	r3, r3, #2
  403e12:	4413      	add	r3, r2
  403e14:	009b      	lsls	r3, r3, #2
  403e16:	4a08      	ldr	r2, [pc, #32]	; (403e38 <_spi_get_regs+0x5c>)
  403e18:	4413      	add	r3, r2
  403e1a:	e006      	b.n	403e2a <_spi_get_regs+0x4e>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  403e1c:	7bfb      	ldrb	r3, [r7, #15]
  403e1e:	3301      	adds	r3, #1
  403e20:	73fb      	strb	r3, [r7, #15]
  403e22:	7bfb      	ldrb	r3, [r7, #15]
  403e24:	2b01      	cmp	r3, #1
  403e26:	d9e6      	bls.n	403df6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
  403e28:	2300      	movs	r3, #0
}
  403e2a:	4618      	mov	r0, r3
  403e2c:	3710      	adds	r7, #16
  403e2e:	46bd      	mov	sp, r7
  403e30:	bd80      	pop	{r7, pc}
  403e32:	bf00      	nop
  403e34:	00403d5d 	.word	0x00403d5d
  403e38:	004096a8 	.word	0x004096a8

00403e3c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
  403e3c:	b580      	push	{r7, lr}
  403e3e:	b084      	sub	sp, #16
  403e40:	af00      	add	r7, sp, #0
  403e42:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  403e44:	687b      	ldr	r3, [r7, #4]
  403e46:	689b      	ldr	r3, [r3, #8]
  403e48:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.rx) {
  403e4a:	68fb      	ldr	r3, [r7, #12]
  403e4c:	689b      	ldr	r3, [r3, #8]
  403e4e:	2b00      	cmp	r3, #0
  403e50:	d003      	beq.n	403e5a <_spi_dma_rx_complete+0x1e>
		dev->callbacks.rx(resource);
  403e52:	68fb      	ldr	r3, [r7, #12]
  403e54:	689b      	ldr	r3, [r3, #8]
  403e56:	6878      	ldr	r0, [r7, #4]
  403e58:	4798      	blx	r3
	}
}
  403e5a:	bf00      	nop
  403e5c:	3710      	adds	r7, #16
  403e5e:	46bd      	mov	sp, r7
  403e60:	bd80      	pop	{r7, pc}

00403e62 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
  403e62:	b580      	push	{r7, lr}
  403e64:	b084      	sub	sp, #16
  403e66:	af00      	add	r7, sp, #0
  403e68:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  403e6a:	687b      	ldr	r3, [r7, #4]
  403e6c:	689b      	ldr	r3, [r3, #8]
  403e6e:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.tx) {
  403e70:	68fb      	ldr	r3, [r7, #12]
  403e72:	685b      	ldr	r3, [r3, #4]
  403e74:	2b00      	cmp	r3, #0
  403e76:	d003      	beq.n	403e80 <_spi_dma_tx_complete+0x1e>
		dev->callbacks.tx(resource);
  403e78:	68fb      	ldr	r3, [r7, #12]
  403e7a:	685b      	ldr	r3, [r3, #4]
  403e7c:	6878      	ldr	r0, [r7, #4]
  403e7e:	4798      	blx	r3
	}
}
  403e80:	bf00      	nop
  403e82:	3710      	adds	r7, #16
  403e84:	46bd      	mov	sp, r7
  403e86:	bd80      	pop	{r7, pc}

00403e88 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
  403e88:	b580      	push	{r7, lr}
  403e8a:	b084      	sub	sp, #16
  403e8c:	af00      	add	r7, sp, #0
  403e8e:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  403e90:	687b      	ldr	r3, [r7, #4]
  403e92:	689b      	ldr	r3, [r3, #8]
  403e94:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.error) {
  403e96:	68fb      	ldr	r3, [r7, #12]
  403e98:	68db      	ldr	r3, [r3, #12]
  403e9a:	2b00      	cmp	r3, #0
  403e9c:	d003      	beq.n	403ea6 <_spi_dma_error_occured+0x1e>
		dev->callbacks.error(resource);
  403e9e:	68fb      	ldr	r3, [r7, #12]
  403ea0:	68db      	ldr	r3, [r3, #12]
  403ea2:	6878      	ldr	r0, [r7, #4]
  403ea4:	4798      	blx	r3
	}
}
  403ea6:	bf00      	nop
  403ea8:	3710      	adds	r7, #16
  403eaa:	46bd      	mov	sp, r7
  403eac:	bd80      	pop	{r7, pc}

00403eae <_spi_m_get_source_for_dma>:

static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
  403eae:	b480      	push	{r7}
  403eb0:	b083      	sub	sp, #12
  403eb2:	af00      	add	r7, sp, #0
  403eb4:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_RDR);
  403eb6:	687b      	ldr	r3, [r7, #4]
  403eb8:	3308      	adds	r3, #8
}
  403eba:	4618      	mov	r0, r3
  403ebc:	370c      	adds	r7, #12
  403ebe:	46bd      	mov	sp, r7
  403ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ec4:	4770      	bx	lr

00403ec6 <_spi_m_get_destination_for_dma>:

static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
  403ec6:	b480      	push	{r7}
  403ec8:	b083      	sub	sp, #12
  403eca:	af00      	add	r7, sp, #0
  403ecc:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_TDR);
  403ece:	687b      	ldr	r3, [r7, #4]
  403ed0:	330c      	adds	r3, #12
}
  403ed2:	4618      	mov	r0, r3
  403ed4:	370c      	adds	r7, #12
  403ed6:	46bd      	mov	sp, r7
  403ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403edc:	4770      	bx	lr
	...

00403ee0 <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
  403ee0:	b590      	push	{r4, r7, lr}
  403ee2:	b085      	sub	sp, #20
  403ee4:	af00      	add	r7, sp, #0
  403ee6:	6078      	str	r0, [r7, #4]
  403ee8:	6039      	str	r1, [r7, #0]
	struct _spi_m_dma_dev *    spid = dev;
  403eea:	687b      	ldr	r3, [r7, #4]
  403eec:	60fb      	str	r3, [r7, #12]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
  403eee:	683b      	ldr	r3, [r7, #0]
  403ef0:	4618      	mov	r0, r3
  403ef2:	4b34      	ldr	r3, [pc, #208]	; (403fc4 <_spi_m_dma_init+0xe4>)
  403ef4:	4798      	blx	r3
  403ef6:	60b8      	str	r0, [r7, #8]

	/* Do hardware initialize. */
	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  403ef8:	6838      	ldr	r0, [r7, #0]
  403efa:	4b33      	ldr	r3, [pc, #204]	; (403fc8 <_spi_m_dma_init+0xe8>)
  403efc:	4798      	blx	r3
  403efe:	4603      	mov	r3, r0
  403f00:	2b00      	cmp	r3, #0
  403f02:	d002      	beq.n	403f0a <_spi_m_dma_init+0x2a>
		return ERR_DENIED;
  403f04:	f06f 0310 	mvn.w	r3, #16
  403f08:	e057      	b.n	403fba <_spi_m_dma_init+0xda>
	}

	spid->prvt = hw;
  403f0a:	68fb      	ldr	r3, [r7, #12]
  403f0c:	683a      	ldr	r2, [r7, #0]
  403f0e:	601a      	str	r2, [r3, #0]
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
  403f10:	2180      	movs	r1, #128	; 0x80
  403f12:	6838      	ldr	r0, [r7, #0]
  403f14:	4b2d      	ldr	r3, [pc, #180]	; (403fcc <_spi_m_dma_init+0xec>)
  403f16:	4798      	blx	r3
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  403f18:	68bb      	ldr	r3, [r7, #8]
  403f1a:	685a      	ldr	r2, [r3, #4]
  403f1c:	4b2c      	ldr	r3, [pc, #176]	; (403fd0 <_spi_m_dma_init+0xf0>)
  403f1e:	4013      	ands	r3, r2
  403f20:	4619      	mov	r1, r3
  403f22:	6838      	ldr	r0, [r7, #0]
  403f24:	4b29      	ldr	r3, [pc, #164]	; (403fcc <_spi_m_dma_init+0xec>)
  403f26:	4798      	blx	r3
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  403f28:	68bb      	ldr	r3, [r7, #8]
  403f2a:	689a      	ldr	r2, [r3, #8]
  403f2c:	4b29      	ldr	r3, [pc, #164]	; (403fd4 <_spi_m_dma_init+0xf4>)
  403f2e:	4013      	ands	r3, r2
  403f30:	4a29      	ldr	r2, [pc, #164]	; (403fd8 <_spi_m_dma_init+0xf8>)
  403f32:	431a      	orrs	r2, r3
  403f34:	4611      	mov	r1, r2
  403f36:	6838      	ldr	r0, [r7, #0]
  403f38:	4b28      	ldr	r3, [pc, #160]	; (403fdc <_spi_m_dma_init+0xfc>)
  403f3a:	4798      	blx	r3
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  403f3c:	68bb      	ldr	r3, [r7, #8]
  403f3e:	68db      	ldr	r3, [r3, #12]
  403f40:	461a      	mov	r2, r3
  403f42:	2100      	movs	r1, #0
  403f44:	6838      	ldr	r0, [r7, #0]
  403f46:	4b26      	ldr	r3, [pc, #152]	; (403fe0 <_spi_m_dma_init+0x100>)
  403f48:	4798      	blx	r3

	/* Initialize callbacks: must use them */
	spid->callbacks.error = NULL;
  403f4a:	68fb      	ldr	r3, [r7, #12]
  403f4c:	2200      	movs	r2, #0
  403f4e:	60da      	str	r2, [r3, #12]
	spid->callbacks.rx    = NULL;
  403f50:	68fb      	ldr	r3, [r7, #12]
  403f52:	2200      	movs	r2, #0
  403f54:	609a      	str	r2, [r3, #8]
	spid->callbacks.tx    = NULL;
  403f56:	68fb      	ldr	r3, [r7, #12]
  403f58:	2200      	movs	r2, #0
  403f5a:	605a      	str	r2, [r3, #4]

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
  403f5c:	687b      	ldr	r3, [r7, #4]
  403f5e:	f103 0418 	add.w	r4, r3, #24
  403f62:	6838      	ldr	r0, [r7, #0]
  403f64:	4b1f      	ldr	r3, [pc, #124]	; (403fe4 <_spi_m_dma_init+0x104>)
  403f66:	4798      	blx	r3
  403f68:	4603      	mov	r3, r0
  403f6a:	4619      	mov	r1, r3
  403f6c:	4620      	mov	r0, r4
  403f6e:	4b1e      	ldr	r3, [pc, #120]	; (403fe8 <_spi_m_dma_init+0x108>)
  403f70:	4798      	blx	r3
	dev->resource->back                 = dev;
  403f72:	687b      	ldr	r3, [r7, #4]
  403f74:	699b      	ldr	r3, [r3, #24]
  403f76:	687a      	ldr	r2, [r7, #4]
  403f78:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
  403f7a:	687b      	ldr	r3, [r7, #4]
  403f7c:	699b      	ldr	r3, [r3, #24]
  403f7e:	4a1b      	ldr	r2, [pc, #108]	; (403fec <_spi_m_dma_init+0x10c>)
  403f80:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  403f82:	687b      	ldr	r3, [r7, #4]
  403f84:	699b      	ldr	r3, [r3, #24]
  403f86:	4a1a      	ldr	r2, [pc, #104]	; (403ff0 <_spi_m_dma_init+0x110>)
  403f88:	605a      	str	r2, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
  403f8a:	687b      	ldr	r3, [r7, #4]
  403f8c:	f103 0418 	add.w	r4, r3, #24
  403f90:	6838      	ldr	r0, [r7, #0]
  403f92:	4b18      	ldr	r3, [pc, #96]	; (403ff4 <_spi_m_dma_init+0x114>)
  403f94:	4798      	blx	r3
  403f96:	4603      	mov	r3, r0
  403f98:	4619      	mov	r1, r3
  403f9a:	4620      	mov	r0, r4
  403f9c:	4b12      	ldr	r3, [pc, #72]	; (403fe8 <_spi_m_dma_init+0x108>)
  403f9e:	4798      	blx	r3
	dev->resource->back                 = dev;
  403fa0:	687b      	ldr	r3, [r7, #4]
  403fa2:	699b      	ldr	r3, [r3, #24]
  403fa4:	687a      	ldr	r2, [r7, #4]
  403fa6:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
  403fa8:	687b      	ldr	r3, [r7, #4]
  403faa:	699b      	ldr	r3, [r3, #24]
  403fac:	4a12      	ldr	r2, [pc, #72]	; (403ff8 <_spi_m_dma_init+0x118>)
  403fae:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  403fb0:	687b      	ldr	r3, [r7, #4]
  403fb2:	699b      	ldr	r3, [r3, #24]
  403fb4:	4a0e      	ldr	r2, [pc, #56]	; (403ff0 <_spi_m_dma_init+0x110>)
  403fb6:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
  403fb8:	2300      	movs	r3, #0
}
  403fba:	4618      	mov	r0, r3
  403fbc:	3714      	adds	r7, #20
  403fbe:	46bd      	mov	sp, r7
  403fc0:	bd90      	pop	{r4, r7, pc}
  403fc2:	bf00      	nop
  403fc4:	00403ddd 	.word	0x00403ddd
  403fc8:	00403b25 	.word	0x00403b25
  403fcc:	00403c3b 	.word	0x00403c3b
  403fd0:	feffff7c 	.word	0xfeffff7c
  403fd4:	fff1ff6f 	.word	0xfff1ff6f
  403fd8:	000e0010 	.word	0x000e0010
  403fdc:	00403b4b 	.word	0x00403b4b
  403fe0:	00403bf3 	.word	0x00403bf3
  403fe4:	00403db5 	.word	0x00403db5
  403fe8:	00407b4d 	.word	0x00407b4d
  403fec:	00403e3d 	.word	0x00403e3d
  403ff0:	00403e89 	.word	0x00403e89
  403ff4:	00403d8d 	.word	0x00403d8d
  403ff8:	00403e63 	.word	0x00403e63

00403ffc <_spi_m_dma_enable>:
	ASSERT(dev && dev->prvt);

	return _spi_async_enable(dev->prvt);
}
int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
  403ffc:	b580      	push	{r7, lr}
  403ffe:	b082      	sub	sp, #8
  404000:	af00      	add	r7, sp, #0
  404002:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
  404004:	687b      	ldr	r3, [r7, #4]
  404006:	2b00      	cmp	r3, #0
  404008:	d005      	beq.n	404016 <_spi_m_dma_enable+0x1a>
  40400a:	687b      	ldr	r3, [r7, #4]
  40400c:	681b      	ldr	r3, [r3, #0]
  40400e:	2b00      	cmp	r3, #0
  404010:	d001      	beq.n	404016 <_spi_m_dma_enable+0x1a>
  404012:	2301      	movs	r3, #1
  404014:	e000      	b.n	404018 <_spi_m_dma_enable+0x1c>
  404016:	2300      	movs	r3, #0
  404018:	f003 0301 	and.w	r3, r3, #1
  40401c:	b2db      	uxtb	r3, r3
  40401e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
  404022:	4907      	ldr	r1, [pc, #28]	; (404040 <_spi_m_dma_enable+0x44>)
  404024:	4618      	mov	r0, r3
  404026:	4b07      	ldr	r3, [pc, #28]	; (404044 <_spi_m_dma_enable+0x48>)
  404028:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
  40402a:	687b      	ldr	r3, [r7, #4]
  40402c:	681b      	ldr	r3, [r3, #0]
  40402e:	4618      	mov	r0, r3
  404030:	4b05      	ldr	r3, [pc, #20]	; (404048 <_spi_m_dma_enable+0x4c>)
  404032:	4798      	blx	r3
  404034:	4603      	mov	r3, r0
}
  404036:	4618      	mov	r0, r3
  404038:	3708      	adds	r7, #8
  40403a:	46bd      	mov	sp, r7
  40403c:	bd80      	pop	{r7, pc}
  40403e:	bf00      	nop
  404040:	004096d0 	.word	0x004096d0
  404044:	004027fd 	.word	0x004027fd
  404048:	00403ca1 	.word	0x00403ca1

0040404c <_spi_m_dma_set_mode>:
	ASSERT(dev && dev->prvt);

	return _spi_set_mode(dev->prvt, mode);
}
int32_t _spi_m_dma_set_mode(struct _spi_m_dma_dev *dev, const enum spi_transfer_mode mode)
{
  40404c:	b580      	push	{r7, lr}
  40404e:	b082      	sub	sp, #8
  404050:	af00      	add	r7, sp, #0
  404052:	6078      	str	r0, [r7, #4]
  404054:	460b      	mov	r3, r1
  404056:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  404058:	687b      	ldr	r3, [r7, #4]
  40405a:	2b00      	cmp	r3, #0
  40405c:	d005      	beq.n	40406a <_spi_m_dma_set_mode+0x1e>
  40405e:	687b      	ldr	r3, [r7, #4]
  404060:	681b      	ldr	r3, [r3, #0]
  404062:	2b00      	cmp	r3, #0
  404064:	d001      	beq.n	40406a <_spi_m_dma_set_mode+0x1e>
  404066:	2301      	movs	r3, #1
  404068:	e000      	b.n	40406c <_spi_m_dma_set_mode+0x20>
  40406a:	2300      	movs	r3, #0
  40406c:	f003 0301 	and.w	r3, r3, #1
  404070:	b2db      	uxtb	r3, r3
  404072:	f44f 7208 	mov.w	r2, #544	; 0x220
  404076:	4908      	ldr	r1, [pc, #32]	; (404098 <_spi_m_dma_set_mode+0x4c>)
  404078:	4618      	mov	r0, r3
  40407a:	4b08      	ldr	r3, [pc, #32]	; (40409c <_spi_m_dma_set_mode+0x50>)
  40407c:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
  40407e:	687b      	ldr	r3, [r7, #4]
  404080:	681b      	ldr	r3, [r3, #0]
  404082:	78fa      	ldrb	r2, [r7, #3]
  404084:	4611      	mov	r1, r2
  404086:	4618      	mov	r0, r3
  404088:	4b05      	ldr	r3, [pc, #20]	; (4040a0 <_spi_m_dma_set_mode+0x54>)
  40408a:	4798      	blx	r3
  40408c:	4603      	mov	r3, r0
}
  40408e:	4618      	mov	r0, r3
  404090:	3708      	adds	r7, #8
  404092:	46bd      	mov	sp, r7
  404094:	bd80      	pop	{r7, pc}
  404096:	bf00      	nop
  404098:	004096d0 	.word	0x004096d0
  40409c:	004027fd 	.word	0x004027fd
  4040a0:	00403cd5 	.word	0x00403cd5

004040a4 <_spi_m_dma_set_baudrate>:
	ASSERT(dev && dev->prvt);

	return _spi_set_baudrate(dev->prvt, baud_val);
}
int32_t _spi_m_dma_set_baudrate(struct _spi_m_dma_dev *dev, const uint32_t baud_val)
{
  4040a4:	b580      	push	{r7, lr}
  4040a6:	b082      	sub	sp, #8
  4040a8:	af00      	add	r7, sp, #0
  4040aa:	6078      	str	r0, [r7, #4]
  4040ac:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->prvt);
  4040ae:	687b      	ldr	r3, [r7, #4]
  4040b0:	2b00      	cmp	r3, #0
  4040b2:	d005      	beq.n	4040c0 <_spi_m_dma_set_baudrate+0x1c>
  4040b4:	687b      	ldr	r3, [r7, #4]
  4040b6:	681b      	ldr	r3, [r3, #0]
  4040b8:	2b00      	cmp	r3, #0
  4040ba:	d001      	beq.n	4040c0 <_spi_m_dma_set_baudrate+0x1c>
  4040bc:	2301      	movs	r3, #1
  4040be:	e000      	b.n	4040c2 <_spi_m_dma_set_baudrate+0x1e>
  4040c0:	2300      	movs	r3, #0
  4040c2:	f003 0301 	and.w	r3, r3, #1
  4040c6:	b2db      	uxtb	r3, r3
  4040c8:	f240 2247 	movw	r2, #583	; 0x247
  4040cc:	4907      	ldr	r1, [pc, #28]	; (4040ec <_spi_m_dma_set_baudrate+0x48>)
  4040ce:	4618      	mov	r0, r3
  4040d0:	4b07      	ldr	r3, [pc, #28]	; (4040f0 <_spi_m_dma_set_baudrate+0x4c>)
  4040d2:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  4040d4:	687b      	ldr	r3, [r7, #4]
  4040d6:	681b      	ldr	r3, [r3, #0]
  4040d8:	6839      	ldr	r1, [r7, #0]
  4040da:	4618      	mov	r0, r3
  4040dc:	4b05      	ldr	r3, [pc, #20]	; (4040f4 <_spi_m_dma_set_baudrate+0x50>)
  4040de:	4798      	blx	r3
  4040e0:	4603      	mov	r3, r0
}
  4040e2:	4618      	mov	r0, r3
  4040e4:	3708      	adds	r7, #8
  4040e6:	46bd      	mov	sp, r7
  4040e8:	bd80      	pop	{r7, pc}
  4040ea:	bf00      	nop
  4040ec:	004096d0 	.word	0x004096d0
  4040f0:	004027fd 	.word	0x004027fd
  4040f4:	00403d35 	.word	0x00403d35

004040f8 <_spi_m_dma_set_char_size>:
	ASSERT(dev && dev->prvt);

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}
int32_t _spi_m_dma_set_char_size(struct _spi_m_dma_dev *dev, const enum spi_char_size char_size)
{
  4040f8:	b580      	push	{r7, lr}
  4040fa:	b082      	sub	sp, #8
  4040fc:	af00      	add	r7, sp, #0
  4040fe:	6078      	str	r0, [r7, #4]
  404100:	460b      	mov	r3, r1
  404102:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  404104:	687b      	ldr	r3, [r7, #4]
  404106:	2b00      	cmp	r3, #0
  404108:	d005      	beq.n	404116 <_spi_m_dma_set_char_size+0x1e>
  40410a:	687b      	ldr	r3, [r7, #4]
  40410c:	681b      	ldr	r3, [r3, #0]
  40410e:	2b00      	cmp	r3, #0
  404110:	d001      	beq.n	404116 <_spi_m_dma_set_char_size+0x1e>
  404112:	2301      	movs	r3, #1
  404114:	e000      	b.n	404118 <_spi_m_dma_set_char_size+0x20>
  404116:	2300      	movs	r3, #0
  404118:	f003 0301 	and.w	r3, r3, #1
  40411c:	b2db      	uxtb	r3, r3
  40411e:	f240 2272 	movw	r2, #626	; 0x272
  404122:	490a      	ldr	r1, [pc, #40]	; (40414c <_spi_m_dma_set_char_size+0x54>)
  404124:	4618      	mov	r0, r3
  404126:	4b0a      	ldr	r3, [pc, #40]	; (404150 <_spi_m_dma_set_char_size+0x58>)
  404128:	4798      	blx	r3

	hri_spi_write_CSR_BITS_bf(dev->prvt, 0, char_size);
  40412a:	687b      	ldr	r3, [r7, #4]
  40412c:	681b      	ldr	r3, [r3, #0]
  40412e:	78fa      	ldrb	r2, [r7, #3]
  404130:	2100      	movs	r1, #0
  404132:	4618      	mov	r0, r3
  404134:	4b07      	ldr	r3, [pc, #28]	; (404154 <_spi_m_dma_set_char_size+0x5c>)
  404136:	4798      	blx	r3

	return (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
  404138:	78fb      	ldrb	r3, [r7, #3]
  40413a:	2b00      	cmp	r3, #0
  40413c:	d101      	bne.n	404142 <_spi_m_dma_set_char_size+0x4a>
  40413e:	2301      	movs	r3, #1
  404140:	e000      	b.n	404144 <_spi_m_dma_set_char_size+0x4c>
  404142:	2302      	movs	r3, #2
}
  404144:	4618      	mov	r0, r3
  404146:	3708      	adds	r7, #8
  404148:	46bd      	mov	sp, r7
  40414a:	bd80      	pop	{r7, pc}
  40414c:	004096d0 	.word	0x004096d0
  404150:	004027fd 	.word	0x004027fd
  404154:	00403b67 	.word	0x00403b67

00404158 <_spi_m_dma_register_callback>:
                                const bool state)
{
	_spi_m_async_set_irq_state(device, type, state);
}
void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
  404158:	b580      	push	{r7, lr}
  40415a:	b084      	sub	sp, #16
  40415c:	af00      	add	r7, sp, #0
  40415e:	60f8      	str	r0, [r7, #12]
  404160:	460b      	mov	r3, r1
  404162:	607a      	str	r2, [r7, #4]
  404164:	72fb      	strb	r3, [r7, #11]
	switch (type) {
  404166:	7afb      	ldrb	r3, [r7, #11]
  404168:	2b03      	cmp	r3, #3
  40416a:	d85c      	bhi.n	404226 <_spi_m_dma_register_callback+0xce>
  40416c:	a201      	add	r2, pc, #4	; (adr r2, 404174 <_spi_m_dma_register_callback+0x1c>)
  40416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404172:	bf00      	nop
  404174:	00404185 	.word	0x00404185
  404178:	004041af 	.word	0x004041af
  40417c:	004041d9 	.word	0x004041d9
  404180:	00404225 	.word	0x00404225
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
  404184:	68fb      	ldr	r3, [r7, #12]
  404186:	687a      	ldr	r2, [r7, #4]
  404188:	605a      	str	r2, [r3, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  40418a:	68fb      	ldr	r3, [r7, #12]
  40418c:	681b      	ldr	r3, [r3, #0]
  40418e:	4618      	mov	r0, r3
  404190:	4b27      	ldr	r3, [pc, #156]	; (404230 <_spi_m_dma_register_callback+0xd8>)
  404192:	4798      	blx	r3
  404194:	4603      	mov	r3, r0
  404196:	4618      	mov	r0, r3
  404198:	687b      	ldr	r3, [r7, #4]
  40419a:	2b00      	cmp	r3, #0
  40419c:	bf14      	ite	ne
  40419e:	2301      	movne	r3, #1
  4041a0:	2300      	moveq	r3, #0
  4041a2:	b2db      	uxtb	r3, r3
  4041a4:	461a      	mov	r2, r3
  4041a6:	2100      	movs	r1, #0
  4041a8:	4b22      	ldr	r3, [pc, #136]	; (404234 <_spi_m_dma_register_callback+0xdc>)
  4041aa:	4798      	blx	r3
		break;
  4041ac:	e03b      	b.n	404226 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
  4041ae:	68fb      	ldr	r3, [r7, #12]
  4041b0:	687a      	ldr	r2, [r7, #4]
  4041b2:	609a      	str	r2, [r3, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  4041b4:	68fb      	ldr	r3, [r7, #12]
  4041b6:	681b      	ldr	r3, [r3, #0]
  4041b8:	4618      	mov	r0, r3
  4041ba:	4b1f      	ldr	r3, [pc, #124]	; (404238 <_spi_m_dma_register_callback+0xe0>)
  4041bc:	4798      	blx	r3
  4041be:	4603      	mov	r3, r0
  4041c0:	4618      	mov	r0, r3
  4041c2:	687b      	ldr	r3, [r7, #4]
  4041c4:	2b00      	cmp	r3, #0
  4041c6:	bf14      	ite	ne
  4041c8:	2301      	movne	r3, #1
  4041ca:	2300      	moveq	r3, #0
  4041cc:	b2db      	uxtb	r3, r3
  4041ce:	461a      	mov	r2, r3
  4041d0:	2100      	movs	r1, #0
  4041d2:	4b18      	ldr	r3, [pc, #96]	; (404234 <_spi_m_dma_register_callback+0xdc>)
  4041d4:	4798      	blx	r3
		break;
  4041d6:	e026      	b.n	404226 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
  4041d8:	68fb      	ldr	r3, [r7, #12]
  4041da:	687a      	ldr	r2, [r7, #4]
  4041dc:	60da      	str	r2, [r3, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  4041de:	68fb      	ldr	r3, [r7, #12]
  4041e0:	681b      	ldr	r3, [r3, #0]
  4041e2:	4618      	mov	r0, r3
  4041e4:	4b14      	ldr	r3, [pc, #80]	; (404238 <_spi_m_dma_register_callback+0xe0>)
  4041e6:	4798      	blx	r3
  4041e8:	4603      	mov	r3, r0
  4041ea:	4618      	mov	r0, r3
  4041ec:	687b      	ldr	r3, [r7, #4]
  4041ee:	2b00      	cmp	r3, #0
  4041f0:	bf14      	ite	ne
  4041f2:	2301      	movne	r3, #1
  4041f4:	2300      	moveq	r3, #0
  4041f6:	b2db      	uxtb	r3, r3
  4041f8:	461a      	mov	r2, r3
  4041fa:	2101      	movs	r1, #1
  4041fc:	4b0d      	ldr	r3, [pc, #52]	; (404234 <_spi_m_dma_register_callback+0xdc>)
  4041fe:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  404200:	68fb      	ldr	r3, [r7, #12]
  404202:	681b      	ldr	r3, [r3, #0]
  404204:	4618      	mov	r0, r3
  404206:	4b0a      	ldr	r3, [pc, #40]	; (404230 <_spi_m_dma_register_callback+0xd8>)
  404208:	4798      	blx	r3
  40420a:	4603      	mov	r3, r0
  40420c:	4618      	mov	r0, r3
  40420e:	687b      	ldr	r3, [r7, #4]
  404210:	2b00      	cmp	r3, #0
  404212:	bf14      	ite	ne
  404214:	2301      	movne	r3, #1
  404216:	2300      	moveq	r3, #0
  404218:	b2db      	uxtb	r3, r3
  40421a:	461a      	mov	r2, r3
  40421c:	2101      	movs	r1, #1
  40421e:	4b05      	ldr	r3, [pc, #20]	; (404234 <_spi_m_dma_register_callback+0xdc>)
  404220:	4798      	blx	r3
		break;
  404222:	e000      	b.n	404226 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_N:
		break;
  404224:	bf00      	nop
	}
}
  404226:	bf00      	nop
  404228:	3710      	adds	r7, #16
  40422a:	46bd      	mov	sp, r7
  40422c:	bd80      	pop	{r7, pc}
  40422e:	bf00      	nop
  404230:	00403d8d 	.word	0x00403d8d
  404234:	00407b7d 	.word	0x00407b7d
  404238:	00403db5 	.word	0x00403db5

0040423c <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
  40423c:	b580      	push	{r7, lr}
  40423e:	b086      	sub	sp, #24
  404240:	af00      	add	r7, sp, #0
  404242:	60f8      	str	r0, [r7, #12]
  404244:	60b9      	str	r1, [r7, #8]
  404246:	607a      	str	r2, [r7, #4]
  404248:	807b      	strh	r3, [r7, #2]
	const struct spi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
  40424a:	68fb      	ldr	r3, [r7, #12]
  40424c:	681b      	ldr	r3, [r3, #0]
  40424e:	4618      	mov	r0, r3
  404250:	4b39      	ldr	r3, [pc, #228]	; (404338 <_spi_m_dma_transfer+0xfc>)
  404252:	4798      	blx	r3
  404254:	6178      	str	r0, [r7, #20]
	uint8_t                    rx_ch = _spi_get_rx_dma_channel(dev->prvt);
  404256:	68fb      	ldr	r3, [r7, #12]
  404258:	681b      	ldr	r3, [r3, #0]
  40425a:	4618      	mov	r0, r3
  40425c:	4b37      	ldr	r3, [pc, #220]	; (40433c <_spi_m_dma_transfer+0x100>)
  40425e:	4798      	blx	r3
  404260:	4603      	mov	r3, r0
  404262:	74fb      	strb	r3, [r7, #19]
	uint8_t                    tx_ch = _spi_get_tx_dma_channel(dev->prvt);
  404264:	68fb      	ldr	r3, [r7, #12]
  404266:	681b      	ldr	r3, [r3, #0]
  404268:	4618      	mov	r0, r3
  40426a:	4b35      	ldr	r3, [pc, #212]	; (404340 <_spi_m_dma_transfer+0x104>)
  40426c:	4798      	blx	r3
  40426e:	4603      	mov	r3, r0
  404270:	74bb      	strb	r3, [r7, #18]

	if (rxbuf) {
  404272:	687b      	ldr	r3, [r7, #4]
  404274:	2b00      	cmp	r3, #0
  404276:	d01b      	beq.n	4042b0 <_spi_m_dma_transfer+0x74>
		/* Enable spi rx */
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
  404278:	68fb      	ldr	r3, [r7, #12]
  40427a:	681b      	ldr	r3, [r3, #0]
  40427c:	4618      	mov	r0, r3
  40427e:	4b31      	ldr	r3, [pc, #196]	; (404344 <_spi_m_dma_transfer+0x108>)
  404280:	4798      	blx	r3
  404282:	4603      	mov	r3, r0
  404284:	461a      	mov	r2, r3
  404286:	7cfb      	ldrb	r3, [r7, #19]
  404288:	4611      	mov	r1, r2
  40428a:	4618      	mov	r0, r3
  40428c:	4b2e      	ldr	r3, [pc, #184]	; (404348 <_spi_m_dma_transfer+0x10c>)
  40428e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
  404290:	7cfb      	ldrb	r3, [r7, #19]
  404292:	6879      	ldr	r1, [r7, #4]
  404294:	4618      	mov	r0, r3
  404296:	4b2d      	ldr	r3, [pc, #180]	; (40434c <_spi_m_dma_transfer+0x110>)
  404298:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
  40429a:	887a      	ldrh	r2, [r7, #2]
  40429c:	7cfb      	ldrb	r3, [r7, #19]
  40429e:	4611      	mov	r1, r2
  4042a0:	4618      	mov	r0, r3
  4042a2:	4b2b      	ldr	r3, [pc, #172]	; (404350 <_spi_m_dma_transfer+0x114>)
  4042a4:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
  4042a6:	7cfb      	ldrb	r3, [r7, #19]
  4042a8:	2100      	movs	r1, #0
  4042aa:	4618      	mov	r0, r3
  4042ac:	4b29      	ldr	r3, [pc, #164]	; (404354 <_spi_m_dma_transfer+0x118>)
  4042ae:	4798      	blx	r3
	}

	if (txbuf) {
  4042b0:	68bb      	ldr	r3, [r7, #8]
  4042b2:	2b00      	cmp	r3, #0
  4042b4:	d017      	beq.n	4042e6 <_spi_m_dma_transfer+0xaa>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
  4042b6:	7cbb      	ldrb	r3, [r7, #18]
  4042b8:	68b9      	ldr	r1, [r7, #8]
  4042ba:	4618      	mov	r0, r3
  4042bc:	4b22      	ldr	r3, [pc, #136]	; (404348 <_spi_m_dma_transfer+0x10c>)
  4042be:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  4042c0:	68fb      	ldr	r3, [r7, #12]
  4042c2:	681b      	ldr	r3, [r3, #0]
  4042c4:	4618      	mov	r0, r3
  4042c6:	4b24      	ldr	r3, [pc, #144]	; (404358 <_spi_m_dma_transfer+0x11c>)
  4042c8:	4798      	blx	r3
  4042ca:	4603      	mov	r3, r0
  4042cc:	461a      	mov	r2, r3
  4042ce:	7cbb      	ldrb	r3, [r7, #18]
  4042d0:	4611      	mov	r1, r2
  4042d2:	4618      	mov	r0, r3
  4042d4:	4b1d      	ldr	r3, [pc, #116]	; (40434c <_spi_m_dma_transfer+0x110>)
  4042d6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  4042d8:	887a      	ldrh	r2, [r7, #2]
  4042da:	7cbb      	ldrb	r3, [r7, #18]
  4042dc:	4611      	mov	r1, r2
  4042de:	4618      	mov	r0, r3
  4042e0:	4b1b      	ldr	r3, [pc, #108]	; (404350 <_spi_m_dma_transfer+0x114>)
  4042e2:	4798      	blx	r3
  4042e4:	e01e      	b.n	404324 <_spi_m_dma_transfer+0xe8>
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
  4042e6:	697b      	ldr	r3, [r7, #20]
  4042e8:	f103 0210 	add.w	r2, r3, #16
  4042ec:	7cbb      	ldrb	r3, [r7, #18]
  4042ee:	4611      	mov	r1, r2
  4042f0:	4618      	mov	r0, r3
  4042f2:	4b15      	ldr	r3, [pc, #84]	; (404348 <_spi_m_dma_transfer+0x10c>)
  4042f4:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  4042f6:	68fb      	ldr	r3, [r7, #12]
  4042f8:	681b      	ldr	r3, [r3, #0]
  4042fa:	4618      	mov	r0, r3
  4042fc:	4b16      	ldr	r3, [pc, #88]	; (404358 <_spi_m_dma_transfer+0x11c>)
  4042fe:	4798      	blx	r3
  404300:	4603      	mov	r3, r0
  404302:	461a      	mov	r2, r3
  404304:	7cbb      	ldrb	r3, [r7, #18]
  404306:	4611      	mov	r1, r2
  404308:	4618      	mov	r0, r3
  40430a:	4b10      	ldr	r3, [pc, #64]	; (40434c <_spi_m_dma_transfer+0x110>)
  40430c:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
  40430e:	7cbb      	ldrb	r3, [r7, #18]
  404310:	2100      	movs	r1, #0
  404312:	4618      	mov	r0, r3
  404314:	4b11      	ldr	r3, [pc, #68]	; (40435c <_spi_m_dma_transfer+0x120>)
  404316:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  404318:	887a      	ldrh	r2, [r7, #2]
  40431a:	7cbb      	ldrb	r3, [r7, #18]
  40431c:	4611      	mov	r1, r2
  40431e:	4618      	mov	r0, r3
  404320:	4b0b      	ldr	r3, [pc, #44]	; (404350 <_spi_m_dma_transfer+0x114>)
  404322:	4798      	blx	r3
	}
	_dma_enable_transaction(tx_ch, false);
  404324:	7cbb      	ldrb	r3, [r7, #18]
  404326:	2100      	movs	r1, #0
  404328:	4618      	mov	r0, r3
  40432a:	4b0a      	ldr	r3, [pc, #40]	; (404354 <_spi_m_dma_transfer+0x118>)
  40432c:	4798      	blx	r3

	return ERR_NONE;
  40432e:	2300      	movs	r3, #0
}
  404330:	4618      	mov	r0, r3
  404332:	3718      	adds	r7, #24
  404334:	46bd      	mov	sp, r7
  404336:	bd80      	pop	{r7, pc}
  404338:	00403ddd 	.word	0x00403ddd
  40433c:	00403db5 	.word	0x00403db5
  404340:	00403d8d 	.word	0x00403d8d
  404344:	00403eaf 	.word	0x00403eaf
  404348:	00407a21 	.word	0x00407a21
  40434c:	004079f5 	.word	0x004079f5
  404350:	00407abd 	.word	0x00407abd
  404354:	00407b01 	.word	0x00407b01
  404358:	00403ec7 	.word	0x00403ec7
  40435c:	00407a4d 	.word	0x00407a4d

00404360 <hri_twihs_get_SR_TXCOMP_bit>:
{
	((Twihs *)hw)->TWIHS_IDR = mask;
}

static inline bool hri_twihs_get_SR_TXCOMP_bit(const void *const hw)
{
  404360:	b480      	push	{r7}
  404362:	b083      	sub	sp, #12
  404364:	af00      	add	r7, sp, #0
  404366:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  404368:	687b      	ldr	r3, [r7, #4]
  40436a:	6a1b      	ldr	r3, [r3, #32]
  40436c:	f003 0301 	and.w	r3, r3, #1
  404370:	2b00      	cmp	r3, #0
  404372:	bf14      	ite	ne
  404374:	2301      	movne	r3, #1
  404376:	2300      	moveq	r3, #0
  404378:	b2db      	uxtb	r3, r3
}
  40437a:	4618      	mov	r0, r3
  40437c:	370c      	adds	r7, #12
  40437e:	46bd      	mov	sp, r7
  404380:	f85d 7b04 	ldr.w	r7, [sp], #4
  404384:	4770      	bx	lr

00404386 <hri_twihs_get_SR_RXRDY_bit>:

static inline bool hri_twihs_get_SR_RXRDY_bit(const void *const hw)
{
  404386:	b480      	push	{r7}
  404388:	b083      	sub	sp, #12
  40438a:	af00      	add	r7, sp, #0
  40438c:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  40438e:	687b      	ldr	r3, [r7, #4]
  404390:	6a1b      	ldr	r3, [r3, #32]
  404392:	f003 0302 	and.w	r3, r3, #2
  404396:	2b00      	cmp	r3, #0
  404398:	bf14      	ite	ne
  40439a:	2301      	movne	r3, #1
  40439c:	2300      	moveq	r3, #0
  40439e:	b2db      	uxtb	r3, r3
}
  4043a0:	4618      	mov	r0, r3
  4043a2:	370c      	adds	r7, #12
  4043a4:	46bd      	mov	sp, r7
  4043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043aa:	4770      	bx	lr

004043ac <hri_twihs_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_sr_reg_t hri_twihs_read_SR_reg(const void *const hw)
{
  4043ac:	b480      	push	{r7}
  4043ae:	b083      	sub	sp, #12
  4043b0:	af00      	add	r7, sp, #0
  4043b2:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_SR;
  4043b4:	687b      	ldr	r3, [r7, #4]
  4043b6:	6a1b      	ldr	r3, [r3, #32]
}
  4043b8:	4618      	mov	r0, r3
  4043ba:	370c      	adds	r7, #12
  4043bc:	46bd      	mov	sp, r7
  4043be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043c2:	4770      	bx	lr

004043c4 <hri_twihs_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_rhr_reg_t hri_twihs_read_RHR_reg(const void *const hw)
{
  4043c4:	b480      	push	{r7}
  4043c6:	b083      	sub	sp, #12
  4043c8:	af00      	add	r7, sp, #0
  4043ca:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_RHR;
  4043cc:	687b      	ldr	r3, [r7, #4]
  4043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4043d0:	4618      	mov	r0, r3
  4043d2:	370c      	adds	r7, #12
  4043d4:	46bd      	mov	sp, r7
  4043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043da:	4770      	bx	lr

004043dc <hri_twihs_write_MMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_MMR_reg(const void *const hw, hri_twihs_mmr_reg_t data)
{
  4043dc:	b480      	push	{r7}
  4043de:	b083      	sub	sp, #12
  4043e0:	af00      	add	r7, sp, #0
  4043e2:	6078      	str	r0, [r7, #4]
  4043e4:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_MMR = data;
  4043e6:	687b      	ldr	r3, [r7, #4]
  4043e8:	683a      	ldr	r2, [r7, #0]
  4043ea:	605a      	str	r2, [r3, #4]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4043ec:	bf00      	nop
  4043ee:	370c      	adds	r7, #12
  4043f0:	46bd      	mov	sp, r7
  4043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043f6:	4770      	bx	lr

004043f8 <hri_twihs_write_IADR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_IADR_reg(const void *const hw, hri_twihs_iadr_reg_t data)
{
  4043f8:	b480      	push	{r7}
  4043fa:	b083      	sub	sp, #12
  4043fc:	af00      	add	r7, sp, #0
  4043fe:	6078      	str	r0, [r7, #4]
  404400:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_IADR = data;
  404402:	687b      	ldr	r3, [r7, #4]
  404404:	683a      	ldr	r2, [r7, #0]
  404406:	60da      	str	r2, [r3, #12]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404408:	bf00      	nop
  40440a:	370c      	adds	r7, #12
  40440c:	46bd      	mov	sp, r7
  40440e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404412:	4770      	bx	lr

00404414 <hri_twihs_write_CWGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_CWGR_reg(const void *const hw, hri_twihs_cwgr_reg_t data)
{
  404414:	b480      	push	{r7}
  404416:	b083      	sub	sp, #12
  404418:	af00      	add	r7, sp, #0
  40441a:	6078      	str	r0, [r7, #4]
  40441c:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CWGR = data;
  40441e:	687b      	ldr	r3, [r7, #4]
  404420:	683a      	ldr	r2, [r7, #0]
  404422:	611a      	str	r2, [r3, #16]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404424:	bf00      	nop
  404426:	370c      	adds	r7, #12
  404428:	46bd      	mov	sp, r7
  40442a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40442e:	4770      	bx	lr

00404430 <hri_twihs_write_SMBTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_SMBTR_reg(const void *const hw, hri_twihs_smbtr_reg_t data)
{
  404430:	b480      	push	{r7}
  404432:	b083      	sub	sp, #12
  404434:	af00      	add	r7, sp, #0
  404436:	6078      	str	r0, [r7, #4]
  404438:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_SMBTR = data;
  40443a:	687b      	ldr	r3, [r7, #4]
  40443c:	683a      	ldr	r2, [r7, #0]
  40443e:	639a      	str	r2, [r3, #56]	; 0x38
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404440:	bf00      	nop
  404442:	370c      	adds	r7, #12
  404444:	46bd      	mov	sp, r7
  404446:	f85d 7b04 	ldr.w	r7, [sp], #4
  40444a:	4770      	bx	lr

0040444c <hri_twihs_write_FILTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_FILTR_reg(const void *const hw, hri_twihs_filtr_reg_t data)
{
  40444c:	b480      	push	{r7}
  40444e:	b083      	sub	sp, #12
  404450:	af00      	add	r7, sp, #0
  404452:	6078      	str	r0, [r7, #4]
  404454:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_FILTR = data;
  404456:	687b      	ldr	r3, [r7, #4]
  404458:	683a      	ldr	r2, [r7, #0]
  40445a:	645a      	str	r2, [r3, #68]	; 0x44
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  40445c:	bf00      	nop
  40445e:	370c      	adds	r7, #12
  404460:	46bd      	mov	sp, r7
  404462:	f85d 7b04 	ldr.w	r7, [sp], #4
  404466:	4770      	bx	lr

00404468 <hri_twihs_write_CR_reg>:
{
	return ((Twihs *)hw)->TWIHS_WPMR;
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
  404468:	b480      	push	{r7}
  40446a:	b083      	sub	sp, #12
  40446c:	af00      	add	r7, sp, #0
  40446e:	6078      	str	r0, [r7, #4]
  404470:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  404472:	687b      	ldr	r3, [r7, #4]
  404474:	683a      	ldr	r2, [r7, #0]
  404476:	601a      	str	r2, [r3, #0]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404478:	bf00      	nop
  40447a:	370c      	adds	r7, #12
  40447c:	46bd      	mov	sp, r7
  40447e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404482:	4770      	bx	lr

00404484 <hri_twihs_write_THR_reg>:

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
  404484:	b480      	push	{r7}
  404486:	b083      	sub	sp, #12
  404488:	af00      	add	r7, sp, #0
  40448a:	6078      	str	r0, [r7, #4]
  40448c:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  40448e:	687b      	ldr	r3, [r7, #4]
  404490:	683a      	ldr	r2, [r7, #0]
  404492:	635a      	str	r2, [r3, #52]	; 0x34
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404494:	bf00      	nop
  404496:	370c      	adds	r7, #12
  404498:	46bd      	mov	sp, r7
  40449a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40449e:	4770      	bx	lr

004044a0 <_get_i2cm_sync_cfg>:

/**
 * \berif Retrieve I2C Master Sync configuration instance
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
  4044a0:	b480      	push	{r7}
  4044a2:	b085      	sub	sp, #20
  4044a4:	af00      	add	r7, sp, #0
  4044a6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4044a8:	2300      	movs	r3, #0
  4044aa:	73fb      	strb	r3, [r7, #15]
  4044ac:	e015      	b.n	4044da <_get_i2cm_sync_cfg+0x3a>
		if (_i2cm_sync_cfgs[i].hw == hw) {
  4044ae:	7bfa      	ldrb	r2, [r7, #15]
  4044b0:	490f      	ldr	r1, [pc, #60]	; (4044f0 <_get_i2cm_sync_cfg+0x50>)
  4044b2:	4613      	mov	r3, r2
  4044b4:	005b      	lsls	r3, r3, #1
  4044b6:	4413      	add	r3, r2
  4044b8:	00db      	lsls	r3, r3, #3
  4044ba:	440b      	add	r3, r1
  4044bc:	681a      	ldr	r2, [r3, #0]
  4044be:	687b      	ldr	r3, [r7, #4]
  4044c0:	429a      	cmp	r2, r3
  4044c2:	d107      	bne.n	4044d4 <_get_i2cm_sync_cfg+0x34>
			return &(_i2cm_sync_cfgs[i]);
  4044c4:	7bfa      	ldrb	r2, [r7, #15]
  4044c6:	4613      	mov	r3, r2
  4044c8:	005b      	lsls	r3, r3, #1
  4044ca:	4413      	add	r3, r2
  4044cc:	00db      	lsls	r3, r3, #3
  4044ce:	4a08      	ldr	r2, [pc, #32]	; (4044f0 <_get_i2cm_sync_cfg+0x50>)
  4044d0:	4413      	add	r3, r2
  4044d2:	e006      	b.n	4044e2 <_get_i2cm_sync_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  4044d4:	7bfb      	ldrb	r3, [r7, #15]
  4044d6:	3301      	adds	r3, #1
  4044d8:	73fb      	strb	r3, [r7, #15]
  4044da:	7bfb      	ldrb	r3, [r7, #15]
  4044dc:	2b01      	cmp	r3, #1
  4044de:	d9e6      	bls.n	4044ae <_get_i2cm_sync_cfg+0xe>
		}
	}
	return NULL;
  4044e0:	2300      	movs	r3, #0
}
  4044e2:	4618      	mov	r0, r3
  4044e4:	3714      	adds	r7, #20
  4044e6:	46bd      	mov	sp, r7
  4044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044ec:	4770      	bx	lr
  4044ee:	bf00      	nop
  4044f0:	004096e8 	.word	0x004096e8

004044f4 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  4044f4:	b580      	push	{r7, lr}
  4044f6:	b084      	sub	sp, #16
  4044f8:	af00      	add	r7, sp, #0
  4044fa:	6078      	str	r0, [r7, #4]
  4044fc:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
  4044fe:	687b      	ldr	r3, [r7, #4]
  404500:	2b00      	cmp	r3, #0
  404502:	d004      	beq.n	40450e <_i2c_m_sync_init+0x1a>
  404504:	683b      	ldr	r3, [r7, #0]
  404506:	2b00      	cmp	r3, #0
  404508:	d001      	beq.n	40450e <_i2c_m_sync_init+0x1a>
  40450a:	2301      	movs	r3, #1
  40450c:	e000      	b.n	404510 <_i2c_m_sync_init+0x1c>
  40450e:	2300      	movs	r3, #0
  404510:	f003 0301 	and.w	r3, r3, #1
  404514:	b2db      	uxtb	r3, r3
  404516:	227e      	movs	r2, #126	; 0x7e
  404518:	4918      	ldr	r1, [pc, #96]	; (40457c <_i2c_m_sync_init+0x88>)
  40451a:	4618      	mov	r0, r3
  40451c:	4b18      	ldr	r3, [pc, #96]	; (404580 <_i2c_m_sync_init+0x8c>)
  40451e:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  404520:	687b      	ldr	r3, [r7, #4]
  404522:	683a      	ldr	r2, [r7, #0]
  404524:	611a      	str	r2, [r3, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  404526:	687b      	ldr	r3, [r7, #4]
  404528:	691b      	ldr	r3, [r3, #16]
  40452a:	4618      	mov	r0, r3
  40452c:	4b15      	ldr	r3, [pc, #84]	; (404584 <_i2c_m_sync_init+0x90>)
  40452e:	4798      	blx	r3
  404530:	60f8      	str	r0, [r7, #12]

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  404532:	687b      	ldr	r3, [r7, #4]
  404534:	691a      	ldr	r2, [r3, #16]
  404536:	68fb      	ldr	r3, [r7, #12]
  404538:	685b      	ldr	r3, [r3, #4]
  40453a:	4619      	mov	r1, r3
  40453c:	4610      	mov	r0, r2
  40453e:	4b12      	ldr	r3, [pc, #72]	; (404588 <_i2c_m_sync_init+0x94>)
  404540:	4798      	blx	r3
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  404542:	687b      	ldr	r3, [r7, #4]
  404544:	691a      	ldr	r2, [r3, #16]
  404546:	68fb      	ldr	r3, [r7, #12]
  404548:	689b      	ldr	r3, [r3, #8]
  40454a:	4619      	mov	r1, r3
  40454c:	4610      	mov	r0, r2
  40454e:	4b0f      	ldr	r3, [pc, #60]	; (40458c <_i2c_m_sync_init+0x98>)
  404550:	4798      	blx	r3
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  404552:	687b      	ldr	r3, [r7, #4]
  404554:	691a      	ldr	r2, [r3, #16]
  404556:	68fb      	ldr	r3, [r7, #12]
  404558:	68db      	ldr	r3, [r3, #12]
  40455a:	4619      	mov	r1, r3
  40455c:	4610      	mov	r0, r2
  40455e:	4b0c      	ldr	r3, [pc, #48]	; (404590 <_i2c_m_sync_init+0x9c>)
  404560:	4798      	blx	r3
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  404562:	687b      	ldr	r3, [r7, #4]
  404564:	691a      	ldr	r2, [r3, #16]
  404566:	68fb      	ldr	r3, [r7, #12]
  404568:	691b      	ldr	r3, [r3, #16]
  40456a:	4619      	mov	r1, r3
  40456c:	4610      	mov	r0, r2
  40456e:	4b09      	ldr	r3, [pc, #36]	; (404594 <_i2c_m_sync_init+0xa0>)
  404570:	4798      	blx	r3

	return ERR_NONE;
  404572:	2300      	movs	r3, #0
}
  404574:	4618      	mov	r0, r3
  404576:	3710      	adds	r7, #16
  404578:	46bd      	mov	sp, r7
  40457a:	bd80      	pop	{r7, pc}
  40457c:	00409718 	.word	0x00409718
  404580:	004027fd 	.word	0x004027fd
  404584:	004044a1 	.word	0x004044a1
  404588:	00404469 	.word	0x00404469
  40458c:	00404431 	.word	0x00404431
  404590:	0040444d 	.word	0x0040444d
  404594:	00404415 	.word	0x00404415

00404598 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404598:	b580      	push	{r7, lr}
  40459a:	b082      	sub	sp, #8
  40459c:	af00      	add	r7, sp, #0
  40459e:	6078      	str	r0, [r7, #4]
  4045a0:	6039      	str	r1, [r7, #0]
	ASSERT(dev && msg);
  4045a2:	687b      	ldr	r3, [r7, #4]
  4045a4:	2b00      	cmp	r3, #0
  4045a6:	d004      	beq.n	4045b2 <_i2c_m_sync_transfer+0x1a>
  4045a8:	683b      	ldr	r3, [r7, #0]
  4045aa:	2b00      	cmp	r3, #0
  4045ac:	d001      	beq.n	4045b2 <_i2c_m_sync_transfer+0x1a>
  4045ae:	2301      	movs	r3, #1
  4045b0:	e000      	b.n	4045b4 <_i2c_m_sync_transfer+0x1c>
  4045b2:	2300      	movs	r3, #0
  4045b4:	f003 0301 	and.w	r3, r3, #1
  4045b8:	b2db      	uxtb	r3, r3
  4045ba:	22c0      	movs	r2, #192	; 0xc0
  4045bc:	4911      	ldr	r1, [pc, #68]	; (404604 <_i2c_m_sync_transfer+0x6c>)
  4045be:	4618      	mov	r0, r3
  4045c0:	4b11      	ldr	r3, [pc, #68]	; (404608 <_i2c_m_sync_transfer+0x70>)
  4045c2:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  4045c4:	687b      	ldr	r3, [r7, #4]
  4045c6:	885b      	ldrh	r3, [r3, #2]
  4045c8:	b29b      	uxth	r3, r3
  4045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4045ce:	2b00      	cmp	r3, #0
  4045d0:	d002      	beq.n	4045d8 <_i2c_m_sync_transfer+0x40>
		return I2C_ERR_BUSY;
  4045d2:	f06f 0305 	mvn.w	r3, #5
  4045d6:	e011      	b.n	4045fc <_i2c_m_sync_transfer+0x64>
	}

	if (msg->flags & I2C_M_RD) {
  4045d8:	683b      	ldr	r3, [r7, #0]
  4045da:	885b      	ldrh	r3, [r3, #2]
  4045dc:	b29b      	uxth	r3, r3
  4045de:	f003 0301 	and.w	r3, r3, #1
  4045e2:	2b00      	cmp	r3, #0
  4045e4:	d005      	beq.n	4045f2 <_i2c_m_sync_transfer+0x5a>
		return _i2c_m_sync_read(dev, msg);
  4045e6:	6839      	ldr	r1, [r7, #0]
  4045e8:	6878      	ldr	r0, [r7, #4]
  4045ea:	4b08      	ldr	r3, [pc, #32]	; (40460c <_i2c_m_sync_transfer+0x74>)
  4045ec:	4798      	blx	r3
  4045ee:	4603      	mov	r3, r0
  4045f0:	e004      	b.n	4045fc <_i2c_m_sync_transfer+0x64>
	} else {
		return _i2c_m_sync_write(dev, msg);
  4045f2:	6839      	ldr	r1, [r7, #0]
  4045f4:	6878      	ldr	r0, [r7, #4]
  4045f6:	4b06      	ldr	r3, [pc, #24]	; (404610 <_i2c_m_sync_transfer+0x78>)
  4045f8:	4798      	blx	r3
  4045fa:	4603      	mov	r3, r0
	}
}
  4045fc:	4618      	mov	r0, r3
  4045fe:	3708      	adds	r7, #8
  404600:	46bd      	mov	sp, r7
  404602:	bd80      	pop	{r7, pc}
  404604:	00409718 	.word	0x00409718
  404608:	004027fd 	.word	0x004027fd
  40460c:	00404745 	.word	0x00404745
  404610:	00404615 	.word	0x00404615

00404614 <_i2c_m_sync_write>:

static inline int32_t _i2c_m_sync_write(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404614:	b580      	push	{r7, lr}
  404616:	b086      	sub	sp, #24
  404618:	af00      	add	r7, sp, #0
  40461a:	6078      	str	r0, [r7, #4]
  40461c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;
  40461e:	2300      	movs	r3, #0
  404620:	613b      	str	r3, [r7, #16]

	msg->flags |= I2C_M_BUSY;
  404622:	683b      	ldr	r3, [r7, #0]
  404624:	885b      	ldrh	r3, [r3, #2]
  404626:	b29b      	uxth	r3, r3
  404628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40462c:	b29a      	uxth	r2, r3
  40462e:	683b      	ldr	r3, [r7, #0]
  404630:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  404632:	683b      	ldr	r3, [r7, #0]
  404634:	881b      	ldrh	r3, [r3, #0]
  404636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40463a:	2b00      	cmp	r3, #0
  40463c:	d01b      	beq.n	404676 <_i2c_m_sync_write+0x62>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  40463e:	687b      	ldr	r3, [r7, #4]
  404640:	691a      	ldr	r2, [r3, #16]
  404642:	683b      	ldr	r3, [r7, #0]
  404644:	881b      	ldrh	r3, [r3, #0]
  404646:	0a1b      	lsrs	r3, r3, #8
  404648:	b29b      	uxth	r3, r3
  40464a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40464e:	b29b      	uxth	r3, r3
  404650:	041b      	lsls	r3, r3, #16
  404652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40465a:	4619      	mov	r1, r3
  40465c:	4610      	mov	r0, r2
  40465e:	4b33      	ldr	r3, [pc, #204]	; (40472c <_i2c_m_sync_write+0x118>)
  404660:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  404662:	687b      	ldr	r3, [r7, #4]
  404664:	691a      	ldr	r2, [r3, #16]
  404666:	683b      	ldr	r3, [r7, #0]
  404668:	881b      	ldrh	r3, [r3, #0]
  40466a:	b2db      	uxtb	r3, r3
  40466c:	4619      	mov	r1, r3
  40466e:	4610      	mov	r0, r2
  404670:	4b2f      	ldr	r3, [pc, #188]	; (404730 <_i2c_m_sync_write+0x11c>)
  404672:	4798      	blx	r3
  404674:	e00a      	b.n	40468c <_i2c_m_sync_write+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  404676:	687b      	ldr	r3, [r7, #4]
  404678:	691a      	ldr	r2, [r3, #16]
  40467a:	683b      	ldr	r3, [r7, #0]
  40467c:	881b      	ldrh	r3, [r3, #0]
  40467e:	041b      	lsls	r3, r3, #16
  404680:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404684:	4619      	mov	r1, r3
  404686:	4610      	mov	r0, r2
  404688:	4b28      	ldr	r3, [pc, #160]	; (40472c <_i2c_m_sync_write+0x118>)
  40468a:	4798      	blx	r3
	}

	for (i = 0; i < msg->len; i++) {
  40468c:	2300      	movs	r3, #0
  40468e:	617b      	str	r3, [r7, #20]
  404690:	e020      	b.n	4046d4 <_i2c_m_sync_write+0xc0>
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
  404692:	687b      	ldr	r3, [r7, #4]
  404694:	691b      	ldr	r3, [r3, #16]
  404696:	4618      	mov	r0, r3
  404698:	4b26      	ldr	r3, [pc, #152]	; (404734 <_i2c_m_sync_write+0x120>)
  40469a:	4798      	blx	r3
  40469c:	60f8      	str	r0, [r7, #12]
			if (sr & TWIHS_SR_NACK) {
  40469e:	68fb      	ldr	r3, [r7, #12]
  4046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4046a4:	2b00      	cmp	r3, #0
  4046a6:	d003      	beq.n	4046b0 <_i2c_m_sync_write+0x9c>
				ret = I2C_NACK;
  4046a8:	f06f 0301 	mvn.w	r3, #1
  4046ac:	613b      	str	r3, [r7, #16]
				break;
  4046ae:	e004      	b.n	4046ba <_i2c_m_sync_write+0xa6>
			}
		} while (!(sr & TWIHS_SR_TXRDY));
  4046b0:	68fb      	ldr	r3, [r7, #12]
  4046b2:	f003 0304 	and.w	r3, r3, #4
  4046b6:	2b00      	cmp	r3, #0
  4046b8:	d0eb      	beq.n	404692 <_i2c_m_sync_write+0x7e>

		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  4046ba:	687b      	ldr	r3, [r7, #4]
  4046bc:	6918      	ldr	r0, [r3, #16]
  4046be:	683b      	ldr	r3, [r7, #0]
  4046c0:	689a      	ldr	r2, [r3, #8]
  4046c2:	697b      	ldr	r3, [r7, #20]
  4046c4:	4413      	add	r3, r2
  4046c6:	781b      	ldrb	r3, [r3, #0]
  4046c8:	4619      	mov	r1, r3
  4046ca:	4b1b      	ldr	r3, [pc, #108]	; (404738 <_i2c_m_sync_write+0x124>)
  4046cc:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  4046ce:	697b      	ldr	r3, [r7, #20]
  4046d0:	3301      	adds	r3, #1
  4046d2:	617b      	str	r3, [r7, #20]
  4046d4:	683b      	ldr	r3, [r7, #0]
  4046d6:	685b      	ldr	r3, [r3, #4]
  4046d8:	461a      	mov	r2, r3
  4046da:	697b      	ldr	r3, [r7, #20]
  4046dc:	429a      	cmp	r2, r3
  4046de:	d8d8      	bhi.n	404692 <_i2c_m_sync_write+0x7e>
	}

	if (msg->flags & I2C_M_STOP) {
  4046e0:	683b      	ldr	r3, [r7, #0]
  4046e2:	885b      	ldrh	r3, [r3, #2]
  4046e4:	b29b      	uxth	r3, r3
  4046e6:	b21b      	sxth	r3, r3
  4046e8:	2b00      	cmp	r3, #0
  4046ea:	da11      	bge.n	404710 <_i2c_m_sync_write+0xfc>
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  4046ec:	687b      	ldr	r3, [r7, #4]
  4046ee:	691b      	ldr	r3, [r3, #16]
  4046f0:	2102      	movs	r1, #2
  4046f2:	4618      	mov	r0, r3
  4046f4:	4b11      	ldr	r3, [pc, #68]	; (40473c <_i2c_m_sync_write+0x128>)
  4046f6:	4798      	blx	r3
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  4046f8:	bf00      	nop
  4046fa:	687b      	ldr	r3, [r7, #4]
  4046fc:	691b      	ldr	r3, [r3, #16]
  4046fe:	4618      	mov	r0, r3
  404700:	4b0f      	ldr	r3, [pc, #60]	; (404740 <_i2c_m_sync_write+0x12c>)
  404702:	4798      	blx	r3
  404704:	4603      	mov	r3, r0
  404706:	f083 0301 	eor.w	r3, r3, #1
  40470a:	b2db      	uxtb	r3, r3
  40470c:	2b00      	cmp	r3, #0
  40470e:	d1f4      	bne.n	4046fa <_i2c_m_sync_write+0xe6>
		};
	}

	dev->service.msg.flags &= ~I2C_M_BUSY;
  404710:	687b      	ldr	r3, [r7, #4]
  404712:	885b      	ldrh	r3, [r3, #2]
  404714:	b29b      	uxth	r3, r3
  404716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40471a:	b29a      	uxth	r2, r3
  40471c:	687b      	ldr	r3, [r7, #4]
  40471e:	805a      	strh	r2, [r3, #2]

	return ret;
  404720:	693b      	ldr	r3, [r7, #16]
}
  404722:	4618      	mov	r0, r3
  404724:	3718      	adds	r7, #24
  404726:	46bd      	mov	sp, r7
  404728:	bd80      	pop	{r7, pc}
  40472a:	bf00      	nop
  40472c:	004043dd 	.word	0x004043dd
  404730:	004043f9 	.word	0x004043f9
  404734:	004043ad 	.word	0x004043ad
  404738:	00404485 	.word	0x00404485
  40473c:	00404469 	.word	0x00404469
  404740:	00404361 	.word	0x00404361

00404744 <_i2c_m_sync_read>:

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404744:	b590      	push	{r4, r7, lr}
  404746:	b085      	sub	sp, #20
  404748:	af00      	add	r7, sp, #0
  40474a:	6078      	str	r0, [r7, #4]
  40474c:	6039      	str	r1, [r7, #0]
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  40474e:	683b      	ldr	r3, [r7, #0]
  404750:	885b      	ldrh	r3, [r3, #2]
  404752:	b29b      	uxth	r3, r3
  404754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404758:	b29a      	uxth	r2, r3
  40475a:	683b      	ldr	r3, [r7, #0]
  40475c:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  40475e:	683b      	ldr	r3, [r7, #0]
  404760:	881b      	ldrh	r3, [r3, #0]
  404762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  404766:	2b00      	cmp	r3, #0
  404768:	d01b      	beq.n	4047a2 <_i2c_m_sync_read+0x5e>
		hri_twihs_write_MMR_reg(dev->hw,
  40476a:	687b      	ldr	r3, [r7, #4]
  40476c:	691a      	ldr	r2, [r3, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  40476e:	683b      	ldr	r3, [r7, #0]
  404770:	881b      	ldrh	r3, [r3, #0]
  404772:	0a1b      	lsrs	r3, r3, #8
  404774:	b29b      	uxth	r3, r3
  404776:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40477a:	b29b      	uxth	r3, r3
  40477c:	041b      	lsls	r3, r3, #16
  40477e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404782:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
		hri_twihs_write_MMR_reg(dev->hw,
  404786:	4619      	mov	r1, r3
  404788:	4610      	mov	r0, r2
  40478a:	4b38      	ldr	r3, [pc, #224]	; (40486c <_i2c_m_sync_read+0x128>)
  40478c:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  40478e:	687b      	ldr	r3, [r7, #4]
  404790:	691a      	ldr	r2, [r3, #16]
  404792:	683b      	ldr	r3, [r7, #0]
  404794:	881b      	ldrh	r3, [r3, #0]
  404796:	b2db      	uxtb	r3, r3
  404798:	4619      	mov	r1, r3
  40479a:	4610      	mov	r0, r2
  40479c:	4b34      	ldr	r3, [pc, #208]	; (404870 <_i2c_m_sync_read+0x12c>)
  40479e:	4798      	blx	r3
  4047a0:	e00c      	b.n	4047bc <_i2c_m_sync_read+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  4047a2:	687b      	ldr	r3, [r7, #4]
  4047a4:	691a      	ldr	r2, [r3, #16]
  4047a6:	683b      	ldr	r3, [r7, #0]
  4047a8:	881b      	ldrh	r3, [r3, #0]
  4047aa:	041b      	lsls	r3, r3, #16
  4047ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4047b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4047b4:	4619      	mov	r1, r3
  4047b6:	4610      	mov	r0, r2
  4047b8:	4b2c      	ldr	r3, [pc, #176]	; (40486c <_i2c_m_sync_read+0x128>)
  4047ba:	4798      	blx	r3
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  4047bc:	687b      	ldr	r3, [r7, #4]
  4047be:	691a      	ldr	r2, [r3, #16]
  4047c0:	683b      	ldr	r3, [r7, #0]
  4047c2:	685b      	ldr	r3, [r3, #4]
  4047c4:	2b01      	cmp	r3, #1
  4047c6:	d101      	bne.n	4047cc <_i2c_m_sync_read+0x88>
  4047c8:	2303      	movs	r3, #3
  4047ca:	e000      	b.n	4047ce <_i2c_m_sync_read+0x8a>
  4047cc:	2301      	movs	r3, #1
  4047ce:	4619      	mov	r1, r3
  4047d0:	4610      	mov	r0, r2
  4047d2:	4b28      	ldr	r3, [pc, #160]	; (404874 <_i2c_m_sync_read+0x130>)
  4047d4:	4798      	blx	r3

	for (i = 0; i < msg->len; i++) {
  4047d6:	2300      	movs	r3, #0
  4047d8:	60fb      	str	r3, [r7, #12]
  4047da:	e027      	b.n	40482c <_i2c_m_sync_read+0xe8>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  4047dc:	bf00      	nop
  4047de:	687b      	ldr	r3, [r7, #4]
  4047e0:	691b      	ldr	r3, [r3, #16]
  4047e2:	4618      	mov	r0, r3
  4047e4:	4b24      	ldr	r3, [pc, #144]	; (404878 <_i2c_m_sync_read+0x134>)
  4047e6:	4798      	blx	r3
  4047e8:	4603      	mov	r3, r0
  4047ea:	f083 0301 	eor.w	r3, r3, #1
  4047ee:	b2db      	uxtb	r3, r3
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	d1f4      	bne.n	4047de <_i2c_m_sync_read+0x9a>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  4047f4:	683b      	ldr	r3, [r7, #0]
  4047f6:	689a      	ldr	r2, [r3, #8]
  4047f8:	68fb      	ldr	r3, [r7, #12]
  4047fa:	18d4      	adds	r4, r2, r3
  4047fc:	687b      	ldr	r3, [r7, #4]
  4047fe:	691b      	ldr	r3, [r3, #16]
  404800:	4618      	mov	r0, r3
  404802:	4b1e      	ldr	r3, [pc, #120]	; (40487c <_i2c_m_sync_read+0x138>)
  404804:	4798      	blx	r3
  404806:	4603      	mov	r3, r0
  404808:	b2db      	uxtb	r3, r3
  40480a:	7023      	strb	r3, [r4, #0]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  40480c:	683b      	ldr	r3, [r7, #0]
  40480e:	685b      	ldr	r3, [r3, #4]
  404810:	3b02      	subs	r3, #2
  404812:	461a      	mov	r2, r3
  404814:	68fb      	ldr	r3, [r7, #12]
  404816:	429a      	cmp	r2, r3
  404818:	d105      	bne.n	404826 <_i2c_m_sync_read+0xe2>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  40481a:	687b      	ldr	r3, [r7, #4]
  40481c:	691b      	ldr	r3, [r3, #16]
  40481e:	2102      	movs	r1, #2
  404820:	4618      	mov	r0, r3
  404822:	4b14      	ldr	r3, [pc, #80]	; (404874 <_i2c_m_sync_read+0x130>)
  404824:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  404826:	68fb      	ldr	r3, [r7, #12]
  404828:	3301      	adds	r3, #1
  40482a:	60fb      	str	r3, [r7, #12]
  40482c:	683b      	ldr	r3, [r7, #0]
  40482e:	685b      	ldr	r3, [r3, #4]
  404830:	461a      	mov	r2, r3
  404832:	68fb      	ldr	r3, [r7, #12]
  404834:	429a      	cmp	r2, r3
  404836:	d8d1      	bhi.n	4047dc <_i2c_m_sync_read+0x98>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  404838:	bf00      	nop
  40483a:	687b      	ldr	r3, [r7, #4]
  40483c:	691b      	ldr	r3, [r3, #16]
  40483e:	4618      	mov	r0, r3
  404840:	4b0f      	ldr	r3, [pc, #60]	; (404880 <_i2c_m_sync_read+0x13c>)
  404842:	4798      	blx	r3
  404844:	4603      	mov	r3, r0
  404846:	f083 0301 	eor.w	r3, r3, #1
  40484a:	b2db      	uxtb	r3, r3
  40484c:	2b00      	cmp	r3, #0
  40484e:	d1f4      	bne.n	40483a <_i2c_m_sync_read+0xf6>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  404850:	687b      	ldr	r3, [r7, #4]
  404852:	885b      	ldrh	r3, [r3, #2]
  404854:	b29b      	uxth	r3, r3
  404856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40485a:	b29a      	uxth	r2, r3
  40485c:	687b      	ldr	r3, [r7, #4]
  40485e:	805a      	strh	r2, [r3, #2]

	return ERR_NONE;
  404860:	2300      	movs	r3, #0
}
  404862:	4618      	mov	r0, r3
  404864:	3714      	adds	r7, #20
  404866:	46bd      	mov	sp, r7
  404868:	bd90      	pop	{r4, r7, pc}
  40486a:	bf00      	nop
  40486c:	004043dd 	.word	0x004043dd
  404870:	004043f9 	.word	0x004043f9
  404874:	00404469 	.word	0x00404469
  404878:	00404387 	.word	0x00404387
  40487c:	004043c5 	.word	0x004043c5
  404880:	00404361 	.word	0x00404361

00404884 <__NVIC_EnableIRQ>:
{
  404884:	b480      	push	{r7}
  404886:	b083      	sub	sp, #12
  404888:	af00      	add	r7, sp, #0
  40488a:	4603      	mov	r3, r0
  40488c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404892:	2b00      	cmp	r3, #0
  404894:	db0b      	blt.n	4048ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404896:	4909      	ldr	r1, [pc, #36]	; (4048bc <__NVIC_EnableIRQ+0x38>)
  404898:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40489c:	095b      	lsrs	r3, r3, #5
  40489e:	79fa      	ldrb	r2, [r7, #7]
  4048a0:	f002 021f 	and.w	r2, r2, #31
  4048a4:	2001      	movs	r0, #1
  4048a6:	fa00 f202 	lsl.w	r2, r0, r2
  4048aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4048ae:	bf00      	nop
  4048b0:	370c      	adds	r7, #12
  4048b2:	46bd      	mov	sp, r7
  4048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048b8:	4770      	bx	lr
  4048ba:	bf00      	nop
  4048bc:	e000e100 	.word	0xe000e100

004048c0 <__NVIC_DisableIRQ>:
{
  4048c0:	b480      	push	{r7}
  4048c2:	b083      	sub	sp, #12
  4048c4:	af00      	add	r7, sp, #0
  4048c6:	4603      	mov	r3, r0
  4048c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048ce:	2b00      	cmp	r3, #0
  4048d0:	db10      	blt.n	4048f4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4048d2:	490b      	ldr	r1, [pc, #44]	; (404900 <__NVIC_DisableIRQ+0x40>)
  4048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4048d8:	095b      	lsrs	r3, r3, #5
  4048da:	79fa      	ldrb	r2, [r7, #7]
  4048dc:	f002 021f 	and.w	r2, r2, #31
  4048e0:	2001      	movs	r0, #1
  4048e2:	fa00 f202 	lsl.w	r2, r0, r2
  4048e6:	3320      	adds	r3, #32
  4048e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4048ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4048f0:	f3bf 8f6f 	isb	sy
}
  4048f4:	bf00      	nop
  4048f6:	370c      	adds	r7, #12
  4048f8:	46bd      	mov	sp, r7
  4048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048fe:	4770      	bx	lr
  404900:	e000e100 	.word	0xe000e100

00404904 <__NVIC_ClearPendingIRQ>:
{
  404904:	b480      	push	{r7}
  404906:	b083      	sub	sp, #12
  404908:	af00      	add	r7, sp, #0
  40490a:	4603      	mov	r3, r0
  40490c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404912:	2b00      	cmp	r3, #0
  404914:	db0c      	blt.n	404930 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404916:	4909      	ldr	r1, [pc, #36]	; (40493c <__NVIC_ClearPendingIRQ+0x38>)
  404918:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40491c:	095b      	lsrs	r3, r3, #5
  40491e:	79fa      	ldrb	r2, [r7, #7]
  404920:	f002 021f 	and.w	r2, r2, #31
  404924:	2001      	movs	r0, #1
  404926:	fa00 f202 	lsl.w	r2, r0, r2
  40492a:	3360      	adds	r3, #96	; 0x60
  40492c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404930:	bf00      	nop
  404932:	370c      	adds	r7, #12
  404934:	46bd      	mov	sp, r7
  404936:	f85d 7b04 	ldr.w	r7, [sp], #4
  40493a:	4770      	bx	lr
  40493c:	e000e100 	.word	0xe000e100

00404940 <hri_uart_get_IMR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IER = UART_IMR_RXRDY;
}

static inline bool hri_uart_get_IMR_RXRDY_bit(const void *const hw)
{
  404940:	b480      	push	{r7}
  404942:	b083      	sub	sp, #12
  404944:	af00      	add	r7, sp, #0
  404946:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_RXRDY) >> UART_IMR_RXRDY_Pos;
  404948:	687b      	ldr	r3, [r7, #4]
  40494a:	691b      	ldr	r3, [r3, #16]
  40494c:	f003 0301 	and.w	r3, r3, #1
  404950:	2b00      	cmp	r3, #0
  404952:	bf14      	ite	ne
  404954:	2301      	movne	r3, #1
  404956:	2300      	moveq	r3, #0
  404958:	b2db      	uxtb	r3, r3
}
  40495a:	4618      	mov	r0, r3
  40495c:	370c      	adds	r7, #12
  40495e:	46bd      	mov	sp, r7
  404960:	f85d 7b04 	ldr.w	r7, [sp], #4
  404964:	4770      	bx	lr

00404966 <hri_uart_set_IMR_TXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_RXRDY;
}

static inline void hri_uart_set_IMR_TXRDY_bit(const void *const hw)
{
  404966:	b480      	push	{r7}
  404968:	b083      	sub	sp, #12
  40496a:	af00      	add	r7, sp, #0
  40496c:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
  40496e:	687b      	ldr	r3, [r7, #4]
  404970:	2202      	movs	r2, #2
  404972:	609a      	str	r2, [r3, #8]
}
  404974:	bf00      	nop
  404976:	370c      	adds	r7, #12
  404978:	46bd      	mov	sp, r7
  40497a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40497e:	4770      	bx	lr

00404980 <hri_uart_get_IMR_TXRDY_bit>:

static inline bool hri_uart_get_IMR_TXRDY_bit(const void *const hw)
{
  404980:	b480      	push	{r7}
  404982:	b083      	sub	sp, #12
  404984:	af00      	add	r7, sp, #0
  404986:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXRDY) >> UART_IMR_TXRDY_Pos;
  404988:	687b      	ldr	r3, [r7, #4]
  40498a:	691b      	ldr	r3, [r3, #16]
  40498c:	085b      	lsrs	r3, r3, #1
  40498e:	f003 0301 	and.w	r3, r3, #1
  404992:	2b00      	cmp	r3, #0
  404994:	bf14      	ite	ne
  404996:	2301      	movne	r3, #1
  404998:	2300      	moveq	r3, #0
  40499a:	b2db      	uxtb	r3, r3
}
  40499c:	4618      	mov	r0, r3
  40499e:	370c      	adds	r7, #12
  4049a0:	46bd      	mov	sp, r7
  4049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049a6:	4770      	bx	lr

004049a8 <hri_uart_clear_IMR_TXRDY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
	}
}

static inline void hri_uart_clear_IMR_TXRDY_bit(const void *const hw)
{
  4049a8:	b480      	push	{r7}
  4049aa:	b083      	sub	sp, #12
  4049ac:	af00      	add	r7, sp, #0
  4049ae:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXRDY;
  4049b0:	687b      	ldr	r3, [r7, #4]
  4049b2:	2202      	movs	r2, #2
  4049b4:	60da      	str	r2, [r3, #12]
}
  4049b6:	bf00      	nop
  4049b8:	370c      	adds	r7, #12
  4049ba:	46bd      	mov	sp, r7
  4049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049c0:	4770      	bx	lr

004049c2 <hri_uart_set_IMR_TXEMPTY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_PARE;
}

static inline void hri_uart_set_IMR_TXEMPTY_bit(const void *const hw)
{
  4049c2:	b480      	push	{r7}
  4049c4:	b083      	sub	sp, #12
  4049c6:	af00      	add	r7, sp, #0
  4049c8:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
  4049ca:	687b      	ldr	r3, [r7, #4]
  4049cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4049d0:	609a      	str	r2, [r3, #8]
}
  4049d2:	bf00      	nop
  4049d4:	370c      	adds	r7, #12
  4049d6:	46bd      	mov	sp, r7
  4049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049dc:	4770      	bx	lr

004049de <hri_uart_get_IMR_TXEMPTY_bit>:

static inline bool hri_uart_get_IMR_TXEMPTY_bit(const void *const hw)
{
  4049de:	b480      	push	{r7}
  4049e0:	b083      	sub	sp, #12
  4049e2:	af00      	add	r7, sp, #0
  4049e4:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXEMPTY) >> UART_IMR_TXEMPTY_Pos;
  4049e6:	687b      	ldr	r3, [r7, #4]
  4049e8:	691b      	ldr	r3, [r3, #16]
  4049ea:	0a5b      	lsrs	r3, r3, #9
  4049ec:	f003 0301 	and.w	r3, r3, #1
  4049f0:	2b00      	cmp	r3, #0
  4049f2:	bf14      	ite	ne
  4049f4:	2301      	movne	r3, #1
  4049f6:	2300      	moveq	r3, #0
  4049f8:	b2db      	uxtb	r3, r3
}
  4049fa:	4618      	mov	r0, r3
  4049fc:	370c      	adds	r7, #12
  4049fe:	46bd      	mov	sp, r7
  404a00:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a04:	4770      	bx	lr

00404a06 <hri_uart_clear_IMR_TXEMPTY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
	}
}

static inline void hri_uart_clear_IMR_TXEMPTY_bit(const void *const hw)
{
  404a06:	b480      	push	{r7}
  404a08:	b083      	sub	sp, #12
  404a0a:	af00      	add	r7, sp, #0
  404a0c:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXEMPTY;
  404a0e:	687b      	ldr	r3, [r7, #4]
  404a10:	f44f 7200 	mov.w	r2, #512	; 0x200
  404a14:	60da      	str	r2, [r3, #12]
}
  404a16:	bf00      	nop
  404a18:	370c      	adds	r7, #12
  404a1a:	46bd      	mov	sp, r7
  404a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a20:	4770      	bx	lr

00404a22 <hri_uart_get_SR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = mask;
}

static inline bool hri_uart_get_SR_RXRDY_bit(const void *const hw)
{
  404a22:	b480      	push	{r7}
  404a24:	b083      	sub	sp, #12
  404a26:	af00      	add	r7, sp, #0
  404a28:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  404a2a:	687b      	ldr	r3, [r7, #4]
  404a2c:	695b      	ldr	r3, [r3, #20]
  404a2e:	f003 0301 	and.w	r3, r3, #1
  404a32:	2b00      	cmp	r3, #0
  404a34:	bf14      	ite	ne
  404a36:	2301      	movne	r3, #1
  404a38:	2300      	moveq	r3, #0
  404a3a:	b2db      	uxtb	r3, r3
}
  404a3c:	4618      	mov	r0, r3
  404a3e:	370c      	adds	r7, #12
  404a40:	46bd      	mov	sp, r7
  404a42:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a46:	4770      	bx	lr

00404a48 <hri_uart_get_SR_TXRDY_bit>:

static inline bool hri_uart_get_SR_TXRDY_bit(const void *const hw)
{
  404a48:	b480      	push	{r7}
  404a4a:	b083      	sub	sp, #12
  404a4c:	af00      	add	r7, sp, #0
  404a4e:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  404a50:	687b      	ldr	r3, [r7, #4]
  404a52:	695b      	ldr	r3, [r3, #20]
  404a54:	f003 0302 	and.w	r3, r3, #2
  404a58:	2b00      	cmp	r3, #0
  404a5a:	bf14      	ite	ne
  404a5c:	2301      	movne	r3, #1
  404a5e:	2300      	moveq	r3, #0
  404a60:	b2db      	uxtb	r3, r3
}
  404a62:	4618      	mov	r0, r3
  404a64:	370c      	adds	r7, #12
  404a66:	46bd      	mov	sp, r7
  404a68:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a6c:	4770      	bx	lr

00404a6e <hri_uart_get_SR_TXEMPTY_bit>:
{
	return (((Uart *)hw)->UART_SR & UART_SR_PARE) > 0;
}

static inline bool hri_uart_get_SR_TXEMPTY_bit(const void *const hw)
{
  404a6e:	b480      	push	{r7}
  404a70:	b083      	sub	sp, #12
  404a72:	af00      	add	r7, sp, #0
  404a74:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  404a76:	687b      	ldr	r3, [r7, #4]
  404a78:	695b      	ldr	r3, [r3, #20]
  404a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  404a7e:	2b00      	cmp	r3, #0
  404a80:	bf14      	ite	ne
  404a82:	2301      	movne	r3, #1
  404a84:	2300      	moveq	r3, #0
  404a86:	b2db      	uxtb	r3, r3
}
  404a88:	4618      	mov	r0, r3
  404a8a:	370c      	adds	r7, #12
  404a8c:	46bd      	mov	sp, r7
  404a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a92:	4770      	bx	lr

00404a94 <hri_uart_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_sr_reg_t hri_uart_read_SR_reg(const void *const hw)
{
  404a94:	b480      	push	{r7}
  404a96:	b083      	sub	sp, #12
  404a98:	af00      	add	r7, sp, #0
  404a9a:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_SR;
  404a9c:	687b      	ldr	r3, [r7, #4]
  404a9e:	695b      	ldr	r3, [r3, #20]
}
  404aa0:	4618      	mov	r0, r3
  404aa2:	370c      	adds	r7, #12
  404aa4:	46bd      	mov	sp, r7
  404aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404aaa:	4770      	bx	lr

00404aac <hri_uart_read_RHR_RXCHR_bf>:
{
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR(mask)) >> UART_RHR_RXCHR_Pos;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_RXCHR_bf(const void *const hw)
{
  404aac:	b480      	push	{r7}
  404aae:	b083      	sub	sp, #12
  404ab0:	af00      	add	r7, sp, #0
  404ab2:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  404ab4:	687b      	ldr	r3, [r7, #4]
  404ab6:	699b      	ldr	r3, [r3, #24]
  404ab8:	b2db      	uxtb	r3, r3
}
  404aba:	4618      	mov	r0, r3
  404abc:	370c      	adds	r7, #12
  404abe:	46bd      	mov	sp, r7
  404ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ac4:	4770      	bx	lr

00404ac6 <hri_uart_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_reg(const void *const hw)
{
  404ac6:	b480      	push	{r7}
  404ac8:	b083      	sub	sp, #12
  404aca:	af00      	add	r7, sp, #0
  404acc:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_RHR;
  404ace:	687b      	ldr	r3, [r7, #4]
  404ad0:	699b      	ldr	r3, [r3, #24]
}
  404ad2:	4618      	mov	r0, r3
  404ad4:	370c      	adds	r7, #12
  404ad6:	46bd      	mov	sp, r7
  404ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404adc:	4770      	bx	lr

00404ade <hri_uart_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_MR_reg(const void *const hw, hri_uart_mr_reg_t data)
{
  404ade:	b480      	push	{r7}
  404ae0:	b083      	sub	sp, #12
  404ae2:	af00      	add	r7, sp, #0
  404ae4:	6078      	str	r0, [r7, #4]
  404ae6:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_MR = data;
  404ae8:	687b      	ldr	r3, [r7, #4]
  404aea:	683a      	ldr	r2, [r7, #0]
  404aec:	605a      	str	r2, [r3, #4]
	UART_CRITICAL_SECTION_LEAVE();
}
  404aee:	bf00      	nop
  404af0:	370c      	adds	r7, #12
  404af2:	46bd      	mov	sp, r7
  404af4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404af8:	4770      	bx	lr

00404afa <hri_uart_write_BRGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_BRGR_reg(const void *const hw, hri_uart_brgr_reg_t data)
{
  404afa:	b480      	push	{r7}
  404afc:	b083      	sub	sp, #12
  404afe:	af00      	add	r7, sp, #0
  404b00:	6078      	str	r0, [r7, #4]
  404b02:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_BRGR = data;
  404b04:	687b      	ldr	r3, [r7, #4]
  404b06:	683a      	ldr	r2, [r7, #0]
  404b08:	621a      	str	r2, [r3, #32]
	UART_CRITICAL_SECTION_LEAVE();
}
  404b0a:	bf00      	nop
  404b0c:	370c      	adds	r7, #12
  404b0e:	46bd      	mov	sp, r7
  404b10:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b14:	4770      	bx	lr

00404b16 <hri_uart_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
  404b16:	b480      	push	{r7}
  404b18:	b083      	sub	sp, #12
  404b1a:	af00      	add	r7, sp, #0
  404b1c:	6078      	str	r0, [r7, #4]
  404b1e:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  404b20:	687b      	ldr	r3, [r7, #4]
  404b22:	683a      	ldr	r2, [r7, #0]
  404b24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	UART_CRITICAL_SECTION_LEAVE();
}
  404b28:	bf00      	nop
  404b2a:	370c      	adds	r7, #12
  404b2c:	46bd      	mov	sp, r7
  404b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b32:	4770      	bx	lr

00404b34 <hri_uart_write_CR_reg>:
{
	return ((Uart *)hw)->UART_WPMR;
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
  404b34:	b480      	push	{r7}
  404b36:	b083      	sub	sp, #12
  404b38:	af00      	add	r7, sp, #0
  404b3a:	6078      	str	r0, [r7, #4]
  404b3c:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  404b3e:	687b      	ldr	r3, [r7, #4]
  404b40:	683a      	ldr	r2, [r7, #0]
  404b42:	601a      	str	r2, [r3, #0]
	UART_CRITICAL_SECTION_LEAVE();
}
  404b44:	bf00      	nop
  404b46:	370c      	adds	r7, #12
  404b48:	46bd      	mov	sp, r7
  404b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b4e:	4770      	bx	lr

00404b50 <hri_uart_write_THR_reg>:

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
  404b50:	b480      	push	{r7}
  404b52:	b083      	sub	sp, #12
  404b54:	af00      	add	r7, sp, #0
  404b56:	6078      	str	r0, [r7, #4]
  404b58:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  404b5a:	687b      	ldr	r3, [r7, #4]
  404b5c:	683a      	ldr	r2, [r7, #0]
  404b5e:	61da      	str	r2, [r3, #28]
	UART_CRITICAL_SECTION_LEAVE();
}
  404b60:	bf00      	nop
  404b62:	370c      	adds	r7, #12
  404b64:	46bd      	mov	sp, r7
  404b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b6a:	4770      	bx	lr

00404b6c <_uart_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_irq_num(const void *const hw)
{
  404b6c:	b580      	push	{r7, lr}
  404b6e:	b084      	sub	sp, #16
  404b70:	af00      	add	r7, sp, #0
  404b72:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  404b74:	687b      	ldr	r3, [r7, #4]
  404b76:	2b00      	cmp	r3, #0
  404b78:	bf14      	ite	ne
  404b7a:	2301      	movne	r3, #1
  404b7c:	2300      	moveq	r3, #0
  404b7e:	b2db      	uxtb	r3, r3
  404b80:	2288      	movs	r2, #136	; 0x88
  404b82:	4916      	ldr	r1, [pc, #88]	; (404bdc <_uart_get_irq_num+0x70>)
  404b84:	4618      	mov	r0, r3
  404b86:	4b16      	ldr	r3, [pc, #88]	; (404be0 <_uart_get_irq_num+0x74>)
  404b88:	4798      	blx	r3
	uint8_t i;
	i = _uart_get_hardware_index(hw);
  404b8a:	6878      	ldr	r0, [r7, #4]
  404b8c:	4b15      	ldr	r3, [pc, #84]	; (404be4 <_uart_get_irq_num+0x78>)
  404b8e:	4798      	blx	r3
  404b90:	4603      	mov	r3, r0
  404b92:	73fb      	strb	r3, [r7, #15]
	switch (i) {
  404b94:	7bfb      	ldrb	r3, [r7, #15]
  404b96:	2b04      	cmp	r3, #4
  404b98:	d816      	bhi.n	404bc8 <_uart_get_irq_num+0x5c>
  404b9a:	a201      	add	r2, pc, #4	; (adr r2, 404ba0 <_uart_get_irq_num+0x34>)
  404b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404ba0:	00404bb5 	.word	0x00404bb5
  404ba4:	00404bb9 	.word	0x00404bb9
  404ba8:	00404bbd 	.word	0x00404bbd
  404bac:	00404bc1 	.word	0x00404bc1
  404bb0:	00404bc5 	.word	0x00404bc5
	case 0:
		return UART0_IRQn;
  404bb4:	2307      	movs	r3, #7
  404bb6:	e00d      	b.n	404bd4 <_uart_get_irq_num+0x68>

	case 1:
		return UART1_IRQn;
  404bb8:	2308      	movs	r3, #8
  404bba:	e00b      	b.n	404bd4 <_uart_get_irq_num+0x68>
	case 2:
		return UART2_IRQn;
  404bbc:	232c      	movs	r3, #44	; 0x2c
  404bbe:	e009      	b.n	404bd4 <_uart_get_irq_num+0x68>

	case 3:
		return UART3_IRQn;
  404bc0:	232d      	movs	r3, #45	; 0x2d
  404bc2:	e007      	b.n	404bd4 <_uart_get_irq_num+0x68>

	case 4:
		return UART4_IRQn;
  404bc4:	232e      	movs	r3, #46	; 0x2e
  404bc6:	e005      	b.n	404bd4 <_uart_get_irq_num+0x68>
	default:
		ASSERT(false);
  404bc8:	229a      	movs	r2, #154	; 0x9a
  404bca:	4904      	ldr	r1, [pc, #16]	; (404bdc <_uart_get_irq_num+0x70>)
  404bcc:	2000      	movs	r0, #0
  404bce:	4b04      	ldr	r3, [pc, #16]	; (404be0 <_uart_get_irq_num+0x74>)
  404bd0:	4798      	blx	r3
		return ERR_INVALID_DATA;
  404bd2:	23ff      	movs	r3, #255	; 0xff
	}
}
  404bd4:	4618      	mov	r0, r3
  404bd6:	3710      	adds	r7, #16
  404bd8:	46bd      	mov	sp, r7
  404bda:	bd80      	pop	{r7, pc}
  404bdc:	00409734 	.word	0x00409734
  404be0:	004027fd 	.word	0x004027fd
  404be4:	00404f1d 	.word	0x00404f1d

00404be8 <_uart_init_irq_param>:

/**
 * \brief Init irq param with the given twi hardware instance
 */
static void _uart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
  404be8:	b480      	push	{r7}
  404bea:	b083      	sub	sp, #12
  404bec:	af00      	add	r7, sp, #0
  404bee:	6078      	str	r0, [r7, #4]
  404bf0:	6039      	str	r1, [r7, #0]
	if (hw == UART4) {
  404bf2:	687b      	ldr	r3, [r7, #4]
  404bf4:	4a05      	ldr	r2, [pc, #20]	; (404c0c <_uart_init_irq_param+0x24>)
  404bf6:	4293      	cmp	r3, r2
  404bf8:	d102      	bne.n	404c00 <_uart_init_irq_param+0x18>
		_uart4_dev = dev;
  404bfa:	4a05      	ldr	r2, [pc, #20]	; (404c10 <_uart_init_irq_param+0x28>)
  404bfc:	683b      	ldr	r3, [r7, #0]
  404bfe:	6013      	str	r3, [r2, #0]
	}
}
  404c00:	bf00      	nop
  404c02:	370c      	adds	r7, #12
  404c04:	46bd      	mov	sp, r7
  404c06:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c0a:	4770      	bx	lr
  404c0c:	400e1e00 	.word	0x400e1e00
  404c10:	20401670 	.word	0x20401670

00404c14 <_usart_sync_init>:

/**
 * \brief Initialize synchronous UART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
  404c14:	b580      	push	{r7, lr}
  404c16:	b082      	sub	sp, #8
  404c18:	af00      	add	r7, sp, #0
  404c1a:	6078      	str	r0, [r7, #4]
  404c1c:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  404c1e:	687b      	ldr	r3, [r7, #4]
  404c20:	2b00      	cmp	r3, #0
  404c22:	bf14      	ite	ne
  404c24:	2301      	movne	r3, #1
  404c26:	2300      	moveq	r3, #0
  404c28:	b2db      	uxtb	r3, r3
  404c2a:	22ae      	movs	r2, #174	; 0xae
  404c2c:	490c      	ldr	r1, [pc, #48]	; (404c60 <_usart_sync_init+0x4c>)
  404c2e:	4618      	mov	r0, r3
  404c30:	4b0c      	ldr	r3, [pc, #48]	; (404c64 <_usart_sync_init+0x50>)
  404c32:	4798      	blx	r3
	ASSERT(hw);
  404c34:	683b      	ldr	r3, [r7, #0]
  404c36:	2b00      	cmp	r3, #0
  404c38:	bf14      	ite	ne
  404c3a:	2301      	movne	r3, #1
  404c3c:	2300      	moveq	r3, #0
  404c3e:	b2db      	uxtb	r3, r3
  404c40:	22af      	movs	r2, #175	; 0xaf
  404c42:	4907      	ldr	r1, [pc, #28]	; (404c60 <_usart_sync_init+0x4c>)
  404c44:	4618      	mov	r0, r3
  404c46:	4b07      	ldr	r3, [pc, #28]	; (404c64 <_usart_sync_init+0x50>)
  404c48:	4798      	blx	r3

	device->hw = hw;
  404c4a:	687b      	ldr	r3, [r7, #4]
  404c4c:	683a      	ldr	r2, [r7, #0]
  404c4e:	601a      	str	r2, [r3, #0]

	return _uart_init(hw);
  404c50:	6838      	ldr	r0, [r7, #0]
  404c52:	4b05      	ldr	r3, [pc, #20]	; (404c68 <_usart_sync_init+0x54>)
  404c54:	4798      	blx	r3
  404c56:	4603      	mov	r3, r0
}
  404c58:	4618      	mov	r0, r3
  404c5a:	3708      	adds	r7, #8
  404c5c:	46bd      	mov	sp, r7
  404c5e:	bd80      	pop	{r7, pc}
  404c60:	00409734 	.word	0x00409734
  404c64:	004027fd 	.word	0x004027fd
  404c68:	00405181 	.word	0x00405181

00404c6c <_usart_async_init>:

/**
 * \brief Initialize asynchronous UART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
  404c6c:	b580      	push	{r7, lr}
  404c6e:	b084      	sub	sp, #16
  404c70:	af00      	add	r7, sp, #0
  404c72:	6078      	str	r0, [r7, #4]
  404c74:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
  404c76:	687b      	ldr	r3, [r7, #4]
  404c78:	2b00      	cmp	r3, #0
  404c7a:	bf14      	ite	ne
  404c7c:	2301      	movne	r3, #1
  404c7e:	2300      	moveq	r3, #0
  404c80:	b2db      	uxtb	r3, r3
  404c82:	22bd      	movs	r2, #189	; 0xbd
  404c84:	4918      	ldr	r1, [pc, #96]	; (404ce8 <_usart_async_init+0x7c>)
  404c86:	4618      	mov	r0, r3
  404c88:	4b18      	ldr	r3, [pc, #96]	; (404cec <_usart_async_init+0x80>)
  404c8a:	4798      	blx	r3

	init_status = _uart_init(hw);
  404c8c:	6838      	ldr	r0, [r7, #0]
  404c8e:	4b18      	ldr	r3, [pc, #96]	; (404cf0 <_usart_async_init+0x84>)
  404c90:	4798      	blx	r3
  404c92:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  404c94:	68fb      	ldr	r3, [r7, #12]
  404c96:	2b00      	cmp	r3, #0
  404c98:	d001      	beq.n	404c9e <_usart_async_init+0x32>
		return init_status;
  404c9a:	68fb      	ldr	r3, [r7, #12]
  404c9c:	e01f      	b.n	404cde <_usart_async_init+0x72>
	}
	device->hw = hw;
  404c9e:	687b      	ldr	r3, [r7, #4]
  404ca0:	683a      	ldr	r2, [r7, #0]
  404ca2:	619a      	str	r2, [r3, #24]

	_uart_init_irq_param(hw, device);
  404ca4:	6879      	ldr	r1, [r7, #4]
  404ca6:	6838      	ldr	r0, [r7, #0]
  404ca8:	4b12      	ldr	r3, [pc, #72]	; (404cf4 <_usart_async_init+0x88>)
  404caa:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  404cac:	6838      	ldr	r0, [r7, #0]
  404cae:	4b12      	ldr	r3, [pc, #72]	; (404cf8 <_usart_async_init+0x8c>)
  404cb0:	4798      	blx	r3
  404cb2:	4603      	mov	r3, r0
  404cb4:	b25b      	sxtb	r3, r3
  404cb6:	4618      	mov	r0, r3
  404cb8:	4b10      	ldr	r3, [pc, #64]	; (404cfc <_usart_async_init+0x90>)
  404cba:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_uart_get_irq_num(hw));
  404cbc:	6838      	ldr	r0, [r7, #0]
  404cbe:	4b0e      	ldr	r3, [pc, #56]	; (404cf8 <_usart_async_init+0x8c>)
  404cc0:	4798      	blx	r3
  404cc2:	4603      	mov	r3, r0
  404cc4:	b25b      	sxtb	r3, r3
  404cc6:	4618      	mov	r0, r3
  404cc8:	4b0d      	ldr	r3, [pc, #52]	; (404d00 <_usart_async_init+0x94>)
  404cca:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  404ccc:	6838      	ldr	r0, [r7, #0]
  404cce:	4b0a      	ldr	r3, [pc, #40]	; (404cf8 <_usart_async_init+0x8c>)
  404cd0:	4798      	blx	r3
  404cd2:	4603      	mov	r3, r0
  404cd4:	b25b      	sxtb	r3, r3
  404cd6:	4618      	mov	r0, r3
  404cd8:	4b0a      	ldr	r3, [pc, #40]	; (404d04 <_usart_async_init+0x98>)
  404cda:	4798      	blx	r3

	return ERR_NONE;
  404cdc:	2300      	movs	r3, #0
}
  404cde:	4618      	mov	r0, r3
  404ce0:	3710      	adds	r7, #16
  404ce2:	46bd      	mov	sp, r7
  404ce4:	bd80      	pop	{r7, pc}
  404ce6:	bf00      	nop
  404ce8:	00409734 	.word	0x00409734
  404cec:	004027fd 	.word	0x004027fd
  404cf0:	00405181 	.word	0x00405181
  404cf4:	00404be9 	.word	0x00404be9
  404cf8:	00404b6d 	.word	0x00404b6d
  404cfc:	004048c1 	.word	0x004048c1
  404d00:	00404905 	.word	0x00404905
  404d04:	00404885 	.word	0x00404885

00404d08 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
  404d08:	b580      	push	{r7, lr}
  404d0a:	b082      	sub	sp, #8
  404d0c:	af00      	add	r7, sp, #0
  404d0e:	6078      	str	r0, [r7, #4]
  404d10:	460b      	mov	r3, r1
  404d12:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  404d14:	687b      	ldr	r3, [r7, #4]
  404d16:	2b00      	cmp	r3, #0
  404d18:	bf14      	ite	ne
  404d1a:	2301      	movne	r3, #1
  404d1c:	2300      	moveq	r3, #0
  404d1e:	b2db      	uxtb	r3, r3
  404d20:	f240 1299 	movw	r2, #409	; 0x199
  404d24:	4907      	ldr	r1, [pc, #28]	; (404d44 <_usart_sync_write_byte+0x3c>)
  404d26:	4618      	mov	r0, r3
  404d28:	4b07      	ldr	r3, [pc, #28]	; (404d48 <_usart_sync_write_byte+0x40>)
  404d2a:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  404d2c:	687b      	ldr	r3, [r7, #4]
  404d2e:	681b      	ldr	r3, [r3, #0]
  404d30:	78fa      	ldrb	r2, [r7, #3]
  404d32:	4611      	mov	r1, r2
  404d34:	4618      	mov	r0, r3
  404d36:	4b05      	ldr	r3, [pc, #20]	; (404d4c <_usart_sync_write_byte+0x44>)
  404d38:	4798      	blx	r3
}
  404d3a:	bf00      	nop
  404d3c:	3708      	adds	r7, #8
  404d3e:	46bd      	mov	sp, r7
  404d40:	bd80      	pop	{r7, pc}
  404d42:	bf00      	nop
  404d44:	00409734 	.word	0x00409734
  404d48:	004027fd 	.word	0x004027fd
  404d4c:	00404b51 	.word	0x00404b51

00404d50 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
  404d50:	b580      	push	{r7, lr}
  404d52:	b082      	sub	sp, #8
  404d54:	af00      	add	r7, sp, #0
  404d56:	6078      	str	r0, [r7, #4]
  404d58:	460b      	mov	r3, r1
  404d5a:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  404d5c:	687b      	ldr	r3, [r7, #4]
  404d5e:	2b00      	cmp	r3, #0
  404d60:	bf14      	ite	ne
  404d62:	2301      	movne	r3, #1
  404d64:	2300      	moveq	r3, #0
  404d66:	b2db      	uxtb	r3, r3
  404d68:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
  404d6c:	4907      	ldr	r1, [pc, #28]	; (404d8c <_usart_async_write_byte+0x3c>)
  404d6e:	4618      	mov	r0, r3
  404d70:	4b07      	ldr	r3, [pc, #28]	; (404d90 <_usart_async_write_byte+0x40>)
  404d72:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  404d74:	687b      	ldr	r3, [r7, #4]
  404d76:	699b      	ldr	r3, [r3, #24]
  404d78:	78fa      	ldrb	r2, [r7, #3]
  404d7a:	4611      	mov	r1, r2
  404d7c:	4618      	mov	r0, r3
  404d7e:	4b05      	ldr	r3, [pc, #20]	; (404d94 <_usart_async_write_byte+0x44>)
  404d80:	4798      	blx	r3
}
  404d82:	bf00      	nop
  404d84:	3708      	adds	r7, #8
  404d86:	46bd      	mov	sp, r7
  404d88:	bd80      	pop	{r7, pc}
  404d8a:	bf00      	nop
  404d8c:	00409734 	.word	0x00409734
  404d90:	004027fd 	.word	0x004027fd
  404d94:	00404b51 	.word	0x00404b51

00404d98 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given UART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
  404d98:	b580      	push	{r7, lr}
  404d9a:	b082      	sub	sp, #8
  404d9c:	af00      	add	r7, sp, #0
  404d9e:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404da0:	687b      	ldr	r3, [r7, #4]
  404da2:	2b00      	cmp	r3, #0
  404da4:	bf14      	ite	ne
  404da6:	2301      	movne	r3, #1
  404da8:	2300      	moveq	r3, #0
  404daa:	b2db      	uxtb	r3, r3
  404dac:	f240 12ab 	movw	r2, #427	; 0x1ab
  404db0:	4907      	ldr	r1, [pc, #28]	; (404dd0 <_usart_sync_read_byte+0x38>)
  404db2:	4618      	mov	r0, r3
  404db4:	4b07      	ldr	r3, [pc, #28]	; (404dd4 <_usart_sync_read_byte+0x3c>)
  404db6:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  404db8:	687b      	ldr	r3, [r7, #4]
  404dba:	681b      	ldr	r3, [r3, #0]
  404dbc:	4618      	mov	r0, r3
  404dbe:	4b06      	ldr	r3, [pc, #24]	; (404dd8 <_usart_sync_read_byte+0x40>)
  404dc0:	4798      	blx	r3
  404dc2:	4603      	mov	r3, r0
  404dc4:	b2db      	uxtb	r3, r3
}
  404dc6:	4618      	mov	r0, r3
  404dc8:	3708      	adds	r7, #8
  404dca:	46bd      	mov	sp, r7
  404dcc:	bd80      	pop	{r7, pc}
  404dce:	bf00      	nop
  404dd0:	00409734 	.word	0x00409734
  404dd4:	004027fd 	.word	0x004027fd
  404dd8:	00404aad 	.word	0x00404aad

00404ddc <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if UART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
  404ddc:	b580      	push	{r7, lr}
  404dde:	b082      	sub	sp, #8
  404de0:	af00      	add	r7, sp, #0
  404de2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404de4:	687b      	ldr	r3, [r7, #4]
  404de6:	2b00      	cmp	r3, #0
  404de8:	bf14      	ite	ne
  404dea:	2301      	movne	r3, #1
  404dec:	2300      	moveq	r3, #0
  404dee:	b2db      	uxtb	r3, r3
  404df0:	f44f 72da 	mov.w	r2, #436	; 0x1b4
  404df4:	4906      	ldr	r1, [pc, #24]	; (404e10 <_usart_sync_is_ready_to_send+0x34>)
  404df6:	4618      	mov	r0, r3
  404df8:	4b06      	ldr	r3, [pc, #24]	; (404e14 <_usart_sync_is_ready_to_send+0x38>)
  404dfa:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  404dfc:	687b      	ldr	r3, [r7, #4]
  404dfe:	681b      	ldr	r3, [r3, #0]
  404e00:	4618      	mov	r0, r3
  404e02:	4b05      	ldr	r3, [pc, #20]	; (404e18 <_usart_sync_is_ready_to_send+0x3c>)
  404e04:	4798      	blx	r3
  404e06:	4603      	mov	r3, r0
}
  404e08:	4618      	mov	r0, r3
  404e0a:	3708      	adds	r7, #8
  404e0c:	46bd      	mov	sp, r7
  404e0e:	bd80      	pop	{r7, pc}
  404e10:	00409734 	.word	0x00409734
  404e14:	004027fd 	.word	0x004027fd
  404e18:	00404a49 	.word	0x00404a49

00404e1c <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
  404e1c:	b580      	push	{r7, lr}
  404e1e:	b082      	sub	sp, #8
  404e20:	af00      	add	r7, sp, #0
  404e22:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404e24:	687b      	ldr	r3, [r7, #4]
  404e26:	2b00      	cmp	r3, #0
  404e28:	bf14      	ite	ne
  404e2a:	2301      	movne	r3, #1
  404e2c:	2300      	moveq	r3, #0
  404e2e:	b2db      	uxtb	r3, r3
  404e30:	f240 12bd 	movw	r2, #445	; 0x1bd
  404e34:	4906      	ldr	r1, [pc, #24]	; (404e50 <_usart_sync_is_transmit_done+0x34>)
  404e36:	4618      	mov	r0, r3
  404e38:	4b06      	ldr	r3, [pc, #24]	; (404e54 <_usart_sync_is_transmit_done+0x38>)
  404e3a:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  404e3c:	687b      	ldr	r3, [r7, #4]
  404e3e:	681b      	ldr	r3, [r3, #0]
  404e40:	4618      	mov	r0, r3
  404e42:	4b05      	ldr	r3, [pc, #20]	; (404e58 <_usart_sync_is_transmit_done+0x3c>)
  404e44:	4798      	blx	r3
  404e46:	4603      	mov	r3, r0
}
  404e48:	4618      	mov	r0, r3
  404e4a:	3708      	adds	r7, #8
  404e4c:	46bd      	mov	sp, r7
  404e4e:	bd80      	pop	{r7, pc}
  404e50:	00409734 	.word	0x00409734
  404e54:	004027fd 	.word	0x004027fd
  404e58:	00404a6f 	.word	0x00404a6f

00404e5c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by UART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
  404e5c:	b580      	push	{r7, lr}
  404e5e:	b082      	sub	sp, #8
  404e60:	af00      	add	r7, sp, #0
  404e62:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404e64:	687b      	ldr	r3, [r7, #4]
  404e66:	2b00      	cmp	r3, #0
  404e68:	bf14      	ite	ne
  404e6a:	2301      	movne	r3, #1
  404e6c:	2300      	moveq	r3, #0
  404e6e:	b2db      	uxtb	r3, r3
  404e70:	f240 12cf 	movw	r2, #463	; 0x1cf
  404e74:	4906      	ldr	r1, [pc, #24]	; (404e90 <_usart_sync_is_byte_received+0x34>)
  404e76:	4618      	mov	r0, r3
  404e78:	4b06      	ldr	r3, [pc, #24]	; (404e94 <_usart_sync_is_byte_received+0x38>)
  404e7a:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  404e7c:	687b      	ldr	r3, [r7, #4]
  404e7e:	681b      	ldr	r3, [r3, #0]
  404e80:	4618      	mov	r0, r3
  404e82:	4b05      	ldr	r3, [pc, #20]	; (404e98 <_usart_sync_is_byte_received+0x3c>)
  404e84:	4798      	blx	r3
  404e86:	4603      	mov	r3, r0
}
  404e88:	4618      	mov	r0, r3
  404e8a:	3708      	adds	r7, #8
  404e8c:	46bd      	mov	sp, r7
  404e8e:	bd80      	pop	{r7, pc}
  404e90:	00409734 	.word	0x00409734
  404e94:	004027fd 	.word	0x004027fd
  404e98:	00404a23 	.word	0x00404a23

00404e9c <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
  404e9c:	b580      	push	{r7, lr}
  404e9e:	b082      	sub	sp, #8
  404ea0:	af00      	add	r7, sp, #0
  404ea2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404ea4:	687b      	ldr	r3, [r7, #4]
  404ea6:	2b00      	cmp	r3, #0
  404ea8:	bf14      	ite	ne
  404eaa:	2301      	movne	r3, #1
  404eac:	2300      	moveq	r3, #0
  404eae:	b2db      	uxtb	r3, r3
  404eb0:	f240 220a 	movw	r2, #522	; 0x20a
  404eb4:	4906      	ldr	r1, [pc, #24]	; (404ed0 <_usart_async_enable_byte_sent_irq+0x34>)
  404eb6:	4618      	mov	r0, r3
  404eb8:	4b06      	ldr	r3, [pc, #24]	; (404ed4 <_usart_async_enable_byte_sent_irq+0x38>)
  404eba:	4798      	blx	r3
	hri_uart_set_IMR_TXRDY_bit(device->hw);
  404ebc:	687b      	ldr	r3, [r7, #4]
  404ebe:	699b      	ldr	r3, [r3, #24]
  404ec0:	4618      	mov	r0, r3
  404ec2:	4b05      	ldr	r3, [pc, #20]	; (404ed8 <_usart_async_enable_byte_sent_irq+0x3c>)
  404ec4:	4798      	blx	r3
}
  404ec6:	bf00      	nop
  404ec8:	3708      	adds	r7, #8
  404eca:	46bd      	mov	sp, r7
  404ecc:	bd80      	pop	{r7, pc}
  404ece:	bf00      	nop
  404ed0:	00409734 	.word	0x00409734
  404ed4:	004027fd 	.word	0x004027fd
  404ed8:	00404967 	.word	0x00404967

00404edc <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
  404edc:	b580      	push	{r7, lr}
  404ede:	b082      	sub	sp, #8
  404ee0:	af00      	add	r7, sp, #0
  404ee2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404ee4:	687b      	ldr	r3, [r7, #4]
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	bf14      	ite	ne
  404eea:	2301      	movne	r3, #1
  404eec:	2300      	moveq	r3, #0
  404eee:	b2db      	uxtb	r3, r3
  404ef0:	f240 2213 	movw	r2, #531	; 0x213
  404ef4:	4906      	ldr	r1, [pc, #24]	; (404f10 <_usart_async_enable_tx_done_irq+0x34>)
  404ef6:	4618      	mov	r0, r3
  404ef8:	4b06      	ldr	r3, [pc, #24]	; (404f14 <_usart_async_enable_tx_done_irq+0x38>)
  404efa:	4798      	blx	r3
	hri_uart_set_IMR_TXEMPTY_bit(device->hw);
  404efc:	687b      	ldr	r3, [r7, #4]
  404efe:	699b      	ldr	r3, [r3, #24]
  404f00:	4618      	mov	r0, r3
  404f02:	4b05      	ldr	r3, [pc, #20]	; (404f18 <_usart_async_enable_tx_done_irq+0x3c>)
  404f04:	4798      	blx	r3
}
  404f06:	bf00      	nop
  404f08:	3708      	adds	r7, #8
  404f0a:	46bd      	mov	sp, r7
  404f0c:	bd80      	pop	{r7, pc}
  404f0e:	bf00      	nop
  404f10:	00409734 	.word	0x00409734
  404f14:	004027fd 	.word	0x004027fd
  404f18:	004049c3 	.word	0x004049c3

00404f1c <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  404f1c:	b580      	push	{r7, lr}
  404f1e:	b082      	sub	sp, #8
  404f20:	af00      	add	r7, sp, #0
  404f22:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  404f24:	687b      	ldr	r3, [r7, #4]
  404f26:	2b00      	cmp	r3, #0
  404f28:	bf14      	ite	ne
  404f2a:	2301      	movne	r3, #1
  404f2c:	2300      	moveq	r3, #0
  404f2e:	b2db      	uxtb	r3, r3
  404f30:	f240 221d 	movw	r2, #541	; 0x21d
  404f34:	4913      	ldr	r1, [pc, #76]	; (404f84 <_uart_get_hardware_index+0x68>)
  404f36:	4618      	mov	r0, r3
  404f38:	4b13      	ldr	r3, [pc, #76]	; (404f88 <_uart_get_hardware_index+0x6c>)
  404f3a:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  404f3c:	687b      	ldr	r3, [r7, #4]
  404f3e:	4a13      	ldr	r2, [pc, #76]	; (404f8c <_uart_get_hardware_index+0x70>)
  404f40:	4293      	cmp	r3, r2
  404f42:	d101      	bne.n	404f48 <_uart_get_hardware_index+0x2c>
		return 0;
  404f44:	2300      	movs	r3, #0
  404f46:	e018      	b.n	404f7a <_uart_get_hardware_index+0x5e>
	} else if (UART1 == hw) {
  404f48:	687b      	ldr	r3, [r7, #4]
  404f4a:	4a11      	ldr	r2, [pc, #68]	; (404f90 <_uart_get_hardware_index+0x74>)
  404f4c:	4293      	cmp	r3, r2
  404f4e:	d101      	bne.n	404f54 <_uart_get_hardware_index+0x38>
		return 1;
  404f50:	2301      	movs	r3, #1
  404f52:	e012      	b.n	404f7a <_uart_get_hardware_index+0x5e>
	} else if (UART2 == hw) {
  404f54:	687b      	ldr	r3, [r7, #4]
  404f56:	4a0f      	ldr	r2, [pc, #60]	; (404f94 <_uart_get_hardware_index+0x78>)
  404f58:	4293      	cmp	r3, r2
  404f5a:	d101      	bne.n	404f60 <_uart_get_hardware_index+0x44>
		return 2;
  404f5c:	2302      	movs	r3, #2
  404f5e:	e00c      	b.n	404f7a <_uart_get_hardware_index+0x5e>
	} else if (UART3 == hw) {
  404f60:	687b      	ldr	r3, [r7, #4]
  404f62:	4a0d      	ldr	r2, [pc, #52]	; (404f98 <_uart_get_hardware_index+0x7c>)
  404f64:	4293      	cmp	r3, r2
  404f66:	d101      	bne.n	404f6c <_uart_get_hardware_index+0x50>
		return 3;
  404f68:	2303      	movs	r3, #3
  404f6a:	e006      	b.n	404f7a <_uart_get_hardware_index+0x5e>
	} else if (UART4 == hw) {
  404f6c:	687b      	ldr	r3, [r7, #4]
  404f6e:	4a0b      	ldr	r2, [pc, #44]	; (404f9c <_uart_get_hardware_index+0x80>)
  404f70:	4293      	cmp	r3, r2
  404f72:	d101      	bne.n	404f78 <_uart_get_hardware_index+0x5c>
		return 4;
  404f74:	2304      	movs	r3, #4
  404f76:	e000      	b.n	404f7a <_uart_get_hardware_index+0x5e>
	} else {
		return ERR_INVALID_DATA;
  404f78:	23ff      	movs	r3, #255	; 0xff
	}
}
  404f7a:	4618      	mov	r0, r3
  404f7c:	3708      	adds	r7, #8
  404f7e:	46bd      	mov	sp, r7
  404f80:	bd80      	pop	{r7, pc}
  404f82:	bf00      	nop
  404f84:	00409734 	.word	0x00409734
  404f88:	004027fd 	.word	0x004027fd
  404f8c:	400e0800 	.word	0x400e0800
  404f90:	400e0a00 	.word	0x400e0a00
  404f94:	400e1a00 	.word	0x400e1a00
  404f98:	400e1c00 	.word	0x400e1c00
  404f9c:	400e1e00 	.word	0x400e1e00

00404fa0 <_uart_get_usart_sync>:

/**
 * \brief Retrieve usart sync helper functions
 */
void *_uart_get_usart_sync(void)
{
  404fa0:	b480      	push	{r7}
  404fa2:	af00      	add	r7, sp, #0
	return (void *)NULL;
  404fa4:	2300      	movs	r3, #0
}
  404fa6:	4618      	mov	r0, r3
  404fa8:	46bd      	mov	sp, r7
  404faa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fae:	4770      	bx	lr

00404fb0 <_uart_get_usart_async>:

/**
 * \brief Retrieve usart async helper functions
 */
void *_uart_get_usart_async(void)
{
  404fb0:	b480      	push	{r7}
  404fb2:	af00      	add	r7, sp, #0
	return (void *)NULL;
  404fb4:	2300      	movs	r3, #0
}
  404fb6:	4618      	mov	r0, r3
  404fb8:	46bd      	mov	sp, r7
  404fba:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fbe:	4770      	bx	lr

00404fc0 <_uart_interrupt_handler>:
 * \internal Uart interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _uart_interrupt_handler(struct _usart_async_device *device)
{
  404fc0:	b590      	push	{r4, r7, lr}
  404fc2:	b085      	sub	sp, #20
  404fc4:	af00      	add	r7, sp, #0
  404fc6:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404fc8:	687b      	ldr	r3, [r7, #4]
  404fca:	2b00      	cmp	r3, #0
  404fcc:	bf14      	ite	ne
  404fce:	2301      	movne	r3, #1
  404fd0:	2300      	moveq	r3, #0
  404fd2:	b2db      	uxtb	r3, r3
  404fd4:	f240 2281 	movw	r2, #641	; 0x281
  404fd8:	4935      	ldr	r1, [pc, #212]	; (4050b0 <_uart_interrupt_handler+0xf0>)
  404fda:	4618      	mov	r0, r3
  404fdc:	4b35      	ldr	r3, [pc, #212]	; (4050b4 <_uart_interrupt_handler+0xf4>)
  404fde:	4798      	blx	r3
	void *hw = device->hw;
  404fe0:	687b      	ldr	r3, [r7, #4]
  404fe2:	699b      	ldr	r3, [r3, #24]
  404fe4:	60fb      	str	r3, [r7, #12]

	if (hri_uart_get_SR_TXRDY_bit(hw) && hri_uart_get_IMR_TXRDY_bit(hw)) {
  404fe6:	68f8      	ldr	r0, [r7, #12]
  404fe8:	4b33      	ldr	r3, [pc, #204]	; (4050b8 <_uart_interrupt_handler+0xf8>)
  404fea:	4798      	blx	r3
  404fec:	4603      	mov	r3, r0
  404fee:	2b00      	cmp	r3, #0
  404ff0:	d00d      	beq.n	40500e <_uart_interrupt_handler+0x4e>
  404ff2:	68f8      	ldr	r0, [r7, #12]
  404ff4:	4b31      	ldr	r3, [pc, #196]	; (4050bc <_uart_interrupt_handler+0xfc>)
  404ff6:	4798      	blx	r3
  404ff8:	4603      	mov	r3, r0
  404ffa:	2b00      	cmp	r3, #0
  404ffc:	d007      	beq.n	40500e <_uart_interrupt_handler+0x4e>
		hri_uart_clear_IMR_TXRDY_bit(hw);
  404ffe:	68f8      	ldr	r0, [r7, #12]
  405000:	4b2f      	ldr	r3, [pc, #188]	; (4050c0 <_uart_interrupt_handler+0x100>)
  405002:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
  405004:	687b      	ldr	r3, [r7, #4]
  405006:	681b      	ldr	r3, [r3, #0]
  405008:	6878      	ldr	r0, [r7, #4]
  40500a:	4798      	blx	r3
  40500c:	e04c      	b.n	4050a8 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_TXEMPTY_bit(hw) && hri_uart_get_IMR_TXEMPTY_bit(hw)) {
  40500e:	68f8      	ldr	r0, [r7, #12]
  405010:	4b2c      	ldr	r3, [pc, #176]	; (4050c4 <_uart_interrupt_handler+0x104>)
  405012:	4798      	blx	r3
  405014:	4603      	mov	r3, r0
  405016:	2b00      	cmp	r3, #0
  405018:	d00d      	beq.n	405036 <_uart_interrupt_handler+0x76>
  40501a:	68f8      	ldr	r0, [r7, #12]
  40501c:	4b2a      	ldr	r3, [pc, #168]	; (4050c8 <_uart_interrupt_handler+0x108>)
  40501e:	4798      	blx	r3
  405020:	4603      	mov	r3, r0
  405022:	2b00      	cmp	r3, #0
  405024:	d007      	beq.n	405036 <_uart_interrupt_handler+0x76>
		hri_uart_clear_IMR_TXEMPTY_bit(hw);
  405026:	68f8      	ldr	r0, [r7, #12]
  405028:	4b28      	ldr	r3, [pc, #160]	; (4050cc <_uart_interrupt_handler+0x10c>)
  40502a:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
  40502c:	687b      	ldr	r3, [r7, #4]
  40502e:	689b      	ldr	r3, [r3, #8]
  405030:	6878      	ldr	r0, [r7, #4]
  405032:	4798      	blx	r3
  405034:	e038      	b.n	4050a8 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_RXRDY_bit(hw) && hri_uart_get_IMR_RXRDY_bit(hw)) {
  405036:	68f8      	ldr	r0, [r7, #12]
  405038:	4b25      	ldr	r3, [pc, #148]	; (4050d0 <_uart_interrupt_handler+0x110>)
  40503a:	4798      	blx	r3
  40503c:	4603      	mov	r3, r0
  40503e:	2b00      	cmp	r3, #0
  405040:	d021      	beq.n	405086 <_uart_interrupt_handler+0xc6>
  405042:	68f8      	ldr	r0, [r7, #12]
  405044:	4b23      	ldr	r3, [pc, #140]	; (4050d4 <_uart_interrupt_handler+0x114>)
  405046:	4798      	blx	r3
  405048:	4603      	mov	r3, r0
  40504a:	2b00      	cmp	r3, #0
  40504c:	d01b      	beq.n	405086 <_uart_interrupt_handler+0xc6>
		if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  40504e:	68f8      	ldr	r0, [r7, #12]
  405050:	4b21      	ldr	r3, [pc, #132]	; (4050d8 <_uart_interrupt_handler+0x118>)
  405052:	4798      	blx	r3
  405054:	4603      	mov	r3, r0
  405056:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  40505a:	2b00      	cmp	r3, #0
  40505c:	d008      	beq.n	405070 <_uart_interrupt_handler+0xb0>
			hri_uart_read_RHR_reg(hw);
  40505e:	68f8      	ldr	r0, [r7, #12]
  405060:	4b1e      	ldr	r3, [pc, #120]	; (4050dc <_uart_interrupt_handler+0x11c>)
  405062:	4798      	blx	r3
			hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  405064:	f44f 7180 	mov.w	r1, #256	; 0x100
  405068:	68f8      	ldr	r0, [r7, #12]
  40506a:	4b1d      	ldr	r3, [pc, #116]	; (4050e0 <_uart_interrupt_handler+0x120>)
  40506c:	4798      	blx	r3
			return;
  40506e:	e01b      	b.n	4050a8 <_uart_interrupt_handler+0xe8>
		}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_uart_read_RHR_RXCHR_bf(hw));
  405070:	687b      	ldr	r3, [r7, #4]
  405072:	685c      	ldr	r4, [r3, #4]
  405074:	68f8      	ldr	r0, [r7, #12]
  405076:	4b1b      	ldr	r3, [pc, #108]	; (4050e4 <_uart_interrupt_handler+0x124>)
  405078:	4798      	blx	r3
  40507a:	4603      	mov	r3, r0
  40507c:	b2db      	uxtb	r3, r3
  40507e:	4619      	mov	r1, r3
  405080:	6878      	ldr	r0, [r7, #4]
  405082:	47a0      	blx	r4
  405084:	e010      	b.n	4050a8 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  405086:	68f8      	ldr	r0, [r7, #12]
  405088:	4b13      	ldr	r3, [pc, #76]	; (4050d8 <_uart_interrupt_handler+0x118>)
  40508a:	4798      	blx	r3
  40508c:	4603      	mov	r3, r0
  40508e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  405092:	2b00      	cmp	r3, #0
  405094:	d008      	beq.n	4050a8 <_uart_interrupt_handler+0xe8>
		hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  405096:	f44f 7180 	mov.w	r1, #256	; 0x100
  40509a:	68f8      	ldr	r0, [r7, #12]
  40509c:	4b10      	ldr	r3, [pc, #64]	; (4050e0 <_uart_interrupt_handler+0x120>)
  40509e:	4798      	blx	r3
		device->usart_cb.error_cb(device);
  4050a0:	687b      	ldr	r3, [r7, #4]
  4050a2:	68db      	ldr	r3, [r3, #12]
  4050a4:	6878      	ldr	r0, [r7, #4]
  4050a6:	4798      	blx	r3
	}
}
  4050a8:	3714      	adds	r7, #20
  4050aa:	46bd      	mov	sp, r7
  4050ac:	bd90      	pop	{r4, r7, pc}
  4050ae:	bf00      	nop
  4050b0:	00409734 	.word	0x00409734
  4050b4:	004027fd 	.word	0x004027fd
  4050b8:	00404a49 	.word	0x00404a49
  4050bc:	00404981 	.word	0x00404981
  4050c0:	004049a9 	.word	0x004049a9
  4050c4:	00404a6f 	.word	0x00404a6f
  4050c8:	004049df 	.word	0x004049df
  4050cc:	00404a07 	.word	0x00404a07
  4050d0:	00404a23 	.word	0x00404a23
  4050d4:	00404941 	.word	0x00404941
  4050d8:	00404a95 	.word	0x00404a95
  4050dc:	00404ac7 	.word	0x00404ac7
  4050e0:	00404b35 	.word	0x00404b35
  4050e4:	00404aad 	.word	0x00404aad

004050e8 <UART4_Handler>:

/**
 * \internal UART interrupt handler
 */
void UART4_Handler(void)
{
  4050e8:	b580      	push	{r7, lr}
  4050ea:	af00      	add	r7, sp, #0
	_uart_interrupt_handler(_uart4_dev);
  4050ec:	4b03      	ldr	r3, [pc, #12]	; (4050fc <UART4_Handler+0x14>)
  4050ee:	681b      	ldr	r3, [r3, #0]
  4050f0:	4618      	mov	r0, r3
  4050f2:	4b03      	ldr	r3, [pc, #12]	; (405100 <UART4_Handler+0x18>)
  4050f4:	4798      	blx	r3
}
  4050f6:	bf00      	nop
  4050f8:	bd80      	pop	{r7, pc}
  4050fa:	bf00      	nop
  4050fc:	20401670 	.word	0x20401670
  405100:	00404fc1 	.word	0x00404fc1

00405104 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  405104:	b580      	push	{r7, lr}
  405106:	b084      	sub	sp, #16
  405108:	af00      	add	r7, sp, #0
  40510a:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  40510c:	687b      	ldr	r3, [r7, #4]
  40510e:	2b00      	cmp	r3, #0
  405110:	bf14      	ite	ne
  405112:	2301      	movne	r3, #1
  405114:	2300      	moveq	r3, #0
  405116:	b2db      	uxtb	r3, r3
  405118:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  40511c:	4914      	ldr	r1, [pc, #80]	; (405170 <_get_uart_index+0x6c>)
  40511e:	4618      	mov	r0, r3
  405120:	4b14      	ldr	r3, [pc, #80]	; (405174 <_get_uart_index+0x70>)
  405122:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  405124:	6878      	ldr	r0, [r7, #4]
  405126:	4b14      	ldr	r3, [pc, #80]	; (405178 <_get_uart_index+0x74>)
  405128:	4798      	blx	r3
  40512a:	4603      	mov	r3, r0
  40512c:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  40512e:	2300      	movs	r3, #0
  405130:	73fb      	strb	r3, [r7, #15]
  405132:	e00f      	b.n	405154 <_get_uart_index+0x50>
		if (_uarts[i].number == uart_offset) {
  405134:	7bfa      	ldrb	r2, [r7, #15]
  405136:	4911      	ldr	r1, [pc, #68]	; (40517c <_get_uart_index+0x78>)
  405138:	4613      	mov	r3, r2
  40513a:	005b      	lsls	r3, r3, #1
  40513c:	4413      	add	r3, r2
  40513e:	009b      	lsls	r3, r3, #2
  405140:	440b      	add	r3, r1
  405142:	781b      	ldrb	r3, [r3, #0]
  405144:	7bba      	ldrb	r2, [r7, #14]
  405146:	429a      	cmp	r2, r3
  405148:	d101      	bne.n	40514e <_get_uart_index+0x4a>
			return i;
  40514a:	7bfb      	ldrb	r3, [r7, #15]
  40514c:	e00c      	b.n	405168 <_get_uart_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  40514e:	7bfb      	ldrb	r3, [r7, #15]
  405150:	3301      	adds	r3, #1
  405152:	73fb      	strb	r3, [r7, #15]
  405154:	7bfb      	ldrb	r3, [r7, #15]
  405156:	2b01      	cmp	r3, #1
  405158:	d9ec      	bls.n	405134 <_get_uart_index+0x30>
		}
	}

	ASSERT(false);
  40515a:	f240 22b2 	movw	r2, #690	; 0x2b2
  40515e:	4904      	ldr	r1, [pc, #16]	; (405170 <_get_uart_index+0x6c>)
  405160:	2000      	movs	r0, #0
  405162:	4b04      	ldr	r3, [pc, #16]	; (405174 <_get_uart_index+0x70>)
  405164:	4798      	blx	r3
	return 0;
  405166:	2300      	movs	r3, #0
}
  405168:	4618      	mov	r0, r3
  40516a:	3710      	adds	r7, #16
  40516c:	46bd      	mov	sp, r7
  40516e:	bd80      	pop	{r7, pc}
  405170:	00409734 	.word	0x00409734
  405174:	004027fd 	.word	0x004027fd
  405178:	00404f1d 	.word	0x00404f1d
  40517c:	20400008 	.word	0x20400008

00405180 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  405180:	b580      	push	{r7, lr}
  405182:	b084      	sub	sp, #16
  405184:	af00      	add	r7, sp, #0
  405186:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  405188:	687b      	ldr	r3, [r7, #4]
  40518a:	2b00      	cmp	r3, #0
  40518c:	bf14      	ite	ne
  40518e:	2301      	movne	r3, #1
  405190:	2300      	moveq	r3, #0
  405192:	b2db      	uxtb	r3, r3
  405194:	f240 22bf 	movw	r2, #703	; 0x2bf
  405198:	491a      	ldr	r1, [pc, #104]	; (405204 <_uart_init+0x84>)
  40519a:	4618      	mov	r0, r3
  40519c:	4b1a      	ldr	r3, [pc, #104]	; (405208 <_uart_init+0x88>)
  40519e:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  4051a0:	6878      	ldr	r0, [r7, #4]
  4051a2:	4b1a      	ldr	r3, [pc, #104]	; (40520c <_uart_init+0x8c>)
  4051a4:	4798      	blx	r3
  4051a6:	4603      	mov	r3, r0
  4051a8:	73fb      	strb	r3, [r7, #15]
	/* Disable the Write Protect. */
	hri_uart_write_WPMR_reg(hw, UART_WPMR_WPKEY_PASSWD);
  4051aa:	4919      	ldr	r1, [pc, #100]	; (405210 <_uart_init+0x90>)
  4051ac:	6878      	ldr	r0, [r7, #4]
  4051ae:	4b19      	ldr	r3, [pc, #100]	; (405214 <_uart_init+0x94>)
  4051b0:	4798      	blx	r3

	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
  4051b2:	21ac      	movs	r1, #172	; 0xac
  4051b4:	6878      	ldr	r0, [r7, #4]
  4051b6:	4b18      	ldr	r3, [pc, #96]	; (405218 <_uart_init+0x98>)
  4051b8:	4798      	blx	r3
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  4051ba:	f44f 7180 	mov.w	r1, #256	; 0x100
  4051be:	6878      	ldr	r0, [r7, #4]
  4051c0:	4b15      	ldr	r3, [pc, #84]	; (405218 <_uart_init+0x98>)
  4051c2:	4798      	blx	r3

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  4051c4:	7bfa      	ldrb	r2, [r7, #15]
  4051c6:	4915      	ldr	r1, [pc, #84]	; (40521c <_uart_init+0x9c>)
  4051c8:	4613      	mov	r3, r2
  4051ca:	005b      	lsls	r3, r3, #1
  4051cc:	4413      	add	r3, r2
  4051ce:	009b      	lsls	r3, r3, #2
  4051d0:	440b      	add	r3, r1
  4051d2:	3304      	adds	r3, #4
  4051d4:	681b      	ldr	r3, [r3, #0]
  4051d6:	4619      	mov	r1, r3
  4051d8:	6878      	ldr	r0, [r7, #4]
  4051da:	4b11      	ldr	r3, [pc, #68]	; (405220 <_uart_init+0xa0>)
  4051dc:	4798      	blx	r3
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);
  4051de:	7bfa      	ldrb	r2, [r7, #15]
  4051e0:	490e      	ldr	r1, [pc, #56]	; (40521c <_uart_init+0x9c>)
  4051e2:	4613      	mov	r3, r2
  4051e4:	005b      	lsls	r3, r3, #1
  4051e6:	4413      	add	r3, r2
  4051e8:	009b      	lsls	r3, r3, #2
  4051ea:	440b      	add	r3, r1
  4051ec:	3308      	adds	r3, #8
  4051ee:	681b      	ldr	r3, [r3, #0]
  4051f0:	4619      	mov	r1, r3
  4051f2:	6878      	ldr	r0, [r7, #4]
  4051f4:	4b0b      	ldr	r3, [pc, #44]	; (405224 <_uart_init+0xa4>)
  4051f6:	4798      	blx	r3

	return ERR_NONE;
  4051f8:	2300      	movs	r3, #0
}
  4051fa:	4618      	mov	r0, r3
  4051fc:	3710      	adds	r7, #16
  4051fe:	46bd      	mov	sp, r7
  405200:	bd80      	pop	{r7, pc}
  405202:	bf00      	nop
  405204:	00409734 	.word	0x00409734
  405208:	004027fd 	.word	0x004027fd
  40520c:	00405105 	.word	0x00405105
  405210:	55415200 	.word	0x55415200
  405214:	00404b17 	.word	0x00404b17
  405218:	00404b35 	.word	0x00404b35
  40521c:	20400008 	.word	0x20400008
  405220:	00404adf 	.word	0x00404adf
  405224:	00404afb 	.word	0x00404afb

00405228 <__NVIC_EnableIRQ>:
{
  405228:	b480      	push	{r7}
  40522a:	b083      	sub	sp, #12
  40522c:	af00      	add	r7, sp, #0
  40522e:	4603      	mov	r3, r0
  405230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  405232:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405236:	2b00      	cmp	r3, #0
  405238:	db0b      	blt.n	405252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  40523a:	4909      	ldr	r1, [pc, #36]	; (405260 <__NVIC_EnableIRQ+0x38>)
  40523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  405240:	095b      	lsrs	r3, r3, #5
  405242:	79fa      	ldrb	r2, [r7, #7]
  405244:	f002 021f 	and.w	r2, r2, #31
  405248:	2001      	movs	r0, #1
  40524a:	fa00 f202 	lsl.w	r2, r0, r2
  40524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  405252:	bf00      	nop
  405254:	370c      	adds	r7, #12
  405256:	46bd      	mov	sp, r7
  405258:	f85d 7b04 	ldr.w	r7, [sp], #4
  40525c:	4770      	bx	lr
  40525e:	bf00      	nop
  405260:	e000e100 	.word	0xe000e100

00405264 <hri_usbhs_get_DEVEPTISR_RXSTPI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_RXOUTI;
}

static inline bool hri_usbhs_get_DEVEPTISR_RXSTPI_bit(const void *const hw, uint8_t index)
{
  405264:	b480      	push	{r7}
  405266:	b083      	sub	sp, #12
  405268:	af00      	add	r7, sp, #0
  40526a:	6078      	str	r0, [r7, #4]
  40526c:	460b      	mov	r3, r1
  40526e:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  405270:	78fa      	ldrb	r2, [r7, #3]
  405272:	687b      	ldr	r3, [r7, #4]
  405274:	324c      	adds	r2, #76	; 0x4c
  405276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40527a:	089b      	lsrs	r3, r3, #2
  40527c:	f003 0301 	and.w	r3, r3, #1
  405280:	2b00      	cmp	r3, #0
  405282:	bf14      	ite	ne
  405284:	2301      	movne	r3, #1
  405286:	2300      	moveq	r3, #0
  405288:	b2db      	uxtb	r3, r3
}
  40528a:	4618      	mov	r0, r3
  40528c:	370c      	adds	r7, #12
  40528e:	46bd      	mov	sp, r7
  405290:	f85d 7b04 	ldr.w	r7, [sp], #4
  405294:	4770      	bx	lr

00405296 <hri_usbhs_get_DEVEPTISR_STALLEDI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_OVERFI;
}

static inline bool hri_usbhs_get_DEVEPTISR_STALLEDI_bit(const void *const hw, uint8_t index)
{
  405296:	b480      	push	{r7}
  405298:	b083      	sub	sp, #12
  40529a:	af00      	add	r7, sp, #0
  40529c:	6078      	str	r0, [r7, #4]
  40529e:	460b      	mov	r3, r1
  4052a0:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  4052a2:	78fa      	ldrb	r2, [r7, #3]
  4052a4:	687b      	ldr	r3, [r7, #4]
  4052a6:	324c      	adds	r2, #76	; 0x4c
  4052a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4052ac:	099b      	lsrs	r3, r3, #6
  4052ae:	f003 0301 	and.w	r3, r3, #1
  4052b2:	2b00      	cmp	r3, #0
  4052b4:	bf14      	ite	ne
  4052b6:	2301      	movne	r3, #1
  4052b8:	2300      	moveq	r3, #0
  4052ba:	b2db      	uxtb	r3, r3
}
  4052bc:	4618      	mov	r0, r3
  4052be:	370c      	adds	r7, #12
  4052c0:	46bd      	mov	sp, r7
  4052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052c6:	4770      	bx	lr

004052c8 <hri_usbhs_get_DEVEPTISR_RWALL_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_SHORTPACKET;
}

static inline bool hri_usbhs_get_DEVEPTISR_RWALL_bit(const void *const hw, uint8_t index)
{
  4052c8:	b480      	push	{r7}
  4052ca:	b083      	sub	sp, #12
  4052cc:	af00      	add	r7, sp, #0
  4052ce:	6078      	str	r0, [r7, #4]
  4052d0:	460b      	mov	r3, r1
  4052d2:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  4052d4:	78fa      	ldrb	r2, [r7, #3]
  4052d6:	687b      	ldr	r3, [r7, #4]
  4052d8:	324c      	adds	r2, #76	; 0x4c
  4052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4052de:	0c1b      	lsrs	r3, r3, #16
  4052e0:	f003 0301 	and.w	r3, r3, #1
  4052e4:	2b00      	cmp	r3, #0
  4052e6:	bf14      	ite	ne
  4052e8:	2301      	movne	r3, #1
  4052ea:	2300      	moveq	r3, #0
  4052ec:	b2db      	uxtb	r3, r3
}
  4052ee:	4618      	mov	r0, r3
  4052f0:	370c      	adds	r7, #12
  4052f2:	46bd      	mov	sp, r7
  4052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052f8:	4770      	bx	lr

004052fa <hri_usbhs_get_DEVEPTISR_CFGOK_bit>:
{
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CTRLDIR) >> USBHS_DEVEPTISR_CTRLDIR_Pos;
}

static inline bool hri_usbhs_get_DEVEPTISR_CFGOK_bit(const void *const hw, uint8_t index)
{
  4052fa:	b480      	push	{r7}
  4052fc:	b083      	sub	sp, #12
  4052fe:	af00      	add	r7, sp, #0
  405300:	6078      	str	r0, [r7, #4]
  405302:	460b      	mov	r3, r1
  405304:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_CFGOK) >> USBHS_DEVEPTISR_CFGOK_Pos;
  405306:	78fa      	ldrb	r2, [r7, #3]
  405308:	687b      	ldr	r3, [r7, #4]
  40530a:	324c      	adds	r2, #76	; 0x4c
  40530c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405310:	0c9b      	lsrs	r3, r3, #18
  405312:	f003 0301 	and.w	r3, r3, #1
  405316:	2b00      	cmp	r3, #0
  405318:	bf14      	ite	ne
  40531a:	2301      	movne	r3, #1
  40531c:	2300      	moveq	r3, #0
  40531e:	b2db      	uxtb	r3, r3
}
  405320:	4618      	mov	r0, r3
  405322:	370c      	adds	r7, #12
  405324:	46bd      	mov	sp, r7
  405326:	f85d 7b04 	ldr.w	r7, [sp], #4
  40532a:	4770      	bx	lr

0040532c <hri_usbhs_get_DEVEPTISR_reg>:
	return tmp;
}

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_get_DEVEPTISR_reg(const void *const hw, uint8_t index,
                                                                    hri_usbhs_deveptisr_reg_t mask)
{
  40532c:	b480      	push	{r7}
  40532e:	b087      	sub	sp, #28
  405330:	af00      	add	r7, sp, #0
  405332:	60f8      	str	r0, [r7, #12]
  405334:	460b      	mov	r3, r1
  405336:	607a      	str	r2, [r7, #4]
  405338:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  40533a:	7afa      	ldrb	r2, [r7, #11]
  40533c:	68fb      	ldr	r3, [r7, #12]
  40533e:	324c      	adds	r2, #76	; 0x4c
  405340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405344:	617b      	str	r3, [r7, #20]
	tmp &= mask;
  405346:	697a      	ldr	r2, [r7, #20]
  405348:	687b      	ldr	r3, [r7, #4]
  40534a:	4013      	ands	r3, r2
  40534c:	617b      	str	r3, [r7, #20]
	return tmp;
  40534e:	697b      	ldr	r3, [r7, #20]
}
  405350:	4618      	mov	r0, r3
  405352:	371c      	adds	r7, #28
  405354:	46bd      	mov	sp, r7
  405356:	f85d 7b04 	ldr.w	r7, [sp], #4
  40535a:	4770      	bx	lr

0040535c <hri_usbhs_read_DEVEPTISR_reg>:

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_read_DEVEPTISR_reg(const void *const hw, uint8_t index)
{
  40535c:	b480      	push	{r7}
  40535e:	b083      	sub	sp, #12
  405360:	af00      	add	r7, sp, #0
  405362:	6078      	str	r0, [r7, #4]
  405364:	460b      	mov	r3, r1
  405366:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  405368:	78fa      	ldrb	r2, [r7, #3]
  40536a:	687b      	ldr	r3, [r7, #4]
  40536c:	324c      	adds	r2, #76	; 0x4c
  40536e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  405372:	4618      	mov	r0, r3
  405374:	370c      	adds	r7, #12
  405376:	46bd      	mov	sp, r7
  405378:	f85d 7b04 	ldr.w	r7, [sp], #4
  40537c:	4770      	bx	lr

0040537e <hri_usbhs_write_DEVEPTICR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
  40537e:	b480      	push	{r7}
  405380:	b085      	sub	sp, #20
  405382:	af00      	add	r7, sp, #0
  405384:	60f8      	str	r0, [r7, #12]
  405386:	460b      	mov	r3, r1
  405388:	607a      	str	r2, [r7, #4]
  40538a:	72fb      	strb	r3, [r7, #11]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  40538c:	7afa      	ldrb	r2, [r7, #11]
  40538e:	68fb      	ldr	r3, [r7, #12]
  405390:	3258      	adds	r2, #88	; 0x58
  405392:	6879      	ldr	r1, [r7, #4]
  405394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  405398:	bf00      	nop
  40539a:	3714      	adds	r7, #20
  40539c:	46bd      	mov	sp, r7
  40539e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053a2:	4770      	bx	lr

004053a4 <hri_usbhs_get_SR_CLKUSABLE_bit>:
{
	((Usbhs *)hw)->USBHS_SCR = USBHS_SR_RDERRI;
}

static inline bool hri_usbhs_get_SR_CLKUSABLE_bit(const void *const hw)
{
  4053a4:	b480      	push	{r7}
  4053a6:	b083      	sub	sp, #12
  4053a8:	af00      	add	r7, sp, #0
  4053aa:	6078      	str	r0, [r7, #4]
	return (((Usbhs *)hw)->USBHS_SR & USBHS_SR_CLKUSABLE) >> USBHS_SR_CLKUSABLE_Pos;
  4053ac:	687b      	ldr	r3, [r7, #4]
  4053ae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
  4053b2:	0b9b      	lsrs	r3, r3, #14
  4053b4:	f003 0301 	and.w	r3, r3, #1
  4053b8:	2b00      	cmp	r3, #0
  4053ba:	bf14      	ite	ne
  4053bc:	2301      	movne	r3, #1
  4053be:	2300      	moveq	r3, #0
  4053c0:	b2db      	uxtb	r3, r3
}
  4053c2:	4618      	mov	r0, r3
  4053c4:	370c      	adds	r7, #12
  4053c6:	46bd      	mov	sp, r7
  4053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053cc:	4770      	bx	lr

004053ce <hri_usbhs_set_DEVIMR_SUSPE_bit>:
{
	((Usbhs *)hw)->USBHS_SCR = data;
}

static inline void hri_usbhs_set_DEVIMR_SUSPE_bit(const void *const hw)
{
  4053ce:	b480      	push	{r7}
  4053d0:	b083      	sub	sp, #12
  4053d2:	af00      	add	r7, sp, #0
  4053d4:	6078      	str	r0, [r7, #4]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  4053d6:	687b      	ldr	r3, [r7, #4]
  4053d8:	2201      	movs	r2, #1
  4053da:	619a      	str	r2, [r3, #24]
}
  4053dc:	bf00      	nop
  4053de:	370c      	adds	r7, #12
  4053e0:	46bd      	mov	sp, r7
  4053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053e6:	4770      	bx	lr

004053e8 <hri_usbhs_set_DEVIMR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_DMA_7;
}

static inline void hri_usbhs_set_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  4053e8:	b480      	push	{r7}
  4053ea:	b083      	sub	sp, #12
  4053ec:	af00      	add	r7, sp, #0
  4053ee:	6078      	str	r0, [r7, #4]
  4053f0:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4053f2:	687b      	ldr	r3, [r7, #4]
  4053f4:	683a      	ldr	r2, [r7, #0]
  4053f6:	619a      	str	r2, [r3, #24]
}
  4053f8:	bf00      	nop
  4053fa:	370c      	adds	r7, #12
  4053fc:	46bd      	mov	sp, r7
  4053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405402:	4770      	bx	lr

00405404 <hri_usbhs_read_DEVIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devimr_reg_t hri_usbhs_read_DEVIMR_reg(const void *const hw)
{
  405404:	b480      	push	{r7}
  405406:	b083      	sub	sp, #12
  405408:	af00      	add	r7, sp, #0
  40540a:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  40540c:	687b      	ldr	r3, [r7, #4]
  40540e:	691b      	ldr	r3, [r3, #16]
}
  405410:	4618      	mov	r0, r3
  405412:	370c      	adds	r7, #12
  405414:	46bd      	mov	sp, r7
  405416:	f85d 7b04 	ldr.w	r7, [sp], #4
  40541a:	4770      	bx	lr

0040541c <hri_usbhs_clear_DEVIMR_reg>:
	((Usbhs *)hw)->USBHS_DEVIER = data;
	((Usbhs *)hw)->USBHS_DEVIDR = ~data;
}

static inline void hri_usbhs_clear_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  40541c:	b480      	push	{r7}
  40541e:	b083      	sub	sp, #12
  405420:	af00      	add	r7, sp, #0
  405422:	6078      	str	r0, [r7, #4]
  405424:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  405426:	687b      	ldr	r3, [r7, #4]
  405428:	683a      	ldr	r2, [r7, #0]
  40542a:	615a      	str	r2, [r3, #20]
}
  40542c:	bf00      	nop
  40542e:	370c      	adds	r7, #12
  405430:	46bd      	mov	sp, r7
  405432:	f85d 7b04 	ldr.w	r7, [sp], #4
  405436:	4770      	bx	lr

00405438 <hri_usbhs_read_DEVISR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devisr_reg_t hri_usbhs_read_DEVISR_reg(const void *const hw)
{
  405438:	b480      	push	{r7}
  40543a:	b083      	sub	sp, #12
  40543c:	af00      	add	r7, sp, #0
  40543e:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVISR;
  405440:	687b      	ldr	r3, [r7, #4]
  405442:	685b      	ldr	r3, [r3, #4]
}
  405444:	4618      	mov	r0, r3
  405446:	370c      	adds	r7, #12
  405448:	46bd      	mov	sp, r7
  40544a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40544e:	4770      	bx	lr

00405450 <hri_usbhs_read_DEVEPTIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_deveptimr_reg_t hri_usbhs_read_DEVEPTIMR_reg(const void *const hw, uint8_t index)
{
  405450:	b480      	push	{r7}
  405452:	b083      	sub	sp, #12
  405454:	af00      	add	r7, sp, #0
  405456:	6078      	str	r0, [r7, #4]
  405458:	460b      	mov	r3, r1
  40545a:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  40545c:	78fa      	ldrb	r2, [r7, #3]
  40545e:	687b      	ldr	r3, [r7, #4]
  405460:	3270      	adds	r2, #112	; 0x70
  405462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  405466:	4618      	mov	r0, r3
  405468:	370c      	adds	r7, #12
  40546a:	46bd      	mov	sp, r7
  40546c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405470:	4770      	bx	lr

00405472 <hri_usbhs_set_DEVCTRL_ADDEN_bit>:
{
	return ((Usbhs *)hw)->USBHS_HSTPIPIMR[index];
}

static inline void hri_usbhs_set_DEVCTRL_ADDEN_bit(const void *const hw)
{
  405472:	b480      	push	{r7}
  405474:	b083      	sub	sp, #12
  405476:	af00      	add	r7, sp, #0
  405478:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  40547a:	687b      	ldr	r3, [r7, #4]
  40547c:	681b      	ldr	r3, [r3, #0]
  40547e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  405482:	687b      	ldr	r3, [r7, #4]
  405484:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405486:	bf00      	nop
  405488:	370c      	adds	r7, #12
  40548a:	46bd      	mov	sp, r7
  40548c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405490:	4770      	bx	lr

00405492 <hri_usbhs_clear_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
  405492:	b480      	push	{r7}
  405494:	b083      	sub	sp, #12
  405496:	af00      	add	r7, sp, #0
  405498:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  40549a:	687b      	ldr	r3, [r7, #4]
  40549c:	681b      	ldr	r3, [r3, #0]
  40549e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  4054a2:	687b      	ldr	r3, [r7, #4]
  4054a4:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4054a6:	bf00      	nop
  4054a8:	370c      	adds	r7, #12
  4054aa:	46bd      	mov	sp, r7
  4054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054b0:	4770      	bx	lr

004054b2 <hri_usbhs_clear_DEVCTRL_DETACH_bit>:
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVCTRL_DETACH_bit(const void *const hw)
{
  4054b2:	b480      	push	{r7}
  4054b4:	b083      	sub	sp, #12
  4054b6:	af00      	add	r7, sp, #0
  4054b8:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_DETACH;
  4054ba:	687b      	ldr	r3, [r7, #4]
  4054bc:	681b      	ldr	r3, [r3, #0]
  4054be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
  4054c2:	687b      	ldr	r3, [r7, #4]
  4054c4:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4054c6:	bf00      	nop
  4054c8:	370c      	adds	r7, #12
  4054ca:	46bd      	mov	sp, r7
  4054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054d0:	4770      	bx	lr

004054d2 <hri_usbhs_write_DEVCTRL_UADD_bf>:
	tmp = (tmp & USBHS_DEVCTRL_UADD(mask)) >> USBHS_DEVCTRL_UADD_Pos;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  4054d2:	b480      	push	{r7}
  4054d4:	b085      	sub	sp, #20
  4054d6:	af00      	add	r7, sp, #0
  4054d8:	6078      	str	r0, [r7, #4]
  4054da:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  4054dc:	687b      	ldr	r3, [r7, #4]
  4054de:	681b      	ldr	r3, [r3, #0]
  4054e0:	60fb      	str	r3, [r7, #12]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  4054e2:	68fb      	ldr	r3, [r7, #12]
  4054e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4054e8:	60fb      	str	r3, [r7, #12]
	tmp |= USBHS_DEVCTRL_UADD(data);
  4054ea:	683b      	ldr	r3, [r7, #0]
  4054ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4054f0:	68fa      	ldr	r2, [r7, #12]
  4054f2:	4313      	orrs	r3, r2
  4054f4:	60fb      	str	r3, [r7, #12]
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  4054f6:	687b      	ldr	r3, [r7, #4]
  4054f8:	68fa      	ldr	r2, [r7, #12]
  4054fa:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4054fc:	bf00      	nop
  4054fe:	3714      	adds	r7, #20
  405500:	46bd      	mov	sp, r7
  405502:	f85d 7b04 	ldr.w	r7, [sp], #4
  405506:	4770      	bx	lr

00405508 <hri_usbhs_write_DEVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_reg(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  405508:	b480      	push	{r7}
  40550a:	b083      	sub	sp, #12
  40550c:	af00      	add	r7, sp, #0
  40550e:	6078      	str	r0, [r7, #4]
  405510:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  405512:	687b      	ldr	r3, [r7, #4]
  405514:	683a      	ldr	r2, [r7, #0]
  405516:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405518:	bf00      	nop
  40551a:	370c      	adds	r7, #12
  40551c:	46bd      	mov	sp, r7
  40551e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405522:	4770      	bx	lr

00405524 <hri_usbhs_set_DEVEPT_reg>:
	((Usbhs *)hw)->USBHS_DEVEPT ^= USBHS_DEVEPT_EPRST9;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t mask)
{
  405524:	b480      	push	{r7}
  405526:	b083      	sub	sp, #12
  405528:	af00      	add	r7, sp, #0
  40552a:	6078      	str	r0, [r7, #4]
  40552c:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT |= mask;
  40552e:	687b      	ldr	r3, [r7, #4]
  405530:	69da      	ldr	r2, [r3, #28]
  405532:	683b      	ldr	r3, [r7, #0]
  405534:	431a      	orrs	r2, r3
  405536:	687b      	ldr	r3, [r7, #4]
  405538:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40553a:	bf00      	nop
  40553c:	370c      	adds	r7, #12
  40553e:	46bd      	mov	sp, r7
  405540:	f85d 7b04 	ldr.w	r7, [sp], #4
  405544:	4770      	bx	lr

00405546 <hri_usbhs_write_DEVEPT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t data)
{
  405546:	b480      	push	{r7}
  405548:	b083      	sub	sp, #12
  40554a:	af00      	add	r7, sp, #0
  40554c:	6078      	str	r0, [r7, #4]
  40554e:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT = data;
  405550:	687b      	ldr	r3, [r7, #4]
  405552:	683a      	ldr	r2, [r7, #0]
  405554:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405556:	bf00      	nop
  405558:	370c      	adds	r7, #12
  40555a:	46bd      	mov	sp, r7
  40555c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405560:	4770      	bx	lr

00405562 <hri_usbhs_clear_DEVEPT_reg>:

static inline void hri_usbhs_clear_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t mask)
{
  405562:	b480      	push	{r7}
  405564:	b083      	sub	sp, #12
  405566:	af00      	add	r7, sp, #0
  405568:	6078      	str	r0, [r7, #4]
  40556a:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT &= ~mask;
  40556c:	687b      	ldr	r3, [r7, #4]
  40556e:	69da      	ldr	r2, [r3, #28]
  405570:	683b      	ldr	r3, [r7, #0]
  405572:	43db      	mvns	r3, r3
  405574:	401a      	ands	r2, r3
  405576:	687b      	ldr	r3, [r7, #4]
  405578:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40557a:	bf00      	nop
  40557c:	370c      	adds	r7, #12
  40557e:	46bd      	mov	sp, r7
  405580:	f85d 7b04 	ldr.w	r7, [sp], #4
  405584:	4770      	bx	lr

00405586 <hri_usbhs_read_DEVEPT_reg>:
	((Usbhs *)hw)->USBHS_DEVEPT ^= mask;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_devept_reg_t hri_usbhs_read_DEVEPT_reg(const void *const hw)
{
  405586:	b480      	push	{r7}
  405588:	b083      	sub	sp, #12
  40558a:	af00      	add	r7, sp, #0
  40558c:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVEPT;
  40558e:	687b      	ldr	r3, [r7, #4]
  405590:	69db      	ldr	r3, [r3, #28]
}
  405592:	4618      	mov	r0, r3
  405594:	370c      	adds	r7, #12
  405596:	46bd      	mov	sp, r7
  405598:	f85d 7b04 	ldr.w	r7, [sp], #4
  40559c:	4770      	bx	lr

0040559e <hri_usbhs_set_DEVEPTCFG_ALLOC_bit>:

static inline void hri_usbhs_set_DEVEPTCFG_ALLOC_bit(const void *const hw, uint8_t index)
{
  40559e:	b480      	push	{r7}
  4055a0:	b083      	sub	sp, #12
  4055a2:	af00      	add	r7, sp, #0
  4055a4:	6078      	str	r0, [r7, #4]
  4055a6:	460b      	mov	r3, r1
  4055a8:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_ALLOC;
  4055aa:	78fa      	ldrb	r2, [r7, #3]
  4055ac:	78f9      	ldrb	r1, [r7, #3]
  4055ae:	687b      	ldr	r3, [r7, #4]
  4055b0:	3140      	adds	r1, #64	; 0x40
  4055b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  4055b6:	f043 0102 	orr.w	r1, r3, #2
  4055ba:	687b      	ldr	r3, [r7, #4]
  4055bc:	3240      	adds	r2, #64	; 0x40
  4055be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4055c2:	bf00      	nop
  4055c4:	370c      	adds	r7, #12
  4055c6:	46bd      	mov	sp, r7
  4055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055cc:	4770      	bx	lr

004055ce <hri_usbhs_clear_DEVEPTCFG_ALLOC_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPTCFG_ALLOC_bit(const void *const hw, uint8_t index)
{
  4055ce:	b480      	push	{r7}
  4055d0:	b083      	sub	sp, #12
  4055d2:	af00      	add	r7, sp, #0
  4055d4:	6078      	str	r0, [r7, #4]
  4055d6:	460b      	mov	r3, r1
  4055d8:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_ALLOC;
  4055da:	78fa      	ldrb	r2, [r7, #3]
  4055dc:	78f9      	ldrb	r1, [r7, #3]
  4055de:	687b      	ldr	r3, [r7, #4]
  4055e0:	3140      	adds	r1, #64	; 0x40
  4055e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  4055e6:	f023 0102 	bic.w	r1, r3, #2
  4055ea:	687b      	ldr	r3, [r7, #4]
  4055ec:	3240      	adds	r2, #64	; 0x40
  4055ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4055f2:	bf00      	nop
  4055f4:	370c      	adds	r7, #12
  4055f6:	46bd      	mov	sp, r7
  4055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055fc:	4770      	bx	lr

004055fe <hri_usbhs_set_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPDIR;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  4055fe:	b480      	push	{r7}
  405600:	b083      	sub	sp, #12
  405602:	af00      	add	r7, sp, #0
  405604:	6078      	str	r0, [r7, #4]
  405606:	460b      	mov	r3, r1
  405608:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  40560a:	78fa      	ldrb	r2, [r7, #3]
  40560c:	78f9      	ldrb	r1, [r7, #3]
  40560e:	687b      	ldr	r3, [r7, #4]
  405610:	3140      	adds	r1, #64	; 0x40
  405612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  405616:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  40561a:	687b      	ldr	r3, [r7, #4]
  40561c:	3240      	adds	r2, #64	; 0x40
  40561e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405622:	bf00      	nop
  405624:	370c      	adds	r7, #12
  405626:	46bd      	mov	sp, r7
  405628:	f85d 7b04 	ldr.w	r7, [sp], #4
  40562c:	4770      	bx	lr

0040562e <hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  40562e:	b480      	push	{r7}
  405630:	b083      	sub	sp, #12
  405632:	af00      	add	r7, sp, #0
  405634:	6078      	str	r0, [r7, #4]
  405636:	460b      	mov	r3, r1
  405638:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  40563a:	78fa      	ldrb	r2, [r7, #3]
  40563c:	78f9      	ldrb	r1, [r7, #3]
  40563e:	687b      	ldr	r3, [r7, #4]
  405640:	3140      	adds	r1, #64	; 0x40
  405642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  405646:	f423 7100 	bic.w	r1, r3, #512	; 0x200
  40564a:	687b      	ldr	r3, [r7, #4]
  40564c:	3240      	adds	r2, #64	; 0x40
  40564e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405652:	bf00      	nop
  405654:	370c      	adds	r7, #12
  405656:	46bd      	mov	sp, r7
  405658:	f85d 7b04 	ldr.w	r7, [sp], #4
  40565c:	4770      	bx	lr

0040565e <hri_usbhs_read_DEVEPTCFG_EPTYPE_bf>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPTYPE(mask);
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_deveptcfg_reg_t hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(const void *const hw, uint8_t index)
{
  40565e:	b480      	push	{r7}
  405660:	b085      	sub	sp, #20
  405662:	af00      	add	r7, sp, #0
  405664:	6078      	str	r0, [r7, #4]
  405666:	460b      	mov	r3, r1
  405668:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  40566a:	78fa      	ldrb	r2, [r7, #3]
  40566c:	687b      	ldr	r3, [r7, #4]
  40566e:	3240      	adds	r2, #64	; 0x40
  405670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405674:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_DEVEPTCFG_EPTYPE_Msk) >> USBHS_DEVEPTCFG_EPTYPE_Pos;
  405676:	68fb      	ldr	r3, [r7, #12]
  405678:	0adb      	lsrs	r3, r3, #11
  40567a:	f003 0303 	and.w	r3, r3, #3
  40567e:	60fb      	str	r3, [r7, #12]
	return tmp;
  405680:	68fb      	ldr	r3, [r7, #12]
}
  405682:	4618      	mov	r0, r3
  405684:	3714      	adds	r7, #20
  405686:	46bd      	mov	sp, r7
  405688:	f85d 7b04 	ldr.w	r7, [sp], #4
  40568c:	4770      	bx	lr

0040568e <hri_usbhs_write_DEVEPTCFG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVEPTCFG_reg(const void *const hw, uint8_t index, hri_usbhs_deveptcfg_reg_t data)
{
  40568e:	b480      	push	{r7}
  405690:	b085      	sub	sp, #20
  405692:	af00      	add	r7, sp, #0
  405694:	60f8      	str	r0, [r7, #12]
  405696:	460b      	mov	r3, r1
  405698:	607a      	str	r2, [r7, #4]
  40569a:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = data;
  40569c:	7afa      	ldrb	r2, [r7, #11]
  40569e:	68fb      	ldr	r3, [r7, #12]
  4056a0:	3240      	adds	r2, #64	; 0x40
  4056a2:	6879      	ldr	r1, [r7, #4]
  4056a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4056a8:	bf00      	nop
  4056aa:	3714      	adds	r7, #20
  4056ac:	46bd      	mov	sp, r7
  4056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056b2:	4770      	bx	lr

004056b4 <hri_usbhs_read_DEVEPTCFG_reg>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= mask;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_deveptcfg_reg_t hri_usbhs_read_DEVEPTCFG_reg(const void *const hw, uint8_t index)
{
  4056b4:	b480      	push	{r7}
  4056b6:	b083      	sub	sp, #12
  4056b8:	af00      	add	r7, sp, #0
  4056ba:	6078      	str	r0, [r7, #4]
  4056bc:	460b      	mov	r3, r1
  4056be:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  4056c0:	78fa      	ldrb	r2, [r7, #3]
  4056c2:	687b      	ldr	r3, [r7, #4]
  4056c4:	3240      	adds	r2, #64	; 0x40
  4056c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  4056ca:	4618      	mov	r0, r3
  4056cc:	370c      	adds	r7, #12
  4056ce:	46bd      	mov	sp, r7
  4056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056d4:	4770      	bx	lr

004056d6 <hri_usbhs_clear_CTRL_FRZCLK_bit>:
	((Usbhs *)hw)->USBHS_CTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_CTRL_FRZCLK_bit(const void *const hw)
{
  4056d6:	b480      	push	{r7}
  4056d8:	b083      	sub	sp, #12
  4056da:	af00      	add	r7, sp, #0
  4056dc:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL &= ~USBHS_CTRL_FRZCLK;
  4056de:	687b      	ldr	r3, [r7, #4]
  4056e0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  4056e4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
  4056e8:	687b      	ldr	r3, [r7, #4]
  4056ea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4056ee:	bf00      	nop
  4056f0:	370c      	adds	r7, #12
  4056f2:	46bd      	mov	sp, r7
  4056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056f8:	4770      	bx	lr

004056fa <hri_usbhs_set_CTRL_USBE_bit>:
	((Usbhs *)hw)->USBHS_CTRL ^= USBHS_CTRL_FRZCLK;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_CTRL_USBE_bit(const void *const hw)
{
  4056fa:	b480      	push	{r7}
  4056fc:	b083      	sub	sp, #12
  4056fe:	af00      	add	r7, sp, #0
  405700:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
  405702:	687b      	ldr	r3, [r7, #4]
  405704:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  405708:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  40570c:	687b      	ldr	r3, [r7, #4]
  40570e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405712:	bf00      	nop
  405714:	370c      	adds	r7, #12
  405716:	46bd      	mov	sp, r7
  405718:	f85d 7b04 	ldr.w	r7, [sp], #4
  40571c:	4770      	bx	lr

0040571e <hri_usbhs_get_CTRL_USBE_bit>:

static inline bool hri_usbhs_get_CTRL_USBE_bit(const void *const hw)
{
  40571e:	b480      	push	{r7}
  405720:	b085      	sub	sp, #20
  405722:	af00      	add	r7, sp, #0
  405724:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  405726:	687b      	ldr	r3, [r7, #4]
  405728:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  40572c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_CTRL_USBE) >> USBHS_CTRL_USBE_Pos;
  40572e:	68fb      	ldr	r3, [r7, #12]
  405730:	0bdb      	lsrs	r3, r3, #15
  405732:	f003 0301 	and.w	r3, r3, #1
  405736:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
  405738:	68fb      	ldr	r3, [r7, #12]
  40573a:	2b00      	cmp	r3, #0
  40573c:	bf14      	ite	ne
  40573e:	2301      	movne	r3, #1
  405740:	2300      	moveq	r3, #0
  405742:	b2db      	uxtb	r3, r3
}
  405744:	4618      	mov	r0, r3
  405746:	3714      	adds	r7, #20
  405748:	46bd      	mov	sp, r7
  40574a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40574e:	4770      	bx	lr

00405750 <hri_usbhs_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_CTRL_reg(const void *const hw, hri_usbhs_ctrl_reg_t data)
{
  405750:	b480      	push	{r7}
  405752:	b083      	sub	sp, #12
  405754:	af00      	add	r7, sp, #0
  405756:	6078      	str	r0, [r7, #4]
  405758:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL = data;
  40575a:	687b      	ldr	r3, [r7, #4]
  40575c:	683a      	ldr	r2, [r7, #0]
  40575e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405762:	bf00      	nop
  405764:	370c      	adds	r7, #12
  405766:	46bd      	mov	sp, r7
  405768:	f85d 7b04 	ldr.w	r7, [sp], #4
  40576c:	4770      	bx	lr

0040576e <hri_usbhs_write_DEVICR_reg>:
{
	return ((Usbhs *)hw)->USBHS_CTRL;
}

static inline void hri_usbhs_write_DEVICR_reg(const void *const hw, hri_usbhs_devicr_reg_t data)
{
  40576e:	b480      	push	{r7}
  405770:	b083      	sub	sp, #12
  405772:	af00      	add	r7, sp, #0
  405774:	6078      	str	r0, [r7, #4]
  405776:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVICR = data;
  405778:	687b      	ldr	r3, [r7, #4]
  40577a:	683a      	ldr	r2, [r7, #0]
  40577c:	609a      	str	r2, [r3, #8]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40577e:	bf00      	nop
  405780:	370c      	adds	r7, #12
  405782:	46bd      	mov	sp, r7
  405784:	f85d 7b04 	ldr.w	r7, [sp], #4
  405788:	4770      	bx	lr

0040578a <hri_usbhs_write_DEVEPTIFR_reg>:
	((Usbhs *)hw)->USBHS_DEVIFR = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_write_DEVEPTIFR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptifr_reg_t data)
{
  40578a:	b480      	push	{r7}
  40578c:	b085      	sub	sp, #20
  40578e:	af00      	add	r7, sp, #0
  405790:	60f8      	str	r0, [r7, #12]
  405792:	460b      	mov	r3, r1
  405794:	607a      	str	r2, [r7, #4]
  405796:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  405798:	7afa      	ldrb	r2, [r7, #11]
  40579a:	68fb      	ldr	r3, [r7, #12]
  40579c:	3264      	adds	r2, #100	; 0x64
  40579e:	6879      	ldr	r1, [r7, #4]
  4057a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4057a4:	bf00      	nop
  4057a6:	3714      	adds	r7, #20
  4057a8:	46bd      	mov	sp, r7
  4057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057ae:	4770      	bx	lr

004057b0 <hri_usbhs_write_DEVEPTIER_reg>:

static inline void hri_usbhs_write_DEVEPTIER_reg(const void *const hw, uint8_t index, hri_usbhs_deveptier_reg_t data)
{
  4057b0:	b480      	push	{r7}
  4057b2:	b085      	sub	sp, #20
  4057b4:	af00      	add	r7, sp, #0
  4057b6:	60f8      	str	r0, [r7, #12]
  4057b8:	460b      	mov	r3, r1
  4057ba:	607a      	str	r2, [r7, #4]
  4057bc:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  4057be:	7afa      	ldrb	r2, [r7, #11]
  4057c0:	68fb      	ldr	r3, [r7, #12]
  4057c2:	327c      	adds	r2, #124	; 0x7c
  4057c4:	6879      	ldr	r1, [r7, #4]
  4057c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4057ca:	bf00      	nop
  4057cc:	3714      	adds	r7, #20
  4057ce:	46bd      	mov	sp, r7
  4057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057d4:	4770      	bx	lr

004057d6 <hri_usbhs_write_DEVEPTIDR_reg>:

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
  4057d6:	b480      	push	{r7}
  4057d8:	b085      	sub	sp, #20
  4057da:	af00      	add	r7, sp, #0
  4057dc:	60f8      	str	r0, [r7, #12]
  4057de:	460b      	mov	r3, r1
  4057e0:	607a      	str	r2, [r7, #4]
  4057e2:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  4057e4:	7afa      	ldrb	r2, [r7, #11]
  4057e6:	68fb      	ldr	r3, [r7, #12]
  4057e8:	3288      	adds	r2, #136	; 0x88
  4057ea:	6879      	ldr	r1, [r7, #4]
  4057ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4057f0:	bf00      	nop
  4057f2:	3714      	adds	r7, #20
  4057f4:	46bd      	mov	sp, r7
  4057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057fa:	4770      	bx	lr

004057fc <hri_usbhs_write_DEVDMAADDRESS_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
  4057fc:	b480      	push	{r7}
  4057fe:	b085      	sub	sp, #20
  405800:	af00      	add	r7, sp, #0
  405802:	60f8      	str	r0, [r7, #12]
  405804:	460b      	mov	r3, r1
  405806:	607a      	str	r2, [r7, #4]
  405808:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMAADDRESS = data;
  40580a:	7afb      	ldrb	r3, [r7, #11]
  40580c:	68fa      	ldr	r2, [r7, #12]
  40580e:	3331      	adds	r3, #49	; 0x31
  405810:	011b      	lsls	r3, r3, #4
  405812:	4413      	add	r3, r2
  405814:	3304      	adds	r3, #4
  405816:	687a      	ldr	r2, [r7, #4]
  405818:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40581a:	bf00      	nop
  40581c:	3714      	adds	r7, #20
  40581e:	46bd      	mov	sp, r7
  405820:	f85d 7b04 	ldr.w	r7, [sp], #4
  405824:	4770      	bx	lr

00405826 <hri_usbhs_write_DEVDMACONTROL_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMACONTROL_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmacontrol_reg_t data)
{
  405826:	b480      	push	{r7}
  405828:	b085      	sub	sp, #20
  40582a:	af00      	add	r7, sp, #0
  40582c:	60f8      	str	r0, [r7, #12]
  40582e:	460b      	mov	r3, r1
  405830:	607a      	str	r2, [r7, #4]
  405832:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL = data;
  405834:	7afb      	ldrb	r3, [r7, #11]
  405836:	68fa      	ldr	r2, [r7, #12]
  405838:	011b      	lsls	r3, r3, #4
  40583a:	4413      	add	r3, r2
  40583c:	f503 7346 	add.w	r3, r3, #792	; 0x318
  405840:	687a      	ldr	r2, [r7, #4]
  405842:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405844:	bf00      	nop
  405846:	3714      	adds	r7, #20
  405848:	46bd      	mov	sp, r7
  40584a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40584e:	4770      	bx	lr

00405850 <hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit>:
{
	return ((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL;
}

static inline bool hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(const void *const hw, uint8_t submodule_index)
{
  405850:	b480      	push	{r7}
  405852:	b083      	sub	sp, #12
  405854:	af00      	add	r7, sp, #0
  405856:	6078      	str	r0, [r7, #4]
  405858:	460b      	mov	r3, r1
  40585a:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  40585c:	78fb      	ldrb	r3, [r7, #3]
  40585e:	687a      	ldr	r2, [r7, #4]
  405860:	011b      	lsls	r3, r3, #4
  405862:	4413      	add	r3, r2
  405864:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  405868:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_CHANN_ENB_Pos;
  40586a:	f003 0301 	and.w	r3, r3, #1
  40586e:	2b00      	cmp	r3, #0
  405870:	bf14      	ite	ne
  405872:	2301      	movne	r3, #1
  405874:	2300      	moveq	r3, #0
  405876:	b2db      	uxtb	r3, r3
}
  405878:	4618      	mov	r0, r3
  40587a:	370c      	adds	r7, #12
  40587c:	46bd      	mov	sp, r7
  40587e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405882:	4770      	bx	lr

00405884 <hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit>:
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS = USBHS_DEVDMASTATUS_CHANN_ACT;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
  405884:	b480      	push	{r7}
  405886:	b083      	sub	sp, #12
  405888:	af00      	add	r7, sp, #0
  40588a:	6078      	str	r0, [r7, #4]
  40588c:	460b      	mov	r3, r1
  40588e:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  405890:	78fb      	ldrb	r3, [r7, #3]
  405892:	687a      	ldr	r2, [r7, #4]
  405894:	011b      	lsls	r3, r3, #4
  405896:	4413      	add	r3, r2
  405898:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  40589c:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_END_TR_ST_Pos;
  40589e:	091b      	lsrs	r3, r3, #4
  4058a0:	f003 0301 	and.w	r3, r3, #1
  4058a4:	2b00      	cmp	r3, #0
  4058a6:	bf14      	ite	ne
  4058a8:	2301      	movne	r3, #1
  4058aa:	2300      	moveq	r3, #0
  4058ac:	b2db      	uxtb	r3, r3
}
  4058ae:	4618      	mov	r0, r3
  4058b0:	370c      	adds	r7, #12
  4058b2:	46bd      	mov	sp, r7
  4058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058b8:	4770      	bx	lr

004058ba <hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf>:
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
  4058ba:	b480      	push	{r7}
  4058bc:	b083      	sub	sp, #12
  4058be:	af00      	add	r7, sp, #0
  4058c0:	6078      	str	r0, [r7, #4]
  4058c2:	460b      	mov	r3, r1
  4058c4:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  4058c6:	78fb      	ldrb	r3, [r7, #3]
  4058c8:	687a      	ldr	r2, [r7, #4]
  4058ca:	011b      	lsls	r3, r3, #4
  4058cc:	4413      	add	r3, r2
  4058ce:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  4058d2:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_BUFF_COUNT_Pos;
  4058d4:	0c1b      	lsrs	r3, r3, #16
  4058d6:	b29b      	uxth	r3, r3
}
  4058d8:	4618      	mov	r0, r3
  4058da:	370c      	adds	r7, #12
  4058dc:	46bd      	mov	sp, r7
  4058de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058e2:	4770      	bx	lr

004058e4 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  4058e4:	b480      	push	{r7}
  4058e6:	b083      	sub	sp, #12
  4058e8:	af00      	add	r7, sp, #0
  4058ea:	6078      	str	r0, [r7, #4]
  4058ec:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
}
  4058ee:	bf00      	nop
  4058f0:	370c      	adds	r7, #12
  4058f2:	46bd      	mov	sp, r7
  4058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058f8:	4770      	bx	lr

004058fa <_dummy_func_return_false>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
  4058fa:	b480      	push	{r7}
  4058fc:	b083      	sub	sp, #12
  4058fe:	af00      	add	r7, sp, #0
  405900:	6078      	str	r0, [r7, #4]
  405902:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
  405904:	2300      	movs	r3, #0
}
  405906:	4618      	mov	r0, r3
  405908:	370c      	adds	r7, #12
  40590a:	46bd      	mov	sp, r7
  40590c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405910:	4770      	bx	lr
	...

00405914 <_usbd_ep_enable>:
/** \brief Enable/disable the endpoint
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_enable(uint8_t epn, uint32_t flags)
{
  405914:	b580      	push	{r7, lr}
  405916:	b084      	sub	sp, #16
  405918:	af00      	add	r7, sp, #0
  40591a:	4603      	mov	r3, r0
  40591c:	6039      	str	r1, [r7, #0]
  40591e:	71fb      	strb	r3, [r7, #7]
	uint32_t data;
	Usbhs *  hw = USBHS;
  405920:	4b10      	ldr	r3, [pc, #64]	; (405964 <_usbd_ep_enable+0x50>)
  405922:	60bb      	str	r3, [r7, #8]

	data = hri_usbhs_read_DEVEPT_reg(hw);
  405924:	68b8      	ldr	r0, [r7, #8]
  405926:	4b10      	ldr	r3, [pc, #64]	; (405968 <_usbd_ep_enable+0x54>)
  405928:	4798      	blx	r3
  40592a:	60f8      	str	r0, [r7, #12]

	if (flags) {
  40592c:	683b      	ldr	r3, [r7, #0]
  40592e:	2b00      	cmp	r3, #0
  405930:	d008      	beq.n	405944 <_usbd_ep_enable+0x30>
		data |= 0x1 << epn;
  405932:	79fb      	ldrb	r3, [r7, #7]
  405934:	2201      	movs	r2, #1
  405936:	fa02 f303 	lsl.w	r3, r2, r3
  40593a:	461a      	mov	r2, r3
  40593c:	68fb      	ldr	r3, [r7, #12]
  40593e:	4313      	orrs	r3, r2
  405940:	60fb      	str	r3, [r7, #12]
  405942:	e007      	b.n	405954 <_usbd_ep_enable+0x40>
	} else {
		data &= ~((uint32_t)0x1 << epn);
  405944:	79fb      	ldrb	r3, [r7, #7]
  405946:	2201      	movs	r2, #1
  405948:	fa02 f303 	lsl.w	r3, r2, r3
  40594c:	43db      	mvns	r3, r3
  40594e:	68fa      	ldr	r2, [r7, #12]
  405950:	4013      	ands	r3, r2
  405952:	60fb      	str	r3, [r7, #12]
	}

	hri_usbhs_write_DEVEPT_reg(hw, data);
  405954:	68f9      	ldr	r1, [r7, #12]
  405956:	68b8      	ldr	r0, [r7, #8]
  405958:	4b04      	ldr	r3, [pc, #16]	; (40596c <_usbd_ep_enable+0x58>)
  40595a:	4798      	blx	r3
}
  40595c:	bf00      	nop
  40595e:	3710      	adds	r7, #16
  405960:	46bd      	mov	sp, r7
  405962:	bd80      	pop	{r7, pc}
  405964:	40038000 	.word	0x40038000
  405968:	00405587 	.word	0x00405587
  40596c:	00405547 	.word	0x00405547

00405970 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
  405970:	b580      	push	{r7, lr}
  405972:	b082      	sub	sp, #8
  405974:	af00      	add	r7, sp, #0
  405976:	4603      	mov	r3, r0
  405978:	6039      	str	r1, [r7, #0]
  40597a:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTICR_reg(USBHS, epn, flags);
  40597c:	79fb      	ldrb	r3, [r7, #7]
  40597e:	683a      	ldr	r2, [r7, #0]
  405980:	4619      	mov	r1, r3
  405982:	4803      	ldr	r0, [pc, #12]	; (405990 <_usbd_ep_int_ack+0x20>)
  405984:	4b03      	ldr	r3, [pc, #12]	; (405994 <_usbd_ep_int_ack+0x24>)
  405986:	4798      	blx	r3
}
  405988:	bf00      	nop
  40598a:	3708      	adds	r7, #8
  40598c:	46bd      	mov	sp, r7
  40598e:	bd80      	pop	{r7, pc}
  405990:	40038000 	.word	0x40038000
  405994:	0040537f 	.word	0x0040537f

00405998 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
  405998:	b580      	push	{r7, lr}
  40599a:	b082      	sub	sp, #8
  40599c:	af00      	add	r7, sp, #0
  40599e:	4603      	mov	r3, r0
  4059a0:	6039      	str	r1, [r7, #0]
  4059a2:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIER_reg(USBHS, epn, flags);
  4059a4:	79fb      	ldrb	r3, [r7, #7]
  4059a6:	683a      	ldr	r2, [r7, #0]
  4059a8:	4619      	mov	r1, r3
  4059aa:	4808      	ldr	r0, [pc, #32]	; (4059cc <_usbd_ep_int_en+0x34>)
  4059ac:	4b08      	ldr	r3, [pc, #32]	; (4059d0 <_usbd_ep_int_en+0x38>)
  4059ae:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  4059b0:	79fb      	ldrb	r3, [r7, #7]
  4059b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4059b6:	fa02 f303 	lsl.w	r3, r2, r3
  4059ba:	4619      	mov	r1, r3
  4059bc:	4803      	ldr	r0, [pc, #12]	; (4059cc <_usbd_ep_int_en+0x34>)
  4059be:	4b05      	ldr	r3, [pc, #20]	; (4059d4 <_usbd_ep_int_en+0x3c>)
  4059c0:	4798      	blx	r3
}
  4059c2:	bf00      	nop
  4059c4:	3708      	adds	r7, #8
  4059c6:	46bd      	mov	sp, r7
  4059c8:	bd80      	pop	{r7, pc}
  4059ca:	bf00      	nop
  4059cc:	40038000 	.word	0x40038000
  4059d0:	004057b1 	.word	0x004057b1
  4059d4:	004053e9 	.word	0x004053e9

004059d8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
  4059d8:	b580      	push	{r7, lr}
  4059da:	b082      	sub	sp, #8
  4059dc:	af00      	add	r7, sp, #0
  4059de:	4603      	mov	r3, r0
  4059e0:	6039      	str	r1, [r7, #0]
  4059e2:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, flags);
  4059e4:	79fb      	ldrb	r3, [r7, #7]
  4059e6:	683a      	ldr	r2, [r7, #0]
  4059e8:	4619      	mov	r1, r3
  4059ea:	4803      	ldr	r0, [pc, #12]	; (4059f8 <_usbd_ep_int_dis+0x20>)
  4059ec:	4b03      	ldr	r3, [pc, #12]	; (4059fc <_usbd_ep_int_dis+0x24>)
  4059ee:	4798      	blx	r3
}
  4059f0:	bf00      	nop
  4059f2:	3708      	adds	r7, #8
  4059f4:	46bd      	mov	sp, r7
  4059f6:	bd80      	pop	{r7, pc}
  4059f8:	40038000 	.word	0x40038000
  4059fc:	004057d7 	.word	0x004057d7

00405a00 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
  405a00:	b580      	push	{r7, lr}
  405a02:	b082      	sub	sp, #8
  405a04:	af00      	add	r7, sp, #0
  405a06:	4603      	mov	r3, r0
  405a08:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(USBHS, epn) == USB_D_EPCFG_CTRL);
  405a0a:	79fb      	ldrb	r3, [r7, #7]
  405a0c:	4619      	mov	r1, r3
  405a0e:	4806      	ldr	r0, [pc, #24]	; (405a28 <_usbd_ep_is_ctrl+0x28>)
  405a10:	4b06      	ldr	r3, [pc, #24]	; (405a2c <_usbd_ep_is_ctrl+0x2c>)
  405a12:	4798      	blx	r3
  405a14:	4603      	mov	r3, r0
  405a16:	2b00      	cmp	r3, #0
  405a18:	bf0c      	ite	eq
  405a1a:	2301      	moveq	r3, #1
  405a1c:	2300      	movne	r3, #0
  405a1e:	b2db      	uxtb	r3, r3
}
  405a20:	4618      	mov	r0, r3
  405a22:	3708      	adds	r7, #8
  405a24:	46bd      	mov	sp, r7
  405a26:	bd80      	pop	{r7, pc}
  405a28:	40038000 	.word	0x40038000
  405a2c:	0040565f 	.word	0x0040565f

00405a30 <_usbd_ep_is_enabled>:

/** \brief Check if endpoint is enabled
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_enabled(uint8_t epn)
{
  405a30:	b580      	push	{r7, lr}
  405a32:	b084      	sub	sp, #16
  405a34:	af00      	add	r7, sp, #0
  405a36:	4603      	mov	r3, r0
  405a38:	71fb      	strb	r3, [r7, #7]
	uint32_t data;

	data = hri_usbhs_read_DEVEPT_reg(USBHS) & USBHS_DEVEPT_EPEN_Msk;
  405a3a:	480b      	ldr	r0, [pc, #44]	; (405a68 <_usbd_ep_is_enabled+0x38>)
  405a3c:	4b0b      	ldr	r3, [pc, #44]	; (405a6c <_usbd_ep_is_enabled+0x3c>)
  405a3e:	4798      	blx	r3
  405a40:	4603      	mov	r3, r0
  405a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
  405a46:	60fb      	str	r3, [r7, #12]
	return (data & (0x1 << epn));
  405a48:	79fb      	ldrb	r3, [r7, #7]
  405a4a:	2201      	movs	r2, #1
  405a4c:	fa02 f303 	lsl.w	r3, r2, r3
  405a50:	461a      	mov	r2, r3
  405a52:	68fb      	ldr	r3, [r7, #12]
  405a54:	4013      	ands	r3, r2
  405a56:	2b00      	cmp	r3, #0
  405a58:	bf14      	ite	ne
  405a5a:	2301      	movne	r3, #1
  405a5c:	2300      	moveq	r3, #0
  405a5e:	b2db      	uxtb	r3, r3
}
  405a60:	4618      	mov	r0, r3
  405a62:	3710      	adds	r7, #16
  405a64:	46bd      	mov	sp, r7
  405a66:	bd80      	pop	{r7, pc}
  405a68:	40038000 	.word	0x40038000
  405a6c:	00405587 	.word	0x00405587

00405a70 <_usbd_ep_is_cfg>:

/** \brief Check if endpoint is Configuration OK
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_cfg(uint8_t epn)
{
  405a70:	b580      	push	{r7, lr}
  405a72:	b082      	sub	sp, #8
  405a74:	af00      	add	r7, sp, #0
  405a76:	4603      	mov	r3, r0
  405a78:	71fb      	strb	r3, [r7, #7]
	return hri_usbhs_get_DEVEPTISR_CFGOK_bit(USBHS, epn);
  405a7a:	79fb      	ldrb	r3, [r7, #7]
  405a7c:	4619      	mov	r1, r3
  405a7e:	4804      	ldr	r0, [pc, #16]	; (405a90 <_usbd_ep_is_cfg+0x20>)
  405a80:	4b04      	ldr	r3, [pc, #16]	; (405a94 <_usbd_ep_is_cfg+0x24>)
  405a82:	4798      	blx	r3
  405a84:	4603      	mov	r3, r0
}
  405a86:	4618      	mov	r0, r3
  405a88:	3708      	adds	r7, #8
  405a8a:	46bd      	mov	sp, r7
  405a8c:	bd80      	pop	{r7, pc}
  405a8e:	bf00      	nop
  405a90:	40038000 	.word	0x40038000
  405a94:	004052fb 	.word	0x004052fb

00405a98 <_usbd_ep_set_stall>:
/** \brief Set endpoint stall
 * \param[in] epn Endpoint number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, bool st)
{
  405a98:	b580      	push	{r7, lr}
  405a9a:	b084      	sub	sp, #16
  405a9c:	af00      	add	r7, sp, #0
  405a9e:	4603      	mov	r3, r0
  405aa0:	460a      	mov	r2, r1
  405aa2:	71fb      	strb	r3, [r7, #7]
  405aa4:	4613      	mov	r3, r2
  405aa6:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405aa8:	4b0b      	ldr	r3, [pc, #44]	; (405ad8 <_usbd_ep_set_stall+0x40>)
  405aaa:	60fb      	str	r3, [r7, #12]

	if (st) {
  405aac:	79bb      	ldrb	r3, [r7, #6]
  405aae:	2b00      	cmp	r3, #0
  405ab0:	d007      	beq.n	405ac2 <_usbd_ep_set_stall+0x2a>
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_STALLRQS);
  405ab2:	79fb      	ldrb	r3, [r7, #7]
  405ab4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405ab8:	4619      	mov	r1, r3
  405aba:	68f8      	ldr	r0, [r7, #12]
  405abc:	4b07      	ldr	r3, [pc, #28]	; (405adc <_usbd_ep_set_stall+0x44>)
  405abe:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
	}
}
  405ac0:	e006      	b.n	405ad0 <_usbd_ep_set_stall+0x38>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
  405ac2:	79fb      	ldrb	r3, [r7, #7]
  405ac4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405ac8:	4619      	mov	r1, r3
  405aca:	68f8      	ldr	r0, [r7, #12]
  405acc:	4b04      	ldr	r3, [pc, #16]	; (405ae0 <_usbd_ep_set_stall+0x48>)
  405ace:	4798      	blx	r3
}
  405ad0:	bf00      	nop
  405ad2:	3710      	adds	r7, #16
  405ad4:	46bd      	mov	sp, r7
  405ad6:	bd80      	pop	{r7, pc}
  405ad8:	40038000 	.word	0x40038000
  405adc:	004057b1 	.word	0x004057b1
  405ae0:	004057d7 	.word	0x004057d7

00405ae4 <_usbd_ep_is_stall_sent>:
/** \brief Check if stall has been sent from the endpoint
 * \param[in] epn Endpoint number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn)
{
  405ae4:	b580      	push	{r7, lr}
  405ae6:	b082      	sub	sp, #8
  405ae8:	af00      	add	r7, sp, #0
  405aea:	4603      	mov	r3, r0
  405aec:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_STALLEDI_bit(USBHS, epn));
  405aee:	79fb      	ldrb	r3, [r7, #7]
  405af0:	4619      	mov	r1, r3
  405af2:	4804      	ldr	r0, [pc, #16]	; (405b04 <_usbd_ep_is_stall_sent+0x20>)
  405af4:	4b04      	ldr	r3, [pc, #16]	; (405b08 <_usbd_ep_is_stall_sent+0x24>)
  405af6:	4798      	blx	r3
  405af8:	4603      	mov	r3, r0
}
  405afa:	4618      	mov	r0, r3
  405afc:	3708      	adds	r7, #8
  405afe:	46bd      	mov	sp, r7
  405b00:	bd80      	pop	{r7, pc}
  405b02:	bf00      	nop
  405b04:	40038000 	.word	0x40038000
  405b08:	00405297 	.word	0x00405297

00405b0c <_usbd_ep_ack_stall>:

/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn)
{
  405b0c:	b580      	push	{r7, lr}
  405b0e:	b082      	sub	sp, #8
  405b10:	af00      	add	r7, sp, #0
  405b12:	4603      	mov	r3, r0
  405b14:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_STALLEDI);
  405b16:	79fb      	ldrb	r3, [r7, #7]
  405b18:	2140      	movs	r1, #64	; 0x40
  405b1a:	4618      	mov	r0, r3
  405b1c:	4b02      	ldr	r3, [pc, #8]	; (405b28 <_usbd_ep_ack_stall+0x1c>)
  405b1e:	4798      	blx	r3
}
  405b20:	bf00      	nop
  405b22:	3708      	adds	r7, #8
  405b24:	46bd      	mov	sp, r7
  405b26:	bd80      	pop	{r7, pc}
  405b28:	00405971 	.word	0x00405971

00405b2c <_usbd_ep_int_stall_en>:
/** \brief Enable/disable endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, const bool en)
{
  405b2c:	b580      	push	{r7, lr}
  405b2e:	b082      	sub	sp, #8
  405b30:	af00      	add	r7, sp, #0
  405b32:	4603      	mov	r3, r0
  405b34:	460a      	mov	r2, r1
  405b36:	71fb      	strb	r3, [r7, #7]
  405b38:	4613      	mov	r3, r2
  405b3a:	71bb      	strb	r3, [r7, #6]
	if (en) {
  405b3c:	79bb      	ldrb	r3, [r7, #6]
  405b3e:	2b00      	cmp	r3, #0
  405b40:	d005      	beq.n	405b4e <_usbd_ep_int_stall_en+0x22>
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  405b42:	79fb      	ldrb	r3, [r7, #7]
  405b44:	2140      	movs	r1, #64	; 0x40
  405b46:	4618      	mov	r0, r3
  405b48:	4b05      	ldr	r3, [pc, #20]	; (405b60 <_usbd_ep_int_stall_en+0x34>)
  405b4a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
	}
}
  405b4c:	e004      	b.n	405b58 <_usbd_ep_int_stall_en+0x2c>
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  405b4e:	79fb      	ldrb	r3, [r7, #7]
  405b50:	2140      	movs	r1, #64	; 0x40
  405b52:	4618      	mov	r0, r3
  405b54:	4b03      	ldr	r3, [pc, #12]	; (405b64 <_usbd_ep_int_stall_en+0x38>)
  405b56:	4798      	blx	r3
}
  405b58:	bf00      	nop
  405b5a:	3708      	adds	r7, #8
  405b5c:	46bd      	mov	sp, r7
  405b5e:	bd80      	pop	{r7, pc}
  405b60:	00405999 	.word	0x00405999
  405b64:	004059d9 	.word	0x004059d9

00405b68 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
  405b68:	b580      	push	{r7, lr}
  405b6a:	b082      	sub	sp, #8
  405b6c:	af00      	add	r7, sp, #0
  405b6e:	4603      	mov	r3, r0
  405b70:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, USBHS_DEVEPTIDR_RXSTPEC);
  405b72:	79fb      	ldrb	r3, [r7, #7]
  405b74:	2204      	movs	r2, #4
  405b76:	4619      	mov	r1, r3
  405b78:	4803      	ldr	r0, [pc, #12]	; (405b88 <_usbd_ep_stop_setup+0x20>)
  405b7a:	4b04      	ldr	r3, [pc, #16]	; (405b8c <_usbd_ep_stop_setup+0x24>)
  405b7c:	4798      	blx	r3
}
  405b7e:	bf00      	nop
  405b80:	3708      	adds	r7, #8
  405b82:	46bd      	mov	sp, r7
  405b84:	bd80      	pop	{r7, pc}
  405b86:	bf00      	nop
  405b88:	40038000 	.word	0x40038000
  405b8c:	004057d7 	.word	0x004057d7

00405b90 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
  405b90:	b580      	push	{r7, lr}
  405b92:	b082      	sub	sp, #8
  405b94:	af00      	add	r7, sp, #0
  405b96:	4603      	mov	r3, r0
  405b98:	71fb      	strb	r3, [r7, #7]
	return hri_usbhs_get_DEVEPTISR_RXSTPI_bit(USBHS, epn);
  405b9a:	79fb      	ldrb	r3, [r7, #7]
  405b9c:	4619      	mov	r1, r3
  405b9e:	4804      	ldr	r0, [pc, #16]	; (405bb0 <_usbd_ep_is_setup+0x20>)
  405ba0:	4b04      	ldr	r3, [pc, #16]	; (405bb4 <_usbd_ep_is_setup+0x24>)
  405ba2:	4798      	blx	r3
  405ba4:	4603      	mov	r3, r0
}
  405ba6:	4618      	mov	r0, r3
  405ba8:	3708      	adds	r7, #8
  405baa:	46bd      	mov	sp, r7
  405bac:	bd80      	pop	{r7, pc}
  405bae:	bf00      	nop
  405bb0:	40038000 	.word	0x40038000
  405bb4:	00405265 	.word	0x00405265

00405bb8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
  405bb8:	b580      	push	{r7, lr}
  405bba:	b082      	sub	sp, #8
  405bbc:	af00      	add	r7, sp, #0
  405bbe:	4603      	mov	r3, r0
  405bc0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_RXSTPI);
  405bc2:	79fb      	ldrb	r3, [r7, #7]
  405bc4:	2104      	movs	r1, #4
  405bc6:	4618      	mov	r0, r3
  405bc8:	4b02      	ldr	r3, [pc, #8]	; (405bd4 <_usbd_ep_ack_setup+0x1c>)
  405bca:	4798      	blx	r3
}
  405bcc:	bf00      	nop
  405bce:	3708      	adds	r7, #8
  405bd0:	46bd      	mov	sp, r7
  405bd2:	bd80      	pop	{r7, pc}
  405bd4:	00405971 	.word	0x00405971

00405bd8 <_usbd_ep_reset>:

/** \brief Reset endpoint without configurations
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset(uint8_t epn)
{
  405bd8:	b580      	push	{r7, lr}
  405bda:	b084      	sub	sp, #16
  405bdc:	af00      	add	r7, sp, #0
  405bde:	4603      	mov	r3, r0
  405be0:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405be2:	4b0c      	ldr	r3, [pc, #48]	; (405c14 <_usbd_ep_reset+0x3c>)
  405be4:	60fb      	str	r3, [r7, #12]
	hri_usbhs_set_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  405be6:	79fb      	ldrb	r3, [r7, #7]
  405be8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405bec:	fa02 f303 	lsl.w	r3, r2, r3
  405bf0:	4619      	mov	r1, r3
  405bf2:	68f8      	ldr	r0, [r7, #12]
  405bf4:	4b08      	ldr	r3, [pc, #32]	; (405c18 <_usbd_ep_reset+0x40>)
  405bf6:	4798      	blx	r3
	hri_usbhs_clear_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  405bf8:	79fb      	ldrb	r3, [r7, #7]
  405bfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405bfe:	fa02 f303 	lsl.w	r3, r2, r3
  405c02:	4619      	mov	r1, r3
  405c04:	68f8      	ldr	r0, [r7, #12]
  405c06:	4b05      	ldr	r3, [pc, #20]	; (405c1c <_usbd_ep_reset+0x44>)
  405c08:	4798      	blx	r3
}
  405c0a:	bf00      	nop
  405c0c:	3710      	adds	r7, #16
  405c0e:	46bd      	mov	sp, r7
  405c10:	bd80      	pop	{r7, pc}
  405c12:	bf00      	nop
  405c14:	40038000 	.word	0x40038000
  405c18:	00405525 	.word	0x00405525
  405c1c:	00405563 	.word	0x00405563

00405c20 <_usbd_ep_reset_toggle>:

/** \brief Reset endpoint toggle value
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset_toggle(uint8_t epn)
{
  405c20:	b580      	push	{r7, lr}
  405c22:	b084      	sub	sp, #16
  405c24:	af00      	add	r7, sp, #0
  405c26:	4603      	mov	r3, r0
  405c28:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405c2a:	4b06      	ldr	r3, [pc, #24]	; (405c44 <_usbd_ep_reset_toggle+0x24>)
  405c2c:	60fb      	str	r3, [r7, #12]
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RSTDTS);
  405c2e:	79fb      	ldrb	r3, [r7, #7]
  405c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  405c34:	4619      	mov	r1, r3
  405c36:	68f8      	ldr	r0, [r7, #12]
  405c38:	4b03      	ldr	r3, [pc, #12]	; (405c48 <_usbd_ep_reset_toggle+0x28>)
  405c3a:	4798      	blx	r3
}
  405c3c:	bf00      	nop
  405c3e:	3710      	adds	r7, #16
  405c40:	46bd      	mov	sp, r7
  405c42:	bd80      	pop	{r7, pc}
  405c44:	40038000 	.word	0x40038000
  405c48:	004057b1 	.word	0x004057b1

00405c4c <_usbd_ep_set_alloc>:
/** \brief Set memory allocate
 * \param[in] epn Endpoint number.
 * \param[in] flags \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_set_alloc(uint8_t epn, bool flags)
{
  405c4c:	b580      	push	{r7, lr}
  405c4e:	b084      	sub	sp, #16
  405c50:	af00      	add	r7, sp, #0
  405c52:	4603      	mov	r3, r0
  405c54:	460a      	mov	r2, r1
  405c56:	71fb      	strb	r3, [r7, #7]
  405c58:	4613      	mov	r3, r2
  405c5a:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405c5c:	4b09      	ldr	r3, [pc, #36]	; (405c84 <_usbd_ep_set_alloc+0x38>)
  405c5e:	60fb      	str	r3, [r7, #12]

	if (flags) {
  405c60:	79bb      	ldrb	r3, [r7, #6]
  405c62:	2b00      	cmp	r3, #0
  405c64:	d005      	beq.n	405c72 <_usbd_ep_set_alloc+0x26>
		hri_usbhs_set_DEVEPTCFG_ALLOC_bit(hw, epn);
  405c66:	79fb      	ldrb	r3, [r7, #7]
  405c68:	4619      	mov	r1, r3
  405c6a:	68f8      	ldr	r0, [r7, #12]
  405c6c:	4b06      	ldr	r3, [pc, #24]	; (405c88 <_usbd_ep_set_alloc+0x3c>)
  405c6e:	4798      	blx	r3
	} else {
		hri_usbhs_clear_DEVEPTCFG_ALLOC_bit(hw, epn);
	}
}
  405c70:	e004      	b.n	405c7c <_usbd_ep_set_alloc+0x30>
		hri_usbhs_clear_DEVEPTCFG_ALLOC_bit(hw, epn);
  405c72:	79fb      	ldrb	r3, [r7, #7]
  405c74:	4619      	mov	r1, r3
  405c76:	68f8      	ldr	r0, [r7, #12]
  405c78:	4b04      	ldr	r3, [pc, #16]	; (405c8c <_usbd_ep_set_alloc+0x40>)
  405c7a:	4798      	blx	r3
}
  405c7c:	bf00      	nop
  405c7e:	3710      	adds	r7, #16
  405c80:	46bd      	mov	sp, r7
  405c82:	bd80      	pop	{r7, pc}
  405c84:	40038000 	.word	0x40038000
  405c88:	0040559f 	.word	0x0040559f
  405c8c:	004055cf 	.word	0x004055cf

00405c90 <_usbd_ep_get_trans_count>:

/** \brief Get byte count for transactions
 * \param[in] epn Endpoint number.
 */
static inline uint16_t _usbd_ep_get_trans_count(uint8_t epn)
{
  405c90:	b580      	push	{r7, lr}
  405c92:	b082      	sub	sp, #8
  405c94:	af00      	add	r7, sp, #0
  405c96:	4603      	mov	r3, r0
  405c98:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  405c9a:	79fb      	ldrb	r3, [r7, #7]
  405c9c:	4a05      	ldr	r2, [pc, #20]	; (405cb4 <_usbd_ep_get_trans_count+0x24>)
  405c9e:	4619      	mov	r1, r3
  405ca0:	4805      	ldr	r0, [pc, #20]	; (405cb8 <_usbd_ep_get_trans_count+0x28>)
  405ca2:	4b06      	ldr	r3, [pc, #24]	; (405cbc <_usbd_ep_get_trans_count+0x2c>)
  405ca4:	4798      	blx	r3
  405ca6:	4603      	mov	r3, r0
  405ca8:	0d1b      	lsrs	r3, r3, #20
  405caa:	b29b      	uxth	r3, r3
}
  405cac:	4618      	mov	r0, r3
  405cae:	3708      	adds	r7, #8
  405cb0:	46bd      	mov	sp, r7
  405cb2:	bd80      	pop	{r7, pc}
  405cb4:	7ff00000 	.word	0x7ff00000
  405cb8:	40038000 	.word	0x40038000
  405cbc:	0040532d 	.word	0x0040532d

00405cc0 <_usbd_ep_send_zlp_in>:

/** \brief Send a ZLP IN on control endpoint
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_send_zlp_in(uint8_t epn)
{
  405cc0:	b580      	push	{r7, lr}
  405cc2:	b084      	sub	sp, #16
  405cc4:	af00      	add	r7, sp, #0
  405cc6:	4603      	mov	r3, r0
  405cc8:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405cca:	4b0c      	ldr	r3, [pc, #48]	; (405cfc <_usbd_ep_send_zlp_in+0x3c>)
  405ccc:	60fb      	str	r3, [r7, #12]

	/* Send ZLP on IN endpoint. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  405cce:	79fb      	ldrb	r3, [r7, #7]
  405cd0:	2201      	movs	r2, #1
  405cd2:	4619      	mov	r1, r3
  405cd4:	68f8      	ldr	r0, [r7, #12]
  405cd6:	4b0a      	ldr	r3, [pc, #40]	; (405d00 <_usbd_ep_send_zlp_in+0x40>)
  405cd8:	4798      	blx	r3

	/* To detect a protocol error, enable nak interrupt on data OUT phase. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_NAKOUTIC);
  405cda:	79fb      	ldrb	r3, [r7, #7]
  405cdc:	2208      	movs	r2, #8
  405cde:	4619      	mov	r1, r3
  405ce0:	68f8      	ldr	r0, [r7, #12]
  405ce2:	4b07      	ldr	r3, [pc, #28]	; (405d00 <_usbd_ep_send_zlp_in+0x40>)
  405ce4:	4798      	blx	r3
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_NAKOUTES);
  405ce6:	79fb      	ldrb	r3, [r7, #7]
  405ce8:	2208      	movs	r2, #8
  405cea:	4619      	mov	r1, r3
  405cec:	68f8      	ldr	r0, [r7, #12]
  405cee:	4b05      	ldr	r3, [pc, #20]	; (405d04 <_usbd_ep_send_zlp_in+0x44>)
  405cf0:	4798      	blx	r3
}
  405cf2:	bf00      	nop
  405cf4:	3710      	adds	r7, #16
  405cf6:	46bd      	mov	sp, r7
  405cf8:	bd80      	pop	{r7, pc}
  405cfa:	bf00      	nop
  405cfc:	40038000 	.word	0x40038000
  405d00:	0040537f 	.word	0x0040537f
  405d04:	004057b1 	.word	0x004057b1

00405d08 <_usbd_ep_set_in_rdy>:
/** Set IN ready for IN transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, const bool rdy)
{
  405d08:	b580      	push	{r7, lr}
  405d0a:	b084      	sub	sp, #16
  405d0c:	af00      	add	r7, sp, #0
  405d0e:	4603      	mov	r3, r0
  405d10:	460a      	mov	r2, r1
  405d12:	71fb      	strb	r3, [r7, #7]
  405d14:	4613      	mov	r3, r2
  405d16:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405d18:	4b0a      	ldr	r3, [pc, #40]	; (405d44 <_usbd_ep_set_in_rdy+0x3c>)
  405d1a:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  405d1c:	79bb      	ldrb	r3, [r7, #6]
  405d1e:	2b00      	cmp	r3, #0
  405d20:	d006      	beq.n	405d30 <_usbd_ep_set_in_rdy+0x28>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  405d22:	79fb      	ldrb	r3, [r7, #7]
  405d24:	2201      	movs	r2, #1
  405d26:	4619      	mov	r1, r3
  405d28:	68f8      	ldr	r0, [r7, #12]
  405d2a:	4b07      	ldr	r3, [pc, #28]	; (405d48 <_usbd_ep_set_in_rdy+0x40>)
  405d2c:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
	}
}
  405d2e:	e005      	b.n	405d3c <_usbd_ep_set_in_rdy+0x34>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  405d30:	79fb      	ldrb	r3, [r7, #7]
  405d32:	2201      	movs	r2, #1
  405d34:	4619      	mov	r1, r3
  405d36:	68f8      	ldr	r0, [r7, #12]
  405d38:	4b04      	ldr	r3, [pc, #16]	; (405d4c <_usbd_ep_set_in_rdy+0x44>)
  405d3a:	4798      	blx	r3
}
  405d3c:	bf00      	nop
  405d3e:	3710      	adds	r7, #16
  405d40:	46bd      	mov	sp, r7
  405d42:	bd80      	pop	{r7, pc}
  405d44:	40038000 	.word	0x40038000
  405d48:	0040537f 	.word	0x0040537f
  405d4c:	0040578b 	.word	0x0040578b

00405d50 <_usbd_ep_set_out_rdy>:
/** \brief Set ready for OUT transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, const bool rdy)
{
  405d50:	b580      	push	{r7, lr}
  405d52:	b084      	sub	sp, #16
  405d54:	af00      	add	r7, sp, #0
  405d56:	4603      	mov	r3, r0
  405d58:	460a      	mov	r2, r1
  405d5a:	71fb      	strb	r3, [r7, #7]
  405d5c:	4613      	mov	r3, r2
  405d5e:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405d60:	4b0a      	ldr	r3, [pc, #40]	; (405d8c <_usbd_ep_set_out_rdy+0x3c>)
  405d62:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  405d64:	79bb      	ldrb	r3, [r7, #6]
  405d66:	2b00      	cmp	r3, #0
  405d68:	d006      	beq.n	405d78 <_usbd_ep_set_out_rdy+0x28>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_RXOUTIS);
  405d6a:	79fb      	ldrb	r3, [r7, #7]
  405d6c:	2202      	movs	r2, #2
  405d6e:	4619      	mov	r1, r3
  405d70:	68f8      	ldr	r0, [r7, #12]
  405d72:	4b07      	ldr	r3, [pc, #28]	; (405d90 <_usbd_ep_set_out_rdy+0x40>)
  405d74:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
	}
}
  405d76:	e005      	b.n	405d84 <_usbd_ep_set_out_rdy+0x34>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  405d78:	79fb      	ldrb	r3, [r7, #7]
  405d7a:	2202      	movs	r2, #2
  405d7c:	4619      	mov	r1, r3
  405d7e:	68f8      	ldr	r0, [r7, #12]
  405d80:	4b04      	ldr	r3, [pc, #16]	; (405d94 <_usbd_ep_set_out_rdy+0x44>)
  405d82:	4798      	blx	r3
}
  405d84:	bf00      	nop
  405d86:	3710      	adds	r7, #16
  405d88:	46bd      	mov	sp, r7
  405d8a:	bd80      	pop	{r7, pc}
  405d8c:	40038000 	.word	0x40038000
  405d90:	0040578b 	.word	0x0040578b
  405d94:	0040537f 	.word	0x0040537f

00405d98 <_usbd_ep_pcksize_size>:
/**
 *  \brief Convert USB endpoint size to HW PCKSIZE.SIZE
 * \param[in] n Number of bytes of endpoint size.
 */
static inline uint8_t _usbd_ep_pcksize_size(uint16_t n)
{
  405d98:	b480      	push	{r7}
  405d9a:	b083      	sub	sp, #12
  405d9c:	af00      	add	r7, sp, #0
  405d9e:	4603      	mov	r3, r0
  405da0:	80fb      	strh	r3, [r7, #6]
	return (
	    (n > 512)
	        ? 7
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
  405da2:	88fb      	ldrh	r3, [r7, #6]
  405da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405da8:	d820      	bhi.n	405dec <_usbd_ep_pcksize_size+0x54>
  405daa:	88fb      	ldrh	r3, [r7, #6]
  405dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  405db0:	d81a      	bhi.n	405de8 <_usbd_ep_pcksize_size+0x50>
  405db2:	88fb      	ldrh	r3, [r7, #6]
  405db4:	2b80      	cmp	r3, #128	; 0x80
  405db6:	d815      	bhi.n	405de4 <_usbd_ep_pcksize_size+0x4c>
  405db8:	88fb      	ldrh	r3, [r7, #6]
  405dba:	2b40      	cmp	r3, #64	; 0x40
  405dbc:	d810      	bhi.n	405de0 <_usbd_ep_pcksize_size+0x48>
  405dbe:	88fb      	ldrh	r3, [r7, #6]
  405dc0:	2b20      	cmp	r3, #32
  405dc2:	d80b      	bhi.n	405ddc <_usbd_ep_pcksize_size+0x44>
  405dc4:	88fb      	ldrh	r3, [r7, #6]
  405dc6:	2b10      	cmp	r3, #16
  405dc8:	d806      	bhi.n	405dd8 <_usbd_ep_pcksize_size+0x40>
  405dca:	88fb      	ldrh	r3, [r7, #6]
  405dcc:	2b08      	cmp	r3, #8
  405dce:	bf8c      	ite	hi
  405dd0:	2301      	movhi	r3, #1
  405dd2:	2300      	movls	r3, #0
  405dd4:	b2db      	uxtb	r3, r3
  405dd6:	e00a      	b.n	405dee <_usbd_ep_pcksize_size+0x56>
  405dd8:	2302      	movs	r3, #2
  405dda:	e008      	b.n	405dee <_usbd_ep_pcksize_size+0x56>
  405ddc:	2303      	movs	r3, #3
  405dde:	e006      	b.n	405dee <_usbd_ep_pcksize_size+0x56>
  405de0:	2304      	movs	r3, #4
  405de2:	e004      	b.n	405dee <_usbd_ep_pcksize_size+0x56>
  405de4:	2305      	movs	r3, #5
  405de6:	e002      	b.n	405dee <_usbd_ep_pcksize_size+0x56>
  405de8:	2306      	movs	r3, #6
  405dea:	e000      	b.n	405dee <_usbd_ep_pcksize_size+0x56>
  405dec:	2307      	movs	r3, #7
}
  405dee:	4618      	mov	r0, r3
  405df0:	370c      	adds	r7, #12
  405df2:	46bd      	mov	sp, r7
  405df4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405df8:	4770      	bx	lr
	...

00405dfc <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
  405dfc:	b580      	push	{r7, lr}
  405dfe:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_SOFC);
  405e00:	2104      	movs	r1, #4
  405e02:	4804      	ldr	r0, [pc, #16]	; (405e14 <_usb_d_dev_sof+0x18>)
  405e04:	4b04      	ldr	r3, [pc, #16]	; (405e18 <_usb_d_dev_sof+0x1c>)
  405e06:	4798      	blx	r3
	dev_inst.callbacks.sof();
  405e08:	4b04      	ldr	r3, [pc, #16]	; (405e1c <_usb_d_dev_sof+0x20>)
  405e0a:	681b      	ldr	r3, [r3, #0]
  405e0c:	4798      	blx	r3
}
  405e0e:	bf00      	nop
  405e10:	bd80      	pop	{r7, pc}
  405e12:	bf00      	nop
  405e14:	40038000 	.word	0x40038000
  405e18:	0040576f 	.word	0x0040576f
  405e1c:	20401674 	.word	0x20401674

00405e20 <_usb_d_dev_msof>:

/**
 * \brief Handles USB MSOF interrupt
 */
static inline void _usb_d_dev_msof(void)
{
  405e20:	b580      	push	{r7, lr}
  405e22:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_MSOFC);
  405e24:	2102      	movs	r1, #2
  405e26:	4804      	ldr	r0, [pc, #16]	; (405e38 <_usb_d_dev_msof+0x18>)
  405e28:	4b04      	ldr	r3, [pc, #16]	; (405e3c <_usb_d_dev_msof+0x1c>)
  405e2a:	4798      	blx	r3
	dev_inst.callbacks.sof();
  405e2c:	4b04      	ldr	r3, [pc, #16]	; (405e40 <_usb_d_dev_msof+0x20>)
  405e2e:	681b      	ldr	r3, [r3, #0]
  405e30:	4798      	blx	r3
}
  405e32:	bf00      	nop
  405e34:	bd80      	pop	{r7, pc}
  405e36:	bf00      	nop
  405e38:	40038000 	.word	0x40038000
  405e3c:	0040576f 	.word	0x0040576f
  405e40:	20401674 	.word	0x20401674

00405e44 <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
  405e44:	b580      	push	{r7, lr}
  405e46:	b082      	sub	sp, #8
  405e48:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405e4a:	4b0b      	ldr	r3, [pc, #44]	; (405e78 <_usb_d_dev_wakeup+0x34>)
  405e4c:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405e4e:	2170      	movs	r1, #112	; 0x70
  405e50:	6878      	ldr	r0, [r7, #4]
  405e52:	4b0a      	ldr	r3, [pc, #40]	; (405e7c <_usb_d_dev_wakeup+0x38>)
  405e54:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405e56:	2170      	movs	r1, #112	; 0x70
  405e58:	6878      	ldr	r0, [r7, #4]
  405e5a:	4b09      	ldr	r3, [pc, #36]	; (405e80 <_usb_d_dev_wakeup+0x3c>)
  405e5c:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_SUSPE_bit(hw);
  405e5e:	6878      	ldr	r0, [r7, #4]
  405e60:	4b08      	ldr	r3, [pc, #32]	; (405e84 <_usb_d_dev_wakeup+0x40>)
  405e62:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  405e64:	4b08      	ldr	r3, [pc, #32]	; (405e88 <_usb_d_dev_wakeup+0x44>)
  405e66:	685b      	ldr	r3, [r3, #4]
  405e68:	2100      	movs	r1, #0
  405e6a:	2002      	movs	r0, #2
  405e6c:	4798      	blx	r3
}
  405e6e:	bf00      	nop
  405e70:	3708      	adds	r7, #8
  405e72:	46bd      	mov	sp, r7
  405e74:	bd80      	pop	{r7, pc}
  405e76:	bf00      	nop
  405e78:	40038000 	.word	0x40038000
  405e7c:	0040576f 	.word	0x0040576f
  405e80:	0040541d 	.word	0x0040541d
  405e84:	004053cf 	.word	0x004053cf
  405e88:	20401674 	.word	0x20401674

00405e8c <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
  405e8c:	b580      	push	{r7, lr}
  405e8e:	b082      	sub	sp, #8
  405e90:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405e92:	4b0c      	ldr	r3, [pc, #48]	; (405ec4 <_usb_d_dev_reset+0x38>)
  405e94:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USBHS_DEVICR_EORSTC);
  405e96:	2108      	movs	r1, #8
  405e98:	6878      	ldr	r0, [r7, #4]
  405e9a:	4b0b      	ldr	r3, [pc, #44]	; (405ec8 <_usb_d_dev_reset+0x3c>)
  405e9c:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405e9e:	2170      	movs	r1, #112	; 0x70
  405ea0:	6878      	ldr	r0, [r7, #4]
  405ea2:	4b0a      	ldr	r3, [pc, #40]	; (405ecc <_usb_d_dev_reset+0x40>)
  405ea4:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  405ea6:	2101      	movs	r1, #1
  405ea8:	6878      	ldr	r0, [r7, #4]
  405eaa:	4b09      	ldr	r3, [pc, #36]	; (405ed0 <_usb_d_dev_reset+0x44>)
  405eac:	4798      	blx	r3

	_usb_d_dev_reset_epts();
  405eae:	4b09      	ldr	r3, [pc, #36]	; (405ed4 <_usb_d_dev_reset+0x48>)
  405eb0:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  405eb2:	4b09      	ldr	r3, [pc, #36]	; (405ed8 <_usb_d_dev_reset+0x4c>)
  405eb4:	685b      	ldr	r3, [r3, #4]
  405eb6:	2100      	movs	r1, #0
  405eb8:	2001      	movs	r0, #1
  405eba:	4798      	blx	r3
}
  405ebc:	bf00      	nop
  405ebe:	3708      	adds	r7, #8
  405ec0:	46bd      	mov	sp, r7
  405ec2:	bd80      	pop	{r7, pc}
  405ec4:	40038000 	.word	0x40038000
  405ec8:	0040576f 	.word	0x0040576f
  405ecc:	0040541d 	.word	0x0040541d
  405ed0:	004053e9 	.word	0x004053e9
  405ed4:	004068f9 	.word	0x004068f9
  405ed8:	20401674 	.word	0x20401674

00405edc <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
  405edc:	b580      	push	{r7, lr}
  405ede:	b082      	sub	sp, #8
  405ee0:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405ee2:	4b0b      	ldr	r3, [pc, #44]	; (405f10 <_usb_d_dev_suspend+0x34>)
  405ee4:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  405ee6:	2101      	movs	r1, #1
  405ee8:	6878      	ldr	r0, [r7, #4]
  405eea:	4b0a      	ldr	r3, [pc, #40]	; (405f14 <_usb_d_dev_suspend+0x38>)
  405eec:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(USBHS, USB_D_SUSPEND_INT_FLAGS);
  405eee:	2101      	movs	r1, #1
  405ef0:	4807      	ldr	r0, [pc, #28]	; (405f10 <_usb_d_dev_suspend+0x34>)
  405ef2:	4b09      	ldr	r3, [pc, #36]	; (405f18 <_usb_d_dev_suspend+0x3c>)
  405ef4:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USB_D_WAKEUP_INT_FLAGS);
  405ef6:	2170      	movs	r1, #112	; 0x70
  405ef8:	4805      	ldr	r0, [pc, #20]	; (405f10 <_usb_d_dev_suspend+0x34>)
  405efa:	4b08      	ldr	r3, [pc, #32]	; (405f1c <_usb_d_dev_suspend+0x40>)
  405efc:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  405efe:	4b08      	ldr	r3, [pc, #32]	; (405f20 <_usb_d_dev_suspend+0x44>)
  405f00:	685b      	ldr	r3, [r3, #4]
  405f02:	2100      	movs	r1, #0
  405f04:	2004      	movs	r0, #4
  405f06:	4798      	blx	r3
}
  405f08:	bf00      	nop
  405f0a:	3708      	adds	r7, #8
  405f0c:	46bd      	mov	sp, r7
  405f0e:	bd80      	pop	{r7, pc}
  405f10:	40038000 	.word	0x40038000
  405f14:	0040576f 	.word	0x0040576f
  405f18:	0040541d 	.word	0x0040541d
  405f1c:	004053e9 	.word	0x004053e9
  405f20:	20401674 	.word	0x20401674

00405f24 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
  405f24:	b580      	push	{r7, lr}
  405f26:	b082      	sub	sp, #8
  405f28:	af00      	add	r7, sp, #0
	bool     rc    = true;
  405f2a:	2301      	movs	r3, #1
  405f2c:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  405f2e:	481f      	ldr	r0, [pc, #124]	; (405fac <_usb_d_dev_handle_nep+0x88>)
  405f30:	4b1f      	ldr	r3, [pc, #124]	; (405fb0 <_usb_d_dev_handle_nep+0x8c>)
  405f32:	4798      	blx	r3
  405f34:	4603      	mov	r3, r0
  405f36:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  405f38:	481c      	ldr	r0, [pc, #112]	; (405fac <_usb_d_dev_handle_nep+0x88>)
  405f3a:	4b1e      	ldr	r3, [pc, #120]	; (405fb4 <_usb_d_dev_handle_nep+0x90>)
  405f3c:	4798      	blx	r3
  405f3e:	4603      	mov	r3, r0
  405f40:	b29a      	uxth	r2, r3
  405f42:	88bb      	ldrh	r3, [r7, #4]
  405f44:	4013      	ands	r3, r2
  405f46:	80bb      	strh	r3, [r7, #4]

	if (flags & USBHS_DEVISR_SOF) {
  405f48:	88bb      	ldrh	r3, [r7, #4]
  405f4a:	f003 0304 	and.w	r3, r3, #4
  405f4e:	2b00      	cmp	r3, #0
  405f50:	d003      	beq.n	405f5a <_usb_d_dev_handle_nep+0x36>
		_usb_d_dev_sof();
  405f52:	4b19      	ldr	r3, [pc, #100]	; (405fb8 <_usb_d_dev_handle_nep+0x94>)
  405f54:	4798      	blx	r3
		return true;
  405f56:	2301      	movs	r3, #1
  405f58:	e023      	b.n	405fa2 <_usb_d_dev_handle_nep+0x7e>
	} else if (flags & USBHS_DEVISR_MSOF) {
  405f5a:	88bb      	ldrh	r3, [r7, #4]
  405f5c:	f003 0302 	and.w	r3, r3, #2
  405f60:	2b00      	cmp	r3, #0
  405f62:	d003      	beq.n	405f6c <_usb_d_dev_handle_nep+0x48>
		_usb_d_dev_msof();
  405f64:	4b15      	ldr	r3, [pc, #84]	; (405fbc <_usb_d_dev_handle_nep+0x98>)
  405f66:	4798      	blx	r3
		return true;
  405f68:	2301      	movs	r3, #1
  405f6a:	e01a      	b.n	405fa2 <_usb_d_dev_handle_nep+0x7e>
	}

	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  405f6c:	88bb      	ldrh	r3, [r7, #4]
  405f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405f72:	2b00      	cmp	r3, #0
  405f74:	d002      	beq.n	405f7c <_usb_d_dev_handle_nep+0x58>
		_usb_d_dev_wakeup();
  405f76:	4b12      	ldr	r3, [pc, #72]	; (405fc0 <_usb_d_dev_handle_nep+0x9c>)
  405f78:	4798      	blx	r3
  405f7a:	e011      	b.n	405fa0 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_EORST) {
  405f7c:	88bb      	ldrh	r3, [r7, #4]
  405f7e:	f003 0308 	and.w	r3, r3, #8
  405f82:	2b00      	cmp	r3, #0
  405f84:	d002      	beq.n	405f8c <_usb_d_dev_handle_nep+0x68>
		_usb_d_dev_reset();
  405f86:	4b0f      	ldr	r3, [pc, #60]	; (405fc4 <_usb_d_dev_handle_nep+0xa0>)
  405f88:	4798      	blx	r3
  405f8a:	e009      	b.n	405fa0 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_SUSP) {
  405f8c:	88bb      	ldrh	r3, [r7, #4]
  405f8e:	f003 0301 	and.w	r3, r3, #1
  405f92:	2b00      	cmp	r3, #0
  405f94:	d002      	beq.n	405f9c <_usb_d_dev_handle_nep+0x78>
		_usb_d_dev_suspend();
  405f96:	4b0c      	ldr	r3, [pc, #48]	; (405fc8 <_usb_d_dev_handle_nep+0xa4>)
  405f98:	4798      	blx	r3
  405f9a:	e001      	b.n	405fa0 <_usb_d_dev_handle_nep+0x7c>
	} else {
		rc = false;
  405f9c:	2300      	movs	r3, #0
  405f9e:	71fb      	strb	r3, [r7, #7]
	}

	return rc;
  405fa0:	79fb      	ldrb	r3, [r7, #7]
}
  405fa2:	4618      	mov	r0, r3
  405fa4:	3708      	adds	r7, #8
  405fa6:	46bd      	mov	sp, r7
  405fa8:	bd80      	pop	{r7, pc}
  405faa:	bf00      	nop
  405fac:	40038000 	.word	0x40038000
  405fb0:	00405439 	.word	0x00405439
  405fb4:	00405405 	.word	0x00405405
  405fb8:	00405dfd 	.word	0x00405dfd
  405fbc:	00405e21 	.word	0x00405e21
  405fc0:	00405e45 	.word	0x00405e45
  405fc4:	00405e8d 	.word	0x00405e8d
  405fc8:	00405edd 	.word	0x00405edd

00405fcc <_usb_d_dev_in_next>:
/**
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept)
{
  405fcc:	b580      	push	{r7, lr}
  405fce:	b08a      	sub	sp, #40	; 0x28
  405fd0:	af00      	add	r7, sp, #0
  405fd2:	6078      	str	r0, [r7, #4]
	Usbhs *  hw       = USBHS;
  405fd4:	4b65      	ldr	r3, [pc, #404]	; (40616c <_usb_d_dev_in_next+0x1a0>)
  405fd6:	623b      	str	r3, [r7, #32]
	uint8_t  epn      = USB_EP_GET_N(ept->ep);
  405fd8:	687b      	ldr	r3, [r7, #4]
  405fda:	7c9b      	ldrb	r3, [r3, #18]
  405fdc:	f003 030f 	and.w	r3, r3, #15
  405fe0:	77fb      	strb	r3, [r7, #31]
	uint8_t *ptr_dest = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  405fe2:	7ffb      	ldrb	r3, [r7, #31]
  405fe4:	03da      	lsls	r2, r3, #15
  405fe6:	4b62      	ldr	r3, [pc, #392]	; (406170 <_usb_d_dev_in_next+0x1a4>)
  405fe8:	4413      	add	r3, r2
  405fea:	61bb      	str	r3, [r7, #24]
	uint8_t *ptr_src;

	uint16_t trans_count = ept->trans_load;
  405fec:	687b      	ldr	r3, [r7, #4]
  405fee:	68db      	ldr	r3, [r3, #12]
  405ff0:	82fb      	strh	r3, [r7, #22]
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  405ff2:	687b      	ldr	r3, [r7, #4]
  405ff4:	8a1b      	ldrh	r3, [r3, #16]
  405ff6:	f240 32ff 	movw	r2, #1023	; 0x3ff
  405ffa:	4293      	cmp	r3, r2
  405ffc:	d103      	bne.n	406006 <_usb_d_dev_in_next+0x3a>
  405ffe:	687b      	ldr	r3, [r7, #4]
  406000:	8a1b      	ldrh	r3, [r3, #16]
  406002:	b21b      	sxth	r3, r3
  406004:	e004      	b.n	406010 <_usb_d_dev_in_next+0x44>
  406006:	687b      	ldr	r3, [r7, #4]
  406008:	8a1b      	ldrh	r3, [r3, #16]
  40600a:	3b01      	subs	r3, #1
  40600c:	b29b      	uxth	r3, r3
  40600e:	b21b      	sxth	r3, r3
  406010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
  406014:	4013      	ands	r3, r2
  406016:	b21b      	sxth	r3, r3
  406018:	82bb      	strh	r3, [r7, #20]
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  40601a:	687b      	ldr	r3, [r7, #4]
  40601c:	7cdb      	ldrb	r3, [r3, #19]
  40601e:	f003 0307 	and.w	r3, r3, #7
  406022:	b2db      	uxtb	r3, r3
  406024:	2b01      	cmp	r3, #1
  406026:	bf0c      	ite	eq
  406028:	2301      	moveq	r3, #1
  40602a:	2300      	movne	r3, #0
  40602c:	74fb      	strb	r3, [r7, #19]

	if (ept->trans_count >= ept->trans_size) {
  40602e:	687b      	ldr	r3, [r7, #4]
  406030:	689a      	ldr	r2, [r3, #8]
  406032:	687b      	ldr	r3, [r7, #4]
  406034:	685b      	ldr	r3, [r3, #4]
  406036:	429a      	cmp	r2, r3
  406038:	d358      	bcc.n	4060ec <_usb_d_dev_in_next+0x120>
		if (ept->flags.bits.need_zlp) {
  40603a:	687b      	ldr	r3, [r7, #4]
  40603c:	7cdb      	ldrb	r3, [r3, #19]
  40603e:	f003 0310 	and.w	r3, r3, #16
  406042:	b2db      	uxtb	r3, r3
  406044:	2b00      	cmp	r3, #0
  406046:	d019      	beq.n	40607c <_usb_d_dev_in_next+0xb0>
			ept->trans_load          = 0;
  406048:	687b      	ldr	r3, [r7, #4]
  40604a:	2200      	movs	r2, #0
  40604c:	60da      	str	r2, [r3, #12]
			ept->flags.bits.need_zlp = 0;
  40604e:	687a      	ldr	r2, [r7, #4]
  406050:	7cd3      	ldrb	r3, [r2, #19]
  406052:	f36f 1304 	bfc	r3, #4, #1
  406056:	74d3      	strb	r3, [r2, #19]
			_usbd_ep_send_zlp_in(epn);
  406058:	7ffb      	ldrb	r3, [r7, #31]
  40605a:	4618      	mov	r0, r3
  40605c:	4b45      	ldr	r3, [pc, #276]	; (406174 <_usb_d_dev_in_next+0x1a8>)
  40605e:	4798      	blx	r3
			if (!is_ctrl) {
  406060:	7cfb      	ldrb	r3, [r7, #19]
  406062:	f083 0301 	eor.w	r3, r3, #1
  406066:	b2db      	uxtb	r3, r3
  406068:	2b00      	cmp	r3, #0
  40606a:	d078      	beq.n	40615e <_usb_d_dev_in_next+0x192>
				/** Switch to next bank. */
				hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  40606c:	7ffb      	ldrb	r3, [r7, #31]
  40606e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406072:	4619      	mov	r1, r3
  406074:	6a38      	ldr	r0, [r7, #32]
  406076:	4b40      	ldr	r3, [pc, #256]	; (406178 <_usb_d_dev_in_next+0x1ac>)
  406078:	4798      	blx	r3
			}
			return;
  40607a:	e070      	b.n	40615e <_usb_d_dev_in_next+0x192>
		}

		/* Complete. */
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_TXINEC);
  40607c:	7ffb      	ldrb	r3, [r7, #31]
  40607e:	2201      	movs	r2, #1
  406080:	4619      	mov	r1, r3
  406082:	6a38      	ldr	r0, [r7, #32]
  406084:	4b3c      	ldr	r3, [pc, #240]	; (406178 <_usb_d_dev_in_next+0x1ac>)
  406086:	4798      	blx	r3
		if (!is_ctrl) {
  406088:	7cfb      	ldrb	r3, [r7, #19]
  40608a:	f083 0301 	eor.w	r3, r3, #1
  40608e:	b2db      	uxtb	r3, r3
  406090:	2b00      	cmp	r3, #0
  406092:	d008      	beq.n	4060a6 <_usb_d_dev_in_next+0xda>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406094:	7ffb      	ldrb	r3, [r7, #31]
  406096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40609a:	fa02 f303 	lsl.w	r3, r2, r3
  40609e:	4619      	mov	r1, r3
  4060a0:	6a38      	ldr	r0, [r7, #32]
  4060a2:	4b36      	ldr	r3, [pc, #216]	; (40617c <_usb_d_dev_in_next+0x1b0>)
  4060a4:	4798      	blx	r3
		}

		ept->trans_size = ept->trans_count;
  4060a6:	687b      	ldr	r3, [r7, #4]
  4060a8:	689a      	ldr	r2, [r3, #8]
  4060aa:	687b      	ldr	r3, [r7, #4]
  4060ac:	605a      	str	r2, [r3, #4]

		/* No ping-pong, so ask more data without background transfer. */
		if (last_pkt == ept->size) {
  4060ae:	687b      	ldr	r3, [r7, #4]
  4060b0:	8a1b      	ldrh	r3, [r3, #16]
  4060b2:	8aba      	ldrh	r2, [r7, #20]
  4060b4:	429a      	cmp	r2, r3
  4060b6:	d114      	bne.n	4060e2 <_usb_d_dev_in_next+0x116>
			ept->flags.bits.is_busy = 0;
  4060b8:	687a      	ldr	r2, [r7, #4]
  4060ba:	7cd3      	ldrb	r3, [r2, #19]
  4060bc:	f36f 1386 	bfc	r3, #6, #1
  4060c0:	74d3      	strb	r3, [r2, #19]
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  4060c2:	4b2f      	ldr	r3, [pc, #188]	; (406180 <_usb_d_dev_in_next+0x1b4>)
  4060c4:	68db      	ldr	r3, [r3, #12]
  4060c6:	687a      	ldr	r2, [r7, #4]
  4060c8:	7c90      	ldrb	r0, [r2, #18]
  4060ca:	687a      	ldr	r2, [r7, #4]
  4060cc:	6892      	ldr	r2, [r2, #8]
  4060ce:	4611      	mov	r1, r2
  4060d0:	4798      	blx	r3
  4060d2:	4603      	mov	r3, r0
  4060d4:	2b00      	cmp	r3, #0
  4060d6:	d144      	bne.n	406162 <_usb_d_dev_in_next+0x196>
				/* More data added. */
				return;
			}
			ept->flags.bits.is_busy = 1;
  4060d8:	687a      	ldr	r2, [r7, #4]
  4060da:	7cd3      	ldrb	r3, [r2, #19]
  4060dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060e0:	74d3      	strb	r3, [r2, #19]
		}
		/* Finish normally. */
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4060e2:	2100      	movs	r1, #0
  4060e4:	6878      	ldr	r0, [r7, #4]
  4060e6:	4b27      	ldr	r3, [pc, #156]	; (406184 <_usb_d_dev_in_next+0x1b8>)
  4060e8:	4798      	blx	r3
		return;
  4060ea:	e03b      	b.n	406164 <_usb_d_dev_in_next+0x198>
	} else {
		trans_next = ept->trans_size - ept->trans_count;
  4060ec:	687b      	ldr	r3, [r7, #4]
  4060ee:	685b      	ldr	r3, [r3, #4]
  4060f0:	b29a      	uxth	r2, r3
  4060f2:	687b      	ldr	r3, [r7, #4]
  4060f4:	689b      	ldr	r3, [r3, #8]
  4060f6:	b29b      	uxth	r3, r3
  4060f8:	1ad3      	subs	r3, r2, r3
  4060fa:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (trans_next > ept->size) {
  4060fc:	687b      	ldr	r3, [r7, #4]
  4060fe:	8a1b      	ldrh	r3, [r3, #16]
  406100:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  406102:	429a      	cmp	r2, r3
  406104:	d902      	bls.n	40610c <_usb_d_dev_in_next+0x140>
			trans_next = ept->size;
  406106:	687b      	ldr	r3, [r7, #4]
  406108:	8a1b      	ldrh	r3, [r3, #16]
  40610a:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		ptr_src = &ept->trans_buf[ept->trans_count];
  40610c:	687b      	ldr	r3, [r7, #4]
  40610e:	681a      	ldr	r2, [r3, #0]
  406110:	687b      	ldr	r3, [r7, #4]
  406112:	689b      	ldr	r3, [r3, #8]
  406114:	4413      	add	r3, r2
  406116:	60fb      	str	r3, [r7, #12]
		memcpy(ptr_dest, ptr_src, trans_next);
  406118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  40611a:	461a      	mov	r2, r3
  40611c:	68f9      	ldr	r1, [r7, #12]
  40611e:	69b8      	ldr	r0, [r7, #24]
  406120:	4b19      	ldr	r3, [pc, #100]	; (406188 <_usb_d_dev_in_next+0x1bc>)
  406122:	4798      	blx	r3
		ept->trans_load = trans_next;
  406124:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  406126:	687b      	ldr	r3, [r7, #4]
  406128:	60da      	str	r2, [r3, #12]
		ept->trans_count += trans_next;
  40612a:	687b      	ldr	r3, [r7, #4]
  40612c:	689a      	ldr	r2, [r3, #8]
  40612e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  406130:	441a      	add	r2, r3
  406132:	687b      	ldr	r3, [r7, #4]
  406134:	609a      	str	r2, [r3, #8]
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  406136:	7ffb      	ldrb	r3, [r7, #31]
  406138:	2201      	movs	r2, #1
  40613a:	4619      	mov	r1, r3
  40613c:	6a38      	ldr	r0, [r7, #32]
  40613e:	4b13      	ldr	r3, [pc, #76]	; (40618c <_usb_d_dev_in_next+0x1c0>)
  406140:	4798      	blx	r3
		if (!is_ctrl) {
  406142:	7cfb      	ldrb	r3, [r7, #19]
  406144:	f083 0301 	eor.w	r3, r3, #1
  406148:	b2db      	uxtb	r3, r3
  40614a:	2b00      	cmp	r3, #0
  40614c:	d00a      	beq.n	406164 <_usb_d_dev_in_next+0x198>
			/** Switch to next bank. */
			hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  40614e:	7ffb      	ldrb	r3, [r7, #31]
  406150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406154:	4619      	mov	r1, r3
  406156:	6a38      	ldr	r0, [r7, #32]
  406158:	4b07      	ldr	r3, [pc, #28]	; (406178 <_usb_d_dev_in_next+0x1ac>)
  40615a:	4798      	blx	r3
  40615c:	e002      	b.n	406164 <_usb_d_dev_in_next+0x198>
			return;
  40615e:	bf00      	nop
  406160:	e000      	b.n	406164 <_usb_d_dev_in_next+0x198>
				return;
  406162:	bf00      	nop
		}
	}
}
  406164:	3728      	adds	r7, #40	; 0x28
  406166:	46bd      	mov	sp, r7
  406168:	bd80      	pop	{r7, pc}
  40616a:	bf00      	nop
  40616c:	40038000 	.word	0x40038000
  406170:	a0100000 	.word	0xa0100000
  406174:	00405cc1 	.word	0x00405cc1
  406178:	004057d7 	.word	0x004057d7
  40617c:	0040541d 	.word	0x0040541d
  406180:	20401674 	.word	0x20401674
  406184:	00407141 	.word	0x00407141
  406188:	0040951d 	.word	0x0040951d
  40618c:	0040537f 	.word	0x0040537f

00406190 <_usb_d_dev_out_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept)
{
  406190:	b580      	push	{r7, lr}
  406192:	b088      	sub	sp, #32
  406194:	af00      	add	r7, sp, #0
  406196:	6078      	str	r0, [r7, #4]
	Usbhs *  hw          = USBHS;
  406198:	4b47      	ldr	r3, [pc, #284]	; (4062b8 <_usb_d_dev_out_next+0x128>)
  40619a:	61bb      	str	r3, [r7, #24]
	uint8_t  epn         = USB_EP_GET_N(ept->ep);
  40619c:	687b      	ldr	r3, [r7, #4]
  40619e:	7c9b      	ldrb	r3, [r3, #18]
  4061a0:	f003 030f 	and.w	r3, r3, #15
  4061a4:	75fb      	strb	r3, [r7, #23]
	uint16_t last_trans  = _usbd_ep_get_trans_count(epn);
  4061a6:	7dfb      	ldrb	r3, [r7, #23]
  4061a8:	4618      	mov	r0, r3
  4061aa:	4b44      	ldr	r3, [pc, #272]	; (4062bc <_usb_d_dev_out_next+0x12c>)
  4061ac:	4798      	blx	r3
  4061ae:	4603      	mov	r3, r0
  4061b0:	83fb      	strh	r3, [r7, #30]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  4061b2:	687b      	ldr	r3, [r7, #4]
  4061b4:	685b      	ldr	r3, [r3, #4]
  4061b6:	b29a      	uxth	r2, r3
  4061b8:	687b      	ldr	r3, [r7, #4]
  4061ba:	689b      	ldr	r3, [r3, #8]
  4061bc:	b29b      	uxth	r3, r3
  4061be:	1ad3      	subs	r3, r2, r3
  4061c0:	82bb      	strh	r3, [r7, #20]
	uint8_t *ptr         = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  4061c2:	7dfb      	ldrb	r3, [r7, #23]
  4061c4:	03da      	lsls	r2, r3, #15
  4061c6:	4b3e      	ldr	r3, [pc, #248]	; (4062c0 <_usb_d_dev_out_next+0x130>)
  4061c8:	4413      	add	r3, r2
  4061ca:	613b      	str	r3, [r7, #16]
	bool     is_full = false, is_short = false;
  4061cc:	2300      	movs	r3, #0
  4061ce:	777b      	strb	r3, [r7, #29]
  4061d0:	2300      	movs	r3, #0
  4061d2:	773b      	strb	r3, [r7, #28]
	bool     is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4061d4:	687b      	ldr	r3, [r7, #4]
  4061d6:	7cdb      	ldrb	r3, [r3, #19]
  4061d8:	f003 0307 	and.w	r3, r3, #7
  4061dc:	b2db      	uxtb	r3, r3
  4061de:	2b01      	cmp	r3, #1
  4061e0:	bf0c      	ite	eq
  4061e2:	2301      	moveq	r3, #1
  4061e4:	2300      	movne	r3, #0
  4061e6:	73fb      	strb	r3, [r7, #15]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  4061e8:	7dfb      	ldrb	r3, [r7, #23]
  4061ea:	2202      	movs	r2, #2
  4061ec:	4619      	mov	r1, r3
  4061ee:	69b8      	ldr	r0, [r7, #24]
  4061f0:	4b34      	ldr	r3, [pc, #208]	; (4062c4 <_usb_d_dev_out_next+0x134>)
  4061f2:	4798      	blx	r3

	if (last_trans > 0) {
  4061f4:	8bfb      	ldrh	r3, [r7, #30]
  4061f6:	2b00      	cmp	r3, #0
  4061f8:	d021      	beq.n	40623e <_usb_d_dev_out_next+0xae>
		if (last_trans > last_remain) {
  4061fa:	8bfa      	ldrh	r2, [r7, #30]
  4061fc:	8abb      	ldrh	r3, [r7, #20]
  4061fe:	429a      	cmp	r2, r3
  406200:	d903      	bls.n	40620a <_usb_d_dev_out_next+0x7a>
			last_trans = last_remain;
  406202:	8abb      	ldrh	r3, [r7, #20]
  406204:	83fb      	strh	r3, [r7, #30]
			is_full    = true;
  406206:	2301      	movs	r3, #1
  406208:	777b      	strb	r3, [r7, #29]
		}
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  40620a:	687b      	ldr	r3, [r7, #4]
  40620c:	681a      	ldr	r2, [r3, #0]
  40620e:	687b      	ldr	r3, [r7, #4]
  406210:	689b      	ldr	r3, [r3, #8]
  406212:	4413      	add	r3, r2
  406214:	8bfa      	ldrh	r2, [r7, #30]
  406216:	6939      	ldr	r1, [r7, #16]
  406218:	4618      	mov	r0, r3
  40621a:	4b2b      	ldr	r3, [pc, #172]	; (4062c8 <_usb_d_dev_out_next+0x138>)
  40621c:	4798      	blx	r3
		ept->trans_count += last_trans;
  40621e:	687b      	ldr	r3, [r7, #4]
  406220:	689a      	ldr	r2, [r3, #8]
  406222:	8bfb      	ldrh	r3, [r7, #30]
  406224:	441a      	add	r2, r3
  406226:	687b      	ldr	r3, [r7, #4]
  406228:	609a      	str	r2, [r3, #8]
		ept->trans_load = last_trans;
  40622a:	8bfa      	ldrh	r2, [r7, #30]
  40622c:	687b      	ldr	r3, [r7, #4]
  40622e:	60da      	str	r2, [r3, #12]
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  406230:	7dfb      	ldrb	r3, [r7, #23]
  406232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  406236:	4619      	mov	r1, r3
  406238:	69b8      	ldr	r0, [r7, #24]
  40623a:	4b24      	ldr	r3, [pc, #144]	; (4062cc <_usb_d_dev_out_next+0x13c>)
  40623c:	4798      	blx	r3
	}

	if (last_trans < ept->size) {
  40623e:	687b      	ldr	r3, [r7, #4]
  406240:	8a1b      	ldrh	r3, [r3, #16]
  406242:	8bfa      	ldrh	r2, [r7, #30]
  406244:	429a      	cmp	r2, r3
  406246:	d207      	bcs.n	406258 <_usb_d_dev_out_next+0xc8>
		ept->flags.bits.need_zlp = 0;
  406248:	687a      	ldr	r2, [r7, #4]
  40624a:	7cd3      	ldrb	r3, [r2, #19]
  40624c:	f36f 1304 	bfc	r3, #4, #1
  406250:	74d3      	strb	r3, [r2, #19]
		is_short                 = true;
  406252:	2301      	movs	r3, #1
  406254:	773b      	strb	r3, [r7, #28]
  406256:	e007      	b.n	406268 <_usb_d_dev_out_next+0xd8>
	} else if (ept->trans_count >= ept->trans_size) {
  406258:	687b      	ldr	r3, [r7, #4]
  40625a:	689a      	ldr	r2, [r3, #8]
  40625c:	687b      	ldr	r3, [r7, #4]
  40625e:	685b      	ldr	r3, [r3, #4]
  406260:	429a      	cmp	r2, r3
  406262:	d301      	bcc.n	406268 <_usb_d_dev_out_next+0xd8>
		is_full = true;
  406264:	2301      	movs	r3, #1
  406266:	777b      	strb	r3, [r7, #29]
	}

	/* Complete. */
	if (is_full || is_short) {
  406268:	7f7b      	ldrb	r3, [r7, #29]
  40626a:	2b00      	cmp	r3, #0
  40626c:	d102      	bne.n	406274 <_usb_d_dev_out_next+0xe4>
  40626e:	7f3b      	ldrb	r3, [r7, #28]
  406270:	2b00      	cmp	r3, #0
  406272:	d01c      	beq.n	4062ae <_usb_d_dev_out_next+0x11e>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_RXOUTEC);
  406274:	7dfb      	ldrb	r3, [r7, #23]
  406276:	2202      	movs	r2, #2
  406278:	4619      	mov	r1, r3
  40627a:	69b8      	ldr	r0, [r7, #24]
  40627c:	4b13      	ldr	r3, [pc, #76]	; (4062cc <_usb_d_dev_out_next+0x13c>)
  40627e:	4798      	blx	r3
		if (!is_ctrl) {
  406280:	7bfb      	ldrb	r3, [r7, #15]
  406282:	f083 0301 	eor.w	r3, r3, #1
  406286:	b2db      	uxtb	r3, r3
  406288:	2b00      	cmp	r3, #0
  40628a:	d008      	beq.n	40629e <_usb_d_dev_out_next+0x10e>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  40628c:	7dfb      	ldrb	r3, [r7, #23]
  40628e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406292:	fa02 f303 	lsl.w	r3, r2, r3
  406296:	4619      	mov	r1, r3
  406298:	69b8      	ldr	r0, [r7, #24]
  40629a:	4b0d      	ldr	r3, [pc, #52]	; (4062d0 <_usb_d_dev_out_next+0x140>)
  40629c:	4798      	blx	r3
		}
		ept->trans_size = ept->trans_count;
  40629e:	687b      	ldr	r3, [r7, #4]
  4062a0:	689a      	ldr	r2, [r3, #8]
  4062a2:	687b      	ldr	r3, [r7, #4]
  4062a4:	605a      	str	r2, [r3, #4]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4062a6:	2100      	movs	r1, #0
  4062a8:	6878      	ldr	r0, [r7, #4]
  4062aa:	4b0a      	ldr	r3, [pc, #40]	; (4062d4 <_usb_d_dev_out_next+0x144>)
  4062ac:	4798      	blx	r3
	}
}
  4062ae:	bf00      	nop
  4062b0:	3720      	adds	r7, #32
  4062b2:	46bd      	mov	sp, r7
  4062b4:	bd80      	pop	{r7, pc}
  4062b6:	bf00      	nop
  4062b8:	40038000 	.word	0x40038000
  4062bc:	00405c91 	.word	0x00405c91
  4062c0:	a0100000 	.word	0xa0100000
  4062c4:	0040537f 	.word	0x0040537f
  4062c8:	0040951d 	.word	0x0040951d
  4062cc:	004057d7 	.word	0x004057d7
  4062d0:	0040541d 	.word	0x0040541d
  4062d4:	00407141 	.word	0x00407141

004062d8 <_usb_d_dev_dma_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_dma_next(struct _usb_d_dev_ep *ept)
{
  4062d8:	b580      	push	{r7, lr}
  4062da:	b086      	sub	sp, #24
  4062dc:	af00      	add	r7, sp, #0
  4062de:	6078      	str	r0, [r7, #4]
	Usbhs *  hw  = USBHS;
  4062e0:	4b61      	ldr	r3, [pc, #388]	; (406468 <_usb_d_dev_dma_next+0x190>)
  4062e2:	60fb      	str	r3, [r7, #12]
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  4062e4:	687b      	ldr	r3, [r7, #4]
  4062e6:	7c9b      	ldrb	r3, [r3, #18]
  4062e8:	f003 030f 	and.w	r3, r3, #15
  4062ec:	72fb      	strb	r3, [r7, #11]
	uint32_t trans_next;
	uint32_t dma_ctrl;

	if (!ept->flags.bits.is_busy) {
  4062ee:	687b      	ldr	r3, [r7, #4]
  4062f0:	7cdb      	ldrb	r3, [r3, #19]
  4062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4062f6:	b2db      	uxtb	r3, r3
  4062f8:	2b00      	cmp	r3, #0
  4062fa:	f000 80b0 	beq.w	40645e <_usb_d_dev_dma_next+0x186>
		/* No job is running, then ignore it (system error) */
		return;
	}

	if (ept->trans_count != ept->trans_size) {
  4062fe:	687b      	ldr	r3, [r7, #4]
  406300:	689a      	ldr	r2, [r3, #8]
  406302:	687b      	ldr	r3, [r7, #4]
  406304:	685b      	ldr	r3, [r3, #4]
  406306:	429a      	cmp	r2, r3
  406308:	d073      	beq.n	4063f2 <_usb_d_dev_dma_next+0x11a>
		trans_next = ept->trans_size - ept->trans_count;
  40630a:	687b      	ldr	r3, [r7, #4]
  40630c:	685a      	ldr	r2, [r3, #4]
  40630e:	687b      	ldr	r3, [r7, #4]
  406310:	689b      	ldr	r3, [r3, #8]
  406312:	1ad3      	subs	r3, r2, r3
  406314:	617b      	str	r3, [r7, #20]
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  406316:	697b      	ldr	r3, [r7, #20]
  406318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40631c:	d905      	bls.n	40632a <_usb_d_dev_dma_next+0x52>
			trans_next = USB_D_DEV_TRANS_MAX;
  40631e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  406322:	617b      	str	r3, [r7, #20]
			/* Set 0 to transfer the maximum */
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  406324:	2300      	movs	r3, #0
  406326:	613b      	str	r3, [r7, #16]
  406328:	e002      	b.n	406330 <_usb_d_dev_dma_next+0x58>
		} else {
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  40632a:	697b      	ldr	r3, [r7, #20]
  40632c:	041b      	lsls	r3, r3, #16
  40632e:	613b      	str	r3, [r7, #16]
		}
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  406330:	687b      	ldr	r3, [r7, #4]
  406332:	7cdb      	ldrb	r3, [r3, #19]
  406334:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406338:	b2db      	uxtb	r3, r3
  40633a:	2b00      	cmp	r3, #0
  40633c:	d00b      	beq.n	406356 <_usb_d_dev_dma_next+0x7e>
  40633e:	687b      	ldr	r3, [r7, #4]
  406340:	7cdb      	ldrb	r3, [r3, #19]
  406342:	f003 0310 	and.w	r3, r3, #16
  406346:	b2db      	uxtb	r3, r3
  406348:	2b00      	cmp	r3, #0
  40634a:	d104      	bne.n	406356 <_usb_d_dev_dma_next+0x7e>
			/* Enable short packet option, else the DMA transfer is accepted
			    and interrupt DMA valid but nothing is sent. */
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  40634c:	693b      	ldr	r3, [r7, #16]
  40634e:	f043 0308 	orr.w	r3, r3, #8
  406352:	613b      	str	r3, [r7, #16]
  406354:	e010      	b.n	406378 <_usb_d_dev_dma_next+0xa0>
		} else {
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  406356:	687b      	ldr	r3, [r7, #4]
  406358:	7cdb      	ldrb	r3, [r3, #19]
  40635a:	f003 0307 	and.w	r3, r3, #7
  40635e:	b2db      	uxtb	r3, r3
  406360:	2b02      	cmp	r3, #2
  406362:	d105      	bne.n	406370 <_usb_d_dev_dma_next+0x98>
  406364:	687b      	ldr	r3, [r7, #4]
  406366:	8a1b      	ldrh	r3, [r3, #16]
  406368:	461a      	mov	r2, r3
  40636a:	697b      	ldr	r3, [r7, #20]
  40636c:	429a      	cmp	r2, r3
  40636e:	d303      	bcc.n	406378 <_usb_d_dev_dma_next+0xa0>
				/* Enable short packet reception */
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  406370:	693b      	ldr	r3, [r7, #16]
  406372:	f043 0314 	orr.w	r3, r3, #20
  406376:	613b      	str	r3, [r7, #16]
			}
		}

		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  406378:	7afb      	ldrb	r3, [r7, #11]
  40637a:	3b01      	subs	r3, #1
  40637c:	b2d9      	uxtb	r1, r3
  40637e:	687b      	ldr	r3, [r7, #4]
  406380:	681a      	ldr	r2, [r3, #0]
  406382:	687b      	ldr	r3, [r7, #4]
  406384:	689b      	ldr	r3, [r3, #8]
  406386:	4413      	add	r3, r2
  406388:	461a      	mov	r2, r3
  40638a:	68f8      	ldr	r0, [r7, #12]
  40638c:	4b37      	ldr	r3, [pc, #220]	; (40646c <_usb_d_dev_dma_next+0x194>)
  40638e:	4798      	blx	r3
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  406390:	693b      	ldr	r3, [r7, #16]
  406392:	f043 0321 	orr.w	r3, r3, #33	; 0x21
  406396:	613b      	str	r3, [r7, #16]

		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  406398:	7afb      	ldrb	r3, [r7, #11]
  40639a:	3b01      	subs	r3, #1
  40639c:	b2db      	uxtb	r3, r3
  40639e:	4619      	mov	r1, r3
  4063a0:	68f8      	ldr	r0, [r7, #12]
  4063a2:	4b33      	ldr	r3, [pc, #204]	; (406470 <_usb_d_dev_dma_next+0x198>)
  4063a4:	4798      	blx	r3
  4063a6:	4603      	mov	r3, r0
  4063a8:	f083 0301 	eor.w	r3, r3, #1
  4063ac:	b2db      	uxtb	r3, r3
  4063ae:	2b00      	cmp	r3, #0
  4063b0:	d01b      	beq.n	4063ea <_usb_d_dev_dma_next+0x112>
			hri_usbhs_write_DEVDMACONTROL_reg(hw, (epn - 1), dma_ctrl);
  4063b2:	7afb      	ldrb	r3, [r7, #11]
  4063b4:	3b01      	subs	r3, #1
  4063b6:	b2db      	uxtb	r3, r3
  4063b8:	693a      	ldr	r2, [r7, #16]
  4063ba:	4619      	mov	r1, r3
  4063bc:	68f8      	ldr	r0, [r7, #12]
  4063be:	4b2d      	ldr	r3, [pc, #180]	; (406474 <_usb_d_dev_dma_next+0x19c>)
  4063c0:	4798      	blx	r3
			ept->trans_count += trans_next;
  4063c2:	687b      	ldr	r3, [r7, #4]
  4063c4:	689a      	ldr	r2, [r3, #8]
  4063c6:	697b      	ldr	r3, [r7, #20]
  4063c8:	441a      	add	r2, r3
  4063ca:	687b      	ldr	r3, [r7, #4]
  4063cc:	609a      	str	r2, [r3, #8]
			ept->trans_load = trans_next;
  4063ce:	687b      	ldr	r3, [r7, #4]
  4063d0:	697a      	ldr	r2, [r7, #20]
  4063d2:	60da      	str	r2, [r3, #12]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  4063d4:	7afb      	ldrb	r3, [r7, #11]
  4063d6:	3b01      	subs	r3, #1
  4063d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4063dc:	fa02 f303 	lsl.w	r3, r2, r3
  4063e0:	4619      	mov	r1, r3
  4063e2:	68f8      	ldr	r0, [r7, #12]
  4063e4:	4b24      	ldr	r3, [pc, #144]	; (406478 <_usb_d_dev_dma_next+0x1a0>)
  4063e6:	4798      	blx	r3
			return;
  4063e8:	e03a      	b.n	406460 <_usb_d_dev_dma_next+0x188>
		}

		/* Here a ZLP has been received and the DMA transfer must be not started.
		   It is the end of transfer. */
		ept->trans_size = ept->trans_count;
  4063ea:	687b      	ldr	r3, [r7, #4]
  4063ec:	689a      	ldr	r2, [r3, #8]
  4063ee:	687b      	ldr	r3, [r7, #4]
  4063f0:	605a      	str	r2, [r3, #4]
	}

	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  4063f2:	687b      	ldr	r3, [r7, #4]
  4063f4:	7cdb      	ldrb	r3, [r3, #19]
  4063f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4063fa:	b2db      	uxtb	r3, r3
  4063fc:	2b00      	cmp	r3, #0
  4063fe:	d029      	beq.n	406454 <_usb_d_dev_dma_next+0x17c>
  406400:	687b      	ldr	r3, [r7, #4]
  406402:	7cdb      	ldrb	r3, [r3, #19]
  406404:	f003 0310 	and.w	r3, r3, #16
  406408:	b2db      	uxtb	r3, r3
  40640a:	2b00      	cmp	r3, #0
  40640c:	d022      	beq.n	406454 <_usb_d_dev_dma_next+0x17c>
		/* Need to send a ZLP (No possible with USB DMA) enable interrupt to
		   wait a free bank to sent ZLP. */
		_usbd_ep_int_ack(epn, USBHS_DEVEPTICR_TXINIC);
  40640e:	7afb      	ldrb	r3, [r7, #11]
  406410:	2101      	movs	r1, #1
  406412:	4618      	mov	r0, r3
  406414:	4b19      	ldr	r3, [pc, #100]	; (40647c <_usb_d_dev_dma_next+0x1a4>)
  406416:	4798      	blx	r3
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  406418:	7afb      	ldrb	r3, [r7, #11]
  40641a:	4619      	mov	r1, r3
  40641c:	68f8      	ldr	r0, [r7, #12]
  40641e:	4b18      	ldr	r3, [pc, #96]	; (406480 <_usb_d_dev_dma_next+0x1a8>)
  406420:	4798      	blx	r3
  406422:	4603      	mov	r3, r0
  406424:	2b00      	cmp	r3, #0
  406426:	d005      	beq.n	406434 <_usb_d_dev_dma_next+0x15c>
			hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  406428:	7afb      	ldrb	r3, [r7, #11]
  40642a:	2201      	movs	r2, #1
  40642c:	4619      	mov	r1, r3
  40642e:	68f8      	ldr	r0, [r7, #12]
  406430:	4b14      	ldr	r3, [pc, #80]	; (406484 <_usb_d_dev_dma_next+0x1ac>)
  406432:	4798      	blx	r3
		}
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  406434:	7afb      	ldrb	r3, [r7, #11]
  406436:	2201      	movs	r2, #1
  406438:	4619      	mov	r1, r3
  40643a:	68f8      	ldr	r0, [r7, #12]
  40643c:	4b12      	ldr	r3, [pc, #72]	; (406488 <_usb_d_dev_dma_next+0x1b0>)
  40643e:	4798      	blx	r3
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406440:	7afb      	ldrb	r3, [r7, #11]
  406442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406446:	fa02 f303 	lsl.w	r3, r2, r3
  40644a:	4619      	mov	r1, r3
  40644c:	68f8      	ldr	r0, [r7, #12]
  40644e:	4b0a      	ldr	r3, [pc, #40]	; (406478 <_usb_d_dev_dma_next+0x1a0>)
  406450:	4798      	blx	r3
		return;
  406452:	e005      	b.n	406460 <_usb_d_dev_dma_next+0x188>
	}

	/* Complete */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  406454:	2100      	movs	r1, #0
  406456:	6878      	ldr	r0, [r7, #4]
  406458:	4b0c      	ldr	r3, [pc, #48]	; (40648c <_usb_d_dev_dma_next+0x1b4>)
  40645a:	4798      	blx	r3
  40645c:	e000      	b.n	406460 <_usb_d_dev_dma_next+0x188>
		return;
  40645e:	bf00      	nop
}
  406460:	3718      	adds	r7, #24
  406462:	46bd      	mov	sp, r7
  406464:	bd80      	pop	{r7, pc}
  406466:	bf00      	nop
  406468:	40038000 	.word	0x40038000
  40646c:	004057fd 	.word	0x004057fd
  406470:	00405885 	.word	0x00405885
  406474:	00405827 	.word	0x00405827
  406478:	004053e9 	.word	0x004053e9
  40647c:	00405971 	.word	0x00405971
  406480:	004052c9 	.word	0x004052c9
  406484:	0040578b 	.word	0x0040578b
  406488:	004057b1 	.word	0x004057b1
  40648c:	00407141 	.word	0x00407141

00406490 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  406490:	b580      	push	{r7, lr}
  406492:	b084      	sub	sp, #16
  406494:	af00      	add	r7, sp, #0
  406496:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  406498:	687b      	ldr	r3, [r7, #4]
  40649a:	7c9b      	ldrb	r3, [r3, #18]
  40649c:	f003 030f 	and.w	r3, r3, #15
  4064a0:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4064a2:	687b      	ldr	r3, [r7, #4]
  4064a4:	7cdb      	ldrb	r3, [r3, #19]
  4064a6:	f003 0307 	and.w	r3, r3, #7
  4064aa:	b2db      	uxtb	r3, r3
  4064ac:	2b01      	cmp	r3, #1
  4064ae:	bf0c      	ite	eq
  4064b0:	2301      	moveq	r3, #1
  4064b2:	2300      	movne	r3, #0
  4064b4:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
  4064b6:	7bbb      	ldrb	r3, [r7, #14]
  4064b8:	f083 0301 	eor.w	r3, r3, #1
  4064bc:	b2db      	uxtb	r3, r3
  4064be:	2b00      	cmp	r3, #0
  4064c0:	d008      	beq.n	4064d4 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
  4064c2:	7bfb      	ldrb	r3, [r7, #15]
  4064c4:	4618      	mov	r0, r3
  4064c6:	4b1a      	ldr	r3, [pc, #104]	; (406530 <_usb_d_dev_handle_setup+0xa0>)
  4064c8:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
  4064ca:	7bfb      	ldrb	r3, [r7, #15]
  4064cc:	4618      	mov	r0, r3
  4064ce:	4b19      	ldr	r3, [pc, #100]	; (406534 <_usb_d_dev_handle_setup+0xa4>)
  4064d0:	4798      	blx	r3
		return;
  4064d2:	e02a      	b.n	40652a <_usb_d_dev_handle_setup+0x9a>

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	7cdb      	ldrb	r3, [r3, #19]
  4064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4064dc:	b2db      	uxtb	r3, r3
  4064de:	2b00      	cmp	r3, #0
  4064e0:	d00e      	beq.n	406500 <_usb_d_dev_handle_setup+0x70>
		ept->flags.bits.is_busy = 0;
  4064e2:	687a      	ldr	r2, [r7, #4]
  4064e4:	7cd3      	ldrb	r3, [r2, #19]
  4064e6:	f36f 1386 	bfc	r3, #6, #1
  4064ea:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
  4064ec:	7bfb      	ldrb	r3, [r7, #15]
  4064ee:	2100      	movs	r1, #0
  4064f0:	4618      	mov	r0, r3
  4064f2:	4b11      	ldr	r3, [pc, #68]	; (406538 <_usb_d_dev_handle_setup+0xa8>)
  4064f4:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, false);
  4064f6:	7bfb      	ldrb	r3, [r7, #15]
  4064f8:	2100      	movs	r1, #0
  4064fa:	4618      	mov	r0, r3
  4064fc:	4b0f      	ldr	r3, [pc, #60]	; (40653c <_usb_d_dev_handle_setup+0xac>)
  4064fe:	4798      	blx	r3
	}

	ept->flags.bits.is_stalled = 0;
  406500:	687a      	ldr	r2, [r7, #4]
  406502:	7cd3      	ldrb	r3, [r2, #19]
  406504:	f36f 03c3 	bfc	r3, #3, #1
  406508:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
  40650a:	7bfb      	ldrb	r3, [r7, #15]
  40650c:	2118      	movs	r1, #24
  40650e:	4618      	mov	r0, r3
  406510:	4b0b      	ldr	r3, [pc, #44]	; (406540 <_usb_d_dev_handle_setup+0xb0>)
  406512:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
  406514:	7bfb      	ldrb	r3, [r7, #15]
  406516:	2118      	movs	r1, #24
  406518:	4618      	mov	r0, r3
  40651a:	4b0a      	ldr	r3, [pc, #40]	; (406544 <_usb_d_dev_handle_setup+0xb4>)
  40651c:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  40651e:	4b0a      	ldr	r3, [pc, #40]	; (406548 <_usb_d_dev_handle_setup+0xb8>)
  406520:	689b      	ldr	r3, [r3, #8]
  406522:	687a      	ldr	r2, [r7, #4]
  406524:	7c92      	ldrb	r2, [r2, #18]
  406526:	4610      	mov	r0, r2
  406528:	4798      	blx	r3
}
  40652a:	3710      	adds	r7, #16
  40652c:	46bd      	mov	sp, r7
  40652e:	bd80      	pop	{r7, pc}
  406530:	00405bb9 	.word	0x00405bb9
  406534:	00405b69 	.word	0x00405b69
  406538:	00405d09 	.word	0x00405d09
  40653c:	00405d51 	.word	0x00405d51
  406540:	00405971 	.word	0x00405971
  406544:	004059d9 	.word	0x004059d9
  406548:	20401674 	.word	0x20401674

0040654c <_usb_d_dev_handle_stall>:
/**
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept)
{
  40654c:	b580      	push	{r7, lr}
  40654e:	b084      	sub	sp, #16
  406550:	af00      	add	r7, sp, #0
  406552:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406554:	687b      	ldr	r3, [r7, #4]
  406556:	7c9b      	ldrb	r3, [r3, #18]
  406558:	f003 030f 	and.w	r3, r3, #15
  40655c:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, false);
  40655e:	7bfb      	ldrb	r3, [r7, #15]
  406560:	2100      	movs	r1, #0
  406562:	4618      	mov	r0, r3
  406564:	4b04      	ldr	r3, [pc, #16]	; (406578 <_usb_d_dev_handle_stall+0x2c>)
  406566:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  406568:	2101      	movs	r1, #1
  40656a:	6878      	ldr	r0, [r7, #4]
  40656c:	4b03      	ldr	r3, [pc, #12]	; (40657c <_usb_d_dev_handle_stall+0x30>)
  40656e:	4798      	blx	r3
}
  406570:	bf00      	nop
  406572:	3710      	adds	r7, #16
  406574:	46bd      	mov	sp, r7
  406576:	bd80      	pop	{r7, pc}
  406578:	00405b2d 	.word	0x00405b2d
  40657c:	00407141 	.word	0x00407141

00406580 <_usb_d_dev_handle_overflow>:
/**
 * \brief Handles transaction overflow interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_overflow(struct _usb_d_dev_ep *ept)
{
  406580:	b580      	push	{r7, lr}
  406582:	b084      	sub	sp, #16
  406584:	af00      	add	r7, sp, #0
  406586:	6078      	str	r0, [r7, #4]
	Usbhs * hw  = USBHS;
  406588:	4b0f      	ldr	r3, [pc, #60]	; (4065c8 <_usb_d_dev_handle_overflow+0x48>)
  40658a:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40658c:	687b      	ldr	r3, [r7, #4]
  40658e:	7c9b      	ldrb	r3, [r3, #18]
  406590:	f003 030f 	and.w	r3, r3, #15
  406594:	72fb      	strb	r3, [r7, #11]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_OVERFIC);
  406596:	7afb      	ldrb	r3, [r7, #11]
  406598:	2220      	movs	r2, #32
  40659a:	4619      	mov	r1, r3
  40659c:	68f8      	ldr	r0, [r7, #12]
  40659e:	4b0b      	ldr	r3, [pc, #44]	; (4065cc <_usb_d_dev_handle_overflow+0x4c>)
  4065a0:	4798      	blx	r3
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  4065a2:	687b      	ldr	r3, [r7, #4]
  4065a4:	7cdb      	ldrb	r3, [r3, #19]
  4065a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4065aa:	b2db      	uxtb	r3, r3
  4065ac:	2b00      	cmp	r3, #0
  4065ae:	bf14      	ite	ne
  4065b0:	2301      	movne	r3, #1
  4065b2:	2300      	moveq	r3, #0
  4065b4:	b2db      	uxtb	r3, r3
  4065b6:	2204      	movs	r2, #4
  4065b8:	4619      	mov	r1, r3
  4065ba:	6878      	ldr	r0, [r7, #4]
  4065bc:	4b04      	ldr	r3, [pc, #16]	; (4065d0 <_usb_d_dev_handle_overflow+0x50>)
  4065be:	4798      	blx	r3
}
  4065c0:	bf00      	nop
  4065c2:	3710      	adds	r7, #16
  4065c4:	46bd      	mov	sp, r7
  4065c6:	bd80      	pop	{r7, pc}
  4065c8:	40038000 	.word	0x40038000
  4065cc:	0040537f 	.word	0x0040537f
  4065d0:	00407189 	.word	0x00407189

004065d4 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  4065d4:	b580      	push	{r7, lr}
  4065d6:	b082      	sub	sp, #8
  4065d8:	af00      	add	r7, sp, #0
  4065da:	6078      	str	r0, [r7, #4]
  4065dc:	460b      	mov	r3, r1
  4065de:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4065e0:	78fb      	ldrb	r3, [r7, #3]
  4065e2:	f003 0304 	and.w	r3, r3, #4
  4065e6:	2b00      	cmp	r3, #0
  4065e8:	d003      	beq.n	4065f2 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
  4065ea:	6878      	ldr	r0, [r7, #4]
  4065ec:	4b07      	ldr	r3, [pc, #28]	; (40660c <_usb_d_dev_trans_setup_isr+0x38>)
  4065ee:	4798      	blx	r3
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
		_usb_d_dev_handle_stall(ept);
	}
}
  4065f0:	e007      	b.n	406602 <_usb_d_dev_trans_setup_isr+0x2e>
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
  4065f2:	78fb      	ldrb	r3, [r7, #3]
  4065f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4065f8:	2b00      	cmp	r3, #0
  4065fa:	d002      	beq.n	406602 <_usb_d_dev_trans_setup_isr+0x2e>
		_usb_d_dev_handle_stall(ept);
  4065fc:	6878      	ldr	r0, [r7, #4]
  4065fe:	4b04      	ldr	r3, [pc, #16]	; (406610 <_usb_d_dev_trans_setup_isr+0x3c>)
  406600:	4798      	blx	r3
}
  406602:	bf00      	nop
  406604:	3708      	adds	r7, #8
  406606:	46bd      	mov	sp, r7
  406608:	bd80      	pop	{r7, pc}
  40660a:	bf00      	nop
  40660c:	00406491 	.word	0x00406491
  406610:	0040654d 	.word	0x0040654d

00406614 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  406614:	b580      	push	{r7, lr}
  406616:	b082      	sub	sp, #8
  406618:	af00      	add	r7, sp, #0
  40661a:	6078      	str	r0, [r7, #4]
  40661c:	460b      	mov	r3, r1
  40661e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_TXINI) {
  406620:	78fb      	ldrb	r3, [r7, #3]
  406622:	f003 0301 	and.w	r3, r3, #1
  406626:	2b00      	cmp	r3, #0
  406628:	d003      	beq.n	406632 <_usb_d_dev_trans_in_isr+0x1e>
		_usb_d_dev_in_next(ept);
  40662a:	6878      	ldr	r0, [r7, #4]
  40662c:	4b0a      	ldr	r3, [pc, #40]	; (406658 <_usb_d_dev_trans_in_isr+0x44>)
  40662e:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  406630:	e00e      	b.n	406650 <_usb_d_dev_trans_in_isr+0x3c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  406632:	687b      	ldr	r3, [r7, #4]
  406634:	7cdb      	ldrb	r3, [r3, #19]
  406636:	f003 0307 	and.w	r3, r3, #7
  40663a:	b2db      	uxtb	r3, r3
  40663c:	2b01      	cmp	r3, #1
  40663e:	d107      	bne.n	406650 <_usb_d_dev_trans_in_isr+0x3c>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  406640:	78fb      	ldrb	r3, [r7, #3]
  406642:	f003 0304 	and.w	r3, r3, #4
  406646:	2b00      	cmp	r3, #0
  406648:	d002      	beq.n	406650 <_usb_d_dev_trans_in_isr+0x3c>
			_usb_d_dev_handle_setup(ept);
  40664a:	6878      	ldr	r0, [r7, #4]
  40664c:	4b03      	ldr	r3, [pc, #12]	; (40665c <_usb_d_dev_trans_in_isr+0x48>)
  40664e:	4798      	blx	r3
}
  406650:	bf00      	nop
  406652:	3708      	adds	r7, #8
  406654:	46bd      	mov	sp, r7
  406656:	bd80      	pop	{r7, pc}
  406658:	00405fcd 	.word	0x00405fcd
  40665c:	00406491 	.word	0x00406491

00406660 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  406660:	b580      	push	{r7, lr}
  406662:	b082      	sub	sp, #8
  406664:	af00      	add	r7, sp, #0
  406666:	6078      	str	r0, [r7, #4]
  406668:	460b      	mov	r3, r1
  40666a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  40666c:	78fb      	ldrb	r3, [r7, #3]
  40666e:	f003 0320 	and.w	r3, r3, #32
  406672:	2b00      	cmp	r3, #0
  406674:	d003      	beq.n	40667e <_usb_d_dev_trans_out_isr+0x1e>
		_usb_d_dev_handle_overflow(ept);
  406676:	6878      	ldr	r0, [r7, #4]
  406678:	4b0f      	ldr	r3, [pc, #60]	; (4066b8 <_usb_d_dev_trans_out_isr+0x58>)
  40667a:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  40667c:	e017      	b.n	4066ae <_usb_d_dev_trans_out_isr+0x4e>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  40667e:	78fb      	ldrb	r3, [r7, #3]
  406680:	f003 0302 	and.w	r3, r3, #2
  406684:	2b00      	cmp	r3, #0
  406686:	d003      	beq.n	406690 <_usb_d_dev_trans_out_isr+0x30>
		_usb_d_dev_out_next(ept);
  406688:	6878      	ldr	r0, [r7, #4]
  40668a:	4b0c      	ldr	r3, [pc, #48]	; (4066bc <_usb_d_dev_trans_out_isr+0x5c>)
  40668c:	4798      	blx	r3
}
  40668e:	e00e      	b.n	4066ae <_usb_d_dev_trans_out_isr+0x4e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  406690:	687b      	ldr	r3, [r7, #4]
  406692:	7cdb      	ldrb	r3, [r3, #19]
  406694:	f003 0307 	and.w	r3, r3, #7
  406698:	b2db      	uxtb	r3, r3
  40669a:	2b01      	cmp	r3, #1
  40669c:	d107      	bne.n	4066ae <_usb_d_dev_trans_out_isr+0x4e>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  40669e:	78fb      	ldrb	r3, [r7, #3]
  4066a0:	f003 0304 	and.w	r3, r3, #4
  4066a4:	2b00      	cmp	r3, #0
  4066a6:	d002      	beq.n	4066ae <_usb_d_dev_trans_out_isr+0x4e>
			_usb_d_dev_handle_setup(ept);
  4066a8:	6878      	ldr	r0, [r7, #4]
  4066aa:	4b05      	ldr	r3, [pc, #20]	; (4066c0 <_usb_d_dev_trans_out_isr+0x60>)
  4066ac:	4798      	blx	r3
}
  4066ae:	bf00      	nop
  4066b0:	3708      	adds	r7, #8
  4066b2:	46bd      	mov	sp, r7
  4066b4:	bd80      	pop	{r7, pc}
  4066b6:	bf00      	nop
  4066b8:	00406581 	.word	0x00406581
  4066bc:	00406191 	.word	0x00406191
  4066c0:	00406491 	.word	0x00406491

004066c4 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  4066c4:	b580      	push	{r7, lr}
  4066c6:	b084      	sub	sp, #16
  4066c8:	af00      	add	r7, sp, #0
  4066ca:	6078      	str	r0, [r7, #4]
  4066cc:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  4066ce:	4b28      	ldr	r3, [pc, #160]	; (406770 <_usb_d_dev_handle_eps+0xac>)
  4066d0:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4066d2:	683b      	ldr	r3, [r7, #0]
  4066d4:	7c9b      	ldrb	r3, [r3, #18]
  4066d6:	f003 030f 	and.w	r3, r3, #15
  4066da:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
  4066dc:	7afb      	ldrb	r3, [r7, #11]
  4066de:	2201      	movs	r2, #1
  4066e0:	409a      	lsls	r2, r3
  4066e2:	687b      	ldr	r3, [r7, #4]
  4066e4:	4013      	ands	r3, r2
  4066e6:	2b00      	cmp	r3, #0
  4066e8:	d03d      	beq.n	406766 <_usb_d_dev_handle_eps+0xa2>
		return;
	}

	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  4066ea:	7afb      	ldrb	r3, [r7, #11]
  4066ec:	4619      	mov	r1, r3
  4066ee:	68f8      	ldr	r0, [r7, #12]
  4066f0:	4b20      	ldr	r3, [pc, #128]	; (406774 <_usb_d_dev_handle_eps+0xb0>)
  4066f2:	4798      	blx	r3
  4066f4:	4603      	mov	r3, r0
  4066f6:	72bb      	strb	r3, [r7, #10]
	mask  = hri_usbhs_read_DEVEPTIMR_reg(hw, epn);
  4066f8:	7afb      	ldrb	r3, [r7, #11]
  4066fa:	4619      	mov	r1, r3
  4066fc:	68f8      	ldr	r0, [r7, #12]
  4066fe:	4b1e      	ldr	r3, [pc, #120]	; (406778 <_usb_d_dev_handle_eps+0xb4>)
  406700:	4798      	blx	r3
  406702:	4603      	mov	r3, r0
  406704:	727b      	strb	r3, [r7, #9]
	flags &= mask;
  406706:	7aba      	ldrb	r2, [r7, #10]
  406708:	7a7b      	ldrb	r3, [r7, #9]
  40670a:	4013      	ands	r3, r2
  40670c:	72bb      	strb	r3, [r7, #10]

	if (flags) {
  40670e:	7abb      	ldrb	r3, [r7, #10]
  406710:	2b00      	cmp	r3, #0
  406712:	d029      	beq.n	406768 <_usb_d_dev_handle_eps+0xa4>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  406714:	7abb      	ldrb	r3, [r7, #10]
  406716:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40671a:	2b00      	cmp	r3, #0
  40671c:	d003      	beq.n	406726 <_usb_d_dev_handle_eps+0x62>
			_usb_d_dev_handle_stall(ept);
  40671e:	6838      	ldr	r0, [r7, #0]
  406720:	4b16      	ldr	r3, [pc, #88]	; (40677c <_usb_d_dev_handle_eps+0xb8>)
  406722:	4798      	blx	r3
  406724:	e020      	b.n	406768 <_usb_d_dev_handle_eps+0xa4>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  406726:	683b      	ldr	r3, [r7, #0]
  406728:	7cdb      	ldrb	r3, [r3, #19]
  40672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40672e:	b2db      	uxtb	r3, r3
  406730:	2b00      	cmp	r3, #0
  406732:	d105      	bne.n	406740 <_usb_d_dev_handle_eps+0x7c>
			_usb_d_dev_trans_setup_isr(ept, flags);
  406734:	7abb      	ldrb	r3, [r7, #10]
  406736:	4619      	mov	r1, r3
  406738:	6838      	ldr	r0, [r7, #0]
  40673a:	4b11      	ldr	r3, [pc, #68]	; (406780 <_usb_d_dev_handle_eps+0xbc>)
  40673c:	4798      	blx	r3
  40673e:	e013      	b.n	406768 <_usb_d_dev_handle_eps+0xa4>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  406740:	683b      	ldr	r3, [r7, #0]
  406742:	7cdb      	ldrb	r3, [r3, #19]
  406744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406748:	b2db      	uxtb	r3, r3
  40674a:	2b00      	cmp	r3, #0
  40674c:	d005      	beq.n	40675a <_usb_d_dev_handle_eps+0x96>
			_usb_d_dev_trans_in_isr(ept, flags);
  40674e:	7abb      	ldrb	r3, [r7, #10]
  406750:	4619      	mov	r1, r3
  406752:	6838      	ldr	r0, [r7, #0]
  406754:	4b0b      	ldr	r3, [pc, #44]	; (406784 <_usb_d_dev_handle_eps+0xc0>)
  406756:	4798      	blx	r3
  406758:	e006      	b.n	406768 <_usb_d_dev_handle_eps+0xa4>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
  40675a:	7abb      	ldrb	r3, [r7, #10]
  40675c:	4619      	mov	r1, r3
  40675e:	6838      	ldr	r0, [r7, #0]
  406760:	4b09      	ldr	r3, [pc, #36]	; (406788 <_usb_d_dev_handle_eps+0xc4>)
  406762:	4798      	blx	r3
  406764:	e000      	b.n	406768 <_usb_d_dev_handle_eps+0xa4>
		return;
  406766:	bf00      	nop
		}
	}
}
  406768:	3710      	adds	r7, #16
  40676a:	46bd      	mov	sp, r7
  40676c:	bd80      	pop	{r7, pc}
  40676e:	bf00      	nop
  406770:	40038000 	.word	0x40038000
  406774:	0040535d 	.word	0x0040535d
  406778:	00405451 	.word	0x00405451
  40677c:	0040654d 	.word	0x0040654d
  406780:	004065d5 	.word	0x004065d5
  406784:	00406615 	.word	0x00406615
  406788:	00406661 	.word	0x00406661

0040678c <_usb_d_dev_handle_dma>:
 * \brief Handles the endpoint DMA interrupts.
 * \param[in] epint Endpoint DMA interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_dma(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  40678c:	b580      	push	{r7, lr}
  40678e:	b086      	sub	sp, #24
  406790:	af00      	add	r7, sp, #0
  406792:	6078      	str	r0, [r7, #4]
  406794:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  406796:	4b21      	ldr	r3, [pc, #132]	; (40681c <_usb_d_dev_handle_dma+0x90>)
  406798:	617b      	str	r3, [r7, #20]

	uint8_t  epn = USB_EP_GET_N(ept->ep);
  40679a:	683b      	ldr	r3, [r7, #0]
  40679c:	7c9b      	ldrb	r3, [r3, #18]
  40679e:	f003 030f 	and.w	r3, r3, #15
  4067a2:	74fb      	strb	r3, [r7, #19]
	uint32_t trans_next;

	if (!(epint & (1u << (epn - 1)))) {
  4067a4:	7cfb      	ldrb	r3, [r7, #19]
  4067a6:	3b01      	subs	r3, #1
  4067a8:	2201      	movs	r2, #1
  4067aa:	409a      	lsls	r2, r3
  4067ac:	687b      	ldr	r3, [r7, #4]
  4067ae:	4013      	ands	r3, r2
  4067b0:	2b00      	cmp	r3, #0
  4067b2:	d02c      	beq.n	40680e <_usb_d_dev_handle_dma+0x82>
		return;
	}

	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  4067b4:	7cfb      	ldrb	r3, [r7, #19]
  4067b6:	3b01      	subs	r3, #1
  4067b8:	b2db      	uxtb	r3, r3
  4067ba:	4619      	mov	r1, r3
  4067bc:	6978      	ldr	r0, [r7, #20]
  4067be:	4b18      	ldr	r3, [pc, #96]	; (406820 <_usb_d_dev_handle_dma+0x94>)
  4067c0:	4798      	blx	r3
  4067c2:	4603      	mov	r3, r0
  4067c4:	2b00      	cmp	r3, #0
  4067c6:	d124      	bne.n	406812 <_usb_d_dev_handle_dma+0x86>
		/* Ignore EOT_STA interrupt */
		return;
	}
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  4067c8:	7cfb      	ldrb	r3, [r7, #19]
  4067ca:	3b01      	subs	r3, #1
  4067cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4067d0:	fa02 f303 	lsl.w	r3, r2, r3
  4067d4:	4619      	mov	r1, r3
  4067d6:	6978      	ldr	r0, [r7, #20]
  4067d8:	4b12      	ldr	r3, [pc, #72]	; (406824 <_usb_d_dev_handle_dma+0x98>)
  4067da:	4798      	blx	r3
	trans_next = hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(hw, (epn - 1));
  4067dc:	7cfb      	ldrb	r3, [r7, #19]
  4067de:	3b01      	subs	r3, #1
  4067e0:	b2db      	uxtb	r3, r3
  4067e2:	4619      	mov	r1, r3
  4067e4:	6978      	ldr	r0, [r7, #20]
  4067e6:	4b10      	ldr	r3, [pc, #64]	; (406828 <_usb_d_dev_handle_dma+0x9c>)
  4067e8:	4798      	blx	r3
  4067ea:	60f8      	str	r0, [r7, #12]
	if (trans_next) {
  4067ec:	68fb      	ldr	r3, [r7, #12]
  4067ee:	2b00      	cmp	r3, #0
  4067f0:	d009      	beq.n	406806 <_usb_d_dev_handle_dma+0x7a>
		/* Transfer no complete (short packet or ZLP) then: Update number of
		   data transfered */
		ept->trans_count -= trans_next;
  4067f2:	683b      	ldr	r3, [r7, #0]
  4067f4:	689a      	ldr	r2, [r3, #8]
  4067f6:	68fb      	ldr	r3, [r7, #12]
  4067f8:	1ad2      	subs	r2, r2, r3
  4067fa:	683b      	ldr	r3, [r7, #0]
  4067fc:	609a      	str	r2, [r3, #8]
		/* Set transfer complete to stop the transfer */
		ept->trans_size = ept->trans_count;
  4067fe:	683b      	ldr	r3, [r7, #0]
  406800:	689a      	ldr	r2, [r3, #8]
  406802:	683b      	ldr	r3, [r7, #0]
  406804:	605a      	str	r2, [r3, #4]
	}
	_usb_d_dev_dma_next(ept);
  406806:	6838      	ldr	r0, [r7, #0]
  406808:	4b08      	ldr	r3, [pc, #32]	; (40682c <_usb_d_dev_handle_dma+0xa0>)
  40680a:	4798      	blx	r3
  40680c:	e002      	b.n	406814 <_usb_d_dev_handle_dma+0x88>
		return;
  40680e:	bf00      	nop
  406810:	e000      	b.n	406814 <_usb_d_dev_handle_dma+0x88>
		return;
  406812:	bf00      	nop
}
  406814:	3718      	adds	r7, #24
  406816:	46bd      	mov	sp, r7
  406818:	bd80      	pop	{r7, pc}
  40681a:	bf00      	nop
  40681c:	40038000 	.word	0x40038000
  406820:	00405851 	.word	0x00405851
  406824:	0040541d 	.word	0x0040541d
  406828:	004058bb 	.word	0x004058bb
  40682c:	004062d9 	.word	0x004062d9

00406830 <USBHS_Handler>:

/**
 * \brief USB device interrupt handler
 */
void USBHS_Handler(void)
{
  406830:	b590      	push	{r4, r7, lr}
  406832:	b087      	sub	sp, #28
  406834:	af00      	add	r7, sp, #0
	Usbhs *  hw = USBHS;
  406836:	4b29      	ldr	r3, [pc, #164]	; (4068dc <USBHS_Handler+0xac>)
  406838:	613b      	str	r3, [r7, #16]
	uint8_t  i;
	uint32_t flags, ep_int, dma_int;

	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  40683a:	6938      	ldr	r0, [r7, #16]
  40683c:	4b28      	ldr	r3, [pc, #160]	; (4068e0 <USBHS_Handler+0xb0>)
  40683e:	4798      	blx	r3
  406840:	4604      	mov	r4, r0
  406842:	6938      	ldr	r0, [r7, #16]
  406844:	4b27      	ldr	r3, [pc, #156]	; (4068e4 <USBHS_Handler+0xb4>)
  406846:	4798      	blx	r3
  406848:	4603      	mov	r3, r0
  40684a:	4023      	ands	r3, r4
  40684c:	60fb      	str	r3, [r7, #12]

	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  40684e:	68fb      	ldr	r3, [r7, #12]
  406850:	0b1b      	lsrs	r3, r3, #12
  406852:	f3c3 030b 	ubfx	r3, r3, #0, #12
  406856:	60bb      	str	r3, [r7, #8]
#if (CONF_USB_D_DMA_ENABLE == 1)
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  406858:	68fb      	ldr	r3, [r7, #12]
  40685a:	0e5b      	lsrs	r3, r3, #25
  40685c:	607b      	str	r3, [r7, #4]
#endif

#if (CONF_USB_D_DMA_ENABLE == 1)
	if ((ep_int == 0) && (dma_int == 0)) {
  40685e:	68bb      	ldr	r3, [r7, #8]
  406860:	2b00      	cmp	r3, #0
  406862:	d107      	bne.n	406874 <USBHS_Handler+0x44>
  406864:	687b      	ldr	r3, [r7, #4]
  406866:	2b00      	cmp	r3, #0
  406868:	d104      	bne.n	406874 <USBHS_Handler+0x44>
#else
	if (ep_int == 0) {
#endif
		if (_usb_d_dev_handle_nep()) {
  40686a:	4b1f      	ldr	r3, [pc, #124]	; (4068e8 <USBHS_Handler+0xb8>)
  40686c:	4798      	blx	r3
  40686e:	4603      	mov	r3, r0
  406870:	2b00      	cmp	r3, #0
  406872:	d12e      	bne.n	4068d2 <USBHS_Handler+0xa2>
			return;
		}
	}

	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
  406874:	2300      	movs	r3, #0
  406876:	75fb      	strb	r3, [r7, #23]
  406878:	e027      	b.n	4068ca <USBHS_Handler+0x9a>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  40687a:	7dfa      	ldrb	r2, [r7, #23]
  40687c:	4613      	mov	r3, r2
  40687e:	009b      	lsls	r3, r3, #2
  406880:	4413      	add	r3, r2
  406882:	009b      	lsls	r3, r3, #2
  406884:	3310      	adds	r3, #16
  406886:	4a19      	ldr	r2, [pc, #100]	; (4068ec <USBHS_Handler+0xbc>)
  406888:	4413      	add	r3, r2
  40688a:	3304      	adds	r3, #4
  40688c:	603b      	str	r3, [r7, #0]

		if (ept->ep == 0xFF) {
  40688e:	683b      	ldr	r3, [r7, #0]
  406890:	7c9b      	ldrb	r3, [r3, #18]
  406892:	2bff      	cmp	r3, #255	; 0xff
  406894:	d015      	beq.n	4068c2 <USBHS_Handler+0x92>
			continue;
		}
		if (ep_int) {
  406896:	68bb      	ldr	r3, [r7, #8]
  406898:	2b00      	cmp	r3, #0
  40689a:	d004      	beq.n	4068a6 <USBHS_Handler+0x76>
			_usb_d_dev_handle_eps(ep_int, ept);
  40689c:	6839      	ldr	r1, [r7, #0]
  40689e:	68b8      	ldr	r0, [r7, #8]
  4068a0:	4b13      	ldr	r3, [pc, #76]	; (4068f0 <USBHS_Handler+0xc0>)
  4068a2:	4798      	blx	r3
  4068a4:	e00e      	b.n	4068c4 <USBHS_Handler+0x94>
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  4068a6:	687b      	ldr	r3, [r7, #4]
  4068a8:	2b00      	cmp	r3, #0
  4068aa:	d00b      	beq.n	4068c4 <USBHS_Handler+0x94>
  4068ac:	7dfb      	ldrb	r3, [r7, #23]
  4068ae:	2b00      	cmp	r3, #0
  4068b0:	d008      	beq.n	4068c4 <USBHS_Handler+0x94>
  4068b2:	7dfb      	ldrb	r3, [r7, #23]
  4068b4:	2b06      	cmp	r3, #6
  4068b6:	d805      	bhi.n	4068c4 <USBHS_Handler+0x94>
			_usb_d_dev_handle_dma(dma_int, ept);
  4068b8:	6839      	ldr	r1, [r7, #0]
  4068ba:	6878      	ldr	r0, [r7, #4]
  4068bc:	4b0d      	ldr	r3, [pc, #52]	; (4068f4 <USBHS_Handler+0xc4>)
  4068be:	4798      	blx	r3
  4068c0:	e000      	b.n	4068c4 <USBHS_Handler+0x94>
			continue;
  4068c2:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
  4068c4:	7dfb      	ldrb	r3, [r7, #23]
  4068c6:	3301      	adds	r3, #1
  4068c8:	75fb      	strb	r3, [r7, #23]
  4068ca:	7dfb      	ldrb	r3, [r7, #23]
  4068cc:	2b03      	cmp	r3, #3
  4068ce:	d9d4      	bls.n	40687a <USBHS_Handler+0x4a>
  4068d0:	e000      	b.n	4068d4 <USBHS_Handler+0xa4>
			return;
  4068d2:	bf00      	nop
		}
#endif
	}
}
  4068d4:	371c      	adds	r7, #28
  4068d6:	46bd      	mov	sp, r7
  4068d8:	bd90      	pop	{r4, r7, pc}
  4068da:	bf00      	nop
  4068dc:	40038000 	.word	0x40038000
  4068e0:	00405439 	.word	0x00405439
  4068e4:	00405405 	.word	0x00405405
  4068e8:	00405f25 	.word	0x00405f25
  4068ec:	20401674 	.word	0x20401674
  4068f0:	004066c5 	.word	0x004066c5
  4068f4:	0040678d 	.word	0x0040678d

004068f8 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
  4068f8:	b580      	push	{r7, lr}
  4068fa:	b082      	sub	sp, #8
  4068fc:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Reset USB address to 0 */
	hri_usbhs_clear_DEVCTRL_ADDEN_bit(USBHS);
  4068fe:	481c      	ldr	r0, [pc, #112]	; (406970 <_usb_d_dev_reset_epts+0x78>)
  406900:	4b1c      	ldr	r3, [pc, #112]	; (406974 <_usb_d_dev_reset_epts+0x7c>)
  406902:	4798      	blx	r3
	hri_usbhs_write_DEVCTRL_UADD_bf(USBHS, 0);
  406904:	2100      	movs	r1, #0
  406906:	481a      	ldr	r0, [pc, #104]	; (406970 <_usb_d_dev_reset_epts+0x78>)
  406908:	4b1b      	ldr	r3, [pc, #108]	; (406978 <_usb_d_dev_reset_epts+0x80>)
  40690a:	4798      	blx	r3
	hri_usbhs_set_DEVCTRL_ADDEN_bit(USBHS);
  40690c:	4818      	ldr	r0, [pc, #96]	; (406970 <_usb_d_dev_reset_epts+0x78>)
  40690e:	4b1b      	ldr	r3, [pc, #108]	; (40697c <_usb_d_dev_reset_epts+0x84>)
  406910:	4798      	blx	r3

	for (i = 0; i < USB_D_N_EP; i++) {
  406912:	2300      	movs	r3, #0
  406914:	71fb      	strb	r3, [r7, #7]
  406916:	e023      	b.n	406960 <_usb_d_dev_reset_epts+0x68>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  406918:	79fa      	ldrb	r2, [r7, #7]
  40691a:	4613      	mov	r3, r2
  40691c:	009b      	lsls	r3, r3, #2
  40691e:	4413      	add	r3, r2
  406920:	009b      	lsls	r3, r3, #2
  406922:	3310      	adds	r3, #16
  406924:	4a16      	ldr	r2, [pc, #88]	; (406980 <_usb_d_dev_reset_epts+0x88>)
  406926:	4413      	add	r3, r2
  406928:	3304      	adds	r3, #4
  40692a:	2103      	movs	r1, #3
  40692c:	4618      	mov	r0, r3
  40692e:	4b15      	ldr	r3, [pc, #84]	; (406984 <_usb_d_dev_reset_epts+0x8c>)
  406930:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
  406932:	79fa      	ldrb	r2, [r7, #7]
  406934:	4912      	ldr	r1, [pc, #72]	; (406980 <_usb_d_dev_reset_epts+0x88>)
  406936:	4613      	mov	r3, r2
  406938:	009b      	lsls	r3, r3, #2
  40693a:	4413      	add	r3, r2
  40693c:	009b      	lsls	r3, r3, #2
  40693e:	440b      	add	r3, r1
  406940:	3326      	adds	r3, #38	; 0x26
  406942:	22ff      	movs	r2, #255	; 0xff
  406944:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
  406946:	79fa      	ldrb	r2, [r7, #7]
  406948:	490d      	ldr	r1, [pc, #52]	; (406980 <_usb_d_dev_reset_epts+0x88>)
  40694a:	4613      	mov	r3, r2
  40694c:	009b      	lsls	r3, r3, #2
  40694e:	4413      	add	r3, r2
  406950:	009b      	lsls	r3, r3, #2
  406952:	440b      	add	r3, r1
  406954:	3327      	adds	r3, #39	; 0x27
  406956:	2200      	movs	r2, #0
  406958:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
  40695a:	79fb      	ldrb	r3, [r7, #7]
  40695c:	3301      	adds	r3, #1
  40695e:	71fb      	strb	r3, [r7, #7]
  406960:	79fb      	ldrb	r3, [r7, #7]
  406962:	2b03      	cmp	r3, #3
  406964:	d9d8      	bls.n	406918 <_usb_d_dev_reset_epts+0x20>
	}
}
  406966:	bf00      	nop
  406968:	3708      	adds	r7, #8
  40696a:	46bd      	mov	sp, r7
  40696c:	bd80      	pop	{r7, pc}
  40696e:	bf00      	nop
  406970:	40038000 	.word	0x40038000
  406974:	00405493 	.word	0x00405493
  406978:	004054d3 	.word	0x004054d3
  40697c:	00405473 	.word	0x00405473
  406980:	20401674 	.word	0x20401674
  406984:	00407141 	.word	0x00407141

00406988 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
  406988:	b590      	push	{r4, r7, lr}
  40698a:	b089      	sub	sp, #36	; 0x24
  40698c:	af00      	add	r7, sp, #0
	Usbhs *        hw = USBHS;
  40698e:	4b1d      	ldr	r3, [pc, #116]	; (406a04 <_usb_d_dev_init+0x7c>)
  406990:	61fb      	str	r3, [r7, #28]
	uint32_t       data;
	uint8_t        speed      = CONF_USB_D_SPEED;
  406992:	2301      	movs	r3, #1
  406994:	76fb      	strb	r3, [r7, #27]
	const uint32_t spdconf[4] = {
  406996:	4b1c      	ldr	r3, [pc, #112]	; (406a08 <_usb_d_dev_init+0x80>)
  406998:	1d3c      	adds	r4, r7, #4
  40699a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40699c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0,                                             /* HS */
		0                                              /* Reserved */
	};
#endif

	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  4069a0:	69f8      	ldr	r0, [r7, #28]
  4069a2:	4b1a      	ldr	r3, [pc, #104]	; (406a0c <_usb_d_dev_init+0x84>)
  4069a4:	4798      	blx	r3
  4069a6:	4603      	mov	r3, r0
  4069a8:	2b00      	cmp	r3, #0
  4069aa:	d002      	beq.n	4069b2 <_usb_d_dev_init+0x2a>
		return ERR_DENIED;
  4069ac:	f06f 0310 	mvn.w	r3, #16
  4069b0:	e024      	b.n	4069fc <_usb_d_dev_init+0x74>
	}

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  4069b2:	4b17      	ldr	r3, [pc, #92]	; (406a10 <_usb_d_dev_init+0x88>)
  4069b4:	4a17      	ldr	r2, [pc, #92]	; (406a14 <_usb_d_dev_init+0x8c>)
  4069b6:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  4069b8:	4b15      	ldr	r3, [pc, #84]	; (406a10 <_usb_d_dev_init+0x88>)
  4069ba:	4a16      	ldr	r2, [pc, #88]	; (406a14 <_usb_d_dev_init+0x8c>)
  4069bc:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  4069be:	4b14      	ldr	r3, [pc, #80]	; (406a10 <_usb_d_dev_init+0x88>)
  4069c0:	4a14      	ldr	r2, [pc, #80]	; (406a14 <_usb_d_dev_init+0x8c>)
  4069c2:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  4069c4:	4b12      	ldr	r3, [pc, #72]	; (406a10 <_usb_d_dev_init+0x88>)
  4069c6:	4a14      	ldr	r2, [pc, #80]	; (406a18 <_usb_d_dev_init+0x90>)
  4069c8:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  4069ca:	4b11      	ldr	r3, [pc, #68]	; (406a10 <_usb_d_dev_init+0x88>)
  4069cc:	4a11      	ldr	r2, [pc, #68]	; (406a14 <_usb_d_dev_init+0x8c>)
  4069ce:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
  4069d0:	4b12      	ldr	r3, [pc, #72]	; (406a1c <_usb_d_dev_init+0x94>)
  4069d2:	4798      	blx	r3
	hri_usbhs_write_CTRL_reg(hw, USBHS_CTRL_UIMOD);
  4069d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4069d8:	69f8      	ldr	r0, [r7, #28]
  4069da:	4b11      	ldr	r3, [pc, #68]	; (406a20 <_usb_d_dev_init+0x98>)
  4069dc:	4798      	blx	r3

	data = spdconf[speed] | USBHS_DEVCTRL_DETACH;
  4069de:	7efb      	ldrb	r3, [r7, #27]
  4069e0:	009b      	lsls	r3, r3, #2
  4069e2:	f107 0220 	add.w	r2, r7, #32
  4069e6:	4413      	add	r3, r2
  4069e8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  4069ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4069f0:	617b      	str	r3, [r7, #20]
	hri_usbhs_write_DEVCTRL_reg(hw, data);
  4069f2:	6979      	ldr	r1, [r7, #20]
  4069f4:	69f8      	ldr	r0, [r7, #28]
  4069f6:	4b0b      	ldr	r3, [pc, #44]	; (406a24 <_usb_d_dev_init+0x9c>)
  4069f8:	4798      	blx	r3

	return ERR_NONE;
  4069fa:	2300      	movs	r3, #0
}
  4069fc:	4618      	mov	r0, r3
  4069fe:	3724      	adds	r7, #36	; 0x24
  406a00:	46bd      	mov	sp, r7
  406a02:	bd90      	pop	{r4, r7, pc}
  406a04:	40038000 	.word	0x40038000
  406a08:	0040974c 	.word	0x0040974c
  406a0c:	0040571f 	.word	0x0040571f
  406a10:	20401674 	.word	0x20401674
  406a14:	004058e5 	.word	0x004058e5
  406a18:	004058fb 	.word	0x004058fb
  406a1c:	004068f9 	.word	0x004068f9
  406a20:	00405751 	.word	0x00405751
  406a24:	00405509 	.word	0x00405509

00406a28 <_usb_d_dev_enable>:
	NVIC_DisableIRQ(USBHS_IRQn);
	NVIC_ClearPendingIRQ(USBHS_IRQn);
}

int32_t _usb_d_dev_enable(void)
{
  406a28:	b580      	push	{r7, lr}
  406a2a:	b082      	sub	sp, #8
  406a2c:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  406a2e:	4b13      	ldr	r3, [pc, #76]	; (406a7c <_usb_d_dev_enable+0x54>)
  406a30:	607b      	str	r3, [r7, #4]

	if (!(hri_usbhs_get_CTRL_USBE_bit(hw))) {
  406a32:	6878      	ldr	r0, [r7, #4]
  406a34:	4b12      	ldr	r3, [pc, #72]	; (406a80 <_usb_d_dev_enable+0x58>)
  406a36:	4798      	blx	r3
  406a38:	4603      	mov	r3, r0
  406a3a:	f083 0301 	eor.w	r3, r3, #1
  406a3e:	b2db      	uxtb	r3, r3
  406a40:	2b00      	cmp	r3, #0
  406a42:	d005      	beq.n	406a50 <_usb_d_dev_enable+0x28>
		hri_usbhs_clear_CTRL_FRZCLK_bit(hw);
  406a44:	6878      	ldr	r0, [r7, #4]
  406a46:	4b0f      	ldr	r3, [pc, #60]	; (406a84 <_usb_d_dev_enable+0x5c>)
  406a48:	4798      	blx	r3
		hri_usbhs_set_CTRL_USBE_bit(hw);
  406a4a:	6878      	ldr	r0, [r7, #4]
  406a4c:	4b0e      	ldr	r3, [pc, #56]	; (406a88 <_usb_d_dev_enable+0x60>)
  406a4e:	4798      	blx	r3
	}

	while (!hri_usbhs_get_SR_CLKUSABLE_bit(hw)) {
  406a50:	bf00      	nop
  406a52:	6878      	ldr	r0, [r7, #4]
  406a54:	4b0d      	ldr	r3, [pc, #52]	; (406a8c <_usb_d_dev_enable+0x64>)
  406a56:	4798      	blx	r3
  406a58:	4603      	mov	r3, r0
  406a5a:	f083 0301 	eor.w	r3, r3, #1
  406a5e:	b2db      	uxtb	r3, r3
  406a60:	2b00      	cmp	r3, #0
  406a62:	d1f6      	bne.n	406a52 <_usb_d_dev_enable+0x2a>
		/* Waiting for clock is stable */
	}

	hri_usbhs_set_DEVIMR_reg(hw,
  406a64:	211d      	movs	r1, #29
  406a66:	6878      	ldr	r0, [r7, #4]
  406a68:	4b09      	ldr	r3, [pc, #36]	; (406a90 <_usb_d_dev_enable+0x68>)
  406a6a:	4798      	blx	r3
	                         USBHS_DEVIER_SUSPES |
	                             /*USBHS_DEVIER_MSOFES |*/ USBHS_DEVIER_SOFES | USBHS_DEVIER_EORSTES
	                             | USBHS_DEVIER_WAKEUPES);
	NVIC_EnableIRQ(USBHS_IRQn);
  406a6c:	2022      	movs	r0, #34	; 0x22
  406a6e:	4b09      	ldr	r3, [pc, #36]	; (406a94 <_usb_d_dev_enable+0x6c>)
  406a70:	4798      	blx	r3

	return ERR_NONE;
  406a72:	2300      	movs	r3, #0
}
  406a74:	4618      	mov	r0, r3
  406a76:	3708      	adds	r7, #8
  406a78:	46bd      	mov	sp, r7
  406a7a:	bd80      	pop	{r7, pc}
  406a7c:	40038000 	.word	0x40038000
  406a80:	0040571f 	.word	0x0040571f
  406a84:	004056d7 	.word	0x004056d7
  406a88:	004056fb 	.word	0x004056fb
  406a8c:	004053a5 	.word	0x004053a5
  406a90:	004053e9 	.word	0x004053e9
  406a94:	00405229 	.word	0x00405229

00406a98 <_usb_d_dev_attach>:

	return ERR_NONE;
}

void _usb_d_dev_attach(void)
{
  406a98:	b580      	push	{r7, lr}
  406a9a:	af00      	add	r7, sp, #0
	hri_usbhs_clear_DEVCTRL_DETACH_bit(USBHS);
  406a9c:	4802      	ldr	r0, [pc, #8]	; (406aa8 <_usb_d_dev_attach+0x10>)
  406a9e:	4b03      	ldr	r3, [pc, #12]	; (406aac <_usb_d_dev_attach+0x14>)
  406aa0:	4798      	blx	r3
}
  406aa2:	bf00      	nop
  406aa4:	bd80      	pop	{r7, pc}
  406aa6:	bf00      	nop
  406aa8:	40038000 	.word	0x40038000
  406aac:	004054b3 	.word	0x004054b3

00406ab0 <_usb_d_dev_set_address>:

	return speed[sp];
}

void _usb_d_dev_set_address(uint8_t addr)
{
  406ab0:	b580      	push	{r7, lr}
  406ab2:	b082      	sub	sp, #8
  406ab4:	af00      	add	r7, sp, #0
  406ab6:	4603      	mov	r3, r0
  406ab8:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVCTRL_UADD_bf(USBHS, addr);
  406aba:	79fb      	ldrb	r3, [r7, #7]
  406abc:	4619      	mov	r1, r3
  406abe:	4805      	ldr	r0, [pc, #20]	; (406ad4 <_usb_d_dev_set_address+0x24>)
  406ac0:	4b05      	ldr	r3, [pc, #20]	; (406ad8 <_usb_d_dev_set_address+0x28>)
  406ac2:	4798      	blx	r3
	hri_usbhs_set_DEVCTRL_ADDEN_bit(USBHS);
  406ac4:	4803      	ldr	r0, [pc, #12]	; (406ad4 <_usb_d_dev_set_address+0x24>)
  406ac6:	4b05      	ldr	r3, [pc, #20]	; (406adc <_usb_d_dev_set_address+0x2c>)
  406ac8:	4798      	blx	r3
}
  406aca:	bf00      	nop
  406acc:	3708      	adds	r7, #8
  406ace:	46bd      	mov	sp, r7
  406ad0:	bd80      	pop	{r7, pc}
  406ad2:	bf00      	nop
  406ad4:	40038000 	.word	0x40038000
  406ad8:	004054d3 	.word	0x004054d3
  406adc:	00405473 	.word	0x00405473

00406ae0 <_usb_d_dev_trans_setup>:
/**
 *  \brief Start a setup transaction
 *  \param[in] ept Endpoint information.
 */
static inline void _usb_d_dev_trans_setup(struct _usb_d_dev_ep *ept)
{
  406ae0:	b580      	push	{r7, lr}
  406ae2:	b084      	sub	sp, #16
  406ae4:	af00      	add	r7, sp, #0
  406ae6:	6078      	str	r0, [r7, #4]
	Usbhs * hw  = USBHS;
  406ae8:	4b15      	ldr	r3, [pc, #84]	; (406b40 <_usb_d_dev_trans_setup+0x60>)
  406aea:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406aec:	687b      	ldr	r3, [r7, #4]
  406aee:	7c9b      	ldrb	r3, [r3, #18]
  406af0:	f003 030f 	and.w	r3, r3, #15
  406af4:	72fb      	strb	r3, [r7, #11]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_STALLEDIC | USBHS_DEVEPTICR_TXINIC);
  406af6:	7afb      	ldrb	r3, [r7, #11]
  406af8:	2241      	movs	r2, #65	; 0x41
  406afa:	4619      	mov	r1, r3
  406afc:	68f8      	ldr	r0, [r7, #12]
  406afe:	4b11      	ldr	r3, [pc, #68]	; (406b44 <_usb_d_dev_trans_setup+0x64>)
  406b00:	4798      	blx	r3
	_usbd_ep_set_out_rdy(epn, false);
  406b02:	7afb      	ldrb	r3, [r7, #11]
  406b04:	2100      	movs	r1, #0
  406b06:	4618      	mov	r0, r3
  406b08:	4b0f      	ldr	r3, [pc, #60]	; (406b48 <_usb_d_dev_trans_setup+0x68>)
  406b0a:	4798      	blx	r3

	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RXSTPES | USBHS_DEVEPTIER_RXOUTES);
  406b0c:	7afb      	ldrb	r3, [r7, #11]
  406b0e:	2206      	movs	r2, #6
  406b10:	4619      	mov	r1, r3
  406b12:	68f8      	ldr	r0, [r7, #12]
  406b14:	4b0d      	ldr	r3, [pc, #52]	; (406b4c <_usb_d_dev_trans_setup+0x6c>)
  406b16:	4798      	blx	r3
	/* In case of abort of IN Data Phase:
	   No need to abort IN transfer (rise TXINI),
	   because it is automatically done by hardware when a Setup packet is received.
	   But the interrupt must be disabled to don't generate interrupt TXINI
	   after SETUP reception. */
	hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_TXINEC);
  406b18:	7afb      	ldrb	r3, [r7, #11]
  406b1a:	2201      	movs	r2, #1
  406b1c:	4619      	mov	r1, r3
  406b1e:	68f8      	ldr	r0, [r7, #12]
  406b20:	4b0b      	ldr	r3, [pc, #44]	; (406b50 <_usb_d_dev_trans_setup+0x70>)
  406b22:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406b24:	7afb      	ldrb	r3, [r7, #11]
  406b26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406b2a:	fa02 f303 	lsl.w	r3, r2, r3
  406b2e:	4619      	mov	r1, r3
  406b30:	68f8      	ldr	r0, [r7, #12]
  406b32:	4b08      	ldr	r3, [pc, #32]	; (406b54 <_usb_d_dev_trans_setup+0x74>)
  406b34:	4798      	blx	r3
}
  406b36:	bf00      	nop
  406b38:	3710      	adds	r7, #16
  406b3a:	46bd      	mov	sp, r7
  406b3c:	bd80      	pop	{r7, pc}
  406b3e:	bf00      	nop
  406b40:	40038000 	.word	0x40038000
  406b44:	0040537f 	.word	0x0040537f
  406b48:	00405d51 	.word	0x00405d51
  406b4c:	004057b1 	.word	0x004057b1
  406b50:	004057d7 	.word	0x004057d7
  406b54:	004053e9 	.word	0x004053e9

00406b58 <_usb_d_dev_ep_init>:
{
	return _usb_d_dev_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_siz);
}

int32_t _usb_d_dev_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_siz)
{
  406b58:	b590      	push	{r4, r7, lr}
  406b5a:	b087      	sub	sp, #28
  406b5c:	af00      	add	r7, sp, #0
  406b5e:	4603      	mov	r3, r0
  406b60:	71fb      	strb	r3, [r7, #7]
  406b62:	460b      	mov	r3, r1
  406b64:	71bb      	strb	r3, [r7, #6]
  406b66:	4613      	mov	r3, r2
  406b68:	80bb      	strh	r3, [r7, #4]
	uint8_t               bank = 0;
  406b6a:	2300      	movs	r3, #0
  406b6c:	75fb      	strb	r3, [r7, #23]
	uint32_t              data;
	uint8_t               epn = USB_EP_GET_N(ep);
  406b6e:	79fb      	ldrb	r3, [r7, #7]
  406b70:	f003 030f 	and.w	r3, r3, #15
  406b74:	75bb      	strb	r3, [r7, #22]
	bool                  dir = USB_EP_GET_DIR(ep);
  406b76:	79fb      	ldrb	r3, [r7, #7]
  406b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406b7c:	2b00      	cmp	r3, #0
  406b7e:	bf14      	ite	ne
  406b80:	2301      	movne	r3, #1
  406b82:	2300      	moveq	r3, #0
  406b84:	757b      	strb	r3, [r7, #21]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  406b86:	7dba      	ldrb	r2, [r7, #22]
  406b88:	4613      	mov	r3, r2
  406b8a:	009b      	lsls	r3, r3, #2
  406b8c:	4413      	add	r3, r2
  406b8e:	009b      	lsls	r3, r3, #2
  406b90:	3310      	adds	r3, #16
  406b92:	4a51      	ldr	r2, [pc, #324]	; (406cd8 <_usb_d_dev_ep_init+0x180>)
  406b94:	4413      	add	r3, r2
  406b96:	3304      	adds	r3, #4
  406b98:	613b      	str	r3, [r7, #16]

	/* Check if endpoint size is 8,16,32,64,128,256,512 or 1023 */
	ASSERT(max_pkt_siz < 1024);
  406b9a:	88bb      	ldrh	r3, [r7, #4]
  406b9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
  406ba0:	4293      	cmp	r3, r2
  406ba2:	bf94      	ite	ls
  406ba4:	2301      	movls	r3, #1
  406ba6:	2300      	movhi	r3, #0
  406ba8:	b2db      	uxtb	r3, r3
  406baa:	f240 42d2 	movw	r2, #1234	; 0x4d2
  406bae:	494b      	ldr	r1, [pc, #300]	; (406cdc <_usb_d_dev_ep_init+0x184>)
  406bb0:	4618      	mov	r0, r3
  406bb2:	4b4b      	ldr	r3, [pc, #300]	; (406ce0 <_usb_d_dev_ep_init+0x188>)
  406bb4:	4798      	blx	r3
	ASSERT((max_pkt_siz == 1023) || !(max_pkt_siz & (max_pkt_siz - 1)));
  406bb6:	88bb      	ldrh	r3, [r7, #4]
  406bb8:	f240 32ff 	movw	r2, #1023	; 0x3ff
  406bbc:	4293      	cmp	r3, r2
  406bbe:	d005      	beq.n	406bcc <_usb_d_dev_ep_init+0x74>
  406bc0:	88ba      	ldrh	r2, [r7, #4]
  406bc2:	88bb      	ldrh	r3, [r7, #4]
  406bc4:	3b01      	subs	r3, #1
  406bc6:	4013      	ands	r3, r2
  406bc8:	2b00      	cmp	r3, #0
  406bca:	d101      	bne.n	406bd0 <_usb_d_dev_ep_init+0x78>
  406bcc:	2301      	movs	r3, #1
  406bce:	e000      	b.n	406bd2 <_usb_d_dev_ep_init+0x7a>
  406bd0:	2300      	movs	r3, #0
  406bd2:	f003 0301 	and.w	r3, r3, #1
  406bd6:	b2db      	uxtb	r3, r3
  406bd8:	f240 42d3 	movw	r2, #1235	; 0x4d3
  406bdc:	493f      	ldr	r1, [pc, #252]	; (406cdc <_usb_d_dev_ep_init+0x184>)
  406bde:	4618      	mov	r0, r3
  406be0:	4b3f      	ldr	r3, [pc, #252]	; (406ce0 <_usb_d_dev_ep_init+0x188>)
  406be2:	4798      	blx	r3
	ASSERT(max_pkt_siz >= 8);
  406be4:	88bb      	ldrh	r3, [r7, #4]
  406be6:	2b07      	cmp	r3, #7
  406be8:	bf8c      	ite	hi
  406bea:	2301      	movhi	r3, #1
  406bec:	2300      	movls	r3, #0
  406bee:	b2db      	uxtb	r3, r3
  406bf0:	f240 42d4 	movw	r2, #1236	; 0x4d4
  406bf4:	4939      	ldr	r1, [pc, #228]	; (406cdc <_usb_d_dev_ep_init+0x184>)
  406bf6:	4618      	mov	r0, r3
  406bf8:	4b39      	ldr	r3, [pc, #228]	; (406ce0 <_usb_d_dev_ep_init+0x188>)
  406bfa:	4798      	blx	r3

	uint8_t ep_type = attr & USB_EP_XTYPE_MASK;
  406bfc:	79bb      	ldrb	r3, [r7, #6]
  406bfe:	f003 0303 	and.w	r3, r3, #3
  406c02:	73fb      	strb	r3, [r7, #15]

	if (epn > CONF_USB_D_MAX_EP_N) {
  406c04:	7dbb      	ldrb	r3, [r7, #22]
  406c06:	2b03      	cmp	r3, #3
  406c08:	d902      	bls.n	406c10 <_usb_d_dev_ep_init+0xb8>
		return -USB_ERR_PARAM;
  406c0a:	f06f 0311 	mvn.w	r3, #17
  406c0e:	e05e      	b.n	406cce <_usb_d_dev_ep_init+0x176>
	}

	if (ept->ep != 0xFF) {
  406c10:	693b      	ldr	r3, [r7, #16]
  406c12:	7c9b      	ldrb	r3, [r3, #18]
  406c14:	2bff      	cmp	r3, #255	; 0xff
  406c16:	d002      	beq.n	406c1e <_usb_d_dev_ep_init+0xc6>
		return -USB_ERR_REDO;
  406c18:	f06f 0313 	mvn.w	r3, #19
  406c1c:	e057      	b.n	406cce <_usb_d_dev_ep_init+0x176>
	}

	switch (ep_type) {
  406c1e:	7bfb      	ldrb	r3, [r7, #15]
  406c20:	2b03      	cmp	r3, #3
  406c22:	d817      	bhi.n	406c54 <_usb_d_dev_ep_init+0xfc>
  406c24:	a201      	add	r2, pc, #4	; (adr r2, 406c2c <_usb_d_dev_ep_init+0xd4>)
  406c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406c2a:	bf00      	nop
  406c2c:	00406c3d 	.word	0x00406c3d
  406c30:	00406c43 	.word	0x00406c43
  406c34:	00406c49 	.word	0x00406c49
  406c38:	00406c4f 	.word	0x00406c4f
	case USB_EP_XTYPE_CTRL:
		bank = USB_D_BANK_CTRL;
  406c3c:	2300      	movs	r3, #0
  406c3e:	75fb      	strb	r3, [r7, #23]
		break;
  406c40:	e00e      	b.n	406c60 <_usb_d_dev_ep_init+0x108>

	case USB_EP_XTYPE_ISOCH:
		bank = USB_D_BANK_ISOCH;
  406c42:	2301      	movs	r3, #1
  406c44:	75fb      	strb	r3, [r7, #23]
		break;
  406c46:	e00b      	b.n	406c60 <_usb_d_dev_ep_init+0x108>

	case USB_EP_XTYPE_BULK:
		bank = USB_D_BANK_BULK;
  406c48:	2301      	movs	r3, #1
  406c4a:	75fb      	strb	r3, [r7, #23]
		break;
  406c4c:	e008      	b.n	406c60 <_usb_d_dev_ep_init+0x108>

	case USB_EP_XTYPE_INTERRUPT:
		bank = USB_D_BANK_INT;
  406c4e:	2300      	movs	r3, #0
  406c50:	75fb      	strb	r3, [r7, #23]
		break;
  406c52:	e005      	b.n	406c60 <_usb_d_dev_ep_init+0x108>
	default:
		ASSERT(false);
  406c54:	f240 42f1 	movw	r2, #1265	; 0x4f1
  406c58:	4920      	ldr	r1, [pc, #128]	; (406cdc <_usb_d_dev_ep_init+0x184>)
  406c5a:	2000      	movs	r0, #0
  406c5c:	4b20      	ldr	r3, [pc, #128]	; (406ce0 <_usb_d_dev_ep_init+0x188>)
  406c5e:	4798      	blx	r3
	}

	data = hri_usbhs_read_DEVEPTCFG_reg(USBHS, epn);
  406c60:	7dbb      	ldrb	r3, [r7, #22]
  406c62:	4619      	mov	r1, r3
  406c64:	481f      	ldr	r0, [pc, #124]	; (406ce4 <_usb_d_dev_ep_init+0x18c>)
  406c66:	4b20      	ldr	r3, [pc, #128]	; (406ce8 <_usb_d_dev_ep_init+0x190>)
  406c68:	4798      	blx	r3
  406c6a:	60b8      	str	r0, [r7, #8]
	data &= ~(USBHS_DEVEPTCFG_EPBK_Msk | USBHS_DEVEPTCFG_EPSIZE_Msk | USBHS_DEVEPTCFG_EPDIR
  406c6c:	68ba      	ldr	r2, [r7, #8]
  406c6e:	4b1f      	ldr	r3, [pc, #124]	; (406cec <_usb_d_dev_ep_init+0x194>)
  406c70:	4013      	ands	r3, r2
  406c72:	60bb      	str	r3, [r7, #8]
	          | USBHS_DEVEPTCFG_EPTYPE_Msk);
	data |= USBHS_DEVEPTCFG_EPBK(bank) | USBHS_DEVEPTCFG_EPSIZE(_usbd_ep_pcksize_size(max_pkt_siz))
  406c74:	7dfb      	ldrb	r3, [r7, #23]
  406c76:	009b      	lsls	r3, r3, #2
  406c78:	f003 040c 	and.w	r4, r3, #12
  406c7c:	88bb      	ldrh	r3, [r7, #4]
  406c7e:	4618      	mov	r0, r3
  406c80:	4b1b      	ldr	r3, [pc, #108]	; (406cf0 <_usb_d_dev_ep_init+0x198>)
  406c82:	4798      	blx	r3
  406c84:	4603      	mov	r3, r0
  406c86:	011b      	lsls	r3, r3, #4
  406c88:	f003 0370 	and.w	r3, r3, #112	; 0x70
  406c8c:	ea44 0203 	orr.w	r2, r4, r3
	        | (((uint32_t)(dir) << USBHS_DEVEPTCFG_EPDIR_Pos) & USBHS_DEVEPTCFG_EPDIR)
  406c90:	7d7b      	ldrb	r3, [r7, #21]
  406c92:	021b      	lsls	r3, r3, #8
  406c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  406c98:	431a      	orrs	r2, r3
	        | USBHS_DEVEPTCFG_EPTYPE(ep_type);
  406c9a:	7bfb      	ldrb	r3, [r7, #15]
  406c9c:	02db      	lsls	r3, r3, #11
  406c9e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
  406ca2:	4313      	orrs	r3, r2
	data |= USBHS_DEVEPTCFG_EPBK(bank) | USBHS_DEVEPTCFG_EPSIZE(_usbd_ep_pcksize_size(max_pkt_siz))
  406ca4:	68ba      	ldr	r2, [r7, #8]
  406ca6:	4313      	orrs	r3, r2
  406ca8:	60bb      	str	r3, [r7, #8]
	hri_usbhs_write_DEVEPTCFG_reg(USBHS, epn, data);
  406caa:	7dbb      	ldrb	r3, [r7, #22]
  406cac:	68ba      	ldr	r2, [r7, #8]
  406cae:	4619      	mov	r1, r3
  406cb0:	480c      	ldr	r0, [pc, #48]	; (406ce4 <_usb_d_dev_ep_init+0x18c>)
  406cb2:	4b10      	ldr	r3, [pc, #64]	; (406cf4 <_usb_d_dev_ep_init+0x19c>)
  406cb4:	4798      	blx	r3

	/* Initialize EP n settings */
	ept->size     = max_pkt_siz;
  406cb6:	693b      	ldr	r3, [r7, #16]
  406cb8:	88ba      	ldrh	r2, [r7, #4]
  406cba:	821a      	strh	r2, [r3, #16]
	ept->flags.u8 = (ep_type + 1);
  406cbc:	7bfb      	ldrb	r3, [r7, #15]
  406cbe:	3301      	adds	r3, #1
  406cc0:	b2da      	uxtb	r2, r3
  406cc2:	693b      	ldr	r3, [r7, #16]
  406cc4:	74da      	strb	r2, [r3, #19]
	ept->ep       = ep;
  406cc6:	693b      	ldr	r3, [r7, #16]
  406cc8:	79fa      	ldrb	r2, [r7, #7]
  406cca:	749a      	strb	r2, [r3, #18]

	return USB_OK;
  406ccc:	2300      	movs	r3, #0
}
  406cce:	4618      	mov	r0, r3
  406cd0:	371c      	adds	r7, #28
  406cd2:	46bd      	mov	sp, r7
  406cd4:	bd90      	pop	{r4, r7, pc}
  406cd6:	bf00      	nop
  406cd8:	20401674 	.word	0x20401674
  406cdc:	00409760 	.word	0x00409760
  406ce0:	004027fd 	.word	0x004027fd
  406ce4:	40038000 	.word	0x40038000
  406ce8:	004056b5 	.word	0x004056b5
  406cec:	ffffe683 	.word	0xffffe683
  406cf0:	00405d99 	.word	0x00405d99
  406cf4:	0040568f 	.word	0x0040568f

00406cf8 <_usb_d_dev_ep_deinit>:

void _usb_d_dev_ep_deinit(uint8_t ep)
{
  406cf8:	b580      	push	{r7, lr}
  406cfa:	b086      	sub	sp, #24
  406cfc:	af00      	add	r7, sp, #0
  406cfe:	4603      	mov	r3, r0
  406d00:	71fb      	strb	r3, [r7, #7]
	Usbhs *               hw  = USBHS;
  406d02:	4b1c      	ldr	r3, [pc, #112]	; (406d74 <_usb_d_dev_ep_deinit+0x7c>)
  406d04:	617b      	str	r3, [r7, #20]
	uint8_t               epn = USB_EP_GET_N(ep);
  406d06:	79fb      	ldrb	r3, [r7, #7]
  406d08:	f003 030f 	and.w	r3, r3, #15
  406d0c:	74fb      	strb	r3, [r7, #19]
	bool                  dir = USB_EP_GET_DIR(ep);
  406d0e:	79fb      	ldrb	r3, [r7, #7]
  406d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406d14:	2b00      	cmp	r3, #0
  406d16:	bf14      	ite	ne
  406d18:	2301      	movne	r3, #1
  406d1a:	2300      	moveq	r3, #0
  406d1c:	74bb      	strb	r3, [r7, #18]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  406d1e:	7cfa      	ldrb	r2, [r7, #19]
  406d20:	4613      	mov	r3, r2
  406d22:	009b      	lsls	r3, r3, #2
  406d24:	4413      	add	r3, r2
  406d26:	009b      	lsls	r3, r3, #2
  406d28:	3310      	adds	r3, #16
  406d2a:	4a13      	ldr	r2, [pc, #76]	; (406d78 <_usb_d_dev_ep_deinit+0x80>)
  406d2c:	4413      	add	r3, r2
  406d2e:	3304      	adds	r3, #4
  406d30:	60fb      	str	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  406d32:	7cfb      	ldrb	r3, [r7, #19]
  406d34:	2b03      	cmp	r3, #3
  406d36:	d818      	bhi.n	406d6a <_usb_d_dev_ep_deinit+0x72>
  406d38:	68fb      	ldr	r3, [r7, #12]
  406d3a:	7c9b      	ldrb	r3, [r3, #18]
  406d3c:	2bff      	cmp	r3, #255	; 0xff
  406d3e:	d014      	beq.n	406d6a <_usb_d_dev_ep_deinit+0x72>
		return;
	}

	/* Finish pending transactions. */
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
  406d40:	7cbb      	ldrb	r3, [r7, #18]
  406d42:	2203      	movs	r2, #3
  406d44:	4619      	mov	r1, r3
  406d46:	68f8      	ldr	r0, [r7, #12]
  406d48:	4b0c      	ldr	r3, [pc, #48]	; (406d7c <_usb_d_dev_ep_deinit+0x84>)
  406d4a:	4798      	blx	r3

	/* Disable the endpoint. */
	hri_usbhs_clear_DEVEPT_reg(hw, USBHS_DEVEPT_EPEN0 << epn);
  406d4c:	7cfb      	ldrb	r3, [r7, #19]
  406d4e:	2201      	movs	r2, #1
  406d50:	fa02 f303 	lsl.w	r3, r2, r3
  406d54:	4619      	mov	r1, r3
  406d56:	6978      	ldr	r0, [r7, #20]
  406d58:	4b09      	ldr	r3, [pc, #36]	; (406d80 <_usb_d_dev_ep_deinit+0x88>)
  406d5a:	4798      	blx	r3
	ept->flags.u8 = 0;
  406d5c:	68fb      	ldr	r3, [r7, #12]
  406d5e:	2200      	movs	r2, #0
  406d60:	74da      	strb	r2, [r3, #19]
	ept->ep       = 0xFF;
  406d62:	68fb      	ldr	r3, [r7, #12]
  406d64:	22ff      	movs	r2, #255	; 0xff
  406d66:	749a      	strb	r2, [r3, #18]
  406d68:	e000      	b.n	406d6c <_usb_d_dev_ep_deinit+0x74>
		return;
  406d6a:	bf00      	nop
}
  406d6c:	3718      	adds	r7, #24
  406d6e:	46bd      	mov	sp, r7
  406d70:	bd80      	pop	{r7, pc}
  406d72:	bf00      	nop
  406d74:	40038000 	.word	0x40038000
  406d78:	20401674 	.word	0x20401674
  406d7c:	00407189 	.word	0x00407189
  406d80:	00405563 	.word	0x00405563

00406d84 <_usb_d_dev_ep_enable>:

int32_t _usb_d_dev_ep_enable(const uint8_t ep)
{
  406d84:	b580      	push	{r7, lr}
  406d86:	b088      	sub	sp, #32
  406d88:	af00      	add	r7, sp, #0
  406d8a:	4603      	mov	r3, r0
  406d8c:	71fb      	strb	r3, [r7, #7]
	Usbhs *               hw           = USBHS;
  406d8e:	4b74      	ldr	r3, [pc, #464]	; (406f60 <_usb_d_dev_ep_enable+0x1dc>)
  406d90:	61bb      	str	r3, [r7, #24]
	uint8_t               epn          = USB_EP_GET_N(ep);
  406d92:	79fb      	ldrb	r3, [r7, #7]
  406d94:	f003 030f 	and.w	r3, r3, #15
  406d98:	75fb      	strb	r3, [r7, #23]
	bool                  dir          = USB_EP_GET_DIR(ep);
  406d9a:	79fb      	ldrb	r3, [r7, #7]
  406d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406da0:	2b00      	cmp	r3, #0
  406da2:	bf14      	ite	ne
  406da4:	2301      	movne	r3, #1
  406da6:	2300      	moveq	r3, #0
  406da8:	75bb      	strb	r3, [r7, #22]
	struct _usb_d_dev_ep *ept          = &dev_inst.ep[epn];
  406daa:	7dfa      	ldrb	r2, [r7, #23]
  406dac:	4613      	mov	r3, r2
  406dae:	009b      	lsls	r3, r3, #2
  406db0:	4413      	add	r3, r2
  406db2:	009b      	lsls	r3, r3, #2
  406db4:	3310      	adds	r3, #16
  406db6:	4a6b      	ldr	r2, [pc, #428]	; (406f64 <_usb_d_dev_ep_enable+0x1e0>)
  406db8:	4413      	add	r3, r2
  406dba:	3304      	adds	r3, #4
  406dbc:	613b      	str	r3, [r7, #16]
	uint16_t              ep_allocated = 1 << epn;
  406dbe:	7dfb      	ldrb	r3, [r7, #23]
  406dc0:	2201      	movs	r2, #1
  406dc2:	fa02 f303 	lsl.w	r3, r2, r3
  406dc6:	83fb      	strh	r3, [r7, #30]
	uint8_t               i;

	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
  406dc8:	7dfb      	ldrb	r3, [r7, #23]
  406dca:	2b03      	cmp	r3, #3
  406dcc:	d803      	bhi.n	406dd6 <_usb_d_dev_ep_enable+0x52>
  406dce:	693b      	ldr	r3, [r7, #16]
  406dd0:	7c9b      	ldrb	r3, [r3, #18]
  406dd2:	2bff      	cmp	r3, #255	; 0xff
  406dd4:	d102      	bne.n	406ddc <_usb_d_dev_ep_enable+0x58>
		return -USB_ERR_PARAM;
  406dd6:	f06f 0311 	mvn.w	r3, #17
  406dda:	e0bc      	b.n	406f56 <_usb_d_dev_ep_enable+0x1d2>
	}

	if (epn == 0) {
  406ddc:	7dfb      	ldrb	r3, [r7, #23]
  406dde:	2b00      	cmp	r3, #0
  406de0:	d114      	bne.n	406e0c <_usb_d_dev_ep_enable+0x88>
		_usbd_ep_set_alloc(0, true);
  406de2:	2101      	movs	r1, #1
  406de4:	2000      	movs	r0, #0
  406de6:	4b60      	ldr	r3, [pc, #384]	; (406f68 <_usb_d_dev_ep_enable+0x1e4>)
  406de8:	4798      	blx	r3
		_usbd_ep_enable(0, true);
  406dea:	2101      	movs	r1, #1
  406dec:	2000      	movs	r0, #0
  406dee:	4b5f      	ldr	r3, [pc, #380]	; (406f6c <_usb_d_dev_ep_enable+0x1e8>)
  406df0:	4798      	blx	r3

		if (!_usbd_ep_is_cfg(0)) {
  406df2:	2000      	movs	r0, #0
  406df4:	4b5e      	ldr	r3, [pc, #376]	; (406f70 <_usb_d_dev_ep_enable+0x1ec>)
  406df6:	4798      	blx	r3
  406df8:	4603      	mov	r3, r0
  406dfa:	f083 0301 	eor.w	r3, r3, #1
  406dfe:	b2db      	uxtb	r3, r3
  406e00:	2b00      	cmp	r3, #0
  406e02:	f000 8084 	beq.w	406f0e <_usb_d_dev_ep_enable+0x18a>
			return -USB_ERR_ALLOC_FAIL;
  406e06:	f06f 0314 	mvn.w	r3, #20
  406e0a:	e0a4      	b.n	406f56 <_usb_d_dev_ep_enable+0x1d2>
		}
	} else {
		/* Un-alloc endpoints superior. */
		for (i = CONF_USB_D_MAX_EP_N; i > epn; i--) {
  406e0c:	2303      	movs	r3, #3
  406e0e:	777b      	strb	r3, [r7, #29]
  406e10:	e01d      	b.n	406e4e <_usb_d_dev_ep_enable+0xca>
			if (_usbd_ep_is_enabled(i)) {
  406e12:	7f7b      	ldrb	r3, [r7, #29]
  406e14:	4618      	mov	r0, r3
  406e16:	4b57      	ldr	r3, [pc, #348]	; (406f74 <_usb_d_dev_ep_enable+0x1f0>)
  406e18:	4798      	blx	r3
  406e1a:	4603      	mov	r3, r0
  406e1c:	2b00      	cmp	r3, #0
  406e1e:	d013      	beq.n	406e48 <_usb_d_dev_ep_enable+0xc4>
				ep_allocated |= 1 << i;
  406e20:	7f7b      	ldrb	r3, [r7, #29]
  406e22:	2201      	movs	r2, #1
  406e24:	fa02 f303 	lsl.w	r3, r2, r3
  406e28:	b21a      	sxth	r2, r3
  406e2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  406e2e:	4313      	orrs	r3, r2
  406e30:	b21b      	sxth	r3, r3
  406e32:	83fb      	strh	r3, [r7, #30]
				_usbd_ep_enable(i, false);
  406e34:	7f7b      	ldrb	r3, [r7, #29]
  406e36:	2100      	movs	r1, #0
  406e38:	4618      	mov	r0, r3
  406e3a:	4b4c      	ldr	r3, [pc, #304]	; (406f6c <_usb_d_dev_ep_enable+0x1e8>)
  406e3c:	4798      	blx	r3
				_usbd_ep_set_alloc(i, false);
  406e3e:	7f7b      	ldrb	r3, [r7, #29]
  406e40:	2100      	movs	r1, #0
  406e42:	4618      	mov	r0, r3
  406e44:	4b48      	ldr	r3, [pc, #288]	; (406f68 <_usb_d_dev_ep_enable+0x1e4>)
  406e46:	4798      	blx	r3
		for (i = CONF_USB_D_MAX_EP_N; i > epn; i--) {
  406e48:	7f7b      	ldrb	r3, [r7, #29]
  406e4a:	3b01      	subs	r3, #1
  406e4c:	777b      	strb	r3, [r7, #29]
  406e4e:	7f7a      	ldrb	r2, [r7, #29]
  406e50:	7dfb      	ldrb	r3, [r7, #23]
  406e52:	429a      	cmp	r2, r3
  406e54:	d8dd      	bhi.n	406e12 <_usb_d_dev_ep_enable+0x8e>
			}
		}
		/* Re-alloc/Enable endpoints */
		for (i = epn; i <= CONF_USB_D_MAX_EP_N; i++) {
  406e56:	7dfb      	ldrb	r3, [r7, #23]
  406e58:	777b      	strb	r3, [r7, #29]
  406e5a:	e055      	b.n	406f08 <_usb_d_dev_ep_enable+0x184>
			if (ep_allocated & (1 << i)) {
  406e5c:	8bfa      	ldrh	r2, [r7, #30]
  406e5e:	7f7b      	ldrb	r3, [r7, #29]
  406e60:	fa42 f303 	asr.w	r3, r2, r3
  406e64:	f003 0301 	and.w	r3, r3, #1
  406e68:	2b00      	cmp	r3, #0
  406e6a:	d04a      	beq.n	406f02 <_usb_d_dev_ep_enable+0x17e>
				struct _usb_d_dev_ep *ptr_ep    = &dev_inst.ep[i];
  406e6c:	7f7a      	ldrb	r2, [r7, #29]
  406e6e:	4613      	mov	r3, r2
  406e70:	009b      	lsls	r3, r3, #2
  406e72:	4413      	add	r3, r2
  406e74:	009b      	lsls	r3, r3, #2
  406e76:	3310      	adds	r3, #16
  406e78:	4a3a      	ldr	r2, [pc, #232]	; (406f64 <_usb_d_dev_ep_enable+0x1e0>)
  406e7a:	4413      	add	r3, r2
  406e7c:	3304      	adds	r3, #4
  406e7e:	60fb      	str	r3, [r7, #12]
				bool                  b_restart = ptr_ep->flags.bits.is_busy;
  406e80:	68fb      	ldr	r3, [r7, #12]
  406e82:	7cdb      	ldrb	r3, [r3, #19]
  406e84:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406e88:	b2db      	uxtb	r3, r3
  406e8a:	2b00      	cmp	r3, #0
  406e8c:	bf14      	ite	ne
  406e8e:	2301      	movne	r3, #1
  406e90:	2300      	moveq	r3, #0
  406e92:	72fb      	strb	r3, [r7, #11]
				ptr_ep->flags.bits.is_busy      = false;
  406e94:	68fa      	ldr	r2, [r7, #12]
  406e96:	7cd3      	ldrb	r3, [r2, #19]
  406e98:	f36f 1386 	bfc	r3, #6, #1
  406e9c:	74d3      	strb	r3, [r2, #19]
				_usbd_ep_set_alloc(i, true);
  406e9e:	7f7b      	ldrb	r3, [r7, #29]
  406ea0:	2101      	movs	r1, #1
  406ea2:	4618      	mov	r0, r3
  406ea4:	4b30      	ldr	r3, [pc, #192]	; (406f68 <_usb_d_dev_ep_enable+0x1e4>)
  406ea6:	4798      	blx	r3
				_usbd_ep_enable(i, true);
  406ea8:	7f7b      	ldrb	r3, [r7, #29]
  406eaa:	2101      	movs	r1, #1
  406eac:	4618      	mov	r0, r3
  406eae:	4b2f      	ldr	r3, [pc, #188]	; (406f6c <_usb_d_dev_ep_enable+0x1e8>)
  406eb0:	4798      	blx	r3

				if (!_usbd_ep_is_cfg(i)) {
  406eb2:	7f7b      	ldrb	r3, [r7, #29]
  406eb4:	4618      	mov	r0, r3
  406eb6:	4b2e      	ldr	r3, [pc, #184]	; (406f70 <_usb_d_dev_ep_enable+0x1ec>)
  406eb8:	4798      	blx	r3
  406eba:	4603      	mov	r3, r0
  406ebc:	f083 0301 	eor.w	r3, r3, #1
  406ec0:	b2db      	uxtb	r3, r3
  406ec2:	2b00      	cmp	r3, #0
  406ec4:	d002      	beq.n	406ecc <_usb_d_dev_ep_enable+0x148>
					return -USB_ERR_ALLOC_FAIL;
  406ec6:	f06f 0314 	mvn.w	r3, #20
  406eca:	e044      	b.n	406f56 <_usb_d_dev_ep_enable+0x1d2>
				}

				hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(hw, i);
  406ecc:	7f7b      	ldrb	r3, [r7, #29]
  406ece:	4619      	mov	r1, r3
  406ed0:	69b8      	ldr	r0, [r7, #24]
  406ed2:	4b29      	ldr	r3, [pc, #164]	; (406f78 <_usb_d_dev_ep_enable+0x1f4>)
  406ed4:	4798      	blx	r3

				if (b_restart && (!_usb_d_dev_ep_is_dma(i) && !dir)) {
  406ed6:	7afb      	ldrb	r3, [r7, #11]
  406ed8:	2b00      	cmp	r3, #0
  406eda:	d012      	beq.n	406f02 <_usb_d_dev_ep_enable+0x17e>
  406edc:	7f7b      	ldrb	r3, [r7, #29]
  406ede:	2b00      	cmp	r3, #0
  406ee0:	d002      	beq.n	406ee8 <_usb_d_dev_ep_enable+0x164>
  406ee2:	7f7b      	ldrb	r3, [r7, #29]
  406ee4:	2b06      	cmp	r3, #6
  406ee6:	d90c      	bls.n	406f02 <_usb_d_dev_ep_enable+0x17e>
  406ee8:	7dbb      	ldrb	r3, [r7, #22]
  406eea:	f083 0301 	eor.w	r3, r3, #1
  406eee:	b2db      	uxtb	r3, r3
  406ef0:	2b00      	cmp	r3, #0
  406ef2:	d006      	beq.n	406f02 <_usb_d_dev_ep_enable+0x17e>
					ptr_ep->trans_count -= ptr_ep->trans_load;
  406ef4:	68fb      	ldr	r3, [r7, #12]
  406ef6:	689a      	ldr	r2, [r3, #8]
  406ef8:	68fb      	ldr	r3, [r7, #12]
  406efa:	68db      	ldr	r3, [r3, #12]
  406efc:	1ad2      	subs	r2, r2, r3
  406efe:	68fb      	ldr	r3, [r7, #12]
  406f00:	609a      	str	r2, [r3, #8]
		for (i = epn; i <= CONF_USB_D_MAX_EP_N; i++) {
  406f02:	7f7b      	ldrb	r3, [r7, #29]
  406f04:	3301      	adds	r3, #1
  406f06:	777b      	strb	r3, [r7, #29]
  406f08:	7f7b      	ldrb	r3, [r7, #29]
  406f0a:	2b03      	cmp	r3, #3
  406f0c:	d9a6      	bls.n	406e5c <_usb_d_dev_ep_enable+0xd8>
				}
			}
		}
	}

	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
  406f0e:	693b      	ldr	r3, [r7, #16]
  406f10:	7cdb      	ldrb	r3, [r3, #19]
  406f12:	f003 0307 	and.w	r3, r3, #7
  406f16:	b2db      	uxtb	r3, r3
  406f18:	2b01      	cmp	r3, #1
  406f1a:	d10d      	bne.n	406f38 <_usb_d_dev_ep_enable+0x1b4>
		/* By default, control endpoint accept SETUP and NAK all other token. */
		_usbd_ep_set_out_rdy(epn, false);
  406f1c:	7dfb      	ldrb	r3, [r7, #23]
  406f1e:	2100      	movs	r1, #0
  406f20:	4618      	mov	r0, r3
  406f22:	4b16      	ldr	r3, [pc, #88]	; (406f7c <_usb_d_dev_ep_enable+0x1f8>)
  406f24:	4798      	blx	r3
		_usbd_ep_set_in_rdy(epn, false);
  406f26:	7dfb      	ldrb	r3, [r7, #23]
  406f28:	2100      	movs	r1, #0
  406f2a:	4618      	mov	r0, r3
  406f2c:	4b14      	ldr	r3, [pc, #80]	; (406f80 <_usb_d_dev_ep_enable+0x1fc>)
  406f2e:	4798      	blx	r3

		/* Enable SETUP reception for control endpoint. */
		_usb_d_dev_trans_setup(ept);
  406f30:	6938      	ldr	r0, [r7, #16]
  406f32:	4b14      	ldr	r3, [pc, #80]	; (406f84 <_usb_d_dev_ep_enable+0x200>)
  406f34:	4798      	blx	r3
  406f36:	e00d      	b.n	406f54 <_usb_d_dev_ep_enable+0x1d0>
	} else if (dir) {
  406f38:	7dbb      	ldrb	r3, [r7, #22]
  406f3a:	2b00      	cmp	r3, #0
  406f3c:	d005      	beq.n	406f4a <_usb_d_dev_ep_enable+0x1c6>
		/* By default, IN endpoint will NAK all token. */
		_usbd_ep_set_in_rdy(epn, false);
  406f3e:	7dfb      	ldrb	r3, [r7, #23]
  406f40:	2100      	movs	r1, #0
  406f42:	4618      	mov	r0, r3
  406f44:	4b0e      	ldr	r3, [pc, #56]	; (406f80 <_usb_d_dev_ep_enable+0x1fc>)
  406f46:	4798      	blx	r3
  406f48:	e004      	b.n	406f54 <_usb_d_dev_ep_enable+0x1d0>
	} else {
		/* By default, OUT endpoint will NAK all token. */
		_usbd_ep_set_out_rdy(epn, false);
  406f4a:	7dfb      	ldrb	r3, [r7, #23]
  406f4c:	2100      	movs	r1, #0
  406f4e:	4618      	mov	r0, r3
  406f50:	4b0a      	ldr	r3, [pc, #40]	; (406f7c <_usb_d_dev_ep_enable+0x1f8>)
  406f52:	4798      	blx	r3
	}

	return USB_OK;
  406f54:	2300      	movs	r3, #0
}
  406f56:	4618      	mov	r0, r3
  406f58:	3720      	adds	r7, #32
  406f5a:	46bd      	mov	sp, r7
  406f5c:	bd80      	pop	{r7, pc}
  406f5e:	bf00      	nop
  406f60:	40038000 	.word	0x40038000
  406f64:	20401674 	.word	0x20401674
  406f68:	00405c4d 	.word	0x00405c4d
  406f6c:	00405915 	.word	0x00405915
  406f70:	00405a71 	.word	0x00405a71
  406f74:	00405a31 	.word	0x00405a31
  406f78:	0040562f 	.word	0x0040562f
  406f7c:	00405d51 	.word	0x00405d51
  406f80:	00405d09 	.word	0x00405d09
  406f84:	00406ae1 	.word	0x00406ae1

00406f88 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept)
{
  406f88:	b480      	push	{r7}
  406f8a:	b083      	sub	sp, #12
  406f8c:	af00      	add	r7, sp, #0
  406f8e:	6078      	str	r0, [r7, #4]
	return ept->flags.bits.is_stalled;
  406f90:	687b      	ldr	r3, [r7, #4]
  406f92:	7cdb      	ldrb	r3, [r3, #19]
  406f94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406f98:	b2db      	uxtb	r3, r3
}
  406f9a:	4618      	mov	r0, r3
  406f9c:	370c      	adds	r7, #12
  406f9e:	46bd      	mov	sp, r7
  406fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  406fa4:	4770      	bx	lr
	...

00406fa8 <_usb_d_dev_ep_stall_set>:
 * \brief Set endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept)
{
  406fa8:	b580      	push	{r7, lr}
  406faa:	b084      	sub	sp, #16
  406fac:	af00      	add	r7, sp, #0
  406fae:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406fb0:	687b      	ldr	r3, [r7, #4]
  406fb2:	7c9b      	ldrb	r3, [r3, #18]
  406fb4:	f003 030f 	and.w	r3, r3, #15
  406fb8:	73fb      	strb	r3, [r7, #15]
	if (epn > CONF_USB_D_MAX_EP_N) {
  406fba:	7bfb      	ldrb	r3, [r7, #15]
  406fbc:	2b03      	cmp	r3, #3
  406fbe:	d902      	bls.n	406fc6 <_usb_d_dev_ep_stall_set+0x1e>
		return ERR_NOT_FOUND;
  406fc0:	f06f 0309 	mvn.w	r3, #9
  406fc4:	e016      	b.n	406ff4 <_usb_d_dev_ep_stall_set+0x4c>
	}
	if (!ept->flags.bits.is_stalled) {
  406fc6:	687b      	ldr	r3, [r7, #4]
  406fc8:	7cdb      	ldrb	r3, [r3, #19]
  406fca:	f003 0308 	and.w	r3, r3, #8
  406fce:	b2db      	uxtb	r3, r3
  406fd0:	2b00      	cmp	r3, #0
  406fd2:	d10e      	bne.n	406ff2 <_usb_d_dev_ep_stall_set+0x4a>
		ept->flags.bits.is_stalled = 1;
  406fd4:	687a      	ldr	r2, [r7, #4]
  406fd6:	7cd3      	ldrb	r3, [r2, #19]
  406fd8:	f043 0308 	orr.w	r3, r3, #8
  406fdc:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  406fde:	7bfb      	ldrb	r3, [r7, #15]
  406fe0:	2140      	movs	r1, #64	; 0x40
  406fe2:	4618      	mov	r0, r3
  406fe4:	4b05      	ldr	r3, [pc, #20]	; (406ffc <_usb_d_dev_ep_stall_set+0x54>)
  406fe6:	4798      	blx	r3
		_usbd_ep_set_stall(epn, true);
  406fe8:	7bfb      	ldrb	r3, [r7, #15]
  406fea:	2101      	movs	r1, #1
  406fec:	4618      	mov	r0, r3
  406fee:	4b04      	ldr	r3, [pc, #16]	; (407000 <_usb_d_dev_ep_stall_set+0x58>)
  406ff0:	4798      	blx	r3
	}

	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
  406ff2:	2300      	movs	r3, #0
}
  406ff4:	4618      	mov	r0, r3
  406ff6:	3710      	adds	r7, #16
  406ff8:	46bd      	mov	sp, r7
  406ffa:	bd80      	pop	{r7, pc}
  406ffc:	00405999 	.word	0x00405999
  407000:	00405a99 	.word	0x00405a99

00407004 <_usb_d_dev_ep_stall_clr>:
 * \brief Clear endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept)
{
  407004:	b580      	push	{r7, lr}
  407006:	b084      	sub	sp, #16
  407008:	af00      	add	r7, sp, #0
  40700a:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40700c:	687b      	ldr	r3, [r7, #4]
  40700e:	7c9b      	ldrb	r3, [r3, #18]
  407010:	f003 030f 	and.w	r3, r3, #15
  407014:	73fb      	strb	r3, [r7, #15]

	if (!ept->flags.bits.is_stalled) {
  407016:	687b      	ldr	r3, [r7, #4]
  407018:	7cdb      	ldrb	r3, [r3, #19]
  40701a:	f003 0308 	and.w	r3, r3, #8
  40701e:	b2db      	uxtb	r3, r3
  407020:	2b00      	cmp	r3, #0
  407022:	d101      	bne.n	407028 <_usb_d_dev_ep_stall_clr+0x24>
		return ERR_NONE;
  407024:	2300      	movs	r3, #0
  407026:	e039      	b.n	40709c <_usb_d_dev_ep_stall_clr+0x98>
	}
	_usbd_ep_set_stall(epn, false);
  407028:	7bfb      	ldrb	r3, [r7, #15]
  40702a:	2100      	movs	r1, #0
  40702c:	4618      	mov	r0, r3
  40702e:	4b1d      	ldr	r3, [pc, #116]	; (4070a4 <_usb_d_dev_ep_stall_clr+0xa0>)
  407030:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  407032:	7bfb      	ldrb	r3, [r7, #15]
  407034:	2140      	movs	r1, #64	; 0x40
  407036:	4618      	mov	r0, r3
  407038:	4b1b      	ldr	r3, [pc, #108]	; (4070a8 <_usb_d_dev_ep_stall_clr+0xa4>)
  40703a:	4798      	blx	r3

	if (_usbd_ep_is_stall_sent(epn)) {
  40703c:	7bfb      	ldrb	r3, [r7, #15]
  40703e:	4618      	mov	r0, r3
  407040:	4b1a      	ldr	r3, [pc, #104]	; (4070ac <_usb_d_dev_ep_stall_clr+0xa8>)
  407042:	4798      	blx	r3
  407044:	4603      	mov	r3, r0
  407046:	2b00      	cmp	r3, #0
  407048:	d00b      	beq.n	407062 <_usb_d_dev_ep_stall_clr+0x5e>
		_usbd_ep_ack_stall(epn);
  40704a:	7bfb      	ldrb	r3, [r7, #15]
  40704c:	4618      	mov	r0, r3
  40704e:	4b18      	ldr	r3, [pc, #96]	; (4070b0 <_usb_d_dev_ep_stall_clr+0xac>)
  407050:	4798      	blx	r3
		_usbd_ep_reset(epn);
  407052:	7bfb      	ldrb	r3, [r7, #15]
  407054:	4618      	mov	r0, r3
  407056:	4b17      	ldr	r3, [pc, #92]	; (4070b4 <_usb_d_dev_ep_stall_clr+0xb0>)
  407058:	4798      	blx	r3
		_usbd_ep_reset_toggle(epn);
  40705a:	7bfb      	ldrb	r3, [r7, #15]
  40705c:	4618      	mov	r0, r3
  40705e:	4b16      	ldr	r3, [pc, #88]	; (4070b8 <_usb_d_dev_ep_stall_clr+0xb4>)
  407060:	4798      	blx	r3
	}

	if (_usb_d_dev_ep_is_ctrl(ept)) {
  407062:	687b      	ldr	r3, [r7, #4]
  407064:	7cdb      	ldrb	r3, [r3, #19]
  407066:	f003 0307 	and.w	r3, r3, #7
  40706a:	b2db      	uxtb	r3, r3
  40706c:	2b01      	cmp	r3, #1
  40706e:	d10f      	bne.n	407090 <_usb_d_dev_ep_stall_clr+0x8c>
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  407070:	7bfb      	ldrb	r3, [r7, #15]
  407072:	4619      	mov	r1, r3
  407074:	4811      	ldr	r0, [pc, #68]	; (4070bc <_usb_d_dev_ep_stall_clr+0xb8>)
  407076:	4b12      	ldr	r3, [pc, #72]	; (4070c0 <_usb_d_dev_ep_stall_clr+0xbc>)
  407078:	4798      	blx	r3
  40707a:	4603      	mov	r3, r0
  40707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407080:	2b00      	cmp	r3, #0
  407082:	d10a      	bne.n	40709a <_usb_d_dev_ep_stall_clr+0x96>
			ept->flags.bits.is_stalled = 0;
  407084:	687a      	ldr	r2, [r7, #4]
  407086:	7cd3      	ldrb	r3, [r2, #19]
  407088:	f36f 03c3 	bfc	r3, #3, #1
  40708c:	74d3      	strb	r3, [r2, #19]
  40708e:	e004      	b.n	40709a <_usb_d_dev_ep_stall_clr+0x96>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
  407090:	687a      	ldr	r2, [r7, #4]
  407092:	7cd3      	ldrb	r3, [r2, #19]
  407094:	f36f 03c3 	bfc	r3, #3, #1
  407098:	74d3      	strb	r3, [r2, #19]
	}

	return ERR_NONE;
  40709a:	2300      	movs	r3, #0
}
  40709c:	4618      	mov	r0, r3
  40709e:	3710      	adds	r7, #16
  4070a0:	46bd      	mov	sp, r7
  4070a2:	bd80      	pop	{r7, pc}
  4070a4:	00405a99 	.word	0x00405a99
  4070a8:	004059d9 	.word	0x004059d9
  4070ac:	00405ae5 	.word	0x00405ae5
  4070b0:	00405b0d 	.word	0x00405b0d
  4070b4:	00405bd9 	.word	0x00405bd9
  4070b8:	00405c21 	.word	0x00405c21
  4070bc:	40038000 	.word	0x40038000
  4070c0:	0040535d 	.word	0x0040535d

004070c4 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
  4070c4:	b580      	push	{r7, lr}
  4070c6:	b086      	sub	sp, #24
  4070c8:	af00      	add	r7, sp, #0
  4070ca:	4603      	mov	r3, r0
  4070cc:	460a      	mov	r2, r1
  4070ce:	71fb      	strb	r3, [r7, #7]
  4070d0:	4613      	mov	r3, r2
  4070d2:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
  4070d4:	79fb      	ldrb	r3, [r7, #7]
  4070d6:	f003 030f 	and.w	r3, r3, #15
  4070da:	74fb      	strb	r3, [r7, #19]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  4070dc:	7cfa      	ldrb	r2, [r7, #19]
  4070de:	4613      	mov	r3, r2
  4070e0:	009b      	lsls	r3, r3, #2
  4070e2:	4413      	add	r3, r2
  4070e4:	009b      	lsls	r3, r3, #2
  4070e6:	3310      	adds	r3, #16
  4070e8:	4a11      	ldr	r2, [pc, #68]	; (407130 <_usb_d_dev_ep_stall+0x6c>)
  4070ea:	4413      	add	r3, r2
  4070ec:	3304      	adds	r3, #4
  4070ee:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
  4070f0:	7cfb      	ldrb	r3, [r7, #19]
  4070f2:	2b03      	cmp	r3, #3
  4070f4:	d902      	bls.n	4070fc <_usb_d_dev_ep_stall+0x38>
		return -USB_ERR_PARAM;
  4070f6:	f06f 0311 	mvn.w	r3, #17
  4070fa:	e014      	b.n	407126 <_usb_d_dev_ep_stall+0x62>
	}

	if (USB_EP_STALL_SET == ctrl) {
  4070fc:	79bb      	ldrb	r3, [r7, #6]
  4070fe:	2b01      	cmp	r3, #1
  407100:	d104      	bne.n	40710c <_usb_d_dev_ep_stall+0x48>
		rc = _usb_d_dev_ep_stall_set(ept);
  407102:	68f8      	ldr	r0, [r7, #12]
  407104:	4b0b      	ldr	r3, [pc, #44]	; (407134 <_usb_d_dev_ep_stall+0x70>)
  407106:	4798      	blx	r3
  407108:	6178      	str	r0, [r7, #20]
  40710a:	e00b      	b.n	407124 <_usb_d_dev_ep_stall+0x60>
	} else if (USB_EP_STALL_CLR == ctrl) {
  40710c:	79bb      	ldrb	r3, [r7, #6]
  40710e:	2b00      	cmp	r3, #0
  407110:	d104      	bne.n	40711c <_usb_d_dev_ep_stall+0x58>
		rc = _usb_d_dev_ep_stall_clr(ept);
  407112:	68f8      	ldr	r0, [r7, #12]
  407114:	4b08      	ldr	r3, [pc, #32]	; (407138 <_usb_d_dev_ep_stall+0x74>)
  407116:	4798      	blx	r3
  407118:	6178      	str	r0, [r7, #20]
  40711a:	e003      	b.n	407124 <_usb_d_dev_ep_stall+0x60>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept);
  40711c:	68f8      	ldr	r0, [r7, #12]
  40711e:	4b07      	ldr	r3, [pc, #28]	; (40713c <_usb_d_dev_ep_stall+0x78>)
  407120:	4798      	blx	r3
  407122:	6178      	str	r0, [r7, #20]
	}

	return rc;
  407124:	697b      	ldr	r3, [r7, #20]
}
  407126:	4618      	mov	r0, r3
  407128:	3718      	adds	r7, #24
  40712a:	46bd      	mov	sp, r7
  40712c:	bd80      	pop	{r7, pc}
  40712e:	bf00      	nop
  407130:	20401674 	.word	0x20401674
  407134:	00406fa9 	.word	0x00406fa9
  407138:	00407005 	.word	0x00407005
  40713c:	00406f89 	.word	0x00406f89

00407140 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  407140:	b580      	push	{r7, lr}
  407142:	b082      	sub	sp, #8
  407144:	af00      	add	r7, sp, #0
  407146:	6078      	str	r0, [r7, #4]
  407148:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  40714a:	687b      	ldr	r3, [r7, #4]
  40714c:	7c9b      	ldrb	r3, [r3, #18]
  40714e:	2bff      	cmp	r3, #255	; 0xff
  407150:	d014      	beq.n	40717c <_usb_d_dev_trans_done+0x3c>
  407152:	687b      	ldr	r3, [r7, #4]
  407154:	7cdb      	ldrb	r3, [r3, #19]
  407156:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40715a:	b2db      	uxtb	r3, r3
  40715c:	2b00      	cmp	r3, #0
  40715e:	d00d      	beq.n	40717c <_usb_d_dev_trans_done+0x3c>
		return;
	}

	ept->flags.bits.is_busy = 0;
  407160:	687a      	ldr	r2, [r7, #4]
  407162:	7cd3      	ldrb	r3, [r2, #19]
  407164:	f36f 1386 	bfc	r3, #6, #1
  407168:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  40716a:	4b06      	ldr	r3, [pc, #24]	; (407184 <_usb_d_dev_trans_done+0x44>)
  40716c:	691b      	ldr	r3, [r3, #16]
  40716e:	687a      	ldr	r2, [r7, #4]
  407170:	7c90      	ldrb	r0, [r2, #18]
  407172:	687a      	ldr	r2, [r7, #4]
  407174:	6892      	ldr	r2, [r2, #8]
  407176:	6839      	ldr	r1, [r7, #0]
  407178:	4798      	blx	r3
  40717a:	e000      	b.n	40717e <_usb_d_dev_trans_done+0x3e>
		return;
  40717c:	bf00      	nop
}
  40717e:	3708      	adds	r7, #8
  407180:	46bd      	mov	sp, r7
  407182:	bd80      	pop	{r7, pc}
  407184:	20401674 	.word	0x20401674

00407188 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
  407188:	b580      	push	{r7, lr}
  40718a:	b086      	sub	sp, #24
  40718c:	af00      	add	r7, sp, #0
  40718e:	60f8      	str	r0, [r7, #12]
  407190:	460b      	mov	r3, r1
  407192:	607a      	str	r2, [r7, #4]
  407194:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  407196:	68fb      	ldr	r3, [r7, #12]
  407198:	7c9b      	ldrb	r3, [r3, #18]
  40719a:	f003 030f 	and.w	r3, r3, #15
  40719e:	75fb      	strb	r3, [r7, #23]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  4071a0:	68fb      	ldr	r3, [r7, #12]
  4071a2:	7c9b      	ldrb	r3, [r3, #18]
  4071a4:	2bff      	cmp	r3, #255	; 0xff
  4071a6:	d019      	beq.n	4071dc <_usb_d_dev_trans_stop+0x54>
  4071a8:	68fb      	ldr	r3, [r7, #12]
  4071aa:	7cdb      	ldrb	r3, [r3, #19]
  4071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4071b0:	b2db      	uxtb	r3, r3
  4071b2:	2b00      	cmp	r3, #0
  4071b4:	d012      	beq.n	4071dc <_usb_d_dev_trans_stop+0x54>
		return;
	}

	/* Stop transfer */
	if (dir) {
  4071b6:	7afb      	ldrb	r3, [r7, #11]
  4071b8:	2b00      	cmp	r3, #0
  4071ba:	d005      	beq.n	4071c8 <_usb_d_dev_trans_stop+0x40>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, false);
  4071bc:	7dfb      	ldrb	r3, [r7, #23]
  4071be:	2100      	movs	r1, #0
  4071c0:	4618      	mov	r0, r3
  4071c2:	4b08      	ldr	r3, [pc, #32]	; (4071e4 <_usb_d_dev_trans_stop+0x5c>)
  4071c4:	4798      	blx	r3
  4071c6:	e004      	b.n	4071d2 <_usb_d_dev_trans_stop+0x4a>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
  4071c8:	7dfb      	ldrb	r3, [r7, #23]
  4071ca:	2100      	movs	r1, #0
  4071cc:	4618      	mov	r0, r3
  4071ce:	4b06      	ldr	r3, [pc, #24]	; (4071e8 <_usb_d_dev_trans_stop+0x60>)
  4071d0:	4798      	blx	r3
	}

	_usb_d_dev_trans_done(ept, code);
  4071d2:	6879      	ldr	r1, [r7, #4]
  4071d4:	68f8      	ldr	r0, [r7, #12]
  4071d6:	4b05      	ldr	r3, [pc, #20]	; (4071ec <_usb_d_dev_trans_stop+0x64>)
  4071d8:	4798      	blx	r3
  4071da:	e000      	b.n	4071de <_usb_d_dev_trans_stop+0x56>
		return;
  4071dc:	bf00      	nop
}
  4071de:	3718      	adds	r7, #24
  4071e0:	46bd      	mov	sp, r7
  4071e2:	bd80      	pop	{r7, pc}
  4071e4:	00405d09 	.word	0x00405d09
  4071e8:	00405d51 	.word	0x00405d51
  4071ec:	00407141 	.word	0x00407141

004071f0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
  4071f0:	b580      	push	{r7, lr}
  4071f2:	b084      	sub	sp, #16
  4071f4:	af00      	add	r7, sp, #0
  4071f6:	4603      	mov	r3, r0
  4071f8:	6039      	str	r1, [r7, #0]
  4071fa:	71fb      	strb	r3, [r7, #7]
	uint8_t epn = USB_EP_GET_N(ep);
  4071fc:	79fb      	ldrb	r3, [r7, #7]
  4071fe:	f003 030f 	and.w	r3, r3, #15
  407202:	73fb      	strb	r3, [r7, #15]

	uint16_t bytes = _usbd_ep_get_trans_count(epn);
  407204:	7bfb      	ldrb	r3, [r7, #15]
  407206:	4618      	mov	r0, r3
  407208:	4b1c      	ldr	r3, [pc, #112]	; (40727c <_usb_d_dev_ep_read_req+0x8c>)
  40720a:	4798      	blx	r3
  40720c:	4603      	mov	r3, r0
  40720e:	81bb      	strh	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  407210:	7bfb      	ldrb	r3, [r7, #15]
  407212:	2b03      	cmp	r3, #3
  407214:	d802      	bhi.n	40721c <_usb_d_dev_ep_read_req+0x2c>
  407216:	683b      	ldr	r3, [r7, #0]
  407218:	2b00      	cmp	r3, #0
  40721a:	d102      	bne.n	407222 <_usb_d_dev_ep_read_req+0x32>
		return -USB_ERR_PARAM;
  40721c:	f06f 0311 	mvn.w	r3, #17
  407220:	e027      	b.n	407272 <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  407222:	7bfb      	ldrb	r3, [r7, #15]
  407224:	4618      	mov	r0, r3
  407226:	4b16      	ldr	r3, [pc, #88]	; (407280 <_usb_d_dev_ep_read_req+0x90>)
  407228:	4798      	blx	r3
  40722a:	4603      	mov	r3, r0
  40722c:	f083 0301 	eor.w	r3, r3, #1
  407230:	b2db      	uxtb	r3, r3
  407232:	2b00      	cmp	r3, #0
  407234:	d002      	beq.n	40723c <_usb_d_dev_ep_read_req+0x4c>
		return -USB_ERR_FUNC;
  407236:	f06f 0312 	mvn.w	r3, #18
  40723a:	e01a      	b.n	407272 <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_setup(epn)) {
  40723c:	7bfb      	ldrb	r3, [r7, #15]
  40723e:	4618      	mov	r0, r3
  407240:	4b10      	ldr	r3, [pc, #64]	; (407284 <_usb_d_dev_ep_read_req+0x94>)
  407242:	4798      	blx	r3
  407244:	4603      	mov	r3, r0
  407246:	f083 0301 	eor.w	r3, r3, #1
  40724a:	b2db      	uxtb	r3, r3
  40724c:	2b00      	cmp	r3, #0
  40724e:	d001      	beq.n	407254 <_usb_d_dev_ep_read_req+0x64>
		return ERR_NONE;
  407250:	2300      	movs	r3, #0
  407252:	e00e      	b.n	407272 <_usb_d_dev_ep_read_req+0x82>
	}

	uint8_t *ptr = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  407254:	7bfb      	ldrb	r3, [r7, #15]
  407256:	03da      	lsls	r2, r3, #15
  407258:	4b0b      	ldr	r3, [pc, #44]	; (407288 <_usb_d_dev_ep_read_req+0x98>)
  40725a:	4413      	add	r3, r2
  40725c:	60bb      	str	r3, [r7, #8]
	memcpy(req_buf, (void *)ptr, 8);
  40725e:	2208      	movs	r2, #8
  407260:	68b9      	ldr	r1, [r7, #8]
  407262:	6838      	ldr	r0, [r7, #0]
  407264:	4b09      	ldr	r3, [pc, #36]	; (40728c <_usb_d_dev_ep_read_req+0x9c>)
  407266:	4798      	blx	r3

	_usbd_ep_ack_setup(epn);
  407268:	7bfb      	ldrb	r3, [r7, #15]
  40726a:	4618      	mov	r0, r3
  40726c:	4b08      	ldr	r3, [pc, #32]	; (407290 <_usb_d_dev_ep_read_req+0xa0>)
  40726e:	4798      	blx	r3

	return bytes;
  407270:	89bb      	ldrh	r3, [r7, #12]
}
  407272:	4618      	mov	r0, r3
  407274:	3710      	adds	r7, #16
  407276:	46bd      	mov	sp, r7
  407278:	bd80      	pop	{r7, pc}
  40727a:	bf00      	nop
  40727c:	00405c91 	.word	0x00405c91
  407280:	00405a01 	.word	0x00405a01
  407284:	00405b91 	.word	0x00405b91
  407288:	a0100000 	.word	0xa0100000
  40728c:	0040951d 	.word	0x0040951d
  407290:	00405bb9 	.word	0x00405bb9

00407294 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  407294:	b580      	push	{r7, lr}
  407296:	b088      	sub	sp, #32
  407298:	af00      	add	r7, sp, #0
  40729a:	6078      	str	r0, [r7, #4]
	Usbhs *               hw  = USBHS;
  40729c:	4b64      	ldr	r3, [pc, #400]	; (407430 <_usb_d_dev_ep_trans+0x19c>)
  40729e:	61fb      	str	r3, [r7, #28]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  4072a0:	687b      	ldr	r3, [r7, #4]
  4072a2:	7a1b      	ldrb	r3, [r3, #8]
  4072a4:	f003 030f 	and.w	r3, r3, #15
  4072a8:	76fb      	strb	r3, [r7, #27]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  4072aa:	687b      	ldr	r3, [r7, #4]
  4072ac:	7a1b      	ldrb	r3, [r3, #8]
  4072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4072b2:	2b00      	cmp	r3, #0
  4072b4:	bf14      	ite	ne
  4072b6:	2301      	movne	r3, #1
  4072b8:	2300      	moveq	r3, #0
  4072ba:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  4072bc:	7efa      	ldrb	r2, [r7, #27]
  4072be:	4613      	mov	r3, r2
  4072c0:	009b      	lsls	r3, r3, #2
  4072c2:	4413      	add	r3, r2
  4072c4:	009b      	lsls	r3, r3, #2
  4072c6:	3310      	adds	r3, #16
  4072c8:	4a5a      	ldr	r2, [pc, #360]	; (407434 <_usb_d_dev_ep_trans+0x1a0>)
  4072ca:	4413      	add	r3, r2
  4072cc:	3304      	adds	r3, #4
  4072ce:	617b      	str	r3, [r7, #20]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  4072d0:	697b      	ldr	r3, [r7, #20]
  4072d2:	8a1b      	ldrh	r3, [r3, #16]
  4072d4:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4072d8:	4293      	cmp	r3, r2
  4072da:	d004      	beq.n	4072e6 <_usb_d_dev_ep_trans+0x52>
  4072dc:	697b      	ldr	r3, [r7, #20]
  4072de:	8a1b      	ldrh	r3, [r3, #16]
  4072e0:	3b01      	subs	r3, #1
  4072e2:	b29b      	uxth	r3, r3
  4072e4:	e001      	b.n	4072ea <_usb_d_dev_ep_trans+0x56>
  4072e6:	f240 33ff 	movw	r3, #1023	; 0x3ff
  4072ea:	827b      	strh	r3, [r7, #18]
	bool     size_n_aligned = (trans->size & size_mask);
  4072ec:	687b      	ldr	r3, [r7, #4]
  4072ee:	685a      	ldr	r2, [r3, #4]
  4072f0:	8a7b      	ldrh	r3, [r7, #18]
  4072f2:	4013      	ands	r3, r2
  4072f4:	2b00      	cmp	r3, #0
  4072f6:	bf14      	ite	ne
  4072f8:	2301      	movne	r3, #1
  4072fa:	2300      	moveq	r3, #0
  4072fc:	747b      	strb	r3, [r7, #17]
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  4072fe:	697b      	ldr	r3, [r7, #20]
  407300:	7cdb      	ldrb	r3, [r3, #19]
  407302:	f003 0307 	and.w	r3, r3, #7
  407306:	b2db      	uxtb	r3, r3
  407308:	2b01      	cmp	r3, #1
  40730a:	bf0c      	ite	eq
  40730c:	2301      	moveq	r3, #1
  40730e:	2300      	movne	r3, #0
  407310:	743b      	strb	r3, [r7, #16]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  407312:	7efb      	ldrb	r3, [r7, #27]
  407314:	2b03      	cmp	r3, #3
  407316:	d902      	bls.n	40731e <_usb_d_dev_ep_trans+0x8a>
		return -USB_ERR_PARAM;
  407318:	f06f 0311 	mvn.w	r3, #17
  40731c:	e083      	b.n	407426 <_usb_d_dev_ep_trans+0x192>
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  40731e:	697b      	ldr	r3, [r7, #20]
  407320:	7cdb      	ldrb	r3, [r3, #19]
  407322:	f003 0308 	and.w	r3, r3, #8
  407326:	b2db      	uxtb	r3, r3
  407328:	2b00      	cmp	r3, #0
  40732a:	d001      	beq.n	407330 <_usb_d_dev_ep_trans+0x9c>
		return USB_HALTED;
  40732c:	2302      	movs	r3, #2
  40732e:	e07a      	b.n	407426 <_usb_d_dev_ep_trans+0x192>
	}

	/* Try to start transactions. */
	atomic_enter_critical(&flags);
  407330:	f107 030c 	add.w	r3, r7, #12
  407334:	4618      	mov	r0, r3
  407336:	4b40      	ldr	r3, [pc, #256]	; (407438 <_usb_d_dev_ep_trans+0x1a4>)
  407338:	4798      	blx	r3

	if (_usb_d_dev_ep_is_busy(ept)) {
  40733a:	697b      	ldr	r3, [r7, #20]
  40733c:	7cdb      	ldrb	r3, [r3, #19]
  40733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  407342:	b2db      	uxtb	r3, r3
  407344:	2b00      	cmp	r3, #0
  407346:	d006      	beq.n	407356 <_usb_d_dev_ep_trans+0xc2>
		atomic_leave_critical(&flags);
  407348:	f107 030c 	add.w	r3, r7, #12
  40734c:	4618      	mov	r0, r3
  40734e:	4b3b      	ldr	r3, [pc, #236]	; (40743c <_usb_d_dev_ep_trans+0x1a8>)
  407350:	4798      	blx	r3
		return USB_BUSY;
  407352:	2301      	movs	r3, #1
  407354:	e067      	b.n	407426 <_usb_d_dev_ep_trans+0x192>
	}

	ept->flags.bits.is_busy = 1;
  407356:	697a      	ldr	r2, [r7, #20]
  407358:	7cd3      	ldrb	r3, [r2, #19]
  40735a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40735e:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
  407360:	f107 030c 	add.w	r3, r7, #12
  407364:	4618      	mov	r0, r3
  407366:	4b35      	ldr	r3, [pc, #212]	; (40743c <_usb_d_dev_ep_trans+0x1a8>)
  407368:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
  40736a:	687b      	ldr	r3, [r7, #4]
  40736c:	681a      	ldr	r2, [r3, #0]
  40736e:	697b      	ldr	r3, [r7, #20]
  407370:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
  407372:	687b      	ldr	r3, [r7, #4]
  407374:	685a      	ldr	r2, [r3, #4]
  407376:	697b      	ldr	r3, [r7, #20]
  407378:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
  40737a:	697b      	ldr	r3, [r7, #20]
  40737c:	2200      	movs	r2, #0
  40737e:	609a      	str	r2, [r3, #8]
	ept->trans_load  = 0;
  407380:	697b      	ldr	r3, [r7, #20]
  407382:	2200      	movs	r2, #0
  407384:	60da      	str	r2, [r3, #12]

	ept->flags.bits.dir      = dir;
  407386:	697a      	ldr	r2, [r7, #20]
  407388:	7cd3      	ldrb	r3, [r2, #19]
  40738a:	7eb9      	ldrb	r1, [r7, #26]
  40738c:	f361 13c7 	bfi	r3, r1, #7, #1
  407390:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  407392:	687b      	ldr	r3, [r7, #4]
  407394:	7a5b      	ldrb	r3, [r3, #9]
  407396:	2b00      	cmp	r3, #0
  407398:	d007      	beq.n	4073aa <_usb_d_dev_ep_trans+0x116>
  40739a:	7c7b      	ldrb	r3, [r7, #17]
  40739c:	f083 0301 	eor.w	r3, r3, #1
  4073a0:	b2db      	uxtb	r3, r3
  4073a2:	2b00      	cmp	r3, #0
  4073a4:	d001      	beq.n	4073aa <_usb_d_dev_ep_trans+0x116>
  4073a6:	2301      	movs	r3, #1
  4073a8:	e000      	b.n	4073ac <_usb_d_dev_ep_trans+0x118>
  4073aa:	2300      	movs	r3, #0
  4073ac:	b2db      	uxtb	r3, r3
  4073ae:	f003 0301 	and.w	r3, r3, #1
  4073b2:	b2d9      	uxtb	r1, r3
  4073b4:	697a      	ldr	r2, [r7, #20]
  4073b6:	7cd3      	ldrb	r3, [r2, #19]
  4073b8:	f361 1304 	bfi	r3, r1, #4, #1
  4073bc:	74d3      	strb	r3, [r2, #19]

#if (CONF_USB_D_DMA_ENABLE == 1)
	if (_usb_d_dev_ep_is_dma(epn)) {
  4073be:	7efb      	ldrb	r3, [r7, #27]
  4073c0:	2b00      	cmp	r3, #0
  4073c2:	d00b      	beq.n	4073dc <_usb_d_dev_ep_trans+0x148>
  4073c4:	7efb      	ldrb	r3, [r7, #27]
  4073c6:	2b06      	cmp	r3, #6
  4073c8:	d808      	bhi.n	4073dc <_usb_d_dev_ep_trans+0x148>
		hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(hw, epn);
  4073ca:	7efb      	ldrb	r3, [r7, #27]
  4073cc:	4619      	mov	r1, r3
  4073ce:	69f8      	ldr	r0, [r7, #28]
  4073d0:	4b1b      	ldr	r3, [pc, #108]	; (407440 <_usb_d_dev_ep_trans+0x1ac>)
  4073d2:	4798      	blx	r3
		_usb_d_dev_dma_next(ept);
  4073d4:	6978      	ldr	r0, [r7, #20]
  4073d6:	4b1b      	ldr	r3, [pc, #108]	; (407444 <_usb_d_dev_ep_trans+0x1b0>)
  4073d8:	4798      	blx	r3
  4073da:	e023      	b.n	407424 <_usb_d_dev_ep_trans+0x190>
	} else {
#endif
		if (!is_ctrl) {
  4073dc:	7c3b      	ldrb	r3, [r7, #16]
  4073de:	f083 0301 	eor.w	r3, r3, #1
  4073e2:	b2db      	uxtb	r3, r3
  4073e4:	2b00      	cmp	r3, #0
  4073e6:	d008      	beq.n	4073fa <_usb_d_dev_ep_trans+0x166>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4073e8:	7efb      	ldrb	r3, [r7, #27]
  4073ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4073ee:	fa02 f303 	lsl.w	r3, r2, r3
  4073f2:	4619      	mov	r1, r3
  4073f4:	69f8      	ldr	r0, [r7, #28]
  4073f6:	4b14      	ldr	r3, [pc, #80]	; (407448 <_usb_d_dev_ep_trans+0x1b4>)
  4073f8:	4798      	blx	r3
		}
		hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(hw, epn);
  4073fa:	7efb      	ldrb	r3, [r7, #27]
  4073fc:	4619      	mov	r1, r3
  4073fe:	69f8      	ldr	r0, [r7, #28]
  407400:	4b12      	ldr	r3, [pc, #72]	; (40744c <_usb_d_dev_ep_trans+0x1b8>)
  407402:	4798      	blx	r3
		if (dir) {
  407404:	7ebb      	ldrb	r3, [r7, #26]
  407406:	2b00      	cmp	r3, #0
  407408:	d006      	beq.n	407418 <_usb_d_dev_ep_trans+0x184>
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  40740a:	7efb      	ldrb	r3, [r7, #27]
  40740c:	2201      	movs	r2, #1
  40740e:	4619      	mov	r1, r3
  407410:	69f8      	ldr	r0, [r7, #28]
  407412:	4b0f      	ldr	r3, [pc, #60]	; (407450 <_usb_d_dev_ep_trans+0x1bc>)
  407414:	4798      	blx	r3
  407416:	e005      	b.n	407424 <_usb_d_dev_ep_trans+0x190>
		} else {
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RXOUTES);
  407418:	7efb      	ldrb	r3, [r7, #27]
  40741a:	2202      	movs	r2, #2
  40741c:	4619      	mov	r1, r3
  40741e:	69f8      	ldr	r0, [r7, #28]
  407420:	4b0b      	ldr	r3, [pc, #44]	; (407450 <_usb_d_dev_ep_trans+0x1bc>)
  407422:	4798      	blx	r3
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
  407424:	2300      	movs	r3, #0
}
  407426:	4618      	mov	r0, r3
  407428:	3720      	adds	r7, #32
  40742a:	46bd      	mov	sp, r7
  40742c:	bd80      	pop	{r7, pc}
  40742e:	bf00      	nop
  407430:	40038000 	.word	0x40038000
  407434:	20401674 	.word	0x20401674
  407438:	00401375 	.word	0x00401375
  40743c:	0040139b 	.word	0x0040139b
  407440:	004055ff 	.word	0x004055ff
  407444:	004062d9 	.word	0x004062d9
  407448:	004053e9 	.word	0x004053e9
  40744c:	0040562f 	.word	0x0040562f
  407450:	004057b1 	.word	0x004057b1

00407454 <_usb_d_dev_register_callback>:

	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
  407454:	b480      	push	{r7}
  407456:	b085      	sub	sp, #20
  407458:	af00      	add	r7, sp, #0
  40745a:	4603      	mov	r3, r0
  40745c:	6039      	str	r1, [r7, #0]
  40745e:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  407460:	683b      	ldr	r3, [r7, #0]
  407462:	2b00      	cmp	r3, #0
  407464:	d001      	beq.n	40746a <_usb_d_dev_register_callback+0x16>
  407466:	683b      	ldr	r3, [r7, #0]
  407468:	e000      	b.n	40746c <_usb_d_dev_register_callback+0x18>
  40746a:	4b0a      	ldr	r3, [pc, #40]	; (407494 <_usb_d_dev_register_callback+0x40>)
  40746c:	60fb      	str	r3, [r7, #12]

	if (type == USB_D_CB_EVENT) {
  40746e:	79fb      	ldrb	r3, [r7, #7]
  407470:	2b01      	cmp	r3, #1
  407472:	d103      	bne.n	40747c <_usb_d_dev_register_callback+0x28>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
  407474:	4a08      	ldr	r2, [pc, #32]	; (407498 <_usb_d_dev_register_callback+0x44>)
  407476:	68fb      	ldr	r3, [r7, #12]
  407478:	6053      	str	r3, [r2, #4]
	} else if (type == USB_D_CB_SOF) {
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}
  40747a:	e005      	b.n	407488 <_usb_d_dev_register_callback+0x34>
	} else if (type == USB_D_CB_SOF) {
  40747c:	79fb      	ldrb	r3, [r7, #7]
  40747e:	2b00      	cmp	r3, #0
  407480:	d102      	bne.n	407488 <_usb_d_dev_register_callback+0x34>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
  407482:	4a05      	ldr	r2, [pc, #20]	; (407498 <_usb_d_dev_register_callback+0x44>)
  407484:	68fb      	ldr	r3, [r7, #12]
  407486:	6013      	str	r3, [r2, #0]
}
  407488:	bf00      	nop
  40748a:	3714      	adds	r7, #20
  40748c:	46bd      	mov	sp, r7
  40748e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407492:	4770      	bx	lr
  407494:	004058e5 	.word	0x004058e5
  407498:	20401674 	.word	0x20401674

0040749c <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
  40749c:	b480      	push	{r7}
  40749e:	b085      	sub	sp, #20
  4074a0:	af00      	add	r7, sp, #0
  4074a2:	4603      	mov	r3, r0
  4074a4:	6039      	str	r1, [r7, #0]
  4074a6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  4074a8:	683b      	ldr	r3, [r7, #0]
  4074aa:	2b00      	cmp	r3, #0
  4074ac:	d001      	beq.n	4074b2 <_usb_d_dev_register_ep_callback+0x16>
  4074ae:	683b      	ldr	r3, [r7, #0]
  4074b0:	e000      	b.n	4074b4 <_usb_d_dev_register_ep_callback+0x18>
  4074b2:	4b0e      	ldr	r3, [pc, #56]	; (4074ec <_usb_d_dev_register_ep_callback+0x50>)
  4074b4:	60fb      	str	r3, [r7, #12]

	if (type == USB_D_DEV_EP_CB_SETUP) {
  4074b6:	79fb      	ldrb	r3, [r7, #7]
  4074b8:	2b00      	cmp	r3, #0
  4074ba:	d103      	bne.n	4074c4 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  4074bc:	4a0c      	ldr	r2, [pc, #48]	; (4074f0 <_usb_d_dev_register_ep_callback+0x54>)
  4074be:	68fb      	ldr	r3, [r7, #12]
  4074c0:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
  4074c2:	e00c      	b.n	4074de <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  4074c4:	79fb      	ldrb	r3, [r7, #7]
  4074c6:	2b01      	cmp	r3, #1
  4074c8:	d103      	bne.n	4074d2 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  4074ca:	4a09      	ldr	r2, [pc, #36]	; (4074f0 <_usb_d_dev_register_ep_callback+0x54>)
  4074cc:	68fb      	ldr	r3, [r7, #12]
  4074ce:	60d3      	str	r3, [r2, #12]
}
  4074d0:	e005      	b.n	4074de <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  4074d2:	79fb      	ldrb	r3, [r7, #7]
  4074d4:	2b02      	cmp	r3, #2
  4074d6:	d102      	bne.n	4074de <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  4074d8:	4a05      	ldr	r2, [pc, #20]	; (4074f0 <_usb_d_dev_register_ep_callback+0x54>)
  4074da:	68fb      	ldr	r3, [r7, #12]
  4074dc:	6113      	str	r3, [r2, #16]
}
  4074de:	bf00      	nop
  4074e0:	3714      	adds	r7, #20
  4074e2:	46bd      	mov	sp, r7
  4074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074e8:	4770      	bx	lr
  4074ea:	bf00      	nop
  4074ec:	004058e5 	.word	0x004058e5
  4074f0:	20401674 	.word	0x20401674

004074f4 <__NVIC_EnableIRQ>:
{
  4074f4:	b480      	push	{r7}
  4074f6:	b083      	sub	sp, #12
  4074f8:	af00      	add	r7, sp, #0
  4074fa:	4603      	mov	r3, r0
  4074fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4074fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407502:	2b00      	cmp	r3, #0
  407504:	db0b      	blt.n	40751e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  407506:	4909      	ldr	r1, [pc, #36]	; (40752c <__NVIC_EnableIRQ+0x38>)
  407508:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40750c:	095b      	lsrs	r3, r3, #5
  40750e:	79fa      	ldrb	r2, [r7, #7]
  407510:	f002 021f 	and.w	r2, r2, #31
  407514:	2001      	movs	r0, #1
  407516:	fa00 f202 	lsl.w	r2, r0, r2
  40751a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40751e:	bf00      	nop
  407520:	370c      	adds	r7, #12
  407522:	46bd      	mov	sp, r7
  407524:	f85d 7b04 	ldr.w	r7, [sp], #4
  407528:	4770      	bx	lr
  40752a:	bf00      	nop
  40752c:	e000e100 	.word	0xe000e100

00407530 <__NVIC_DisableIRQ>:
{
  407530:	b480      	push	{r7}
  407532:	b083      	sub	sp, #12
  407534:	af00      	add	r7, sp, #0
  407536:	4603      	mov	r3, r0
  407538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40753a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40753e:	2b00      	cmp	r3, #0
  407540:	db10      	blt.n	407564 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  407542:	490b      	ldr	r1, [pc, #44]	; (407570 <__NVIC_DisableIRQ+0x40>)
  407544:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407548:	095b      	lsrs	r3, r3, #5
  40754a:	79fa      	ldrb	r2, [r7, #7]
  40754c:	f002 021f 	and.w	r2, r2, #31
  407550:	2001      	movs	r0, #1
  407552:	fa00 f202 	lsl.w	r2, r0, r2
  407556:	3320      	adds	r3, #32
  407558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40755c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407560:	f3bf 8f6f 	isb	sy
}
  407564:	bf00      	nop
  407566:	370c      	adds	r7, #12
  407568:	46bd      	mov	sp, r7
  40756a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40756e:	4770      	bx	lr
  407570:	e000e100 	.word	0xe000e100

00407574 <__NVIC_ClearPendingIRQ>:
{
  407574:	b480      	push	{r7}
  407576:	b083      	sub	sp, #12
  407578:	af00      	add	r7, sp, #0
  40757a:	4603      	mov	r3, r0
  40757c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40757e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407582:	2b00      	cmp	r3, #0
  407584:	db0c      	blt.n	4075a0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  407586:	4909      	ldr	r1, [pc, #36]	; (4075ac <__NVIC_ClearPendingIRQ+0x38>)
  407588:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40758c:	095b      	lsrs	r3, r3, #5
  40758e:	79fa      	ldrb	r2, [r7, #7]
  407590:	f002 021f 	and.w	r2, r2, #31
  407594:	2001      	movs	r0, #1
  407596:	fa00 f202 	lsl.w	r2, r0, r2
  40759a:	3360      	adds	r3, #96	; 0x60
  40759c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4075a0:	bf00      	nop
  4075a2:	370c      	adds	r7, #12
  4075a4:	46bd      	mov	sp, r7
  4075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4075aa:	4770      	bx	lr
  4075ac:	e000e100 	.word	0xe000e100

004075b0 <hri_xdmac_set_CIM_reg>:
{
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = XDMAC_CIM_ROIM;
}

static inline void hri_xdmac_set_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  4075b0:	b480      	push	{r7}
  4075b2:	b085      	sub	sp, #20
  4075b4:	af00      	add	r7, sp, #0
  4075b6:	60f8      	str	r0, [r7, #12]
  4075b8:	460b      	mov	r3, r1
  4075ba:	607a      	str	r2, [r7, #4]
  4075bc:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = mask;
  4075be:	7afb      	ldrb	r3, [r7, #11]
  4075c0:	68fa      	ldr	r2, [r7, #12]
  4075c2:	019b      	lsls	r3, r3, #6
  4075c4:	4413      	add	r3, r2
  4075c6:	3350      	adds	r3, #80	; 0x50
  4075c8:	687a      	ldr	r2, [r7, #4]
  4075ca:	601a      	str	r2, [r3, #0]
}
  4075cc:	bf00      	nop
  4075ce:	3714      	adds	r7, #20
  4075d0:	46bd      	mov	sp, r7
  4075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4075d6:	4770      	bx	lr

004075d8 <hri_xdmac_clear_CIM_reg>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = data;
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = ~data;
}

static inline void hri_xdmac_clear_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  4075d8:	b480      	push	{r7}
  4075da:	b085      	sub	sp, #20
  4075dc:	af00      	add	r7, sp, #0
  4075de:	60f8      	str	r0, [r7, #12]
  4075e0:	460b      	mov	r3, r1
  4075e2:	607a      	str	r2, [r7, #4]
  4075e4:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = mask;
  4075e6:	7afb      	ldrb	r3, [r7, #11]
  4075e8:	68fa      	ldr	r2, [r7, #12]
  4075ea:	019b      	lsls	r3, r3, #6
  4075ec:	4413      	add	r3, r2
  4075ee:	3354      	adds	r3, #84	; 0x54
  4075f0:	687a      	ldr	r2, [r7, #4]
  4075f2:	601a      	str	r2, [r3, #0]
}
  4075f4:	bf00      	nop
  4075f6:	3714      	adds	r7, #20
  4075f8:	46bd      	mov	sp, r7
  4075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4075fe:	4770      	bx	lr

00407600 <hri_xdmac_read_CIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
  407600:	b480      	push	{r7}
  407602:	b083      	sub	sp, #12
  407604:	af00      	add	r7, sp, #0
  407606:	6078      	str	r0, [r7, #4]
  407608:	460b      	mov	r3, r1
  40760a:	70fb      	strb	r3, [r7, #3]
	return ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIS;
  40760c:	78fb      	ldrb	r3, [r7, #3]
  40760e:	687a      	ldr	r2, [r7, #4]
  407610:	019b      	lsls	r3, r3, #6
  407612:	4413      	add	r3, r2
  407614:	335c      	adds	r3, #92	; 0x5c
  407616:	681b      	ldr	r3, [r3, #0]
}
  407618:	4618      	mov	r0, r3
  40761a:	370c      	adds	r7, #12
  40761c:	46bd      	mov	sp, r7
  40761e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407622:	4770      	bx	lr

00407624 <hri_xdmac_write_CSA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csa_reg_t data)
{
  407624:	b480      	push	{r7}
  407626:	b085      	sub	sp, #20
  407628:	af00      	add	r7, sp, #0
  40762a:	60f8      	str	r0, [r7, #12]
  40762c:	460b      	mov	r3, r1
  40762e:	607a      	str	r2, [r7, #4]
  407630:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSA = data;
  407632:	7afb      	ldrb	r3, [r7, #11]
  407634:	68fa      	ldr	r2, [r7, #12]
  407636:	019b      	lsls	r3, r3, #6
  407638:	4413      	add	r3, r2
  40763a:	3360      	adds	r3, #96	; 0x60
  40763c:	687a      	ldr	r2, [r7, #4]
  40763e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407640:	bf00      	nop
  407642:	3714      	adds	r7, #20
  407644:	46bd      	mov	sp, r7
  407646:	f85d 7b04 	ldr.w	r7, [sp], #4
  40764a:	4770      	bx	lr

0040764c <hri_xdmac_write_CDA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cda_reg_t data)
{
  40764c:	b480      	push	{r7}
  40764e:	b085      	sub	sp, #20
  407650:	af00      	add	r7, sp, #0
  407652:	60f8      	str	r0, [r7, #12]
  407654:	460b      	mov	r3, r1
  407656:	607a      	str	r2, [r7, #4]
  407658:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDA = data;
  40765a:	7afb      	ldrb	r3, [r7, #11]
  40765c:	68fa      	ldr	r2, [r7, #12]
  40765e:	019b      	lsls	r3, r3, #6
  407660:	4413      	add	r3, r2
  407662:	3364      	adds	r3, #100	; 0x64
  407664:	687a      	ldr	r2, [r7, #4]
  407666:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407668:	bf00      	nop
  40766a:	3714      	adds	r7, #20
  40766c:	46bd      	mov	sp, r7
  40766e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407672:	4770      	bx	lr

00407674 <hri_xdmac_write_CNDC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
  407674:	b480      	push	{r7}
  407676:	b085      	sub	sp, #20
  407678:	af00      	add	r7, sp, #0
  40767a:	60f8      	str	r0, [r7, #12]
  40767c:	460b      	mov	r3, r1
  40767e:	607a      	str	r2, [r7, #4]
  407680:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CNDC = data;
  407682:	7afb      	ldrb	r3, [r7, #11]
  407684:	68fa      	ldr	r2, [r7, #12]
  407686:	019b      	lsls	r3, r3, #6
  407688:	4413      	add	r3, r2
  40768a:	336c      	adds	r3, #108	; 0x6c
  40768c:	687a      	ldr	r2, [r7, #4]
  40768e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407690:	bf00      	nop
  407692:	3714      	adds	r7, #20
  407694:	46bd      	mov	sp, r7
  407696:	f85d 7b04 	ldr.w	r7, [sp], #4
  40769a:	4770      	bx	lr

0040769c <hri_xdmac_write_CUBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CUBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cubc_reg_t data)
{
  40769c:	b480      	push	{r7}
  40769e:	b085      	sub	sp, #20
  4076a0:	af00      	add	r7, sp, #0
  4076a2:	60f8      	str	r0, [r7, #12]
  4076a4:	460b      	mov	r3, r1
  4076a6:	607a      	str	r2, [r7, #4]
  4076a8:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CUBC = data;
  4076aa:	7afb      	ldrb	r3, [r7, #11]
  4076ac:	68fa      	ldr	r2, [r7, #12]
  4076ae:	019b      	lsls	r3, r3, #6
  4076b0:	4413      	add	r3, r2
  4076b2:	3370      	adds	r3, #112	; 0x70
  4076b4:	687a      	ldr	r2, [r7, #4]
  4076b6:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4076b8:	bf00      	nop
  4076ba:	3714      	adds	r7, #20
  4076bc:	46bd      	mov	sp, r7
  4076be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4076c2:	4770      	bx	lr

004076c4 <hri_xdmac_write_CBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
  4076c4:	b480      	push	{r7}
  4076c6:	b085      	sub	sp, #20
  4076c8:	af00      	add	r7, sp, #0
  4076ca:	60f8      	str	r0, [r7, #12]
  4076cc:	460b      	mov	r3, r1
  4076ce:	607a      	str	r2, [r7, #4]
  4076d0:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CBC = data;
  4076d2:	7afb      	ldrb	r3, [r7, #11]
  4076d4:	68fa      	ldr	r2, [r7, #12]
  4076d6:	019b      	lsls	r3, r3, #6
  4076d8:	4413      	add	r3, r2
  4076da:	3374      	adds	r3, #116	; 0x74
  4076dc:	687a      	ldr	r2, [r7, #4]
  4076de:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4076e0:	bf00      	nop
  4076e2:	3714      	adds	r7, #20
  4076e4:	46bd      	mov	sp, r7
  4076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4076ea:	4770      	bx	lr

004076ec <hri_xdmac_get_CC_DWIDTH_bf>:
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_get_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index,
                                                            hri_xdmac_cc_reg_t mask)
{
  4076ec:	b480      	push	{r7}
  4076ee:	b087      	sub	sp, #28
  4076f0:	af00      	add	r7, sp, #0
  4076f2:	60f8      	str	r0, [r7, #12]
  4076f4:	460b      	mov	r3, r1
  4076f6:	607a      	str	r2, [r7, #4]
  4076f8:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  4076fa:	7afb      	ldrb	r3, [r7, #11]
  4076fc:	68fa      	ldr	r2, [r7, #12]
  4076fe:	019b      	lsls	r3, r3, #6
  407700:	4413      	add	r3, r2
  407702:	3378      	adds	r3, #120	; 0x78
  407704:	681b      	ldr	r3, [r3, #0]
  407706:	617b      	str	r3, [r7, #20]
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  407708:	687b      	ldr	r3, [r7, #4]
  40770a:	02da      	lsls	r2, r3, #11
  40770c:	697b      	ldr	r3, [r7, #20]
  40770e:	4013      	ands	r3, r2
  407710:	0adb      	lsrs	r3, r3, #11
  407712:	f003 0303 	and.w	r3, r3, #3
  407716:	617b      	str	r3, [r7, #20]
	return tmp;
  407718:	697b      	ldr	r3, [r7, #20]
}
  40771a:	4618      	mov	r0, r3
  40771c:	371c      	adds	r7, #28
  40771e:	46bd      	mov	sp, r7
  407720:	f85d 7b04 	ldr.w	r7, [sp], #4
  407724:	4770      	bx	lr

00407726 <hri_xdmac_read_CC_DWIDTH_bf>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC ^= XDMAC_CC_DWIDTH(mask);
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_read_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index)
{
  407726:	b480      	push	{r7}
  407728:	b085      	sub	sp, #20
  40772a:	af00      	add	r7, sp, #0
  40772c:	6078      	str	r0, [r7, #4]
  40772e:	460b      	mov	r3, r1
  407730:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  407732:	78fb      	ldrb	r3, [r7, #3]
  407734:	687a      	ldr	r2, [r7, #4]
  407736:	019b      	lsls	r3, r3, #6
  407738:	4413      	add	r3, r2
  40773a:	3378      	adds	r3, #120	; 0x78
  40773c:	681b      	ldr	r3, [r3, #0]
  40773e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & XDMAC_CC_DWIDTH_Msk) >> XDMAC_CC_DWIDTH_Pos;
  407740:	68fb      	ldr	r3, [r7, #12]
  407742:	0adb      	lsrs	r3, r3, #11
  407744:	f003 0303 	and.w	r3, r3, #3
  407748:	60fb      	str	r3, [r7, #12]
	return tmp;
  40774a:	68fb      	ldr	r3, [r7, #12]
}
  40774c:	4618      	mov	r0, r3
  40774e:	3714      	adds	r7, #20
  407750:	46bd      	mov	sp, r7
  407752:	f85d 7b04 	ldr.w	r7, [sp], #4
  407756:	4770      	bx	lr

00407758 <hri_xdmac_write_CC_SAM_bf>:
	tmp = (tmp & XDMAC_CC_SAM(mask)) >> XDMAC_CC_SAM_Pos;
	return tmp;
}

static inline void hri_xdmac_write_CC_SAM_bf(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  407758:	b480      	push	{r7}
  40775a:	b087      	sub	sp, #28
  40775c:	af00      	add	r7, sp, #0
  40775e:	60f8      	str	r0, [r7, #12]
  407760:	460b      	mov	r3, r1
  407762:	607a      	str	r2, [r7, #4]
  407764:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  407766:	7afb      	ldrb	r3, [r7, #11]
  407768:	68fa      	ldr	r2, [r7, #12]
  40776a:	019b      	lsls	r3, r3, #6
  40776c:	4413      	add	r3, r2
  40776e:	3378      	adds	r3, #120	; 0x78
  407770:	681b      	ldr	r3, [r3, #0]
  407772:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CC_SAM_Msk;
  407774:	697b      	ldr	r3, [r7, #20]
  407776:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40777a:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CC_SAM(data);
  40777c:	687b      	ldr	r3, [r7, #4]
  40777e:	041b      	lsls	r3, r3, #16
  407780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  407784:	697a      	ldr	r2, [r7, #20]
  407786:	4313      	orrs	r3, r2
  407788:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = tmp;
  40778a:	7afb      	ldrb	r3, [r7, #11]
  40778c:	68fa      	ldr	r2, [r7, #12]
  40778e:	019b      	lsls	r3, r3, #6
  407790:	4413      	add	r3, r2
  407792:	3378      	adds	r3, #120	; 0x78
  407794:	697a      	ldr	r2, [r7, #20]
  407796:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407798:	bf00      	nop
  40779a:	371c      	adds	r7, #28
  40779c:	46bd      	mov	sp, r7
  40779e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4077a2:	4770      	bx	lr

004077a4 <hri_xdmac_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  4077a4:	b480      	push	{r7}
  4077a6:	b085      	sub	sp, #20
  4077a8:	af00      	add	r7, sp, #0
  4077aa:	60f8      	str	r0, [r7, #12]
  4077ac:	460b      	mov	r3, r1
  4077ae:	607a      	str	r2, [r7, #4]
  4077b0:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = data;
  4077b2:	7afb      	ldrb	r3, [r7, #11]
  4077b4:	68fa      	ldr	r2, [r7, #12]
  4077b6:	019b      	lsls	r3, r3, #6
  4077b8:	4413      	add	r3, r2
  4077ba:	3378      	adds	r3, #120	; 0x78
  4077bc:	687a      	ldr	r2, [r7, #4]
  4077be:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4077c0:	bf00      	nop
  4077c2:	3714      	adds	r7, #20
  4077c4:	46bd      	mov	sp, r7
  4077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4077ca:	4770      	bx	lr

004077cc <hri_xdmac_write_CDS_MSP_SDS_MSP_bf>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_SDS_MSP_bf(const void *const hw, uint8_t submodule_index,
                                                      hri_xdmac_cds_msp_reg_t data)
{
  4077cc:	b480      	push	{r7}
  4077ce:	b087      	sub	sp, #28
  4077d0:	af00      	add	r7, sp, #0
  4077d2:	60f8      	str	r0, [r7, #12]
  4077d4:	460b      	mov	r3, r1
  4077d6:	607a      	str	r2, [r7, #4]
  4077d8:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP;
  4077da:	7afb      	ldrb	r3, [r7, #11]
  4077dc:	68fa      	ldr	r2, [r7, #12]
  4077de:	019b      	lsls	r3, r3, #6
  4077e0:	4413      	add	r3, r2
  4077e2:	337c      	adds	r3, #124	; 0x7c
  4077e4:	681b      	ldr	r3, [r3, #0]
  4077e6:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CDS_MSP_SDS_MSP_Msk;
  4077e8:	697a      	ldr	r2, [r7, #20]
  4077ea:	4b0a      	ldr	r3, [pc, #40]	; (407814 <hri_xdmac_write_CDS_MSP_SDS_MSP_bf+0x48>)
  4077ec:	4013      	ands	r3, r2
  4077ee:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CDS_MSP_SDS_MSP(data);
  4077f0:	687b      	ldr	r3, [r7, #4]
  4077f2:	b29b      	uxth	r3, r3
  4077f4:	697a      	ldr	r2, [r7, #20]
  4077f6:	4313      	orrs	r3, r2
  4077f8:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = tmp;
  4077fa:	7afb      	ldrb	r3, [r7, #11]
  4077fc:	68fa      	ldr	r2, [r7, #12]
  4077fe:	019b      	lsls	r3, r3, #6
  407800:	4413      	add	r3, r2
  407802:	337c      	adds	r3, #124	; 0x7c
  407804:	697a      	ldr	r2, [r7, #20]
  407806:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407808:	bf00      	nop
  40780a:	371c      	adds	r7, #28
  40780c:	46bd      	mov	sp, r7
  40780e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407812:	4770      	bx	lr
  407814:	ffff0000 	.word	0xffff0000

00407818 <hri_xdmac_write_CDS_MSP_reg>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_reg(const void *const hw, uint8_t submodule_index,
                                               hri_xdmac_cds_msp_reg_t data)
{
  407818:	b480      	push	{r7}
  40781a:	b085      	sub	sp, #20
  40781c:	af00      	add	r7, sp, #0
  40781e:	60f8      	str	r0, [r7, #12]
  407820:	460b      	mov	r3, r1
  407822:	607a      	str	r2, [r7, #4]
  407824:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = data;
  407826:	7afb      	ldrb	r3, [r7, #11]
  407828:	68fa      	ldr	r2, [r7, #12]
  40782a:	019b      	lsls	r3, r3, #6
  40782c:	4413      	add	r3, r2
  40782e:	337c      	adds	r3, #124	; 0x7c
  407830:	687a      	ldr	r2, [r7, #4]
  407832:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407834:	bf00      	nop
  407836:	3714      	adds	r7, #20
  407838:	46bd      	mov	sp, r7
  40783a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40783e:	4770      	bx	lr

00407840 <hri_xdmac_write_CSUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
  407840:	b480      	push	{r7}
  407842:	b085      	sub	sp, #20
  407844:	af00      	add	r7, sp, #0
  407846:	60f8      	str	r0, [r7, #12]
  407848:	460b      	mov	r3, r1
  40784a:	607a      	str	r2, [r7, #4]
  40784c:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSUS = data;
  40784e:	7afb      	ldrb	r3, [r7, #11]
  407850:	68fa      	ldr	r2, [r7, #12]
  407852:	3302      	adds	r3, #2
  407854:	019b      	lsls	r3, r3, #6
  407856:	4413      	add	r3, r2
  407858:	687a      	ldr	r2, [r7, #4]
  40785a:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  40785c:	bf00      	nop
  40785e:	3714      	adds	r7, #20
  407860:	46bd      	mov	sp, r7
  407862:	f85d 7b04 	ldr.w	r7, [sp], #4
  407866:	4770      	bx	lr

00407868 <hri_xdmac_write_CDUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
  407868:	b480      	push	{r7}
  40786a:	b085      	sub	sp, #20
  40786c:	af00      	add	r7, sp, #0
  40786e:	60f8      	str	r0, [r7, #12]
  407870:	460b      	mov	r3, r1
  407872:	607a      	str	r2, [r7, #4]
  407874:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDUS = data;
  407876:	7afb      	ldrb	r3, [r7, #11]
  407878:	68fa      	ldr	r2, [r7, #12]
  40787a:	3302      	adds	r3, #2
  40787c:	019b      	lsls	r3, r3, #6
  40787e:	4413      	add	r3, r2
  407880:	3304      	adds	r3, #4
  407882:	687a      	ldr	r2, [r7, #4]
  407884:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407886:	bf00      	nop
  407888:	3714      	adds	r7, #20
  40788a:	46bd      	mov	sp, r7
  40788c:	f85d 7b04 	ldr.w	r7, [sp], #4
  407890:	4770      	bx	lr

00407892 <hri_xdmac_set_GIM_reg>:
{
	((Xdmac *)hw)->XDMAC_GID = XDMAC_GIM_IM23;
}

static inline void hri_xdmac_set_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  407892:	b480      	push	{r7}
  407894:	b083      	sub	sp, #12
  407896:	af00      	add	r7, sp, #0
  407898:	6078      	str	r0, [r7, #4]
  40789a:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GIE = mask;
  40789c:	687b      	ldr	r3, [r7, #4]
  40789e:	683a      	ldr	r2, [r7, #0]
  4078a0:	60da      	str	r2, [r3, #12]
}
  4078a2:	bf00      	nop
  4078a4:	370c      	adds	r7, #12
  4078a6:	46bd      	mov	sp, r7
  4078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4078ac:	4770      	bx	lr

004078ae <hri_xdmac_clear_GIM_reg>:
	((Xdmac *)hw)->XDMAC_GIE = data;
	((Xdmac *)hw)->XDMAC_GID = ~data;
}

static inline void hri_xdmac_clear_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  4078ae:	b480      	push	{r7}
  4078b0:	b083      	sub	sp, #12
  4078b2:	af00      	add	r7, sp, #0
  4078b4:	6078      	str	r0, [r7, #4]
  4078b6:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GID = mask;
  4078b8:	687b      	ldr	r3, [r7, #4]
  4078ba:	683a      	ldr	r2, [r7, #0]
  4078bc:	611a      	str	r2, [r3, #16]
}
  4078be:	bf00      	nop
  4078c0:	370c      	adds	r7, #12
  4078c2:	46bd      	mov	sp, r7
  4078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4078c8:	4770      	bx	lr

004078ca <hri_xdmac_set_GS_reg>:
{
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
  4078ca:	b480      	push	{r7}
  4078cc:	b083      	sub	sp, #12
  4078ce:	af00      	add	r7, sp, #0
  4078d0:	6078      	str	r0, [r7, #4]
  4078d2:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GE = mask;
  4078d4:	687b      	ldr	r3, [r7, #4]
  4078d6:	683a      	ldr	r2, [r7, #0]
  4078d8:	61da      	str	r2, [r3, #28]
}
  4078da:	bf00      	nop
  4078dc:	370c      	adds	r7, #12
  4078de:	46bd      	mov	sp, r7
  4078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4078e4:	4770      	bx	lr

004078e6 <hri_xdmac_read_GIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_gis_reg_t hri_xdmac_read_GIS_reg(const void *const hw)
{
  4078e6:	b480      	push	{r7}
  4078e8:	b083      	sub	sp, #12
  4078ea:	af00      	add	r7, sp, #0
  4078ec:	6078      	str	r0, [r7, #4]
	return ((Xdmac *)hw)->XDMAC_GIS;
  4078ee:	687b      	ldr	r3, [r7, #4]
  4078f0:	699b      	ldr	r3, [r3, #24]
}
  4078f2:	4618      	mov	r0, r3
  4078f4:	370c      	adds	r7, #12
  4078f6:	46bd      	mov	sp, r7
  4078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4078fc:	4770      	bx	lr

004078fe <hri_xdmac_write_GSWR_reg>:
	((Xdmac *)hw)->XDMAC_GRWR = data;
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
  4078fe:	b480      	push	{r7}
  407900:	b083      	sub	sp, #12
  407902:	af00      	add	r7, sp, #0
  407904:	6078      	str	r0, [r7, #4]
  407906:	6039      	str	r1, [r7, #0]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  407908:	687b      	ldr	r3, [r7, #4]
  40790a:	683a      	ldr	r2, [r7, #0]
  40790c:	639a      	str	r2, [r3, #56]	; 0x38
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  40790e:	bf00      	nop
  407910:	370c      	adds	r7, #12
  407912:	46bd      	mov	sp, r7
  407914:	f85d 7b04 	ldr.w	r7, [sp], #4
  407918:	4770      	bx	lr
	...

0040791c <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  40791c:	b580      	push	{r7, lr}
  40791e:	b082      	sub	sp, #8
  407920:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  407922:	2300      	movs	r3, #0
  407924:	71fb      	strb	r3, [r7, #7]
  407926:	e007      	b.n	407938 <_dma_init+0x1c>
		hri_xdmac_read_CIS_reg(XDMAC, i);
  407928:	79fb      	ldrb	r3, [r7, #7]
  40792a:	4619      	mov	r1, r3
  40792c:	4825      	ldr	r0, [pc, #148]	; (4079c4 <_dma_init+0xa8>)
  40792e:	4b26      	ldr	r3, [pc, #152]	; (4079c8 <_dma_init+0xac>)
  407930:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  407932:	79fb      	ldrb	r3, [r7, #7]
  407934:	3301      	adds	r3, #1
  407936:	71fb      	strb	r3, [r7, #7]
  407938:	79fb      	ldrb	r3, [r7, #7]
  40793a:	2b17      	cmp	r3, #23
  40793c:	d9f4      	bls.n	407928 <_dma_init+0xc>
	}
	/* Configuration Registers */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40793e:	2300      	movs	r3, #0
  407940:	71fb      	strb	r3, [r7, #7]
  407942:	e02d      	b.n	4079a0 <_dma_init+0x84>
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
  407944:	79fb      	ldrb	r3, [r7, #7]
  407946:	2200      	movs	r2, #0
  407948:	4619      	mov	r1, r3
  40794a:	481e      	ldr	r0, [pc, #120]	; (4079c4 <_dma_init+0xa8>)
  40794c:	4b1f      	ldr	r3, [pc, #124]	; (4079cc <_dma_init+0xb0>)
  40794e:	4798      	blx	r3
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
  407950:	79fb      	ldrb	r3, [r7, #7]
  407952:	2200      	movs	r2, #0
  407954:	4619      	mov	r1, r3
  407956:	481b      	ldr	r0, [pc, #108]	; (4079c4 <_dma_init+0xa8>)
  407958:	4b1d      	ldr	r3, [pc, #116]	; (4079d0 <_dma_init+0xb4>)
  40795a:	4798      	blx	r3
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
  40795c:	79fb      	ldrb	r3, [r7, #7]
  40795e:	2200      	movs	r2, #0
  407960:	4619      	mov	r1, r3
  407962:	4818      	ldr	r0, [pc, #96]	; (4079c4 <_dma_init+0xa8>)
  407964:	4b1b      	ldr	r3, [pc, #108]	; (4079d4 <_dma_init+0xb8>)
  407966:	4798      	blx	r3
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
  407968:	79fb      	ldrb	r3, [r7, #7]
  40796a:	2200      	movs	r2, #0
  40796c:	4619      	mov	r1, r3
  40796e:	4815      	ldr	r0, [pc, #84]	; (4079c4 <_dma_init+0xa8>)
  407970:	4b19      	ldr	r3, [pc, #100]	; (4079d8 <_dma_init+0xbc>)
  407972:	4798      	blx	r3
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  407974:	79fb      	ldrb	r3, [r7, #7]
  407976:	4a19      	ldr	r2, [pc, #100]	; (4079dc <_dma_init+0xc0>)
  407978:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40797c:	79fb      	ldrb	r3, [r7, #7]
  40797e:	4619      	mov	r1, r3
  407980:	4810      	ldr	r0, [pc, #64]	; (4079c4 <_dma_init+0xa8>)
  407982:	4b17      	ldr	r3, [pc, #92]	; (4079e0 <_dma_init+0xc4>)
  407984:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  407986:	79fb      	ldrb	r3, [r7, #7]
  407988:	4a14      	ldr	r2, [pc, #80]	; (4079dc <_dma_init+0xc0>)
  40798a:	00db      	lsls	r3, r3, #3
  40798c:	4413      	add	r3, r2
  40798e:	685a      	ldr	r2, [r3, #4]
  407990:	79fb      	ldrb	r3, [r7, #7]
  407992:	4619      	mov	r1, r3
  407994:	480b      	ldr	r0, [pc, #44]	; (4079c4 <_dma_init+0xa8>)
  407996:	4b13      	ldr	r3, [pc, #76]	; (4079e4 <_dma_init+0xc8>)
  407998:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40799a:	79fb      	ldrb	r3, [r7, #7]
  40799c:	3301      	adds	r3, #1
  40799e:	71fb      	strb	r3, [r7, #7]
  4079a0:	79fb      	ldrb	r3, [r7, #7]
  4079a2:	2b17      	cmp	r3, #23
  4079a4:	d9ce      	bls.n	407944 <_dma_init+0x28>
	}

	NVIC_DisableIRQ(XDMAC_IRQn);
  4079a6:	203a      	movs	r0, #58	; 0x3a
  4079a8:	4b0f      	ldr	r3, [pc, #60]	; (4079e8 <_dma_init+0xcc>)
  4079aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
  4079ac:	203a      	movs	r0, #58	; 0x3a
  4079ae:	4b0f      	ldr	r3, [pc, #60]	; (4079ec <_dma_init+0xd0>)
  4079b0:	4798      	blx	r3
	NVIC_EnableIRQ(XDMAC_IRQn);
  4079b2:	203a      	movs	r0, #58	; 0x3a
  4079b4:	4b0e      	ldr	r3, [pc, #56]	; (4079f0 <_dma_init+0xd4>)
  4079b6:	4798      	blx	r3

	return ERR_NONE;
  4079b8:	2300      	movs	r3, #0
}
  4079ba:	4618      	mov	r0, r3
  4079bc:	3708      	adds	r7, #8
  4079be:	46bd      	mov	sp, r7
  4079c0:	bd80      	pop	{r7, pc}
  4079c2:	bf00      	nop
  4079c4:	40078000 	.word	0x40078000
  4079c8:	00407601 	.word	0x00407601
  4079cc:	00407675 	.word	0x00407675
  4079d0:	004076c5 	.word	0x004076c5
  4079d4:	00407841 	.word	0x00407841
  4079d8:	00407869 	.word	0x00407869
  4079dc:	0040977c 	.word	0x0040977c
  4079e0:	004077a5 	.word	0x004077a5
  4079e4:	00407819 	.word	0x00407819
  4079e8:	00407531 	.word	0x00407531
  4079ec:	00407575 	.word	0x00407575
  4079f0:	004074f5 	.word	0x004074f5

004079f4 <_dma_set_destination_address>:

int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
  4079f4:	b580      	push	{r7, lr}
  4079f6:	b082      	sub	sp, #8
  4079f8:	af00      	add	r7, sp, #0
  4079fa:	4603      	mov	r3, r0
  4079fc:	6039      	str	r1, [r7, #0]
  4079fe:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);
  407a00:	683a      	ldr	r2, [r7, #0]
  407a02:	79fb      	ldrb	r3, [r7, #7]
  407a04:	4619      	mov	r1, r3
  407a06:	4804      	ldr	r0, [pc, #16]	; (407a18 <_dma_set_destination_address+0x24>)
  407a08:	4b04      	ldr	r3, [pc, #16]	; (407a1c <_dma_set_destination_address+0x28>)
  407a0a:	4798      	blx	r3

	return ERR_NONE;
  407a0c:	2300      	movs	r3, #0
}
  407a0e:	4618      	mov	r0, r3
  407a10:	3708      	adds	r7, #8
  407a12:	46bd      	mov	sp, r7
  407a14:	bd80      	pop	{r7, pc}
  407a16:	bf00      	nop
  407a18:	40078000 	.word	0x40078000
  407a1c:	0040764d 	.word	0x0040764d

00407a20 <_dma_set_source_address>:

int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
  407a20:	b580      	push	{r7, lr}
  407a22:	b082      	sub	sp, #8
  407a24:	af00      	add	r7, sp, #0
  407a26:	4603      	mov	r3, r0
  407a28:	6039      	str	r1, [r7, #0]
  407a2a:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);
  407a2c:	683a      	ldr	r2, [r7, #0]
  407a2e:	79fb      	ldrb	r3, [r7, #7]
  407a30:	4619      	mov	r1, r3
  407a32:	4804      	ldr	r0, [pc, #16]	; (407a44 <_dma_set_source_address+0x24>)
  407a34:	4b04      	ldr	r3, [pc, #16]	; (407a48 <_dma_set_source_address+0x28>)
  407a36:	4798      	blx	r3

	return ERR_NONE;
  407a38:	2300      	movs	r3, #0
}
  407a3a:	4618      	mov	r0, r3
  407a3c:	3708      	adds	r7, #8
  407a3e:	46bd      	mov	sp, r7
  407a40:	bd80      	pop	{r7, pc}
  407a42:	bf00      	nop
  407a44:	40078000 	.word	0x40078000
  407a48:	00407625 	.word	0x00407625

00407a4c <_dma_srcinc_enable>:

int32_t _dma_srcinc_enable(const uint8_t channel, const bool enable)
{
  407a4c:	b580      	push	{r7, lr}
  407a4e:	b082      	sub	sp, #8
  407a50:	af00      	add	r7, sp, #0
  407a52:	4603      	mov	r3, r0
  407a54:	460a      	mov	r2, r1
  407a56:	71fb      	strb	r3, [r7, #7]
  407a58:	4613      	mov	r3, r2
  407a5a:	71bb      	strb	r3, [r7, #6]
	if (!enable && (hri_xdmac_read_CC_DWIDTH_bf(XDMAC, channel) != XDMAC_CC_DWIDTH_WORD_Val)) {
  407a5c:	79bb      	ldrb	r3, [r7, #6]
  407a5e:	f083 0301 	eor.w	r3, r3, #1
  407a62:	b2db      	uxtb	r3, r3
  407a64:	2b00      	cmp	r3, #0
  407a66:	d015      	beq.n	407a94 <_dma_srcinc_enable+0x48>
  407a68:	79fb      	ldrb	r3, [r7, #7]
  407a6a:	4619      	mov	r1, r3
  407a6c:	480f      	ldr	r0, [pc, #60]	; (407aac <_dma_srcinc_enable+0x60>)
  407a6e:	4b10      	ldr	r3, [pc, #64]	; (407ab0 <_dma_srcinc_enable+0x64>)
  407a70:	4798      	blx	r3
  407a72:	4603      	mov	r3, r0
  407a74:	2b02      	cmp	r3, #2
  407a76:	d00d      	beq.n	407a94 <_dma_srcinc_enable+0x48>
		 * are incremented by 8-bit or 16-bit.
		 * Workaround: The user can fix the problem by setting the source addressing
		 * mode to use micro block and data striding with micro block stride set to 0 and
		 * data stride set to -1.
		 */
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, XDMAC_CC_SAM_UBS_DS_AM_Val);
  407a78:	79fb      	ldrb	r3, [r7, #7]
  407a7a:	2203      	movs	r2, #3
  407a7c:	4619      	mov	r1, r3
  407a7e:	480b      	ldr	r0, [pc, #44]	; (407aac <_dma_srcinc_enable+0x60>)
  407a80:	4b0c      	ldr	r3, [pc, #48]	; (407ab4 <_dma_srcinc_enable+0x68>)
  407a82:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_SDS_MSP_bf(XDMAC, channel, (int16_t)(-1));
  407a84:	79fb      	ldrb	r3, [r7, #7]
  407a86:	f04f 32ff 	mov.w	r2, #4294967295
  407a8a:	4619      	mov	r1, r3
  407a8c:	4807      	ldr	r0, [pc, #28]	; (407aac <_dma_srcinc_enable+0x60>)
  407a8e:	4b0a      	ldr	r3, [pc, #40]	; (407ab8 <_dma_srcinc_enable+0x6c>)
  407a90:	4798      	blx	r3
  407a92:	e005      	b.n	407aa0 <_dma_srcinc_enable+0x54>
	} else {
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, enable);
  407a94:	79ba      	ldrb	r2, [r7, #6]
  407a96:	79fb      	ldrb	r3, [r7, #7]
  407a98:	4619      	mov	r1, r3
  407a9a:	4804      	ldr	r0, [pc, #16]	; (407aac <_dma_srcinc_enable+0x60>)
  407a9c:	4b05      	ldr	r3, [pc, #20]	; (407ab4 <_dma_srcinc_enable+0x68>)
  407a9e:	4798      	blx	r3
	}

	return ERR_NONE;
  407aa0:	2300      	movs	r3, #0
}
  407aa2:	4618      	mov	r0, r3
  407aa4:	3708      	adds	r7, #8
  407aa6:	46bd      	mov	sp, r7
  407aa8:	bd80      	pop	{r7, pc}
  407aaa:	bf00      	nop
  407aac:	40078000 	.word	0x40078000
  407ab0:	00407727 	.word	0x00407727
  407ab4:	00407759 	.word	0x00407759
  407ab8:	004077cd 	.word	0x004077cd

00407abc <_dma_set_data_amount>:

	return ERR_NONE;
}

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
  407abc:	b580      	push	{r7, lr}
  407abe:	b084      	sub	sp, #16
  407ac0:	af00      	add	r7, sp, #0
  407ac2:	4603      	mov	r3, r0
  407ac4:	6039      	str	r1, [r7, #0]
  407ac6:	71fb      	strb	r3, [r7, #7]
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
  407ac8:	79fb      	ldrb	r3, [r7, #7]
  407aca:	2203      	movs	r2, #3
  407acc:	4619      	mov	r1, r3
  407ace:	4809      	ldr	r0, [pc, #36]	; (407af4 <_dma_set_data_amount+0x38>)
  407ad0:	4b09      	ldr	r3, [pc, #36]	; (407af8 <_dma_set_data_amount+0x3c>)
  407ad2:	4798      	blx	r3
  407ad4:	4603      	mov	r3, r0
  407ad6:	73fb      	strb	r3, [r7, #15]
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  407ad8:	7bfb      	ldrb	r3, [r7, #15]
  407ada:	683a      	ldr	r2, [r7, #0]
  407adc:	40da      	lsrs	r2, r3
  407ade:	79fb      	ldrb	r3, [r7, #7]
  407ae0:	4619      	mov	r1, r3
  407ae2:	4804      	ldr	r0, [pc, #16]	; (407af4 <_dma_set_data_amount+0x38>)
  407ae4:	4b05      	ldr	r3, [pc, #20]	; (407afc <_dma_set_data_amount+0x40>)
  407ae6:	4798      	blx	r3

	return ERR_NONE;
  407ae8:	2300      	movs	r3, #0
}
  407aea:	4618      	mov	r0, r3
  407aec:	3710      	adds	r7, #16
  407aee:	46bd      	mov	sp, r7
  407af0:	bd80      	pop	{r7, pc}
  407af2:	bf00      	nop
  407af4:	40078000 	.word	0x40078000
  407af8:	004076ed 	.word	0x004076ed
  407afc:	0040769d 	.word	0x0040769d

00407b00 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
  407b00:	b580      	push	{r7, lr}
  407b02:	b082      	sub	sp, #8
  407b04:	af00      	add	r7, sp, #0
  407b06:	4603      	mov	r3, r0
  407b08:	460a      	mov	r2, r1
  407b0a:	71fb      	strb	r3, [r7, #7]
  407b0c:	4613      	mov	r3, r2
  407b0e:	71bb      	strb	r3, [r7, #6]
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  407b10:	79fb      	ldrb	r3, [r7, #7]
  407b12:	2201      	movs	r2, #1
  407b14:	fa02 f303 	lsl.w	r3, r2, r3
  407b18:	4619      	mov	r1, r3
  407b1a:	4809      	ldr	r0, [pc, #36]	; (407b40 <_dma_enable_transaction+0x40>)
  407b1c:	4b09      	ldr	r3, [pc, #36]	; (407b44 <_dma_enable_transaction+0x44>)
  407b1e:	4798      	blx	r3

	if (software_trigger) {
  407b20:	79bb      	ldrb	r3, [r7, #6]
  407b22:	2b00      	cmp	r3, #0
  407b24:	d007      	beq.n	407b36 <_dma_enable_transaction+0x36>
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
  407b26:	79fb      	ldrb	r3, [r7, #7]
  407b28:	2201      	movs	r2, #1
  407b2a:	fa02 f303 	lsl.w	r3, r2, r3
  407b2e:	4619      	mov	r1, r3
  407b30:	4803      	ldr	r0, [pc, #12]	; (407b40 <_dma_enable_transaction+0x40>)
  407b32:	4b05      	ldr	r3, [pc, #20]	; (407b48 <_dma_enable_transaction+0x48>)
  407b34:	4798      	blx	r3
	}

	return ERR_NONE;
  407b36:	2300      	movs	r3, #0
}
  407b38:	4618      	mov	r0, r3
  407b3a:	3708      	adds	r7, #8
  407b3c:	46bd      	mov	sp, r7
  407b3e:	bd80      	pop	{r7, pc}
  407b40:	40078000 	.word	0x40078000
  407b44:	004078cb 	.word	0x004078cb
  407b48:	004078ff 	.word	0x004078ff

00407b4c <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
  407b4c:	b480      	push	{r7}
  407b4e:	b083      	sub	sp, #12
  407b50:	af00      	add	r7, sp, #0
  407b52:	6078      	str	r0, [r7, #4]
  407b54:	460b      	mov	r3, r1
  407b56:	70fb      	strb	r3, [r7, #3]
	*resource = &_resources[channel];
  407b58:	78fa      	ldrb	r2, [r7, #3]
  407b5a:	4613      	mov	r3, r2
  407b5c:	005b      	lsls	r3, r3, #1
  407b5e:	4413      	add	r3, r2
  407b60:	009b      	lsls	r3, r3, #2
  407b62:	4a05      	ldr	r2, [pc, #20]	; (407b78 <_dma_get_channel_resource+0x2c>)
  407b64:	441a      	add	r2, r3
  407b66:	687b      	ldr	r3, [r7, #4]
  407b68:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  407b6a:	2300      	movs	r3, #0
}
  407b6c:	4618      	mov	r0, r3
  407b6e:	370c      	adds	r7, #12
  407b70:	46bd      	mov	sp, r7
  407b72:	f85d 7b04 	ldr.w	r7, [sp], #4
  407b76:	4770      	bx	lr
  407b78:	204016d8 	.word	0x204016d8

00407b7c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
  407b7c:	b580      	push	{r7, lr}
  407b7e:	b082      	sub	sp, #8
  407b80:	af00      	add	r7, sp, #0
  407b82:	4603      	mov	r3, r0
  407b84:	71fb      	strb	r3, [r7, #7]
  407b86:	460b      	mov	r3, r1
  407b88:	71bb      	strb	r3, [r7, #6]
  407b8a:	4613      	mov	r3, r2
  407b8c:	717b      	strb	r3, [r7, #5]
	if (state) {
  407b8e:	797b      	ldrb	r3, [r7, #5]
  407b90:	2b00      	cmp	r3, #0
  407b92:	d01b      	beq.n	407bcc <_dma_set_irq_state+0x50>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  407b94:	79bb      	ldrb	r3, [r7, #6]
  407b96:	2b00      	cmp	r3, #0
  407b98:	d106      	bne.n	407ba8 <_dma_set_irq_state+0x2c>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
  407b9a:	79fb      	ldrb	r3, [r7, #7]
  407b9c:	2201      	movs	r2, #1
  407b9e:	4619      	mov	r1, r3
  407ba0:	481a      	ldr	r0, [pc, #104]	; (407c0c <_dma_set_irq_state+0x90>)
  407ba2:	4b1b      	ldr	r3, [pc, #108]	; (407c10 <_dma_set_irq_state+0x94>)
  407ba4:	4798      	blx	r3
  407ba6:	e008      	b.n	407bba <_dma_set_irq_state+0x3e>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  407ba8:	79bb      	ldrb	r3, [r7, #6]
  407baa:	2b01      	cmp	r3, #1
  407bac:	d105      	bne.n	407bba <_dma_set_irq_state+0x3e>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
  407bae:	79fb      	ldrb	r3, [r7, #7]
  407bb0:	2270      	movs	r2, #112	; 0x70
  407bb2:	4619      	mov	r1, r3
  407bb4:	4815      	ldr	r0, [pc, #84]	; (407c0c <_dma_set_irq_state+0x90>)
  407bb6:	4b16      	ldr	r3, [pc, #88]	; (407c10 <_dma_set_irq_state+0x94>)
  407bb8:	4798      	blx	r3
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  407bba:	79fb      	ldrb	r3, [r7, #7]
  407bbc:	2201      	movs	r2, #1
  407bbe:	fa02 f303 	lsl.w	r3, r2, r3
  407bc2:	4619      	mov	r1, r3
  407bc4:	4811      	ldr	r0, [pc, #68]	; (407c0c <_dma_set_irq_state+0x90>)
  407bc6:	4b13      	ldr	r3, [pc, #76]	; (407c14 <_dma_set_irq_state+0x98>)
  407bc8:	4798      	blx	r3
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
	}
}
  407bca:	e01a      	b.n	407c02 <_dma_set_irq_state+0x86>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  407bcc:	79bb      	ldrb	r3, [r7, #6]
  407bce:	2b00      	cmp	r3, #0
  407bd0:	d106      	bne.n	407be0 <_dma_set_irq_state+0x64>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
  407bd2:	79fb      	ldrb	r3, [r7, #7]
  407bd4:	2201      	movs	r2, #1
  407bd6:	4619      	mov	r1, r3
  407bd8:	480c      	ldr	r0, [pc, #48]	; (407c0c <_dma_set_irq_state+0x90>)
  407bda:	4b0f      	ldr	r3, [pc, #60]	; (407c18 <_dma_set_irq_state+0x9c>)
  407bdc:	4798      	blx	r3
  407bde:	e008      	b.n	407bf2 <_dma_set_irq_state+0x76>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  407be0:	79bb      	ldrb	r3, [r7, #6]
  407be2:	2b01      	cmp	r3, #1
  407be4:	d105      	bne.n	407bf2 <_dma_set_irq_state+0x76>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
  407be6:	79fb      	ldrb	r3, [r7, #7]
  407be8:	2270      	movs	r2, #112	; 0x70
  407bea:	4619      	mov	r1, r3
  407bec:	4807      	ldr	r0, [pc, #28]	; (407c0c <_dma_set_irq_state+0x90>)
  407bee:	4b0a      	ldr	r3, [pc, #40]	; (407c18 <_dma_set_irq_state+0x9c>)
  407bf0:	4798      	blx	r3
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  407bf2:	79fb      	ldrb	r3, [r7, #7]
  407bf4:	2201      	movs	r2, #1
  407bf6:	fa02 f303 	lsl.w	r3, r2, r3
  407bfa:	4619      	mov	r1, r3
  407bfc:	4803      	ldr	r0, [pc, #12]	; (407c0c <_dma_set_irq_state+0x90>)
  407bfe:	4b07      	ldr	r3, [pc, #28]	; (407c1c <_dma_set_irq_state+0xa0>)
  407c00:	4798      	blx	r3
}
  407c02:	bf00      	nop
  407c04:	3708      	adds	r7, #8
  407c06:	46bd      	mov	sp, r7
  407c08:	bd80      	pop	{r7, pc}
  407c0a:	bf00      	nop
  407c0c:	40078000 	.word	0x40078000
  407c10:	004075b1 	.word	0x004075b1
  407c14:	00407893 	.word	0x00407893
  407c18:	004075d9 	.word	0x004075d9
  407c1c:	004078af 	.word	0x004078af

00407c20 <XDMAC_Handler>:

/**
 * \internal XDMAC interrupt handler
 */
void XDMAC_Handler(void)
{
  407c20:	b580      	push	{r7, lr}
  407c22:	b084      	sub	sp, #16
  407c24:	af00      	add	r7, sp, #0
	uint32_t              status;
	struct _dma_resource *tmp_resource;
	int8_t                channel = -1;
  407c26:	23ff      	movs	r3, #255	; 0xff
  407c28:	73fb      	strb	r3, [r7, #15]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);
  407c2a:	4821      	ldr	r0, [pc, #132]	; (407cb0 <XDMAC_Handler+0x90>)
  407c2c:	4b21      	ldr	r3, [pc, #132]	; (407cb4 <XDMAC_Handler+0x94>)
  407c2e:	4798      	blx	r3
  407c30:	60b8      	str	r0, [r7, #8]

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  407c32:	2300      	movs	r3, #0
  407c34:	73bb      	strb	r3, [r7, #14]
  407c36:	e00d      	b.n	407c54 <XDMAC_Handler+0x34>
		if ((pend >> i) & 1) {
  407c38:	7bbb      	ldrb	r3, [r7, #14]
  407c3a:	68ba      	ldr	r2, [r7, #8]
  407c3c:	fa22 f303 	lsr.w	r3, r2, r3
  407c40:	f003 0301 	and.w	r3, r3, #1
  407c44:	2b00      	cmp	r3, #0
  407c46:	d002      	beq.n	407c4e <XDMAC_Handler+0x2e>
			channel = i;
  407c48:	7bbb      	ldrb	r3, [r7, #14]
  407c4a:	73fb      	strb	r3, [r7, #15]
			break;
  407c4c:	e005      	b.n	407c5a <XDMAC_Handler+0x3a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  407c4e:	7bbb      	ldrb	r3, [r7, #14]
  407c50:	3301      	adds	r3, #1
  407c52:	73bb      	strb	r3, [r7, #14]
  407c54:	7bbb      	ldrb	r3, [r7, #14]
  407c56:	2b17      	cmp	r3, #23
  407c58:	d9ee      	bls.n	407c38 <XDMAC_Handler+0x18>
		}
	}

	if (channel < 0) {
  407c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  407c5e:	2b00      	cmp	r3, #0
  407c60:	db22      	blt.n	407ca8 <XDMAC_Handler+0x88>
		return;
	}

	tmp_resource = &_resources[channel];
  407c62:	f997 200f 	ldrsb.w	r2, [r7, #15]
  407c66:	4613      	mov	r3, r2
  407c68:	005b      	lsls	r3, r3, #1
  407c6a:	4413      	add	r3, r2
  407c6c:	009b      	lsls	r3, r3, #2
  407c6e:	4a12      	ldr	r2, [pc, #72]	; (407cb8 <XDMAC_Handler+0x98>)
  407c70:	4413      	add	r3, r2
  407c72:	607b      	str	r3, [r7, #4]
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  407c74:	7bfb      	ldrb	r3, [r7, #15]
  407c76:	4619      	mov	r1, r3
  407c78:	480d      	ldr	r0, [pc, #52]	; (407cb0 <XDMAC_Handler+0x90>)
  407c7a:	4b10      	ldr	r3, [pc, #64]	; (407cbc <XDMAC_Handler+0x9c>)
  407c7c:	4798      	blx	r3
  407c7e:	6038      	str	r0, [r7, #0]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  407c80:	683b      	ldr	r3, [r7, #0]
  407c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407c86:	2b00      	cmp	r3, #0
  407c88:	d004      	beq.n	407c94 <XDMAC_Handler+0x74>
		tmp_resource->dma_cb.error(tmp_resource);
  407c8a:	687b      	ldr	r3, [r7, #4]
  407c8c:	685b      	ldr	r3, [r3, #4]
  407c8e:	6878      	ldr	r0, [r7, #4]
  407c90:	4798      	blx	r3
  407c92:	e00a      	b.n	407caa <XDMAC_Handler+0x8a>
	} else if (status & XDMAC_CIS_BIS) {
  407c94:	683b      	ldr	r3, [r7, #0]
  407c96:	f003 0301 	and.w	r3, r3, #1
  407c9a:	2b00      	cmp	r3, #0
  407c9c:	d005      	beq.n	407caa <XDMAC_Handler+0x8a>
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  407c9e:	687b      	ldr	r3, [r7, #4]
  407ca0:	681b      	ldr	r3, [r3, #0]
  407ca2:	6878      	ldr	r0, [r7, #4]
  407ca4:	4798      	blx	r3
  407ca6:	e000      	b.n	407caa <XDMAC_Handler+0x8a>
		return;
  407ca8:	bf00      	nop
	}
}
  407caa:	3710      	adds	r7, #16
  407cac:	46bd      	mov	sp, r7
  407cae:	bd80      	pop	{r7, pc}
  407cb0:	40078000 	.word	0x40078000
  407cb4:	004078e7 	.word	0x004078e7
  407cb8:	204016d8 	.word	0x204016d8
  407cbc:	00407601 	.word	0x00407601

00407cc0 <hri_pio_set_ODSR_reg>:
{
  407cc0:	b480      	push	{r7}
  407cc2:	b083      	sub	sp, #12
  407cc4:	af00      	add	r7, sp, #0
  407cc6:	6078      	str	r0, [r7, #4]
  407cc8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  407cca:	687b      	ldr	r3, [r7, #4]
  407ccc:	683a      	ldr	r2, [r7, #0]
  407cce:	631a      	str	r2, [r3, #48]	; 0x30
}
  407cd0:	bf00      	nop
  407cd2:	370c      	adds	r7, #12
  407cd4:	46bd      	mov	sp, r7
  407cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  407cda:	4770      	bx	lr

00407cdc <hri_pio_get_ODSR_reg>:
{
  407cdc:	b480      	push	{r7}
  407cde:	b085      	sub	sp, #20
  407ce0:	af00      	add	r7, sp, #0
  407ce2:	6078      	str	r0, [r7, #4]
  407ce4:	6039      	str	r1, [r7, #0]
	tmp = ((Pio *)hw)->PIO_ODSR;
  407ce6:	687b      	ldr	r3, [r7, #4]
  407ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  407cea:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  407cec:	68fa      	ldr	r2, [r7, #12]
  407cee:	683b      	ldr	r3, [r7, #0]
  407cf0:	4013      	ands	r3, r2
  407cf2:	60fb      	str	r3, [r7, #12]
	return tmp;
  407cf4:	68fb      	ldr	r3, [r7, #12]
}
  407cf6:	4618      	mov	r0, r3
  407cf8:	3714      	adds	r7, #20
  407cfa:	46bd      	mov	sp, r7
  407cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d00:	4770      	bx	lr

00407d02 <hri_pio_clear_ODSR_reg>:
{
  407d02:	b480      	push	{r7}
  407d04:	b083      	sub	sp, #12
  407d06:	af00      	add	r7, sp, #0
  407d08:	6078      	str	r0, [r7, #4]
  407d0a:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  407d0c:	687b      	ldr	r3, [r7, #4]
  407d0e:	683a      	ldr	r2, [r7, #0]
  407d10:	635a      	str	r2, [r3, #52]	; 0x34
}
  407d12:	bf00      	nop
  407d14:	370c      	adds	r7, #12
  407d16:	46bd      	mov	sp, r7
  407d18:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d1c:	4770      	bx	lr
	...

00407d20 <port_to_reg>:
{
  407d20:	b480      	push	{r7}
  407d22:	b083      	sub	sp, #12
  407d24:	af00      	add	r7, sp, #0
  407d26:	4603      	mov	r3, r0
  407d28:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  407d2a:	79fb      	ldrb	r3, [r7, #7]
  407d2c:	025b      	lsls	r3, r3, #9
  407d2e:	461a      	mov	r2, r3
  407d30:	4b03      	ldr	r3, [pc, #12]	; (407d40 <port_to_reg+0x20>)
  407d32:	4413      	add	r3, r2
}
  407d34:	4618      	mov	r0, r3
  407d36:	370c      	adds	r7, #12
  407d38:	46bd      	mov	sp, r7
  407d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  407d3e:	4770      	bx	lr
  407d40:	400e0e00 	.word	0x400e0e00

00407d44 <_gpio_toggle_level>:
{
  407d44:	b580      	push	{r7, lr}
  407d46:	b086      	sub	sp, #24
  407d48:	af00      	add	r7, sp, #0
  407d4a:	4603      	mov	r3, r0
  407d4c:	6039      	str	r1, [r7, #0]
  407d4e:	71fb      	strb	r3, [r7, #7]
	void *const hw = port_to_reg(port);
  407d50:	79fb      	ldrb	r3, [r7, #7]
  407d52:	4618      	mov	r0, r3
  407d54:	4b0c      	ldr	r3, [pc, #48]	; (407d88 <_gpio_toggle_level+0x44>)
  407d56:	4798      	blx	r3
  407d58:	6178      	str	r0, [r7, #20]
	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
  407d5a:	6839      	ldr	r1, [r7, #0]
  407d5c:	6978      	ldr	r0, [r7, #20]
  407d5e:	4b0b      	ldr	r3, [pc, #44]	; (407d8c <_gpio_toggle_level+0x48>)
  407d60:	4798      	blx	r3
  407d62:	6138      	str	r0, [r7, #16]
	bits_set   = (~bits_clear) & mask;
  407d64:	693b      	ldr	r3, [r7, #16]
  407d66:	43da      	mvns	r2, r3
  407d68:	683b      	ldr	r3, [r7, #0]
  407d6a:	4013      	ands	r3, r2
  407d6c:	60fb      	str	r3, [r7, #12]
	hri_pio_set_ODSR_reg(hw, bits_set);
  407d6e:	68f9      	ldr	r1, [r7, #12]
  407d70:	6978      	ldr	r0, [r7, #20]
  407d72:	4b07      	ldr	r3, [pc, #28]	; (407d90 <_gpio_toggle_level+0x4c>)
  407d74:	4798      	blx	r3
	hri_pio_clear_ODSR_reg(hw, bits_clear);
  407d76:	6939      	ldr	r1, [r7, #16]
  407d78:	6978      	ldr	r0, [r7, #20]
  407d7a:	4b06      	ldr	r3, [pc, #24]	; (407d94 <_gpio_toggle_level+0x50>)
  407d7c:	4798      	blx	r3
}
  407d7e:	bf00      	nop
  407d80:	3718      	adds	r7, #24
  407d82:	46bd      	mov	sp, r7
  407d84:	bd80      	pop	{r7, pc}
  407d86:	bf00      	nop
  407d88:	00407d21 	.word	0x00407d21
  407d8c:	00407cdd 	.word	0x00407cdd
  407d90:	00407cc1 	.word	0x00407cc1
  407d94:	00407d03 	.word	0x00407d03

00407d98 <gpio_toggle_pin_level>:
{
  407d98:	b580      	push	{r7, lr}
  407d9a:	b082      	sub	sp, #8
  407d9c:	af00      	add	r7, sp, #0
  407d9e:	4603      	mov	r3, r0
  407da0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  407da2:	79fb      	ldrb	r3, [r7, #7]
  407da4:	095b      	lsrs	r3, r3, #5
  407da6:	b2d8      	uxtb	r0, r3
  407da8:	79fb      	ldrb	r3, [r7, #7]
  407daa:	f003 031f 	and.w	r3, r3, #31
  407dae:	2201      	movs	r2, #1
  407db0:	fa02 f303 	lsl.w	r3, r2, r3
  407db4:	4619      	mov	r1, r3
  407db6:	4b03      	ldr	r3, [pc, #12]	; (407dc4 <gpio_toggle_pin_level+0x2c>)
  407db8:	4798      	blx	r3
}
  407dba:	bf00      	nop
  407dbc:	3708      	adds	r7, #8
  407dbe:	46bd      	mov	sp, r7
  407dc0:	bd80      	pop	{r7, pc}
  407dc2:	bf00      	nop
  407dc4:	00407d45 	.word	0x00407d45

00407dc8 <main>:
{
	//glue_i2c0_read();
}

int main(void)
{
  407dc8:	b580      	push	{r7, lr}
  407dca:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  407dcc:	4b09      	ldr	r3, [pc, #36]	; (407df4 <main+0x2c>)
  407dce:	4798      	blx	r3
		SCB_EnableICache();
		SCB_EnableDCache();
	}
	*/
	
	glue_set_peripherals_inited();
  407dd0:	4b09      	ldr	r3, [pc, #36]	; (407df8 <main+0x30>)
  407dd2:	4798      	blx	r3
	
	glue_enforce_driver_init();	
  407dd4:	4b09      	ldr	r3, [pc, #36]	; (407dfc <main+0x34>)
  407dd6:	4798      	blx	r3
	
	glue_init();
  407dd8:	4b09      	ldr	r3, [pc, #36]	; (407e00 <main+0x38>)
  407dda:	4798      	blx	r3
	
	delay_ms(100);
  407ddc:	2064      	movs	r0, #100	; 0x64
  407dde:	4b09      	ldr	r3, [pc, #36]	; (407e04 <main+0x3c>)
  407de0:	4798      	blx	r3
	/* Replace with your application code */
	while (1)
	{
		//AT86_Tick(AT86_INSTANCE0);
		//AT86_Tick(AT86_INSTANCE1);
		cdcd_acm_example();
  407de2:	4b09      	ldr	r3, [pc, #36]	; (407e08 <main+0x40>)
  407de4:	4798      	blx	r3

		gpio_toggle_pin_level(LED0);
  407de6:	2047      	movs	r0, #71	; 0x47
  407de8:	4b08      	ldr	r3, [pc, #32]	; (407e0c <main+0x44>)
  407dea:	4798      	blx	r3
		
		delay_ms(10);
  407dec:	200a      	movs	r0, #10
  407dee:	4b05      	ldr	r3, [pc, #20]	; (407e04 <main+0x3c>)
  407df0:	4798      	blx	r3
		cdcd_acm_example();
  407df2:	e7f6      	b.n	407de2 <main+0x1a>
  407df4:	00400351 	.word	0x00400351
  407df8:	00401229 	.word	0x00401229
  407dfc:	00401241 	.word	0x00401241
  407e00:	004010b1 	.word	0x004010b1
  407e04:	00401479 	.word	0x00401479
  407e08:	00409499 	.word	0x00409499
  407e0c:	00407d99 	.word	0x00407d99

00407e10 <usb_get_u16>:
/** \brief Get a word (calculate by little endian 16-bit data)
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
  407e10:	b480      	push	{r7}
  407e12:	b083      	sub	sp, #12
  407e14:	af00      	add	r7, sp, #0
  407e16:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
  407e18:	687b      	ldr	r3, [r7, #4]
  407e1a:	781b      	ldrb	r3, [r3, #0]
  407e1c:	b29a      	uxth	r2, r3
  407e1e:	687b      	ldr	r3, [r7, #4]
  407e20:	3301      	adds	r3, #1
  407e22:	781b      	ldrb	r3, [r3, #0]
  407e24:	b29b      	uxth	r3, r3
  407e26:	021b      	lsls	r3, r3, #8
  407e28:	b29b      	uxth	r3, r3
  407e2a:	4413      	add	r3, r2
  407e2c:	b29b      	uxth	r3, r3
}
  407e2e:	4618      	mov	r0, r3
  407e30:	370c      	adds	r7, #12
  407e32:	46bd      	mov	sp, r7
  407e34:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e38:	4770      	bx	lr

00407e3a <usb_desc_len>:
/** \brief Get descriptor length
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return descriptor length
 */
static inline uint8_t usb_desc_len(const uint8_t *desc)
{
  407e3a:	b480      	push	{r7}
  407e3c:	b083      	sub	sp, #12
  407e3e:	af00      	add	r7, sp, #0
  407e40:	6078      	str	r0, [r7, #4]
	return desc[0];
  407e42:	687b      	ldr	r3, [r7, #4]
  407e44:	781b      	ldrb	r3, [r3, #0]
}
  407e46:	4618      	mov	r0, r3
  407e48:	370c      	adds	r7, #12
  407e4a:	46bd      	mov	sp, r7
  407e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  407e50:	4770      	bx	lr
	...

00407e54 <usb_desc_next>:
/** \brief Get next USB descriptor
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
  407e54:	b580      	push	{r7, lr}
  407e56:	b082      	sub	sp, #8
  407e58:	af00      	add	r7, sp, #0
  407e5a:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
  407e5c:	6878      	ldr	r0, [r7, #4]
  407e5e:	4b05      	ldr	r3, [pc, #20]	; (407e74 <usb_desc_next+0x20>)
  407e60:	4798      	blx	r3
  407e62:	4603      	mov	r3, r0
  407e64:	461a      	mov	r2, r3
  407e66:	687b      	ldr	r3, [r7, #4]
  407e68:	4413      	add	r3, r2
}
  407e6a:	4618      	mov	r0, r3
  407e6c:	3708      	adds	r7, #8
  407e6e:	46bd      	mov	sp, r7
  407e70:	bd80      	pop	{r7, pc}
  407e72:	bf00      	nop
  407e74:	00407e3b 	.word	0x00407e3b

00407e78 <cdcdf_acm_enable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB interface descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_enable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
  407e78:	b580      	push	{r7, lr}
  407e7a:	b08c      	sub	sp, #48	; 0x30
  407e7c:	af00      	add	r7, sp, #0
  407e7e:	6078      	str	r0, [r7, #4]
  407e80:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
  407e82:	687b      	ldr	r3, [r7, #4]
  407e84:	689b      	ldr	r3, [r3, #8]
  407e86:	623b      	str	r3, [r7, #32]
	usb_ep_desc_t    ep_desc;
	usb_iface_desc_t ifc_desc;
	uint8_t *        ifc, *ep;
	uint8_t          i;

	ifc = desc->sod;
  407e88:	683b      	ldr	r3, [r7, #0]
  407e8a:	681b      	ldr	r3, [r3, #0]
  407e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
  407e8e:	2300      	movs	r3, #0
  407e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407e94:	e08f      	b.n	407fb6 <cdcdf_acm_enable+0x13e>
		if (NULL == ifc) {
  407e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407e98:	2b00      	cmp	r3, #0
  407e9a:	d102      	bne.n	407ea2 <cdcdf_acm_enable+0x2a>
			return ERR_NOT_FOUND;
  407e9c:	f06f 0309 	mvn.w	r3, #9
  407ea0:	e092      	b.n	407fc8 <cdcdf_acm_enable+0x150>
		}

		ifc_desc.bInterfaceNumber = ifc[2];
  407ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407ea4:	789b      	ldrb	r3, [r3, #2]
  407ea6:	73bb      	strb	r3, [r7, #14]
		ifc_desc.bInterfaceClass  = ifc[5];
  407ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  407eaa:	795b      	ldrb	r3, [r3, #5]
  407eac:	747b      	strb	r3, [r7, #17]

		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
  407eae:	7c7b      	ldrb	r3, [r7, #17]
  407eb0:	2b02      	cmp	r3, #2
  407eb2:	d002      	beq.n	407eba <cdcdf_acm_enable+0x42>
  407eb4:	7c7b      	ldrb	r3, [r7, #17]
  407eb6:	2b0a      	cmp	r3, #10
  407eb8:	d121      	bne.n	407efe <cdcdf_acm_enable+0x86>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
  407eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407ebe:	6a3a      	ldr	r2, [r7, #32]
  407ec0:	5cd2      	ldrb	r2, [r2, r3]
  407ec2:	7bbb      	ldrb	r3, [r7, #14]
  407ec4:	429a      	cmp	r2, r3
  407ec6:	d102      	bne.n	407ece <cdcdf_acm_enable+0x56>
				return ERR_ALREADY_INITIALIZED;
  407ec8:	f06f 0311 	mvn.w	r3, #17
  407ecc:	e07c      	b.n	407fc8 <cdcdf_acm_enable+0x150>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
  407ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407ed2:	6a3a      	ldr	r2, [r7, #32]
  407ed4:	5cd3      	ldrb	r3, [r2, r3]
  407ed6:	2bff      	cmp	r3, #255	; 0xff
  407ed8:	d002      	beq.n	407ee0 <cdcdf_acm_enable+0x68>
				return ERR_NO_RESOURCE;
  407eda:	f06f 031b 	mvn.w	r3, #27
  407ede:	e073      	b.n	407fc8 <cdcdf_acm_enable+0x150>
			} else {
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
  407ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407ee4:	7bb9      	ldrb	r1, [r7, #14]
  407ee6:	6a3a      	ldr	r2, [r7, #32]
  407ee8:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
  407eea:	bf00      	nop
		} else { // Not supported by this function driver
			return ERR_NOT_FOUND;
		}

		// Install endpoints
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
  407eec:	683b      	ldr	r3, [r7, #0]
  407eee:	685b      	ldr	r3, [r3, #4]
  407ef0:	2205      	movs	r2, #5
  407ef2:	4619      	mov	r1, r3
  407ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  407ef6:	4b36      	ldr	r3, [pc, #216]	; (407fd0 <cdcdf_acm_enable+0x158>)
  407ef8:	4798      	blx	r3
  407efa:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
  407efc:	e047      	b.n	407f8e <cdcdf_acm_enable+0x116>
			return ERR_NOT_FOUND;
  407efe:	f06f 0309 	mvn.w	r3, #9
  407f02:	e061      	b.n	407fc8 <cdcdf_acm_enable+0x150>
			ep_desc.bEndpointAddress = ep[2];
  407f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f06:	789b      	ldrb	r3, [r3, #2]
  407f08:	76bb      	strb	r3, [r7, #26]
			ep_desc.bmAttributes     = ep[3];
  407f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f0c:	78db      	ldrb	r3, [r3, #3]
  407f0e:	76fb      	strb	r3, [r7, #27]
			ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
  407f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f12:	3304      	adds	r3, #4
  407f14:	4618      	mov	r0, r3
  407f16:	4b2f      	ldr	r3, [pc, #188]	; (407fd4 <cdcdf_acm_enable+0x15c>)
  407f18:	4798      	blx	r3
  407f1a:	4603      	mov	r3, r0
  407f1c:	83bb      	strh	r3, [r7, #28]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
  407f1e:	7ebb      	ldrb	r3, [r7, #26]
  407f20:	7ef9      	ldrb	r1, [r7, #27]
  407f22:	8bba      	ldrh	r2, [r7, #28]
  407f24:	4618      	mov	r0, r3
  407f26:	4b2c      	ldr	r3, [pc, #176]	; (407fd8 <cdcdf_acm_enable+0x160>)
  407f28:	4798      	blx	r3
  407f2a:	4603      	mov	r3, r0
  407f2c:	2b00      	cmp	r3, #0
  407f2e:	d002      	beq.n	407f36 <cdcdf_acm_enable+0xbe>
				return ERR_NOT_INITIALIZED;
  407f30:	f06f 0313 	mvn.w	r3, #19
  407f34:	e048      	b.n	407fc8 <cdcdf_acm_enable+0x150>
			}
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
  407f36:	7ebb      	ldrb	r3, [r7, #26]
  407f38:	b25b      	sxtb	r3, r3
  407f3a:	2b00      	cmp	r3, #0
  407f3c:	da0f      	bge.n	407f5e <cdcdf_acm_enable+0xe6>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
  407f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f42:	7eb9      	ldrb	r1, [r7, #26]
  407f44:	6a3a      	ldr	r2, [r7, #32]
  407f46:	4413      	add	r3, r2
  407f48:	460a      	mov	r2, r1
  407f4a:	709a      	strb	r2, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
  407f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407f50:	6a3a      	ldr	r2, [r7, #32]
  407f52:	4413      	add	r3, r2
  407f54:	789b      	ldrb	r3, [r3, #2]
  407f56:	4618      	mov	r0, r3
  407f58:	4b20      	ldr	r3, [pc, #128]	; (407fdc <cdcdf_acm_enable+0x164>)
  407f5a:	4798      	blx	r3
  407f5c:	e007      	b.n	407f6e <cdcdf_acm_enable+0xf6>
			} else {
				func_data->func_ep_out = ep_desc.bEndpointAddress;
  407f5e:	7eba      	ldrb	r2, [r7, #26]
  407f60:	6a3b      	ldr	r3, [r7, #32]
  407f62:	711a      	strb	r2, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
  407f64:	6a3b      	ldr	r3, [r7, #32]
  407f66:	791b      	ldrb	r3, [r3, #4]
  407f68:	4618      	mov	r0, r3
  407f6a:	4b1c      	ldr	r3, [pc, #112]	; (407fdc <cdcdf_acm_enable+0x164>)
  407f6c:	4798      	blx	r3
			}
			desc->sod = ep;
  407f6e:	683b      	ldr	r3, [r7, #0]
  407f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
  407f72:	601a      	str	r2, [r3, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
  407f74:	683b      	ldr	r3, [r7, #0]
  407f76:	681b      	ldr	r3, [r3, #0]
  407f78:	4618      	mov	r0, r3
  407f7a:	4b19      	ldr	r3, [pc, #100]	; (407fe0 <cdcdf_acm_enable+0x168>)
  407f7c:	4798      	blx	r3
  407f7e:	4602      	mov	r2, r0
  407f80:	683b      	ldr	r3, [r7, #0]
  407f82:	685b      	ldr	r3, [r3, #4]
  407f84:	4619      	mov	r1, r3
  407f86:	4610      	mov	r0, r2
  407f88:	4b16      	ldr	r3, [pc, #88]	; (407fe4 <cdcdf_acm_enable+0x16c>)
  407f8a:	4798      	blx	r3
  407f8c:	62b8      	str	r0, [r7, #40]	; 0x28
		while (NULL != ep) {
  407f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  407f90:	2b00      	cmp	r3, #0
  407f92:	d1b7      	bne.n	407f04 <cdcdf_acm_enable+0x8c>
		}
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
  407f94:	683b      	ldr	r3, [r7, #0]
  407f96:	681b      	ldr	r3, [r3, #0]
  407f98:	4618      	mov	r0, r3
  407f9a:	4b11      	ldr	r3, [pc, #68]	; (407fe0 <cdcdf_acm_enable+0x168>)
  407f9c:	4798      	blx	r3
  407f9e:	683b      	ldr	r3, [r7, #0]
  407fa0:	685b      	ldr	r3, [r3, #4]
  407fa2:	2204      	movs	r2, #4
  407fa4:	4619      	mov	r1, r3
  407fa6:	4b0a      	ldr	r3, [pc, #40]	; (407fd0 <cdcdf_acm_enable+0x158>)
  407fa8:	4798      	blx	r3
  407faa:	62f8      	str	r0, [r7, #44]	; 0x2c
	for (i = 0; i < 2; i++) {
  407fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407fb0:	3301      	adds	r3, #1
  407fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  407fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  407fba:	2b01      	cmp	r3, #1
  407fbc:	f67f af6b 	bls.w	407e96 <cdcdf_acm_enable+0x1e>
	}
	// Installed
	_cdcdf_acm_funcd.enabled = true;
  407fc0:	4b09      	ldr	r3, [pc, #36]	; (407fe8 <cdcdf_acm_enable+0x170>)
  407fc2:	2201      	movs	r2, #1
  407fc4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
  407fc6:	2300      	movs	r3, #0
}
  407fc8:	4618      	mov	r0, r3
  407fca:	3730      	adds	r7, #48	; 0x30
  407fcc:	46bd      	mov	sp, r7
  407fce:	bd80      	pop	{r7, pc}
  407fd0:	00409215 	.word	0x00409215
  407fd4:	00407e11 	.word	0x00407e11
  407fd8:	004023e5 	.word	0x004023e5
  407fdc:	004024d1 	.word	0x004024d1
  407fe0:	00407e55 	.word	0x00407e55
  407fe4:	00409271 	.word	0x00409271
  407fe8:	20401804 	.word	0x20401804

00407fec <cdcdf_acm_disable>:
 * \param[in] drv Pointer to USB device function driver
 * \param[in] desc Pointer to USB device descriptor
 * \return Operation status.
 */
static int32_t cdcdf_acm_disable(struct usbdf_driver *drv, struct usbd_descriptors *desc)
{
  407fec:	b580      	push	{r7, lr}
  407fee:	b088      	sub	sp, #32
  407ff0:	af00      	add	r7, sp, #0
  407ff2:	6078      	str	r0, [r7, #4]
  407ff4:	6039      	str	r1, [r7, #0]
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
  407ff6:	687b      	ldr	r3, [r7, #4]
  407ff8:	689b      	ldr	r3, [r3, #8]
  407ffa:	61bb      	str	r3, [r7, #24]

	usb_iface_desc_t ifc_desc;
	uint8_t          i;

	if (desc) {
  407ffc:	683b      	ldr	r3, [r7, #0]
  407ffe:	2b00      	cmp	r3, #0
  408000:	d00c      	beq.n	40801c <cdcdf_acm_disable+0x30>
		ifc_desc.bInterfaceClass = desc->sod[5];
  408002:	683b      	ldr	r3, [r7, #0]
  408004:	681b      	ldr	r3, [r3, #0]
  408006:	795b      	ldrb	r3, [r3, #5]
  408008:	747b      	strb	r3, [r7, #17]
		// Check interface
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
  40800a:	7c7b      	ldrb	r3, [r7, #17]
  40800c:	2b02      	cmp	r3, #2
  40800e:	d005      	beq.n	40801c <cdcdf_acm_disable+0x30>
  408010:	7c7b      	ldrb	r3, [r7, #17]
  408012:	2b0a      	cmp	r3, #10
  408014:	d002      	beq.n	40801c <cdcdf_acm_disable+0x30>
			return ERR_NOT_FOUND;
  408016:	f06f 0309 	mvn.w	r3, #9
  40801a:	e035      	b.n	408088 <cdcdf_acm_disable+0x9c>
		}
	}

	for (i = 0; i < 2; i++) {
  40801c:	2300      	movs	r3, #0
  40801e:	77fb      	strb	r3, [r7, #31]
  408020:	e01f      	b.n	408062 <cdcdf_acm_disable+0x76>
		if (func_data->func_iface[i] == 0xFF) {
  408022:	7ffb      	ldrb	r3, [r7, #31]
  408024:	69ba      	ldr	r2, [r7, #24]
  408026:	5cd3      	ldrb	r3, [r2, r3]
  408028:	2bff      	cmp	r3, #255	; 0xff
  40802a:	d016      	beq.n	40805a <cdcdf_acm_disable+0x6e>
			continue;
		} else {
			func_data->func_iface[i] = 0xFF;
  40802c:	7ffb      	ldrb	r3, [r7, #31]
  40802e:	69ba      	ldr	r2, [r7, #24]
  408030:	21ff      	movs	r1, #255	; 0xff
  408032:	54d1      	strb	r1, [r2, r3]
			if (func_data->func_ep_in[i] != 0xFF) {
  408034:	7ffb      	ldrb	r3, [r7, #31]
  408036:	69ba      	ldr	r2, [r7, #24]
  408038:	4413      	add	r3, r2
  40803a:	789b      	ldrb	r3, [r3, #2]
  40803c:	2bff      	cmp	r3, #255	; 0xff
  40803e:	d00d      	beq.n	40805c <cdcdf_acm_disable+0x70>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
  408040:	7ffb      	ldrb	r3, [r7, #31]
  408042:	69ba      	ldr	r2, [r7, #24]
  408044:	4413      	add	r3, r2
  408046:	789b      	ldrb	r3, [r3, #2]
  408048:	4618      	mov	r0, r3
  40804a:	4b11      	ldr	r3, [pc, #68]	; (408090 <cdcdf_acm_disable+0xa4>)
  40804c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
  40804e:	7ffb      	ldrb	r3, [r7, #31]
  408050:	69ba      	ldr	r2, [r7, #24]
  408052:	4413      	add	r3, r2
  408054:	22ff      	movs	r2, #255	; 0xff
  408056:	709a      	strb	r2, [r3, #2]
  408058:	e000      	b.n	40805c <cdcdf_acm_disable+0x70>
			continue;
  40805a:	bf00      	nop
	for (i = 0; i < 2; i++) {
  40805c:	7ffb      	ldrb	r3, [r7, #31]
  40805e:	3301      	adds	r3, #1
  408060:	77fb      	strb	r3, [r7, #31]
  408062:	7ffb      	ldrb	r3, [r7, #31]
  408064:	2b01      	cmp	r3, #1
  408066:	d9dc      	bls.n	408022 <cdcdf_acm_disable+0x36>
			}
		}
	}

	if (func_data->func_ep_out != 0xFF) {
  408068:	69bb      	ldr	r3, [r7, #24]
  40806a:	791b      	ldrb	r3, [r3, #4]
  40806c:	2bff      	cmp	r3, #255	; 0xff
  40806e:	d007      	beq.n	408080 <cdcdf_acm_disable+0x94>
		usb_d_ep_deinit(func_data->func_ep_out);
  408070:	69bb      	ldr	r3, [r7, #24]
  408072:	791b      	ldrb	r3, [r3, #4]
  408074:	4618      	mov	r0, r3
  408076:	4b06      	ldr	r3, [pc, #24]	; (408090 <cdcdf_acm_disable+0xa4>)
  408078:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
  40807a:	69bb      	ldr	r3, [r7, #24]
  40807c:	22ff      	movs	r2, #255	; 0xff
  40807e:	711a      	strb	r2, [r3, #4]
	}

	_cdcdf_acm_funcd.enabled = false;
  408080:	4b04      	ldr	r3, [pc, #16]	; (408094 <cdcdf_acm_disable+0xa8>)
  408082:	2200      	movs	r2, #0
  408084:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
  408086:	2300      	movs	r3, #0
}
  408088:	4618      	mov	r0, r3
  40808a:	3720      	adds	r7, #32
  40808c:	46bd      	mov	sp, r7
  40808e:	bd80      	pop	{r7, pc}
  408090:	00402481 	.word	0x00402481
  408094:	20401804 	.word	0x20401804

00408098 <cdcdf_acm_ctrl>:
 * \param[in] ctrl USB device general function control type
 * \param[in] param Parameter pointer
 * \return Operation status.
 */
static int32_t cdcdf_acm_ctrl(struct usbdf_driver *drv, enum usbdf_control ctrl, void *param)
{
  408098:	b580      	push	{r7, lr}
  40809a:	b084      	sub	sp, #16
  40809c:	af00      	add	r7, sp, #0
  40809e:	60f8      	str	r0, [r7, #12]
  4080a0:	460b      	mov	r3, r1
  4080a2:	607a      	str	r2, [r7, #4]
  4080a4:	72fb      	strb	r3, [r7, #11]
	switch (ctrl) {
  4080a6:	7afb      	ldrb	r3, [r7, #11]
  4080a8:	2b01      	cmp	r3, #1
  4080aa:	d009      	beq.n	4080c0 <cdcdf_acm_ctrl+0x28>
  4080ac:	2b02      	cmp	r3, #2
  4080ae:	d00d      	beq.n	4080cc <cdcdf_acm_ctrl+0x34>
  4080b0:	2b00      	cmp	r3, #0
  4080b2:	d10e      	bne.n	4080d2 <cdcdf_acm_ctrl+0x3a>
	case USBDF_ENABLE:
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
  4080b4:	6879      	ldr	r1, [r7, #4]
  4080b6:	68f8      	ldr	r0, [r7, #12]
  4080b8:	4b09      	ldr	r3, [pc, #36]	; (4080e0 <cdcdf_acm_ctrl+0x48>)
  4080ba:	4798      	blx	r3
  4080bc:	4603      	mov	r3, r0
  4080be:	e00a      	b.n	4080d6 <cdcdf_acm_ctrl+0x3e>

	case USBDF_DISABLE:
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
  4080c0:	6879      	ldr	r1, [r7, #4]
  4080c2:	68f8      	ldr	r0, [r7, #12]
  4080c4:	4b07      	ldr	r3, [pc, #28]	; (4080e4 <cdcdf_acm_ctrl+0x4c>)
  4080c6:	4798      	blx	r3
  4080c8:	4603      	mov	r3, r0
  4080ca:	e004      	b.n	4080d6 <cdcdf_acm_ctrl+0x3e>

	case USBDF_GET_IFACE:
		return ERR_UNSUPPORTED_OP;
  4080cc:	f06f 031a 	mvn.w	r3, #26
  4080d0:	e001      	b.n	4080d6 <cdcdf_acm_ctrl+0x3e>

	default:
		return ERR_INVALID_ARG;
  4080d2:	f06f 030c 	mvn.w	r3, #12
	}
}
  4080d6:	4618      	mov	r0, r3
  4080d8:	3710      	adds	r7, #16
  4080da:	46bd      	mov	sp, r7
  4080dc:	bd80      	pop	{r7, pc}
  4080de:	bf00      	nop
  4080e0:	00407e79 	.word	0x00407e79
  4080e4:	00407fed 	.word	0x00407fed

004080e8 <cdcdf_acm_set_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_set_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  4080e8:	b590      	push	{r4, r7, lr}
  4080ea:	b087      	sub	sp, #28
  4080ec:	af00      	add	r7, sp, #0
  4080ee:	4603      	mov	r3, r0
  4080f0:	6039      	str	r1, [r7, #0]
  4080f2:	71fb      	strb	r3, [r7, #7]
  4080f4:	4613      	mov	r3, r2
  4080f6:	71bb      	strb	r3, [r7, #6]
	struct usb_cdc_line_coding line_coding_tmp;
	uint16_t                   len      = req->wLength;
  4080f8:	683b      	ldr	r3, [r7, #0]
  4080fa:	799a      	ldrb	r2, [r3, #6]
  4080fc:	79db      	ldrb	r3, [r3, #7]
  4080fe:	021b      	lsls	r3, r3, #8
  408100:	4313      	orrs	r3, r2
  408102:	82fb      	strh	r3, [r7, #22]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
  408104:	4b2b      	ldr	r3, [pc, #172]	; (4081b4 <cdcdf_acm_set_req+0xcc>)
  408106:	4798      	blx	r3
  408108:	6138      	str	r0, [r7, #16]

	switch (req->bRequest) {
  40810a:	683b      	ldr	r3, [r7, #0]
  40810c:	785b      	ldrb	r3, [r3, #1]
  40810e:	2b20      	cmp	r3, #32
  408110:	d002      	beq.n	408118 <cdcdf_acm_set_req+0x30>
  408112:	2b22      	cmp	r3, #34	; 0x22
  408114:	d034      	beq.n	408180 <cdcdf_acm_set_req+0x98>
  408116:	e046      	b.n	4081a6 <cdcdf_acm_set_req+0xbe>
	case USB_REQ_CDC_SET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
  408118:	8afb      	ldrh	r3, [r7, #22]
  40811a:	2b07      	cmp	r3, #7
  40811c:	d002      	beq.n	408124 <cdcdf_acm_set_req+0x3c>
			return ERR_INVALID_DATA;
  40811e:	f04f 33ff 	mov.w	r3, #4294967295
  408122:	e042      	b.n	4081aa <cdcdf_acm_set_req+0xc2>
		}
		if (USB_SETUP_STAGE == stage) {
  408124:	79bb      	ldrb	r3, [r7, #6]
  408126:	2b00      	cmp	r3, #0
  408128:	d107      	bne.n	40813a <cdcdf_acm_set_req+0x52>
			return usbdc_xfer(ep, ctrl_buf, len, false);
  40812a:	8afa      	ldrh	r2, [r7, #22]
  40812c:	79f8      	ldrb	r0, [r7, #7]
  40812e:	2300      	movs	r3, #0
  408130:	6939      	ldr	r1, [r7, #16]
  408132:	4c21      	ldr	r4, [pc, #132]	; (4081b8 <cdcdf_acm_set_req+0xd0>)
  408134:	47a0      	blx	r4
  408136:	4603      	mov	r3, r0
  408138:	e037      	b.n	4081aa <cdcdf_acm_set_req+0xc2>
		} else {
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
  40813a:	693a      	ldr	r2, [r7, #16]
  40813c:	f107 0308 	add.w	r3, r7, #8
  408140:	6810      	ldr	r0, [r2, #0]
  408142:	6018      	str	r0, [r3, #0]
  408144:	8891      	ldrh	r1, [r2, #4]
  408146:	7992      	ldrb	r2, [r2, #6]
  408148:	8099      	strh	r1, [r3, #4]
  40814a:	719a      	strb	r2, [r3, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
  40814c:	4b1b      	ldr	r3, [pc, #108]	; (4081bc <cdcdf_acm_set_req+0xd4>)
  40814e:	681b      	ldr	r3, [r3, #0]
  408150:	2b00      	cmp	r3, #0
  408152:	d008      	beq.n	408166 <cdcdf_acm_set_req+0x7e>
  408154:	4b19      	ldr	r3, [pc, #100]	; (4081bc <cdcdf_acm_set_req+0xd4>)
  408156:	681b      	ldr	r3, [r3, #0]
  408158:	f107 0208 	add.w	r2, r7, #8
  40815c:	4610      	mov	r0, r2
  40815e:	4798      	blx	r3
  408160:	4603      	mov	r3, r0
  408162:	2b00      	cmp	r3, #0
  408164:	d00a      	beq.n	40817c <cdcdf_acm_set_req+0x94>
				usbd_cdc_line_coding = line_coding_tmp;
  408166:	4b16      	ldr	r3, [pc, #88]	; (4081c0 <cdcdf_acm_set_req+0xd8>)
  408168:	f107 0208 	add.w	r2, r7, #8
  40816c:	e892 0003 	ldmia.w	r2, {r0, r1}
  408170:	6018      	str	r0, [r3, #0]
  408172:	3304      	adds	r3, #4
  408174:	8019      	strh	r1, [r3, #0]
  408176:	3302      	adds	r3, #2
  408178:	0c0a      	lsrs	r2, r1, #16
  40817a:	701a      	strb	r2, [r3, #0]
			}
			return ERR_NONE;
  40817c:	2300      	movs	r3, #0
  40817e:	e014      	b.n	4081aa <cdcdf_acm_set_req+0xc2>
		}
	case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
		usbdc_xfer(0, NULL, 0, 0);
  408180:	2300      	movs	r3, #0
  408182:	2200      	movs	r2, #0
  408184:	2100      	movs	r1, #0
  408186:	2000      	movs	r0, #0
  408188:	4c0b      	ldr	r4, [pc, #44]	; (4081b8 <cdcdf_acm_set_req+0xd0>)
  40818a:	47a0      	blx	r4
		if (NULL != cdcdf_acm_notify_state) {
  40818c:	4b0d      	ldr	r3, [pc, #52]	; (4081c4 <cdcdf_acm_set_req+0xdc>)
  40818e:	681b      	ldr	r3, [r3, #0]
  408190:	2b00      	cmp	r3, #0
  408192:	d006      	beq.n	4081a2 <cdcdf_acm_set_req+0xba>
			cdcdf_acm_notify_state(req->wValue);
  408194:	4b0b      	ldr	r3, [pc, #44]	; (4081c4 <cdcdf_acm_set_req+0xdc>)
  408196:	681b      	ldr	r3, [r3, #0]
  408198:	683a      	ldr	r2, [r7, #0]
  40819a:	8852      	ldrh	r2, [r2, #2]
  40819c:	b292      	uxth	r2, r2
  40819e:	4610      	mov	r0, r2
  4081a0:	4798      	blx	r3
		}
		return ERR_NONE;
  4081a2:	2300      	movs	r3, #0
  4081a4:	e001      	b.n	4081aa <cdcdf_acm_set_req+0xc2>
	default:
		return ERR_INVALID_ARG;
  4081a6:	f06f 030c 	mvn.w	r3, #12
	}
}
  4081aa:	4618      	mov	r0, r3
  4081ac:	371c      	adds	r7, #28
  4081ae:	46bd      	mov	sp, r7
  4081b0:	bd90      	pop	{r4, r7, pc}
  4081b2:	bf00      	nop
  4081b4:	00409111 	.word	0x00409111
  4081b8:	00408f85 	.word	0x00408f85
  4081bc:	20401818 	.word	0x20401818
  4081c0:	2040180c 	.word	0x2040180c
  4081c4:	20401814 	.word	0x20401814

004081c8 <cdcdf_acm_get_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_get_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  4081c8:	b590      	push	{r4, r7, lr}
  4081ca:	b085      	sub	sp, #20
  4081cc:	af00      	add	r7, sp, #0
  4081ce:	4603      	mov	r3, r0
  4081d0:	6039      	str	r1, [r7, #0]
  4081d2:	71fb      	strb	r3, [r7, #7]
  4081d4:	4613      	mov	r3, r2
  4081d6:	71bb      	strb	r3, [r7, #6]
	uint16_t len = req->wLength;
  4081d8:	683b      	ldr	r3, [r7, #0]
  4081da:	799a      	ldrb	r2, [r3, #6]
  4081dc:	79db      	ldrb	r3, [r3, #7]
  4081de:	021b      	lsls	r3, r3, #8
  4081e0:	4313      	orrs	r3, r2
  4081e2:	81fb      	strh	r3, [r7, #14]

	if (USB_DATA_STAGE == stage) {
  4081e4:	79bb      	ldrb	r3, [r7, #6]
  4081e6:	2b01      	cmp	r3, #1
  4081e8:	d101      	bne.n	4081ee <cdcdf_acm_get_req+0x26>
		return ERR_NONE;
  4081ea:	2300      	movs	r3, #0
  4081ec:	e013      	b.n	408216 <cdcdf_acm_get_req+0x4e>
	}

	switch (req->bRequest) {
  4081ee:	683b      	ldr	r3, [r7, #0]
  4081f0:	785b      	ldrb	r3, [r3, #1]
  4081f2:	2b21      	cmp	r3, #33	; 0x21
  4081f4:	d10d      	bne.n	408212 <cdcdf_acm_get_req+0x4a>
	case USB_REQ_CDC_GET_LINE_CODING:
		if (sizeof(struct usb_cdc_line_coding) != len) {
  4081f6:	89fb      	ldrh	r3, [r7, #14]
  4081f8:	2b07      	cmp	r3, #7
  4081fa:	d002      	beq.n	408202 <cdcdf_acm_get_req+0x3a>
			return ERR_INVALID_DATA;
  4081fc:	f04f 33ff 	mov.w	r3, #4294967295
  408200:	e009      	b.n	408216 <cdcdf_acm_get_req+0x4e>
		}
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
  408202:	89fa      	ldrh	r2, [r7, #14]
  408204:	79f8      	ldrb	r0, [r7, #7]
  408206:	2300      	movs	r3, #0
  408208:	4905      	ldr	r1, [pc, #20]	; (408220 <cdcdf_acm_get_req+0x58>)
  40820a:	4c06      	ldr	r4, [pc, #24]	; (408224 <cdcdf_acm_get_req+0x5c>)
  40820c:	47a0      	blx	r4
  40820e:	4603      	mov	r3, r0
  408210:	e001      	b.n	408216 <cdcdf_acm_get_req+0x4e>
	default:
		return ERR_INVALID_ARG;
  408212:	f06f 030c 	mvn.w	r3, #12
	}
}
  408216:	4618      	mov	r0, r3
  408218:	3714      	adds	r7, #20
  40821a:	46bd      	mov	sp, r7
  40821c:	bd90      	pop	{r4, r7, pc}
  40821e:	bf00      	nop
  408220:	2040180c 	.word	0x2040180c
  408224:	00408f85 	.word	0x00408f85

00408228 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  408228:	b580      	push	{r7, lr}
  40822a:	b082      	sub	sp, #8
  40822c:	af00      	add	r7, sp, #0
  40822e:	4603      	mov	r3, r0
  408230:	6039      	str	r1, [r7, #0]
  408232:	71fb      	strb	r3, [r7, #7]
  408234:	4613      	mov	r3, r2
  408236:	71bb      	strb	r3, [r7, #6]
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
  408238:	683b      	ldr	r3, [r7, #0]
  40823a:	781b      	ldrb	r3, [r3, #0]
  40823c:	095b      	lsrs	r3, r3, #5
  40823e:	b2db      	uxtb	r3, r3
  408240:	f003 0303 	and.w	r3, r3, #3
  408244:	2b01      	cmp	r3, #1
  408246:	d002      	beq.n	40824e <cdcdf_acm_req+0x26>
		return ERR_NOT_FOUND;
  408248:	f06f 0309 	mvn.w	r3, #9
  40824c:	e026      	b.n	40829c <cdcdf_acm_req+0x74>
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
  40824e:	683b      	ldr	r3, [r7, #0]
  408250:	889b      	ldrh	r3, [r3, #4]
  408252:	b29a      	uxth	r2, r3
  408254:	4b13      	ldr	r3, [pc, #76]	; (4082a4 <cdcdf_acm_req+0x7c>)
  408256:	781b      	ldrb	r3, [r3, #0]
  408258:	b29b      	uxth	r3, r3
  40825a:	429a      	cmp	r2, r3
  40825c:	d007      	beq.n	40826e <cdcdf_acm_req+0x46>
  40825e:	683b      	ldr	r3, [r7, #0]
  408260:	889b      	ldrh	r3, [r3, #4]
  408262:	b29a      	uxth	r2, r3
  408264:	4b0f      	ldr	r3, [pc, #60]	; (4082a4 <cdcdf_acm_req+0x7c>)
  408266:	785b      	ldrb	r3, [r3, #1]
  408268:	b29b      	uxth	r3, r3
  40826a:	429a      	cmp	r2, r3
  40826c:	d114      	bne.n	408298 <cdcdf_acm_req+0x70>
		if (req->bmRequestType & USB_EP_DIR_IN) {
  40826e:	683b      	ldr	r3, [r7, #0]
  408270:	781b      	ldrb	r3, [r3, #0]
  408272:	b25b      	sxtb	r3, r3
  408274:	2b00      	cmp	r3, #0
  408276:	da07      	bge.n	408288 <cdcdf_acm_req+0x60>
			return cdcdf_acm_get_req(ep, req, stage);
  408278:	79ba      	ldrb	r2, [r7, #6]
  40827a:	79fb      	ldrb	r3, [r7, #7]
  40827c:	6839      	ldr	r1, [r7, #0]
  40827e:	4618      	mov	r0, r3
  408280:	4b09      	ldr	r3, [pc, #36]	; (4082a8 <cdcdf_acm_req+0x80>)
  408282:	4798      	blx	r3
  408284:	4603      	mov	r3, r0
  408286:	e009      	b.n	40829c <cdcdf_acm_req+0x74>
		} else {
			return cdcdf_acm_set_req(ep, req, stage);
  408288:	79ba      	ldrb	r2, [r7, #6]
  40828a:	79fb      	ldrb	r3, [r7, #7]
  40828c:	6839      	ldr	r1, [r7, #0]
  40828e:	4618      	mov	r0, r3
  408290:	4b06      	ldr	r3, [pc, #24]	; (4082ac <cdcdf_acm_req+0x84>)
  408292:	4798      	blx	r3
  408294:	4603      	mov	r3, r0
  408296:	e001      	b.n	40829c <cdcdf_acm_req+0x74>
		}
	} else {
		return ERR_NOT_FOUND;
  408298:	f06f 0309 	mvn.w	r3, #9
	}
}
  40829c:	4618      	mov	r0, r3
  40829e:	3708      	adds	r7, #8
  4082a0:	46bd      	mov	sp, r7
  4082a2:	bd80      	pop	{r7, pc}
  4082a4:	20401804 	.word	0x20401804
  4082a8:	004081c9 	.word	0x004081c9
  4082ac:	004080e9 	.word	0x004080e9

004082b0 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
  4082b0:	b580      	push	{r7, lr}
  4082b2:	af00      	add	r7, sp, #0
	if (usbdc_get_state() > USBD_S_POWER) {
  4082b4:	4b0b      	ldr	r3, [pc, #44]	; (4082e4 <cdcdf_acm_init+0x34>)
  4082b6:	4798      	blx	r3
  4082b8:	4603      	mov	r3, r0
  4082ba:	2b01      	cmp	r3, #1
  4082bc:	d902      	bls.n	4082c4 <cdcdf_acm_init+0x14>
		return ERR_DENIED;
  4082be:	f06f 0310 	mvn.w	r3, #16
  4082c2:	e00d      	b.n	4082e0 <cdcdf_acm_init+0x30>
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
  4082c4:	4b08      	ldr	r3, [pc, #32]	; (4082e8 <cdcdf_acm_init+0x38>)
  4082c6:	4a09      	ldr	r2, [pc, #36]	; (4082ec <cdcdf_acm_init+0x3c>)
  4082c8:	605a      	str	r2, [r3, #4]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
  4082ca:	4b07      	ldr	r3, [pc, #28]	; (4082e8 <cdcdf_acm_init+0x38>)
  4082cc:	4a08      	ldr	r2, [pc, #32]	; (4082f0 <cdcdf_acm_init+0x40>)
  4082ce:	609a      	str	r2, [r3, #8]

	usbdc_register_function(&_cdcdf_acm);
  4082d0:	4805      	ldr	r0, [pc, #20]	; (4082e8 <cdcdf_acm_init+0x38>)
  4082d2:	4b08      	ldr	r3, [pc, #32]	; (4082f4 <cdcdf_acm_init+0x44>)
  4082d4:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
  4082d6:	4908      	ldr	r1, [pc, #32]	; (4082f8 <cdcdf_acm_init+0x48>)
  4082d8:	2001      	movs	r0, #1
  4082da:	4b08      	ldr	r3, [pc, #32]	; (4082fc <cdcdf_acm_init+0x4c>)
  4082dc:	4798      	blx	r3
	return ERR_NONE;
  4082de:	2300      	movs	r3, #0
}
  4082e0:	4618      	mov	r0, r3
  4082e2:	bd80      	pop	{r7, pc}
  4082e4:	00409129 	.word	0x00409129
  4082e8:	204017f8 	.word	0x204017f8
  4082ec:	00408099 	.word	0x00408099
  4082f0:	20401804 	.word	0x20401804
  4082f4:	00409091 	.word	0x00409091
  4082f8:	20400020 	.word	0x20400020
  4082fc:	00408fc1 	.word	0x00408fc1

00408300 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
  408300:	b590      	push	{r4, r7, lr}
  408302:	b083      	sub	sp, #12
  408304:	af00      	add	r7, sp, #0
  408306:	6078      	str	r0, [r7, #4]
  408308:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
  40830a:	4b0b      	ldr	r3, [pc, #44]	; (408338 <cdcdf_acm_read+0x38>)
  40830c:	4798      	blx	r3
  40830e:	4603      	mov	r3, r0
  408310:	f083 0301 	eor.w	r3, r3, #1
  408314:	b2db      	uxtb	r3, r3
  408316:	2b00      	cmp	r3, #0
  408318:	d002      	beq.n	408320 <cdcdf_acm_read+0x20>
		return ERR_DENIED;
  40831a:	f06f 0310 	mvn.w	r3, #16
  40831e:	e007      	b.n	408330 <cdcdf_acm_read+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
  408320:	4b06      	ldr	r3, [pc, #24]	; (40833c <cdcdf_acm_read+0x3c>)
  408322:	7918      	ldrb	r0, [r3, #4]
  408324:	2300      	movs	r3, #0
  408326:	683a      	ldr	r2, [r7, #0]
  408328:	6879      	ldr	r1, [r7, #4]
  40832a:	4c05      	ldr	r4, [pc, #20]	; (408340 <cdcdf_acm_read+0x40>)
  40832c:	47a0      	blx	r4
  40832e:	4603      	mov	r3, r0
}
  408330:	4618      	mov	r0, r3
  408332:	370c      	adds	r7, #12
  408334:	46bd      	mov	sp, r7
  408336:	bd90      	pop	{r4, r7, pc}
  408338:	00408401 	.word	0x00408401
  40833c:	20401804 	.word	0x20401804
  408340:	00408f85 	.word	0x00408f85

00408344 <cdcdf_acm_write>:

/**
 * \brief USB CDC ACM Function Write Data
 */
int32_t cdcdf_acm_write(uint8_t *buf, uint32_t size)
{
  408344:	b590      	push	{r4, r7, lr}
  408346:	b083      	sub	sp, #12
  408348:	af00      	add	r7, sp, #0
  40834a:	6078      	str	r0, [r7, #4]
  40834c:	6039      	str	r1, [r7, #0]
	if (!cdcdf_acm_is_enabled()) {
  40834e:	4b0b      	ldr	r3, [pc, #44]	; (40837c <cdcdf_acm_write+0x38>)
  408350:	4798      	blx	r3
  408352:	4603      	mov	r3, r0
  408354:	f083 0301 	eor.w	r3, r3, #1
  408358:	b2db      	uxtb	r3, r3
  40835a:	2b00      	cmp	r3, #0
  40835c:	d002      	beq.n	408364 <cdcdf_acm_write+0x20>
		return ERR_DENIED;
  40835e:	f06f 0310 	mvn.w	r3, #16
  408362:	e007      	b.n	408374 <cdcdf_acm_write+0x30>
	}
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
  408364:	4b06      	ldr	r3, [pc, #24]	; (408380 <cdcdf_acm_write+0x3c>)
  408366:	78d8      	ldrb	r0, [r3, #3]
  408368:	2301      	movs	r3, #1
  40836a:	683a      	ldr	r2, [r7, #0]
  40836c:	6879      	ldr	r1, [r7, #4]
  40836e:	4c05      	ldr	r4, [pc, #20]	; (408384 <cdcdf_acm_write+0x40>)
  408370:	47a0      	blx	r4
  408372:	4603      	mov	r3, r0
}
  408374:	4618      	mov	r0, r3
  408376:	370c      	adds	r7, #12
  408378:	46bd      	mov	sp, r7
  40837a:	bd90      	pop	{r4, r7, pc}
  40837c:	00408401 	.word	0x00408401
  408380:	20401804 	.word	0x20401804
  408384:	00408f85 	.word	0x00408f85

00408388 <cdcdf_acm_register_callback>:

/**
 * \brief USB CDC ACM Function Register Callback
 */
int32_t cdcdf_acm_register_callback(enum cdcdf_acm_cb_type cb_type, FUNC_PTR func)
{
  408388:	b580      	push	{r7, lr}
  40838a:	b082      	sub	sp, #8
  40838c:	af00      	add	r7, sp, #0
  40838e:	4603      	mov	r3, r0
  408390:	6039      	str	r1, [r7, #0]
  408392:	71fb      	strb	r3, [r7, #7]
	switch (cb_type) {
  408394:	79fb      	ldrb	r3, [r7, #7]
  408396:	2b03      	cmp	r3, #3
  408398:	d822      	bhi.n	4083e0 <cdcdf_acm_register_callback+0x58>
  40839a:	a201      	add	r2, pc, #4	; (adr r2, 4083a0 <cdcdf_acm_register_callback+0x18>)
  40839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4083a0:	004083b1 	.word	0x004083b1
  4083a4:	004083c1 	.word	0x004083c1
  4083a8:	004083d1 	.word	0x004083d1
  4083ac:	004083d9 	.word	0x004083d9
	case CDCDF_ACM_CB_READ:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
  4083b0:	4b0f      	ldr	r3, [pc, #60]	; (4083f0 <cdcdf_acm_register_callback+0x68>)
  4083b2:	791b      	ldrb	r3, [r3, #4]
  4083b4:	683a      	ldr	r2, [r7, #0]
  4083b6:	2102      	movs	r1, #2
  4083b8:	4618      	mov	r0, r3
  4083ba:	4b0e      	ldr	r3, [pc, #56]	; (4083f4 <cdcdf_acm_register_callback+0x6c>)
  4083bc:	4798      	blx	r3
		break;
  4083be:	e012      	b.n	4083e6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_WRITE:
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
  4083c0:	4b0b      	ldr	r3, [pc, #44]	; (4083f0 <cdcdf_acm_register_callback+0x68>)
  4083c2:	78db      	ldrb	r3, [r3, #3]
  4083c4:	683a      	ldr	r2, [r7, #0]
  4083c6:	2102      	movs	r1, #2
  4083c8:	4618      	mov	r0, r3
  4083ca:	4b0a      	ldr	r3, [pc, #40]	; (4083f4 <cdcdf_acm_register_callback+0x6c>)
  4083cc:	4798      	blx	r3
		break;
  4083ce:	e00a      	b.n	4083e6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_LINE_CODING_C:
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
  4083d0:	4a09      	ldr	r2, [pc, #36]	; (4083f8 <cdcdf_acm_register_callback+0x70>)
  4083d2:	683b      	ldr	r3, [r7, #0]
  4083d4:	6013      	str	r3, [r2, #0]
		break;
  4083d6:	e006      	b.n	4083e6 <cdcdf_acm_register_callback+0x5e>
	case CDCDF_ACM_CB_STATE_C:
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
  4083d8:	4a08      	ldr	r2, [pc, #32]	; (4083fc <cdcdf_acm_register_callback+0x74>)
  4083da:	683b      	ldr	r3, [r7, #0]
  4083dc:	6013      	str	r3, [r2, #0]
		break;
  4083de:	e002      	b.n	4083e6 <cdcdf_acm_register_callback+0x5e>
	default:
		return ERR_INVALID_ARG;
  4083e0:	f06f 030c 	mvn.w	r3, #12
  4083e4:	e000      	b.n	4083e8 <cdcdf_acm_register_callback+0x60>
	}
	return ERR_NONE;
  4083e6:	2300      	movs	r3, #0
}
  4083e8:	4618      	mov	r0, r3
  4083ea:	3708      	adds	r7, #8
  4083ec:	46bd      	mov	sp, r7
  4083ee:	bd80      	pop	{r7, pc}
  4083f0:	20401804 	.word	0x20401804
  4083f4:	00402781 	.word	0x00402781
  4083f8:	20401818 	.word	0x20401818
  4083fc:	20401814 	.word	0x20401814

00408400 <cdcdf_acm_is_enabled>:

/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
  408400:	b480      	push	{r7}
  408402:	af00      	add	r7, sp, #0
	return _cdcdf_acm_funcd.enabled;
  408404:	4b03      	ldr	r3, [pc, #12]	; (408414 <cdcdf_acm_is_enabled+0x14>)
  408406:	795b      	ldrb	r3, [r3, #5]
}
  408408:	4618      	mov	r0, r3
  40840a:	46bd      	mov	sp, r7
  40840c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408410:	4770      	bx	lr
  408412:	bf00      	nop
  408414:	20401804 	.word	0x20401804

00408418 <usb_get_u16>:
{
  408418:	b480      	push	{r7}
  40841a:	b083      	sub	sp, #12
  40841c:	af00      	add	r7, sp, #0
  40841e:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
  408420:	687b      	ldr	r3, [r7, #4]
  408422:	781b      	ldrb	r3, [r3, #0]
  408424:	b29a      	uxth	r2, r3
  408426:	687b      	ldr	r3, [r7, #4]
  408428:	3301      	adds	r3, #1
  40842a:	781b      	ldrb	r3, [r3, #0]
  40842c:	b29b      	uxth	r3, r3
  40842e:	021b      	lsls	r3, r3, #8
  408430:	b29b      	uxth	r3, r3
  408432:	4413      	add	r3, r2
  408434:	b29b      	uxth	r3, r3
}
  408436:	4618      	mov	r0, r3
  408438:	370c      	adds	r7, #12
  40843a:	46bd      	mov	sp, r7
  40843c:	f85d 7b04 	ldr.w	r7, [sp], #4
  408440:	4770      	bx	lr

00408442 <usb_desc_len>:
{
  408442:	b480      	push	{r7}
  408444:	b083      	sub	sp, #12
  408446:	af00      	add	r7, sp, #0
  408448:	6078      	str	r0, [r7, #4]
	return desc[0];
  40844a:	687b      	ldr	r3, [r7, #4]
  40844c:	781b      	ldrb	r3, [r3, #0]
}
  40844e:	4618      	mov	r0, r3
  408450:	370c      	adds	r7, #12
  408452:	46bd      	mov	sp, r7
  408454:	f85d 7b04 	ldr.w	r7, [sp], #4
  408458:	4770      	bx	lr
	...

0040845c <usb_desc_next>:
{
  40845c:	b580      	push	{r7, lr}
  40845e:	b082      	sub	sp, #8
  408460:	af00      	add	r7, sp, #0
  408462:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
  408464:	6878      	ldr	r0, [r7, #4]
  408466:	4b05      	ldr	r3, [pc, #20]	; (40847c <usb_desc_next+0x20>)
  408468:	4798      	blx	r3
  40846a:	4603      	mov	r3, r0
  40846c:	461a      	mov	r2, r3
  40846e:	687b      	ldr	r3, [r7, #4]
  408470:	4413      	add	r3, r2
}
  408472:	4618      	mov	r0, r3
  408474:	3708      	adds	r7, #8
  408476:	46bd      	mov	sp, r7
  408478:	bd80      	pop	{r7, pc}
  40847a:	bf00      	nop
  40847c:	00408443 	.word	0x00408443

00408480 <usb_cfg_desc_total_len>:
/** \brief Get wTotalLength of USB Configuration Descriptor
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return 16-bit total length of configuration list
 */
static inline uint16_t usb_cfg_desc_total_len(const uint8_t *cfg_desc)
{
  408480:	b580      	push	{r7, lr}
  408482:	b082      	sub	sp, #8
  408484:	af00      	add	r7, sp, #0
  408486:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
  408488:	687b      	ldr	r3, [r7, #4]
  40848a:	3302      	adds	r3, #2
  40848c:	4618      	mov	r0, r3
  40848e:	4b03      	ldr	r3, [pc, #12]	; (40849c <usb_cfg_desc_total_len+0x1c>)
  408490:	4798      	blx	r3
  408492:	4603      	mov	r3, r0
}
  408494:	4618      	mov	r0, r3
  408496:	3708      	adds	r7, #8
  408498:	46bd      	mov	sp, r7
  40849a:	bd80      	pop	{r7, pc}
  40849c:	00408419 	.word	0x00408419

004084a0 <usbdc_get_dev_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_dev_desc(const uint8_t ep, struct usb_req *req)
{
  4084a0:	b590      	push	{r4, r7, lr}
  4084a2:	b085      	sub	sp, #20
  4084a4:	af00      	add	r7, sp, #0
  4084a6:	4603      	mov	r3, r0
  4084a8:	6039      	str	r1, [r7, #0]
  4084aa:	71fb      	strb	r3, [r7, #7]
	uint8_t *dev_desc = NULL;
  4084ac:	2300      	movs	r3, #0
  4084ae:	60fb      	str	r3, [r7, #12]
	uint16_t length   = req->wLength;
  4084b0:	683b      	ldr	r3, [r7, #0]
  4084b2:	799a      	ldrb	r2, [r3, #6]
  4084b4:	79db      	ldrb	r3, [r3, #7]
  4084b6:	021b      	lsls	r3, r3, #8
  4084b8:	4313      	orrs	r3, r2
  4084ba:	817b      	strh	r3, [r7, #10]
	if (length > 0x12) {
  4084bc:	897b      	ldrh	r3, [r7, #10]
  4084be:	2b12      	cmp	r3, #18
  4084c0:	d901      	bls.n	4084c6 <usbdc_get_dev_desc+0x26>
		length = 0x12;
  4084c2:	2312      	movs	r3, #18
  4084c4:	817b      	strh	r3, [r7, #10]
		dev_desc = usb_find_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, USB_DT_DEVICE);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!dev_desc) {
  4084c6:	68fb      	ldr	r3, [r7, #12]
  4084c8:	2b00      	cmp	r3, #0
  4084ca:	d10a      	bne.n	4084e2 <usbdc_get_dev_desc+0x42>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
  4084cc:	4b0f      	ldr	r3, [pc, #60]	; (40850c <usbdc_get_dev_desc+0x6c>)
  4084ce:	681b      	ldr	r3, [r3, #0]
  4084d0:	6818      	ldr	r0, [r3, #0]
  4084d2:	4b0e      	ldr	r3, [pc, #56]	; (40850c <usbdc_get_dev_desc+0x6c>)
  4084d4:	681b      	ldr	r3, [r3, #0]
  4084d6:	685b      	ldr	r3, [r3, #4]
  4084d8:	2201      	movs	r2, #1
  4084da:	4619      	mov	r1, r3
  4084dc:	4b0c      	ldr	r3, [pc, #48]	; (408510 <usbdc_get_dev_desc+0x70>)
  4084de:	4798      	blx	r3
  4084e0:	60f8      	str	r0, [r7, #12]
	}
	if (!dev_desc) {
  4084e2:	68fb      	ldr	r3, [r7, #12]
  4084e4:	2b00      	cmp	r3, #0
  4084e6:	d101      	bne.n	4084ec <usbdc_get_dev_desc+0x4c>
		return false;
  4084e8:	2300      	movs	r3, #0
  4084ea:	e00b      	b.n	408504 <usbdc_get_dev_desc+0x64>
	}
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
  4084ec:	897a      	ldrh	r2, [r7, #10]
  4084ee:	79f8      	ldrb	r0, [r7, #7]
  4084f0:	2300      	movs	r3, #0
  4084f2:	68f9      	ldr	r1, [r7, #12]
  4084f4:	4c07      	ldr	r4, [pc, #28]	; (408514 <usbdc_get_dev_desc+0x74>)
  4084f6:	47a0      	blx	r4
  4084f8:	4603      	mov	r3, r0
  4084fa:	2b00      	cmp	r3, #0
  4084fc:	d001      	beq.n	408502 <usbdc_get_dev_desc+0x62>
		return false;
  4084fe:	2300      	movs	r3, #0
  408500:	e000      	b.n	408504 <usbdc_get_dev_desc+0x64>
	}
	return true;
  408502:	2301      	movs	r3, #1
}
  408504:	4618      	mov	r0, r3
  408506:	3714      	adds	r7, #20
  408508:	46bd      	mov	sp, r7
  40850a:	bd90      	pop	{r4, r7, pc}
  40850c:	2040181c 	.word	0x2040181c
  408510:	00409215 	.word	0x00409215
  408514:	00408f85 	.word	0x00408f85

00408518 <usbdc_get_cfg_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_cfg_desc(const uint8_t ep, struct usb_req *req)
{
  408518:	b590      	push	{r4, r7, lr}
  40851a:	b087      	sub	sp, #28
  40851c:	af00      	add	r7, sp, #0
  40851e:	4603      	mov	r3, r0
  408520:	6039      	str	r1, [r7, #0]
  408522:	71fb      	strb	r3, [r7, #7]
	uint8_t *cfg_desc = NULL;
  408524:	2300      	movs	r3, #0
  408526:	617b      	str	r3, [r7, #20]
	uint16_t total_len;
	uint16_t length   = req->wLength;
  408528:	683b      	ldr	r3, [r7, #0]
  40852a:	799a      	ldrb	r2, [r3, #6]
  40852c:	79db      	ldrb	r3, [r3, #7]
  40852e:	021b      	lsls	r3, r3, #8
  408530:	4313      	orrs	r3, r2
  408532:	827b      	strh	r3, [r7, #18]
	uint8_t  index    = req->wValue & 0x00FF;
  408534:	683b      	ldr	r3, [r7, #0]
  408536:	885b      	ldrh	r3, [r3, #2]
  408538:	b29b      	uxth	r3, r3
  40853a:	743b      	strb	r3, [r7, #16]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  40853c:	8a7a      	ldrh	r2, [r7, #18]
  40853e:	4b1e      	ldr	r3, [pc, #120]	; (4085b8 <usbdc_get_cfg_desc+0xa0>)
  408540:	7f1b      	ldrb	r3, [r3, #28]
  408542:	3b01      	subs	r3, #1
  408544:	4013      	ands	r3, r2
  408546:	2b00      	cmp	r3, #0
  408548:	bf0c      	ite	eq
  40854a:	2301      	moveq	r3, #1
  40854c:	2300      	movne	r3, #0
  40854e:	747b      	strb	r3, [r7, #17]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, index + 1);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
  408550:	697b      	ldr	r3, [r7, #20]
  408552:	2b00      	cmp	r3, #0
  408554:	d10c      	bne.n	408570 <usbdc_get_cfg_desc+0x58>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
  408556:	4b18      	ldr	r3, [pc, #96]	; (4085b8 <usbdc_get_cfg_desc+0xa0>)
  408558:	681b      	ldr	r3, [r3, #0]
  40855a:	6818      	ldr	r0, [r3, #0]
  40855c:	4b16      	ldr	r3, [pc, #88]	; (4085b8 <usbdc_get_cfg_desc+0xa0>)
  40855e:	681b      	ldr	r3, [r3, #0]
  408560:	6859      	ldr	r1, [r3, #4]
  408562:	7c3b      	ldrb	r3, [r7, #16]
  408564:	3301      	adds	r3, #1
  408566:	b2db      	uxtb	r3, r3
  408568:	461a      	mov	r2, r3
  40856a:	4b14      	ldr	r3, [pc, #80]	; (4085bc <usbdc_get_cfg_desc+0xa4>)
  40856c:	4798      	blx	r3
  40856e:	6178      	str	r0, [r7, #20]
	}
	if (NULL == cfg_desc) {
  408570:	697b      	ldr	r3, [r7, #20]
  408572:	2b00      	cmp	r3, #0
  408574:	d101      	bne.n	40857a <usbdc_get_cfg_desc+0x62>
		return false;
  408576:	2300      	movs	r3, #0
  408578:	e019      	b.n	4085ae <usbdc_get_cfg_desc+0x96>
	}
	total_len = usb_cfg_desc_total_len(cfg_desc);
  40857a:	6978      	ldr	r0, [r7, #20]
  40857c:	4b10      	ldr	r3, [pc, #64]	; (4085c0 <usbdc_get_cfg_desc+0xa8>)
  40857e:	4798      	blx	r3
  408580:	4603      	mov	r3, r0
  408582:	81fb      	strh	r3, [r7, #14]
	if (length <= total_len) {
  408584:	8a7a      	ldrh	r2, [r7, #18]
  408586:	89fb      	ldrh	r3, [r7, #14]
  408588:	429a      	cmp	r2, r3
  40858a:	d802      	bhi.n	408592 <usbdc_get_cfg_desc+0x7a>
		need_zlp = false;
  40858c:	2300      	movs	r3, #0
  40858e:	747b      	strb	r3, [r7, #17]
  408590:	e001      	b.n	408596 <usbdc_get_cfg_desc+0x7e>
	} else {
		length = total_len;
  408592:	89fb      	ldrh	r3, [r7, #14]
  408594:	827b      	strh	r3, [r7, #18]
	}
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
  408596:	8a7a      	ldrh	r2, [r7, #18]
  408598:	7c7b      	ldrb	r3, [r7, #17]
  40859a:	79f8      	ldrb	r0, [r7, #7]
  40859c:	6979      	ldr	r1, [r7, #20]
  40859e:	4c09      	ldr	r4, [pc, #36]	; (4085c4 <usbdc_get_cfg_desc+0xac>)
  4085a0:	47a0      	blx	r4
  4085a2:	4603      	mov	r3, r0
  4085a4:	2b00      	cmp	r3, #0
  4085a6:	d001      	beq.n	4085ac <usbdc_get_cfg_desc+0x94>
		return false;
  4085a8:	2300      	movs	r3, #0
  4085aa:	e000      	b.n	4085ae <usbdc_get_cfg_desc+0x96>
	}
	return true;
  4085ac:	2301      	movs	r3, #1
}
  4085ae:	4618      	mov	r0, r3
  4085b0:	371c      	adds	r7, #28
  4085b2:	46bd      	mov	sp, r7
  4085b4:	bd90      	pop	{r4, r7, pc}
  4085b6:	bf00      	nop
  4085b8:	2040181c 	.word	0x2040181c
  4085bc:	004092d5 	.word	0x004092d5
  4085c0:	00408481 	.word	0x00408481
  4085c4:	00408f85 	.word	0x00408f85

004085c8 <usbdc_get_str_desc>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_str_desc(const uint8_t ep, struct usb_req *req)
{
  4085c8:	b590      	push	{r4, r7, lr}
  4085ca:	b085      	sub	sp, #20
  4085cc:	af00      	add	r7, sp, #0
  4085ce:	4603      	mov	r3, r0
  4085d0:	6039      	str	r1, [r7, #0]
  4085d2:	71fb      	strb	r3, [r7, #7]
	uint8_t *str_desc;
	uint16_t length   = req->wLength;
  4085d4:	683b      	ldr	r3, [r7, #0]
  4085d6:	799a      	ldrb	r2, [r3, #6]
  4085d8:	79db      	ldrb	r3, [r3, #7]
  4085da:	021b      	lsls	r3, r3, #8
  4085dc:	4313      	orrs	r3, r2
  4085de:	81fb      	strh	r3, [r7, #14]
	uint8_t  index    = req->wValue & 0x00FF;
  4085e0:	683b      	ldr	r3, [r7, #0]
  4085e2:	885b      	ldrh	r3, [r3, #2]
  4085e4:	b29b      	uxth	r3, r3
  4085e6:	733b      	strb	r3, [r7, #12]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
  4085e8:	89fa      	ldrh	r2, [r7, #14]
  4085ea:	4b1a      	ldr	r3, [pc, #104]	; (408654 <usbdc_get_str_desc+0x8c>)
  4085ec:	7f1b      	ldrb	r3, [r3, #28]
  4085ee:	3b01      	subs	r3, #1
  4085f0:	4013      	ands	r3, r2
  4085f2:	2b00      	cmp	r3, #0
  4085f4:	bf0c      	ite	eq
  4085f6:	2301      	moveq	r3, #1
  4085f8:	2300      	movne	r3, #0
  4085fa:	737b      	strb	r3, [r7, #13]
	/* All string are in default descriptors block: FS/LS */
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
  4085fc:	4b15      	ldr	r3, [pc, #84]	; (408654 <usbdc_get_str_desc+0x8c>)
  4085fe:	681b      	ldr	r3, [r3, #0]
  408600:	6818      	ldr	r0, [r3, #0]
  408602:	4b14      	ldr	r3, [pc, #80]	; (408654 <usbdc_get_str_desc+0x8c>)
  408604:	681b      	ldr	r3, [r3, #0]
  408606:	685b      	ldr	r3, [r3, #4]
  408608:	7b3a      	ldrb	r2, [r7, #12]
  40860a:	4619      	mov	r1, r3
  40860c:	4b12      	ldr	r3, [pc, #72]	; (408658 <usbdc_get_str_desc+0x90>)
  40860e:	4798      	blx	r3
  408610:	60b8      	str	r0, [r7, #8]
	if (NULL == str_desc) {
  408612:	68bb      	ldr	r3, [r7, #8]
  408614:	2b00      	cmp	r3, #0
  408616:	d101      	bne.n	40861c <usbdc_get_str_desc+0x54>
		return false;
  408618:	2300      	movs	r3, #0
  40861a:	e017      	b.n	40864c <usbdc_get_str_desc+0x84>
	}
	if (length <= str_desc[0]) {
  40861c:	68bb      	ldr	r3, [r7, #8]
  40861e:	781b      	ldrb	r3, [r3, #0]
  408620:	b29b      	uxth	r3, r3
  408622:	89fa      	ldrh	r2, [r7, #14]
  408624:	429a      	cmp	r2, r3
  408626:	d802      	bhi.n	40862e <usbdc_get_str_desc+0x66>
		need_zlp = false;
  408628:	2300      	movs	r3, #0
  40862a:	737b      	strb	r3, [r7, #13]
  40862c:	e002      	b.n	408634 <usbdc_get_str_desc+0x6c>
	} else {
		length = str_desc[0];
  40862e:	68bb      	ldr	r3, [r7, #8]
  408630:	781b      	ldrb	r3, [r3, #0]
  408632:	81fb      	strh	r3, [r7, #14]
	}
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
  408634:	89fa      	ldrh	r2, [r7, #14]
  408636:	7b7b      	ldrb	r3, [r7, #13]
  408638:	79f8      	ldrb	r0, [r7, #7]
  40863a:	68b9      	ldr	r1, [r7, #8]
  40863c:	4c07      	ldr	r4, [pc, #28]	; (40865c <usbdc_get_str_desc+0x94>)
  40863e:	47a0      	blx	r4
  408640:	4603      	mov	r3, r0
  408642:	2b00      	cmp	r3, #0
  408644:	d001      	beq.n	40864a <usbdc_get_str_desc+0x82>
		return false;
  408646:	2300      	movs	r3, #0
  408648:	e000      	b.n	40864c <usbdc_get_str_desc+0x84>
	}
	return true;
  40864a:	2301      	movs	r3, #1
}
  40864c:	4618      	mov	r0, r3
  40864e:	3714      	adds	r7, #20
  408650:	46bd      	mov	sp, r7
  408652:	bd90      	pop	{r4, r7, pc}
  408654:	2040181c 	.word	0x2040181c
  408658:	0040934d 	.word	0x0040934d
  40865c:	00408f85 	.word	0x00408f85

00408660 <usbdc_get_desc_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_desc_req(const uint8_t ep, struct usb_req *req)
{
  408660:	b580      	push	{r7, lr}
  408662:	b084      	sub	sp, #16
  408664:	af00      	add	r7, sp, #0
  408666:	4603      	mov	r3, r0
  408668:	6039      	str	r1, [r7, #0]
  40866a:	71fb      	strb	r3, [r7, #7]
	uint8_t type = (uint8_t)(req->wValue >> 8);
  40866c:	683b      	ldr	r3, [r7, #0]
  40866e:	885b      	ldrh	r3, [r3, #2]
  408670:	b29b      	uxth	r3, r3
  408672:	0a1b      	lsrs	r3, r3, #8
  408674:	b29b      	uxth	r3, r3
  408676:	73fb      	strb	r3, [r7, #15]
	switch (type) {
  408678:	7bfb      	ldrb	r3, [r7, #15]
  40867a:	2b02      	cmp	r3, #2
  40867c:	d00d      	beq.n	40869a <usbdc_get_desc_req+0x3a>
  40867e:	2b03      	cmp	r3, #3
  408680:	d012      	beq.n	4086a8 <usbdc_get_desc_req+0x48>
  408682:	2b01      	cmp	r3, #1
  408684:	d002      	beq.n	40868c <usbdc_get_desc_req+0x2c>
		return usbdc_get_othspdcfg_desc(ep, req);
#endif
	case USB_DT_STRING:
		return usbdc_get_str_desc(ep, req);
	default:
		break;
  408686:	bf00      	nop
	}
	return false;
  408688:	2300      	movs	r3, #0
  40868a:	e013      	b.n	4086b4 <usbdc_get_desc_req+0x54>
		return usbdc_get_dev_desc(ep, req);
  40868c:	79fb      	ldrb	r3, [r7, #7]
  40868e:	6839      	ldr	r1, [r7, #0]
  408690:	4618      	mov	r0, r3
  408692:	4b0a      	ldr	r3, [pc, #40]	; (4086bc <usbdc_get_desc_req+0x5c>)
  408694:	4798      	blx	r3
  408696:	4603      	mov	r3, r0
  408698:	e00c      	b.n	4086b4 <usbdc_get_desc_req+0x54>
		return usbdc_get_cfg_desc(ep, req);
  40869a:	79fb      	ldrb	r3, [r7, #7]
  40869c:	6839      	ldr	r1, [r7, #0]
  40869e:	4618      	mov	r0, r3
  4086a0:	4b07      	ldr	r3, [pc, #28]	; (4086c0 <usbdc_get_desc_req+0x60>)
  4086a2:	4798      	blx	r3
  4086a4:	4603      	mov	r3, r0
  4086a6:	e005      	b.n	4086b4 <usbdc_get_desc_req+0x54>
		return usbdc_get_str_desc(ep, req);
  4086a8:	79fb      	ldrb	r3, [r7, #7]
  4086aa:	6839      	ldr	r1, [r7, #0]
  4086ac:	4618      	mov	r0, r3
  4086ae:	4b05      	ldr	r3, [pc, #20]	; (4086c4 <usbdc_get_desc_req+0x64>)
  4086b0:	4798      	blx	r3
  4086b2:	4603      	mov	r3, r0
}
  4086b4:	4618      	mov	r0, r3
  4086b6:	3710      	adds	r7, #16
  4086b8:	46bd      	mov	sp, r7
  4086ba:	bd80      	pop	{r7, pc}
  4086bc:	004084a1 	.word	0x004084a1
  4086c0:	00408519 	.word	0x00408519
  4086c4:	004085c9 	.word	0x004085c9

004086c8 <usbdc_get_status_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_status_req(const uint8_t ep, const struct usb_req *req)
{
  4086c8:	b590      	push	{r4, r7, lr}
  4086ca:	b085      	sub	sp, #20
  4086cc:	af00      	add	r7, sp, #0
  4086ce:	4603      	mov	r3, r0
  4086d0:	6039      	str	r1, [r7, #0]
  4086d2:	71fb      	strb	r3, [r7, #7]
	int32_t st;
	(void)ep;

	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  4086d4:	683b      	ldr	r3, [r7, #0]
  4086d6:	781b      	ldrb	r3, [r3, #0]
  4086d8:	f003 031f 	and.w	r3, r3, #31
  4086dc:	2b00      	cmp	r3, #0
  4086de:	db1b      	blt.n	408718 <usbdc_get_status_req+0x50>
  4086e0:	2b01      	cmp	r3, #1
  4086e2:	dd02      	ble.n	4086ea <usbdc_get_status_req+0x22>
  4086e4:	2b02      	cmp	r3, #2
  4086e6:	d003      	beq.n	4086f0 <usbdc_get_status_req+0x28>
  4086e8:	e016      	b.n	408718 <usbdc_get_status_req+0x50>
	case USB_REQT_RECIP_DEVICE:
	case USB_REQT_RECIP_INTERFACE:
		st = 0;
  4086ea:	2300      	movs	r3, #0
  4086ec:	60fb      	str	r3, [r7, #12]
		break;
  4086ee:	e015      	b.n	40871c <usbdc_get_status_req+0x54>
	case USB_REQT_RECIP_ENDPOINT:
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
  4086f0:	683b      	ldr	r3, [r7, #0]
  4086f2:	889b      	ldrh	r3, [r3, #4]
  4086f4:	b29b      	uxth	r3, r3
  4086f6:	b2db      	uxtb	r3, r3
  4086f8:	2102      	movs	r1, #2
  4086fa:	4618      	mov	r0, r3
  4086fc:	4b0f      	ldr	r3, [pc, #60]	; (40873c <usbdc_get_status_req+0x74>)
  4086fe:	4798      	blx	r3
  408700:	4603      	mov	r3, r0
  408702:	60fb      	str	r3, [r7, #12]
		if (st < 0) {
  408704:	68fb      	ldr	r3, [r7, #12]
  408706:	2b00      	cmp	r3, #0
  408708:	da01      	bge.n	40870e <usbdc_get_status_req+0x46>
			return false;
  40870a:	2300      	movs	r3, #0
  40870c:	e012      	b.n	408734 <usbdc_get_status_req+0x6c>
		}
		st = st & 0x1;
  40870e:	68fb      	ldr	r3, [r7, #12]
  408710:	f003 0301 	and.w	r3, r3, #1
  408714:	60fb      	str	r3, [r7, #12]
		break;
  408716:	e001      	b.n	40871c <usbdc_get_status_req+0x54>
	default:
		return false;
  408718:	2300      	movs	r3, #0
  40871a:	e00b      	b.n	408734 <usbdc_get_status_req+0x6c>
	}
	memcpy(usbdc.ctrl_buf, &st, 2);
  40871c:	4b08      	ldr	r3, [pc, #32]	; (408740 <usbdc_get_status_req+0x78>)
  40871e:	695b      	ldr	r3, [r3, #20]
  408720:	89ba      	ldrh	r2, [r7, #12]
  408722:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
  408724:	4b06      	ldr	r3, [pc, #24]	; (408740 <usbdc_get_status_req+0x78>)
  408726:	6959      	ldr	r1, [r3, #20]
  408728:	79f8      	ldrb	r0, [r7, #7]
  40872a:	2300      	movs	r3, #0
  40872c:	2202      	movs	r2, #2
  40872e:	4c05      	ldr	r4, [pc, #20]	; (408744 <usbdc_get_status_req+0x7c>)
  408730:	47a0      	blx	r4
	return true;
  408732:	2301      	movs	r3, #1
}
  408734:	4618      	mov	r0, r3
  408736:	3714      	adds	r7, #20
  408738:	46bd      	mov	sp, r7
  40873a:	bd90      	pop	{r4, r7, pc}
  40873c:	0040272d 	.word	0x0040272d
  408740:	2040181c 	.word	0x2040181c
  408744:	00408f85 	.word	0x00408f85

00408748 <usbdc_get_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_interface(struct usb_req *req)
{
  408748:	b590      	push	{r4, r7, lr}
  40874a:	b085      	sub	sp, #20
  40874c:	af00      	add	r7, sp, #0
  40874e:	6078      	str	r0, [r7, #4]
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  408750:	4b1f      	ldr	r3, [pc, #124]	; (4087d0 <usbdc_get_interface+0x88>)
  408752:	691b      	ldr	r3, [r3, #16]
  408754:	60fb      	str	r3, [r7, #12]
	int32_t              rc;

	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
  408756:	4b1e      	ldr	r3, [pc, #120]	; (4087d0 <usbdc_get_interface+0x88>)
  408758:	7f5b      	ldrb	r3, [r3, #29]
  40875a:	461a      	mov	r2, r3
  40875c:	687b      	ldr	r3, [r7, #4]
  40875e:	889b      	ldrh	r3, [r3, #4]
  408760:	b29b      	uxth	r3, r3
  408762:	fa42 f303 	asr.w	r3, r2, r3
  408766:	f003 0301 	and.w	r3, r3, #1
  40876a:	2b00      	cmp	r3, #0
  40876c:	d128      	bne.n	4087c0 <usbdc_get_interface+0x78>
		/* Return 0 if alternate is not used */
		usbdc.ctrl_buf[0] = 0;
  40876e:	4b18      	ldr	r3, [pc, #96]	; (4087d0 <usbdc_get_interface+0x88>)
  408770:	695b      	ldr	r3, [r3, #20]
  408772:	2200      	movs	r2, #0
  408774:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
  408776:	4b16      	ldr	r3, [pc, #88]	; (4087d0 <usbdc_get_interface+0x88>)
  408778:	6959      	ldr	r1, [r3, #20]
  40877a:	2300      	movs	r3, #0
  40877c:	2201      	movs	r2, #1
  40877e:	2000      	movs	r0, #0
  408780:	4c14      	ldr	r4, [pc, #80]	; (4087d4 <usbdc_get_interface+0x8c>)
  408782:	47a0      	blx	r4
		return true;
  408784:	2301      	movs	r3, #1
  408786:	e01f      	b.n	4087c8 <usbdc_get_interface+0x80>
	}
	/* Check function drivers only if alternate is used */
	while (NULL != func) {
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
  408788:	68fb      	ldr	r3, [r7, #12]
  40878a:	685b      	ldr	r3, [r3, #4]
  40878c:	687a      	ldr	r2, [r7, #4]
  40878e:	2102      	movs	r1, #2
  408790:	68f8      	ldr	r0, [r7, #12]
  408792:	4798      	blx	r3
  408794:	60b8      	str	r0, [r7, #8]
  408796:	68bb      	ldr	r3, [r7, #8]
  408798:	2b00      	cmp	r3, #0
  40879a:	da03      	bge.n	4087a4 <usbdc_get_interface+0x5c>
			func = func->next;
  40879c:	68fb      	ldr	r3, [r7, #12]
  40879e:	681b      	ldr	r3, [r3, #0]
  4087a0:	60fb      	str	r3, [r7, #12]
  4087a2:	e00d      	b.n	4087c0 <usbdc_get_interface+0x78>
		} else {
			usbdc.ctrl_buf[0] = (uint8_t)rc;
  4087a4:	4b0a      	ldr	r3, [pc, #40]	; (4087d0 <usbdc_get_interface+0x88>)
  4087a6:	695b      	ldr	r3, [r3, #20]
  4087a8:	68ba      	ldr	r2, [r7, #8]
  4087aa:	b2d2      	uxtb	r2, r2
  4087ac:	701a      	strb	r2, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
  4087ae:	4b08      	ldr	r3, [pc, #32]	; (4087d0 <usbdc_get_interface+0x88>)
  4087b0:	6959      	ldr	r1, [r3, #20]
  4087b2:	2300      	movs	r3, #0
  4087b4:	2201      	movs	r2, #1
  4087b6:	2000      	movs	r0, #0
  4087b8:	4c06      	ldr	r4, [pc, #24]	; (4087d4 <usbdc_get_interface+0x8c>)
  4087ba:	47a0      	blx	r4
			return true;
  4087bc:	2301      	movs	r3, #1
  4087be:	e003      	b.n	4087c8 <usbdc_get_interface+0x80>
	while (NULL != func) {
  4087c0:	68fb      	ldr	r3, [r7, #12]
  4087c2:	2b00      	cmp	r3, #0
  4087c4:	d1e0      	bne.n	408788 <usbdc_get_interface+0x40>
		}
	}
	return false;
  4087c6:	2300      	movs	r3, #0
}
  4087c8:	4618      	mov	r0, r3
  4087ca:	3714      	adds	r7, #20
  4087cc:	46bd      	mov	sp, r7
  4087ce:	bd90      	pop	{r4, r7, pc}
  4087d0:	2040181c 	.word	0x2040181c
  4087d4:	00408f85 	.word	0x00408f85

004087d8 <usbdc_get_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_get_req(const uint8_t ep, struct usb_req *req)
{
  4087d8:	b590      	push	{r4, r7, lr}
  4087da:	b083      	sub	sp, #12
  4087dc:	af00      	add	r7, sp, #0
  4087de:	4603      	mov	r3, r0
  4087e0:	6039      	str	r1, [r7, #0]
  4087e2:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
  4087e4:	683b      	ldr	r3, [r7, #0]
  4087e6:	785b      	ldrb	r3, [r3, #1]
  4087e8:	2b0a      	cmp	r3, #10
  4087ea:	d83a      	bhi.n	408862 <usbdc_get_req+0x8a>
  4087ec:	a201      	add	r2, pc, #4	; (adr r2, 4087f4 <usbdc_get_req+0x1c>)
  4087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4087f2:	bf00      	nop
  4087f4:	0040884b 	.word	0x0040884b
  4087f8:	00408863 	.word	0x00408863
  4087fc:	00408863 	.word	0x00408863
  408800:	00408863 	.word	0x00408863
  408804:	00408863 	.word	0x00408863
  408808:	00408863 	.word	0x00408863
  40880c:	00408821 	.word	0x00408821
  408810:	00408863 	.word	0x00408863
  408814:	0040882f 	.word	0x0040882f
  408818:	00408863 	.word	0x00408863
  40881c:	00408859 	.word	0x00408859
	case USB_REQ_GET_DESC:
		return usbdc_get_desc_req(ep, req);
  408820:	79fb      	ldrb	r3, [r7, #7]
  408822:	6839      	ldr	r1, [r7, #0]
  408824:	4618      	mov	r0, r3
  408826:	4b11      	ldr	r3, [pc, #68]	; (40886c <usbdc_get_req+0x94>)
  408828:	4798      	blx	r3
  40882a:	4603      	mov	r3, r0
  40882c:	e01a      	b.n	408864 <usbdc_get_req+0x8c>
	case USB_REQ_GET_CONFIG:
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
  40882e:	4b10      	ldr	r3, [pc, #64]	; (408870 <usbdc_get_req+0x98>)
  408830:	695b      	ldr	r3, [r3, #20]
  408832:	4a0f      	ldr	r2, [pc, #60]	; (408870 <usbdc_get_req+0x98>)
  408834:	7ed2      	ldrb	r2, [r2, #27]
  408836:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
  408838:	4b0d      	ldr	r3, [pc, #52]	; (408870 <usbdc_get_req+0x98>)
  40883a:	6959      	ldr	r1, [r3, #20]
  40883c:	79f8      	ldrb	r0, [r7, #7]
  40883e:	2300      	movs	r3, #0
  408840:	2201      	movs	r2, #1
  408842:	4c0c      	ldr	r4, [pc, #48]	; (408874 <usbdc_get_req+0x9c>)
  408844:	47a0      	blx	r4
		return true;
  408846:	2301      	movs	r3, #1
  408848:	e00c      	b.n	408864 <usbdc_get_req+0x8c>
	case USB_REQ_GET_STATUS:
		return usbdc_get_status_req(ep, req);
  40884a:	79fb      	ldrb	r3, [r7, #7]
  40884c:	6839      	ldr	r1, [r7, #0]
  40884e:	4618      	mov	r0, r3
  408850:	4b09      	ldr	r3, [pc, #36]	; (408878 <usbdc_get_req+0xa0>)
  408852:	4798      	blx	r3
  408854:	4603      	mov	r3, r0
  408856:	e005      	b.n	408864 <usbdc_get_req+0x8c>
	case USB_REQ_GET_INTERFACE:
		return usbdc_get_interface(req);
  408858:	6838      	ldr	r0, [r7, #0]
  40885a:	4b08      	ldr	r3, [pc, #32]	; (40887c <usbdc_get_req+0xa4>)
  40885c:	4798      	blx	r3
  40885e:	4603      	mov	r3, r0
  408860:	e000      	b.n	408864 <usbdc_get_req+0x8c>
	default:
		return false;
  408862:	2300      	movs	r3, #0
	}
}
  408864:	4618      	mov	r0, r3
  408866:	370c      	adds	r7, #12
  408868:	46bd      	mov	sp, r7
  40886a:	bd90      	pop	{r4, r7, pc}
  40886c:	00408661 	.word	0x00408661
  408870:	2040181c 	.word	0x2040181c
  408874:	00408f85 	.word	0x00408f85
  408878:	004086c9 	.word	0x004086c9
  40887c:	00408749 	.word	0x00408749

00408880 <usbdc_clear_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_clear_ftr_req(const uint8_t ep, const struct usb_req *req)
{
  408880:	b590      	push	{r4, r7, lr}
  408882:	b083      	sub	sp, #12
  408884:	af00      	add	r7, sp, #0
  408886:	4603      	mov	r3, r0
  408888:	6039      	str	r1, [r7, #0]
  40888a:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  40888c:	683b      	ldr	r3, [r7, #0]
  40888e:	781b      	ldrb	r3, [r3, #0]
  408890:	f003 031f 	and.w	r3, r3, #31
  408894:	2b02      	cmp	r3, #2
  408896:	d116      	bne.n	4088c6 <usbdc_clear_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
  408898:	683b      	ldr	r3, [r7, #0]
  40889a:	88db      	ldrh	r3, [r3, #6]
  40889c:	b29b      	uxth	r3, r3
  40889e:	2b00      	cmp	r3, #0
  4088a0:	d001      	beq.n	4088a6 <usbdc_clear_ftr_req+0x26>
			return false;
  4088a2:	2300      	movs	r3, #0
  4088a4:	e010      	b.n	4088c8 <usbdc_clear_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
  4088a6:	683b      	ldr	r3, [r7, #0]
  4088a8:	889b      	ldrh	r3, [r3, #4]
  4088aa:	b29b      	uxth	r3, r3
  4088ac:	b2db      	uxtb	r3, r3
  4088ae:	2100      	movs	r1, #0
  4088b0:	4618      	mov	r0, r3
  4088b2:	4b07      	ldr	r3, [pc, #28]	; (4088d0 <usbdc_clear_ftr_req+0x50>)
  4088b4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
  4088b6:	79f8      	ldrb	r0, [r7, #7]
  4088b8:	2301      	movs	r3, #1
  4088ba:	2200      	movs	r2, #0
  4088bc:	2100      	movs	r1, #0
  4088be:	4c05      	ldr	r4, [pc, #20]	; (4088d4 <usbdc_clear_ftr_req+0x54>)
  4088c0:	47a0      	blx	r4
		return true;
  4088c2:	2301      	movs	r3, #1
  4088c4:	e000      	b.n	4088c8 <usbdc_clear_ftr_req+0x48>
	default:
		return false;
  4088c6:	2300      	movs	r3, #0
	}
}
  4088c8:	4618      	mov	r0, r3
  4088ca:	370c      	adds	r7, #12
  4088cc:	46bd      	mov	sp, r7
  4088ce:	bd90      	pop	{r4, r7, pc}
  4088d0:	0040272d 	.word	0x0040272d
  4088d4:	00408f85 	.word	0x00408f85

004088d8 <usbdc_set_ftr_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_ftr_req(const uint8_t ep, const struct usb_req *req)
{
  4088d8:	b590      	push	{r4, r7, lr}
  4088da:	b083      	sub	sp, #12
  4088dc:	af00      	add	r7, sp, #0
  4088de:	4603      	mov	r3, r0
  4088e0:	6039      	str	r1, [r7, #0]
  4088e2:	71fb      	strb	r3, [r7, #7]
	(void)ep;
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
  4088e4:	683b      	ldr	r3, [r7, #0]
  4088e6:	781b      	ldrb	r3, [r3, #0]
  4088e8:	f003 031f 	and.w	r3, r3, #31
  4088ec:	2b02      	cmp	r3, #2
  4088ee:	d116      	bne.n	40891e <usbdc_set_ftr_req+0x46>
	case USB_REQT_RECIP_ENDPOINT:
		if (req->wLength != 0) {
  4088f0:	683b      	ldr	r3, [r7, #0]
  4088f2:	88db      	ldrh	r3, [r3, #6]
  4088f4:	b29b      	uxth	r3, r3
  4088f6:	2b00      	cmp	r3, #0
  4088f8:	d001      	beq.n	4088fe <usbdc_set_ftr_req+0x26>
			return false;
  4088fa:	2300      	movs	r3, #0
  4088fc:	e010      	b.n	408920 <usbdc_set_ftr_req+0x48>
		}
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
  4088fe:	683b      	ldr	r3, [r7, #0]
  408900:	889b      	ldrh	r3, [r3, #4]
  408902:	b29b      	uxth	r3, r3
  408904:	b2db      	uxtb	r3, r3
  408906:	2101      	movs	r1, #1
  408908:	4618      	mov	r0, r3
  40890a:	4b07      	ldr	r3, [pc, #28]	; (408928 <usbdc_set_ftr_req+0x50>)
  40890c:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
  40890e:	79f8      	ldrb	r0, [r7, #7]
  408910:	2301      	movs	r3, #1
  408912:	2200      	movs	r2, #0
  408914:	2100      	movs	r1, #0
  408916:	4c05      	ldr	r4, [pc, #20]	; (40892c <usbdc_set_ftr_req+0x54>)
  408918:	47a0      	blx	r4
		return true;
  40891a:	2301      	movs	r3, #1
  40891c:	e000      	b.n	408920 <usbdc_set_ftr_req+0x48>
	default:
		return false;
  40891e:	2300      	movs	r3, #0
	}
}
  408920:	4618      	mov	r0, r3
  408922:	370c      	adds	r7, #12
  408924:	46bd      	mov	sp, r7
  408926:	bd90      	pop	{r4, r7, pc}
  408928:	0040272d 	.word	0x0040272d
  40892c:	00408f85 	.word	0x00408f85

00408930 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
  408930:	b580      	push	{r7, lr}
  408932:	b082      	sub	sp, #8
  408934:	af00      	add	r7, sp, #0
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
  408936:	4b0a      	ldr	r3, [pc, #40]	; (408960 <usbdc_unconfig+0x30>)
  408938:	691b      	ldr	r3, [r3, #16]
  40893a:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
  40893c:	e008      	b.n	408950 <usbdc_unconfig+0x20>
		func->ctrl(func, USBDF_DISABLE, NULL);
  40893e:	687b      	ldr	r3, [r7, #4]
  408940:	685b      	ldr	r3, [r3, #4]
  408942:	2200      	movs	r2, #0
  408944:	2101      	movs	r1, #1
  408946:	6878      	ldr	r0, [r7, #4]
  408948:	4798      	blx	r3
		func = func->next;
  40894a:	687b      	ldr	r3, [r7, #4]
  40894c:	681b      	ldr	r3, [r3, #0]
  40894e:	607b      	str	r3, [r7, #4]
	while (NULL != func) {
  408950:	687b      	ldr	r3, [r7, #4]
  408952:	2b00      	cmp	r3, #0
  408954:	d1f3      	bne.n	40893e <usbdc_unconfig+0xe>
	}
}
  408956:	bf00      	nop
  408958:	3708      	adds	r7, #8
  40895a:	46bd      	mov	sp, r7
  40895c:	bd80      	pop	{r7, pc}
  40895e:	bf00      	nop
  408960:	2040181c 	.word	0x2040181c

00408964 <usbdc_set_config>:
 * \param[in] cfg_value Configuration Value
 * \retval true Set configuration OK.
 * \retval false Request error.
 */
static bool usbdc_set_config(uint8_t cfg_value)
{
  408964:	b580      	push	{r7, lr}
  408966:	b088      	sub	sp, #32
  408968:	af00      	add	r7, sp, #0
  40896a:	4603      	mov	r3, r0
  40896c:	71fb      	strb	r3, [r7, #7]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               cfg_desc = NULL;
  40896e:	2300      	movs	r3, #0
  408970:	61bb      	str	r3, [r7, #24]
	uint16_t                total_len;
	uint8_t                 last_iface = 0xFF;
  408972:	23ff      	movs	r3, #255	; 0xff
  408974:	75fb      	strb	r3, [r7, #23]

	if (cfg_value == 0) {
  408976:	79fb      	ldrb	r3, [r7, #7]
  408978:	2b00      	cmp	r3, #0
  40897a:	d103      	bne.n	408984 <usbdc_set_config+0x20>
		usbdc_unconfig();
  40897c:	4b2e      	ldr	r3, [pc, #184]	; (408a38 <usbdc_set_config+0xd4>)
  40897e:	4798      	blx	r3
		return true;
  408980:	2301      	movs	r3, #1
  408982:	e055      	b.n	408a30 <usbdc_set_config+0xcc>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!cfg_desc) {
  408984:	69bb      	ldr	r3, [r7, #24]
  408986:	2b00      	cmp	r3, #0
  408988:	d10a      	bne.n	4089a0 <usbdc_set_config+0x3c>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
  40898a:	4b2c      	ldr	r3, [pc, #176]	; (408a3c <usbdc_set_config+0xd8>)
  40898c:	681b      	ldr	r3, [r3, #0]
  40898e:	6818      	ldr	r0, [r3, #0]
  408990:	4b2a      	ldr	r3, [pc, #168]	; (408a3c <usbdc_set_config+0xd8>)
  408992:	681b      	ldr	r3, [r3, #0]
  408994:	685b      	ldr	r3, [r3, #4]
  408996:	79fa      	ldrb	r2, [r7, #7]
  408998:	4619      	mov	r1, r3
  40899a:	4b29      	ldr	r3, [pc, #164]	; (408a40 <usbdc_set_config+0xdc>)
  40899c:	4798      	blx	r3
  40899e:	61b8      	str	r0, [r7, #24]
	}
	if (NULL == cfg_desc) {
  4089a0:	69bb      	ldr	r3, [r7, #24]
  4089a2:	2b00      	cmp	r3, #0
  4089a4:	d101      	bne.n	4089aa <usbdc_set_config+0x46>
		return false;
  4089a6:	2300      	movs	r3, #0
  4089a8:	e042      	b.n	408a30 <usbdc_set_config+0xcc>
	}

	total_len = usb_cfg_desc_total_len(cfg_desc);
  4089aa:	69b8      	ldr	r0, [r7, #24]
  4089ac:	4b25      	ldr	r3, [pc, #148]	; (408a44 <usbdc_set_config+0xe0>)
  4089ae:	4798      	blx	r3
  4089b0:	4603      	mov	r3, r0
  4089b2:	82bb      	strh	r3, [r7, #20]
	desc.eod  = cfg_desc + total_len;
  4089b4:	8abb      	ldrh	r3, [r7, #20]
  4089b6:	69ba      	ldr	r2, [r7, #24]
  4089b8:	4413      	add	r3, r2
  4089ba:	613b      	str	r3, [r7, #16]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
  4089bc:	693b      	ldr	r3, [r7, #16]
  4089be:	2204      	movs	r2, #4
  4089c0:	4619      	mov	r1, r3
  4089c2:	69b8      	ldr	r0, [r7, #24]
  4089c4:	4b20      	ldr	r3, [pc, #128]	; (408a48 <usbdc_set_config+0xe4>)
  4089c6:	4798      	blx	r3
  4089c8:	4603      	mov	r3, r0
  4089ca:	60fb      	str	r3, [r7, #12]

	while (NULL != desc.sod) {
  4089cc:	e02c      	b.n	408a28 <usbdc_set_config+0xc4>
		/* Apply very first alternate setting (must be 0) of the interface */
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
  4089ce:	68fb      	ldr	r3, [r7, #12]
  4089d0:	3302      	adds	r3, #2
  4089d2:	781b      	ldrb	r3, [r3, #0]
  4089d4:	7dfa      	ldrb	r2, [r7, #23]
  4089d6:	429a      	cmp	r2, r3
  4089d8:	d018      	beq.n	408a0c <usbdc_set_config+0xa8>
			last_iface = desc.sod[2];
  4089da:	68fb      	ldr	r3, [r7, #12]
  4089dc:	789b      	ldrb	r3, [r3, #2]
  4089de:	75fb      	strb	r3, [r7, #23]
			func       = (struct usbdf_driver *)usbdc.func_list.head;
  4089e0:	4b16      	ldr	r3, [pc, #88]	; (408a3c <usbdc_set_config+0xd8>)
  4089e2:	691b      	ldr	r3, [r3, #16]
  4089e4:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
  4089e6:	e00c      	b.n	408a02 <usbdc_set_config+0x9e>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
  4089e8:	69fb      	ldr	r3, [r7, #28]
  4089ea:	685b      	ldr	r3, [r3, #4]
  4089ec:	f107 020c 	add.w	r2, r7, #12
  4089f0:	2100      	movs	r1, #0
  4089f2:	69f8      	ldr	r0, [r7, #28]
  4089f4:	4798      	blx	r3
  4089f6:	4603      	mov	r3, r0
  4089f8:	2b00      	cmp	r3, #0
  4089fa:	d006      	beq.n	408a0a <usbdc_set_config+0xa6>
					func = func->next;
  4089fc:	69fb      	ldr	r3, [r7, #28]
  4089fe:	681b      	ldr	r3, [r3, #0]
  408a00:	61fb      	str	r3, [r7, #28]
			while (NULL != func) {
  408a02:	69fb      	ldr	r3, [r7, #28]
  408a04:	2b00      	cmp	r3, #0
  408a06:	d1ef      	bne.n	4089e8 <usbdc_set_config+0x84>
  408a08:	e000      	b.n	408a0c <usbdc_set_config+0xa8>
				} else {
					break;
  408a0a:	bf00      	nop
				}
			}
		}
		desc.sod = usb_desc_next(desc.sod);
  408a0c:	68fb      	ldr	r3, [r7, #12]
  408a0e:	4618      	mov	r0, r3
  408a10:	4b0e      	ldr	r3, [pc, #56]	; (408a4c <usbdc_set_config+0xe8>)
  408a12:	4798      	blx	r3
  408a14:	4603      	mov	r3, r0
  408a16:	60fb      	str	r3, [r7, #12]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  408a18:	68fb      	ldr	r3, [r7, #12]
  408a1a:	6939      	ldr	r1, [r7, #16]
  408a1c:	2204      	movs	r2, #4
  408a1e:	4618      	mov	r0, r3
  408a20:	4b09      	ldr	r3, [pc, #36]	; (408a48 <usbdc_set_config+0xe4>)
  408a22:	4798      	blx	r3
  408a24:	4603      	mov	r3, r0
  408a26:	60fb      	str	r3, [r7, #12]
	while (NULL != desc.sod) {
  408a28:	68fb      	ldr	r3, [r7, #12]
  408a2a:	2b00      	cmp	r3, #0
  408a2c:	d1cf      	bne.n	4089ce <usbdc_set_config+0x6a>
	}
	return true;
  408a2e:	2301      	movs	r3, #1
}
  408a30:	4618      	mov	r0, r3
  408a32:	3720      	adds	r7, #32
  408a34:	46bd      	mov	sp, r7
  408a36:	bd80      	pop	{r7, pc}
  408a38:	00408931 	.word	0x00408931
  408a3c:	2040181c 	.word	0x2040181c
  408a40:	004092d5 	.word	0x004092d5
  408a44:	00408481 	.word	0x00408481
  408a48:	00409215 	.word	0x00409215
  408a4c:	0040845d 	.word	0x0040845d

00408a50 <usbdc_set_address>:
/**
 * \brief Apply the USB device address
 * \param[in] addr address to be set.
 */
static void usbdc_set_address(uint8_t addr)
{
  408a50:	b580      	push	{r7, lr}
  408a52:	b082      	sub	sp, #8
  408a54:	af00      	add	r7, sp, #0
  408a56:	4603      	mov	r3, r0
  408a58:	71fb      	strb	r3, [r7, #7]
	usb_d_set_address(addr);
  408a5a:	79fb      	ldrb	r3, [r7, #7]
  408a5c:	4618      	mov	r0, r3
  408a5e:	4b03      	ldr	r3, [pc, #12]	; (408a6c <usbdc_set_address+0x1c>)
  408a60:	4798      	blx	r3
}
  408a62:	bf00      	nop
  408a64:	3708      	adds	r7, #8
  408a66:	46bd      	mov	sp, r7
  408a68:	bd80      	pop	{r7, pc}
  408a6a:	bf00      	nop
  408a6c:	0040239d 	.word	0x0040239d

00408a70 <usbdc_set_interface>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_interface(uint16_t alt_set, uint16_t ifc_id)
{
  408a70:	b590      	push	{r4, r7, lr}
  408a72:	b087      	sub	sp, #28
  408a74:	af00      	add	r7, sp, #0
  408a76:	4603      	mov	r3, r0
  408a78:	460a      	mov	r2, r1
  408a7a:	80fb      	strh	r3, [r7, #6]
  408a7c:	4613      	mov	r3, r2
  408a7e:	80bb      	strh	r3, [r7, #4]
	struct usbd_descriptors desc;
	struct usbdf_driver *   func;
	uint8_t *               ifc = NULL;
  408a80:	2300      	movs	r3, #0
  408a82:	613b      	str	r3, [r7, #16]
		ifc = usb_find_cfg_desc(usbdc.desces.hs->sod, usbdc.desces.hs->eod, usbdc.cfg_value);
	} else {
		/* Obtain descriptor from FS descriptors */
	}
#endif
	if (!ifc) {
  408a84:	693b      	ldr	r3, [r7, #16]
  408a86:	2b00      	cmp	r3, #0
  408a88:	d10b      	bne.n	408aa2 <usbdc_set_interface+0x32>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
  408a8a:	4b43      	ldr	r3, [pc, #268]	; (408b98 <usbdc_set_interface+0x128>)
  408a8c:	681b      	ldr	r3, [r3, #0]
  408a8e:	6818      	ldr	r0, [r3, #0]
  408a90:	4b41      	ldr	r3, [pc, #260]	; (408b98 <usbdc_set_interface+0x128>)
  408a92:	681b      	ldr	r3, [r3, #0]
  408a94:	6859      	ldr	r1, [r3, #4]
  408a96:	4b40      	ldr	r3, [pc, #256]	; (408b98 <usbdc_set_interface+0x128>)
  408a98:	7edb      	ldrb	r3, [r3, #27]
  408a9a:	461a      	mov	r2, r3
  408a9c:	4b3f      	ldr	r3, [pc, #252]	; (408b9c <usbdc_set_interface+0x12c>)
  408a9e:	4798      	blx	r3
  408aa0:	6138      	str	r0, [r7, #16]
	}
	if (NULL == ifc) {
  408aa2:	693b      	ldr	r3, [r7, #16]
  408aa4:	2b00      	cmp	r3, #0
  408aa6:	d101      	bne.n	408aac <usbdc_set_interface+0x3c>
		return false;
  408aa8:	2300      	movs	r3, #0
  408aaa:	e071      	b.n	408b90 <usbdc_set_interface+0x120>
	}
	desc.sod = ifc;
  408aac:	693b      	ldr	r3, [r7, #16]
  408aae:	60bb      	str	r3, [r7, #8]
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
  408ab0:	6938      	ldr	r0, [r7, #16]
  408ab2:	4b3b      	ldr	r3, [pc, #236]	; (408ba0 <usbdc_set_interface+0x130>)
  408ab4:	4798      	blx	r3
  408ab6:	4603      	mov	r3, r0
  408ab8:	461a      	mov	r2, r3
  408aba:	693b      	ldr	r3, [r7, #16]
  408abc:	4413      	add	r3, r2
  408abe:	60fb      	str	r3, [r7, #12]

	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
  408ac0:	68bb      	ldr	r3, [r7, #8]
  408ac2:	68f9      	ldr	r1, [r7, #12]
  408ac4:	2204      	movs	r2, #4
  408ac6:	4618      	mov	r0, r3
  408ac8:	4b36      	ldr	r3, [pc, #216]	; (408ba4 <usbdc_set_interface+0x134>)
  408aca:	4798      	blx	r3
  408acc:	6138      	str	r0, [r7, #16]
  408ace:	693b      	ldr	r3, [r7, #16]
  408ad0:	2b00      	cmp	r3, #0
  408ad2:	d113      	bne.n	408afc <usbdc_set_interface+0x8c>
		return false;
  408ad4:	2300      	movs	r3, #0
  408ad6:	e05b      	b.n	408b90 <usbdc_set_interface+0x120>
	}

	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
		desc.sod = usb_desc_next(desc.sod);
  408ad8:	68bb      	ldr	r3, [r7, #8]
  408ada:	4618      	mov	r0, r3
  408adc:	4b32      	ldr	r3, [pc, #200]	; (408ba8 <usbdc_set_interface+0x138>)
  408ade:	4798      	blx	r3
  408ae0:	4603      	mov	r3, r0
  408ae2:	60bb      	str	r3, [r7, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
  408ae4:	68bb      	ldr	r3, [r7, #8]
  408ae6:	68f9      	ldr	r1, [r7, #12]
  408ae8:	2204      	movs	r2, #4
  408aea:	4618      	mov	r0, r3
  408aec:	4b2d      	ldr	r3, [pc, #180]	; (408ba4 <usbdc_set_interface+0x134>)
  408aee:	4798      	blx	r3
  408af0:	6138      	str	r0, [r7, #16]
		if (NULL == ifc) {
  408af2:	693b      	ldr	r3, [r7, #16]
  408af4:	2b00      	cmp	r3, #0
  408af6:	d101      	bne.n	408afc <usbdc_set_interface+0x8c>
			return false;
  408af8:	2300      	movs	r3, #0
  408afa:	e049      	b.n	408b90 <usbdc_set_interface+0x120>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
  408afc:	693b      	ldr	r3, [r7, #16]
  408afe:	3302      	adds	r3, #2
  408b00:	781b      	ldrb	r3, [r3, #0]
  408b02:	b29b      	uxth	r3, r3
  408b04:	88ba      	ldrh	r2, [r7, #4]
  408b06:	429a      	cmp	r2, r3
  408b08:	d1e6      	bne.n	408ad8 <usbdc_set_interface+0x68>
  408b0a:	693b      	ldr	r3, [r7, #16]
  408b0c:	3303      	adds	r3, #3
  408b0e:	781b      	ldrb	r3, [r3, #0]
  408b10:	b29b      	uxth	r3, r3
  408b12:	88fa      	ldrh	r2, [r7, #6]
  408b14:	429a      	cmp	r2, r3
  408b16:	d1df      	bne.n	408ad8 <usbdc_set_interface+0x68>
		}
	}

	desc.sod = ifc;
  408b18:	693b      	ldr	r3, [r7, #16]
  408b1a:	60bb      	str	r3, [r7, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
  408b1c:	4b1e      	ldr	r3, [pc, #120]	; (408b98 <usbdc_set_interface+0x128>)
  408b1e:	691b      	ldr	r3, [r3, #16]
  408b20:	617b      	str	r3, [r7, #20]

	while (NULL != func) {
  408b22:	e031      	b.n	408b88 <usbdc_set_interface+0x118>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
  408b24:	697b      	ldr	r3, [r7, #20]
  408b26:	685b      	ldr	r3, [r3, #4]
  408b28:	f107 0208 	add.w	r2, r7, #8
  408b2c:	2101      	movs	r1, #1
  408b2e:	6978      	ldr	r0, [r7, #20]
  408b30:	4798      	blx	r3
  408b32:	4603      	mov	r3, r0
  408b34:	2b00      	cmp	r3, #0
  408b36:	d003      	beq.n	408b40 <usbdc_set_interface+0xd0>
			func = func->next;
  408b38:	697b      	ldr	r3, [r7, #20]
  408b3a:	681b      	ldr	r3, [r3, #0]
  408b3c:	617b      	str	r3, [r7, #20]
  408b3e:	e023      	b.n	408b88 <usbdc_set_interface+0x118>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
  408b40:	697b      	ldr	r3, [r7, #20]
  408b42:	685b      	ldr	r3, [r3, #4]
  408b44:	f107 0208 	add.w	r2, r7, #8
  408b48:	2100      	movs	r1, #0
  408b4a:	6978      	ldr	r0, [r7, #20]
  408b4c:	4798      	blx	r3
  408b4e:	4603      	mov	r3, r0
  408b50:	2b00      	cmp	r3, #0
  408b52:	d117      	bne.n	408b84 <usbdc_set_interface+0x114>
			if (alt_set) {
  408b54:	88fb      	ldrh	r3, [r7, #6]
  408b56:	2b00      	cmp	r3, #0
  408b58:	d00c      	beq.n	408b74 <usbdc_set_interface+0x104>
				/* Alternate settings are used from now on */
				usbdc.ifc_alt_map |= 1 << ifc_id;
  408b5a:	4b0f      	ldr	r3, [pc, #60]	; (408b98 <usbdc_set_interface+0x128>)
  408b5c:	7f5b      	ldrb	r3, [r3, #29]
  408b5e:	b25a      	sxtb	r2, r3
  408b60:	88bb      	ldrh	r3, [r7, #4]
  408b62:	2101      	movs	r1, #1
  408b64:	fa01 f303 	lsl.w	r3, r1, r3
  408b68:	b25b      	sxtb	r3, r3
  408b6a:	4313      	orrs	r3, r2
  408b6c:	b25b      	sxtb	r3, r3
  408b6e:	b2da      	uxtb	r2, r3
  408b70:	4b09      	ldr	r3, [pc, #36]	; (408b98 <usbdc_set_interface+0x128>)
  408b72:	775a      	strb	r2, [r3, #29]
			}
			usbdc_xfer(0, NULL, 0, 0);
  408b74:	2300      	movs	r3, #0
  408b76:	2200      	movs	r2, #0
  408b78:	2100      	movs	r1, #0
  408b7a:	2000      	movs	r0, #0
  408b7c:	4c0b      	ldr	r4, [pc, #44]	; (408bac <usbdc_set_interface+0x13c>)
  408b7e:	47a0      	blx	r4
			return true;
  408b80:	2301      	movs	r3, #1
  408b82:	e005      	b.n	408b90 <usbdc_set_interface+0x120>
		} else {
			return false;
  408b84:	2300      	movs	r3, #0
  408b86:	e003      	b.n	408b90 <usbdc_set_interface+0x120>
	while (NULL != func) {
  408b88:	697b      	ldr	r3, [r7, #20]
  408b8a:	2b00      	cmp	r3, #0
  408b8c:	d1ca      	bne.n	408b24 <usbdc_set_interface+0xb4>
		}
	}

	return false;
  408b8e:	2300      	movs	r3, #0
}
  408b90:	4618      	mov	r0, r3
  408b92:	371c      	adds	r7, #28
  408b94:	46bd      	mov	sp, r7
  408b96:	bd90      	pop	{r4, r7, pc}
  408b98:	2040181c 	.word	0x2040181c
  408b9c:	004092d5 	.word	0x004092d5
  408ba0:	00408481 	.word	0x00408481
  408ba4:	00409215 	.word	0x00409215
  408ba8:	0040845d 	.word	0x0040845d
  408bac:	00408f85 	.word	0x00408f85

00408bb0 <usbdc_set_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_set_req(const uint8_t ep, struct usb_req *req)
{
  408bb0:	b590      	push	{r4, r7, lr}
  408bb2:	b083      	sub	sp, #12
  408bb4:	af00      	add	r7, sp, #0
  408bb6:	4603      	mov	r3, r0
  408bb8:	6039      	str	r1, [r7, #0]
  408bba:	71fb      	strb	r3, [r7, #7]
	switch (req->bRequest) {
  408bbc:	683b      	ldr	r3, [r7, #0]
  408bbe:	785b      	ldrb	r3, [r3, #1]
  408bc0:	3b01      	subs	r3, #1
  408bc2:	2b0a      	cmp	r3, #10
  408bc4:	d85b      	bhi.n	408c7e <usbdc_set_req+0xce>
  408bc6:	a201      	add	r2, pc, #4	; (adr r2, 408bcc <usbdc_set_req+0x1c>)
  408bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  408bcc:	00408c4b 	.word	0x00408c4b
  408bd0:	00408c7f 	.word	0x00408c7f
  408bd4:	00408c59 	.word	0x00408c59
  408bd8:	00408c7f 	.word	0x00408c7f
  408bdc:	00408bf9 	.word	0x00408bf9
  408be0:	00408c7f 	.word	0x00408c7f
  408be4:	00408c7f 	.word	0x00408c7f
  408be8:	00408c7f 	.word	0x00408c7f
  408bec:	00408c13 	.word	0x00408c13
  408bf0:	00408c7f 	.word	0x00408c7f
  408bf4:	00408c67 	.word	0x00408c67
	case USB_REQ_SET_ADDRESS:
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
  408bf8:	79f8      	ldrb	r0, [r7, #7]
  408bfa:	2301      	movs	r3, #1
  408bfc:	2200      	movs	r2, #0
  408bfe:	2100      	movs	r1, #0
  408c00:	4c21      	ldr	r4, [pc, #132]	; (408c88 <usbdc_set_req+0xd8>)
  408c02:	47a0      	blx	r4
  408c04:	4603      	mov	r3, r0
  408c06:	2b00      	cmp	r3, #0
  408c08:	bf0c      	ite	eq
  408c0a:	2301      	moveq	r3, #1
  408c0c:	2300      	movne	r3, #0
  408c0e:	b2db      	uxtb	r3, r3
  408c10:	e036      	b.n	408c80 <usbdc_set_req+0xd0>
	case USB_REQ_SET_CONFIG:
		if (!usbdc_set_config(req->wValue)) {
  408c12:	683b      	ldr	r3, [r7, #0]
  408c14:	885b      	ldrh	r3, [r3, #2]
  408c16:	b29b      	uxth	r3, r3
  408c18:	b2db      	uxtb	r3, r3
  408c1a:	4618      	mov	r0, r3
  408c1c:	4b1b      	ldr	r3, [pc, #108]	; (408c8c <usbdc_set_req+0xdc>)
  408c1e:	4798      	blx	r3
  408c20:	4603      	mov	r3, r0
  408c22:	f083 0301 	eor.w	r3, r3, #1
  408c26:	b2db      	uxtb	r3, r3
  408c28:	2b00      	cmp	r3, #0
  408c2a:	d001      	beq.n	408c30 <usbdc_set_req+0x80>
			return false;
  408c2c:	2300      	movs	r3, #0
  408c2e:	e027      	b.n	408c80 <usbdc_set_req+0xd0>
		}
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
  408c30:	79f8      	ldrb	r0, [r7, #7]
  408c32:	2301      	movs	r3, #1
  408c34:	2200      	movs	r2, #0
  408c36:	2100      	movs	r1, #0
  408c38:	4c13      	ldr	r4, [pc, #76]	; (408c88 <usbdc_set_req+0xd8>)
  408c3a:	47a0      	blx	r4
  408c3c:	4603      	mov	r3, r0
  408c3e:	2b00      	cmp	r3, #0
  408c40:	bf0c      	ite	eq
  408c42:	2301      	moveq	r3, #1
  408c44:	2300      	movne	r3, #0
  408c46:	b2db      	uxtb	r3, r3
  408c48:	e01a      	b.n	408c80 <usbdc_set_req+0xd0>
	case USB_REQ_CLEAR_FTR:
		return usbdc_clear_ftr_req(ep, req);
  408c4a:	79fb      	ldrb	r3, [r7, #7]
  408c4c:	6839      	ldr	r1, [r7, #0]
  408c4e:	4618      	mov	r0, r3
  408c50:	4b0f      	ldr	r3, [pc, #60]	; (408c90 <usbdc_set_req+0xe0>)
  408c52:	4798      	blx	r3
  408c54:	4603      	mov	r3, r0
  408c56:	e013      	b.n	408c80 <usbdc_set_req+0xd0>
	case USB_REQ_SET_FTR:
		return usbdc_set_ftr_req(ep, req);
  408c58:	79fb      	ldrb	r3, [r7, #7]
  408c5a:	6839      	ldr	r1, [r7, #0]
  408c5c:	4618      	mov	r0, r3
  408c5e:	4b0d      	ldr	r3, [pc, #52]	; (408c94 <usbdc_set_req+0xe4>)
  408c60:	4798      	blx	r3
  408c62:	4603      	mov	r3, r0
  408c64:	e00c      	b.n	408c80 <usbdc_set_req+0xd0>
	case USB_REQ_SET_INTERFACE:
		return usbdc_set_interface(req->wValue, req->wIndex);
  408c66:	683b      	ldr	r3, [r7, #0]
  408c68:	885b      	ldrh	r3, [r3, #2]
  408c6a:	b29a      	uxth	r2, r3
  408c6c:	683b      	ldr	r3, [r7, #0]
  408c6e:	889b      	ldrh	r3, [r3, #4]
  408c70:	b29b      	uxth	r3, r3
  408c72:	4619      	mov	r1, r3
  408c74:	4610      	mov	r0, r2
  408c76:	4b08      	ldr	r3, [pc, #32]	; (408c98 <usbdc_set_req+0xe8>)
  408c78:	4798      	blx	r3
  408c7a:	4603      	mov	r3, r0
  408c7c:	e000      	b.n	408c80 <usbdc_set_req+0xd0>
	default:
		return false;
  408c7e:	2300      	movs	r3, #0
	}
}
  408c80:	4618      	mov	r0, r3
  408c82:	370c      	adds	r7, #12
  408c84:	46bd      	mov	sp, r7
  408c86:	bd90      	pop	{r4, r7, pc}
  408c88:	00408f85 	.word	0x00408f85
  408c8c:	00408965 	.word	0x00408965
  408c90:	00408881 	.word	0x00408881
  408c94:	004088d9 	.word	0x004088d9
  408c98:	00408a71 	.word	0x00408a71

00408c9c <usbdc_sof_notify>:

/** Invoke all registered SOF callbacks. */
static void usbdc_sof_notify(void)
{
  408c9c:	b580      	push	{r7, lr}
  408c9e:	b082      	sub	sp, #8
  408ca0:	af00      	add	r7, sp, #0
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
  408ca2:	4b0a      	ldr	r3, [pc, #40]	; (408ccc <usbdc_sof_notify+0x30>)
  408ca4:	685b      	ldr	r3, [r3, #4]
  408ca6:	607b      	str	r3, [r7, #4]

	while (sof != NULL) {
  408ca8:	e009      	b.n	408cbe <usbdc_sof_notify+0x22>
		if (NULL != sof->cb) {
  408caa:	687b      	ldr	r3, [r7, #4]
  408cac:	685b      	ldr	r3, [r3, #4]
  408cae:	2b00      	cmp	r3, #0
  408cb0:	d002      	beq.n	408cb8 <usbdc_sof_notify+0x1c>
			sof->cb();
  408cb2:	687b      	ldr	r3, [r7, #4]
  408cb4:	685b      	ldr	r3, [r3, #4]
  408cb6:	4798      	blx	r3
		}
		sof = sof->next;
  408cb8:	687b      	ldr	r3, [r7, #4]
  408cba:	681b      	ldr	r3, [r3, #0]
  408cbc:	607b      	str	r3, [r7, #4]
	while (sof != NULL) {
  408cbe:	687b      	ldr	r3, [r7, #4]
  408cc0:	2b00      	cmp	r3, #0
  408cc2:	d1f2      	bne.n	408caa <usbdc_sof_notify+0xe>
	}
}
  408cc4:	bf00      	nop
  408cc6:	3708      	adds	r7, #8
  408cc8:	46bd      	mov	sp, r7
  408cca:	bd80      	pop	{r7, pc}
  408ccc:	2040181c 	.word	0x2040181c

00408cd0 <usbdc_change_notify>:

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
  408cd0:	b580      	push	{r7, lr}
  408cd2:	b084      	sub	sp, #16
  408cd4:	af00      	add	r7, sp, #0
  408cd6:	4603      	mov	r3, r0
  408cd8:	6039      	str	r1, [r7, #0]
  408cda:	71fb      	strb	r3, [r7, #7]
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
  408cdc:	4b0b      	ldr	r3, [pc, #44]	; (408d0c <usbdc_change_notify+0x3c>)
  408cde:	68db      	ldr	r3, [r3, #12]
  408ce0:	60fb      	str	r3, [r7, #12]

	while (cg != NULL) {
  408ce2:	e00c      	b.n	408cfe <usbdc_change_notify+0x2e>
		if (NULL != cg->cb) {
  408ce4:	68fb      	ldr	r3, [r7, #12]
  408ce6:	685b      	ldr	r3, [r3, #4]
  408ce8:	2b00      	cmp	r3, #0
  408cea:	d005      	beq.n	408cf8 <usbdc_change_notify+0x28>
			cg->cb(change, value);
  408cec:	68fb      	ldr	r3, [r7, #12]
  408cee:	685b      	ldr	r3, [r3, #4]
  408cf0:	79fa      	ldrb	r2, [r7, #7]
  408cf2:	6839      	ldr	r1, [r7, #0]
  408cf4:	4610      	mov	r0, r2
  408cf6:	4798      	blx	r3
		}
		cg = cg->next;
  408cf8:	68fb      	ldr	r3, [r7, #12]
  408cfa:	681b      	ldr	r3, [r3, #0]
  408cfc:	60fb      	str	r3, [r7, #12]
	while (cg != NULL) {
  408cfe:	68fb      	ldr	r3, [r7, #12]
  408d00:	2b00      	cmp	r3, #0
  408d02:	d1ef      	bne.n	408ce4 <usbdc_change_notify+0x14>
	}
}
  408d04:	bf00      	nop
  408d06:	3710      	adds	r7, #16
  408d08:	46bd      	mov	sp, r7
  408d0a:	bd80      	pop	{r7, pc}
  408d0c:	2040181c 	.word	0x2040181c

00408d10 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
  408d10:	b580      	push	{r7, lr}
  408d12:	b084      	sub	sp, #16
  408d14:	af00      	add	r7, sp, #0
  408d16:	4603      	mov	r3, r0
  408d18:	6039      	str	r1, [r7, #0]
  408d1a:	71fb      	strb	r3, [r7, #7]
  408d1c:	4613      	mov	r3, r2
  408d1e:	71bb      	strb	r3, [r7, #6]
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
  408d20:	4b12      	ldr	r3, [pc, #72]	; (408d6c <usbdc_request_handler+0x5c>)
  408d22:	689b      	ldr	r3, [r3, #8]
  408d24:	60fb      	str	r3, [r7, #12]
	int32_t                   rc;

	while (h != NULL) {
  408d26:	e019      	b.n	408d5c <usbdc_request_handler+0x4c>
		if (NULL != h->cb) {
  408d28:	68fb      	ldr	r3, [r7, #12]
  408d2a:	685b      	ldr	r3, [r3, #4]
  408d2c:	2b00      	cmp	r3, #0
  408d2e:	d012      	beq.n	408d56 <usbdc_request_handler+0x46>
			rc = h->cb(ep, req, stage);
  408d30:	68fb      	ldr	r3, [r7, #12]
  408d32:	685b      	ldr	r3, [r3, #4]
  408d34:	79ba      	ldrb	r2, [r7, #6]
  408d36:	79f8      	ldrb	r0, [r7, #7]
  408d38:	6839      	ldr	r1, [r7, #0]
  408d3a:	4798      	blx	r3
  408d3c:	60b8      	str	r0, [r7, #8]
			if (0 == rc) {
  408d3e:	68bb      	ldr	r3, [r7, #8]
  408d40:	2b00      	cmp	r3, #0
  408d42:	d101      	bne.n	408d48 <usbdc_request_handler+0x38>
				return true;
  408d44:	2301      	movs	r3, #1
  408d46:	e00d      	b.n	408d64 <usbdc_request_handler+0x54>
			} else if (ERR_NOT_FOUND != rc) {
  408d48:	68bb      	ldr	r3, [r7, #8]
  408d4a:	f113 0f0a 	cmn.w	r3, #10
  408d4e:	d002      	beq.n	408d56 <usbdc_request_handler+0x46>
				return -1;
  408d50:	f04f 33ff 	mov.w	r3, #4294967295
  408d54:	e006      	b.n	408d64 <usbdc_request_handler+0x54>
			}
		}
		h = h->next;
  408d56:	68fb      	ldr	r3, [r7, #12]
  408d58:	681b      	ldr	r3, [r3, #0]
  408d5a:	60fb      	str	r3, [r7, #12]
	while (h != NULL) {
  408d5c:	68fb      	ldr	r3, [r7, #12]
  408d5e:	2b00      	cmp	r3, #0
  408d60:	d1e2      	bne.n	408d28 <usbdc_request_handler+0x18>
	}
	return false;
  408d62:	2300      	movs	r3, #0
}
  408d64:	4618      	mov	r0, r3
  408d66:	3710      	adds	r7, #16
  408d68:	46bd      	mov	sp, r7
  408d6a:	bd80      	pop	{r7, pc}
  408d6c:	2040181c 	.word	0x2040181c

00408d70 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
  408d70:	b580      	push	{r7, lr}
  408d72:	af00      	add	r7, sp, #0
	usbdc_sof_notify();
  408d74:	4b01      	ldr	r3, [pc, #4]	; (408d7c <usbd_sof_cb+0xc>)
  408d76:	4798      	blx	r3
}
  408d78:	bf00      	nop
  408d7a:	bd80      	pop	{r7, pc}
  408d7c:	00408c9d 	.word	0x00408c9d

00408d80 <usbdc_cb_ctl_req>:
 * \return Operation status.
 * \retval true Request is handled OK.
 * \retval false Request not supported.
 */
static bool usbdc_cb_ctl_req(const uint8_t ep, struct usb_req *req)
{
  408d80:	b580      	push	{r7, lr}
  408d82:	b082      	sub	sp, #8
  408d84:	af00      	add	r7, sp, #0
  408d86:	4603      	mov	r3, r0
  408d88:	6039      	str	r1, [r7, #0]
  408d8a:	71fb      	strb	r3, [r7, #7]
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
  408d8c:	79fb      	ldrb	r3, [r7, #7]
  408d8e:	2200      	movs	r2, #0
  408d90:	6839      	ldr	r1, [r7, #0]
  408d92:	4618      	mov	r0, r3
  408d94:	4b14      	ldr	r3, [pc, #80]	; (408de8 <usbdc_cb_ctl_req+0x68>)
  408d96:	4798      	blx	r3
  408d98:	4603      	mov	r3, r0
  408d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
  408d9e:	d00b      	beq.n	408db8 <usbdc_cb_ctl_req+0x38>
  408da0:	2b01      	cmp	r3, #1
  408da2:	d007      	beq.n	408db4 <usbdc_cb_ctl_req+0x34>
	case true:
		return true;
	case -1:
		return false;
	default:
		break;
  408da4:	bf00      	nop
	}

	// STD request handling
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
  408da6:	683b      	ldr	r3, [r7, #0]
  408da8:	781b      	ldrb	r3, [r3, #0]
  408daa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  408dae:	2b00      	cmp	r3, #0
  408db0:	d007      	beq.n	408dc2 <usbdc_cb_ctl_req+0x42>
  408db2:	e003      	b.n	408dbc <usbdc_cb_ctl_req+0x3c>
		return true;
  408db4:	2301      	movs	r3, #1
  408db6:	e013      	b.n	408de0 <usbdc_cb_ctl_req+0x60>
		return false;
  408db8:	2300      	movs	r3, #0
  408dba:	e011      	b.n	408de0 <usbdc_cb_ctl_req+0x60>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
  408dbc:	2b80      	cmp	r3, #128	; 0x80
  408dbe:	d007      	beq.n	408dd0 <usbdc_cb_ctl_req+0x50>
  408dc0:	e00d      	b.n	408dde <usbdc_cb_ctl_req+0x5e>
	case USB_REQT_TYPE_STANDARD:
		return usbdc_set_req(ep, req);
  408dc2:	79fb      	ldrb	r3, [r7, #7]
  408dc4:	6839      	ldr	r1, [r7, #0]
  408dc6:	4618      	mov	r0, r3
  408dc8:	4b08      	ldr	r3, [pc, #32]	; (408dec <usbdc_cb_ctl_req+0x6c>)
  408dca:	4798      	blx	r3
  408dcc:	4603      	mov	r3, r0
  408dce:	e007      	b.n	408de0 <usbdc_cb_ctl_req+0x60>
	case (USB_REQT_TYPE_STANDARD | USB_REQT_DIR_IN):
		return usbdc_get_req(ep, req);
  408dd0:	79fb      	ldrb	r3, [r7, #7]
  408dd2:	6839      	ldr	r1, [r7, #0]
  408dd4:	4618      	mov	r0, r3
  408dd6:	4b06      	ldr	r3, [pc, #24]	; (408df0 <usbdc_cb_ctl_req+0x70>)
  408dd8:	4798      	blx	r3
  408dda:	4603      	mov	r3, r0
  408ddc:	e000      	b.n	408de0 <usbdc_cb_ctl_req+0x60>
	default:
		return false;
  408dde:	2300      	movs	r3, #0
	}
}
  408de0:	4618      	mov	r0, r3
  408de2:	3708      	adds	r7, #8
  408de4:	46bd      	mov	sp, r7
  408de6:	bd80      	pop	{r7, pc}
  408de8:	00408d11 	.word	0x00408d11
  408dec:	00408bb1 	.word	0x00408bb1
  408df0:	004087d9 	.word	0x004087d9

00408df4 <usbdc_ctrl_status_end>:
/**
 * \brief When control status stage is end
 * \param[in] req Pointer to the request.
 */
static void usbdc_ctrl_status_end(const struct usb_req *req)
{
  408df4:	b580      	push	{r7, lr}
  408df6:	b082      	sub	sp, #8
  408df8:	af00      	add	r7, sp, #0
  408dfa:	6078      	str	r0, [r7, #4]
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
  408dfc:	687b      	ldr	r3, [r7, #4]
  408dfe:	781b      	ldrb	r3, [r3, #0]
  408e00:	2b00      	cmp	r3, #0
  408e02:	d135      	bne.n	408e70 <usbdc_ctrl_status_end+0x7c>
		return;
	}
	switch (req->bRequest) {
  408e04:	687b      	ldr	r3, [r7, #4]
  408e06:	785b      	ldrb	r3, [r3, #1]
  408e08:	2b05      	cmp	r3, #5
  408e0a:	d019      	beq.n	408e40 <usbdc_ctrl_status_end+0x4c>
  408e0c:	2b09      	cmp	r3, #9
  408e0e:	d000      	beq.n	408e12 <usbdc_ctrl_status_end+0x1e>
		usbdc_set_address(req->wValue);
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
		break;
	default:
		break;
  408e10:	e02f      	b.n	408e72 <usbdc_ctrl_status_end+0x7e>
		usbdc.cfg_value = req->wValue;
  408e12:	687b      	ldr	r3, [r7, #4]
  408e14:	885b      	ldrh	r3, [r3, #2]
  408e16:	b29b      	uxth	r3, r3
  408e18:	b2da      	uxtb	r2, r3
  408e1a:	4b17      	ldr	r3, [pc, #92]	; (408e78 <usbdc_ctrl_status_end+0x84>)
  408e1c:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
  408e1e:	687b      	ldr	r3, [r7, #4]
  408e20:	885b      	ldrh	r3, [r3, #2]
  408e22:	b29b      	uxth	r3, r3
  408e24:	2b00      	cmp	r3, #0
  408e26:	d001      	beq.n	408e2c <usbdc_ctrl_status_end+0x38>
  408e28:	2204      	movs	r2, #4
  408e2a:	e000      	b.n	408e2e <usbdc_ctrl_status_end+0x3a>
  408e2c:	2203      	movs	r2, #3
  408e2e:	4b12      	ldr	r3, [pc, #72]	; (408e78 <usbdc_ctrl_status_end+0x84>)
  408e30:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
  408e32:	4b11      	ldr	r3, [pc, #68]	; (408e78 <usbdc_ctrl_status_end+0x84>)
  408e34:	7e9b      	ldrb	r3, [r3, #26]
  408e36:	4619      	mov	r1, r3
  408e38:	2001      	movs	r0, #1
  408e3a:	4b10      	ldr	r3, [pc, #64]	; (408e7c <usbdc_ctrl_status_end+0x88>)
  408e3c:	4798      	blx	r3
		break;
  408e3e:	e018      	b.n	408e72 <usbdc_ctrl_status_end+0x7e>
		usbdc_set_address(req->wValue);
  408e40:	687b      	ldr	r3, [r7, #4]
  408e42:	885b      	ldrh	r3, [r3, #2]
  408e44:	b29b      	uxth	r3, r3
  408e46:	b2db      	uxtb	r3, r3
  408e48:	4618      	mov	r0, r3
  408e4a:	4b0d      	ldr	r3, [pc, #52]	; (408e80 <usbdc_ctrl_status_end+0x8c>)
  408e4c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
  408e4e:	687b      	ldr	r3, [r7, #4]
  408e50:	885b      	ldrh	r3, [r3, #2]
  408e52:	b29b      	uxth	r3, r3
  408e54:	2b00      	cmp	r3, #0
  408e56:	d001      	beq.n	408e5c <usbdc_ctrl_status_end+0x68>
  408e58:	2203      	movs	r2, #3
  408e5a:	e000      	b.n	408e5e <usbdc_ctrl_status_end+0x6a>
  408e5c:	2202      	movs	r2, #2
  408e5e:	4b06      	ldr	r3, [pc, #24]	; (408e78 <usbdc_ctrl_status_end+0x84>)
  408e60:	769a      	strb	r2, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
  408e62:	4b05      	ldr	r3, [pc, #20]	; (408e78 <usbdc_ctrl_status_end+0x84>)
  408e64:	7e9b      	ldrb	r3, [r3, #26]
  408e66:	4619      	mov	r1, r3
  408e68:	2001      	movs	r0, #1
  408e6a:	4b04      	ldr	r3, [pc, #16]	; (408e7c <usbdc_ctrl_status_end+0x88>)
  408e6c:	4798      	blx	r3
		break;
  408e6e:	e000      	b.n	408e72 <usbdc_ctrl_status_end+0x7e>
		return;
  408e70:	bf00      	nop
	}
}
  408e72:	3708      	adds	r7, #8
  408e74:	46bd      	mov	sp, r7
  408e76:	bd80      	pop	{r7, pc}
  408e78:	2040181c 	.word	0x2040181c
  408e7c:	00408cd1 	.word	0x00408cd1
  408e80:	00408a51 	.word	0x00408a51

00408e84 <usbdc_ctrl_data_end>:
/**
 * \brief When control data stage is end
 * \param[in] req Pointer to the request.
 */
static bool usbdc_ctrl_data_end(struct usb_req *req)
{
  408e84:	b580      	push	{r7, lr}
  408e86:	b082      	sub	sp, #8
  408e88:	af00      	add	r7, sp, #0
  408e8a:	6078      	str	r0, [r7, #4]
	usbdc_request_handler(0, req, USB_DATA_STAGE);
  408e8c:	2201      	movs	r2, #1
  408e8e:	6879      	ldr	r1, [r7, #4]
  408e90:	2000      	movs	r0, #0
  408e92:	4b03      	ldr	r3, [pc, #12]	; (408ea0 <usbdc_ctrl_data_end+0x1c>)
  408e94:	4798      	blx	r3
	return false;
  408e96:	2300      	movs	r3, #0
}
  408e98:	4618      	mov	r0, r3
  408e9a:	3708      	adds	r7, #8
  408e9c:	46bd      	mov	sp, r7
  408e9e:	bd80      	pop	{r7, pc}
  408ea0:	00408d11 	.word	0x00408d11

00408ea4 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
  408ea4:	b580      	push	{r7, lr}
  408ea6:	b082      	sub	sp, #8
  408ea8:	af00      	add	r7, sp, #0
  408eaa:	4603      	mov	r3, r0
  408eac:	603a      	str	r2, [r7, #0]
  408eae:	71fb      	strb	r3, [r7, #7]
  408eb0:	460b      	mov	r3, r1
  408eb2:	71bb      	strb	r3, [r7, #6]
	(void)ep;

	switch (code) {
  408eb4:	79bb      	ldrb	r3, [r7, #6]
  408eb6:	2b00      	cmp	r3, #0
  408eb8:	d002      	beq.n	408ec0 <usbdc_cb_ctl_done+0x1c>
  408eba:	2b01      	cmp	r3, #1
  408ebc:	d004      	beq.n	408ec8 <usbdc_cb_ctl_done+0x24>
		usbdc_ctrl_status_end(req);
		break;
	case USB_XFER_DATA:
		return usbdc_ctrl_data_end(req);
	default:
		break;
  408ebe:	e008      	b.n	408ed2 <usbdc_cb_ctl_done+0x2e>
		usbdc_ctrl_status_end(req);
  408ec0:	6838      	ldr	r0, [r7, #0]
  408ec2:	4b06      	ldr	r3, [pc, #24]	; (408edc <usbdc_cb_ctl_done+0x38>)
  408ec4:	4798      	blx	r3
		break;
  408ec6:	e004      	b.n	408ed2 <usbdc_cb_ctl_done+0x2e>
		return usbdc_ctrl_data_end(req);
  408ec8:	6838      	ldr	r0, [r7, #0]
  408eca:	4b05      	ldr	r3, [pc, #20]	; (408ee0 <usbdc_cb_ctl_done+0x3c>)
  408ecc:	4798      	blx	r3
  408ece:	4603      	mov	r3, r0
  408ed0:	e000      	b.n	408ed4 <usbdc_cb_ctl_done+0x30>
	}
	return false;
  408ed2:	2300      	movs	r3, #0
}
  408ed4:	4618      	mov	r0, r3
  408ed6:	3708      	adds	r7, #8
  408ed8:	46bd      	mov	sp, r7
  408eda:	bd80      	pop	{r7, pc}
  408edc:	00408df5 	.word	0x00408df5
  408ee0:	00408e85 	.word	0x00408e85

00408ee4 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
  408ee4:	b580      	push	{r7, lr}
  408ee6:	af00      	add	r7, sp, #0
	usbdc_unconfig();
  408ee8:	4b10      	ldr	r3, [pc, #64]	; (408f2c <usbdc_reset+0x48>)
  408eea:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
  408eec:	4b10      	ldr	r3, [pc, #64]	; (408f30 <usbdc_reset+0x4c>)
  408eee:	2202      	movs	r2, #2
  408ef0:	769a      	strb	r2, [r3, #26]
	usbdc.cfg_value   = 0;
  408ef2:	4b0f      	ldr	r3, [pc, #60]	; (408f30 <usbdc_reset+0x4c>)
  408ef4:	2200      	movs	r2, #0
  408ef6:	76da      	strb	r2, [r3, #27]
	usbdc.ifc_alt_map = 0;
  408ef8:	4b0d      	ldr	r3, [pc, #52]	; (408f30 <usbdc_reset+0x4c>)
  408efa:	2200      	movs	r2, #0
  408efc:	775a      	strb	r2, [r3, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
  408efe:	2000      	movs	r0, #0
  408f00:	4b0c      	ldr	r3, [pc, #48]	; (408f34 <usbdc_reset+0x50>)
  408f02:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
  408f04:	4b0a      	ldr	r3, [pc, #40]	; (408f30 <usbdc_reset+0x4c>)
  408f06:	7f1b      	ldrb	r3, [r3, #28]
  408f08:	4618      	mov	r0, r3
  408f0a:	4b0b      	ldr	r3, [pc, #44]	; (408f38 <usbdc_reset+0x54>)
  408f0c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
  408f0e:	4a0b      	ldr	r2, [pc, #44]	; (408f3c <usbdc_reset+0x58>)
  408f10:	2100      	movs	r1, #0
  408f12:	2000      	movs	r0, #0
  408f14:	4b0a      	ldr	r3, [pc, #40]	; (408f40 <usbdc_reset+0x5c>)
  408f16:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
  408f18:	4a0a      	ldr	r2, [pc, #40]	; (408f44 <usbdc_reset+0x60>)
  408f1a:	2102      	movs	r1, #2
  408f1c:	2000      	movs	r0, #0
  408f1e:	4b08      	ldr	r3, [pc, #32]	; (408f40 <usbdc_reset+0x5c>)
  408f20:	4798      	blx	r3
	usb_d_ep_enable(0);
  408f22:	2000      	movs	r0, #0
  408f24:	4b08      	ldr	r3, [pc, #32]	; (408f48 <usbdc_reset+0x64>)
  408f26:	4798      	blx	r3
}
  408f28:	bf00      	nop
  408f2a:	bd80      	pop	{r7, pc}
  408f2c:	00408931 	.word	0x00408931
  408f30:	2040181c 	.word	0x2040181c
  408f34:	00402481 	.word	0x00402481
  408f38:	004023bd 	.word	0x004023bd
  408f3c:	00408d81 	.word	0x00408d81
  408f40:	00402781 	.word	0x00402781
  408f44:	00408ea5 	.word	0x00408ea5
  408f48:	004024d1 	.word	0x004024d1

00408f4c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
  408f4c:	b580      	push	{r7, lr}
  408f4e:	b082      	sub	sp, #8
  408f50:	af00      	add	r7, sp, #0
  408f52:	4603      	mov	r3, r0
  408f54:	6039      	str	r1, [r7, #0]
  408f56:	71fb      	strb	r3, [r7, #7]
	(void)param;

	switch (ev) {
  408f58:	79fb      	ldrb	r3, [r7, #7]
  408f5a:	2b00      	cmp	r3, #0
  408f5c:	d002      	beq.n	408f64 <usbd_event_cb+0x18>
  408f5e:	2b01      	cmp	r3, #1
  408f60:	d005      	beq.n	408f6e <usbd_event_cb+0x22>
	case USB_EV_RESET:
		usbdc_reset();
		break;

	default:
		break;
  408f62:	e007      	b.n	408f74 <usbd_event_cb+0x28>
		usbdc_change_notify(USBDC_C_CONN, param);
  408f64:	6839      	ldr	r1, [r7, #0]
  408f66:	2000      	movs	r0, #0
  408f68:	4b04      	ldr	r3, [pc, #16]	; (408f7c <usbd_event_cb+0x30>)
  408f6a:	4798      	blx	r3
		break;
  408f6c:	e002      	b.n	408f74 <usbd_event_cb+0x28>
		usbdc_reset();
  408f6e:	4b04      	ldr	r3, [pc, #16]	; (408f80 <usbd_event_cb+0x34>)
  408f70:	4798      	blx	r3
		break;
  408f72:	bf00      	nop
	}
}
  408f74:	bf00      	nop
  408f76:	3708      	adds	r7, #8
  408f78:	46bd      	mov	sp, r7
  408f7a:	bd80      	pop	{r7, pc}
  408f7c:	00408cd1 	.word	0x00408cd1
  408f80:	00408ee5 	.word	0x00408ee5

00408f84 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
  408f84:	b580      	push	{r7, lr}
  408f86:	b088      	sub	sp, #32
  408f88:	af00      	add	r7, sp, #0
  408f8a:	60b9      	str	r1, [r7, #8]
  408f8c:	607a      	str	r2, [r7, #4]
  408f8e:	461a      	mov	r2, r3
  408f90:	4603      	mov	r3, r0
  408f92:	73fb      	strb	r3, [r7, #15]
  408f94:	4613      	mov	r3, r2
  408f96:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
  408f98:	68bb      	ldr	r3, [r7, #8]
  408f9a:	617b      	str	r3, [r7, #20]
  408f9c:	687b      	ldr	r3, [r7, #4]
  408f9e:	61bb      	str	r3, [r7, #24]
  408fa0:	7bfb      	ldrb	r3, [r7, #15]
  408fa2:	773b      	strb	r3, [r7, #28]
  408fa4:	7bbb      	ldrb	r3, [r7, #14]
  408fa6:	777b      	strb	r3, [r7, #29]
	return usb_d_ep_transfer(&xfer);
  408fa8:	f107 0314 	add.w	r3, r7, #20
  408fac:	4618      	mov	r0, r3
  408fae:	4b03      	ldr	r3, [pc, #12]	; (408fbc <usbdc_xfer+0x38>)
  408fb0:	4798      	blx	r3
  408fb2:	4603      	mov	r3, r0
}
  408fb4:	4618      	mov	r0, r3
  408fb6:	3720      	adds	r7, #32
  408fb8:	46bd      	mov	sp, r7
  408fba:	bd80      	pop	{r7, pc}
  408fbc:	00402541 	.word	0x00402541

00408fc0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
  408fc0:	b580      	push	{r7, lr}
  408fc2:	b082      	sub	sp, #8
  408fc4:	af00      	add	r7, sp, #0
  408fc6:	4603      	mov	r3, r0
  408fc8:	6039      	str	r1, [r7, #0]
  408fca:	71fb      	strb	r3, [r7, #7]
	switch (type) {
  408fcc:	79fb      	ldrb	r3, [r7, #7]
  408fce:	2b01      	cmp	r3, #1
  408fd0:	d009      	beq.n	408fe6 <usbdc_register_handler+0x26>
  408fd2:	2b02      	cmp	r3, #2
  408fd4:	d00c      	beq.n	408ff0 <usbdc_register_handler+0x30>
  408fd6:	2b00      	cmp	r3, #0
  408fd8:	d000      	beq.n	408fdc <usbdc_register_handler+0x1c>
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
  408fda:	e00e      	b.n	408ffa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
  408fdc:	6839      	ldr	r1, [r7, #0]
  408fde:	4809      	ldr	r0, [pc, #36]	; (409004 <usbdc_register_handler+0x44>)
  408fe0:	4b09      	ldr	r3, [pc, #36]	; (409008 <usbdc_register_handler+0x48>)
  408fe2:	4798      	blx	r3
		break;
  408fe4:	e009      	b.n	408ffa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
  408fe6:	6839      	ldr	r1, [r7, #0]
  408fe8:	4808      	ldr	r0, [pc, #32]	; (40900c <usbdc_register_handler+0x4c>)
  408fea:	4b07      	ldr	r3, [pc, #28]	; (409008 <usbdc_register_handler+0x48>)
  408fec:	4798      	blx	r3
		break;
  408fee:	e004      	b.n	408ffa <usbdc_register_handler+0x3a>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
  408ff0:	6839      	ldr	r1, [r7, #0]
  408ff2:	4807      	ldr	r0, [pc, #28]	; (409010 <usbdc_register_handler+0x50>)
  408ff4:	4b04      	ldr	r3, [pc, #16]	; (409008 <usbdc_register_handler+0x48>)
  408ff6:	4798      	blx	r3
		break;
  408ff8:	bf00      	nop
	}
}
  408ffa:	bf00      	nop
  408ffc:	3708      	adds	r7, #8
  408ffe:	46bd      	mov	sp, r7
  409000:	bd80      	pop	{r7, pc}
  409002:	bf00      	nop
  409004:	20401820 	.word	0x20401820
  409008:	0040285d 	.word	0x0040285d
  40900c:	20401824 	.word	0x20401824
  409010:	20401828 	.word	0x20401828

00409014 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
  409014:	b580      	push	{r7, lr}
  409016:	b084      	sub	sp, #16
  409018:	af00      	add	r7, sp, #0
  40901a:	6078      	str	r0, [r7, #4]
	ASSERT(ctrl_buf);
  40901c:	687b      	ldr	r3, [r7, #4]
  40901e:	2b00      	cmp	r3, #0
  409020:	bf14      	ite	ne
  409022:	2301      	movne	r3, #1
  409024:	2300      	moveq	r3, #0
  409026:	b2db      	uxtb	r3, r3
  409028:	f240 3255 	movw	r2, #853	; 0x355
  40902c:	4910      	ldr	r1, [pc, #64]	; (409070 <usbdc_init+0x5c>)
  40902e:	4618      	mov	r0, r3
  409030:	4b10      	ldr	r3, [pc, #64]	; (409074 <usbdc_init+0x60>)
  409032:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
  409034:	4b10      	ldr	r3, [pc, #64]	; (409078 <usbdc_init+0x64>)
  409036:	4798      	blx	r3
  409038:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
  40903a:	68fb      	ldr	r3, [r7, #12]
  40903c:	2b00      	cmp	r3, #0
  40903e:	da01      	bge.n	409044 <usbdc_init+0x30>
		return rc;
  409040:	68fb      	ldr	r3, [r7, #12]
  409042:	e010      	b.n	409066 <usbdc_init+0x52>
	}

	memset(&usbdc, 0, sizeof(usbdc));
  409044:	2220      	movs	r2, #32
  409046:	2100      	movs	r1, #0
  409048:	480c      	ldr	r0, [pc, #48]	; (40907c <usbdc_init+0x68>)
  40904a:	4b0d      	ldr	r3, [pc, #52]	; (409080 <usbdc_init+0x6c>)
  40904c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
  40904e:	4a0b      	ldr	r2, [pc, #44]	; (40907c <usbdc_init+0x68>)
  409050:	687b      	ldr	r3, [r7, #4]
  409052:	6153      	str	r3, [r2, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
  409054:	490b      	ldr	r1, [pc, #44]	; (409084 <usbdc_init+0x70>)
  409056:	2000      	movs	r0, #0
  409058:	4b0b      	ldr	r3, [pc, #44]	; (409088 <usbdc_init+0x74>)
  40905a:	4798      	blx	r3
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
  40905c:	490b      	ldr	r1, [pc, #44]	; (40908c <usbdc_init+0x78>)
  40905e:	2001      	movs	r0, #1
  409060:	4b09      	ldr	r3, [pc, #36]	; (409088 <usbdc_init+0x74>)
  409062:	4798      	blx	r3

	return 0;
  409064:	2300      	movs	r3, #0
}
  409066:	4618      	mov	r0, r3
  409068:	3710      	adds	r7, #16
  40906a:	46bd      	mov	sp, r7
  40906c:	bd80      	pop	{r7, pc}
  40906e:	bf00      	nop
  409070:	0040983c 	.word	0x0040983c
  409074:	004027fd 	.word	0x004027fd
  409078:	004022a9 	.word	0x004022a9
  40907c:	2040181c 	.word	0x2040181c
  409080:	00409533 	.word	0x00409533
  409084:	00408d71 	.word	0x00408d71
  409088:	00402355 	.word	0x00402355
  40908c:	00408f4d 	.word	0x00408f4d

00409090 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
  409090:	b580      	push	{r7, lr}
  409092:	b082      	sub	sp, #8
  409094:	af00      	add	r7, sp, #0
  409096:	6078      	str	r0, [r7, #4]
	list_insert_at_end(&usbdc.func_list, func);
  409098:	6879      	ldr	r1, [r7, #4]
  40909a:	4803      	ldr	r0, [pc, #12]	; (4090a8 <usbdc_register_function+0x18>)
  40909c:	4b03      	ldr	r3, [pc, #12]	; (4090ac <usbdc_register_function+0x1c>)
  40909e:	4798      	blx	r3
}
  4090a0:	bf00      	nop
  4090a2:	3708      	adds	r7, #8
  4090a4:	46bd      	mov	sp, r7
  4090a6:	bd80      	pop	{r7, pc}
  4090a8:	2040182c 	.word	0x2040182c
  4090ac:	0040285d 	.word	0x0040285d

004090b0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
  4090b0:	b580      	push	{r7, lr}
  4090b2:	b082      	sub	sp, #8
  4090b4:	af00      	add	r7, sp, #0
  4090b6:	6078      	str	r0, [r7, #4]
	if (usbdc.state >= USBD_S_POWER) {
  4090b8:	4b0f      	ldr	r3, [pc, #60]	; (4090f8 <usbdc_start+0x48>)
  4090ba:	7e9b      	ldrb	r3, [r3, #26]
  4090bc:	2b00      	cmp	r3, #0
  4090be:	d002      	beq.n	4090c6 <usbdc_start+0x16>
		return ERR_BUSY;
  4090c0:	f06f 0303 	mvn.w	r3, #3
  4090c4:	e013      	b.n	4090ee <usbdc_start+0x3e>
	}

	if (desces) {
  4090c6:	687b      	ldr	r3, [r7, #4]
  4090c8:	2b00      	cmp	r3, #0
  4090ca:	d00e      	beq.n	4090ea <usbdc_start+0x3a>
		usbdc.desces.ls_fs = desces;
  4090cc:	4a0a      	ldr	r2, [pc, #40]	; (4090f8 <usbdc_start+0x48>)
  4090ce:	687b      	ldr	r3, [r7, #4]
  4090d0:	6013      	str	r3, [r2, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
  4090d2:	687b      	ldr	r3, [r7, #4]
  4090d4:	681b      	ldr	r3, [r3, #0]
  4090d6:	79da      	ldrb	r2, [r3, #7]
  4090d8:	4b07      	ldr	r3, [pc, #28]	; (4090f8 <usbdc_start+0x48>)
  4090da:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
  4090dc:	4b06      	ldr	r3, [pc, #24]	; (4090f8 <usbdc_start+0x48>)
  4090de:	2201      	movs	r2, #1
  4090e0:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
  4090e2:	4b06      	ldr	r3, [pc, #24]	; (4090fc <usbdc_start+0x4c>)
  4090e4:	4798      	blx	r3
	return ERR_NONE;
  4090e6:	2300      	movs	r3, #0
  4090e8:	e001      	b.n	4090ee <usbdc_start+0x3e>
		return ERR_BAD_DATA;
  4090ea:	f06f 0308 	mvn.w	r3, #8
}
  4090ee:	4618      	mov	r0, r3
  4090f0:	3708      	adds	r7, #8
  4090f2:	46bd      	mov	sp, r7
  4090f4:	bd80      	pop	{r7, pc}
  4090f6:	bf00      	nop
  4090f8:	2040181c 	.word	0x2040181c
  4090fc:	00402379 	.word	0x00402379

00409100 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
  409100:	b580      	push	{r7, lr}
  409102:	af00      	add	r7, sp, #0
	usb_d_attach();
  409104:	4b01      	ldr	r3, [pc, #4]	; (40910c <usbdc_attach+0xc>)
  409106:	4798      	blx	r3
}
  409108:	bf00      	nop
  40910a:	bd80      	pop	{r7, pc}
  40910c:	0040238d 	.word	0x0040238d

00409110 <usbdc_get_ctrl_buffer>:

/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
  409110:	b480      	push	{r7}
  409112:	af00      	add	r7, sp, #0
	return usbdc.ctrl_buf;
  409114:	4b03      	ldr	r3, [pc, #12]	; (409124 <usbdc_get_ctrl_buffer+0x14>)
  409116:	695b      	ldr	r3, [r3, #20]
}
  409118:	4618      	mov	r0, r3
  40911a:	46bd      	mov	sp, r7
  40911c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409120:	4770      	bx	lr
  409122:	bf00      	nop
  409124:	2040181c 	.word	0x2040181c

00409128 <usbdc_get_state>:

/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
  409128:	b480      	push	{r7}
  40912a:	af00      	add	r7, sp, #0
	if (usbdc.state & USBD_S_SUSPEND) {
  40912c:	4b07      	ldr	r3, [pc, #28]	; (40914c <usbdc_get_state+0x24>)
  40912e:	7e9b      	ldrb	r3, [r3, #26]
  409130:	f003 0310 	and.w	r3, r3, #16
  409134:	2b00      	cmp	r3, #0
  409136:	d001      	beq.n	40913c <usbdc_get_state+0x14>
		return USBD_S_SUSPEND;
  409138:	2310      	movs	r3, #16
  40913a:	e001      	b.n	409140 <usbdc_get_state+0x18>
	}
	return usbdc.state;
  40913c:	4b03      	ldr	r3, [pc, #12]	; (40914c <usbdc_get_state+0x24>)
  40913e:	7e9b      	ldrb	r3, [r3, #26]
}
  409140:	4618      	mov	r0, r3
  409142:	46bd      	mov	sp, r7
  409144:	f85d 7b04 	ldr.w	r7, [sp], #4
  409148:	4770      	bx	lr
  40914a:	bf00      	nop
  40914c:	2040181c 	.word	0x2040181c

00409150 <usb_get_u16>:
{
  409150:	b480      	push	{r7}
  409152:	b083      	sub	sp, #12
  409154:	af00      	add	r7, sp, #0
  409156:	6078      	str	r0, [r7, #4]
	return (ptr[0] + (ptr[1] << 8));
  409158:	687b      	ldr	r3, [r7, #4]
  40915a:	781b      	ldrb	r3, [r3, #0]
  40915c:	b29a      	uxth	r2, r3
  40915e:	687b      	ldr	r3, [r7, #4]
  409160:	3301      	adds	r3, #1
  409162:	781b      	ldrb	r3, [r3, #0]
  409164:	b29b      	uxth	r3, r3
  409166:	021b      	lsls	r3, r3, #8
  409168:	b29b      	uxth	r3, r3
  40916a:	4413      	add	r3, r2
  40916c:	b29b      	uxth	r3, r3
}
  40916e:	4618      	mov	r0, r3
  409170:	370c      	adds	r7, #12
  409172:	46bd      	mov	sp, r7
  409174:	f85d 7b04 	ldr.w	r7, [sp], #4
  409178:	4770      	bx	lr

0040917a <usb_desc_len>:
{
  40917a:	b480      	push	{r7}
  40917c:	b083      	sub	sp, #12
  40917e:	af00      	add	r7, sp, #0
  409180:	6078      	str	r0, [r7, #4]
	return desc[0];
  409182:	687b      	ldr	r3, [r7, #4]
  409184:	781b      	ldrb	r3, [r3, #0]
}
  409186:	4618      	mov	r0, r3
  409188:	370c      	adds	r7, #12
  40918a:	46bd      	mov	sp, r7
  40918c:	f85d 7b04 	ldr.w	r7, [sp], #4
  409190:	4770      	bx	lr

00409192 <usb_desc_type>:
{
  409192:	b480      	push	{r7}
  409194:	b083      	sub	sp, #12
  409196:	af00      	add	r7, sp, #0
  409198:	6078      	str	r0, [r7, #4]
	return desc[1];
  40919a:	687b      	ldr	r3, [r7, #4]
  40919c:	3301      	adds	r3, #1
  40919e:	781b      	ldrb	r3, [r3, #0]
}
  4091a0:	4618      	mov	r0, r3
  4091a2:	370c      	adds	r7, #12
  4091a4:	46bd      	mov	sp, r7
  4091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4091aa:	4770      	bx	lr

004091ac <usb_desc_next>:
{
  4091ac:	b580      	push	{r7, lr}
  4091ae:	b082      	sub	sp, #8
  4091b0:	af00      	add	r7, sp, #0
  4091b2:	6078      	str	r0, [r7, #4]
	return (desc + usb_desc_len(desc));
  4091b4:	6878      	ldr	r0, [r7, #4]
  4091b6:	4b05      	ldr	r3, [pc, #20]	; (4091cc <usb_desc_next+0x20>)
  4091b8:	4798      	blx	r3
  4091ba:	4603      	mov	r3, r0
  4091bc:	461a      	mov	r2, r3
  4091be:	687b      	ldr	r3, [r7, #4]
  4091c0:	4413      	add	r3, r2
}
  4091c2:	4618      	mov	r0, r3
  4091c4:	3708      	adds	r7, #8
  4091c6:	46bd      	mov	sp, r7
  4091c8:	bd80      	pop	{r7, pc}
  4091ca:	bf00      	nop
  4091cc:	0040917b 	.word	0x0040917b

004091d0 <usb_cfg_desc_total_len>:
{
  4091d0:	b580      	push	{r7, lr}
  4091d2:	b082      	sub	sp, #8
  4091d4:	af00      	add	r7, sp, #0
  4091d6:	6078      	str	r0, [r7, #4]
	return usb_get_u16(cfg_desc + 2);
  4091d8:	687b      	ldr	r3, [r7, #4]
  4091da:	3302      	adds	r3, #2
  4091dc:	4618      	mov	r0, r3
  4091de:	4b03      	ldr	r3, [pc, #12]	; (4091ec <usb_cfg_desc_total_len+0x1c>)
  4091e0:	4798      	blx	r3
  4091e2:	4603      	mov	r3, r0
}
  4091e4:	4618      	mov	r0, r3
  4091e6:	3708      	adds	r7, #8
  4091e8:	46bd      	mov	sp, r7
  4091ea:	bd80      	pop	{r7, pc}
  4091ec:	00409151 	.word	0x00409151

004091f0 <usb_cfg_desc_next>:
/** \brief Get Next USB Descriptor After the Configuration Descriptors list
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
  4091f0:	b580      	push	{r7, lr}
  4091f2:	b082      	sub	sp, #8
  4091f4:	af00      	add	r7, sp, #0
  4091f6:	6078      	str	r0, [r7, #4]
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
  4091f8:	6878      	ldr	r0, [r7, #4]
  4091fa:	4b05      	ldr	r3, [pc, #20]	; (409210 <usb_cfg_desc_next+0x20>)
  4091fc:	4798      	blx	r3
  4091fe:	4603      	mov	r3, r0
  409200:	461a      	mov	r2, r3
  409202:	687b      	ldr	r3, [r7, #4]
  409204:	4413      	add	r3, r2
}
  409206:	4618      	mov	r0, r3
  409208:	3708      	adds	r7, #8
  40920a:	46bd      	mov	sp, r7
  40920c:	bd80      	pop	{r7, pc}
  40920e:	bf00      	nop
  409210:	004091d1 	.word	0x004091d1

00409214 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
  409214:	b580      	push	{r7, lr}
  409216:	b084      	sub	sp, #16
  409218:	af00      	add	r7, sp, #0
  40921a:	60f8      	str	r0, [r7, #12]
  40921c:	60b9      	str	r1, [r7, #8]
  40921e:	4613      	mov	r3, r2
  409220:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
  409222:	e015      	b.n	409250 <usb_find_desc+0x3c>
		_desc_len_check();
  409224:	68f8      	ldr	r0, [r7, #12]
  409226:	4b0f      	ldr	r3, [pc, #60]	; (409264 <usb_find_desc+0x50>)
  409228:	4798      	blx	r3
  40922a:	4603      	mov	r3, r0
  40922c:	2b01      	cmp	r3, #1
  40922e:	d801      	bhi.n	409234 <usb_find_desc+0x20>
  409230:	2300      	movs	r3, #0
  409232:	e012      	b.n	40925a <usb_find_desc+0x46>
		if (type == usb_desc_type(desc)) {
  409234:	68f8      	ldr	r0, [r7, #12]
  409236:	4b0c      	ldr	r3, [pc, #48]	; (409268 <usb_find_desc+0x54>)
  409238:	4798      	blx	r3
  40923a:	4603      	mov	r3, r0
  40923c:	461a      	mov	r2, r3
  40923e:	79fb      	ldrb	r3, [r7, #7]
  409240:	4293      	cmp	r3, r2
  409242:	d101      	bne.n	409248 <usb_find_desc+0x34>
			return desc;
  409244:	68fb      	ldr	r3, [r7, #12]
  409246:	e008      	b.n	40925a <usb_find_desc+0x46>
		}
		desc = usb_desc_next(desc);
  409248:	68f8      	ldr	r0, [r7, #12]
  40924a:	4b08      	ldr	r3, [pc, #32]	; (40926c <usb_find_desc+0x58>)
  40924c:	4798      	blx	r3
  40924e:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
  409250:	68fa      	ldr	r2, [r7, #12]
  409252:	68bb      	ldr	r3, [r7, #8]
  409254:	429a      	cmp	r2, r3
  409256:	d3e5      	bcc.n	409224 <usb_find_desc+0x10>
	}
	return NULL;
  409258:	2300      	movs	r3, #0
}
  40925a:	4618      	mov	r0, r3
  40925c:	3710      	adds	r7, #16
  40925e:	46bd      	mov	sp, r7
  409260:	bd80      	pop	{r7, pc}
  409262:	bf00      	nop
  409264:	0040917b 	.word	0x0040917b
  409268:	00409193 	.word	0x00409193
  40926c:	004091ad 	.word	0x004091ad

00409270 <usb_find_ep_desc>:
	}
	return eof;
}

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
  409270:	b580      	push	{r7, lr}
  409272:	b082      	sub	sp, #8
  409274:	af00      	add	r7, sp, #0
  409276:	6078      	str	r0, [r7, #4]
  409278:	6039      	str	r1, [r7, #0]
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
  40927a:	e019      	b.n	4092b0 <usb_find_ep_desc+0x40>
		_desc_len_check();
  40927c:	6878      	ldr	r0, [r7, #4]
  40927e:	4b12      	ldr	r3, [pc, #72]	; (4092c8 <usb_find_ep_desc+0x58>)
  409280:	4798      	blx	r3
  409282:	4603      	mov	r3, r0
  409284:	2b01      	cmp	r3, #1
  409286:	d801      	bhi.n	40928c <usb_find_ep_desc+0x1c>
  409288:	2300      	movs	r3, #0
  40928a:	e018      	b.n	4092be <usb_find_ep_desc+0x4e>
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
  40928c:	6878      	ldr	r0, [r7, #4]
  40928e:	4b0f      	ldr	r3, [pc, #60]	; (4092cc <usb_find_ep_desc+0x5c>)
  409290:	4798      	blx	r3
  409292:	4603      	mov	r3, r0
  409294:	2b04      	cmp	r3, #4
  409296:	d010      	beq.n	4092ba <usb_find_ep_desc+0x4a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
  409298:	6878      	ldr	r0, [r7, #4]
  40929a:	4b0c      	ldr	r3, [pc, #48]	; (4092cc <usb_find_ep_desc+0x5c>)
  40929c:	4798      	blx	r3
  40929e:	4603      	mov	r3, r0
  4092a0:	2b05      	cmp	r3, #5
  4092a2:	d101      	bne.n	4092a8 <usb_find_ep_desc+0x38>
			return desc;
  4092a4:	687b      	ldr	r3, [r7, #4]
  4092a6:	e00a      	b.n	4092be <usb_find_ep_desc+0x4e>
		}
		desc = usb_desc_next(desc);
  4092a8:	6878      	ldr	r0, [r7, #4]
  4092aa:	4b09      	ldr	r3, [pc, #36]	; (4092d0 <usb_find_ep_desc+0x60>)
  4092ac:	4798      	blx	r3
  4092ae:	6078      	str	r0, [r7, #4]
	while (desc < eof) {
  4092b0:	687a      	ldr	r2, [r7, #4]
  4092b2:	683b      	ldr	r3, [r7, #0]
  4092b4:	429a      	cmp	r2, r3
  4092b6:	d3e1      	bcc.n	40927c <usb_find_ep_desc+0xc>
  4092b8:	e000      	b.n	4092bc <usb_find_ep_desc+0x4c>
			break;
  4092ba:	bf00      	nop
	}
	return NULL;
  4092bc:	2300      	movs	r3, #0
}
  4092be:	4618      	mov	r0, r3
  4092c0:	3708      	adds	r7, #8
  4092c2:	46bd      	mov	sp, r7
  4092c4:	bd80      	pop	{r7, pc}
  4092c6:	bf00      	nop
  4092c8:	0040917b 	.word	0x0040917b
  4092cc:	00409193 	.word	0x00409193
  4092d0:	004091ad 	.word	0x004091ad

004092d4 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
  4092d4:	b580      	push	{r7, lr}
  4092d6:	b084      	sub	sp, #16
  4092d8:	af00      	add	r7, sp, #0
  4092da:	60f8      	str	r0, [r7, #12]
  4092dc:	60b9      	str	r1, [r7, #8]
  4092de:	4613      	mov	r3, r2
  4092e0:	71fb      	strb	r3, [r7, #7]
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
  4092e2:	2202      	movs	r2, #2
  4092e4:	68b9      	ldr	r1, [r7, #8]
  4092e6:	68f8      	ldr	r0, [r7, #12]
  4092e8:	4b15      	ldr	r3, [pc, #84]	; (409340 <usb_find_cfg_desc+0x6c>)
  4092ea:	4798      	blx	r3
  4092ec:	60f8      	str	r0, [r7, #12]
	if (!desc) {
  4092ee:	68fb      	ldr	r3, [r7, #12]
  4092f0:	2b00      	cmp	r3, #0
  4092f2:	d11a      	bne.n	40932a <usb_find_cfg_desc+0x56>
		return NULL;
  4092f4:	2300      	movs	r3, #0
  4092f6:	e01f      	b.n	409338 <usb_find_cfg_desc+0x64>
	}
	while (desc < eof) {
		_desc_len_check();
  4092f8:	68f8      	ldr	r0, [r7, #12]
  4092fa:	4b12      	ldr	r3, [pc, #72]	; (409344 <usb_find_cfg_desc+0x70>)
  4092fc:	4798      	blx	r3
  4092fe:	4603      	mov	r3, r0
  409300:	2b01      	cmp	r3, #1
  409302:	d801      	bhi.n	409308 <usb_find_cfg_desc+0x34>
  409304:	2300      	movs	r3, #0
  409306:	e017      	b.n	409338 <usb_find_cfg_desc+0x64>
		if (desc[1] != USB_DT_CONFIG) {
  409308:	68fb      	ldr	r3, [r7, #12]
  40930a:	3301      	adds	r3, #1
  40930c:	781b      	ldrb	r3, [r3, #0]
  40930e:	2b02      	cmp	r3, #2
  409310:	d110      	bne.n	409334 <usb_find_cfg_desc+0x60>
			break;
		}
		if (desc[5] == cfg_value) {
  409312:	68fb      	ldr	r3, [r7, #12]
  409314:	3305      	adds	r3, #5
  409316:	781b      	ldrb	r3, [r3, #0]
  409318:	79fa      	ldrb	r2, [r7, #7]
  40931a:	429a      	cmp	r2, r3
  40931c:	d101      	bne.n	409322 <usb_find_cfg_desc+0x4e>
			return desc;
  40931e:	68fb      	ldr	r3, [r7, #12]
  409320:	e00a      	b.n	409338 <usb_find_cfg_desc+0x64>
		}
		desc = usb_cfg_desc_next(desc);
  409322:	68f8      	ldr	r0, [r7, #12]
  409324:	4b08      	ldr	r3, [pc, #32]	; (409348 <usb_find_cfg_desc+0x74>)
  409326:	4798      	blx	r3
  409328:	60f8      	str	r0, [r7, #12]
	while (desc < eof) {
  40932a:	68fa      	ldr	r2, [r7, #12]
  40932c:	68bb      	ldr	r3, [r7, #8]
  40932e:	429a      	cmp	r2, r3
  409330:	d3e2      	bcc.n	4092f8 <usb_find_cfg_desc+0x24>
  409332:	e000      	b.n	409336 <usb_find_cfg_desc+0x62>
			break;
  409334:	bf00      	nop
	}
	return NULL;
  409336:	2300      	movs	r3, #0
}
  409338:	4618      	mov	r0, r3
  40933a:	3710      	adds	r7, #16
  40933c:	46bd      	mov	sp, r7
  40933e:	bd80      	pop	{r7, pc}
  409340:	00409215 	.word	0x00409215
  409344:	0040917b 	.word	0x0040917b
  409348:	004091f1 	.word	0x004091f1

0040934c <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
  40934c:	b580      	push	{r7, lr}
  40934e:	b086      	sub	sp, #24
  409350:	af00      	add	r7, sp, #0
  409352:	60f8      	str	r0, [r7, #12]
  409354:	60b9      	str	r1, [r7, #8]
  409356:	4613      	mov	r3, r2
  409358:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
  40935a:	2300      	movs	r3, #0
  40935c:	75fb      	strb	r3, [r7, #23]
  40935e:	e020      	b.n	4093a2 <usb_find_str_desc+0x56>
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
  409360:	2203      	movs	r2, #3
  409362:	68b9      	ldr	r1, [r7, #8]
  409364:	68f8      	ldr	r0, [r7, #12]
  409366:	4b13      	ldr	r3, [pc, #76]	; (4093b4 <usb_find_str_desc+0x68>)
  409368:	4798      	blx	r3
  40936a:	60f8      	str	r0, [r7, #12]
		if (desc) {
  40936c:	68fb      	ldr	r3, [r7, #12]
  40936e:	2b00      	cmp	r3, #0
  409370:	d015      	beq.n	40939e <usb_find_str_desc+0x52>
			_desc_len_check();
  409372:	68f8      	ldr	r0, [r7, #12]
  409374:	4b10      	ldr	r3, [pc, #64]	; (4093b8 <usb_find_str_desc+0x6c>)
  409376:	4798      	blx	r3
  409378:	4603      	mov	r3, r0
  40937a:	2b01      	cmp	r3, #1
  40937c:	d801      	bhi.n	409382 <usb_find_str_desc+0x36>
  40937e:	2300      	movs	r3, #0
  409380:	e014      	b.n	4093ac <usb_find_str_desc+0x60>
			if (i == str_index) {
  409382:	7dfa      	ldrb	r2, [r7, #23]
  409384:	79fb      	ldrb	r3, [r7, #7]
  409386:	429a      	cmp	r2, r3
  409388:	d101      	bne.n	40938e <usb_find_str_desc+0x42>
				return desc;
  40938a:	68fb      	ldr	r3, [r7, #12]
  40938c:	e00e      	b.n	4093ac <usb_find_str_desc+0x60>
			}
			i++;
  40938e:	7dfb      	ldrb	r3, [r7, #23]
  409390:	3301      	adds	r3, #1
  409392:	75fb      	strb	r3, [r7, #23]
			desc = usb_desc_next(desc);
  409394:	68f8      	ldr	r0, [r7, #12]
  409396:	4b09      	ldr	r3, [pc, #36]	; (4093bc <usb_find_str_desc+0x70>)
  409398:	4798      	blx	r3
  40939a:	60f8      	str	r0, [r7, #12]
  40939c:	e001      	b.n	4093a2 <usb_find_str_desc+0x56>
		} else {
			return NULL;
  40939e:	2300      	movs	r3, #0
  4093a0:	e004      	b.n	4093ac <usb_find_str_desc+0x60>
	for (i = 0; desc < eof;) {
  4093a2:	68fa      	ldr	r2, [r7, #12]
  4093a4:	68bb      	ldr	r3, [r7, #8]
  4093a6:	429a      	cmp	r2, r3
  4093a8:	d3da      	bcc.n	409360 <usb_find_str_desc+0x14>
		}
	}
	return NULL;
  4093aa:	2300      	movs	r3, #0
}
  4093ac:	4618      	mov	r0, r3
  4093ae:	3718      	adds	r7, #24
  4093b0:	46bd      	mov	sp, r7
  4093b2:	bd80      	pop	{r7, pc}
  4093b4:	00409215 	.word	0x00409215
  4093b8:	0040917b 	.word	0x0040917b
  4093bc:	004091ad 	.word	0x004091ad

004093c0 <usb_device_cb_bulk_out>:

/**
 * \brief Callback invoked when bulk OUT data received
 */
static bool usb_device_cb_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
  4093c0:	b580      	push	{r7, lr}
  4093c2:	b082      	sub	sp, #8
  4093c4:	af00      	add	r7, sp, #0
  4093c6:	4603      	mov	r3, r0
  4093c8:	603a      	str	r2, [r7, #0]
  4093ca:	71fb      	strb	r3, [r7, #7]
  4093cc:	460b      	mov	r3, r1
  4093ce:	71bb      	strb	r3, [r7, #6]
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
  4093d0:	6839      	ldr	r1, [r7, #0]
  4093d2:	4804      	ldr	r0, [pc, #16]	; (4093e4 <usb_device_cb_bulk_out+0x24>)
  4093d4:	4b04      	ldr	r3, [pc, #16]	; (4093e8 <usb_device_cb_bulk_out+0x28>)
  4093d6:	4798      	blx	r3

	/* No error. */
	return false;
  4093d8:	2300      	movs	r3, #0
}
  4093da:	4618      	mov	r0, r3
  4093dc:	3708      	adds	r7, #8
  4093de:	46bd      	mov	sp, r7
  4093e0:	bd80      	pop	{r7, pc}
  4093e2:	bf00      	nop
  4093e4:	2040183c 	.word	0x2040183c
  4093e8:	00408345 	.word	0x00408345

004093ec <usb_device_cb_bulk_in>:

/**
 * \brief Callback invoked when bulk IN data received
 */
static bool usb_device_cb_bulk_in(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
  4093ec:	b580      	push	{r7, lr}
  4093ee:	b082      	sub	sp, #8
  4093f0:	af00      	add	r7, sp, #0
  4093f2:	4603      	mov	r3, r0
  4093f4:	603a      	str	r2, [r7, #0]
  4093f6:	71fb      	strb	r3, [r7, #7]
  4093f8:	460b      	mov	r3, r1
  4093fa:	71bb      	strb	r3, [r7, #6]
	/* Echo data. */
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
  4093fc:	2140      	movs	r1, #64	; 0x40
  4093fe:	4804      	ldr	r0, [pc, #16]	; (409410 <usb_device_cb_bulk_in+0x24>)
  409400:	4b04      	ldr	r3, [pc, #16]	; (409414 <usb_device_cb_bulk_in+0x28>)
  409402:	4798      	blx	r3

	/* No error. */
	return false;
  409404:	2300      	movs	r3, #0
}
  409406:	4618      	mov	r0, r3
  409408:	3708      	adds	r7, #8
  40940a:	46bd      	mov	sp, r7
  40940c:	bd80      	pop	{r7, pc}
  40940e:	bf00      	nop
  409410:	2040183c 	.word	0x2040183c
  409414:	00408301 	.word	0x00408301

00409418 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
  409418:	b580      	push	{r7, lr}
  40941a:	b082      	sub	sp, #8
  40941c:	af00      	add	r7, sp, #0
  40941e:	80b8      	strh	r0, [r7, #4]
	if (state.rs232.DTR) {
  409420:	793b      	ldrb	r3, [r7, #4]
  409422:	f003 0301 	and.w	r3, r3, #1
  409426:	b2db      	uxtb	r3, r3
  409428:	2b00      	cmp	r3, #0
  40942a:	d00b      	beq.n	409444 <usb_device_cb_state_c+0x2c>
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
  40942c:	4908      	ldr	r1, [pc, #32]	; (409450 <usb_device_cb_state_c+0x38>)
  40942e:	2000      	movs	r0, #0
  409430:	4b08      	ldr	r3, [pc, #32]	; (409454 <usb_device_cb_state_c+0x3c>)
  409432:	4798      	blx	r3
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
  409434:	4908      	ldr	r1, [pc, #32]	; (409458 <usb_device_cb_state_c+0x40>)
  409436:	2001      	movs	r0, #1
  409438:	4b06      	ldr	r3, [pc, #24]	; (409454 <usb_device_cb_state_c+0x3c>)
  40943a:	4798      	blx	r3
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
  40943c:	2140      	movs	r1, #64	; 0x40
  40943e:	4807      	ldr	r0, [pc, #28]	; (40945c <usb_device_cb_state_c+0x44>)
  409440:	4b07      	ldr	r3, [pc, #28]	; (409460 <usb_device_cb_state_c+0x48>)
  409442:	4798      	blx	r3
	}

	/* No error. */
	return false;
  409444:	2300      	movs	r3, #0
}
  409446:	4618      	mov	r0, r3
  409448:	3708      	adds	r7, #8
  40944a:	46bd      	mov	sp, r7
  40944c:	bd80      	pop	{r7, pc}
  40944e:	bf00      	nop
  409450:	004093c1 	.word	0x004093c1
  409454:	00408389 	.word	0x00408389
  409458:	004093ed 	.word	0x004093ed
  40945c:	2040183c 	.word	0x2040183c
  409460:	00408301 	.word	0x00408301

00409464 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
  409464:	b580      	push	{r7, lr}
  409466:	af00      	add	r7, sp, #0
	/* usb stack init */
	usbdc_init(ctrl_buffer);
  409468:	4805      	ldr	r0, [pc, #20]	; (409480 <cdc_device_acm_init+0x1c>)
  40946a:	4b06      	ldr	r3, [pc, #24]	; (409484 <cdc_device_acm_init+0x20>)
  40946c:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
  40946e:	4b06      	ldr	r3, [pc, #24]	; (409488 <cdc_device_acm_init+0x24>)
  409470:	4798      	blx	r3

	usbdc_start(single_desc);
  409472:	4806      	ldr	r0, [pc, #24]	; (40948c <cdc_device_acm_init+0x28>)
  409474:	4b06      	ldr	r3, [pc, #24]	; (409490 <cdc_device_acm_init+0x2c>)
  409476:	4798      	blx	r3
	usbdc_attach();
  409478:	4b06      	ldr	r3, [pc, #24]	; (409494 <cdc_device_acm_init+0x30>)
  40947a:	4798      	blx	r3
}
  40947c:	bf00      	nop
  40947e:	bd80      	pop	{r7, pc}
  409480:	2040187c 	.word	0x2040187c
  409484:	00409015 	.word	0x00409015
  409488:	004082b1 	.word	0x004082b1
  40948c:	20400080 	.word	0x20400080
  409490:	004090b1 	.word	0x004090b1
  409494:	00409101 	.word	0x00409101

00409498 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
  409498:	b580      	push	{r7, lr}
  40949a:	af00      	add	r7, sp, #0
	while (!cdcdf_acm_is_enabled()) {
  40949c:	bf00      	nop
  40949e:	4b06      	ldr	r3, [pc, #24]	; (4094b8 <cdcd_acm_example+0x20>)
  4094a0:	4798      	blx	r3
  4094a2:	4603      	mov	r3, r0
  4094a4:	f083 0301 	eor.w	r3, r3, #1
  4094a8:	b2db      	uxtb	r3, r3
  4094aa:	2b00      	cmp	r3, #0
  4094ac:	d1f7      	bne.n	40949e <cdcd_acm_example+0x6>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
  4094ae:	4903      	ldr	r1, [pc, #12]	; (4094bc <cdcd_acm_example+0x24>)
  4094b0:	2003      	movs	r0, #3
  4094b2:	4b03      	ldr	r3, [pc, #12]	; (4094c0 <cdcd_acm_example+0x28>)
  4094b4:	4798      	blx	r3

	while (1) {
  4094b6:	e7fe      	b.n	4094b6 <cdcd_acm_example+0x1e>
  4094b8:	00408401 	.word	0x00408401
  4094bc:	00409419 	.word	0x00409419
  4094c0:	00408389 	.word	0x00408389

004094c4 <usb_init>:
	}
}

void usb_init(void)
{
  4094c4:	b580      	push	{r7, lr}
  4094c6:	af00      	add	r7, sp, #0

	cdc_device_acm_init();
  4094c8:	4b01      	ldr	r3, [pc, #4]	; (4094d0 <usb_init+0xc>)
  4094ca:	4798      	blx	r3
}
  4094cc:	bf00      	nop
  4094ce:	bd80      	pop	{r7, pc}
  4094d0:	00409465 	.word	0x00409465

004094d4 <__libc_init_array>:
  4094d4:	b570      	push	{r4, r5, r6, lr}
  4094d6:	4e0d      	ldr	r6, [pc, #52]	; (40950c <__libc_init_array+0x38>)
  4094d8:	4c0d      	ldr	r4, [pc, #52]	; (409510 <__libc_init_array+0x3c>)
  4094da:	1ba4      	subs	r4, r4, r6
  4094dc:	10a4      	asrs	r4, r4, #2
  4094de:	2500      	movs	r5, #0
  4094e0:	42a5      	cmp	r5, r4
  4094e2:	d109      	bne.n	4094f8 <__libc_init_array+0x24>
  4094e4:	4e0b      	ldr	r6, [pc, #44]	; (409514 <__libc_init_array+0x40>)
  4094e6:	4c0c      	ldr	r4, [pc, #48]	; (409518 <__libc_init_array+0x44>)
  4094e8:	f000 f9b4 	bl	409854 <_init>
  4094ec:	1ba4      	subs	r4, r4, r6
  4094ee:	10a4      	asrs	r4, r4, #2
  4094f0:	2500      	movs	r5, #0
  4094f2:	42a5      	cmp	r5, r4
  4094f4:	d105      	bne.n	409502 <__libc_init_array+0x2e>
  4094f6:	bd70      	pop	{r4, r5, r6, pc}
  4094f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4094fc:	4798      	blx	r3
  4094fe:	3501      	adds	r5, #1
  409500:	e7ee      	b.n	4094e0 <__libc_init_array+0xc>
  409502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  409506:	4798      	blx	r3
  409508:	3501      	adds	r5, #1
  40950a:	e7f2      	b.n	4094f2 <__libc_init_array+0x1e>
  40950c:	00409860 	.word	0x00409860
  409510:	00409860 	.word	0x00409860
  409514:	00409860 	.word	0x00409860
  409518:	00409864 	.word	0x00409864

0040951c <memcpy>:
  40951c:	b510      	push	{r4, lr}
  40951e:	1e43      	subs	r3, r0, #1
  409520:	440a      	add	r2, r1
  409522:	4291      	cmp	r1, r2
  409524:	d100      	bne.n	409528 <memcpy+0xc>
  409526:	bd10      	pop	{r4, pc}
  409528:	f811 4b01 	ldrb.w	r4, [r1], #1
  40952c:	f803 4f01 	strb.w	r4, [r3, #1]!
  409530:	e7f7      	b.n	409522 <memcpy+0x6>

00409532 <memset>:
  409532:	4402      	add	r2, r0
  409534:	4603      	mov	r3, r0
  409536:	4293      	cmp	r3, r2
  409538:	d100      	bne.n	40953c <memset+0xa>
  40953a:	4770      	bx	lr
  40953c:	f803 1b01 	strb.w	r1, [r3], #1
  409540:	e7f9      	b.n	409536 <memset+0x4>
  409542:	0000      	movs	r0, r0
  409544:	682f2e2e 	.word	0x682f2e2e
  409548:	702f6c70 	.word	0x702f6c70
  40954c:	682f6f69 	.word	0x682f6f69
  409550:	675f6c70 	.word	0x675f6c70
  409554:	5f6f6970 	.word	0x5f6f6970
  409558:	65736162 	.word	0x65736162
  40955c:	0000682e 	.word	0x0000682e
  409560:	682f2e2e 	.word	0x682f2e2e
  409564:	732f6c61 	.word	0x732f6c61
  409568:	682f6372 	.word	0x682f6372
  40956c:	645f6c61 	.word	0x645f6c61
  409570:	735f6361 	.word	0x735f6361
  409574:	2e636e79 	.word	0x2e636e79
  409578:	00000063 	.word	0x00000063
  40957c:	682f2e2e 	.word	0x682f2e2e
  409580:	732f6c61 	.word	0x732f6c61
  409584:	682f6372 	.word	0x682f6372
  409588:	695f6c61 	.word	0x695f6c61
  40958c:	6d5f6332 	.word	0x6d5f6332
  409590:	6e79735f 	.word	0x6e79735f
  409594:	00632e63 	.word	0x00632e63
  409598:	682f2e2e 	.word	0x682f2e2e
  40959c:	732f6c61 	.word	0x732f6c61
  4095a0:	682f6372 	.word	0x682f6372
  4095a4:	735f6c61 	.word	0x735f6c61
  4095a8:	6d5f6970 	.word	0x6d5f6970
  4095ac:	616d645f 	.word	0x616d645f
  4095b0:	0000632e 	.word	0x0000632e
  4095b4:	682f2e2e 	.word	0x682f2e2e
  4095b8:	732f6c61 	.word	0x732f6c61
  4095bc:	682f6372 	.word	0x682f6372
  4095c0:	755f6c61 	.word	0x755f6c61
  4095c4:	74726173 	.word	0x74726173
  4095c8:	7973615f 	.word	0x7973615f
  4095cc:	632e636e 	.word	0x632e636e
  4095d0:	00000000 	.word	0x00000000
  4095d4:	682f2e2e 	.word	0x682f2e2e
  4095d8:	732f6c61 	.word	0x732f6c61
  4095dc:	682f6372 	.word	0x682f6372
  4095e0:	755f6c61 	.word	0x755f6c61
  4095e4:	74726173 	.word	0x74726173
  4095e8:	6e79735f 	.word	0x6e79735f
  4095ec:	00632e63 	.word	0x00632e63
  4095f0:	682f2e2e 	.word	0x682f2e2e
  4095f4:	752f6c61 	.word	0x752f6c61
  4095f8:	736c6974 	.word	0x736c6974
  4095fc:	6372732f 	.word	0x6372732f
  409600:	6974752f 	.word	0x6974752f
  409604:	6c5f736c 	.word	0x6c5f736c
  409608:	2e747369 	.word	0x2e747369
  40960c:	00000063 	.word	0x00000063
  409610:	682f2e2e 	.word	0x682f2e2e
  409614:	752f6c61 	.word	0x752f6c61
  409618:	736c6974 	.word	0x736c6974
  40961c:	6372732f 	.word	0x6372732f
  409620:	6974752f 	.word	0x6974752f
  409624:	725f736c 	.word	0x725f736c
  409628:	62676e69 	.word	0x62676e69
  40962c:	65666675 	.word	0x65666675
  409630:	00632e72 	.word	0x00632e72
  409634:	682f2e2e 	.word	0x682f2e2e
  409638:	642f6c70 	.word	0x642f6c70
  40963c:	682f6361 	.word	0x682f6361
  409640:	645f6c70 	.word	0x645f6c70
  409644:	632e6361 	.word	0x632e6361
  409648:	00000000 	.word	0x00000000

0040964c <_pio_irq_n>:
  40964c:	100c0b0a 00000011                       ........

00409654 <_ext_irq>:
  409654:	00000001 00000001 00000001 00000001     ................
  409664:	00000000 00000001 00000000 00000003     ................
  409674:	00800000 00800000 00800000 00000000     ................
  409684:	00800000 00000000 682f2e2e 702f6c70     ........../hpl/p
  409694:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  4096a4:	00000000                                ....

004096a8 <spi_regs>:
  4096a8:	00000000 80000000 00000001 04960c02     ................
  4096b8:	0000ffff 00000001 80000000 00000001     ................
  4096c8:	04960c02 0000ffff 682f2e2e 732f6c70     ........../hpl/s
  4096d8:	682f6970 735f6c70 632e6970 00000000     pi/hpl_spi.c....

004096e8 <_i2cm_sync_cfgs>:
  4096e8:	40018000 00000020 00000000 00000000     ...@ ...........
  4096f8:	0002baba 000249f0 4001c000 00000020     .....I.....@ ...
	...
  409710:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  409720:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  409730:	00000000 682f2e2e 752f6c70 2f747261     ....../hpl/uart/
  409740:	5f6c7068 74726175 0000632e 00001000     hpl_uart.c......
  409750:	00000c00 00000000 00000000 00000201     ................
  409760:	682f2e2e 752f6c70 73686273 6c70682f     ../hpl/usbhs/hpl
  409770:	6273755f 632e7368 00000000              _usbhs.c....

0040977c <_cfgs>:
  40977c:	030d4011 ffff0000 04072001 0000ffff     .@....... ......
  40978c:	010d4011 ffff0000 02072001 0000ffff     .@....... ......
  40979c:	00000040 00000000 00000040 00000000     @.......@.......
  4097ac:	00000040 00000000 00000040 00000000     @.......@.......
  4097bc:	00000040 00000000 00000040 00000000     @.......@.......
  4097cc:	00000040 00000000 00000040 00000000     @.......@.......
  4097dc:	00000040 00000000 00000040 00000000     @.......@.......
  4097ec:	00000040 00000000 00000040 00000000     @.......@.......
  4097fc:	00000040 00000000 00000040 00000000     @.......@.......
  40980c:	00000040 00000000 00000040 00000000     @.......@.......
  40981c:	00000040 00000000 00000040 00000000     @.......@.......
  40982c:	00000040 00000000 00000040 00000000     @.......@.......
  40983c:	752f2e2e 642f6273 63697665 73752f65     ../usb/device/us
  40984c:	2e636462 00000063                       bdc.c...

00409854 <_init>:
  409854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409856:	bf00      	nop
  409858:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40985a:	bc08      	pop	{r3}
  40985c:	469e      	mov	lr, r3
  40985e:	4770      	bx	lr

00409860 <__init_array_start>:
  409860:	00400179 	.word	0x00400179

00409864 <_fini>:
  409864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409866:	bf00      	nop
  409868:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40986a:	bc08      	pop	{r3}
  40986c:	469e      	mov	lr, r3
  40986e:	4770      	bx	lr

00409870 <__fini_array_start>:
  409870:	00400155 	.word	0x00400155
