
BBRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d08  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20400000  00406d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000013c0  20400020  00406d28  00020020  2**2
                  ALLOC
  3 .heap         00000200  204013e0  004080e8  00020020  2**0
                  ALLOC
  4 .stack        00000400  204015e0  004082e8  00020020  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019c01  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000335e  00000000  00000000  00039ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000dcf9  00000000  00000000  0003d006  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001848  00000000  00000000  0004acff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000016b0  00000000  00000000  0004c547  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036d7b  00000000  00000000  0004dbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018573  00000000  00000000  00084972  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000fcf9e  00000000  00000000  0009cee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000664c  00000000  00000000  00199e84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 19 40 20 2d 03 40 00 b1 03 40 00 b1 03 40 00     ..@ -.@...@...@.
  400010:	b1 03 40 00 b1 03 40 00 b1 03 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b1 03 40 00 b1 03 40 00 00 00 00 00 b1 03 40 00     ..@...@.......@.
  40003c:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  40004c:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  40005c:	b1 03 40 00 b1 03 40 00 00 00 00 00 b1 03 40 00     ..@...@.......@.
  40006c:	09 2b 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     .+@...@...@...@.
  40007c:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  40008c:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  40009c:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  4000ac:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  4000bc:	b1 03 40 00 b1 03 40 00 b1 03 40 00 e9 59 40 00     ..@...@...@..Y@.
	...
  4000e0:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  4000f0:	b1 03 40 00 b1 03 40 00 79 46 40 00 b1 03 40 00     ..@...@.yF@...@.
  400100:	b1 03 40 00 b1 03 40 00 b1 03 40 00 b1 03 40 00     ..@...@...@...@.
  400110:	b1 03 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	b1 03 40 00 b1 03 40 00 05 68 40 00 b1 03 40 00     ..@...@..h@...@.
  400130:	b1 03 40 00 00 00 00 00 b1 03 40 00 b1 03 40 00     ..@.......@...@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400020 	.word	0x20400020
  40015c:	00000000 	.word	0x00000000
  400160:	00406d08 	.word	0x00406d08

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00406d08 	.word	0x00406d08
  4001a0:	20400024 	.word	0x20400024
  4001a4:	00406d08 	.word	0x00406d08
  4001a8:	00000000 	.word	0x00000000

004001ac <AT86_Init>:
 * @pre All peripheral devices must be initialized before this function runs.
 *
 * @return     returns at86_return_codes enum values
 */
uint8_t AT86_Init(SpiDevice *spi_dev, IRQDevice *irq_dev, uint8_t atDev)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b087      	sub	sp, #28
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	60f8      	str	r0, [r7, #12]
  4001b4:	60b9      	str	r1, [r7, #8]
  4001b6:	4613      	mov	r3, r2
  4001b8:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *at = &Instance[atDev];
  4001ba:	79fa      	ldrb	r2, [r7, #7]
  4001bc:	4613      	mov	r3, r2
  4001be:	009b      	lsls	r3, r3, #2
  4001c0:	4413      	add	r3, r2
  4001c2:	00db      	lsls	r3, r3, #3
  4001c4:	4a3a      	ldr	r2, [pc, #232]	; (4002b0 <AT86_Init+0x104>)
  4001c6:	4413      	add	r3, r2
  4001c8:	613b      	str	r3, [r7, #16]
	
	if (spi_dev == NULL || irq_dev == NULL)
  4001ca:	68fb      	ldr	r3, [r7, #12]
  4001cc:	2b00      	cmp	r3, #0
  4001ce:	d002      	beq.n	4001d6 <AT86_Init+0x2a>
  4001d0:	68bb      	ldr	r3, [r7, #8]
  4001d2:	2b00      	cmp	r3, #0
  4001d4:	d101      	bne.n	4001da <AT86_Init+0x2e>
	{
		return AT86_ERROR;
  4001d6:	2302      	movs	r3, #2
  4001d8:	e064      	b.n	4002a4 <AT86_Init+0xf8>
	}

	if (currentInstances == MAX_AT86_INSTANCES)
  4001da:	4b36      	ldr	r3, [pc, #216]	; (4002b4 <AT86_Init+0x108>)
  4001dc:	781b      	ldrb	r3, [r3, #0]
  4001de:	2b03      	cmp	r3, #3
  4001e0:	d101      	bne.n	4001e6 <AT86_Init+0x3a>
	{
		return AT86_ERROR;
  4001e2:	2302      	movs	r3, #2
  4001e4:	e05e      	b.n	4002a4 <AT86_Init+0xf8>
	}

	if (at->initialized == 1)
  4001e6:	693b      	ldr	r3, [r7, #16]
  4001e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4001ec:	2b01      	cmp	r3, #1
  4001ee:	d101      	bne.n	4001f4 <AT86_Init+0x48>
	{
		return AT86_ERROR;
  4001f0:	2302      	movs	r3, #2
  4001f2:	e057      	b.n	4002a4 <AT86_Init+0xf8>
	}

	// Each AT86 must have its own SPI/IRQ handlers, no doubling up.
	if (currentInstances != 0)
  4001f4:	4b2f      	ldr	r3, [pc, #188]	; (4002b4 <AT86_Init+0x108>)
  4001f6:	781b      	ldrb	r3, [r3, #0]
  4001f8:	2b00      	cmp	r3, #0
  4001fa:	d025      	beq.n	400248 <AT86_Init+0x9c>
	{
		uint8_t i;
		for (i = 0; i < currentInstances; i++)
  4001fc:	2300      	movs	r3, #0
  4001fe:	75fb      	strb	r3, [r7, #23]
  400200:	e01d      	b.n	40023e <AT86_Init+0x92>
		{
			if ((IRQDevice *) &(Instance[i].irqDev) == irq_dev)
  400202:	7dfa      	ldrb	r2, [r7, #23]
  400204:	4613      	mov	r3, r2
  400206:	009b      	lsls	r3, r3, #2
  400208:	4413      	add	r3, r2
  40020a:	00db      	lsls	r3, r3, #3
  40020c:	3320      	adds	r3, #32
  40020e:	4a28      	ldr	r2, [pc, #160]	; (4002b0 <AT86_Init+0x104>)
  400210:	441a      	add	r2, r3
  400212:	68bb      	ldr	r3, [r7, #8]
  400214:	429a      	cmp	r2, r3
  400216:	d101      	bne.n	40021c <AT86_Init+0x70>
			{
				return AT86_ERROR;
  400218:	2302      	movs	r3, #2
  40021a:	e043      	b.n	4002a4 <AT86_Init+0xf8>
			}

			if ((SpiDevice *) &(Instance[i].spiDev) == spi_dev)
  40021c:	7dfa      	ldrb	r2, [r7, #23]
  40021e:	4613      	mov	r3, r2
  400220:	009b      	lsls	r3, r3, #2
  400222:	4413      	add	r3, r2
  400224:	00db      	lsls	r3, r3, #3
  400226:	3318      	adds	r3, #24
  400228:	4a21      	ldr	r2, [pc, #132]	; (4002b0 <AT86_Init+0x104>)
  40022a:	4413      	add	r3, r2
  40022c:	1d1a      	adds	r2, r3, #4
  40022e:	68fb      	ldr	r3, [r7, #12]
  400230:	429a      	cmp	r2, r3
  400232:	d101      	bne.n	400238 <AT86_Init+0x8c>
			{
				return AT86_ERROR;
  400234:	2302      	movs	r3, #2
  400236:	e035      	b.n	4002a4 <AT86_Init+0xf8>
		for (i = 0; i < currentInstances; i++)
  400238:	7dfb      	ldrb	r3, [r7, #23]
  40023a:	3301      	adds	r3, #1
  40023c:	75fb      	strb	r3, [r7, #23]
  40023e:	4b1d      	ldr	r3, [pc, #116]	; (4002b4 <AT86_Init+0x108>)
  400240:	781b      	ldrb	r3, [r3, #0]
  400242:	7dfa      	ldrb	r2, [r7, #23]
  400244:	429a      	cmp	r2, r3
  400246:	d3dc      	bcc.n	400202 <AT86_Init+0x56>
			}
		}
	}
	
	currentInstances++;
  400248:	4b1a      	ldr	r3, [pc, #104]	; (4002b4 <AT86_Init+0x108>)
  40024a:	781b      	ldrb	r3, [r3, #0]
  40024c:	3301      	adds	r3, #1
  40024e:	b2da      	uxtb	r2, r3
  400250:	4b18      	ldr	r3, [pc, #96]	; (4002b4 <AT86_Init+0x108>)
  400252:	701a      	strb	r2, [r3, #0]

	at->baseband_2400.baseband_state = AFE_STATE_POWER_OFF;
  400254:	693b      	ldr	r3, [r7, #16]
  400256:	2200      	movs	r2, #0
  400258:	731a      	strb	r2, [r3, #12]
	at->baseband_900.baseband_state = AFE_STATE_POWER_OFF;
  40025a:	693b      	ldr	r3, [r7, #16]
  40025c:	2200      	movs	r2, #0
  40025e:	701a      	strb	r2, [r3, #0]
	at->at86_state = AT86_STATE_INIT;
  400260:	693b      	ldr	r3, [r7, #16]
  400262:	2200      	movs	r2, #0
  400264:	761a      	strb	r2, [r3, #24]

	at->baseband_900.lastIRQ = 0;
  400266:	693b      	ldr	r3, [r7, #16]
  400268:	2200      	movs	r2, #0
  40026a:	70da      	strb	r2, [r3, #3]
	at->baseband_2400.lastIRQ = 0;
  40026c:	693b      	ldr	r3, [r7, #16]
  40026e:	2200      	movs	r2, #0
  400270:	73da      	strb	r2, [r3, #15]

	at->baseband_2400.CSMA_EN = 1;
  400272:	693b      	ldr	r3, [r7, #16]
  400274:	2201      	movs	r2, #1
  400276:	741a      	strb	r2, [r3, #16]

	at->baseband_900.parent = at;
  400278:	693b      	ldr	r3, [r7, #16]
  40027a:	693a      	ldr	r2, [r7, #16]
  40027c:	609a      	str	r2, [r3, #8]
	at->baseband_2400.parent = at;
  40027e:	693b      	ldr	r3, [r7, #16]
  400280:	693a      	ldr	r2, [r7, #16]
  400282:	615a      	str	r2, [r3, #20]

	//We set the peripheral interface associated with the driver here
	irq_dev->deviceDriver = (void *) at;
  400284:	68bb      	ldr	r3, [r7, #8]
  400286:	693a      	ldr	r2, [r7, #16]
  400288:	605a      	str	r2, [r3, #4]
	spi_dev->deviceDriver = (void *) at;
  40028a:	68fb      	ldr	r3, [r7, #12]
  40028c:	693a      	ldr	r2, [r7, #16]
  40028e:	605a      	str	r2, [r3, #4]
	
	//Set the devices here.
	at->irqDev = irq_dev;
  400290:	693b      	ldr	r3, [r7, #16]
  400292:	68ba      	ldr	r2, [r7, #8]
  400294:	621a      	str	r2, [r3, #32]
	at->spiDev = spi_dev;
  400296:	693b      	ldr	r3, [r7, #16]
  400298:	68fa      	ldr	r2, [r7, #12]
  40029a:	61da      	str	r2, [r3, #28]

	//This is most definitely wrong.
	irq_dev->callback = (void *)(AT86_IRQ_Handler);
  40029c:	68bb      	ldr	r3, [r7, #8]
  40029e:	4a06      	ldr	r2, [pc, #24]	; (4002b8 <AT86_Init+0x10c>)
  4002a0:	609a      	str	r2, [r3, #8]

	return AT86_OK;
  4002a2:	2300      	movs	r3, #0
}
  4002a4:	4618      	mov	r0, r3
  4002a6:	371c      	adds	r7, #28
  4002a8:	46bd      	mov	sp, r7
  4002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002ae:	4770      	bx	lr
  4002b0:	2040003c 	.word	0x2040003c
  4002b4:	204000b4 	.word	0x204000b4
  4002b8:	004002bd 	.word	0x004002bd

004002bc <AT86_IRQ_Handler>:

		}
}

void AT86_IRQ_Handler(uint8_t atDev)
{
  4002bc:	b480      	push	{r7}
  4002be:	b083      	sub	sp, #12
  4002c0:	af00      	add	r7, sp, #0
  4002c2:	4603      	mov	r3, r0
  4002c4:	71fb      	strb	r3, [r7, #7]
	//atDev->afe_900.gotIRQ++;
	//atDev->afe_2400.gotIRQ++;

	//Kick off SPI transaction here.  (Should be DMA'd)
}
  4002c6:	bf00      	nop
  4002c8:	370c      	adds	r7, #12
  4002ca:	46bd      	mov	sp, r7
  4002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d0:	4770      	bx	lr
	...

004002d4 <AT86_Test_Comms>:

void AT86_Test_Comms(uint8_t atDev)
{
  4002d4:	b580      	push	{r7, lr}
  4002d6:	b082      	sub	sp, #8
  4002d8:	af00      	add	r7, sp, #0
  4002da:	4603      	mov	r3, r0
  4002dc:	71fb      	strb	r3, [r7, #7]
	//READ = b15/b14 = 0
	//WRITE = B15 = 1 B14 = 0
	static uint8_t testBuf[10] = {};
	testBuf[0] = 0x00 | 0x03;
  4002de:	4b0c      	ldr	r3, [pc, #48]	; (400310 <AT86_Test_Comms+0x3c>)
  4002e0:	2203      	movs	r2, #3
  4002e2:	701a      	strb	r2, [r3, #0]
	testBuf[1] = 0x00;
  4002e4:	4b0a      	ldr	r3, [pc, #40]	; (400310 <AT86_Test_Comms+0x3c>)
  4002e6:	2200      	movs	r2, #0
  4002e8:	705a      	strb	r2, [r3, #1]
	
	glue_spi0_dma_send_bytes(Instance[atDev].spiDev, testBuf, 10);
  4002ea:	79fa      	ldrb	r2, [r7, #7]
  4002ec:	4909      	ldr	r1, [pc, #36]	; (400314 <AT86_Test_Comms+0x40>)
  4002ee:	4613      	mov	r3, r2
  4002f0:	009b      	lsls	r3, r3, #2
  4002f2:	4413      	add	r3, r2
  4002f4:	00db      	lsls	r3, r3, #3
  4002f6:	440b      	add	r3, r1
  4002f8:	331c      	adds	r3, #28
  4002fa:	681b      	ldr	r3, [r3, #0]
  4002fc:	220a      	movs	r2, #10
  4002fe:	4904      	ldr	r1, [pc, #16]	; (400310 <AT86_Test_Comms+0x3c>)
  400300:	4618      	mov	r0, r3
  400302:	4b05      	ldr	r3, [pc, #20]	; (400318 <AT86_Test_Comms+0x44>)
  400304:	4798      	blx	r3
}
  400306:	bf00      	nop
  400308:	3708      	adds	r7, #8
  40030a:	46bd      	mov	sp, r7
  40030c:	bd80      	pop	{r7, pc}
  40030e:	bf00      	nop
  400310:	204000b8 	.word	0x204000b8
  400314:	2040003c 	.word	0x2040003c
  400318:	00400ff1 	.word	0x00400ff1

0040031c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
  40031c:	b580      	push	{r7, lr}
  40031e:	af00      	add	r7, sp, #0
	system_init();
  400320:	4b01      	ldr	r3, [pc, #4]	; (400328 <atmel_start_init+0xc>)
  400322:	4798      	blx	r3
}
  400324:	bf00      	nop
  400326:	bd80      	pop	{r7, pc}
  400328:	00400ca1 	.word	0x00400ca1

0040032c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40032c:	b580      	push	{r7, lr}
  40032e:	b082      	sub	sp, #8
  400330:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400332:	4b16      	ldr	r3, [pc, #88]	; (40038c <Reset_Handler+0x60>)
  400334:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  400336:	4b16      	ldr	r3, [pc, #88]	; (400390 <Reset_Handler+0x64>)
  400338:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  40033a:	687a      	ldr	r2, [r7, #4]
  40033c:	683b      	ldr	r3, [r7, #0]
  40033e:	429a      	cmp	r2, r3
  400340:	d00c      	beq.n	40035c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400342:	e007      	b.n	400354 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400344:	683b      	ldr	r3, [r7, #0]
  400346:	1d1a      	adds	r2, r3, #4
  400348:	603a      	str	r2, [r7, #0]
  40034a:	687a      	ldr	r2, [r7, #4]
  40034c:	1d11      	adds	r1, r2, #4
  40034e:	6079      	str	r1, [r7, #4]
  400350:	6812      	ldr	r2, [r2, #0]
  400352:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400354:	683b      	ldr	r3, [r7, #0]
  400356:	4a0f      	ldr	r2, [pc, #60]	; (400394 <Reset_Handler+0x68>)
  400358:	4293      	cmp	r3, r2
  40035a:	d3f3      	bcc.n	400344 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40035c:	4b0e      	ldr	r3, [pc, #56]	; (400398 <Reset_Handler+0x6c>)
  40035e:	603b      	str	r3, [r7, #0]
  400360:	e004      	b.n	40036c <Reset_Handler+0x40>
                *pDest++ = 0;
  400362:	683b      	ldr	r3, [r7, #0]
  400364:	1d1a      	adds	r2, r3, #4
  400366:	603a      	str	r2, [r7, #0]
  400368:	2200      	movs	r2, #0
  40036a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  40036c:	683b      	ldr	r3, [r7, #0]
  40036e:	4a0b      	ldr	r2, [pc, #44]	; (40039c <Reset_Handler+0x70>)
  400370:	4293      	cmp	r3, r2
  400372:	d3f6      	bcc.n	400362 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400374:	4b0a      	ldr	r3, [pc, #40]	; (4003a0 <Reset_Handler+0x74>)
  400376:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400378:	4a0a      	ldr	r2, [pc, #40]	; (4003a4 <Reset_Handler+0x78>)
  40037a:	687b      	ldr	r3, [r7, #4]
  40037c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400380:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  400382:	4b09      	ldr	r3, [pc, #36]	; (4003a8 <Reset_Handler+0x7c>)
  400384:	4798      	blx	r3

        /* Branch to main function */
        main();
  400386:	4b09      	ldr	r3, [pc, #36]	; (4003ac <Reset_Handler+0x80>)
  400388:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40038a:	e7fe      	b.n	40038a <Reset_Handler+0x5e>
  40038c:	00406d08 	.word	0x00406d08
  400390:	20400000 	.word	0x20400000
  400394:	20400020 	.word	0x20400020
  400398:	20400020 	.word	0x20400020
  40039c:	204013e0 	.word	0x204013e0
  4003a0:	00400000 	.word	0x00400000
  4003a4:	e000ed00 	.word	0xe000ed00
  4003a8:	004069d9 	.word	0x004069d9
  4003ac:	00406981 	.word	0x00406981

004003b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4003b0:	b480      	push	{r7}
  4003b2:	af00      	add	r7, sp, #0
        while (1) {
  4003b4:	e7fe      	b.n	4003b4 <Dummy_Handler+0x4>

004003b6 <hri_matrix_set_CCFG_SYSIO_reg>:
	((Matrix *)hw)->CCFG_SYSIO ^= CCFG_SYSIO_SYSIO12;
	MATRIX_CRITICAL_SECTION_LEAVE();
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
  4003b6:	b480      	push	{r7}
  4003b8:	b083      	sub	sp, #12
  4003ba:	af00      	add	r7, sp, #0
  4003bc:	6078      	str	r0, [r7, #4]
  4003be:	6039      	str	r1, [r7, #0]
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4003c0:	687b      	ldr	r3, [r7, #4]
  4003c2:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  4003c6:	683b      	ldr	r3, [r7, #0]
  4003c8:	431a      	orrs	r2, r3
  4003ca:	687b      	ldr	r3, [r7, #4]
  4003cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	MATRIX_CRITICAL_SECTION_LEAVE();
}
  4003d0:	bf00      	nop
  4003d2:	370c      	adds	r7, #12
  4003d4:	46bd      	mov	sp, r7
  4003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003da:	4770      	bx	lr

004003dc <hri_pio_set_PSR_reg>:
{
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  4003dc:	b480      	push	{r7}
  4003de:	b083      	sub	sp, #12
  4003e0:	af00      	add	r7, sp, #0
  4003e2:	6078      	str	r0, [r7, #4]
  4003e4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  4003e6:	687b      	ldr	r3, [r7, #4]
  4003e8:	683a      	ldr	r2, [r7, #0]
  4003ea:	601a      	str	r2, [r3, #0]
}
  4003ec:	bf00      	nop
  4003ee:	370c      	adds	r7, #12
  4003f0:	46bd      	mov	sp, r7
  4003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003f6:	4770      	bx	lr

004003f8 <hri_pio_clear_PSR_reg>:
	((Pio *)hw)->PIO_PER = data;
	((Pio *)hw)->PIO_PDR = ~data;
}

static inline void hri_pio_clear_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  4003f8:	b480      	push	{r7}
  4003fa:	b083      	sub	sp, #12
  4003fc:	af00      	add	r7, sp, #0
  4003fe:	6078      	str	r0, [r7, #4]
  400400:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  400402:	687b      	ldr	r3, [r7, #4]
  400404:	683a      	ldr	r2, [r7, #0]
  400406:	605a      	str	r2, [r3, #4]
}
  400408:	bf00      	nop
  40040a:	370c      	adds	r7, #12
  40040c:	46bd      	mov	sp, r7
  40040e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400412:	4770      	bx	lr

00400414 <hri_pio_set_OSR_reg>:
{
	((Pio *)hw)->PIO_ODR = PIO_OSR_P31;
}

static inline void hri_pio_set_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400414:	b480      	push	{r7}
  400416:	b083      	sub	sp, #12
  400418:	af00      	add	r7, sp, #0
  40041a:	6078      	str	r0, [r7, #4]
  40041c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  40041e:	687b      	ldr	r3, [r7, #4]
  400420:	683a      	ldr	r2, [r7, #0]
  400422:	611a      	str	r2, [r3, #16]
}
  400424:	bf00      	nop
  400426:	370c      	adds	r7, #12
  400428:	46bd      	mov	sp, r7
  40042a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40042e:	4770      	bx	lr

00400430 <hri_pio_clear_OSR_reg>:
	((Pio *)hw)->PIO_OER = data;
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400430:	b480      	push	{r7}
  400432:	b083      	sub	sp, #12
  400434:	af00      	add	r7, sp, #0
  400436:	6078      	str	r0, [r7, #4]
  400438:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  40043a:	687b      	ldr	r3, [r7, #4]
  40043c:	683a      	ldr	r2, [r7, #0]
  40043e:	615a      	str	r2, [r3, #20]
}
  400440:	bf00      	nop
  400442:	370c      	adds	r7, #12
  400444:	46bd      	mov	sp, r7
  400446:	f85d 7b04 	ldr.w	r7, [sp], #4
  40044a:	4770      	bx	lr

0040044c <hri_pio_set_ODSR_reg>:
{
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  40044c:	b480      	push	{r7}
  40044e:	b083      	sub	sp, #12
  400450:	af00      	add	r7, sp, #0
  400452:	6078      	str	r0, [r7, #4]
  400454:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400456:	687b      	ldr	r3, [r7, #4]
  400458:	683a      	ldr	r2, [r7, #0]
  40045a:	631a      	str	r2, [r3, #48]	; 0x30
}
  40045c:	bf00      	nop
  40045e:	370c      	adds	r7, #12
  400460:	46bd      	mov	sp, r7
  400462:	f85d 7b04 	ldr.w	r7, [sp], #4
  400466:	4770      	bx	lr

00400468 <hri_pio_clear_ODSR_reg>:
	((Pio *)hw)->PIO_SODR = data;
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400468:	b480      	push	{r7}
  40046a:	b083      	sub	sp, #12
  40046c:	af00      	add	r7, sp, #0
  40046e:	6078      	str	r0, [r7, #4]
  400470:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400472:	687b      	ldr	r3, [r7, #4]
  400474:	683a      	ldr	r2, [r7, #0]
  400476:	635a      	str	r2, [r3, #52]	; 0x34
}
  400478:	bf00      	nop
  40047a:	370c      	adds	r7, #12
  40047c:	46bd      	mov	sp, r7
  40047e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400482:	4770      	bx	lr

00400484 <hri_pio_set_PUSR_reg>:
{
	((Pio *)hw)->PIO_PUDR = PIO_PUSR_P31;
}

static inline void hri_pio_set_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400484:	b480      	push	{r7}
  400486:	b083      	sub	sp, #12
  400488:	af00      	add	r7, sp, #0
  40048a:	6078      	str	r0, [r7, #4]
  40048c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUER = mask;
  40048e:	687b      	ldr	r3, [r7, #4]
  400490:	683a      	ldr	r2, [r7, #0]
  400492:	665a      	str	r2, [r3, #100]	; 0x64
}
  400494:	bf00      	nop
  400496:	370c      	adds	r7, #12
  400498:	46bd      	mov	sp, r7
  40049a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40049e:	4770      	bx	lr

004004a0 <hri_pio_clear_PUSR_reg>:
	((Pio *)hw)->PIO_PUER = data;
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  4004a0:	b480      	push	{r7}
  4004a2:	b083      	sub	sp, #12
  4004a4:	af00      	add	r7, sp, #0
  4004a6:	6078      	str	r0, [r7, #4]
  4004a8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUDR = mask;
  4004aa:	687b      	ldr	r3, [r7, #4]
  4004ac:	683a      	ldr	r2, [r7, #0]
  4004ae:	661a      	str	r2, [r3, #96]	; 0x60
}
  4004b0:	bf00      	nop
  4004b2:	370c      	adds	r7, #12
  4004b4:	46bd      	mov	sp, r7
  4004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004ba:	4770      	bx	lr

004004bc <hri_pio_set_PPDSR_reg>:
{
	((Pio *)hw)->PIO_PPDDR = PIO_PPDSR_P31;
}

static inline void hri_pio_set_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  4004bc:	b480      	push	{r7}
  4004be:	b083      	sub	sp, #12
  4004c0:	af00      	add	r7, sp, #0
  4004c2:	6078      	str	r0, [r7, #4]
  4004c4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDER = mask;
  4004c6:	687b      	ldr	r3, [r7, #4]
  4004c8:	683a      	ldr	r2, [r7, #0]
  4004ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
  4004ce:	bf00      	nop
  4004d0:	370c      	adds	r7, #12
  4004d2:	46bd      	mov	sp, r7
  4004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004d8:	4770      	bx	lr

004004da <hri_pio_clear_PPDSR_reg>:
	((Pio *)hw)->PIO_PPDER = data;
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  4004da:	b480      	push	{r7}
  4004dc:	b083      	sub	sp, #12
  4004de:	af00      	add	r7, sp, #0
  4004e0:	6078      	str	r0, [r7, #4]
  4004e2:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDDR = mask;
  4004e4:	687b      	ldr	r3, [r7, #4]
  4004e6:	683a      	ldr	r2, [r7, #0]
  4004e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  4004ec:	bf00      	nop
  4004ee:	370c      	adds	r7, #12
  4004f0:	46bd      	mov	sp, r7
  4004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004f6:	4770      	bx	lr

004004f8 <hri_pio_set_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] ^= PIO_ABCDSR_P31;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  4004f8:	b480      	push	{r7}
  4004fa:	b085      	sub	sp, #20
  4004fc:	af00      	add	r7, sp, #0
  4004fe:	60f8      	str	r0, [r7, #12]
  400500:	460b      	mov	r3, r1
  400502:	607a      	str	r2, [r7, #4]
  400504:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400506:	7afa      	ldrb	r2, [r7, #11]
  400508:	7af9      	ldrb	r1, [r7, #11]
  40050a:	68fb      	ldr	r3, [r7, #12]
  40050c:	311c      	adds	r1, #28
  40050e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400512:	687b      	ldr	r3, [r7, #4]
  400514:	4319      	orrs	r1, r3
  400516:	68fb      	ldr	r3, [r7, #12]
  400518:	321c      	adds	r2, #28
  40051a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  40051e:	bf00      	nop
  400520:	3714      	adds	r7, #20
  400522:	46bd      	mov	sp, r7
  400524:	f85d 7b04 	ldr.w	r7, [sp], #4
  400528:	4770      	bx	lr

0040052a <hri_pio_clear_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] = data;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  40052a:	b480      	push	{r7}
  40052c:	b085      	sub	sp, #20
  40052e:	af00      	add	r7, sp, #0
  400530:	60f8      	str	r0, [r7, #12]
  400532:	460b      	mov	r3, r1
  400534:	607a      	str	r2, [r7, #4]
  400536:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400538:	7afa      	ldrb	r2, [r7, #11]
  40053a:	7af9      	ldrb	r1, [r7, #11]
  40053c:	68fb      	ldr	r3, [r7, #12]
  40053e:	311c      	adds	r1, #28
  400540:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400544:	687b      	ldr	r3, [r7, #4]
  400546:	43db      	mvns	r3, r3
  400548:	4019      	ands	r1, r3
  40054a:	68fb      	ldr	r3, [r7, #12]
  40054c:	321c      	adds	r2, #28
  40054e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400552:	bf00      	nop
  400554:	3714      	adds	r7, #20
  400556:	46bd      	mov	sp, r7
  400558:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055c:	4770      	bx	lr

0040055e <hri_pmc_set_PCSR0_reg>:
{
	((Pmc *)hw)->PMC_PCDR0 = PMC_PCSR0_PID31;
}

static inline void hri_pmc_set_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  40055e:	b480      	push	{r7}
  400560:	b083      	sub	sp, #12
  400562:	af00      	add	r7, sp, #0
  400564:	6078      	str	r0, [r7, #4]
  400566:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  400568:	687b      	ldr	r3, [r7, #4]
  40056a:	683a      	ldr	r2, [r7, #0]
  40056c:	611a      	str	r2, [r3, #16]
}
  40056e:	bf00      	nop
  400570:	370c      	adds	r7, #12
  400572:	46bd      	mov	sp, r7
  400574:	f85d 7b04 	ldr.w	r7, [sp], #4
  400578:	4770      	bx	lr

0040057a <hri_pmc_get_PCSR0_reg>:

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  40057a:	b480      	push	{r7}
  40057c:	b085      	sub	sp, #20
  40057e:	af00      	add	r7, sp, #0
  400580:	6078      	str	r0, [r7, #4]
  400582:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400584:	687b      	ldr	r3, [r7, #4]
  400586:	699b      	ldr	r3, [r3, #24]
  400588:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  40058a:	68fa      	ldr	r2, [r7, #12]
  40058c:	683b      	ldr	r3, [r7, #0]
  40058e:	4013      	ands	r3, r2
  400590:	60fb      	str	r3, [r7, #12]
	return tmp;
  400592:	68fb      	ldr	r3, [r7, #12]
}
  400594:	4618      	mov	r0, r3
  400596:	3714      	adds	r7, #20
  400598:	46bd      	mov	sp, r7
  40059a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40059e:	4770      	bx	lr

004005a0 <hri_pmc_set_PCSR1_reg>:
{
	((Pmc *)hw)->PMC_PCDR1 = PMC_PCSR1_PID60;
}

static inline void hri_pmc_set_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  4005a0:	b480      	push	{r7}
  4005a2:	b083      	sub	sp, #12
  4005a4:	af00      	add	r7, sp, #0
  4005a6:	6078      	str	r0, [r7, #4]
  4005a8:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  4005aa:	687b      	ldr	r3, [r7, #4]
  4005ac:	683a      	ldr	r2, [r7, #0]
  4005ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  4005b2:	bf00      	nop
  4005b4:	370c      	adds	r7, #12
  4005b6:	46bd      	mov	sp, r7
  4005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005bc:	4770      	bx	lr

004005be <hri_pmc_get_PCSR1_reg>:

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  4005be:	b480      	push	{r7}
  4005c0:	b085      	sub	sp, #20
  4005c2:	af00      	add	r7, sp, #0
  4005c4:	6078      	str	r0, [r7, #4]
  4005c6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4005c8:	687b      	ldr	r3, [r7, #4]
  4005ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4005ce:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4005d0:	68fa      	ldr	r2, [r7, #12]
  4005d2:	683b      	ldr	r3, [r7, #0]
  4005d4:	4013      	ands	r3, r2
  4005d6:	60fb      	str	r3, [r7, #12]
	return tmp;
  4005d8:	68fb      	ldr	r3, [r7, #12]
}
  4005da:	4618      	mov	r0, r3
  4005dc:	3714      	adds	r7, #20
  4005de:	46bd      	mov	sp, r7
  4005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005e4:	4770      	bx	lr

004005e6 <hri_wdt_set_MR_WDDIS_bit>:
	((Wdt *)hw)->WDT_MR ^= WDT_MR_WDRSTEN;
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
  4005e6:	b480      	push	{r7}
  4005e8:	b083      	sub	sp, #12
  4005ea:	af00      	add	r7, sp, #0
  4005ec:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4005ee:	687b      	ldr	r3, [r7, #4]
  4005f0:	685b      	ldr	r3, [r3, #4]
  4005f2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  4005f6:	687b      	ldr	r3, [r7, #4]
  4005f8:	605a      	str	r2, [r3, #4]
	WDT_CRITICAL_SECTION_LEAVE();
}
  4005fa:	bf00      	nop
  4005fc:	370c      	adds	r7, #12
  4005fe:	46bd      	mov	sp, r7
  400600:	f85d 7b04 	ldr.w	r7, [sp], #4
  400604:	4770      	bx	lr
	...

00400608 <port_to_reg>:

/**
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
  400608:	b480      	push	{r7}
  40060a:	b083      	sub	sp, #12
  40060c:	af00      	add	r7, sp, #0
  40060e:	4603      	mov	r3, r0
  400610:	71fb      	strb	r3, [r7, #7]
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  400612:	79fb      	ldrb	r3, [r7, #7]
  400614:	025b      	lsls	r3, r3, #9
  400616:	461a      	mov	r2, r3
  400618:	4b03      	ldr	r3, [pc, #12]	; (400628 <port_to_reg+0x20>)
  40061a:	4413      	add	r3, r2
}
  40061c:	4618      	mov	r0, r3
  40061e:	370c      	adds	r7, #12
  400620:	46bd      	mov	sp, r7
  400622:	f85d 7b04 	ldr.w	r7, [sp], #4
  400626:	4770      	bx	lr
  400628:	400e0e00 	.word	0x400e0e00

0040062c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
  40062c:	b580      	push	{r7, lr}
  40062e:	b084      	sub	sp, #16
  400630:	af00      	add	r7, sp, #0
  400632:	4603      	mov	r3, r0
  400634:	6039      	str	r1, [r7, #0]
  400636:	71fb      	strb	r3, [r7, #7]
  400638:	4613      	mov	r3, r2
  40063a:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  40063c:	79fb      	ldrb	r3, [r7, #7]
  40063e:	4618      	mov	r0, r3
  400640:	4b0e      	ldr	r3, [pc, #56]	; (40067c <_gpio_set_direction+0x50>)
  400642:	4798      	blx	r3
  400644:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  400646:	79bb      	ldrb	r3, [r7, #6]
  400648:	2b00      	cmp	r3, #0
  40064a:	db0e      	blt.n	40066a <_gpio_set_direction+0x3e>
  40064c:	2b01      	cmp	r3, #1
  40064e:	dd02      	ble.n	400656 <_gpio_set_direction+0x2a>
  400650:	2b02      	cmp	r3, #2
  400652:	d005      	beq.n	400660 <_gpio_set_direction+0x34>
  400654:	e009      	b.n	40066a <_gpio_set_direction+0x3e>
	case GPIO_DIRECTION_OFF:
	case GPIO_DIRECTION_IN:
		hri_pio_clear_OSR_reg(hw, mask);
  400656:	6839      	ldr	r1, [r7, #0]
  400658:	68f8      	ldr	r0, [r7, #12]
  40065a:	4b09      	ldr	r3, [pc, #36]	; (400680 <_gpio_set_direction+0x54>)
  40065c:	4798      	blx	r3
		break;
  40065e:	e009      	b.n	400674 <_gpio_set_direction+0x48>

	case GPIO_DIRECTION_OUT:
		hri_pio_set_OSR_reg(hw, mask);
  400660:	6839      	ldr	r1, [r7, #0]
  400662:	68f8      	ldr	r0, [r7, #12]
  400664:	4b07      	ldr	r3, [pc, #28]	; (400684 <_gpio_set_direction+0x58>)
  400666:	4798      	blx	r3
		break;
  400668:	e004      	b.n	400674 <_gpio_set_direction+0x48>

	default:
		ASSERT(false);
  40066a:	224b      	movs	r2, #75	; 0x4b
  40066c:	4906      	ldr	r1, [pc, #24]	; (400688 <_gpio_set_direction+0x5c>)
  40066e:	2000      	movs	r0, #0
  400670:	4b06      	ldr	r3, [pc, #24]	; (40068c <_gpio_set_direction+0x60>)
  400672:	4798      	blx	r3
	}
}
  400674:	bf00      	nop
  400676:	3710      	adds	r7, #16
  400678:	46bd      	mov	sp, r7
  40067a:	bd80      	pop	{r7, pc}
  40067c:	00400609 	.word	0x00400609
  400680:	00400431 	.word	0x00400431
  400684:	00400415 	.word	0x00400415
  400688:	00406a48 	.word	0x00406a48
  40068c:	004020b9 	.word	0x004020b9

00400690 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
  400690:	b580      	push	{r7, lr}
  400692:	b084      	sub	sp, #16
  400694:	af00      	add	r7, sp, #0
  400696:	4603      	mov	r3, r0
  400698:	6039      	str	r1, [r7, #0]
  40069a:	71fb      	strb	r3, [r7, #7]
  40069c:	4613      	mov	r3, r2
  40069e:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  4006a0:	79fb      	ldrb	r3, [r7, #7]
  4006a2:	4618      	mov	r0, r3
  4006a4:	4b09      	ldr	r3, [pc, #36]	; (4006cc <_gpio_set_level+0x3c>)
  4006a6:	4798      	blx	r3
  4006a8:	60f8      	str	r0, [r7, #12]
	if (level) {
  4006aa:	79bb      	ldrb	r3, [r7, #6]
  4006ac:	2b00      	cmp	r3, #0
  4006ae:	d004      	beq.n	4006ba <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  4006b0:	6839      	ldr	r1, [r7, #0]
  4006b2:	68f8      	ldr	r0, [r7, #12]
  4006b4:	4b06      	ldr	r3, [pc, #24]	; (4006d0 <_gpio_set_level+0x40>)
  4006b6:	4798      	blx	r3
	} else {
		hri_pio_clear_ODSR_reg(hw, mask);
	}
}
  4006b8:	e003      	b.n	4006c2 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  4006ba:	6839      	ldr	r1, [r7, #0]
  4006bc:	68f8      	ldr	r0, [r7, #12]
  4006be:	4b05      	ldr	r3, [pc, #20]	; (4006d4 <_gpio_set_level+0x44>)
  4006c0:	4798      	blx	r3
}
  4006c2:	bf00      	nop
  4006c4:	3710      	adds	r7, #16
  4006c6:	46bd      	mov	sp, r7
  4006c8:	bd80      	pop	{r7, pc}
  4006ca:	bf00      	nop
  4006cc:	00400609 	.word	0x00400609
  4006d0:	0040044d 	.word	0x0040044d
  4006d4:	00400469 	.word	0x00400469

004006d8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
  4006d8:	b580      	push	{r7, lr}
  4006da:	b084      	sub	sp, #16
  4006dc:	af00      	add	r7, sp, #0
  4006de:	4603      	mov	r3, r0
  4006e0:	71fb      	strb	r3, [r7, #7]
  4006e2:	460b      	mov	r3, r1
  4006e4:	71bb      	strb	r3, [r7, #6]
  4006e6:	4613      	mov	r3, r2
  4006e8:	717b      	strb	r3, [r7, #5]
	void *const hw = port_to_reg(port);
  4006ea:	79fb      	ldrb	r3, [r7, #7]
  4006ec:	4618      	mov	r0, r3
  4006ee:	4b23      	ldr	r3, [pc, #140]	; (40077c <_gpio_set_pin_pull_mode+0xa4>)
  4006f0:	4798      	blx	r3
  4006f2:	60f8      	str	r0, [r7, #12]
	switch (pull_mode) {
  4006f4:	797b      	ldrb	r3, [r7, #5]
  4006f6:	2b01      	cmp	r3, #1
  4006f8:	d014      	beq.n	400724 <_gpio_set_pin_pull_mode+0x4c>
  4006fa:	2b02      	cmp	r3, #2
  4006fc:	d023      	beq.n	400746 <_gpio_set_pin_pull_mode+0x6e>
  4006fe:	2b00      	cmp	r3, #0
  400700:	d132      	bne.n	400768 <_gpio_set_pin_pull_mode+0x90>
	case GPIO_PULL_OFF:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400702:	79bb      	ldrb	r3, [r7, #6]
  400704:	2201      	movs	r2, #1
  400706:	fa02 f303 	lsl.w	r3, r2, r3
  40070a:	4619      	mov	r1, r3
  40070c:	68f8      	ldr	r0, [r7, #12]
  40070e:	4b1c      	ldr	r3, [pc, #112]	; (400780 <_gpio_set_pin_pull_mode+0xa8>)
  400710:	4798      	blx	r3
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400712:	79bb      	ldrb	r3, [r7, #6]
  400714:	2201      	movs	r2, #1
  400716:	fa02 f303 	lsl.w	r3, r2, r3
  40071a:	4619      	mov	r1, r3
  40071c:	68f8      	ldr	r0, [r7, #12]
  40071e:	4b19      	ldr	r3, [pc, #100]	; (400784 <_gpio_set_pin_pull_mode+0xac>)
  400720:	4798      	blx	r3
		break;
  400722:	e027      	b.n	400774 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_UP:
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400724:	79bb      	ldrb	r3, [r7, #6]
  400726:	2201      	movs	r2, #1
  400728:	fa02 f303 	lsl.w	r3, r2, r3
  40072c:	4619      	mov	r1, r3
  40072e:	68f8      	ldr	r0, [r7, #12]
  400730:	4b14      	ldr	r3, [pc, #80]	; (400784 <_gpio_set_pin_pull_mode+0xac>)
  400732:	4798      	blx	r3
		hri_pio_set_PUSR_reg(hw, 1U << pin);
  400734:	79bb      	ldrb	r3, [r7, #6]
  400736:	2201      	movs	r2, #1
  400738:	fa02 f303 	lsl.w	r3, r2, r3
  40073c:	4619      	mov	r1, r3
  40073e:	68f8      	ldr	r0, [r7, #12]
  400740:	4b11      	ldr	r3, [pc, #68]	; (400788 <_gpio_set_pin_pull_mode+0xb0>)
  400742:	4798      	blx	r3
		break;
  400744:	e016      	b.n	400774 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_DOWN:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400746:	79bb      	ldrb	r3, [r7, #6]
  400748:	2201      	movs	r2, #1
  40074a:	fa02 f303 	lsl.w	r3, r2, r3
  40074e:	4619      	mov	r1, r3
  400750:	68f8      	ldr	r0, [r7, #12]
  400752:	4b0b      	ldr	r3, [pc, #44]	; (400780 <_gpio_set_pin_pull_mode+0xa8>)
  400754:	4798      	blx	r3
		hri_pio_set_PPDSR_reg(hw, 1U << pin);
  400756:	79bb      	ldrb	r3, [r7, #6]
  400758:	2201      	movs	r2, #1
  40075a:	fa02 f303 	lsl.w	r3, r2, r3
  40075e:	4619      	mov	r1, r3
  400760:	68f8      	ldr	r0, [r7, #12]
  400762:	4b0a      	ldr	r3, [pc, #40]	; (40078c <_gpio_set_pin_pull_mode+0xb4>)
  400764:	4798      	blx	r3
		break;
  400766:	e005      	b.n	400774 <_gpio_set_pin_pull_mode+0x9c>

	default:
		ASSERT(false);
  400768:	228d      	movs	r2, #141	; 0x8d
  40076a:	4909      	ldr	r1, [pc, #36]	; (400790 <_gpio_set_pin_pull_mode+0xb8>)
  40076c:	2000      	movs	r0, #0
  40076e:	4b09      	ldr	r3, [pc, #36]	; (400794 <_gpio_set_pin_pull_mode+0xbc>)
  400770:	4798      	blx	r3
		break;
  400772:	bf00      	nop
	}
}
  400774:	bf00      	nop
  400776:	3710      	adds	r7, #16
  400778:	46bd      	mov	sp, r7
  40077a:	bd80      	pop	{r7, pc}
  40077c:	00400609 	.word	0x00400609
  400780:	004004a1 	.word	0x004004a1
  400784:	004004db 	.word	0x004004db
  400788:	00400485 	.word	0x00400485
  40078c:	004004bd 	.word	0x004004bd
  400790:	00406a48 	.word	0x00406a48
  400794:	004020b9 	.word	0x004020b9

00400798 <_gpio_set_pin_function>:

/**
 * \brief Set pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
  400798:	b580      	push	{r7, lr}
  40079a:	b084      	sub	sp, #16
  40079c:	af00      	add	r7, sp, #0
  40079e:	6078      	str	r0, [r7, #4]
  4007a0:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  4007a2:	687b      	ldr	r3, [r7, #4]
  4007a4:	095b      	lsrs	r3, r3, #5
  4007a6:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  4007a8:	687b      	ldr	r3, [r7, #4]
  4007aa:	b2db      	uxtb	r3, r3
  4007ac:	f003 031f 	and.w	r3, r3, #31
  4007b0:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  4007b2:	7bfb      	ldrb	r3, [r7, #15]
  4007b4:	4618      	mov	r0, r3
  4007b6:	4b33      	ldr	r3, [pc, #204]	; (400884 <_gpio_set_pin_function+0xec>)
  4007b8:	4798      	blx	r3
  4007ba:	60b8      	str	r0, [r7, #8]

	if ((enum gpio_port)port == GPIO_PORTB) {
  4007bc:	7bfb      	ldrb	r3, [r7, #15]
  4007be:	2b01      	cmp	r3, #1
  4007c0:	d116      	bne.n	4007f0 <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  4007c2:	7bbb      	ldrb	r3, [r7, #14]
  4007c4:	2b04      	cmp	r3, #4
  4007c6:	d00b      	beq.n	4007e0 <_gpio_set_pin_function+0x48>
  4007c8:	7bbb      	ldrb	r3, [r7, #14]
  4007ca:	2b05      	cmp	r3, #5
  4007cc:	d008      	beq.n	4007e0 <_gpio_set_pin_function+0x48>
  4007ce:	7bbb      	ldrb	r3, [r7, #14]
  4007d0:	2b06      	cmp	r3, #6
  4007d2:	d005      	beq.n	4007e0 <_gpio_set_pin_function+0x48>
  4007d4:	7bbb      	ldrb	r3, [r7, #14]
  4007d6:	2b07      	cmp	r3, #7
  4007d8:	d002      	beq.n	4007e0 <_gpio_set_pin_function+0x48>
  4007da:	7bbb      	ldrb	r3, [r7, #14]
  4007dc:	2b0c      	cmp	r3, #12
  4007de:	d107      	bne.n	4007f0 <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  4007e0:	7bbb      	ldrb	r3, [r7, #14]
  4007e2:	2201      	movs	r2, #1
  4007e4:	fa02 f303 	lsl.w	r3, r2, r3
  4007e8:	4619      	mov	r1, r3
  4007ea:	4827      	ldr	r0, [pc, #156]	; (400888 <_gpio_set_pin_function+0xf0>)
  4007ec:	4b27      	ldr	r3, [pc, #156]	; (40088c <_gpio_set_pin_function+0xf4>)
  4007ee:	4798      	blx	r3
		}
	}

	if (function == GPIO_PIN_FUNCTION_OFF) {
  4007f0:	683b      	ldr	r3, [r7, #0]
  4007f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4007f6:	d108      	bne.n	40080a <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  4007f8:	7bbb      	ldrb	r3, [r7, #14]
  4007fa:	2201      	movs	r2, #1
  4007fc:	fa02 f303 	lsl.w	r3, r2, r3
  400800:	4619      	mov	r1, r3
  400802:	68b8      	ldr	r0, [r7, #8]
  400804:	4b22      	ldr	r3, [pc, #136]	; (400890 <_gpio_set_pin_function+0xf8>)
  400806:	4798      	blx	r3
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
		}

		hri_pio_clear_PSR_reg(hw, 1U << pin);
	}
}
  400808:	e037      	b.n	40087a <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  40080a:	683b      	ldr	r3, [r7, #0]
  40080c:	f003 0301 	and.w	r3, r3, #1
  400810:	2b00      	cmp	r3, #0
  400812:	d009      	beq.n	400828 <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  400814:	7bbb      	ldrb	r3, [r7, #14]
  400816:	2201      	movs	r2, #1
  400818:	fa02 f303 	lsl.w	r3, r2, r3
  40081c:	461a      	mov	r2, r3
  40081e:	2100      	movs	r1, #0
  400820:	68b8      	ldr	r0, [r7, #8]
  400822:	4b1c      	ldr	r3, [pc, #112]	; (400894 <_gpio_set_pin_function+0xfc>)
  400824:	4798      	blx	r3
  400826:	e008      	b.n	40083a <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  400828:	7bbb      	ldrb	r3, [r7, #14]
  40082a:	2201      	movs	r2, #1
  40082c:	fa02 f303 	lsl.w	r3, r2, r3
  400830:	461a      	mov	r2, r3
  400832:	2100      	movs	r1, #0
  400834:	68b8      	ldr	r0, [r7, #8]
  400836:	4b18      	ldr	r3, [pc, #96]	; (400898 <_gpio_set_pin_function+0x100>)
  400838:	4798      	blx	r3
		if (function & 0x2) {
  40083a:	683b      	ldr	r3, [r7, #0]
  40083c:	f003 0302 	and.w	r3, r3, #2
  400840:	2b00      	cmp	r3, #0
  400842:	d009      	beq.n	400858 <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  400844:	7bbb      	ldrb	r3, [r7, #14]
  400846:	2201      	movs	r2, #1
  400848:	fa02 f303 	lsl.w	r3, r2, r3
  40084c:	461a      	mov	r2, r3
  40084e:	2101      	movs	r1, #1
  400850:	68b8      	ldr	r0, [r7, #8]
  400852:	4b10      	ldr	r3, [pc, #64]	; (400894 <_gpio_set_pin_function+0xfc>)
  400854:	4798      	blx	r3
  400856:	e008      	b.n	40086a <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  400858:	7bbb      	ldrb	r3, [r7, #14]
  40085a:	2201      	movs	r2, #1
  40085c:	fa02 f303 	lsl.w	r3, r2, r3
  400860:	461a      	mov	r2, r3
  400862:	2101      	movs	r1, #1
  400864:	68b8      	ldr	r0, [r7, #8]
  400866:	4b0c      	ldr	r3, [pc, #48]	; (400898 <_gpio_set_pin_function+0x100>)
  400868:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  40086a:	7bbb      	ldrb	r3, [r7, #14]
  40086c:	2201      	movs	r2, #1
  40086e:	fa02 f303 	lsl.w	r3, r2, r3
  400872:	4619      	mov	r1, r3
  400874:	68b8      	ldr	r0, [r7, #8]
  400876:	4b09      	ldr	r3, [pc, #36]	; (40089c <_gpio_set_pin_function+0x104>)
  400878:	4798      	blx	r3
}
  40087a:	bf00      	nop
  40087c:	3710      	adds	r7, #16
  40087e:	46bd      	mov	sp, r7
  400880:	bd80      	pop	{r7, pc}
  400882:	bf00      	nop
  400884:	00400609 	.word	0x00400609
  400888:	40088000 	.word	0x40088000
  40088c:	004003b7 	.word	0x004003b7
  400890:	004003dd 	.word	0x004003dd
  400894:	004004f9 	.word	0x004004f9
  400898:	0040052b 	.word	0x0040052b
  40089c:	004003f9 	.word	0x004003f9

004008a0 <gpio_set_pin_pull_mode>:
 *                      resistor
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
  4008a0:	b580      	push	{r7, lr}
  4008a2:	b082      	sub	sp, #8
  4008a4:	af00      	add	r7, sp, #0
  4008a6:	4603      	mov	r3, r0
  4008a8:	460a      	mov	r2, r1
  4008aa:	71fb      	strb	r3, [r7, #7]
  4008ac:	4613      	mov	r3, r2
  4008ae:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
  4008b0:	79fb      	ldrb	r3, [r7, #7]
  4008b2:	095b      	lsrs	r3, r3, #5
  4008b4:	b2d8      	uxtb	r0, r3
  4008b6:	79fb      	ldrb	r3, [r7, #7]
  4008b8:	f003 031f 	and.w	r3, r3, #31
  4008bc:	b2db      	uxtb	r3, r3
  4008be:	79ba      	ldrb	r2, [r7, #6]
  4008c0:	4619      	mov	r1, r3
  4008c2:	4b03      	ldr	r3, [pc, #12]	; (4008d0 <gpio_set_pin_pull_mode+0x30>)
  4008c4:	4798      	blx	r3
}
  4008c6:	bf00      	nop
  4008c8:	3708      	adds	r7, #8
  4008ca:	46bd      	mov	sp, r7
  4008cc:	bd80      	pop	{r7, pc}
  4008ce:	bf00      	nop
  4008d0:	004006d9 	.word	0x004006d9

004008d4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
  4008d4:	b580      	push	{r7, lr}
  4008d6:	b082      	sub	sp, #8
  4008d8:	af00      	add	r7, sp, #0
  4008da:	6078      	str	r0, [r7, #4]
  4008dc:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  4008de:	6839      	ldr	r1, [r7, #0]
  4008e0:	6878      	ldr	r0, [r7, #4]
  4008e2:	4b03      	ldr	r3, [pc, #12]	; (4008f0 <gpio_set_pin_function+0x1c>)
  4008e4:	4798      	blx	r3
}
  4008e6:	bf00      	nop
  4008e8:	3708      	adds	r7, #8
  4008ea:	46bd      	mov	sp, r7
  4008ec:	bd80      	pop	{r7, pc}
  4008ee:	bf00      	nop
  4008f0:	00400799 	.word	0x00400799

004008f4 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
  4008f4:	b580      	push	{r7, lr}
  4008f6:	b082      	sub	sp, #8
  4008f8:	af00      	add	r7, sp, #0
  4008fa:	4603      	mov	r3, r0
  4008fc:	460a      	mov	r2, r1
  4008fe:	71fb      	strb	r3, [r7, #7]
  400900:	4613      	mov	r3, r2
  400902:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  400904:	79fb      	ldrb	r3, [r7, #7]
  400906:	095b      	lsrs	r3, r3, #5
  400908:	b2d8      	uxtb	r0, r3
  40090a:	79fb      	ldrb	r3, [r7, #7]
  40090c:	f003 031f 	and.w	r3, r3, #31
  400910:	2201      	movs	r2, #1
  400912:	fa02 f303 	lsl.w	r3, r2, r3
  400916:	79ba      	ldrb	r2, [r7, #6]
  400918:	4619      	mov	r1, r3
  40091a:	4b03      	ldr	r3, [pc, #12]	; (400928 <gpio_set_pin_direction+0x34>)
  40091c:	4798      	blx	r3
}
  40091e:	bf00      	nop
  400920:	3708      	adds	r7, #8
  400922:	46bd      	mov	sp, r7
  400924:	bd80      	pop	{r7, pc}
  400926:	bf00      	nop
  400928:	0040062d 	.word	0x0040062d

0040092c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
  40092c:	b580      	push	{r7, lr}
  40092e:	b082      	sub	sp, #8
  400930:	af00      	add	r7, sp, #0
  400932:	4603      	mov	r3, r0
  400934:	460a      	mov	r2, r1
  400936:	71fb      	strb	r3, [r7, #7]
  400938:	4613      	mov	r3, r2
  40093a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  40093c:	79fb      	ldrb	r3, [r7, #7]
  40093e:	095b      	lsrs	r3, r3, #5
  400940:	b2d8      	uxtb	r0, r3
  400942:	79fb      	ldrb	r3, [r7, #7]
  400944:	f003 031f 	and.w	r3, r3, #31
  400948:	2201      	movs	r2, #1
  40094a:	fa02 f303 	lsl.w	r3, r2, r3
  40094e:	79ba      	ldrb	r2, [r7, #6]
  400950:	4619      	mov	r1, r3
  400952:	4b03      	ldr	r3, [pc, #12]	; (400960 <gpio_set_pin_level+0x34>)
  400954:	4798      	blx	r3
}
  400956:	bf00      	nop
  400958:	3708      	adds	r7, #8
  40095a:	46bd      	mov	sp, r7
  40095c:	bd80      	pop	{r7, pc}
  40095e:	bf00      	nop
  400960:	00400691 	.word	0x00400691

00400964 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
  400964:	b580      	push	{r7, lr}
  400966:	af00      	add	r7, sp, #0
	_init_chip();
  400968:	4b01      	ldr	r3, [pc, #4]	; (400970 <init_mcu+0xc>)
  40096a:	4798      	blx	r3
}
  40096c:	bf00      	nop
  40096e:	bd80      	pop	{r7, pc}
  400970:	00402535 	.word	0x00402535

00400974 <_pmc_enable_periph_clock>:
 *
 * \param periph_id Peripheral ID
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
  400974:	b580      	push	{r7, lr}
  400976:	b082      	sub	sp, #8
  400978:	af00      	add	r7, sp, #0
  40097a:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	2b1f      	cmp	r3, #31
  400980:	d813      	bhi.n	4009aa <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400982:	2201      	movs	r2, #1
  400984:	687b      	ldr	r3, [r7, #4]
  400986:	fa02 f303 	lsl.w	r3, r2, r3
  40098a:	4619      	mov	r1, r3
  40098c:	4814      	ldr	r0, [pc, #80]	; (4009e0 <_pmc_enable_periph_clock+0x6c>)
  40098e:	4b15      	ldr	r3, [pc, #84]	; (4009e4 <_pmc_enable_periph_clock+0x70>)
  400990:	4798      	blx	r3
  400992:	4603      	mov	r3, r0
  400994:	2b00      	cmp	r3, #0
  400996:	d11e      	bne.n	4009d6 <_pmc_enable_periph_clock+0x62>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  400998:	2201      	movs	r2, #1
  40099a:	687b      	ldr	r3, [r7, #4]
  40099c:	fa02 f303 	lsl.w	r3, r2, r3
  4009a0:	4619      	mov	r1, r3
  4009a2:	480f      	ldr	r0, [pc, #60]	; (4009e0 <_pmc_enable_periph_clock+0x6c>)
  4009a4:	4b10      	ldr	r3, [pc, #64]	; (4009e8 <_pmc_enable_periph_clock+0x74>)
  4009a6:	4798      	blx	r3
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
		}
	}
}
  4009a8:	e015      	b.n	4009d6 <_pmc_enable_periph_clock+0x62>
		periph_id -= 32;
  4009aa:	687b      	ldr	r3, [r7, #4]
  4009ac:	3b20      	subs	r3, #32
  4009ae:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4009b0:	2201      	movs	r2, #1
  4009b2:	687b      	ldr	r3, [r7, #4]
  4009b4:	fa02 f303 	lsl.w	r3, r2, r3
  4009b8:	4619      	mov	r1, r3
  4009ba:	4809      	ldr	r0, [pc, #36]	; (4009e0 <_pmc_enable_periph_clock+0x6c>)
  4009bc:	4b0b      	ldr	r3, [pc, #44]	; (4009ec <_pmc_enable_periph_clock+0x78>)
  4009be:	4798      	blx	r3
  4009c0:	4603      	mov	r3, r0
  4009c2:	2b00      	cmp	r3, #0
  4009c4:	d107      	bne.n	4009d6 <_pmc_enable_periph_clock+0x62>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  4009c6:	2201      	movs	r2, #1
  4009c8:	687b      	ldr	r3, [r7, #4]
  4009ca:	fa02 f303 	lsl.w	r3, r2, r3
  4009ce:	4619      	mov	r1, r3
  4009d0:	4803      	ldr	r0, [pc, #12]	; (4009e0 <_pmc_enable_periph_clock+0x6c>)
  4009d2:	4b07      	ldr	r3, [pc, #28]	; (4009f0 <_pmc_enable_periph_clock+0x7c>)
  4009d4:	4798      	blx	r3
}
  4009d6:	bf00      	nop
  4009d8:	3708      	adds	r7, #8
  4009da:	46bd      	mov	sp, r7
  4009dc:	bd80      	pop	{r7, pc}
  4009de:	bf00      	nop
  4009e0:	400e0600 	.word	0x400e0600
  4009e4:	0040057b 	.word	0x0040057b
  4009e8:	0040055f 	.word	0x0040055f
  4009ec:	004005bf 	.word	0x004005bf
  4009f0:	004005a1 	.word	0x004005a1

004009f4 <DAC_0_PORT_init>:
struct i2c_m_sync_desc I2C_INSTANCE;

struct usart_sync_descriptor USART_0;

void DAC_0_PORT_init(void)
{
  4009f4:	b580      	push	{r7, lr}
  4009f6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, GPIO_PIN_FUNCTION_OFF);
  4009f8:	f04f 31ff 	mov.w	r1, #4294967295
  4009fc:	202d      	movs	r0, #45	; 0x2d
  4009fe:	4b04      	ldr	r3, [pc, #16]	; (400a10 <DAC_0_PORT_init+0x1c>)
  400a00:	4798      	blx	r3

	gpio_set_pin_function(PD0, GPIO_PIN_FUNCTION_OFF);
  400a02:	f04f 31ff 	mov.w	r1, #4294967295
  400a06:	2060      	movs	r0, #96	; 0x60
  400a08:	4b01      	ldr	r3, [pc, #4]	; (400a10 <DAC_0_PORT_init+0x1c>)
  400a0a:	4798      	blx	r3
}
  400a0c:	bf00      	nop
  400a0e:	bd80      	pop	{r7, pc}
  400a10:	004008d5 	.word	0x004008d5

00400a14 <DAC_0_CLOCK_init>:

void DAC_0_CLOCK_init(void)
{
  400a14:	b580      	push	{r7, lr}
  400a16:	af00      	add	r7, sp, #0

	_pmc_enable_periph_clock(ID_DACC);
  400a18:	201e      	movs	r0, #30
  400a1a:	4b02      	ldr	r3, [pc, #8]	; (400a24 <DAC_0_CLOCK_init+0x10>)
  400a1c:	4798      	blx	r3
}
  400a1e:	bf00      	nop
  400a20:	bd80      	pop	{r7, pc}
  400a22:	bf00      	nop
  400a24:	00400975 	.word	0x00400975

00400a28 <DAC_0_init>:

void DAC_0_init(void)
{
  400a28:	b580      	push	{r7, lr}
  400a2a:	af00      	add	r7, sp, #0
	DAC_0_CLOCK_init();
  400a2c:	4b04      	ldr	r3, [pc, #16]	; (400a40 <DAC_0_init+0x18>)
  400a2e:	4798      	blx	r3
	dac_sync_init(&DAC_0, DACC);
  400a30:	4904      	ldr	r1, [pc, #16]	; (400a44 <DAC_0_init+0x1c>)
  400a32:	4805      	ldr	r0, [pc, #20]	; (400a48 <DAC_0_init+0x20>)
  400a34:	4b05      	ldr	r3, [pc, #20]	; (400a4c <DAC_0_init+0x24>)
  400a36:	4798      	blx	r3
	DAC_0_PORT_init();
  400a38:	4b05      	ldr	r3, [pc, #20]	; (400a50 <DAC_0_init+0x28>)
  400a3a:	4798      	blx	r3
}
  400a3c:	bf00      	nop
  400a3e:	bd80      	pop	{r7, pc}
  400a40:	00400a15 	.word	0x00400a15
  400a44:	40040000 	.word	0x40040000
  400a48:	204012f4 	.word	0x204012f4
  400a4c:	0040112d 	.word	0x0040112d
  400a50:	004009f5 	.word	0x004009f5

00400a54 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
  400a54:	b580      	push	{r7, lr}
  400a56:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PB0, GPIO_DIRECTION_IN);
  400a58:	2101      	movs	r1, #1
  400a5a:	2020      	movs	r0, #32
  400a5c:	4b06      	ldr	r3, [pc, #24]	; (400a78 <EXTERNAL_IRQ_0_init+0x24>)
  400a5e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB0,
  400a60:	2100      	movs	r1, #0
  400a62:	2020      	movs	r0, #32
  400a64:	4b05      	ldr	r3, [pc, #20]	; (400a7c <EXTERNAL_IRQ_0_init+0x28>)
  400a66:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB0, GPIO_PIN_FUNCTION_OFF);
  400a68:	f04f 31ff 	mov.w	r1, #4294967295
  400a6c:	2020      	movs	r0, #32
  400a6e:	4b04      	ldr	r3, [pc, #16]	; (400a80 <EXTERNAL_IRQ_0_init+0x2c>)
  400a70:	4798      	blx	r3
}
  400a72:	bf00      	nop
  400a74:	bd80      	pop	{r7, pc}
  400a76:	bf00      	nop
  400a78:	004008f5 	.word	0x004008f5
  400a7c:	004008a1 	.word	0x004008a1
  400a80:	004008d5 	.word	0x004008d5

00400a84 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
  400a84:	b580      	push	{r7, lr}
  400a86:	af00      	add	r7, sp, #0

	gpio_set_pin_function(MISO, MUX_PC26C_SPI1_MISO);
  400a88:	2102      	movs	r1, #2
  400a8a:	205a      	movs	r0, #90	; 0x5a
  400a8c:	4b05      	ldr	r3, [pc, #20]	; (400aa4 <SPI_0_PORT_init+0x20>)
  400a8e:	4798      	blx	r3

	gpio_set_pin_function(MOSI, MUX_PC27C_SPI1_MOSI);
  400a90:	2102      	movs	r1, #2
  400a92:	205b      	movs	r0, #91	; 0x5b
  400a94:	4b03      	ldr	r3, [pc, #12]	; (400aa4 <SPI_0_PORT_init+0x20>)
  400a96:	4798      	blx	r3

	gpio_set_pin_function(SCLK, MUX_PC24C_SPI1_SPCK);
  400a98:	2102      	movs	r1, #2
  400a9a:	2058      	movs	r0, #88	; 0x58
  400a9c:	4b01      	ldr	r3, [pc, #4]	; (400aa4 <SPI_0_PORT_init+0x20>)
  400a9e:	4798      	blx	r3
}
  400aa0:	bf00      	nop
  400aa2:	bd80      	pop	{r7, pc}
  400aa4:	004008d5 	.word	0x004008d5

00400aa8 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
  400aa8:	b580      	push	{r7, lr}
  400aaa:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI1);
  400aac:	202a      	movs	r0, #42	; 0x2a
  400aae:	4b02      	ldr	r3, [pc, #8]	; (400ab8 <SPI_0_CLOCK_init+0x10>)
  400ab0:	4798      	blx	r3
}
  400ab2:	bf00      	nop
  400ab4:	bd80      	pop	{r7, pc}
  400ab6:	bf00      	nop
  400ab8:	00400975 	.word	0x00400975

00400abc <SPI_0_init>:

void SPI_0_init(void)
{
  400abc:	b580      	push	{r7, lr}
  400abe:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
  400ac0:	4b04      	ldr	r3, [pc, #16]	; (400ad4 <SPI_0_init+0x18>)
  400ac2:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SPI1);
  400ac4:	4904      	ldr	r1, [pc, #16]	; (400ad8 <SPI_0_init+0x1c>)
  400ac6:	4805      	ldr	r0, [pc, #20]	; (400adc <SPI_0_init+0x20>)
  400ac8:	4b05      	ldr	r3, [pc, #20]	; (400ae0 <SPI_0_init+0x24>)
  400aca:	4798      	blx	r3
	SPI_0_PORT_init();
  400acc:	4b05      	ldr	r3, [pc, #20]	; (400ae4 <SPI_0_init+0x28>)
  400ace:	4798      	blx	r3
}
  400ad0:	bf00      	nop
  400ad2:	bd80      	pop	{r7, pc}
  400ad4:	00400aa9 	.word	0x00400aa9
  400ad8:	40058000 	.word	0x40058000
  400adc:	20401308 	.word	0x20401308
  400ae0:	0040150d 	.word	0x0040150d
  400ae4:	00400a85 	.word	0x00400a85

00400ae8 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
  400ae8:	b580      	push	{r7, lr}
  400aea:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA4, MUX_PA4A_TWIHS0_TWCK0);
  400aec:	2100      	movs	r1, #0
  400aee:	2004      	movs	r0, #4
  400af0:	4b03      	ldr	r3, [pc, #12]	; (400b00 <I2C_0_PORT_init+0x18>)
  400af2:	4798      	blx	r3

	gpio_set_pin_function(PA3, MUX_PA3A_TWIHS0_TWD0);
  400af4:	2100      	movs	r1, #0
  400af6:	2003      	movs	r0, #3
  400af8:	4b01      	ldr	r3, [pc, #4]	; (400b00 <I2C_0_PORT_init+0x18>)
  400afa:	4798      	blx	r3
}
  400afc:	bf00      	nop
  400afe:	bd80      	pop	{r7, pc}
  400b00:	004008d5 	.word	0x004008d5

00400b04 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
  400b04:	b580      	push	{r7, lr}
  400b06:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS0);
  400b08:	2013      	movs	r0, #19
  400b0a:	4b02      	ldr	r3, [pc, #8]	; (400b14 <I2C_0_CLOCK_init+0x10>)
  400b0c:	4798      	blx	r3
}
  400b0e:	bf00      	nop
  400b10:	bd80      	pop	{r7, pc}
  400b12:	bf00      	nop
  400b14:	00400975 	.word	0x00400975

00400b18 <I2C_0_init>:

void I2C_0_init(void)
{
  400b18:	b580      	push	{r7, lr}
  400b1a:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
  400b1c:	4b04      	ldr	r3, [pc, #16]	; (400b30 <I2C_0_init+0x18>)
  400b1e:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  400b20:	4904      	ldr	r1, [pc, #16]	; (400b34 <I2C_0_init+0x1c>)
  400b22:	4805      	ldr	r0, [pc, #20]	; (400b38 <I2C_0_init+0x20>)
  400b24:	4b05      	ldr	r3, [pc, #20]	; (400b3c <I2C_0_init+0x24>)
  400b26:	4798      	blx	r3

	I2C_0_PORT_init();
  400b28:	4b05      	ldr	r3, [pc, #20]	; (400b40 <I2C_0_init+0x28>)
  400b2a:	4798      	blx	r3
}
  400b2c:	bf00      	nop
  400b2e:	bd80      	pop	{r7, pc}
  400b30:	00400b05 	.word	0x00400b05
  400b34:	40018000 	.word	0x40018000
  400b38:	204013ac 	.word	0x204013ac
  400b3c:	004014ad 	.word	0x004014ad
  400b40:	00400ae9 	.word	0x00400ae9

00400b44 <I2C_INSTANCE_PORT_init>:

void I2C_INSTANCE_PORT_init(void)
{
  400b44:	b480      	push	{r7}
  400b46:	af00      	add	r7, sp, #0
}
  400b48:	bf00      	nop
  400b4a:	46bd      	mov	sp, r7
  400b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b50:	4770      	bx	lr
	...

00400b54 <I2C_INSTANCE_CLOCK_init>:

void I2C_INSTANCE_CLOCK_init(void)
{
  400b54:	b580      	push	{r7, lr}
  400b56:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS1);
  400b58:	2014      	movs	r0, #20
  400b5a:	4b02      	ldr	r3, [pc, #8]	; (400b64 <I2C_INSTANCE_CLOCK_init+0x10>)
  400b5c:	4798      	blx	r3
}
  400b5e:	bf00      	nop
  400b60:	bd80      	pop	{r7, pc}
  400b62:	bf00      	nop
  400b64:	00400975 	.word	0x00400975

00400b68 <I2C_INSTANCE_init>:

void I2C_INSTANCE_init(void)
{
  400b68:	b580      	push	{r7, lr}
  400b6a:	af00      	add	r7, sp, #0
	I2C_INSTANCE_CLOCK_init();
  400b6c:	4b04      	ldr	r3, [pc, #16]	; (400b80 <I2C_INSTANCE_init+0x18>)
  400b6e:	4798      	blx	r3

	i2c_m_sync_init(&I2C_INSTANCE, TWIHS1);
  400b70:	4904      	ldr	r1, [pc, #16]	; (400b84 <I2C_INSTANCE_init+0x1c>)
  400b72:	4805      	ldr	r0, [pc, #20]	; (400b88 <I2C_INSTANCE_init+0x20>)
  400b74:	4b05      	ldr	r3, [pc, #20]	; (400b8c <I2C_INSTANCE_init+0x24>)
  400b76:	4798      	blx	r3

	I2C_INSTANCE_PORT_init();
  400b78:	4b05      	ldr	r3, [pc, #20]	; (400b90 <I2C_INSTANCE_init+0x28>)
  400b7a:	4798      	blx	r3
}
  400b7c:	bf00      	nop
  400b7e:	bd80      	pop	{r7, pc}
  400b80:	00400b55 	.word	0x00400b55
  400b84:	4001c000 	.word	0x4001c000
  400b88:	2040133c 	.word	0x2040133c
  400b8c:	004014ad 	.word	0x004014ad
  400b90:	00400b45 	.word	0x00400b45

00400b94 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
  400b94:	b580      	push	{r7, lr}
  400b96:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA9, MUX_PA9A_UART0_URXD0);
  400b98:	2100      	movs	r1, #0
  400b9a:	2009      	movs	r0, #9
  400b9c:	4b03      	ldr	r3, [pc, #12]	; (400bac <USART_0_PORT_init+0x18>)
  400b9e:	4798      	blx	r3

	gpio_set_pin_function(PA10, MUX_PA10A_UART0_UTXD0);
  400ba0:	2100      	movs	r1, #0
  400ba2:	200a      	movs	r0, #10
  400ba4:	4b01      	ldr	r3, [pc, #4]	; (400bac <USART_0_PORT_init+0x18>)
  400ba6:	4798      	blx	r3
}
  400ba8:	bf00      	nop
  400baa:	bd80      	pop	{r7, pc}
  400bac:	004008d5 	.word	0x004008d5

00400bb0 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
  400bb0:	b580      	push	{r7, lr}
  400bb2:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART0);
  400bb4:	2007      	movs	r0, #7
  400bb6:	4b02      	ldr	r3, [pc, #8]	; (400bc0 <USART_0_CLOCK_init+0x10>)
  400bb8:	4798      	blx	r3
}
  400bba:	bf00      	nop
  400bbc:	bd80      	pop	{r7, pc}
  400bbe:	bf00      	nop
  400bc0:	00400975 	.word	0x00400975

00400bc4 <USART_0_init>:

void USART_0_init(void)
{
  400bc4:	b580      	push	{r7, lr}
  400bc6:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
  400bc8:	4b06      	ldr	r3, [pc, #24]	; (400be4 <USART_0_init+0x20>)
  400bca:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  400bcc:	4b06      	ldr	r3, [pc, #24]	; (400be8 <USART_0_init+0x24>)
  400bce:	4798      	blx	r3
  400bd0:	4603      	mov	r3, r0
  400bd2:	461a      	mov	r2, r3
  400bd4:	4905      	ldr	r1, [pc, #20]	; (400bec <USART_0_init+0x28>)
  400bd6:	4806      	ldr	r0, [pc, #24]	; (400bf0 <USART_0_init+0x2c>)
  400bd8:	4b06      	ldr	r3, [pc, #24]	; (400bf4 <USART_0_init+0x30>)
  400bda:	4798      	blx	r3
	USART_0_PORT_init();
  400bdc:	4b06      	ldr	r3, [pc, #24]	; (400bf8 <USART_0_init+0x34>)
  400bde:	4798      	blx	r3
}
  400be0:	bf00      	nop
  400be2:	bd80      	pop	{r7, pc}
  400be4:	00400bb1 	.word	0x00400bb1
  400be8:	00404531 	.word	0x00404531
  400bec:	400e0800 	.word	0x400e0800
  400bf0:	20401330 	.word	0x20401330
  400bf4:	00401ab1 	.word	0x00401ab1
  400bf8:	00400b95 	.word	0x00400b95

00400bfc <USART_1_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_1_CLOCK_init()
{
  400bfc:	b580      	push	{r7, lr}
  400bfe:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART4);
  400c00:	202e      	movs	r0, #46	; 0x2e
  400c02:	4b02      	ldr	r3, [pc, #8]	; (400c0c <USART_1_CLOCK_init+0x10>)
  400c04:	4798      	blx	r3
}
  400c06:	bf00      	nop
  400c08:	bd80      	pop	{r7, pc}
  400c0a:	bf00      	nop
  400c0c:	00400975 	.word	0x00400975

00400c10 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
  400c10:	b580      	push	{r7, lr}
  400c12:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD18, MUX_PD18C_UART4_URXD4);
  400c14:	2102      	movs	r1, #2
  400c16:	2072      	movs	r0, #114	; 0x72
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <USART_1_PORT_init+0x18>)
  400c1a:	4798      	blx	r3

	gpio_set_pin_function(PD19, MUX_PD19C_UART4_UTXD4);
  400c1c:	2102      	movs	r1, #2
  400c1e:	2073      	movs	r0, #115	; 0x73
  400c20:	4b01      	ldr	r3, [pc, #4]	; (400c28 <USART_1_PORT_init+0x18>)
  400c22:	4798      	blx	r3
}
  400c24:	bf00      	nop
  400c26:	bd80      	pop	{r7, pc}
  400c28:	004008d5 	.word	0x004008d5

00400c2c <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
  400c2c:	b590      	push	{r4, r7, lr}
  400c2e:	b083      	sub	sp, #12
  400c30:	af02      	add	r7, sp, #8
	USART_1_CLOCK_init();
  400c32:	4b09      	ldr	r3, [pc, #36]	; (400c58 <USART_1_init+0x2c>)
  400c34:	4798      	blx	r3
	usart_async_init(&USART_1, UART4, USART_1_buffer, USART_1_BUFFER_SIZE, _uart_get_usart_async());
  400c36:	4b09      	ldr	r3, [pc, #36]	; (400c5c <USART_1_init+0x30>)
  400c38:	4798      	blx	r3
  400c3a:	4603      	mov	r3, r0
  400c3c:	9300      	str	r3, [sp, #0]
  400c3e:	2310      	movs	r3, #16
  400c40:	4a07      	ldr	r2, [pc, #28]	; (400c60 <USART_1_init+0x34>)
  400c42:	4908      	ldr	r1, [pc, #32]	; (400c64 <USART_1_init+0x38>)
  400c44:	4808      	ldr	r0, [pc, #32]	; (400c68 <USART_1_init+0x3c>)
  400c46:	4c09      	ldr	r4, [pc, #36]	; (400c6c <USART_1_init+0x40>)
  400c48:	47a0      	blx	r4
	USART_1_PORT_init();
  400c4a:	4b09      	ldr	r3, [pc, #36]	; (400c70 <USART_1_init+0x44>)
  400c4c:	4798      	blx	r3
}
  400c4e:	bf00      	nop
  400c50:	3704      	adds	r7, #4
  400c52:	46bd      	mov	sp, r7
  400c54:	bd90      	pop	{r4, r7, pc}
  400c56:	bf00      	nop
  400c58:	00400bfd 	.word	0x00400bfd
  400c5c:	00404541 	.word	0x00404541
  400c60:	204000c4 	.word	0x204000c4
  400c64:	400e1e00 	.word	0x400e1e00
  400c68:	2040135c 	.word	0x2040135c
  400c6c:	004017ad 	.word	0x004017ad
  400c70:	00400c11 	.word	0x00400c11

00400c74 <USB_0_CLOCK_init>:
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif
#endif

void USB_0_CLOCK_init(void)
{
  400c74:	b580      	push	{r7, lr}
  400c76:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_USBHS);
  400c78:	2022      	movs	r0, #34	; 0x22
  400c7a:	4b02      	ldr	r3, [pc, #8]	; (400c84 <USB_0_CLOCK_init+0x10>)
  400c7c:	4798      	blx	r3
}
  400c7e:	bf00      	nop
  400c80:	bd80      	pop	{r7, pc}
  400c82:	bf00      	nop
  400c84:	00400975 	.word	0x00400975

00400c88 <USB_0_init>:

void USB_0_init(void)
{
  400c88:	b580      	push	{r7, lr}
  400c8a:	af00      	add	r7, sp, #0
	USB_0_CLOCK_init();
  400c8c:	4b02      	ldr	r3, [pc, #8]	; (400c98 <USB_0_init+0x10>)
  400c8e:	4798      	blx	r3
	usb_d_init();
  400c90:	4b02      	ldr	r3, [pc, #8]	; (400c9c <USB_0_init+0x14>)
  400c92:	4798      	blx	r3
}
  400c94:	bf00      	nop
  400c96:	bd80      	pop	{r7, pc}
  400c98:	00400c75 	.word	0x00400c75
  400c9c:	0040200d 	.word	0x0040200d

00400ca0 <system_init>:

void system_init(void)
{
  400ca0:	b580      	push	{r7, lr}
  400ca2:	af00      	add	r7, sp, #0
	init_mcu();
  400ca4:	4b22      	ldr	r3, [pc, #136]	; (400d30 <system_init+0x90>)
  400ca6:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOB);
  400ca8:	200b      	movs	r0, #11
  400caa:	4b22      	ldr	r3, [pc, #136]	; (400d34 <system_init+0x94>)
  400cac:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOC);
  400cae:	200c      	movs	r0, #12
  400cb0:	4b20      	ldr	r3, [pc, #128]	; (400d34 <system_init+0x94>)
  400cb2:	4798      	blx	r3

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);
  400cb4:	4820      	ldr	r0, [pc, #128]	; (400d38 <system_init+0x98>)
  400cb6:	4b21      	ldr	r3, [pc, #132]	; (400d3c <system_init+0x9c>)
  400cb8:	4798      	blx	r3

	/* GPIO on PC20 */

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
  400cba:	2102      	movs	r1, #2
  400cbc:	2054      	movs	r0, #84	; 0x54
  400cbe:	4b20      	ldr	r3, [pc, #128]	; (400d40 <system_init+0xa0>)
  400cc0:	4798      	blx	r3

	gpio_set_pin_level(LED0,
  400cc2:	2101      	movs	r1, #1
  400cc4:	2054      	movs	r0, #84	; 0x54
  400cc6:	4b1f      	ldr	r3, [pc, #124]	; (400d44 <system_init+0xa4>)
  400cc8:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   true);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
  400cca:	f04f 31ff 	mov.w	r1, #4294967295
  400cce:	2054      	movs	r0, #84	; 0x54
  400cd0:	4b1d      	ldr	r3, [pc, #116]	; (400d48 <system_init+0xa8>)
  400cd2:	4798      	blx	r3

	gpio_set_pin_direction(CS, GPIO_DIRECTION_OUT);
  400cd4:	2102      	movs	r1, #2
  400cd6:	2059      	movs	r0, #89	; 0x59
  400cd8:	4b19      	ldr	r3, [pc, #100]	; (400d40 <system_init+0xa0>)
  400cda:	4798      	blx	r3

	gpio_set_pin_level(CS,
  400cdc:	2101      	movs	r1, #1
  400cde:	2059      	movs	r0, #89	; 0x59
  400ce0:	4b18      	ldr	r3, [pc, #96]	; (400d44 <system_init+0xa4>)
  400ce2:	4798      	blx	r3
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);

	gpio_set_pin_function(CS, GPIO_PIN_FUNCTION_OFF);
  400ce4:	f04f 31ff 	mov.w	r1, #4294967295
  400ce8:	2059      	movs	r0, #89	; 0x59
  400cea:	4b17      	ldr	r3, [pc, #92]	; (400d48 <system_init+0xa8>)
  400cec:	4798      	blx	r3
	
	gpio_set_pin_direction(PB1, GPIO_DIRECTION_OUT);
  400cee:	2102      	movs	r1, #2
  400cf0:	2021      	movs	r0, #33	; 0x21
  400cf2:	4b13      	ldr	r3, [pc, #76]	; (400d40 <system_init+0xa0>)
  400cf4:	4798      	blx	r3

	gpio_set_pin_level(PB1,
  400cf6:	2101      	movs	r1, #1
  400cf8:	2021      	movs	r0, #33	; 0x21
  400cfa:	4b12      	ldr	r3, [pc, #72]	; (400d44 <system_init+0xa4>)
  400cfc:	4798      	blx	r3
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	true);

	gpio_set_pin_function(PB1, GPIO_PIN_FUNCTION_OFF);
  400cfe:	f04f 31ff 	mov.w	r1, #4294967295
  400d02:	2021      	movs	r0, #33	; 0x21
  400d04:	4b10      	ldr	r3, [pc, #64]	; (400d48 <system_init+0xa8>)
  400d06:	4798      	blx	r3

	DAC_0_init();
  400d08:	4b10      	ldr	r3, [pc, #64]	; (400d4c <system_init+0xac>)
  400d0a:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400d0c:	4b10      	ldr	r3, [pc, #64]	; (400d50 <system_init+0xb0>)
  400d0e:	4798      	blx	r3

	SPI_0_init();
  400d10:	4b10      	ldr	r3, [pc, #64]	; (400d54 <system_init+0xb4>)
  400d12:	4798      	blx	r3

	I2C_0_init();
  400d14:	4b10      	ldr	r3, [pc, #64]	; (400d58 <system_init+0xb8>)
  400d16:	4798      	blx	r3

	I2C_INSTANCE_init();
  400d18:	4b10      	ldr	r3, [pc, #64]	; (400d5c <system_init+0xbc>)
  400d1a:	4798      	blx	r3

	USART_0_init();
  400d1c:	4b10      	ldr	r3, [pc, #64]	; (400d60 <system_init+0xc0>)
  400d1e:	4798      	blx	r3
	USART_1_init();
  400d20:	4b10      	ldr	r3, [pc, #64]	; (400d64 <system_init+0xc4>)
  400d22:	4798      	blx	r3

	USB_0_init();
  400d24:	4b10      	ldr	r3, [pc, #64]	; (400d68 <system_init+0xc8>)
  400d26:	4798      	blx	r3

	ext_irq_init();
  400d28:	4b10      	ldr	r3, [pc, #64]	; (400d6c <system_init+0xcc>)
  400d2a:	4798      	blx	r3
}
  400d2c:	bf00      	nop
  400d2e:	bd80      	pop	{r7, pc}
  400d30:	00400965 	.word	0x00400965
  400d34:	00400975 	.word	0x00400975
  400d38:	400e1850 	.word	0x400e1850
  400d3c:	004005e7 	.word	0x004005e7
  400d40:	004008f5 	.word	0x004008f5
  400d44:	0040092d 	.word	0x0040092d
  400d48:	004008d5 	.word	0x004008d5
  400d4c:	00400a29 	.word	0x00400a29
  400d50:	00400a55 	.word	0x00400a55
  400d54:	00400abd 	.word	0x00400abd
  400d58:	00400b19 	.word	0x00400b19
  400d5c:	00400b69 	.word	0x00400b69
  400d60:	00400bc5 	.word	0x00400bc5
  400d64:	00400c2d 	.word	0x00400c2d
  400d68:	00400c89 	.word	0x00400c89
  400d6c:	004011e5 	.word	0x004011e5

00400d70 <hri_pio_set_ODSR_reg>:
{
  400d70:	b480      	push	{r7}
  400d72:	b083      	sub	sp, #12
  400d74:	af00      	add	r7, sp, #0
  400d76:	6078      	str	r0, [r7, #4]
  400d78:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400d7a:	687b      	ldr	r3, [r7, #4]
  400d7c:	683a      	ldr	r2, [r7, #0]
  400d7e:	631a      	str	r2, [r3, #48]	; 0x30
}
  400d80:	bf00      	nop
  400d82:	370c      	adds	r7, #12
  400d84:	46bd      	mov	sp, r7
  400d86:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d8a:	4770      	bx	lr

00400d8c <hri_pio_get_ODSR_reg>:
{
  400d8c:	b480      	push	{r7}
  400d8e:	b085      	sub	sp, #20
  400d90:	af00      	add	r7, sp, #0
  400d92:	6078      	str	r0, [r7, #4]
  400d94:	6039      	str	r1, [r7, #0]
	tmp = ((Pio *)hw)->PIO_ODSR;
  400d96:	687b      	ldr	r3, [r7, #4]
  400d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400d9a:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400d9c:	68fa      	ldr	r2, [r7, #12]
  400d9e:	683b      	ldr	r3, [r7, #0]
  400da0:	4013      	ands	r3, r2
  400da2:	60fb      	str	r3, [r7, #12]
	return tmp;
  400da4:	68fb      	ldr	r3, [r7, #12]
}
  400da6:	4618      	mov	r0, r3
  400da8:	3714      	adds	r7, #20
  400daa:	46bd      	mov	sp, r7
  400dac:	f85d 7b04 	ldr.w	r7, [sp], #4
  400db0:	4770      	bx	lr

00400db2 <hri_pio_clear_ODSR_reg>:
{
  400db2:	b480      	push	{r7}
  400db4:	b083      	sub	sp, #12
  400db6:	af00      	add	r7, sp, #0
  400db8:	6078      	str	r0, [r7, #4]
  400dba:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400dbc:	687b      	ldr	r3, [r7, #4]
  400dbe:	683a      	ldr	r2, [r7, #0]
  400dc0:	635a      	str	r2, [r3, #52]	; 0x34
}
  400dc2:	bf00      	nop
  400dc4:	370c      	adds	r7, #12
  400dc6:	46bd      	mov	sp, r7
  400dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dcc:	4770      	bx	lr
	...

00400dd0 <port_to_reg>:
{
  400dd0:	b480      	push	{r7}
  400dd2:	b083      	sub	sp, #12
  400dd4:	af00      	add	r7, sp, #0
  400dd6:	4603      	mov	r3, r0
  400dd8:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  400dda:	79fb      	ldrb	r3, [r7, #7]
  400ddc:	025b      	lsls	r3, r3, #9
  400dde:	461a      	mov	r2, r3
  400de0:	4b03      	ldr	r3, [pc, #12]	; (400df0 <port_to_reg+0x20>)
  400de2:	4413      	add	r3, r2
}
  400de4:	4618      	mov	r0, r3
  400de6:	370c      	adds	r7, #12
  400de8:	46bd      	mov	sp, r7
  400dea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dee:	4770      	bx	lr
  400df0:	400e0e00 	.word	0x400e0e00

00400df4 <_gpio_set_level>:
{
  400df4:	b580      	push	{r7, lr}
  400df6:	b084      	sub	sp, #16
  400df8:	af00      	add	r7, sp, #0
  400dfa:	4603      	mov	r3, r0
  400dfc:	6039      	str	r1, [r7, #0]
  400dfe:	71fb      	strb	r3, [r7, #7]
  400e00:	4613      	mov	r3, r2
  400e02:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400e04:	79fb      	ldrb	r3, [r7, #7]
  400e06:	4618      	mov	r0, r3
  400e08:	4b09      	ldr	r3, [pc, #36]	; (400e30 <_gpio_set_level+0x3c>)
  400e0a:	4798      	blx	r3
  400e0c:	60f8      	str	r0, [r7, #12]
	if (level) {
  400e0e:	79bb      	ldrb	r3, [r7, #6]
  400e10:	2b00      	cmp	r3, #0
  400e12:	d004      	beq.n	400e1e <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  400e14:	6839      	ldr	r1, [r7, #0]
  400e16:	68f8      	ldr	r0, [r7, #12]
  400e18:	4b06      	ldr	r3, [pc, #24]	; (400e34 <_gpio_set_level+0x40>)
  400e1a:	4798      	blx	r3
}
  400e1c:	e003      	b.n	400e26 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  400e1e:	6839      	ldr	r1, [r7, #0]
  400e20:	68f8      	ldr	r0, [r7, #12]
  400e22:	4b05      	ldr	r3, [pc, #20]	; (400e38 <_gpio_set_level+0x44>)
  400e24:	4798      	blx	r3
}
  400e26:	bf00      	nop
  400e28:	3710      	adds	r7, #16
  400e2a:	46bd      	mov	sp, r7
  400e2c:	bd80      	pop	{r7, pc}
  400e2e:	bf00      	nop
  400e30:	00400dd1 	.word	0x00400dd1
  400e34:	00400d71 	.word	0x00400d71
  400e38:	00400db3 	.word	0x00400db3

00400e3c <_gpio_toggle_level>:
{
  400e3c:	b580      	push	{r7, lr}
  400e3e:	b086      	sub	sp, #24
  400e40:	af00      	add	r7, sp, #0
  400e42:	4603      	mov	r3, r0
  400e44:	6039      	str	r1, [r7, #0]
  400e46:	71fb      	strb	r3, [r7, #7]
	void *const hw = port_to_reg(port);
  400e48:	79fb      	ldrb	r3, [r7, #7]
  400e4a:	4618      	mov	r0, r3
  400e4c:	4b0c      	ldr	r3, [pc, #48]	; (400e80 <_gpio_toggle_level+0x44>)
  400e4e:	4798      	blx	r3
  400e50:	6178      	str	r0, [r7, #20]
	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
  400e52:	6839      	ldr	r1, [r7, #0]
  400e54:	6978      	ldr	r0, [r7, #20]
  400e56:	4b0b      	ldr	r3, [pc, #44]	; (400e84 <_gpio_toggle_level+0x48>)
  400e58:	4798      	blx	r3
  400e5a:	6138      	str	r0, [r7, #16]
	bits_set   = (~bits_clear) & mask;
  400e5c:	693b      	ldr	r3, [r7, #16]
  400e5e:	43da      	mvns	r2, r3
  400e60:	683b      	ldr	r3, [r7, #0]
  400e62:	4013      	ands	r3, r2
  400e64:	60fb      	str	r3, [r7, #12]
	hri_pio_set_ODSR_reg(hw, bits_set);
  400e66:	68f9      	ldr	r1, [r7, #12]
  400e68:	6978      	ldr	r0, [r7, #20]
  400e6a:	4b07      	ldr	r3, [pc, #28]	; (400e88 <_gpio_toggle_level+0x4c>)
  400e6c:	4798      	blx	r3
	hri_pio_clear_ODSR_reg(hw, bits_clear);
  400e6e:	6939      	ldr	r1, [r7, #16]
  400e70:	6978      	ldr	r0, [r7, #20]
  400e72:	4b06      	ldr	r3, [pc, #24]	; (400e8c <_gpio_toggle_level+0x50>)
  400e74:	4798      	blx	r3
}
  400e76:	bf00      	nop
  400e78:	3718      	adds	r7, #24
  400e7a:	46bd      	mov	sp, r7
  400e7c:	bd80      	pop	{r7, pc}
  400e7e:	bf00      	nop
  400e80:	00400dd1 	.word	0x00400dd1
  400e84:	00400d8d 	.word	0x00400d8d
  400e88:	00400d71 	.word	0x00400d71
  400e8c:	00400db3 	.word	0x00400db3

00400e90 <gpio_set_pin_level>:
{
  400e90:	b580      	push	{r7, lr}
  400e92:	b082      	sub	sp, #8
  400e94:	af00      	add	r7, sp, #0
  400e96:	4603      	mov	r3, r0
  400e98:	460a      	mov	r2, r1
  400e9a:	71fb      	strb	r3, [r7, #7]
  400e9c:	4613      	mov	r3, r2
  400e9e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  400ea0:	79fb      	ldrb	r3, [r7, #7]
  400ea2:	095b      	lsrs	r3, r3, #5
  400ea4:	b2d8      	uxtb	r0, r3
  400ea6:	79fb      	ldrb	r3, [r7, #7]
  400ea8:	f003 031f 	and.w	r3, r3, #31
  400eac:	2201      	movs	r2, #1
  400eae:	fa02 f303 	lsl.w	r3, r2, r3
  400eb2:	79ba      	ldrb	r2, [r7, #6]
  400eb4:	4619      	mov	r1, r3
  400eb6:	4b03      	ldr	r3, [pc, #12]	; (400ec4 <gpio_set_pin_level+0x34>)
  400eb8:	4798      	blx	r3
}
  400eba:	bf00      	nop
  400ebc:	3708      	adds	r7, #8
  400ebe:	46bd      	mov	sp, r7
  400ec0:	bd80      	pop	{r7, pc}
  400ec2:	bf00      	nop
  400ec4:	00400df5 	.word	0x00400df5

00400ec8 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
  400ec8:	b580      	push	{r7, lr}
  400eca:	b082      	sub	sp, #8
  400ecc:	af00      	add	r7, sp, #0
  400ece:	4603      	mov	r3, r0
  400ed0:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  400ed2:	79fb      	ldrb	r3, [r7, #7]
  400ed4:	095b      	lsrs	r3, r3, #5
  400ed6:	b2d8      	uxtb	r0, r3
  400ed8:	79fb      	ldrb	r3, [r7, #7]
  400eda:	f003 031f 	and.w	r3, r3, #31
  400ede:	2201      	movs	r2, #1
  400ee0:	fa02 f303 	lsl.w	r3, r2, r3
  400ee4:	4619      	mov	r1, r3
  400ee6:	4b03      	ldr	r3, [pc, #12]	; (400ef4 <gpio_toggle_pin_level+0x2c>)
  400ee8:	4798      	blx	r3
}
  400eea:	bf00      	nop
  400eec:	3708      	adds	r7, #8
  400eee:	46bd      	mov	sp, r7
  400ef0:	bd80      	pop	{r7, pc}
  400ef2:	bf00      	nop
  400ef4:	00400e3d 	.word	0x00400e3d

00400ef8 <glue_crash_and_burn>:
//Returns if glue_set_peripherals_inited was called before.  Crashes otherwise.
void glue_enforce_driver_init(void);

//For use during debugging.  Mainly used to check that things don't return zero.
static inline void glue_crash_and_burn(void)
{
  400ef8:	b580      	push	{r7, lr}
  400efa:	b082      	sub	sp, #8
  400efc:	af00      	add	r7, sp, #0
	while(1)
	{
		gpio_toggle_pin_level(LED0);
  400efe:	2054      	movs	r0, #84	; 0x54
  400f00:	4b07      	ldr	r3, [pc, #28]	; (400f20 <glue_crash_and_burn+0x28>)
  400f02:	4798      	blx	r3
		//delay_ms(1);
		uint8_t test;
		for(uint32_t i = 0; i < 150000000; i++)
  400f04:	2300      	movs	r3, #0
  400f06:	603b      	str	r3, [r7, #0]
  400f08:	e005      	b.n	400f16 <glue_crash_and_burn+0x1e>
		{
			test++;
  400f0a:	79fb      	ldrb	r3, [r7, #7]
  400f0c:	3301      	adds	r3, #1
  400f0e:	71fb      	strb	r3, [r7, #7]
		for(uint32_t i = 0; i < 150000000; i++)
  400f10:	683b      	ldr	r3, [r7, #0]
  400f12:	3301      	adds	r3, #1
  400f14:	603b      	str	r3, [r7, #0]
  400f16:	683b      	ldr	r3, [r7, #0]
  400f18:	4a02      	ldr	r2, [pc, #8]	; (400f24 <glue_crash_and_burn+0x2c>)
  400f1a:	4293      	cmp	r3, r2
  400f1c:	d9f5      	bls.n	400f0a <glue_crash_and_burn+0x12>
	{
  400f1e:	e7ee      	b.n	400efe <glue_crash_and_burn+0x6>
  400f20:	00400ec9 	.word	0x00400ec9
  400f24:	08f0d17f 	.word	0x08f0d17f

00400f28 <glue_init>:
static void glue_spi0_cb_rx_done(struct _dma_resource *resource);
static void glue_spi0_cb_error(struct _dma_resource *resource);


void glue_init(void)
{
  400f28:	b580      	push	{r7, lr}
  400f2a:	af00      	add	r7, sp, #0
	//Set up SPI0
	//Set up IRQ0
	SPI_ZERO.halSpiDriver = &SPI_0;
  400f2c:	4b15      	ldr	r3, [pc, #84]	; (400f84 <glue_init+0x5c>)
  400f2e:	4a16      	ldr	r2, [pc, #88]	; (400f88 <glue_init+0x60>)
  400f30:	601a      	str	r2, [r3, #0]
	//IRQ_ZERO.halIRQDriver = IRQ0;
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi0_cb_tx_done);
  400f32:	4b14      	ldr	r3, [pc, #80]	; (400f84 <glue_init+0x5c>)
  400f34:	681b      	ldr	r3, [r3, #0]
  400f36:	4a15      	ldr	r2, [pc, #84]	; (400f8c <glue_init+0x64>)
  400f38:	2100      	movs	r1, #0
  400f3a:	4618      	mov	r0, r3
  400f3c:	4b14      	ldr	r3, [pc, #80]	; (400f90 <glue_init+0x68>)
  400f3e:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi0_cb_rx_done);
  400f40:	4b10      	ldr	r3, [pc, #64]	; (400f84 <glue_init+0x5c>)
  400f42:	681b      	ldr	r3, [r3, #0]
  400f44:	4a13      	ldr	r2, [pc, #76]	; (400f94 <glue_init+0x6c>)
  400f46:	2101      	movs	r1, #1
  400f48:	4618      	mov	r0, r3
  400f4a:	4b11      	ldr	r3, [pc, #68]	; (400f90 <glue_init+0x68>)
  400f4c:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi0_cb_error);
  400f4e:	4b0d      	ldr	r3, [pc, #52]	; (400f84 <glue_init+0x5c>)
  400f50:	681b      	ldr	r3, [r3, #0]
  400f52:	4a11      	ldr	r2, [pc, #68]	; (400f98 <glue_init+0x70>)
  400f54:	2102      	movs	r1, #2
  400f56:	4618      	mov	r0, r3
  400f58:	4b0d      	ldr	r3, [pc, #52]	; (400f90 <glue_init+0x68>)
  400f5a:	4798      	blx	r3

	AT86_Init(&SPI_ZERO, &IRQ_ZERO, AT86_INSTANCE0);
  400f5c:	2200      	movs	r2, #0
  400f5e:	490f      	ldr	r1, [pc, #60]	; (400f9c <glue_init+0x74>)
  400f60:	4808      	ldr	r0, [pc, #32]	; (400f84 <glue_init+0x5c>)
  400f62:	4b0f      	ldr	r3, [pc, #60]	; (400fa0 <glue_init+0x78>)
  400f64:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_0, SPI_MODE_0);
  400f66:	2100      	movs	r1, #0
  400f68:	4807      	ldr	r0, [pc, #28]	; (400f88 <glue_init+0x60>)
  400f6a:	4b0e      	ldr	r3, [pc, #56]	; (400fa4 <glue_init+0x7c>)
  400f6c:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_0, 100000);
  400f6e:	490e      	ldr	r1, [pc, #56]	; (400fa8 <glue_init+0x80>)
  400f70:	4805      	ldr	r0, [pc, #20]	; (400f88 <glue_init+0x60>)
  400f72:	4b0e      	ldr	r3, [pc, #56]	; (400fac <glue_init+0x84>)
  400f74:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
  400f76:	2100      	movs	r1, #0
  400f78:	4803      	ldr	r0, [pc, #12]	; (400f88 <glue_init+0x60>)
  400f7a:	4b0d      	ldr	r3, [pc, #52]	; (400fb0 <glue_init+0x88>)
  400f7c:	4798      	blx	r3
	//spi_m_sync_set_mode(&SPI_0, SPI_MODE_0);
	//spi_m_sync_set_baudrate(&SPI_0, 100000);
	//spi_m_sync_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
}
  400f7e:	bf00      	nop
  400f80:	bd80      	pop	{r7, pc}
  400f82:	bf00      	nop
  400f84:	204013cc 	.word	0x204013cc
  400f88:	20401308 	.word	0x20401308
  400f8c:	00401039 	.word	0x00401039
  400f90:	00401769 	.word	0x00401769
  400f94:	00401059 	.word	0x00401059
  400f98:	00401081 	.word	0x00401081
  400f9c:	204013d4 	.word	0x204013d4
  400fa0:	004001ad 	.word	0x004001ad
  400fa4:	00401601 	.word	0x00401601
  400fa8:	000186a0 	.word	0x000186a0
  400fac:	004015c1 	.word	0x004015c1
  400fb0:	00401645 	.word	0x00401645

00400fb4 <glue_set_peripherals_inited>:

void glue_set_peripherals_inited(void)
{
  400fb4:	b480      	push	{r7}
  400fb6:	af00      	add	r7, sp, #0
	peripherals_inited = true;
  400fb8:	4b03      	ldr	r3, [pc, #12]	; (400fc8 <glue_set_peripherals_inited+0x14>)
  400fba:	2201      	movs	r2, #1
  400fbc:	701a      	strb	r2, [r3, #0]
}
  400fbe:	bf00      	nop
  400fc0:	46bd      	mov	sp, r7
  400fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fc6:	4770      	bx	lr
  400fc8:	204000d4 	.word	0x204000d4

00400fcc <glue_enforce_driver_init>:

//Returns if glue_set_peripherals_inited was called before.  Crashes otherwise.
void glue_enforce_driver_init(void)
{
  400fcc:	b580      	push	{r7, lr}
  400fce:	af00      	add	r7, sp, #0
	if (peripherals_inited == false)
  400fd0:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <glue_enforce_driver_init+0x1c>)
  400fd2:	781b      	ldrb	r3, [r3, #0]
  400fd4:	f083 0301 	eor.w	r3, r3, #1
  400fd8:	b2db      	uxtb	r3, r3
  400fda:	2b00      	cmp	r3, #0
  400fdc:	d001      	beq.n	400fe2 <glue_enforce_driver_init+0x16>
	{
		glue_crash_and_burn();
  400fde:	4b03      	ldr	r3, [pc, #12]	; (400fec <glue_enforce_driver_init+0x20>)
  400fe0:	4798      	blx	r3
	}
}
  400fe2:	bf00      	nop
  400fe4:	bd80      	pop	{r7, pc}
  400fe6:	bf00      	nop
  400fe8:	204000d4 	.word	0x204000d4
  400fec:	00400ef9 	.word	0x00400ef9

00400ff0 <glue_spi0_dma_send_bytes>:

void glue_spi0_dma_send_bytes(SpiDevice* spi, uint8_t *buf, uint16_t numBytes)
{
  400ff0:	b590      	push	{r4, r7, lr}
  400ff2:	b085      	sub	sp, #20
  400ff4:	af00      	add	r7, sp, #0
  400ff6:	60f8      	str	r0, [r7, #12]
  400ff8:	60b9      	str	r1, [r7, #8]
  400ffa:	4613      	mov	r3, r2
  400ffc:	80fb      	strh	r3, [r7, #6]
	gpio_set_pin_level(CS, false);
  400ffe:	2100      	movs	r1, #0
  401000:	2059      	movs	r0, #89	; 0x59
  401002:	4b08      	ldr	r3, [pc, #32]	; (401024 <glue_spi0_dma_send_bytes+0x34>)
  401004:	4798      	blx	r3
	
	
	spi_m_dma_enable(&SPI_0);
  401006:	4808      	ldr	r0, [pc, #32]	; (401028 <glue_spi0_dma_send_bytes+0x38>)
  401008:	4b08      	ldr	r3, [pc, #32]	; (40102c <glue_spi0_dma_send_bytes+0x3c>)
  40100a:	4798      	blx	r3
	spi_m_dma_transfer(spi->halSpiDriver, buf, (uint8_t* const) spi0RxBuf, numBytes);
  40100c:	68fb      	ldr	r3, [r7, #12]
  40100e:	6818      	ldr	r0, [r3, #0]
  401010:	88fb      	ldrh	r3, [r7, #6]
  401012:	4a07      	ldr	r2, [pc, #28]	; (401030 <glue_spi0_dma_send_bytes+0x40>)
  401014:	68b9      	ldr	r1, [r7, #8]
  401016:	4c07      	ldr	r4, [pc, #28]	; (401034 <glue_spi0_dma_send_bytes+0x44>)
  401018:	47a0      	blx	r4
}
  40101a:	bf00      	nop
  40101c:	3714      	adds	r7, #20
  40101e:	46bd      	mov	sp, r7
  401020:	bd90      	pop	{r4, r7, pc}
  401022:	bf00      	nop
  401024:	00400e91 	.word	0x00400e91
  401028:	20401308 	.word	0x20401308
  40102c:	00401585 	.word	0x00401585
  401030:	204000d8 	.word	0x204000d8
  401034:	00401721 	.word	0x00401721

00401038 <glue_spi0_cb_tx_done>:

void glue_spi0_cb_tx_done(struct _dma_resource *resource)
{
  401038:	b480      	push	{r7}
  40103a:	b085      	sub	sp, #20
  40103c:	af00      	add	r7, sp, #0
  40103e:	6078      	str	r0, [r7, #4]
	//gpio_set_pin_level(CS, true);
	
	int i;
	i = 0;
  401040:	2300      	movs	r3, #0
  401042:	60fb      	str	r3, [r7, #12]
	i++;
  401044:	68fb      	ldr	r3, [r7, #12]
  401046:	3301      	adds	r3, #1
  401048:	60fb      	str	r3, [r7, #12]
	asm(""); // To stop meddlesome optimization
}
  40104a:	bf00      	nop
  40104c:	3714      	adds	r7, #20
  40104e:	46bd      	mov	sp, r7
  401050:	f85d 7b04 	ldr.w	r7, [sp], #4
  401054:	4770      	bx	lr
	...

00401058 <glue_spi0_cb_rx_done>:

void glue_spi0_cb_rx_done(struct _dma_resource *resource)
{
  401058:	b580      	push	{r7, lr}
  40105a:	b084      	sub	sp, #16
  40105c:	af00      	add	r7, sp, #0
  40105e:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS, true);
  401060:	2101      	movs	r1, #1
  401062:	2059      	movs	r0, #89	; 0x59
  401064:	4b05      	ldr	r3, [pc, #20]	; (40107c <glue_spi0_cb_rx_done+0x24>)
  401066:	4798      	blx	r3
	
	int i;
	i = 0;
  401068:	2300      	movs	r3, #0
  40106a:	60fb      	str	r3, [r7, #12]
	i++;
  40106c:	68fb      	ldr	r3, [r7, #12]
  40106e:	3301      	adds	r3, #1
  401070:	60fb      	str	r3, [r7, #12]
	asm(""); // To stop meddlesome optimization
}
  401072:	bf00      	nop
  401074:	3710      	adds	r7, #16
  401076:	46bd      	mov	sp, r7
  401078:	bd80      	pop	{r7, pc}
  40107a:	bf00      	nop
  40107c:	00400e91 	.word	0x00400e91

00401080 <glue_spi0_cb_error>:

void glue_spi0_cb_error(struct _dma_resource *resource)
{
  401080:	b580      	push	{r7, lr}
  401082:	b084      	sub	sp, #16
  401084:	af00      	add	r7, sp, #0
  401086:	6078      	str	r0, [r7, #4]
	gpio_set_pin_level(CS, true);
  401088:	2101      	movs	r1, #1
  40108a:	2059      	movs	r0, #89	; 0x59
  40108c:	4b05      	ldr	r3, [pc, #20]	; (4010a4 <glue_spi0_cb_error+0x24>)
  40108e:	4798      	blx	r3
	
	int i;
	i = 0;
  401090:	2300      	movs	r3, #0
  401092:	60fb      	str	r3, [r7, #12]
	i++;
  401094:	68fb      	ldr	r3, [r7, #12]
  401096:	3301      	adds	r3, #1
  401098:	60fb      	str	r3, [r7, #12]
	asm(""); // To stop meddlesome optimization
}
  40109a:	bf00      	nop
  40109c:	3710      	adds	r7, #16
  40109e:	46bd      	mov	sp, r7
  4010a0:	bd80      	pop	{r7, pc}
  4010a2:	bf00      	nop
  4010a4:	00400e91 	.word	0x00400e91

004010a8 <button_on_PB0_pressed1>:
	//asm("BKPT #1");
}
*/

static void button_on_PB0_pressed1(void)
{
  4010a8:	b480      	push	{r7}
  4010aa:	af00      	add	r7, sp, #0
	extInts++;
  4010ac:	4b05      	ldr	r3, [pc, #20]	; (4010c4 <button_on_PB0_pressed1+0x1c>)
  4010ae:	881b      	ldrh	r3, [r3, #0]
  4010b0:	3301      	adds	r3, #1
  4010b2:	b29a      	uxth	r2, r3
  4010b4:	4b03      	ldr	r3, [pc, #12]	; (4010c4 <button_on_PB0_pressed1+0x1c>)
  4010b6:	801a      	strh	r2, [r3, #0]
}
  4010b8:	bf00      	nop
  4010ba:	46bd      	mov	sp, r7
  4010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010c0:	4770      	bx	lr
  4010c2:	bf00      	nop
  4010c4:	204000d6 	.word	0x204000d6

004010c8 <EXTERNAL_IRQ_0_example1>:

void EXTERNAL_IRQ_0_example1(void)
{
  4010c8:	b580      	push	{r7, lr}
  4010ca:	af00      	add	r7, sp, #0
	ext_irq_register(PIO_PB0_IDX, button_on_PB0_pressed1);
  4010cc:	4902      	ldr	r1, [pc, #8]	; (4010d8 <EXTERNAL_IRQ_0_example1+0x10>)
  4010ce:	2020      	movs	r0, #32
  4010d0:	4b02      	ldr	r3, [pc, #8]	; (4010dc <EXTERNAL_IRQ_0_example1+0x14>)
  4010d2:	4798      	blx	r3
  4010d4:	bf00      	nop
  4010d6:	bd80      	pop	{r7, pc}
  4010d8:	004010a9 	.word	0x004010a9
  4010dc:	00401231 	.word	0x00401231

004010e0 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
  4010e0:	b480      	push	{r7}
  4010e2:	b085      	sub	sp, #20
  4010e4:	af00      	add	r7, sp, #0
  4010e6:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010e8:	f3ef 8310 	mrs	r3, PRIMASK
  4010ec:	60fb      	str	r3, [r7, #12]
  return(result);
  4010ee:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
  4010f0:	687b      	ldr	r3, [r7, #4]
  4010f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4010f4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4010f6:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  4010fa:	bf00      	nop
  4010fc:	3714      	adds	r7, #20
  4010fe:	46bd      	mov	sp, r7
  401100:	f85d 7b04 	ldr.w	r7, [sp], #4
  401104:	4770      	bx	lr

00401106 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
  401106:	b480      	push	{r7}
  401108:	b085      	sub	sp, #20
  40110a:	af00      	add	r7, sp, #0
  40110c:	6078      	str	r0, [r7, #4]
  40110e:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
  401112:	687b      	ldr	r3, [r7, #4]
  401114:	681b      	ldr	r3, [r3, #0]
  401116:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	f383 8810 	msr	PRIMASK, r3
}
  40111e:	bf00      	nop
  401120:	3714      	adds	r7, #20
  401122:	46bd      	mov	sp, r7
  401124:	f85d 7b04 	ldr.w	r7, [sp], #4
  401128:	4770      	bx	lr
	...

0040112c <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
  40112c:	b580      	push	{r7, lr}
  40112e:	b084      	sub	sp, #16
  401130:	af00      	add	r7, sp, #0
  401132:	6078      	str	r0, [r7, #4]
  401134:	6039      	str	r1, [r7, #0]
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
  401136:	687b      	ldr	r3, [r7, #4]
  401138:	2b00      	cmp	r3, #0
  40113a:	d004      	beq.n	401146 <dac_sync_init+0x1a>
  40113c:	683b      	ldr	r3, [r7, #0]
  40113e:	2b00      	cmp	r3, #0
  401140:	d001      	beq.n	401146 <dac_sync_init+0x1a>
  401142:	2301      	movs	r3, #1
  401144:	e000      	b.n	401148 <dac_sync_init+0x1c>
  401146:	2300      	movs	r3, #0
  401148:	f003 0301 	and.w	r3, r3, #1
  40114c:	b2db      	uxtb	r3, r3
  40114e:	223c      	movs	r2, #60	; 0x3c
  401150:	4914      	ldr	r1, [pc, #80]	; (4011a4 <dac_sync_init+0x78>)
  401152:	4618      	mov	r0, r3
  401154:	4b14      	ldr	r3, [pc, #80]	; (4011a8 <dac_sync_init+0x7c>)
  401156:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
  401158:	687b      	ldr	r3, [r7, #4]
  40115a:	6839      	ldr	r1, [r7, #0]
  40115c:	4618      	mov	r0, r3
  40115e:	4b13      	ldr	r3, [pc, #76]	; (4011ac <dac_sync_init+0x80>)
  401160:	4798      	blx	r3
  401162:	60b8      	str	r0, [r7, #8]
	if (rc) {
  401164:	68bb      	ldr	r3, [r7, #8]
  401166:	2b00      	cmp	r3, #0
  401168:	d001      	beq.n	40116e <dac_sync_init+0x42>
		return rc;
  40116a:	68bb      	ldr	r3, [r7, #8]
  40116c:	e015      	b.n	40119a <dac_sync_init+0x6e>
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
  40116e:	2300      	movs	r3, #0
  401170:	73fb      	strb	r3, [r7, #15]
  401172:	e00e      	b.n	401192 <dac_sync_init+0x66>
		descr->sel_ch[i].buffer = NULL;
  401174:	7bfb      	ldrb	r3, [r7, #15]
  401176:	687a      	ldr	r2, [r7, #4]
  401178:	00db      	lsls	r3, r3, #3
  40117a:	4413      	add	r3, r2
  40117c:	2200      	movs	r2, #0
  40117e:	605a      	str	r2, [r3, #4]
		descr->sel_ch[i].length = 0;
  401180:	7bfb      	ldrb	r3, [r7, #15]
  401182:	687a      	ldr	r2, [r7, #4]
  401184:	00db      	lsls	r3, r3, #3
  401186:	4413      	add	r3, r2
  401188:	2200      	movs	r2, #0
  40118a:	609a      	str	r2, [r3, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
  40118c:	7bfb      	ldrb	r3, [r7, #15]
  40118e:	3301      	adds	r3, #1
  401190:	73fb      	strb	r3, [r7, #15]
  401192:	7bfb      	ldrb	r3, [r7, #15]
  401194:	2b01      	cmp	r3, #1
  401196:	d9ed      	bls.n	401174 <dac_sync_init+0x48>
	}

	return ERR_NONE;
  401198:	2300      	movs	r3, #0
}
  40119a:	4618      	mov	r0, r3
  40119c:	3710      	adds	r7, #16
  40119e:	46bd      	mov	sp, r7
  4011a0:	bd80      	pop	{r7, pc}
  4011a2:	bf00      	nop
  4011a4:	00406a64 	.word	0x00406a64
  4011a8:	004020b9 	.word	0x004020b9
  4011ac:	00402601 	.word	0x00402601

004011b0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4011b0:	b590      	push	{r4, r7, lr}
  4011b2:	b083      	sub	sp, #12
  4011b4:	af00      	add	r7, sp, #0
  4011b6:	4603      	mov	r3, r0
  4011b8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4011ba:	4b07      	ldr	r3, [pc, #28]	; (4011d8 <delay_us+0x28>)
  4011bc:	681c      	ldr	r4, [r3, #0]
  4011be:	88fb      	ldrh	r3, [r7, #6]
  4011c0:	4618      	mov	r0, r3
  4011c2:	4b06      	ldr	r3, [pc, #24]	; (4011dc <delay_us+0x2c>)
  4011c4:	4798      	blx	r3
  4011c6:	4603      	mov	r3, r0
  4011c8:	4619      	mov	r1, r3
  4011ca:	4620      	mov	r0, r4
  4011cc:	4b04      	ldr	r3, [pc, #16]	; (4011e0 <delay_us+0x30>)
  4011ce:	4798      	blx	r3
}
  4011d0:	bf00      	nop
  4011d2:	370c      	adds	r7, #12
  4011d4:	46bd      	mov	sp, r7
  4011d6:	bd90      	pop	{r4, r7, pc}
  4011d8:	204010dc 	.word	0x204010dc
  4011dc:	0040236d 	.word	0x0040236d
  4011e0:	00402395 	.word	0x00402395

004011e4 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
  4011e4:	b580      	push	{r7, lr}
  4011e6:	b082      	sub	sp, #8
  4011e8:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4011ea:	2300      	movs	r3, #0
  4011ec:	80fb      	strh	r3, [r7, #6]
  4011ee:	e00e      	b.n	40120e <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
  4011f0:	88fb      	ldrh	r3, [r7, #6]
  4011f2:	4a0c      	ldr	r2, [pc, #48]	; (401224 <ext_irq_init+0x40>)
  4011f4:	00db      	lsls	r3, r3, #3
  4011f6:	4413      	add	r3, r2
  4011f8:	f04f 32ff 	mov.w	r2, #4294967295
  4011fc:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
  4011fe:	88fb      	ldrh	r3, [r7, #6]
  401200:	4a08      	ldr	r2, [pc, #32]	; (401224 <ext_irq_init+0x40>)
  401202:	2100      	movs	r1, #0
  401204:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401208:	88fb      	ldrh	r3, [r7, #6]
  40120a:	3301      	adds	r3, #1
  40120c:	80fb      	strh	r3, [r7, #6]
  40120e:	88fb      	ldrh	r3, [r7, #6]
  401210:	2b00      	cmp	r3, #0
  401212:	d0ed      	beq.n	4011f0 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
  401214:	4804      	ldr	r0, [pc, #16]	; (401228 <ext_irq_init+0x44>)
  401216:	4b05      	ldr	r3, [pc, #20]	; (40122c <ext_irq_init+0x48>)
  401218:	4798      	blx	r3
  40121a:	4603      	mov	r3, r0
}
  40121c:	4618      	mov	r0, r3
  40121e:	3708      	adds	r7, #8
  401220:	46bd      	mov	sp, r7
  401222:	bd80      	pop	{r7, pc}
  401224:	204010e0 	.word	0x204010e0
  401228:	00401389 	.word	0x00401389
  40122c:	00402c35 	.word	0x00402c35

00401230 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
  401230:	b580      	push	{r7, lr}
  401232:	b086      	sub	sp, #24
  401234:	af00      	add	r7, sp, #0
  401236:	6078      	str	r0, [r7, #4]
  401238:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
  40123a:	2300      	movs	r3, #0
  40123c:	75fb      	strb	r3, [r7, #23]
  40123e:	2300      	movs	r3, #0
  401240:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
  401242:	2300      	movs	r3, #0
  401244:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
  401246:	e012      	b.n	40126e <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
  401248:	7dfb      	ldrb	r3, [r7, #23]
  40124a:	4a4d      	ldr	r2, [pc, #308]	; (401380 <ext_irq_register+0x150>)
  40124c:	00db      	lsls	r3, r3, #3
  40124e:	4413      	add	r3, r2
  401250:	685a      	ldr	r2, [r3, #4]
  401252:	687b      	ldr	r3, [r7, #4]
  401254:	429a      	cmp	r2, r3
  401256:	d107      	bne.n	401268 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
  401258:	7dfb      	ldrb	r3, [r7, #23]
  40125a:	4949      	ldr	r1, [pc, #292]	; (401380 <ext_irq_register+0x150>)
  40125c:	683a      	ldr	r2, [r7, #0]
  40125e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
  401262:	2301      	movs	r3, #1
  401264:	757b      	strb	r3, [r7, #21]
			break;
  401266:	e005      	b.n	401274 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401268:	7dfb      	ldrb	r3, [r7, #23]
  40126a:	3301      	adds	r3, #1
  40126c:	75fb      	strb	r3, [r7, #23]
  40126e:	7dfb      	ldrb	r3, [r7, #23]
  401270:	2b00      	cmp	r3, #0
  401272:	d0e9      	beq.n	401248 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
  401274:	683b      	ldr	r3, [r7, #0]
  401276:	2b00      	cmp	r3, #0
  401278:	d10e      	bne.n	401298 <ext_irq_register+0x68>
		if (!found) {
  40127a:	7d7b      	ldrb	r3, [r7, #21]
  40127c:	f083 0301 	eor.w	r3, r3, #1
  401280:	b2db      	uxtb	r3, r3
  401282:	2b00      	cmp	r3, #0
  401284:	d002      	beq.n	40128c <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
  401286:	f06f 030c 	mvn.w	r3, #12
  40128a:	e074      	b.n	401376 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
  40128c:	2100      	movs	r1, #0
  40128e:	6878      	ldr	r0, [r7, #4]
  401290:	4b3c      	ldr	r3, [pc, #240]	; (401384 <ext_irq_register+0x154>)
  401292:	4798      	blx	r3
  401294:	4603      	mov	r3, r0
  401296:	e06e      	b.n	401376 <ext_irq_register+0x146>
	}

	if (!found) {
  401298:	7d7b      	ldrb	r3, [r7, #21]
  40129a:	f083 0301 	eor.w	r3, r3, #1
  40129e:	b2db      	uxtb	r3, r3
  4012a0:	2b00      	cmp	r3, #0
  4012a2:	d05a      	beq.n	40135a <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4012a4:	2300      	movs	r3, #0
  4012a6:	75fb      	strb	r3, [r7, #23]
  4012a8:	e016      	b.n	4012d8 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
  4012aa:	7dfb      	ldrb	r3, [r7, #23]
  4012ac:	4a34      	ldr	r2, [pc, #208]	; (401380 <ext_irq_register+0x150>)
  4012ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4012b2:	2b00      	cmp	r3, #0
  4012b4:	d10d      	bne.n	4012d2 <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
  4012b6:	7dfb      	ldrb	r3, [r7, #23]
  4012b8:	4931      	ldr	r1, [pc, #196]	; (401380 <ext_irq_register+0x150>)
  4012ba:	683a      	ldr	r2, [r7, #0]
  4012bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
  4012c0:	7dfb      	ldrb	r3, [r7, #23]
  4012c2:	4a2f      	ldr	r2, [pc, #188]	; (401380 <ext_irq_register+0x150>)
  4012c4:	00db      	lsls	r3, r3, #3
  4012c6:	4413      	add	r3, r2
  4012c8:	687a      	ldr	r2, [r7, #4]
  4012ca:	605a      	str	r2, [r3, #4]
				found           = true;
  4012cc:	2301      	movs	r3, #1
  4012ce:	757b      	strb	r3, [r7, #21]
				break;
  4012d0:	e005      	b.n	4012de <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  4012d2:	7dfb      	ldrb	r3, [r7, #23]
  4012d4:	3301      	adds	r3, #1
  4012d6:	75fb      	strb	r3, [r7, #23]
  4012d8:	7dfb      	ldrb	r3, [r7, #23]
  4012da:	2b00      	cmp	r3, #0
  4012dc:	d0e5      	beq.n	4012aa <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  4012de:	e036      	b.n	40134e <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  4012e0:	7dfb      	ldrb	r3, [r7, #23]
  4012e2:	4a27      	ldr	r2, [pc, #156]	; (401380 <ext_irq_register+0x150>)
  4012e4:	00db      	lsls	r3, r3, #3
  4012e6:	4413      	add	r3, r2
  4012e8:	685a      	ldr	r2, [r3, #4]
  4012ea:	7dbb      	ldrb	r3, [r7, #22]
  4012ec:	4924      	ldr	r1, [pc, #144]	; (401380 <ext_irq_register+0x150>)
  4012ee:	00db      	lsls	r3, r3, #3
  4012f0:	440b      	add	r3, r1
  4012f2:	685b      	ldr	r3, [r3, #4]
  4012f4:	429a      	cmp	r2, r3
  4012f6:	d227      	bcs.n	401348 <ext_irq_register+0x118>
  4012f8:	7dbb      	ldrb	r3, [r7, #22]
  4012fa:	4a21      	ldr	r2, [pc, #132]	; (401380 <ext_irq_register+0x150>)
  4012fc:	00db      	lsls	r3, r3, #3
  4012fe:	4413      	add	r3, r2
  401300:	685b      	ldr	r3, [r3, #4]
  401302:	f1b3 3fff 	cmp.w	r3, #4294967295
  401306:	d01f      	beq.n	401348 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
  401308:	7dbb      	ldrb	r3, [r7, #22]
  40130a:	491d      	ldr	r1, [pc, #116]	; (401380 <ext_irq_register+0x150>)
  40130c:	f107 020c 	add.w	r2, r7, #12
  401310:	00db      	lsls	r3, r3, #3
  401312:	440b      	add	r3, r1
  401314:	e893 0003 	ldmia.w	r3, {r0, r1}
  401318:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
  40131c:	7dbb      	ldrb	r3, [r7, #22]
  40131e:	7dfa      	ldrb	r2, [r7, #23]
  401320:	4817      	ldr	r0, [pc, #92]	; (401380 <ext_irq_register+0x150>)
  401322:	4917      	ldr	r1, [pc, #92]	; (401380 <ext_irq_register+0x150>)
  401324:	00db      	lsls	r3, r3, #3
  401326:	4403      	add	r3, r0
  401328:	00d2      	lsls	r2, r2, #3
  40132a:	440a      	add	r2, r1
  40132c:	e892 0003 	ldmia.w	r2, {r0, r1}
  401330:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
  401334:	7dfb      	ldrb	r3, [r7, #23]
  401336:	4a12      	ldr	r2, [pc, #72]	; (401380 <ext_irq_register+0x150>)
  401338:	00db      	lsls	r3, r3, #3
  40133a:	4413      	add	r3, r2
  40133c:	f107 020c 	add.w	r2, r7, #12
  401340:	e892 0003 	ldmia.w	r2, {r0, r1}
  401344:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401348:	7dbb      	ldrb	r3, [r7, #22]
  40134a:	3301      	adds	r3, #1
  40134c:	75bb      	strb	r3, [r7, #22]
  40134e:	7dbb      	ldrb	r3, [r7, #22]
  401350:	2b00      	cmp	r3, #0
  401352:	d102      	bne.n	40135a <ext_irq_register+0x12a>
  401354:	7dfb      	ldrb	r3, [r7, #23]
  401356:	2b00      	cmp	r3, #0
  401358:	d0c2      	beq.n	4012e0 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
  40135a:	7d7b      	ldrb	r3, [r7, #21]
  40135c:	f083 0301 	eor.w	r3, r3, #1
  401360:	b2db      	uxtb	r3, r3
  401362:	2b00      	cmp	r3, #0
  401364:	d002      	beq.n	40136c <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
  401366:	f06f 030c 	mvn.w	r3, #12
  40136a:	e004      	b.n	401376 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
  40136c:	2101      	movs	r1, #1
  40136e:	6878      	ldr	r0, [r7, #4]
  401370:	4b04      	ldr	r3, [pc, #16]	; (401384 <ext_irq_register+0x154>)
  401372:	4798      	blx	r3
  401374:	4603      	mov	r3, r0
}
  401376:	4618      	mov	r0, r3
  401378:	3718      	adds	r7, #24
  40137a:	46bd      	mov	sp, r7
  40137c:	bd80      	pop	{r7, pc}
  40137e:	bf00      	nop
  401380:	204010e0 	.word	0x204010e0
  401384:	00402c61 	.word	0x00402c61

00401388 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401388:	b580      	push	{r7, lr}
  40138a:	b084      	sub	sp, #16
  40138c:	af00      	add	r7, sp, #0
  40138e:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401390:	2300      	movs	r3, #0
  401392:	73fb      	strb	r3, [r7, #15]
  401394:	2301      	movs	r3, #1
  401396:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
  401398:	e02a      	b.n	4013f0 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
  40139a:	7bba      	ldrb	r2, [r7, #14]
  40139c:	7bfb      	ldrb	r3, [r7, #15]
  40139e:	4413      	add	r3, r2
  4013a0:	105b      	asrs	r3, r3, #1
  4013a2:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
  4013a4:	7b7b      	ldrb	r3, [r7, #13]
  4013a6:	2b00      	cmp	r3, #0
  4013a8:	d127      	bne.n	4013fa <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  4013aa:	7b7b      	ldrb	r3, [r7, #13]
  4013ac:	4a16      	ldr	r2, [pc, #88]	; (401408 <process_ext_irq+0x80>)
  4013ae:	00db      	lsls	r3, r3, #3
  4013b0:	4413      	add	r3, r2
  4013b2:	685a      	ldr	r2, [r3, #4]
  4013b4:	687b      	ldr	r3, [r7, #4]
  4013b6:	429a      	cmp	r2, r3
  4013b8:	d10b      	bne.n	4013d2 <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
  4013ba:	7b7b      	ldrb	r3, [r7, #13]
  4013bc:	4a12      	ldr	r2, [pc, #72]	; (401408 <process_ext_irq+0x80>)
  4013be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d01b      	beq.n	4013fe <process_ext_irq+0x76>
				ext_irqs[middle].cb();
  4013c6:	7b7b      	ldrb	r3, [r7, #13]
  4013c8:	4a0f      	ldr	r2, [pc, #60]	; (401408 <process_ext_irq+0x80>)
  4013ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4013ce:	4798      	blx	r3
			}
			return;
  4013d0:	e015      	b.n	4013fe <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
  4013d2:	7b7b      	ldrb	r3, [r7, #13]
  4013d4:	4a0c      	ldr	r2, [pc, #48]	; (401408 <process_ext_irq+0x80>)
  4013d6:	00db      	lsls	r3, r3, #3
  4013d8:	4413      	add	r3, r2
  4013da:	685a      	ldr	r2, [r3, #4]
  4013dc:	687b      	ldr	r3, [r7, #4]
  4013de:	429a      	cmp	r2, r3
  4013e0:	d203      	bcs.n	4013ea <process_ext_irq+0x62>
			lower = middle + 1;
  4013e2:	7b7b      	ldrb	r3, [r7, #13]
  4013e4:	3301      	adds	r3, #1
  4013e6:	73fb      	strb	r3, [r7, #15]
  4013e8:	e002      	b.n	4013f0 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
  4013ea:	7b7b      	ldrb	r3, [r7, #13]
  4013ec:	3b01      	subs	r3, #1
  4013ee:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
  4013f0:	7bba      	ldrb	r2, [r7, #14]
  4013f2:	7bfb      	ldrb	r3, [r7, #15]
  4013f4:	429a      	cmp	r2, r3
  4013f6:	d2d0      	bcs.n	40139a <process_ext_irq+0x12>
  4013f8:	e002      	b.n	401400 <process_ext_irq+0x78>
			return;
  4013fa:	bf00      	nop
  4013fc:	e000      	b.n	401400 <process_ext_irq+0x78>
			return;
  4013fe:	bf00      	nop
		}
	}
}
  401400:	3710      	adds	r7, #16
  401402:	46bd      	mov	sp, r7
  401404:	bd80      	pop	{r7, pc}
  401406:	bf00      	nop
  401408:	204010e0 	.word	0x204010e0

0040140c <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
  40140c:	b580      	push	{r7, lr}
  40140e:	b08a      	sub	sp, #40	; 0x28
  401410:	af00      	add	r7, sp, #0
  401412:	60f8      	str	r0, [r7, #12]
  401414:	60b9      	str	r1, [r7, #8]
  401416:	4613      	mov	r3, r2
  401418:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  40141a:	68fb      	ldr	r3, [r7, #12]
  40141c:	3b14      	subs	r3, #20
  40141e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  401420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401422:	8b9b      	ldrh	r3, [r3, #28]
  401424:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  401426:	88fb      	ldrh	r3, [r7, #6]
  401428:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  40142a:	f248 0301 	movw	r3, #32769	; 0x8001
  40142e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
  401430:	68bb      	ldr	r3, [r7, #8]
  401432:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  401434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401436:	f107 0214 	add.w	r2, r7, #20
  40143a:	4611      	mov	r1, r2
  40143c:	4618      	mov	r0, r3
  40143e:	4b06      	ldr	r3, [pc, #24]	; (401458 <i2c_m_sync_read+0x4c>)
  401440:	4798      	blx	r3
  401442:	6238      	str	r0, [r7, #32]

	if (ret) {
  401444:	6a3b      	ldr	r3, [r7, #32]
  401446:	2b00      	cmp	r3, #0
  401448:	d001      	beq.n	40144e <i2c_m_sync_read+0x42>
		return ret;
  40144a:	6a3b      	ldr	r3, [r7, #32]
  40144c:	e000      	b.n	401450 <i2c_m_sync_read+0x44>
	}

	return n;
  40144e:	88fb      	ldrh	r3, [r7, #6]
}
  401450:	4618      	mov	r0, r3
  401452:	3728      	adds	r7, #40	; 0x28
  401454:	46bd      	mov	sp, r7
  401456:	bd80      	pop	{r7, pc}
  401458:	00403b89 	.word	0x00403b89

0040145c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  40145c:	b580      	push	{r7, lr}
  40145e:	b08a      	sub	sp, #40	; 0x28
  401460:	af00      	add	r7, sp, #0
  401462:	60f8      	str	r0, [r7, #12]
  401464:	60b9      	str	r1, [r7, #8]
  401466:	4613      	mov	r3, r2
  401468:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  40146a:	68fb      	ldr	r3, [r7, #12]
  40146c:	3b14      	subs	r3, #20
  40146e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  401470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401472:	8b9b      	ldrh	r3, [r3, #28]
  401474:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  401476:	88fb      	ldrh	r3, [r7, #6]
  401478:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
  40147a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40147e:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
  401480:	68bb      	ldr	r3, [r7, #8]
  401482:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  401484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401486:	f107 0214 	add.w	r2, r7, #20
  40148a:	4611      	mov	r1, r2
  40148c:	4618      	mov	r0, r3
  40148e:	4b06      	ldr	r3, [pc, #24]	; (4014a8 <i2c_m_sync_write+0x4c>)
  401490:	4798      	blx	r3
  401492:	6238      	str	r0, [r7, #32]

	if (ret) {
  401494:	6a3b      	ldr	r3, [r7, #32]
  401496:	2b00      	cmp	r3, #0
  401498:	d001      	beq.n	40149e <i2c_m_sync_write+0x42>
		return ret;
  40149a:	6a3b      	ldr	r3, [r7, #32]
  40149c:	e000      	b.n	4014a0 <i2c_m_sync_write+0x44>
	}

	return n;
  40149e:	88fb      	ldrh	r3, [r7, #6]
}
  4014a0:	4618      	mov	r0, r3
  4014a2:	3728      	adds	r7, #40	; 0x28
  4014a4:	46bd      	mov	sp, r7
  4014a6:	bd80      	pop	{r7, pc}
  4014a8:	00403b89 	.word	0x00403b89

004014ac <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4014ac:	b580      	push	{r7, lr}
  4014ae:	b084      	sub	sp, #16
  4014b0:	af00      	add	r7, sp, #0
  4014b2:	6078      	str	r0, [r7, #4]
  4014b4:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
  4014b6:	687b      	ldr	r3, [r7, #4]
  4014b8:	2b00      	cmp	r3, #0
  4014ba:	bf14      	ite	ne
  4014bc:	2301      	movne	r3, #1
  4014be:	2300      	moveq	r3, #0
  4014c0:	b2db      	uxtb	r3, r3
  4014c2:	2268      	movs	r2, #104	; 0x68
  4014c4:	490c      	ldr	r1, [pc, #48]	; (4014f8 <i2c_m_sync_init+0x4c>)
  4014c6:	4618      	mov	r0, r3
  4014c8:	4b0c      	ldr	r3, [pc, #48]	; (4014fc <i2c_m_sync_init+0x50>)
  4014ca:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  4014cc:	687b      	ldr	r3, [r7, #4]
  4014ce:	6839      	ldr	r1, [r7, #0]
  4014d0:	4618      	mov	r0, r3
  4014d2:	4b0b      	ldr	r3, [pc, #44]	; (401500 <i2c_m_sync_init+0x54>)
  4014d4:	4798      	blx	r3
  4014d6:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  4014d8:	68fb      	ldr	r3, [r7, #12]
  4014da:	2b00      	cmp	r3, #0
  4014dc:	d001      	beq.n	4014e2 <i2c_m_sync_init+0x36>
		return init_status;
  4014de:	68fb      	ldr	r3, [r7, #12]
  4014e0:	e006      	b.n	4014f0 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  4014e2:	687b      	ldr	r3, [r7, #4]
  4014e4:	4a07      	ldr	r2, [pc, #28]	; (401504 <i2c_m_sync_init+0x58>)
  4014e6:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
  4014e8:	687b      	ldr	r3, [r7, #4]
  4014ea:	4a07      	ldr	r2, [pc, #28]	; (401508 <i2c_m_sync_init+0x5c>)
  4014ec:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  4014ee:	2300      	movs	r3, #0
}
  4014f0:	4618      	mov	r0, r3
  4014f2:	3710      	adds	r7, #16
  4014f4:	46bd      	mov	sp, r7
  4014f6:	bd80      	pop	{r7, pc}
  4014f8:	00406a80 	.word	0x00406a80
  4014fc:	004020b9 	.word	0x004020b9
  401500:	00403ae5 	.word	0x00403ae5
  401504:	0040140d 	.word	0x0040140d
  401508:	0040145d 	.word	0x0040145d

0040150c <spi_m_dma_init>:

static int32_t _spi_m_dma_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_dma_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_dma_init(struct spi_m_dma_descriptor *spi, void *const hw)
{
  40150c:	b580      	push	{r7, lr}
  40150e:	b084      	sub	sp, #16
  401510:	af00      	add	r7, sp, #0
  401512:	6078      	str	r0, [r7, #4]
  401514:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
  401516:	2300      	movs	r3, #0
  401518:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
  40151a:	687b      	ldr	r3, [r7, #4]
  40151c:	2b00      	cmp	r3, #0
  40151e:	d004      	beq.n	40152a <spi_m_dma_init+0x1e>
  401520:	683b      	ldr	r3, [r7, #0]
  401522:	2b00      	cmp	r3, #0
  401524:	d001      	beq.n	40152a <spi_m_dma_init+0x1e>
  401526:	2301      	movs	r3, #1
  401528:	e000      	b.n	40152c <spi_m_dma_init+0x20>
  40152a:	2300      	movs	r3, #0
  40152c:	f003 0301 	and.w	r3, r3, #1
  401530:	b2db      	uxtb	r3, r3
  401532:	223d      	movs	r2, #61	; 0x3d
  401534:	490e      	ldr	r1, [pc, #56]	; (401570 <spi_m_dma_init+0x64>)
  401536:	4618      	mov	r0, r3
  401538:	4b0e      	ldr	r3, [pc, #56]	; (401574 <spi_m_dma_init+0x68>)
  40153a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  40153c:	687b      	ldr	r3, [r7, #4]
  40153e:	683a      	ldr	r2, [r7, #0]
  401540:	601a      	str	r2, [r3, #0]

	rc = _spi_m_dma_init(&spi->dev, hw);
  401542:	687b      	ldr	r3, [r7, #4]
  401544:	6839      	ldr	r1, [r7, #0]
  401546:	4618      	mov	r0, r3
  401548:	4b0b      	ldr	r3, [pc, #44]	; (401578 <spi_m_dma_init+0x6c>)
  40154a:	4798      	blx	r3
  40154c:	60f8      	str	r0, [r7, #12]
	if (rc) {
  40154e:	68fb      	ldr	r3, [r7, #12]
  401550:	2b00      	cmp	r3, #0
  401552:	d001      	beq.n	401558 <spi_m_dma_init+0x4c>
		return rc;
  401554:	68fb      	ldr	r3, [r7, #12]
  401556:	e006      	b.n	401566 <spi_m_dma_init+0x5a>
	}

	spi->io.read  = _spi_m_dma_io_read;
  401558:	687b      	ldr	r3, [r7, #4]
  40155a:	4a08      	ldr	r2, [pc, #32]	; (40157c <spi_m_dma_init+0x70>)
  40155c:	621a      	str	r2, [r3, #32]
	spi->io.write = _spi_m_dma_io_write;
  40155e:	687b      	ldr	r3, [r7, #4]
  401560:	4a07      	ldr	r2, [pc, #28]	; (401580 <spi_m_dma_init+0x74>)
  401562:	61da      	str	r2, [r3, #28]

	return ERR_NONE;
  401564:	2300      	movs	r3, #0
}
  401566:	4618      	mov	r0, r3
  401568:	3710      	adds	r7, #16
  40156a:	46bd      	mov	sp, r7
  40156c:	bd80      	pop	{r7, pc}
  40156e:	bf00      	nop
  401570:	00406a9c 	.word	0x00406a9c
  401574:	004020b9 	.word	0x004020b9
  401578:	004034d1 	.word	0x004034d1
  40157c:	00401689 	.word	0x00401689
  401580:	004016d5 	.word	0x004016d5

00401584 <spi_m_dma_enable>:

	_spi_m_dma_deinit(&spi->dev);
}

void spi_m_dma_enable(struct spi_m_dma_descriptor *spi)
{
  401584:	b580      	push	{r7, lr}
  401586:	b082      	sub	sp, #8
  401588:	af00      	add	r7, sp, #0
  40158a:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
  40158c:	687b      	ldr	r3, [r7, #4]
  40158e:	2b00      	cmp	r3, #0
  401590:	bf14      	ite	ne
  401592:	2301      	movne	r3, #1
  401594:	2300      	moveq	r3, #0
  401596:	b2db      	uxtb	r3, r3
  401598:	2254      	movs	r2, #84	; 0x54
  40159a:	4906      	ldr	r1, [pc, #24]	; (4015b4 <spi_m_dma_enable+0x30>)
  40159c:	4618      	mov	r0, r3
  40159e:	4b06      	ldr	r3, [pc, #24]	; (4015b8 <spi_m_dma_enable+0x34>)
  4015a0:	4798      	blx	r3

	_spi_m_dma_enable(&spi->dev);
  4015a2:	687b      	ldr	r3, [r7, #4]
  4015a4:	4618      	mov	r0, r3
  4015a6:	4b05      	ldr	r3, [pc, #20]	; (4015bc <spi_m_dma_enable+0x38>)
  4015a8:	4798      	blx	r3
}
  4015aa:	bf00      	nop
  4015ac:	3708      	adds	r7, #8
  4015ae:	46bd      	mov	sp, r7
  4015b0:	bd80      	pop	{r7, pc}
  4015b2:	bf00      	nop
  4015b4:	00406a9c 	.word	0x00406a9c
  4015b8:	004020b9 	.word	0x004020b9
  4015bc:	004035ed 	.word	0x004035ed

004015c0 <spi_m_dma_set_baudrate>:

	_spi_m_dma_disable(&spi->dev);
}

int32_t spi_m_dma_set_baudrate(struct spi_m_dma_descriptor *spi, const uint32_t baud_val)
{
  4015c0:	b580      	push	{r7, lr}
  4015c2:	b082      	sub	sp, #8
  4015c4:	af00      	add	r7, sp, #0
  4015c6:	6078      	str	r0, [r7, #4]
  4015c8:	6039      	str	r1, [r7, #0]
	ASSERT(spi);
  4015ca:	687b      	ldr	r3, [r7, #4]
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	bf14      	ite	ne
  4015d0:	2301      	movne	r3, #1
  4015d2:	2300      	moveq	r3, #0
  4015d4:	b2db      	uxtb	r3, r3
  4015d6:	2262      	movs	r2, #98	; 0x62
  4015d8:	4906      	ldr	r1, [pc, #24]	; (4015f4 <spi_m_dma_set_baudrate+0x34>)
  4015da:	4618      	mov	r0, r3
  4015dc:	4b06      	ldr	r3, [pc, #24]	; (4015f8 <spi_m_dma_set_baudrate+0x38>)
  4015de:	4798      	blx	r3

	return _spi_m_dma_set_baudrate(&spi->dev, baud_val);
  4015e0:	687b      	ldr	r3, [r7, #4]
  4015e2:	6839      	ldr	r1, [r7, #0]
  4015e4:	4618      	mov	r0, r3
  4015e6:	4b05      	ldr	r3, [pc, #20]	; (4015fc <spi_m_dma_set_baudrate+0x3c>)
  4015e8:	4798      	blx	r3
  4015ea:	4603      	mov	r3, r0
}
  4015ec:	4618      	mov	r0, r3
  4015ee:	3708      	adds	r7, #8
  4015f0:	46bd      	mov	sp, r7
  4015f2:	bd80      	pop	{r7, pc}
  4015f4:	00406a9c 	.word	0x00406a9c
  4015f8:	004020b9 	.word	0x004020b9
  4015fc:	00403695 	.word	0x00403695

00401600 <spi_m_dma_set_mode>:

int32_t spi_m_dma_set_mode(struct spi_m_dma_descriptor *spi, const enum spi_transfer_mode mode)
{
  401600:	b580      	push	{r7, lr}
  401602:	b082      	sub	sp, #8
  401604:	af00      	add	r7, sp, #0
  401606:	6078      	str	r0, [r7, #4]
  401608:	460b      	mov	r3, r1
  40160a:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  40160c:	687b      	ldr	r3, [r7, #4]
  40160e:	2b00      	cmp	r3, #0
  401610:	bf14      	ite	ne
  401612:	2301      	movne	r3, #1
  401614:	2300      	moveq	r3, #0
  401616:	b2db      	uxtb	r3, r3
  401618:	2269      	movs	r2, #105	; 0x69
  40161a:	4907      	ldr	r1, [pc, #28]	; (401638 <spi_m_dma_set_mode+0x38>)
  40161c:	4618      	mov	r0, r3
  40161e:	4b07      	ldr	r3, [pc, #28]	; (40163c <spi_m_dma_set_mode+0x3c>)
  401620:	4798      	blx	r3

	return _spi_m_dma_set_mode(&spi->dev, mode);
  401622:	687b      	ldr	r3, [r7, #4]
  401624:	78fa      	ldrb	r2, [r7, #3]
  401626:	4611      	mov	r1, r2
  401628:	4618      	mov	r0, r3
  40162a:	4b05      	ldr	r3, [pc, #20]	; (401640 <spi_m_dma_set_mode+0x40>)
  40162c:	4798      	blx	r3
  40162e:	4603      	mov	r3, r0
}
  401630:	4618      	mov	r0, r3
  401632:	3708      	adds	r7, #8
  401634:	46bd      	mov	sp, r7
  401636:	bd80      	pop	{r7, pc}
  401638:	00406a9c 	.word	0x00406a9c
  40163c:	004020b9 	.word	0x004020b9
  401640:	0040363d 	.word	0x0040363d

00401644 <spi_m_dma_set_char_size>:

int32_t spi_m_dma_set_char_size(struct spi_m_dma_descriptor *spi, const enum spi_char_size char_size)
{
  401644:	b580      	push	{r7, lr}
  401646:	b082      	sub	sp, #8
  401648:	af00      	add	r7, sp, #0
  40164a:	6078      	str	r0, [r7, #4]
  40164c:	460b      	mov	r3, r1
  40164e:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  401650:	687b      	ldr	r3, [r7, #4]
  401652:	2b00      	cmp	r3, #0
  401654:	bf14      	ite	ne
  401656:	2301      	movne	r3, #1
  401658:	2300      	moveq	r3, #0
  40165a:	b2db      	uxtb	r3, r3
  40165c:	2270      	movs	r2, #112	; 0x70
  40165e:	4907      	ldr	r1, [pc, #28]	; (40167c <spi_m_dma_set_char_size+0x38>)
  401660:	4618      	mov	r0, r3
  401662:	4b07      	ldr	r3, [pc, #28]	; (401680 <spi_m_dma_set_char_size+0x3c>)
  401664:	4798      	blx	r3

	return _spi_m_dma_set_char_size(&spi->dev, char_size);
  401666:	687b      	ldr	r3, [r7, #4]
  401668:	78fa      	ldrb	r2, [r7, #3]
  40166a:	4611      	mov	r1, r2
  40166c:	4618      	mov	r0, r3
  40166e:	4b05      	ldr	r3, [pc, #20]	; (401684 <spi_m_dma_set_char_size+0x40>)
  401670:	4798      	blx	r3
  401672:	4603      	mov	r3, r0
}
  401674:	4618      	mov	r0, r3
  401676:	3708      	adds	r7, #8
  401678:	46bd      	mov	sp, r7
  40167a:	bd80      	pop	{r7, pc}
  40167c:	00406a9c 	.word	0x00406a9c
  401680:	004020b9 	.word	0x004020b9
  401684:	004036e9 	.word	0x004036e9

00401688 <_spi_m_dma_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
  401688:	b590      	push	{r4, r7, lr}
  40168a:	b087      	sub	sp, #28
  40168c:	af00      	add	r7, sp, #0
  40168e:	60f8      	str	r0, [r7, #12]
  401690:	60b9      	str	r1, [r7, #8]
  401692:	4613      	mov	r3, r2
  401694:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  401696:	68fb      	ldr	r3, [r7, #12]
  401698:	2b00      	cmp	r3, #0
  40169a:	bf14      	ite	ne
  40169c:	2301      	movne	r3, #1
  40169e:	2300      	moveq	r3, #0
  4016a0:	b2db      	uxtb	r3, r3
  4016a2:	228a      	movs	r2, #138	; 0x8a
  4016a4:	4908      	ldr	r1, [pc, #32]	; (4016c8 <_spi_m_dma_io_read+0x40>)
  4016a6:	4618      	mov	r0, r3
  4016a8:	4b08      	ldr	r3, [pc, #32]	; (4016cc <_spi_m_dma_io_read+0x44>)
  4016aa:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  4016ac:	68fb      	ldr	r3, [r7, #12]
  4016ae:	3b1c      	subs	r3, #28
  4016b0:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
  4016b2:	6978      	ldr	r0, [r7, #20]
  4016b4:	88fb      	ldrh	r3, [r7, #6]
  4016b6:	68ba      	ldr	r2, [r7, #8]
  4016b8:	2100      	movs	r1, #0
  4016ba:	4c05      	ldr	r4, [pc, #20]	; (4016d0 <_spi_m_dma_io_read+0x48>)
  4016bc:	47a0      	blx	r4
  4016be:	4603      	mov	r3, r0
}
  4016c0:	4618      	mov	r0, r3
  4016c2:	371c      	adds	r7, #28
  4016c4:	46bd      	mov	sp, r7
  4016c6:	bd90      	pop	{r4, r7, pc}
  4016c8:	00406a9c 	.word	0x00406a9c
  4016cc:	004020b9 	.word	0x004020b9
  4016d0:	0040382d 	.word	0x0040382d

004016d4 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  4016d4:	b590      	push	{r4, r7, lr}
  4016d6:	b087      	sub	sp, #28
  4016d8:	af00      	add	r7, sp, #0
  4016da:	60f8      	str	r0, [r7, #12]
  4016dc:	60b9      	str	r1, [r7, #8]
  4016de:	4613      	mov	r3, r2
  4016e0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  4016e2:	68fb      	ldr	r3, [r7, #12]
  4016e4:	2b00      	cmp	r3, #0
  4016e6:	bf14      	ite	ne
  4016e8:	2301      	movne	r3, #1
  4016ea:	2300      	moveq	r3, #0
  4016ec:	b2db      	uxtb	r3, r3
  4016ee:	22a2      	movs	r2, #162	; 0xa2
  4016f0:	4908      	ldr	r1, [pc, #32]	; (401714 <_spi_m_dma_io_write+0x40>)
  4016f2:	4618      	mov	r0, r3
  4016f4:	4b08      	ldr	r3, [pc, #32]	; (401718 <_spi_m_dma_io_write+0x44>)
  4016f6:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  4016f8:	68fb      	ldr	r3, [r7, #12]
  4016fa:	3b1c      	subs	r3, #28
  4016fc:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
  4016fe:	6978      	ldr	r0, [r7, #20]
  401700:	88fb      	ldrh	r3, [r7, #6]
  401702:	2200      	movs	r2, #0
  401704:	68b9      	ldr	r1, [r7, #8]
  401706:	4c05      	ldr	r4, [pc, #20]	; (40171c <_spi_m_dma_io_write+0x48>)
  401708:	47a0      	blx	r4
  40170a:	4603      	mov	r3, r0
}
  40170c:	4618      	mov	r0, r3
  40170e:	371c      	adds	r7, #28
  401710:	46bd      	mov	sp, r7
  401712:	bd90      	pop	{r4, r7, pc}
  401714:	00406a9c 	.word	0x00406a9c
  401718:	004020b9 	.word	0x004020b9
  40171c:	0040382d 	.word	0x0040382d

00401720 <spi_m_dma_transfer>:

int32_t spi_m_dma_transfer(struct spi_m_dma_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                           const uint16_t length)
{
  401720:	b590      	push	{r4, r7, lr}
  401722:	b085      	sub	sp, #20
  401724:	af00      	add	r7, sp, #0
  401726:	60f8      	str	r0, [r7, #12]
  401728:	60b9      	str	r1, [r7, #8]
  40172a:	607a      	str	r2, [r7, #4]
  40172c:	807b      	strh	r3, [r7, #2]
	ASSERT(spi);
  40172e:	68fb      	ldr	r3, [r7, #12]
  401730:	2b00      	cmp	r3, #0
  401732:	bf14      	ite	ne
  401734:	2301      	movne	r3, #1
  401736:	2300      	moveq	r3, #0
  401738:	b2db      	uxtb	r3, r3
  40173a:	22ac      	movs	r2, #172	; 0xac
  40173c:	4907      	ldr	r1, [pc, #28]	; (40175c <spi_m_dma_transfer+0x3c>)
  40173e:	4618      	mov	r0, r3
  401740:	4b07      	ldr	r3, [pc, #28]	; (401760 <spi_m_dma_transfer+0x40>)
  401742:	4798      	blx	r3

	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
  401744:	68f8      	ldr	r0, [r7, #12]
  401746:	887b      	ldrh	r3, [r7, #2]
  401748:	687a      	ldr	r2, [r7, #4]
  40174a:	68b9      	ldr	r1, [r7, #8]
  40174c:	4c05      	ldr	r4, [pc, #20]	; (401764 <spi_m_dma_transfer+0x44>)
  40174e:	47a0      	blx	r4
  401750:	4603      	mov	r3, r0
}
  401752:	4618      	mov	r0, r3
  401754:	3714      	adds	r7, #20
  401756:	46bd      	mov	sp, r7
  401758:	bd90      	pop	{r4, r7, pc}
  40175a:	bf00      	nop
  40175c:	00406a9c 	.word	0x00406a9c
  401760:	004020b9 	.word	0x004020b9
  401764:	0040382d 	.word	0x0040382d

00401768 <spi_m_dma_register_callback>:

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
  401768:	b580      	push	{r7, lr}
  40176a:	b084      	sub	sp, #16
  40176c:	af00      	add	r7, sp, #0
  40176e:	60f8      	str	r0, [r7, #12]
  401770:	460b      	mov	r3, r1
  401772:	607a      	str	r2, [r7, #4]
  401774:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi);
  401776:	68fb      	ldr	r3, [r7, #12]
  401778:	2b00      	cmp	r3, #0
  40177a:	bf14      	ite	ne
  40177c:	2301      	movne	r3, #1
  40177e:	2300      	moveq	r3, #0
  401780:	b2db      	uxtb	r3, r3
  401782:	22b4      	movs	r2, #180	; 0xb4
  401784:	4906      	ldr	r1, [pc, #24]	; (4017a0 <spi_m_dma_register_callback+0x38>)
  401786:	4618      	mov	r0, r3
  401788:	4b06      	ldr	r3, [pc, #24]	; (4017a4 <spi_m_dma_register_callback+0x3c>)
  40178a:	4798      	blx	r3

	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
  40178c:	68fb      	ldr	r3, [r7, #12]
  40178e:	7af9      	ldrb	r1, [r7, #11]
  401790:	687a      	ldr	r2, [r7, #4]
  401792:	4618      	mov	r0, r3
  401794:	4b04      	ldr	r3, [pc, #16]	; (4017a8 <spi_m_dma_register_callback+0x40>)
  401796:	4798      	blx	r3
}
  401798:	bf00      	nop
  40179a:	3710      	adds	r7, #16
  40179c:	46bd      	mov	sp, r7
  40179e:	bd80      	pop	{r7, pc}
  4017a0:	00406a9c 	.word	0x00406a9c
  4017a4:	004020b9 	.word	0x004020b9
  4017a8:	00403749 	.word	0x00403749

004017ac <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
  4017ac:	b580      	push	{r7, lr}
  4017ae:	b086      	sub	sp, #24
  4017b0:	af00      	add	r7, sp, #0
  4017b2:	60f8      	str	r0, [r7, #12]
  4017b4:	60b9      	str	r1, [r7, #8]
  4017b6:	607a      	str	r2, [r7, #4]
  4017b8:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  4017ba:	68fb      	ldr	r3, [r7, #12]
  4017bc:	2b00      	cmp	r3, #0
  4017be:	d00a      	beq.n	4017d6 <usart_async_init+0x2a>
  4017c0:	68bb      	ldr	r3, [r7, #8]
  4017c2:	2b00      	cmp	r3, #0
  4017c4:	d007      	beq.n	4017d6 <usart_async_init+0x2a>
  4017c6:	687b      	ldr	r3, [r7, #4]
  4017c8:	2b00      	cmp	r3, #0
  4017ca:	d004      	beq.n	4017d6 <usart_async_init+0x2a>
  4017cc:	887b      	ldrh	r3, [r7, #2]
  4017ce:	2b00      	cmp	r3, #0
  4017d0:	d001      	beq.n	4017d6 <usart_async_init+0x2a>
  4017d2:	2301      	movs	r3, #1
  4017d4:	e000      	b.n	4017d8 <usart_async_init+0x2c>
  4017d6:	2300      	movs	r3, #0
  4017d8:	f003 0301 	and.w	r3, r3, #1
  4017dc:	b2db      	uxtb	r3, r3
  4017de:	2244      	movs	r2, #68	; 0x44
  4017e0:	4919      	ldr	r1, [pc, #100]	; (401848 <usart_async_init+0x9c>)
  4017e2:	4618      	mov	r0, r3
  4017e4:	4b19      	ldr	r3, [pc, #100]	; (40184c <usart_async_init+0xa0>)
  4017e6:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  4017e8:	68fb      	ldr	r3, [r7, #12]
  4017ea:	3334      	adds	r3, #52	; 0x34
  4017ec:	887a      	ldrh	r2, [r7, #2]
  4017ee:	6879      	ldr	r1, [r7, #4]
  4017f0:	4618      	mov	r0, r3
  4017f2:	4b17      	ldr	r3, [pc, #92]	; (401850 <usart_async_init+0xa4>)
  4017f4:	4798      	blx	r3
  4017f6:	4603      	mov	r3, r0
  4017f8:	2b00      	cmp	r3, #0
  4017fa:	d002      	beq.n	401802 <usart_async_init+0x56>
		return ERR_INVALID_ARG;
  4017fc:	f06f 030c 	mvn.w	r3, #12
  401800:	e01e      	b.n	401840 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
  401802:	68fb      	ldr	r3, [r7, #12]
  401804:	3308      	adds	r3, #8
  401806:	68b9      	ldr	r1, [r7, #8]
  401808:	4618      	mov	r0, r3
  40180a:	4b12      	ldr	r3, [pc, #72]	; (401854 <usart_async_init+0xa8>)
  40180c:	4798      	blx	r3
  40180e:	6178      	str	r0, [r7, #20]
	if (init_status) {
  401810:	697b      	ldr	r3, [r7, #20]
  401812:	2b00      	cmp	r3, #0
  401814:	d001      	beq.n	40181a <usart_async_init+0x6e>
		return init_status;
  401816:	697b      	ldr	r3, [r7, #20]
  401818:	e012      	b.n	401840 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
  40181a:	68fb      	ldr	r3, [r7, #12]
  40181c:	4a0e      	ldr	r2, [pc, #56]	; (401858 <usart_async_init+0xac>)
  40181e:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
  401820:	68fb      	ldr	r3, [r7, #12]
  401822:	4a0e      	ldr	r2, [pc, #56]	; (40185c <usart_async_init+0xb0>)
  401824:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  401826:	68fb      	ldr	r3, [r7, #12]
  401828:	4a0d      	ldr	r2, [pc, #52]	; (401860 <usart_async_init+0xb4>)
  40182a:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  40182c:	68fb      	ldr	r3, [r7, #12]
  40182e:	4a0d      	ldr	r2, [pc, #52]	; (401864 <usart_async_init+0xb8>)
  401830:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  401832:	68fb      	ldr	r3, [r7, #12]
  401834:	4a0c      	ldr	r2, [pc, #48]	; (401868 <usart_async_init+0xbc>)
  401836:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  401838:	68fb      	ldr	r3, [r7, #12]
  40183a:	4a0c      	ldr	r2, [pc, #48]	; (40186c <usart_async_init+0xc0>)
  40183c:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  40183e:	2300      	movs	r3, #0
}
  401840:	4618      	mov	r0, r3
  401842:	3718      	adds	r7, #24
  401844:	46bd      	mov	sp, r7
  401846:	bd80      	pop	{r7, pc}
  401848:	00406ab8 	.word	0x00406ab8
  40184c:	004020b9 	.word	0x004020b9
  401850:	004020e1 	.word	0x004020e1
  401854:	0040423d 	.word	0x0040423d
  401858:	00401901 	.word	0x00401901
  40185c:	00401871 	.word	0x00401871
  401860:	004019b1 	.word	0x004019b1
  401864:	00401a49 	.word	0x00401a49
  401868:	00401a1d 	.word	0x00401a1d
  40186c:	00401a85 	.word	0x00401a85

00401870 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401870:	b580      	push	{r7, lr}
  401872:	b086      	sub	sp, #24
  401874:	af00      	add	r7, sp, #0
  401876:	60f8      	str	r0, [r7, #12]
  401878:	60b9      	str	r1, [r7, #8]
  40187a:	4613      	mov	r3, r2
  40187c:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  40187e:	68fb      	ldr	r3, [r7, #12]
  401880:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
  401882:	697b      	ldr	r3, [r7, #20]
  401884:	2b00      	cmp	r3, #0
  401886:	d007      	beq.n	401898 <usart_async_write+0x28>
  401888:	68bb      	ldr	r3, [r7, #8]
  40188a:	2b00      	cmp	r3, #0
  40188c:	d004      	beq.n	401898 <usart_async_write+0x28>
  40188e:	88fb      	ldrh	r3, [r7, #6]
  401890:	2b00      	cmp	r3, #0
  401892:	d001      	beq.n	401898 <usart_async_write+0x28>
  401894:	2301      	movs	r3, #1
  401896:	e000      	b.n	40189a <usart_async_write+0x2a>
  401898:	2300      	movs	r3, #0
  40189a:	f003 0301 	and.w	r3, r3, #1
  40189e:	b2db      	uxtb	r3, r3
  4018a0:	f240 1245 	movw	r2, #325	; 0x145
  4018a4:	4913      	ldr	r1, [pc, #76]	; (4018f4 <usart_async_write+0x84>)
  4018a6:	4618      	mov	r0, r3
  4018a8:	4b13      	ldr	r3, [pc, #76]	; (4018f8 <usart_async_write+0x88>)
  4018aa:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
  4018ac:	697b      	ldr	r3, [r7, #20]
  4018ae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  4018b2:	697b      	ldr	r3, [r7, #20]
  4018b4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  4018b8:	429a      	cmp	r2, r3
  4018ba:	d002      	beq.n	4018c2 <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
  4018bc:	f06f 031b 	mvn.w	r3, #27
  4018c0:	e013      	b.n	4018ea <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
  4018c2:	697b      	ldr	r3, [r7, #20]
  4018c4:	68ba      	ldr	r2, [r7, #8]
  4018c6:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
  4018c8:	697b      	ldr	r3, [r7, #20]
  4018ca:	88fa      	ldrh	r2, [r7, #6]
  4018cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
  4018d0:	697b      	ldr	r3, [r7, #20]
  4018d2:	2200      	movs	r2, #0
  4018d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  4018d8:	697b      	ldr	r3, [r7, #20]
  4018da:	2201      	movs	r2, #1
  4018dc:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  4018de:	697b      	ldr	r3, [r7, #20]
  4018e0:	3308      	adds	r3, #8
  4018e2:	4618      	mov	r0, r3
  4018e4:	4b05      	ldr	r3, [pc, #20]	; (4018fc <usart_async_write+0x8c>)
  4018e6:	4798      	blx	r3

	return (int32_t)length;
  4018e8:	88fb      	ldrh	r3, [r7, #6]
}
  4018ea:	4618      	mov	r0, r3
  4018ec:	3718      	adds	r7, #24
  4018ee:	46bd      	mov	sp, r7
  4018f0:	bd80      	pop	{r7, pc}
  4018f2:	bf00      	nop
  4018f4:	00406ab8 	.word	0x00406ab8
  4018f8:	004020b9 	.word	0x004020b9
  4018fc:	0040442d 	.word	0x0040442d

00401900 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401900:	b580      	push	{r7, lr}
  401902:	b088      	sub	sp, #32
  401904:	af00      	add	r7, sp, #0
  401906:	60f8      	str	r0, [r7, #12]
  401908:	60b9      	str	r1, [r7, #8]
  40190a:	4613      	mov	r3, r2
  40190c:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
  40190e:	2300      	movs	r3, #0
  401910:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  401912:	68fb      	ldr	r3, [r7, #12]
  401914:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
  401916:	69bb      	ldr	r3, [r7, #24]
  401918:	2b00      	cmp	r3, #0
  40191a:	d007      	beq.n	40192c <usart_async_read+0x2c>
  40191c:	68bb      	ldr	r3, [r7, #8]
  40191e:	2b00      	cmp	r3, #0
  401920:	d004      	beq.n	40192c <usart_async_read+0x2c>
  401922:	88fb      	ldrh	r3, [r7, #6]
  401924:	2b00      	cmp	r3, #0
  401926:	d001      	beq.n	40192c <usart_async_read+0x2c>
  401928:	2301      	movs	r3, #1
  40192a:	e000      	b.n	40192e <usart_async_read+0x2e>
  40192c:	2300      	movs	r3, #0
  40192e:	f003 0301 	and.w	r3, r3, #1
  401932:	b2db      	uxtb	r3, r3
  401934:	f44f 72b1 	mov.w	r2, #354	; 0x162
  401938:	4917      	ldr	r1, [pc, #92]	; (401998 <usart_async_read+0x98>)
  40193a:	4618      	mov	r0, r3
  40193c:	4b17      	ldr	r3, [pc, #92]	; (40199c <usart_async_read+0x9c>)
  40193e:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
  401940:	f107 0310 	add.w	r3, r7, #16
  401944:	4618      	mov	r0, r3
  401946:	4b16      	ldr	r3, [pc, #88]	; (4019a0 <usart_async_read+0xa0>)
  401948:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  40194a:	69bb      	ldr	r3, [r7, #24]
  40194c:	3334      	adds	r3, #52	; 0x34
  40194e:	4618      	mov	r0, r3
  401950:	4b14      	ldr	r3, [pc, #80]	; (4019a4 <usart_async_read+0xa4>)
  401952:	4798      	blx	r3
  401954:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
  401956:	f107 0310 	add.w	r3, r7, #16
  40195a:	4618      	mov	r0, r3
  40195c:	4b12      	ldr	r3, [pc, #72]	; (4019a8 <usart_async_read+0xa8>)
  40195e:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
  401960:	e00c      	b.n	40197c <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  401962:	69bb      	ldr	r3, [r7, #24]
  401964:	f103 0234 	add.w	r2, r3, #52	; 0x34
  401968:	8bfb      	ldrh	r3, [r7, #30]
  40196a:	1c59      	adds	r1, r3, #1
  40196c:	83f9      	strh	r1, [r7, #30]
  40196e:	4619      	mov	r1, r3
  401970:	68bb      	ldr	r3, [r7, #8]
  401972:	440b      	add	r3, r1
  401974:	4619      	mov	r1, r3
  401976:	4610      	mov	r0, r2
  401978:	4b0c      	ldr	r3, [pc, #48]	; (4019ac <usart_async_read+0xac>)
  40197a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  40197c:	8bfa      	ldrh	r2, [r7, #30]
  40197e:	697b      	ldr	r3, [r7, #20]
  401980:	429a      	cmp	r2, r3
  401982:	d203      	bcs.n	40198c <usart_async_read+0x8c>
  401984:	8bfa      	ldrh	r2, [r7, #30]
  401986:	88fb      	ldrh	r3, [r7, #6]
  401988:	429a      	cmp	r2, r3
  40198a:	d3ea      	bcc.n	401962 <usart_async_read+0x62>
	}

	return (int32_t)was_read;
  40198c:	8bfb      	ldrh	r3, [r7, #30]
}
  40198e:	4618      	mov	r0, r3
  401990:	3720      	adds	r7, #32
  401992:	46bd      	mov	sp, r7
  401994:	bd80      	pop	{r7, pc}
  401996:	bf00      	nop
  401998:	00406ab8 	.word	0x00406ab8
  40199c:	004020b9 	.word	0x004020b9
  4019a0:	004010e1 	.word	0x004010e1
  4019a4:	00402239 	.word	0x00402239
  4019a8:	00401107 	.word	0x00401107
  4019ac:	00402155 	.word	0x00402155

004019b0 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
  4019b0:	b590      	push	{r4, r7, lr}
  4019b2:	b085      	sub	sp, #20
  4019b4:	af00      	add	r7, sp, #0
  4019b6:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4019b8:	687b      	ldr	r3, [r7, #4]
  4019ba:	3b08      	subs	r3, #8
  4019bc:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
  4019be:	68fb      	ldr	r3, [r7, #12]
  4019c0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  4019c4:	68fb      	ldr	r3, [r7, #12]
  4019c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  4019ca:	429a      	cmp	r2, r3
  4019cc:	d017      	beq.n	4019fe <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  4019ce:	68fb      	ldr	r3, [r7, #12]
  4019d0:	f103 0008 	add.w	r0, r3, #8
  4019d4:	68fb      	ldr	r3, [r7, #12]
  4019d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4019d8:	68fb      	ldr	r3, [r7, #12]
  4019da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  4019de:	1c59      	adds	r1, r3, #1
  4019e0:	b28c      	uxth	r4, r1
  4019e2:	68f9      	ldr	r1, [r7, #12]
  4019e4:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
  4019e8:	4413      	add	r3, r2
  4019ea:	781b      	ldrb	r3, [r3, #0]
  4019ec:	4619      	mov	r1, r3
  4019ee:	4b08      	ldr	r3, [pc, #32]	; (401a10 <usart_process_byte_sent+0x60>)
  4019f0:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  4019f2:	68fb      	ldr	r3, [r7, #12]
  4019f4:	3308      	adds	r3, #8
  4019f6:	4618      	mov	r0, r3
  4019f8:	4b06      	ldr	r3, [pc, #24]	; (401a14 <usart_process_byte_sent+0x64>)
  4019fa:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
  4019fc:	e004      	b.n	401a08 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
  4019fe:	68fb      	ldr	r3, [r7, #12]
  401a00:	3308      	adds	r3, #8
  401a02:	4618      	mov	r0, r3
  401a04:	4b04      	ldr	r3, [pc, #16]	; (401a18 <usart_process_byte_sent+0x68>)
  401a06:	4798      	blx	r3
}
  401a08:	bf00      	nop
  401a0a:	3714      	adds	r7, #20
  401a0c:	46bd      	mov	sp, r7
  401a0e:	bd90      	pop	{r4, r7, pc}
  401a10:	00404321 	.word	0x00404321
  401a14:	0040442d 	.word	0x0040442d
  401a18:	0040446d 	.word	0x0040446d

00401a1c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  401a1c:	b580      	push	{r7, lr}
  401a1e:	b084      	sub	sp, #16
  401a20:	af00      	add	r7, sp, #0
  401a22:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401a24:	687b      	ldr	r3, [r7, #4]
  401a26:	3b08      	subs	r3, #8
  401a28:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	2200      	movs	r2, #0
  401a2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
  401a30:	68fb      	ldr	r3, [r7, #12]
  401a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401a34:	2b00      	cmp	r3, #0
  401a36:	d003      	beq.n	401a40 <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
  401a38:	68fb      	ldr	r3, [r7, #12]
  401a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401a3c:	68f8      	ldr	r0, [r7, #12]
  401a3e:	4798      	blx	r3
	}
}
  401a40:	bf00      	nop
  401a42:	3710      	adds	r7, #16
  401a44:	46bd      	mov	sp, r7
  401a46:	bd80      	pop	{r7, pc}

00401a48 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
  401a48:	b580      	push	{r7, lr}
  401a4a:	b084      	sub	sp, #16
  401a4c:	af00      	add	r7, sp, #0
  401a4e:	6078      	str	r0, [r7, #4]
  401a50:	460b      	mov	r3, r1
  401a52:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401a54:	687b      	ldr	r3, [r7, #4]
  401a56:	3b08      	subs	r3, #8
  401a58:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
  401a5a:	68fb      	ldr	r3, [r7, #12]
  401a5c:	3334      	adds	r3, #52	; 0x34
  401a5e:	78fa      	ldrb	r2, [r7, #3]
  401a60:	4611      	mov	r1, r2
  401a62:	4618      	mov	r0, r3
  401a64:	4b06      	ldr	r3, [pc, #24]	; (401a80 <usart_fill_rx_buffer+0x38>)
  401a66:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
  401a68:	68fb      	ldr	r3, [r7, #12]
  401a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401a6c:	2b00      	cmp	r3, #0
  401a6e:	d003      	beq.n	401a78 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
  401a70:	68fb      	ldr	r3, [r7, #12]
  401a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401a74:	68f8      	ldr	r0, [r7, #12]
  401a76:	4798      	blx	r3
	}
}
  401a78:	bf00      	nop
  401a7a:	3710      	adds	r7, #16
  401a7c:	46bd      	mov	sp, r7
  401a7e:	bd80      	pop	{r7, pc}
  401a80:	004021c5 	.word	0x004021c5

00401a84 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  401a84:	b580      	push	{r7, lr}
  401a86:	b084      	sub	sp, #16
  401a88:	af00      	add	r7, sp, #0
  401a8a:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401a8c:	687b      	ldr	r3, [r7, #4]
  401a8e:	3b08      	subs	r3, #8
  401a90:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  401a92:	68fb      	ldr	r3, [r7, #12]
  401a94:	2200      	movs	r2, #0
  401a96:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
  401a98:	68fb      	ldr	r3, [r7, #12]
  401a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a9c:	2b00      	cmp	r3, #0
  401a9e:	d003      	beq.n	401aa8 <usart_error+0x24>
		descr->usart_cb.error(descr);
  401aa0:	68fb      	ldr	r3, [r7, #12]
  401aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401aa4:	68f8      	ldr	r0, [r7, #12]
  401aa6:	4798      	blx	r3
	}
}
  401aa8:	bf00      	nop
  401aaa:	3710      	adds	r7, #16
  401aac:	46bd      	mov	sp, r7
  401aae:	bd80      	pop	{r7, pc}

00401ab0 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
  401ab0:	b580      	push	{r7, lr}
  401ab2:	b086      	sub	sp, #24
  401ab4:	af00      	add	r7, sp, #0
  401ab6:	60f8      	str	r0, [r7, #12]
  401ab8:	60b9      	str	r1, [r7, #8]
  401aba:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
  401abc:	68fb      	ldr	r3, [r7, #12]
  401abe:	2b00      	cmp	r3, #0
  401ac0:	d004      	beq.n	401acc <usart_sync_init+0x1c>
  401ac2:	68bb      	ldr	r3, [r7, #8]
  401ac4:	2b00      	cmp	r3, #0
  401ac6:	d001      	beq.n	401acc <usart_sync_init+0x1c>
  401ac8:	2301      	movs	r3, #1
  401aca:	e000      	b.n	401ace <usart_sync_init+0x1e>
  401acc:	2300      	movs	r3, #0
  401ace:	f003 0301 	and.w	r3, r3, #1
  401ad2:	b2db      	uxtb	r3, r3
  401ad4:	223e      	movs	r2, #62	; 0x3e
  401ad6:	490d      	ldr	r1, [pc, #52]	; (401b0c <usart_sync_init+0x5c>)
  401ad8:	4618      	mov	r0, r3
  401ada:	4b0d      	ldr	r3, [pc, #52]	; (401b10 <usart_sync_init+0x60>)
  401adc:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  401ade:	68fb      	ldr	r3, [r7, #12]
  401ae0:	3308      	adds	r3, #8
  401ae2:	68b9      	ldr	r1, [r7, #8]
  401ae4:	4618      	mov	r0, r3
  401ae6:	4b0b      	ldr	r3, [pc, #44]	; (401b14 <usart_sync_init+0x64>)
  401ae8:	4798      	blx	r3
  401aea:	6178      	str	r0, [r7, #20]
	if (init_status) {
  401aec:	697b      	ldr	r3, [r7, #20]
  401aee:	2b00      	cmp	r3, #0
  401af0:	d001      	beq.n	401af6 <usart_sync_init+0x46>
		return init_status;
  401af2:	697b      	ldr	r3, [r7, #20]
  401af4:	e006      	b.n	401b04 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
  401af6:	68fb      	ldr	r3, [r7, #12]
  401af8:	4a07      	ldr	r2, [pc, #28]	; (401b18 <usart_sync_init+0x68>)
  401afa:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
  401afc:	68fb      	ldr	r3, [r7, #12]
  401afe:	4a07      	ldr	r2, [pc, #28]	; (401b1c <usart_sync_init+0x6c>)
  401b00:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  401b02:	2300      	movs	r3, #0
}
  401b04:	4618      	mov	r0, r3
  401b06:	3718      	adds	r7, #24
  401b08:	46bd      	mov	sp, r7
  401b0a:	bd80      	pop	{r7, pc}
  401b0c:	00406ad8 	.word	0x00406ad8
  401b10:	004020b9 	.word	0x004020b9
  401b14:	004041e5 	.word	0x004041e5
  401b18:	00401bcd 	.word	0x00401bcd
  401b1c:	00401b21 	.word	0x00401b21

00401b20 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  401b20:	b580      	push	{r7, lr}
  401b22:	b086      	sub	sp, #24
  401b24:	af00      	add	r7, sp, #0
  401b26:	60f8      	str	r0, [r7, #12]
  401b28:	60b9      	str	r1, [r7, #8]
  401b2a:	4613      	mov	r3, r2
  401b2c:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  401b2e:	2300      	movs	r3, #0
  401b30:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  401b32:	68fb      	ldr	r3, [r7, #12]
  401b34:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  401b36:	68fb      	ldr	r3, [r7, #12]
  401b38:	2b00      	cmp	r3, #0
  401b3a:	d007      	beq.n	401b4c <usart_sync_write+0x2c>
  401b3c:	68bb      	ldr	r3, [r7, #8]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d004      	beq.n	401b4c <usart_sync_write+0x2c>
  401b42:	88fb      	ldrh	r3, [r7, #6]
  401b44:	2b00      	cmp	r3, #0
  401b46:	d001      	beq.n	401b4c <usart_sync_write+0x2c>
  401b48:	2301      	movs	r3, #1
  401b4a:	e000      	b.n	401b4e <usart_sync_write+0x2e>
  401b4c:	2300      	movs	r3, #0
  401b4e:	f003 0301 	and.w	r3, r3, #1
  401b52:	b2db      	uxtb	r3, r3
  401b54:	22fb      	movs	r2, #251	; 0xfb
  401b56:	4919      	ldr	r1, [pc, #100]	; (401bbc <usart_sync_write+0x9c>)
  401b58:	4618      	mov	r0, r3
  401b5a:	4b19      	ldr	r3, [pc, #100]	; (401bc0 <usart_sync_write+0xa0>)
  401b5c:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
  401b5e:	bf00      	nop
  401b60:	693b      	ldr	r3, [r7, #16]
  401b62:	3308      	adds	r3, #8
  401b64:	4618      	mov	r0, r3
  401b66:	4b17      	ldr	r3, [pc, #92]	; (401bc4 <usart_sync_write+0xa4>)
  401b68:	4798      	blx	r3
  401b6a:	4603      	mov	r3, r0
  401b6c:	f083 0301 	eor.w	r3, r3, #1
  401b70:	b2db      	uxtb	r3, r3
  401b72:	2b00      	cmp	r3, #0
  401b74:	d1f4      	bne.n	401b60 <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  401b76:	693b      	ldr	r3, [r7, #16]
  401b78:	f103 0008 	add.w	r0, r3, #8
  401b7c:	68ba      	ldr	r2, [r7, #8]
  401b7e:	697b      	ldr	r3, [r7, #20]
  401b80:	4413      	add	r3, r2
  401b82:	781b      	ldrb	r3, [r3, #0]
  401b84:	4619      	mov	r1, r3
  401b86:	4b10      	ldr	r3, [pc, #64]	; (401bc8 <usart_sync_write+0xa8>)
  401b88:	4798      	blx	r3
		while (!_usart_sync_is_byte_sent(&descr->device))
  401b8a:	bf00      	nop
  401b8c:	693b      	ldr	r3, [r7, #16]
  401b8e:	3308      	adds	r3, #8
  401b90:	4618      	mov	r0, r3
  401b92:	4b0c      	ldr	r3, [pc, #48]	; (401bc4 <usart_sync_write+0xa4>)
  401b94:	4798      	blx	r3
  401b96:	4603      	mov	r3, r0
  401b98:	f083 0301 	eor.w	r3, r3, #1
  401b9c:	b2db      	uxtb	r3, r3
  401b9e:	2b00      	cmp	r3, #0
  401ba0:	d1f4      	bne.n	401b8c <usart_sync_write+0x6c>
			;
	} while (++offset < length);
  401ba2:	697b      	ldr	r3, [r7, #20]
  401ba4:	3301      	adds	r3, #1
  401ba6:	617b      	str	r3, [r7, #20]
  401ba8:	88fb      	ldrh	r3, [r7, #6]
  401baa:	697a      	ldr	r2, [r7, #20]
  401bac:	429a      	cmp	r2, r3
  401bae:	d3e2      	bcc.n	401b76 <usart_sync_write+0x56>

	return (int32_t)offset;
  401bb0:	697b      	ldr	r3, [r7, #20]
}
  401bb2:	4618      	mov	r0, r3
  401bb4:	3718      	adds	r7, #24
  401bb6:	46bd      	mov	sp, r7
  401bb8:	bd80      	pop	{r7, pc}
  401bba:	bf00      	nop
  401bbc:	00406ad8 	.word	0x00406ad8
  401bc0:	004020b9 	.word	0x004020b9
  401bc4:	004043ad 	.word	0x004043ad
  401bc8:	004042d9 	.word	0x004042d9

00401bcc <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401bcc:	b590      	push	{r4, r7, lr}
  401bce:	b087      	sub	sp, #28
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	60f8      	str	r0, [r7, #12]
  401bd4:	60b9      	str	r1, [r7, #8]
  401bd6:	4613      	mov	r3, r2
  401bd8:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  401bda:	2300      	movs	r3, #0
  401bdc:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  401bde:	68fb      	ldr	r3, [r7, #12]
  401be0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  401be2:	68fb      	ldr	r3, [r7, #12]
  401be4:	2b00      	cmp	r3, #0
  401be6:	d007      	beq.n	401bf8 <usart_sync_read+0x2c>
  401be8:	68bb      	ldr	r3, [r7, #8]
  401bea:	2b00      	cmp	r3, #0
  401bec:	d004      	beq.n	401bf8 <usart_sync_read+0x2c>
  401bee:	88fb      	ldrh	r3, [r7, #6]
  401bf0:	2b00      	cmp	r3, #0
  401bf2:	d001      	beq.n	401bf8 <usart_sync_read+0x2c>
  401bf4:	2301      	movs	r3, #1
  401bf6:	e000      	b.n	401bfa <usart_sync_read+0x2e>
  401bf8:	2300      	movs	r3, #0
  401bfa:	f003 0301 	and.w	r3, r3, #1
  401bfe:	b2db      	uxtb	r3, r3
  401c00:	f240 1215 	movw	r2, #277	; 0x115
  401c04:	4912      	ldr	r1, [pc, #72]	; (401c50 <usart_sync_read+0x84>)
  401c06:	4618      	mov	r0, r3
  401c08:	4b12      	ldr	r3, [pc, #72]	; (401c54 <usart_sync_read+0x88>)
  401c0a:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401c0c:	bf00      	nop
  401c0e:	693b      	ldr	r3, [r7, #16]
  401c10:	3308      	adds	r3, #8
  401c12:	4618      	mov	r0, r3
  401c14:	4b10      	ldr	r3, [pc, #64]	; (401c58 <usart_sync_read+0x8c>)
  401c16:	4798      	blx	r3
  401c18:	4603      	mov	r3, r0
  401c1a:	f083 0301 	eor.w	r3, r3, #1
  401c1e:	b2db      	uxtb	r3, r3
  401c20:	2b00      	cmp	r3, #0
  401c22:	d1f4      	bne.n	401c0e <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401c24:	68ba      	ldr	r2, [r7, #8]
  401c26:	697b      	ldr	r3, [r7, #20]
  401c28:	18d4      	adds	r4, r2, r3
  401c2a:	693b      	ldr	r3, [r7, #16]
  401c2c:	3308      	adds	r3, #8
  401c2e:	4618      	mov	r0, r3
  401c30:	4b0a      	ldr	r3, [pc, #40]	; (401c5c <usart_sync_read+0x90>)
  401c32:	4798      	blx	r3
  401c34:	4603      	mov	r3, r0
  401c36:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
  401c38:	697b      	ldr	r3, [r7, #20]
  401c3a:	3301      	adds	r3, #1
  401c3c:	617b      	str	r3, [r7, #20]
  401c3e:	88fb      	ldrh	r3, [r7, #6]
  401c40:	697a      	ldr	r2, [r7, #20]
  401c42:	429a      	cmp	r2, r3
  401c44:	d3e2      	bcc.n	401c0c <usart_sync_read+0x40>

	return (int32_t)offset;
  401c46:	697b      	ldr	r3, [r7, #20]
}
  401c48:	4618      	mov	r0, r3
  401c4a:	371c      	adds	r7, #28
  401c4c:	46bd      	mov	sp, r7
  401c4e:	bd90      	pop	{r4, r7, pc}
  401c50:	00406ad8 	.word	0x00406ad8
  401c54:	004020b9 	.word	0x004020b9
  401c58:	004043ed 	.word	0x004043ed
  401c5c:	00404369 	.word	0x00404369

00401c60 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
  401c60:	b480      	push	{r7}
  401c62:	b085      	sub	sp, #20
  401c64:	af00      	add	r7, sp, #0
  401c66:	4603      	mov	r3, r0
  401c68:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  401c6a:	2300      	movs	r3, #0
  401c6c:	73fb      	strb	r3, [r7, #15]
  401c6e:	e029      	b.n	401cc4 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  401c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401c74:	4a19      	ldr	r2, [pc, #100]	; (401cdc <_usb_d_find_ep+0x7c>)
  401c76:	015b      	lsls	r3, r3, #5
  401c78:	4413      	add	r3, r2
  401c7a:	3301      	adds	r3, #1
  401c7c:	781b      	ldrb	r3, [r3, #0]
  401c7e:	79fa      	ldrb	r2, [r7, #7]
  401c80:	429a      	cmp	r2, r3
  401c82:	d102      	bne.n	401c8a <_usb_d_find_ep+0x2a>
			return i;
  401c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401c88:	e022      	b.n	401cd0 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  401c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401c8e:	4a13      	ldr	r2, [pc, #76]	; (401cdc <_usb_d_find_ep+0x7c>)
  401c90:	015b      	lsls	r3, r3, #5
  401c92:	4413      	add	r3, r2
  401c94:	781b      	ldrb	r3, [r3, #0]
  401c96:	2b00      	cmp	r3, #0
  401c98:	d10e      	bne.n	401cb8 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  401c9a:	79fb      	ldrb	r3, [r7, #7]
  401c9c:	f003 030f 	and.w	r3, r3, #15
  401ca0:	f997 200f 	ldrsb.w	r2, [r7, #15]
  401ca4:	490d      	ldr	r1, [pc, #52]	; (401cdc <_usb_d_find_ep+0x7c>)
  401ca6:	0152      	lsls	r2, r2, #5
  401ca8:	440a      	add	r2, r1
  401caa:	3201      	adds	r2, #1
  401cac:	7812      	ldrb	r2, [r2, #0]
  401cae:	4293      	cmp	r3, r2
  401cb0:	d102      	bne.n	401cb8 <_usb_d_find_ep+0x58>
			return i;
  401cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401cb6:	e00b      	b.n	401cd0 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  401cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401cbc:	b2db      	uxtb	r3, r3
  401cbe:	3301      	adds	r3, #1
  401cc0:	b2db      	uxtb	r3, r3
  401cc2:	73fb      	strb	r3, [r7, #15]
  401cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401cc8:	2b03      	cmp	r3, #3
  401cca:	ddd1      	ble.n	401c70 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
  401ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
  401cd0:	4618      	mov	r0, r3
  401cd2:	3714      	adds	r7, #20
  401cd4:	46bd      	mov	sp, r7
  401cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cda:	4770      	bx	lr
  401cdc:	204010e8 	.word	0x204010e8

00401ce0 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
  401ce0:	b580      	push	{r7, lr}
  401ce2:	b088      	sub	sp, #32
  401ce4:	af00      	add	r7, sp, #0
  401ce6:	60ba      	str	r2, [r7, #8]
  401ce8:	607b      	str	r3, [r7, #4]
  401cea:	4603      	mov	r3, r0
  401cec:	73fb      	strb	r3, [r7, #15]
  401cee:	460b      	mov	r3, r1
  401cf0:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
  401cf2:	68bb      	ldr	r3, [r7, #8]
  401cf4:	617b      	str	r3, [r7, #20]
  401cf6:	687b      	ldr	r3, [r7, #4]
  401cf8:	61bb      	str	r3, [r7, #24]
  401cfa:	7bbb      	ldrb	r3, [r7, #14]
  401cfc:	2b00      	cmp	r3, #0
  401cfe:	d004      	beq.n	401d0a <_usb_d_trans+0x2a>
  401d00:	7bfb      	ldrb	r3, [r7, #15]
  401d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401d06:	b2db      	uxtb	r3, r3
  401d08:	e003      	b.n	401d12 <_usb_d_trans+0x32>
  401d0a:	7bfb      	ldrb	r3, [r7, #15]
  401d0c:	f003 030f 	and.w	r3, r3, #15
  401d10:	b2db      	uxtb	r3, r3
  401d12:	773b      	strb	r3, [r7, #28]
  401d14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  401d18:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
  401d1a:	f107 0314 	add.w	r3, r7, #20
  401d1e:	4618      	mov	r0, r3
  401d20:	4b03      	ldr	r3, [pc, #12]	; (401d30 <_usb_d_trans+0x50>)
  401d22:	4798      	blx	r3
  401d24:	4603      	mov	r3, r0
}
  401d26:	4618      	mov	r0, r3
  401d28:	3720      	adds	r7, #32
  401d2a:	46bd      	mov	sp, r7
  401d2c:	bd80      	pop	{r7, pc}
  401d2e:	bf00      	nop
  401d30:	00405ee1 	.word	0x00405ee1

00401d34 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
  401d34:	b480      	push	{r7}
  401d36:	b085      	sub	sp, #20
  401d38:	af00      	add	r7, sp, #0
  401d3a:	60f8      	str	r0, [r7, #12]
  401d3c:	60b9      	str	r1, [r7, #8]
  401d3e:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
  401d40:	2300      	movs	r3, #0
}
  401d42:	4618      	mov	r0, r3
  401d44:	3714      	adds	r7, #20
  401d46:	46bd      	mov	sp, r7
  401d48:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d4c:	4770      	bx	lr
	...

00401d50 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
  401d50:	b580      	push	{r7, lr}
  401d52:	b086      	sub	sp, #24
  401d54:	af00      	add	r7, sp, #0
  401d56:	4603      	mov	r3, r0
  401d58:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401d5a:	79fb      	ldrb	r3, [r7, #7]
  401d5c:	4618      	mov	r0, r3
  401d5e:	4b2a      	ldr	r3, [pc, #168]	; (401e08 <usb_d_cb_trans_setup+0xb8>)
  401d60:	4798      	blx	r3
  401d62:	4603      	mov	r3, r0
  401d64:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  401d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
  401d6a:	015b      	lsls	r3, r3, #5
  401d6c:	4a27      	ldr	r2, [pc, #156]	; (401e0c <usb_d_cb_trans_setup+0xbc>)
  401d6e:	4413      	add	r3, r2
  401d70:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
  401d72:	693b      	ldr	r3, [r7, #16]
  401d74:	330c      	adds	r3, #12
  401d76:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  401d78:	79fb      	ldrb	r3, [r7, #7]
  401d7a:	68f9      	ldr	r1, [r7, #12]
  401d7c:	4618      	mov	r0, r3
  401d7e:	4b24      	ldr	r3, [pc, #144]	; (401e10 <usb_d_cb_trans_setup+0xc0>)
  401d80:	4798      	blx	r3
  401d82:	4603      	mov	r3, r0
  401d84:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
  401d86:	7afb      	ldrb	r3, [r7, #11]
  401d88:	2b08      	cmp	r3, #8
  401d8a:	d00d      	beq.n	401da8 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  401d8c:	79fb      	ldrb	r3, [r7, #7]
  401d8e:	2101      	movs	r1, #1
  401d90:	4618      	mov	r0, r3
  401d92:	4b20      	ldr	r3, [pc, #128]	; (401e14 <usb_d_cb_trans_setup+0xc4>)
  401d94:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  401d96:	79fb      	ldrb	r3, [r7, #7]
  401d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401d9c:	b2db      	uxtb	r3, r3
  401d9e:	2101      	movs	r1, #1
  401da0:	4618      	mov	r0, r3
  401da2:	4b1c      	ldr	r3, [pc, #112]	; (401e14 <usb_d_cb_trans_setup+0xc4>)
  401da4:	4798      	blx	r3
		return;
  401da6:	e02b      	b.n	401e00 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  401da8:	79fb      	ldrb	r3, [r7, #7]
  401daa:	2100      	movs	r1, #0
  401dac:	4618      	mov	r0, r3
  401dae:	4b19      	ldr	r3, [pc, #100]	; (401e14 <usb_d_cb_trans_setup+0xc4>)
  401db0:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  401db2:	79fb      	ldrb	r3, [r7, #7]
  401db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401db8:	b2db      	uxtb	r3, r3
  401dba:	2100      	movs	r1, #0
  401dbc:	4618      	mov	r0, r3
  401dbe:	4b15      	ldr	r3, [pc, #84]	; (401e14 <usb_d_cb_trans_setup+0xc4>)
  401dc0:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  401dc2:	693b      	ldr	r3, [r7, #16]
  401dc4:	2201      	movs	r2, #1
  401dc6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  401dc8:	693b      	ldr	r3, [r7, #16]
  401dca:	695b      	ldr	r3, [r3, #20]
  401dcc:	79fa      	ldrb	r2, [r7, #7]
  401dce:	68f9      	ldr	r1, [r7, #12]
  401dd0:	4610      	mov	r0, r2
  401dd2:	4798      	blx	r3
  401dd4:	4603      	mov	r3, r0
  401dd6:	f083 0301 	eor.w	r3, r3, #1
  401dda:	b2db      	uxtb	r3, r3
  401ddc:	2b00      	cmp	r3, #0
  401dde:	d00f      	beq.n	401e00 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  401de0:	693b      	ldr	r3, [r7, #16]
  401de2:	2205      	movs	r2, #5
  401de4:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  401de6:	79fb      	ldrb	r3, [r7, #7]
  401de8:	2101      	movs	r1, #1
  401dea:	4618      	mov	r0, r3
  401dec:	4b09      	ldr	r3, [pc, #36]	; (401e14 <usb_d_cb_trans_setup+0xc4>)
  401dee:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  401df0:	79fb      	ldrb	r3, [r7, #7]
  401df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401df6:	b2db      	uxtb	r3, r3
  401df8:	2101      	movs	r1, #1
  401dfa:	4618      	mov	r0, r3
  401dfc:	4b05      	ldr	r3, [pc, #20]	; (401e14 <usb_d_cb_trans_setup+0xc4>)
  401dfe:	4798      	blx	r3
	}
}
  401e00:	3718      	adds	r7, #24
  401e02:	46bd      	mov	sp, r7
  401e04:	bd80      	pop	{r7, pc}
  401e06:	bf00      	nop
  401e08:	00401c61 	.word	0x00401c61
  401e0c:	204010e8 	.word	0x204010e8
  401e10:	00405e3d 	.word	0x00405e3d
  401e14:	00405d11 	.word	0x00405d11

00401e18 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  401e18:	b580      	push	{r7, lr}
  401e1a:	b084      	sub	sp, #16
  401e1c:	af00      	add	r7, sp, #0
  401e1e:	4603      	mov	r3, r0
  401e20:	6039      	str	r1, [r7, #0]
  401e22:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401e24:	79fb      	ldrb	r3, [r7, #7]
  401e26:	4618      	mov	r0, r3
  401e28:	4b0d      	ldr	r3, [pc, #52]	; (401e60 <usb_d_cb_trans_more+0x48>)
  401e2a:	4798      	blx	r3
  401e2c:	4603      	mov	r3, r0
  401e2e:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  401e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401e34:	015b      	lsls	r3, r3, #5
  401e36:	4a0b      	ldr	r2, [pc, #44]	; (401e64 <usb_d_cb_trans_more+0x4c>)
  401e38:	4413      	add	r3, r2
  401e3a:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  401e3c:	68bb      	ldr	r3, [r7, #8]
  401e3e:	789b      	ldrb	r3, [r3, #2]
  401e40:	2b03      	cmp	r3, #3
  401e42:	d107      	bne.n	401e54 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
  401e44:	68bb      	ldr	r3, [r7, #8]
  401e46:	699b      	ldr	r3, [r3, #24]
  401e48:	79fa      	ldrb	r2, [r7, #7]
  401e4a:	6839      	ldr	r1, [r7, #0]
  401e4c:	4610      	mov	r0, r2
  401e4e:	4798      	blx	r3
  401e50:	4603      	mov	r3, r0
  401e52:	e000      	b.n	401e56 <usb_d_cb_trans_more+0x3e>
	}
	return false;
  401e54:	2300      	movs	r3, #0
}
  401e56:	4618      	mov	r0, r3
  401e58:	3710      	adds	r7, #16
  401e5a:	46bd      	mov	sp, r7
  401e5c:	bd80      	pop	{r7, pc}
  401e5e:	bf00      	nop
  401e60:	00401c61 	.word	0x00401c61
  401e64:	204010e8 	.word	0x204010e8

00401e68 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
  401e68:	b590      	push	{r4, r7, lr}
  401e6a:	b087      	sub	sp, #28
  401e6c:	af02      	add	r7, sp, #8
  401e6e:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
  401e70:	687b      	ldr	r3, [r7, #4]
  401e72:	789b      	ldrb	r3, [r3, #2]
  401e74:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  401e76:	687b      	ldr	r3, [r7, #4]
  401e78:	7b1b      	ldrb	r3, [r3, #12]
  401e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401e7e:	2b00      	cmp	r3, #0
  401e80:	bf14      	ite	ne
  401e82:	2301      	movne	r3, #1
  401e84:	2300      	moveq	r3, #0
  401e86:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
  401e88:	7bfb      	ldrb	r3, [r7, #15]
  401e8a:	2b03      	cmp	r3, #3
  401e8c:	d13a      	bne.n	401f04 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  401e8e:	687b      	ldr	r3, [r7, #4]
  401e90:	69db      	ldr	r3, [r3, #28]
  401e92:	687a      	ldr	r2, [r7, #4]
  401e94:	7850      	ldrb	r0, [r2, #1]
  401e96:	687a      	ldr	r2, [r7, #4]
  401e98:	320c      	adds	r2, #12
  401e9a:	2101      	movs	r1, #1
  401e9c:	4798      	blx	r3
  401e9e:	4603      	mov	r3, r0
  401ea0:	737b      	strb	r3, [r7, #13]
		if (err) {
  401ea2:	7b7b      	ldrb	r3, [r7, #13]
  401ea4:	2b00      	cmp	r3, #0
  401ea6:	d015      	beq.n	401ed4 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  401ea8:	687b      	ldr	r3, [r7, #4]
  401eaa:	2205      	movs	r2, #5
  401eac:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  401eae:	687b      	ldr	r3, [r7, #4]
  401eb0:	2202      	movs	r2, #2
  401eb2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  401eb4:	7bbb      	ldrb	r3, [r7, #14]
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	d002      	beq.n	401ec0 <usb_d_ctrl_trans_done+0x58>
  401eba:	687b      	ldr	r3, [r7, #4]
  401ebc:	785b      	ldrb	r3, [r3, #1]
  401ebe:	e004      	b.n	401eca <usb_d_ctrl_trans_done+0x62>
  401ec0:	687b      	ldr	r3, [r7, #4]
  401ec2:	785b      	ldrb	r3, [r3, #1]
  401ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401ec8:	b2db      	uxtb	r3, r3
  401eca:	2101      	movs	r1, #1
  401ecc:	4618      	mov	r0, r3
  401ece:	4b15      	ldr	r3, [pc, #84]	; (401f24 <usb_d_ctrl_trans_done+0xbc>)
  401ed0:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
  401ed2:	e022      	b.n	401f1a <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  401ed4:	687b      	ldr	r3, [r7, #4]
  401ed6:	2204      	movs	r2, #4
  401ed8:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  401eda:	687b      	ldr	r3, [r7, #4]
  401edc:	7858      	ldrb	r0, [r3, #1]
  401ede:	7bbb      	ldrb	r3, [r7, #14]
  401ee0:	2b00      	cmp	r3, #0
  401ee2:	bf14      	ite	ne
  401ee4:	2301      	movne	r3, #1
  401ee6:	2300      	moveq	r3, #0
  401ee8:	b2db      	uxtb	r3, r3
  401eea:	f083 0301 	eor.w	r3, r3, #1
  401eee:	b2db      	uxtb	r3, r3
  401ef0:	f003 0301 	and.w	r3, r3, #1
  401ef4:	b2d9      	uxtb	r1, r3
  401ef6:	2301      	movs	r3, #1
  401ef8:	9300      	str	r3, [sp, #0]
  401efa:	2300      	movs	r3, #0
  401efc:	2200      	movs	r2, #0
  401efe:	4c0a      	ldr	r4, [pc, #40]	; (401f28 <usb_d_ctrl_trans_done+0xc0>)
  401f00:	47a0      	blx	r4
}
  401f02:	e00a      	b.n	401f1a <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  401f04:	687b      	ldr	r3, [r7, #4]
  401f06:	69db      	ldr	r3, [r3, #28]
  401f08:	687a      	ldr	r2, [r7, #4]
  401f0a:	7850      	ldrb	r0, [r2, #1]
  401f0c:	687a      	ldr	r2, [r7, #4]
  401f0e:	320c      	adds	r2, #12
  401f10:	2100      	movs	r1, #0
  401f12:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  401f14:	687b      	ldr	r3, [r7, #4]
  401f16:	2202      	movs	r2, #2
  401f18:	709a      	strb	r2, [r3, #2]
}
  401f1a:	bf00      	nop
  401f1c:	3714      	adds	r7, #20
  401f1e:	46bd      	mov	sp, r7
  401f20:	bd90      	pop	{r4, r7, pc}
  401f22:	bf00      	nop
  401f24:	00405d11 	.word	0x00405d11
  401f28:	00401ce1 	.word	0x00401ce1

00401f2c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  401f2c:	b580      	push	{r7, lr}
  401f2e:	b086      	sub	sp, #24
  401f30:	af00      	add	r7, sp, #0
  401f32:	4603      	mov	r3, r0
  401f34:	60b9      	str	r1, [r7, #8]
  401f36:	607a      	str	r2, [r7, #4]
  401f38:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401f3a:	7bfb      	ldrb	r3, [r7, #15]
  401f3c:	4618      	mov	r0, r3
  401f3e:	4b2f      	ldr	r3, [pc, #188]	; (401ffc <_usb_d_cb_trans_done+0xd0>)
  401f40:	4798      	blx	r3
  401f42:	4603      	mov	r3, r0
  401f44:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  401f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
  401f4a:	015b      	lsls	r3, r3, #5
  401f4c:	4a2c      	ldr	r2, [pc, #176]	; (402000 <_usb_d_cb_trans_done+0xd4>)
  401f4e:	4413      	add	r3, r2
  401f50:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
  401f52:	68bb      	ldr	r3, [r7, #8]
  401f54:	2b00      	cmp	r3, #0
  401f56:	d10e      	bne.n	401f76 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
  401f58:	693b      	ldr	r3, [r7, #16]
  401f5a:	2200      	movs	r2, #0
  401f5c:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  401f5e:	693b      	ldr	r3, [r7, #16]
  401f60:	781b      	ldrb	r3, [r3, #0]
  401f62:	2b00      	cmp	r3, #0
  401f64:	d103      	bne.n	401f6e <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
  401f66:	6938      	ldr	r0, [r7, #16]
  401f68:	4b26      	ldr	r3, [pc, #152]	; (402004 <_usb_d_cb_trans_done+0xd8>)
  401f6a:	4798      	blx	r3
			return;
  401f6c:	e043      	b.n	401ff6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  401f6e:	693b      	ldr	r3, [r7, #16]
  401f70:	2201      	movs	r2, #1
  401f72:	709a      	strb	r2, [r3, #2]
  401f74:	e038      	b.n	401fe8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
  401f76:	68bb      	ldr	r3, [r7, #8]
  401f78:	2b01      	cmp	r3, #1
  401f7a:	d113      	bne.n	401fa4 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
  401f7c:	693b      	ldr	r3, [r7, #16]
  401f7e:	2202      	movs	r2, #2
  401f80:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  401f82:	693b      	ldr	r3, [r7, #16]
  401f84:	781b      	ldrb	r3, [r3, #0]
  401f86:	2b00      	cmp	r3, #0
  401f88:	d108      	bne.n	401f9c <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  401f8a:	693b      	ldr	r3, [r7, #16]
  401f8c:	2202      	movs	r2, #2
  401f8e:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  401f90:	7bfb      	ldrb	r3, [r7, #15]
  401f92:	2100      	movs	r1, #0
  401f94:	4618      	mov	r0, r3
  401f96:	4b1c      	ldr	r3, [pc, #112]	; (402008 <_usb_d_cb_trans_done+0xdc>)
  401f98:	4798      	blx	r3
  401f9a:	e025      	b.n	401fe8 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  401f9c:	693b      	ldr	r3, [r7, #16]
  401f9e:	2205      	movs	r2, #5
  401fa0:	709a      	strb	r2, [r3, #2]
  401fa2:	e021      	b.n	401fe8 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
  401fa4:	68bb      	ldr	r3, [r7, #8]
  401fa6:	2b02      	cmp	r3, #2
  401fa8:	d10e      	bne.n	401fc8 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  401faa:	693b      	ldr	r3, [r7, #16]
  401fac:	2204      	movs	r2, #4
  401fae:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  401fb0:	693b      	ldr	r3, [r7, #16]
  401fb2:	781b      	ldrb	r3, [r3, #0]
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	d103      	bne.n	401fc0 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  401fb8:	693b      	ldr	r3, [r7, #16]
  401fba:	2202      	movs	r2, #2
  401fbc:	709a      	strb	r2, [r3, #2]
			return;
  401fbe:	e01a      	b.n	401ff6 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  401fc0:	693b      	ldr	r3, [r7, #16]
  401fc2:	2201      	movs	r2, #1
  401fc4:	709a      	strb	r2, [r3, #2]
  401fc6:	e00f      	b.n	401fe8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
  401fc8:	68bb      	ldr	r3, [r7, #8]
  401fca:	2b03      	cmp	r3, #3
  401fcc:	d106      	bne.n	401fdc <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  401fce:	693b      	ldr	r3, [r7, #16]
  401fd0:	2200      	movs	r2, #0
  401fd2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  401fd4:	693b      	ldr	r3, [r7, #16]
  401fd6:	2205      	movs	r2, #5
  401fd8:	70da      	strb	r2, [r3, #3]
  401fda:	e005      	b.n	401fe8 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  401fdc:	693b      	ldr	r3, [r7, #16]
  401fde:	2206      	movs	r2, #6
  401fe0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  401fe2:	693b      	ldr	r3, [r7, #16]
  401fe4:	2206      	movs	r2, #6
  401fe6:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  401fe8:	693b      	ldr	r3, [r7, #16]
  401fea:	69db      	ldr	r3, [r3, #28]
  401fec:	693a      	ldr	r2, [r7, #16]
  401fee:	78d1      	ldrb	r1, [r2, #3]
  401ff0:	687a      	ldr	r2, [r7, #4]
  401ff2:	7bf8      	ldrb	r0, [r7, #15]
  401ff4:	4798      	blx	r3
}
  401ff6:	3718      	adds	r7, #24
  401ff8:	46bd      	mov	sp, r7
  401ffa:	bd80      	pop	{r7, pc}
  401ffc:	00401c61 	.word	0x00401c61
  402000:	204010e8 	.word	0x204010e8
  402004:	00401e69 	.word	0x00401e69
  402008:	00405d11 	.word	0x00405d11

0040200c <usb_d_init>:

int32_t usb_d_init(void)
{
  40200c:	b580      	push	{r7, lr}
  40200e:	b082      	sub	sp, #8
  402010:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
  402012:	4b21      	ldr	r3, [pc, #132]	; (402098 <usb_d_init+0x8c>)
  402014:	4798      	blx	r3
  402016:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
  402018:	683b      	ldr	r3, [r7, #0]
  40201a:	2b00      	cmp	r3, #0
  40201c:	da01      	bge.n	402022 <usb_d_init+0x16>
		return rc;
  40201e:	683b      	ldr	r3, [r7, #0]
  402020:	e036      	b.n	402090 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  402022:	2280      	movs	r2, #128	; 0x80
  402024:	2100      	movs	r1, #0
  402026:	481d      	ldr	r0, [pc, #116]	; (40209c <usb_d_init+0x90>)
  402028:	4b1d      	ldr	r3, [pc, #116]	; (4020a0 <usb_d_init+0x94>)
  40202a:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  40202c:	2300      	movs	r3, #0
  40202e:	71fb      	strb	r3, [r7, #7]
  402030:	e01e      	b.n	402070 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  402032:	79fb      	ldrb	r3, [r7, #7]
  402034:	4a19      	ldr	r2, [pc, #100]	; (40209c <usb_d_init+0x90>)
  402036:	015b      	lsls	r3, r3, #5
  402038:	4413      	add	r3, r2
  40203a:	3301      	adds	r3, #1
  40203c:	22ff      	movs	r2, #255	; 0xff
  40203e:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  402040:	79fb      	ldrb	r3, [r7, #7]
  402042:	4a16      	ldr	r2, [pc, #88]	; (40209c <usb_d_init+0x90>)
  402044:	015b      	lsls	r3, r3, #5
  402046:	4413      	add	r3, r2
  402048:	3314      	adds	r3, #20
  40204a:	4a16      	ldr	r2, [pc, #88]	; (4020a4 <usb_d_init+0x98>)
  40204c:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  40204e:	79fb      	ldrb	r3, [r7, #7]
  402050:	4a12      	ldr	r2, [pc, #72]	; (40209c <usb_d_init+0x90>)
  402052:	015b      	lsls	r3, r3, #5
  402054:	4413      	add	r3, r2
  402056:	3318      	adds	r3, #24
  402058:	4a12      	ldr	r2, [pc, #72]	; (4020a4 <usb_d_init+0x98>)
  40205a:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  40205c:	79fb      	ldrb	r3, [r7, #7]
  40205e:	4a0f      	ldr	r2, [pc, #60]	; (40209c <usb_d_init+0x90>)
  402060:	015b      	lsls	r3, r3, #5
  402062:	4413      	add	r3, r2
  402064:	331c      	adds	r3, #28
  402066:	4a0f      	ldr	r2, [pc, #60]	; (4020a4 <usb_d_init+0x98>)
  402068:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  40206a:	79fb      	ldrb	r3, [r7, #7]
  40206c:	3301      	adds	r3, #1
  40206e:	71fb      	strb	r3, [r7, #7]
  402070:	79fb      	ldrb	r3, [r7, #7]
  402072:	2b03      	cmp	r3, #3
  402074:	d9dd      	bls.n	402032 <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  402076:	490c      	ldr	r1, [pc, #48]	; (4020a8 <usb_d_init+0x9c>)
  402078:	2000      	movs	r0, #0
  40207a:	4b0c      	ldr	r3, [pc, #48]	; (4020ac <usb_d_init+0xa0>)
  40207c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  40207e:	490c      	ldr	r1, [pc, #48]	; (4020b0 <usb_d_init+0xa4>)
  402080:	2001      	movs	r0, #1
  402082:	4b0a      	ldr	r3, [pc, #40]	; (4020ac <usb_d_init+0xa0>)
  402084:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  402086:	490b      	ldr	r1, [pc, #44]	; (4020b4 <usb_d_init+0xa8>)
  402088:	2002      	movs	r0, #2
  40208a:	4b08      	ldr	r3, [pc, #32]	; (4020ac <usb_d_init+0xa0>)
  40208c:	4798      	blx	r3
	return ERR_NONE;
  40208e:	2300      	movs	r3, #0
}
  402090:	4618      	mov	r0, r3
  402092:	3708      	adds	r7, #8
  402094:	46bd      	mov	sp, r7
  402096:	bd80      	pop	{r7, pc}
  402098:	00405b41 	.word	0x00405b41
  40209c:	204010e8 	.word	0x204010e8
  4020a0:	00406a37 	.word	0x00406a37
  4020a4:	00401d35 	.word	0x00401d35
  4020a8:	00401d51 	.word	0x00401d51
  4020ac:	004060a1 	.word	0x004060a1
  4020b0:	00401e19 	.word	0x00401e19
  4020b4:	00401f2d 	.word	0x00401f2d

004020b8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
  4020b8:	b480      	push	{r7}
  4020ba:	b085      	sub	sp, #20
  4020bc:	af00      	add	r7, sp, #0
  4020be:	4603      	mov	r3, r0
  4020c0:	60b9      	str	r1, [r7, #8]
  4020c2:	607a      	str	r2, [r7, #4]
  4020c4:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
  4020c6:	7bfb      	ldrb	r3, [r7, #15]
  4020c8:	f083 0301 	eor.w	r3, r3, #1
  4020cc:	b2db      	uxtb	r3, r3
  4020ce:	2b00      	cmp	r3, #0
  4020d0:	d000      	beq.n	4020d4 <assert+0x1c>
		__asm("BKPT #0");
  4020d2:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  4020d4:	bf00      	nop
  4020d6:	3714      	adds	r7, #20
  4020d8:	46bd      	mov	sp, r7
  4020da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4020de:	4770      	bx	lr

004020e0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  4020e0:	b580      	push	{r7, lr}
  4020e2:	b084      	sub	sp, #16
  4020e4:	af00      	add	r7, sp, #0
  4020e6:	60f8      	str	r0, [r7, #12]
  4020e8:	60b9      	str	r1, [r7, #8]
  4020ea:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
  4020ec:	68fb      	ldr	r3, [r7, #12]
  4020ee:	2b00      	cmp	r3, #0
  4020f0:	d007      	beq.n	402102 <ringbuffer_init+0x22>
  4020f2:	68bb      	ldr	r3, [r7, #8]
  4020f4:	2b00      	cmp	r3, #0
  4020f6:	d004      	beq.n	402102 <ringbuffer_init+0x22>
  4020f8:	687b      	ldr	r3, [r7, #4]
  4020fa:	2b00      	cmp	r3, #0
  4020fc:	d001      	beq.n	402102 <ringbuffer_init+0x22>
  4020fe:	2301      	movs	r3, #1
  402100:	e000      	b.n	402104 <ringbuffer_init+0x24>
  402102:	2300      	movs	r3, #0
  402104:	f003 0301 	and.w	r3, r3, #1
  402108:	b2db      	uxtb	r3, r3
  40210a:	2232      	movs	r2, #50	; 0x32
  40210c:	490f      	ldr	r1, [pc, #60]	; (40214c <ringbuffer_init+0x6c>)
  40210e:	4618      	mov	r0, r3
  402110:	4b0f      	ldr	r3, [pc, #60]	; (402150 <ringbuffer_init+0x70>)
  402112:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  402114:	687b      	ldr	r3, [r7, #4]
  402116:	1e5a      	subs	r2, r3, #1
  402118:	687b      	ldr	r3, [r7, #4]
  40211a:	4013      	ands	r3, r2
  40211c:	2b00      	cmp	r3, #0
  40211e:	d002      	beq.n	402126 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
  402120:	f06f 030c 	mvn.w	r3, #12
  402124:	e00e      	b.n	402144 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  402126:	687b      	ldr	r3, [r7, #4]
  402128:	1e5a      	subs	r2, r3, #1
  40212a:	68fb      	ldr	r3, [r7, #12]
  40212c:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
  40212e:	68fb      	ldr	r3, [r7, #12]
  402130:	2200      	movs	r2, #0
  402132:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
  402134:	68fb      	ldr	r3, [r7, #12]
  402136:	689a      	ldr	r2, [r3, #8]
  402138:	68fb      	ldr	r3, [r7, #12]
  40213a:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
  40213c:	68fb      	ldr	r3, [r7, #12]
  40213e:	68ba      	ldr	r2, [r7, #8]
  402140:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  402142:	2300      	movs	r3, #0
}
  402144:	4618      	mov	r0, r3
  402146:	3710      	adds	r7, #16
  402148:	46bd      	mov	sp, r7
  40214a:	bd80      	pop	{r7, pc}
  40214c:	00406af4 	.word	0x00406af4
  402150:	004020b9 	.word	0x004020b9

00402154 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  402154:	b580      	push	{r7, lr}
  402156:	b082      	sub	sp, #8
  402158:	af00      	add	r7, sp, #0
  40215a:	6078      	str	r0, [r7, #4]
  40215c:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
  40215e:	687b      	ldr	r3, [r7, #4]
  402160:	2b00      	cmp	r3, #0
  402162:	d004      	beq.n	40216e <ringbuffer_get+0x1a>
  402164:	683b      	ldr	r3, [r7, #0]
  402166:	2b00      	cmp	r3, #0
  402168:	d001      	beq.n	40216e <ringbuffer_get+0x1a>
  40216a:	2301      	movs	r3, #1
  40216c:	e000      	b.n	402170 <ringbuffer_get+0x1c>
  40216e:	2300      	movs	r3, #0
  402170:	f003 0301 	and.w	r3, r3, #1
  402174:	b2db      	uxtb	r3, r3
  402176:	224a      	movs	r2, #74	; 0x4a
  402178:	4910      	ldr	r1, [pc, #64]	; (4021bc <ringbuffer_get+0x68>)
  40217a:	4618      	mov	r0, r3
  40217c:	4b10      	ldr	r3, [pc, #64]	; (4021c0 <ringbuffer_get+0x6c>)
  40217e:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  402180:	687b      	ldr	r3, [r7, #4]
  402182:	68da      	ldr	r2, [r3, #12]
  402184:	687b      	ldr	r3, [r7, #4]
  402186:	689b      	ldr	r3, [r3, #8]
  402188:	429a      	cmp	r2, r3
  40218a:	d011      	beq.n	4021b0 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
  40218c:	687b      	ldr	r3, [r7, #4]
  40218e:	681a      	ldr	r2, [r3, #0]
  402190:	687b      	ldr	r3, [r7, #4]
  402192:	6899      	ldr	r1, [r3, #8]
  402194:	687b      	ldr	r3, [r7, #4]
  402196:	685b      	ldr	r3, [r3, #4]
  402198:	400b      	ands	r3, r1
  40219a:	4413      	add	r3, r2
  40219c:	781a      	ldrb	r2, [r3, #0]
  40219e:	683b      	ldr	r3, [r7, #0]
  4021a0:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
  4021a2:	687b      	ldr	r3, [r7, #4]
  4021a4:	689b      	ldr	r3, [r3, #8]
  4021a6:	1c5a      	adds	r2, r3, #1
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
  4021ac:	2300      	movs	r3, #0
  4021ae:	e001      	b.n	4021b4 <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
  4021b0:	f06f 0309 	mvn.w	r3, #9
}
  4021b4:	4618      	mov	r0, r3
  4021b6:	3708      	adds	r7, #8
  4021b8:	46bd      	mov	sp, r7
  4021ba:	bd80      	pop	{r7, pc}
  4021bc:	00406af4 	.word	0x00406af4
  4021c0:	004020b9 	.word	0x004020b9

004021c4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  4021c4:	b580      	push	{r7, lr}
  4021c6:	b082      	sub	sp, #8
  4021c8:	af00      	add	r7, sp, #0
  4021ca:	6078      	str	r0, [r7, #4]
  4021cc:	460b      	mov	r3, r1
  4021ce:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
  4021d0:	687b      	ldr	r3, [r7, #4]
  4021d2:	2b00      	cmp	r3, #0
  4021d4:	bf14      	ite	ne
  4021d6:	2301      	movne	r3, #1
  4021d8:	2300      	moveq	r3, #0
  4021da:	b2db      	uxtb	r3, r3
  4021dc:	225b      	movs	r2, #91	; 0x5b
  4021de:	4914      	ldr	r1, [pc, #80]	; (402230 <ringbuffer_put+0x6c>)
  4021e0:	4618      	mov	r0, r3
  4021e2:	4b14      	ldr	r3, [pc, #80]	; (402234 <ringbuffer_put+0x70>)
  4021e4:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  4021e6:	687b      	ldr	r3, [r7, #4]
  4021e8:	681a      	ldr	r2, [r3, #0]
  4021ea:	687b      	ldr	r3, [r7, #4]
  4021ec:	68d9      	ldr	r1, [r3, #12]
  4021ee:	687b      	ldr	r3, [r7, #4]
  4021f0:	685b      	ldr	r3, [r3, #4]
  4021f2:	400b      	ands	r3, r1
  4021f4:	4413      	add	r3, r2
  4021f6:	78fa      	ldrb	r2, [r7, #3]
  4021f8:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  4021fa:	687b      	ldr	r3, [r7, #4]
  4021fc:	68da      	ldr	r2, [r3, #12]
  4021fe:	687b      	ldr	r3, [r7, #4]
  402200:	689b      	ldr	r3, [r3, #8]
  402202:	1ad2      	subs	r2, r2, r3
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	685b      	ldr	r3, [r3, #4]
  402208:	429a      	cmp	r2, r3
  40220a:	d906      	bls.n	40221a <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	68da      	ldr	r2, [r3, #12]
  402210:	687b      	ldr	r3, [r7, #4]
  402212:	685b      	ldr	r3, [r3, #4]
  402214:	1ad2      	subs	r2, r2, r3
  402216:	687b      	ldr	r3, [r7, #4]
  402218:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
  40221a:	687b      	ldr	r3, [r7, #4]
  40221c:	68db      	ldr	r3, [r3, #12]
  40221e:	1c5a      	adds	r2, r3, #1
  402220:	687b      	ldr	r3, [r7, #4]
  402222:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
  402224:	2300      	movs	r3, #0
}
  402226:	4618      	mov	r0, r3
  402228:	3708      	adds	r7, #8
  40222a:	46bd      	mov	sp, r7
  40222c:	bd80      	pop	{r7, pc}
  40222e:	bf00      	nop
  402230:	00406af4 	.word	0x00406af4
  402234:	004020b9 	.word	0x004020b9

00402238 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  402238:	b580      	push	{r7, lr}
  40223a:	b082      	sub	sp, #8
  40223c:	af00      	add	r7, sp, #0
  40223e:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
  402240:	687b      	ldr	r3, [r7, #4]
  402242:	2b00      	cmp	r3, #0
  402244:	bf14      	ite	ne
  402246:	2301      	movne	r3, #1
  402248:	2300      	moveq	r3, #0
  40224a:	b2db      	uxtb	r3, r3
  40224c:	2271      	movs	r2, #113	; 0x71
  40224e:	4906      	ldr	r1, [pc, #24]	; (402268 <ringbuffer_num+0x30>)
  402250:	4618      	mov	r0, r3
  402252:	4b06      	ldr	r3, [pc, #24]	; (40226c <ringbuffer_num+0x34>)
  402254:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  402256:	687b      	ldr	r3, [r7, #4]
  402258:	68da      	ldr	r2, [r3, #12]
  40225a:	687b      	ldr	r3, [r7, #4]
  40225c:	689b      	ldr	r3, [r3, #8]
  40225e:	1ad3      	subs	r3, r2, r3
}
  402260:	4618      	mov	r0, r3
  402262:	3708      	adds	r7, #8
  402264:	46bd      	mov	sp, r7
  402266:	bd80      	pop	{r7, pc}
  402268:	00406af4 	.word	0x00406af4
  40226c:	004020b9 	.word	0x004020b9

00402270 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
  402270:	b480      	push	{r7}
  402272:	b083      	sub	sp, #12
  402274:	af00      	add	r7, sp, #0
  402276:	4603      	mov	r3, r0
  402278:	6039      	str	r1, [r7, #0]
  40227a:	80fb      	strh	r3, [r7, #6]
  40227c:	4613      	mov	r3, r2
  40227e:	717b      	strb	r3, [r7, #5]
	switch (power) {
  402280:	797b      	ldrb	r3, [r7, #5]
  402282:	3b05      	subs	r3, #5
  402284:	2b04      	cmp	r3, #4
  402286:	d852      	bhi.n	40232e <_get_cycles_for_us_internal+0xbe>
  402288:	a201      	add	r2, pc, #4	; (adr r2, 402290 <_get_cycles_for_us_internal+0x20>)
  40228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40228e:	bf00      	nop
  402290:	0040230f 	.word	0x0040230f
  402294:	004022f1 	.word	0x004022f1
  402298:	004022d5 	.word	0x004022d5
  40229c:	004022b7 	.word	0x004022b7
  4022a0:	004022a5 	.word	0x004022a5
	case 9:
		return (us * (freq / 1000000));
  4022a4:	88fb      	ldrh	r3, [r7, #6]
  4022a6:	683a      	ldr	r2, [r7, #0]
  4022a8:	4929      	ldr	r1, [pc, #164]	; (402350 <_get_cycles_for_us_internal+0xe0>)
  4022aa:	fba1 1202 	umull	r1, r2, r1, r2
  4022ae:	0c92      	lsrs	r2, r2, #18
  4022b0:	fb02 f303 	mul.w	r3, r2, r3
  4022b4:	e045      	b.n	402342 <_get_cycles_for_us_internal+0xd2>
	case 8:
		return (us * (freq / 100000) + 9) / 10;
  4022b6:	88fb      	ldrh	r3, [r7, #6]
  4022b8:	683a      	ldr	r2, [r7, #0]
  4022ba:	0952      	lsrs	r2, r2, #5
  4022bc:	4925      	ldr	r1, [pc, #148]	; (402354 <_get_cycles_for_us_internal+0xe4>)
  4022be:	fba1 1202 	umull	r1, r2, r1, r2
  4022c2:	09d2      	lsrs	r2, r2, #7
  4022c4:	fb02 f303 	mul.w	r3, r2, r3
  4022c8:	3309      	adds	r3, #9
  4022ca:	4a23      	ldr	r2, [pc, #140]	; (402358 <_get_cycles_for_us_internal+0xe8>)
  4022cc:	fba2 2303 	umull	r2, r3, r2, r3
  4022d0:	08db      	lsrs	r3, r3, #3
  4022d2:	e036      	b.n	402342 <_get_cycles_for_us_internal+0xd2>
	case 7:
		return (us * (freq / 10000) + 99) / 100;
  4022d4:	88fb      	ldrh	r3, [r7, #6]
  4022d6:	683a      	ldr	r2, [r7, #0]
  4022d8:	4920      	ldr	r1, [pc, #128]	; (40235c <_get_cycles_for_us_internal+0xec>)
  4022da:	fba1 1202 	umull	r1, r2, r1, r2
  4022de:	0b52      	lsrs	r2, r2, #13
  4022e0:	fb02 f303 	mul.w	r3, r2, r3
  4022e4:	3363      	adds	r3, #99	; 0x63
  4022e6:	4a1e      	ldr	r2, [pc, #120]	; (402360 <_get_cycles_for_us_internal+0xf0>)
  4022e8:	fba2 2303 	umull	r2, r3, r2, r3
  4022ec:	095b      	lsrs	r3, r3, #5
  4022ee:	e028      	b.n	402342 <_get_cycles_for_us_internal+0xd2>
	case 6:
		return (us * (freq / 1000) + 999) / 1000;
  4022f0:	88fb      	ldrh	r3, [r7, #6]
  4022f2:	683a      	ldr	r2, [r7, #0]
  4022f4:	491b      	ldr	r1, [pc, #108]	; (402364 <_get_cycles_for_us_internal+0xf4>)
  4022f6:	fba1 1202 	umull	r1, r2, r1, r2
  4022fa:	0992      	lsrs	r2, r2, #6
  4022fc:	fb02 f303 	mul.w	r3, r2, r3
  402300:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  402304:	4a17      	ldr	r2, [pc, #92]	; (402364 <_get_cycles_for_us_internal+0xf4>)
  402306:	fba2 2303 	umull	r2, r3, r2, r3
  40230a:	099b      	lsrs	r3, r3, #6
  40230c:	e019      	b.n	402342 <_get_cycles_for_us_internal+0xd2>
	case 5:
		return (us * (freq / 100) + 9999) / 10000;
  40230e:	88fb      	ldrh	r3, [r7, #6]
  402310:	683a      	ldr	r2, [r7, #0]
  402312:	4913      	ldr	r1, [pc, #76]	; (402360 <_get_cycles_for_us_internal+0xf0>)
  402314:	fba1 1202 	umull	r1, r2, r1, r2
  402318:	0952      	lsrs	r2, r2, #5
  40231a:	fb02 f203 	mul.w	r2, r2, r3
  40231e:	f242 730f 	movw	r3, #9999	; 0x270f
  402322:	4413      	add	r3, r2
  402324:	4a0d      	ldr	r2, [pc, #52]	; (40235c <_get_cycles_for_us_internal+0xec>)
  402326:	fba2 2303 	umull	r2, r3, r2, r3
  40232a:	0b5b      	lsrs	r3, r3, #13
  40232c:	e009      	b.n	402342 <_get_cycles_for_us_internal+0xd2>
	default:
		return (us * freq + 999999) / 1000000;
  40232e:	88fb      	ldrh	r3, [r7, #6]
  402330:	683a      	ldr	r2, [r7, #0]
  402332:	fb02 f203 	mul.w	r2, r2, r3
  402336:	4b0c      	ldr	r3, [pc, #48]	; (402368 <_get_cycles_for_us_internal+0xf8>)
  402338:	4413      	add	r3, r2
  40233a:	4a05      	ldr	r2, [pc, #20]	; (402350 <_get_cycles_for_us_internal+0xe0>)
  40233c:	fba2 2303 	umull	r2, r3, r2, r3
  402340:	0c9b      	lsrs	r3, r3, #18
	}
}
  402342:	4618      	mov	r0, r3
  402344:	370c      	adds	r7, #12
  402346:	46bd      	mov	sp, r7
  402348:	f85d 7b04 	ldr.w	r7, [sp], #4
  40234c:	4770      	bx	lr
  40234e:	bf00      	nop
  402350:	431bde83 	.word	0x431bde83
  402354:	0a7c5ac5 	.word	0x0a7c5ac5
  402358:	cccccccd 	.word	0xcccccccd
  40235c:	d1b71759 	.word	0xd1b71759
  402360:	51eb851f 	.word	0x51eb851f
  402364:	10624dd3 	.word	0x10624dd3
  402368:	000f423f 	.word	0x000f423f

0040236c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
  40236c:	b580      	push	{r7, lr}
  40236e:	b082      	sub	sp, #8
  402370:	af00      	add	r7, sp, #0
  402372:	4603      	mov	r3, r0
  402374:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  402376:	88fb      	ldrh	r3, [r7, #6]
  402378:	2209      	movs	r2, #9
  40237a:	4904      	ldr	r1, [pc, #16]	; (40238c <_get_cycles_for_us+0x20>)
  40237c:	4618      	mov	r0, r3
  40237e:	4b04      	ldr	r3, [pc, #16]	; (402390 <_get_cycles_for_us+0x24>)
  402380:	4798      	blx	r3
  402382:	4603      	mov	r3, r0
}
  402384:	4618      	mov	r0, r3
  402386:	3708      	adds	r7, #8
  402388:	46bd      	mov	sp, r7
  40238a:	bd80      	pop	{r7, pc}
  40238c:	11e1a300 	.word	0x11e1a300
  402390:	00402271 	.word	0x00402271

00402394 <_delay_cycles>:
 * \note In theory, a single loop runs take 2 cycles or more. But we find it
 * really only needs 1 cycle through debugging.
 *
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
  402394:	b480      	push	{r7}
  402396:	b083      	sub	sp, #12
  402398:	af00      	add	r7, sp, #0
  40239a:	6078      	str	r0, [r7, #4]
  40239c:	6039      	str	r1, [r7, #0]

0040239e <__delay>:
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  40239e:	3901      	subs	r1, #1
  4023a0:	d8fd      	bhi.n	40239e <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
  4023a2:	bf00      	nop
  4023a4:	370c      	adds	r7, #12
  4023a6:	46bd      	mov	sp, r7
  4023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023ac:	4770      	bx	lr

004023ae <hri_efc_write_EEFC_FMR_FWS_bf>:
	tmp = (tmp & EEFC_FMR_FWS(mask)) >> EEFC_FMR_FWS_Pos;
	return tmp;
}

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
  4023ae:	b480      	push	{r7}
  4023b0:	b085      	sub	sp, #20
  4023b2:	af00      	add	r7, sp, #0
  4023b4:	6078      	str	r0, [r7, #4]
  4023b6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  4023b8:	687b      	ldr	r3, [r7, #4]
  4023ba:	681b      	ldr	r3, [r3, #0]
  4023bc:	60fb      	str	r3, [r7, #12]
	tmp &= ~EEFC_FMR_FWS_Msk;
  4023be:	68fb      	ldr	r3, [r7, #12]
  4023c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  4023c4:	60fb      	str	r3, [r7, #12]
	tmp |= EEFC_FMR_FWS(data);
  4023c6:	683b      	ldr	r3, [r7, #0]
  4023c8:	021b      	lsls	r3, r3, #8
  4023ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  4023ce:	68fa      	ldr	r2, [r7, #12]
  4023d0:	4313      	orrs	r3, r2
  4023d2:	60fb      	str	r3, [r7, #12]
	((Efc *)hw)->EEFC_FMR = tmp;
  4023d4:	687b      	ldr	r3, [r7, #4]
  4023d6:	68fa      	ldr	r2, [r7, #12]
  4023d8:	601a      	str	r2, [r3, #0]
	EFC_CRITICAL_SECTION_LEAVE();
}
  4023da:	bf00      	nop
  4023dc:	3714      	adds	r7, #20
  4023de:	46bd      	mov	sp, r7
  4023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023e4:	4770      	bx	lr

004023e6 <hri_pmc_set_PCSR0_reg>:
{
  4023e6:	b480      	push	{r7}
  4023e8:	b083      	sub	sp, #12
  4023ea:	af00      	add	r7, sp, #0
  4023ec:	6078      	str	r0, [r7, #4]
  4023ee:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  4023f0:	687b      	ldr	r3, [r7, #4]
  4023f2:	683a      	ldr	r2, [r7, #0]
  4023f4:	611a      	str	r2, [r3, #16]
}
  4023f6:	bf00      	nop
  4023f8:	370c      	adds	r7, #12
  4023fa:	46bd      	mov	sp, r7
  4023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402400:	4770      	bx	lr

00402402 <hri_pmc_get_PCSR0_reg>:
{
  402402:	b480      	push	{r7}
  402404:	b085      	sub	sp, #20
  402406:	af00      	add	r7, sp, #0
  402408:	6078      	str	r0, [r7, #4]
  40240a:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40240c:	687b      	ldr	r3, [r7, #4]
  40240e:	699b      	ldr	r3, [r3, #24]
  402410:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  402412:	68fa      	ldr	r2, [r7, #12]
  402414:	683b      	ldr	r3, [r7, #0]
  402416:	4013      	ands	r3, r2
  402418:	60fb      	str	r3, [r7, #12]
	return tmp;
  40241a:	68fb      	ldr	r3, [r7, #12]
}
  40241c:	4618      	mov	r0, r3
  40241e:	3714      	adds	r7, #20
  402420:	46bd      	mov	sp, r7
  402422:	f85d 7b04 	ldr.w	r7, [sp], #4
  402426:	4770      	bx	lr

00402428 <hri_pmc_set_PCSR1_reg>:
{
  402428:	b480      	push	{r7}
  40242a:	b083      	sub	sp, #12
  40242c:	af00      	add	r7, sp, #0
  40242e:	6078      	str	r0, [r7, #4]
  402430:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  402432:	687b      	ldr	r3, [r7, #4]
  402434:	683a      	ldr	r2, [r7, #0]
  402436:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  40243a:	bf00      	nop
  40243c:	370c      	adds	r7, #12
  40243e:	46bd      	mov	sp, r7
  402440:	f85d 7b04 	ldr.w	r7, [sp], #4
  402444:	4770      	bx	lr

00402446 <hri_pmc_get_PCSR1_reg>:
{
  402446:	b480      	push	{r7}
  402448:	b085      	sub	sp, #20
  40244a:	af00      	add	r7, sp, #0
  40244c:	6078      	str	r0, [r7, #4]
  40244e:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  402450:	687b      	ldr	r3, [r7, #4]
  402452:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  402456:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  402458:	68fa      	ldr	r2, [r7, #12]
  40245a:	683b      	ldr	r3, [r7, #0]
  40245c:	4013      	ands	r3, r2
  40245e:	60fb      	str	r3, [r7, #12]
	return tmp;
  402460:	68fb      	ldr	r3, [r7, #12]
}
  402462:	4618      	mov	r0, r3
  402464:	3714      	adds	r7, #20
  402466:	46bd      	mov	sp, r7
  402468:	f85d 7b04 	ldr.w	r7, [sp], #4
  40246c:	4770      	bx	lr
	...

00402470 <_pmc_enable_periph_clock>:
{
  402470:	b580      	push	{r7, lr}
  402472:	b082      	sub	sp, #8
  402474:	af00      	add	r7, sp, #0
  402476:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  402478:	687b      	ldr	r3, [r7, #4]
  40247a:	2b1f      	cmp	r3, #31
  40247c:	d813      	bhi.n	4024a6 <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40247e:	2201      	movs	r2, #1
  402480:	687b      	ldr	r3, [r7, #4]
  402482:	fa02 f303 	lsl.w	r3, r2, r3
  402486:	4619      	mov	r1, r3
  402488:	4814      	ldr	r0, [pc, #80]	; (4024dc <_pmc_enable_periph_clock+0x6c>)
  40248a:	4b15      	ldr	r3, [pc, #84]	; (4024e0 <_pmc_enable_periph_clock+0x70>)
  40248c:	4798      	blx	r3
  40248e:	4603      	mov	r3, r0
  402490:	2b00      	cmp	r3, #0
  402492:	d11e      	bne.n	4024d2 <_pmc_enable_periph_clock+0x62>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  402494:	2201      	movs	r2, #1
  402496:	687b      	ldr	r3, [r7, #4]
  402498:	fa02 f303 	lsl.w	r3, r2, r3
  40249c:	4619      	mov	r1, r3
  40249e:	480f      	ldr	r0, [pc, #60]	; (4024dc <_pmc_enable_periph_clock+0x6c>)
  4024a0:	4b10      	ldr	r3, [pc, #64]	; (4024e4 <_pmc_enable_periph_clock+0x74>)
  4024a2:	4798      	blx	r3
}
  4024a4:	e015      	b.n	4024d2 <_pmc_enable_periph_clock+0x62>
		periph_id -= 32;
  4024a6:	687b      	ldr	r3, [r7, #4]
  4024a8:	3b20      	subs	r3, #32
  4024aa:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4024ac:	2201      	movs	r2, #1
  4024ae:	687b      	ldr	r3, [r7, #4]
  4024b0:	fa02 f303 	lsl.w	r3, r2, r3
  4024b4:	4619      	mov	r1, r3
  4024b6:	4809      	ldr	r0, [pc, #36]	; (4024dc <_pmc_enable_periph_clock+0x6c>)
  4024b8:	4b0b      	ldr	r3, [pc, #44]	; (4024e8 <_pmc_enable_periph_clock+0x78>)
  4024ba:	4798      	blx	r3
  4024bc:	4603      	mov	r3, r0
  4024be:	2b00      	cmp	r3, #0
  4024c0:	d107      	bne.n	4024d2 <_pmc_enable_periph_clock+0x62>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  4024c2:	2201      	movs	r2, #1
  4024c4:	687b      	ldr	r3, [r7, #4]
  4024c6:	fa02 f303 	lsl.w	r3, r2, r3
  4024ca:	4619      	mov	r1, r3
  4024cc:	4803      	ldr	r0, [pc, #12]	; (4024dc <_pmc_enable_periph_clock+0x6c>)
  4024ce:	4b07      	ldr	r3, [pc, #28]	; (4024ec <_pmc_enable_periph_clock+0x7c>)
  4024d0:	4798      	blx	r3
}
  4024d2:	bf00      	nop
  4024d4:	3708      	adds	r7, #8
  4024d6:	46bd      	mov	sp, r7
  4024d8:	bd80      	pop	{r7, pc}
  4024da:	bf00      	nop
  4024dc:	400e0600 	.word	0x400e0600
  4024e0:	00402403 	.word	0x00402403
  4024e4:	004023e7 	.word	0x004023e7
  4024e8:	00402447 	.word	0x00402447
  4024ec:	00402429 	.word	0x00402429

004024f0 <_fpu_enable>:

/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
  4024f0:	b580      	push	{r7, lr}
  4024f2:	b082      	sub	sp, #8
  4024f4:	af00      	add	r7, sp, #0
	CRITICAL_SECTION_ENTER()
  4024f6:	1d3b      	adds	r3, r7, #4
  4024f8:	4618      	mov	r0, r3
  4024fa:	4b0b      	ldr	r3, [pc, #44]	; (402528 <_fpu_enable+0x38>)
  4024fc:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4024fe:	4a0b      	ldr	r2, [pc, #44]	; (40252c <_fpu_enable+0x3c>)
  402500:	4b0a      	ldr	r3, [pc, #40]	; (40252c <_fpu_enable+0x3c>)
  402502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  402506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40250a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb");
  40250e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402512:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  402516:	1d3b      	adds	r3, r7, #4
  402518:	4618      	mov	r0, r3
  40251a:	4b05      	ldr	r3, [pc, #20]	; (402530 <_fpu_enable+0x40>)
  40251c:	4798      	blx	r3
}
  40251e:	bf00      	nop
  402520:	3708      	adds	r7, #8
  402522:	46bd      	mov	sp, r7
  402524:	bd80      	pop	{r7, pc}
  402526:	bf00      	nop
  402528:	004010e1 	.word	0x004010e1
  40252c:	e000ed00 	.word	0xe000ed00
  402530:	00401107 	.word	0x00401107

00402534 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  402534:	b580      	push	{r7, lr}
  402536:	af00      	add	r7, sp, #0
	_fpu_enable();
  402538:	4b07      	ldr	r3, [pc, #28]	; (402558 <_init_chip+0x24>)
  40253a:	4798      	blx	r3
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);
  40253c:	2105      	movs	r1, #5
  40253e:	4807      	ldr	r0, [pc, #28]	; (40255c <_init_chip+0x28>)
  402540:	4b07      	ldr	r3, [pc, #28]	; (402560 <_init_chip+0x2c>)
  402542:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_XDMAC);
  402544:	203a      	movs	r0, #58	; 0x3a
  402546:	4b07      	ldr	r3, [pc, #28]	; (402564 <_init_chip+0x30>)
  402548:	4798      	blx	r3
	_dma_init();
  40254a:	4b07      	ldr	r3, [pc, #28]	; (402568 <_init_chip+0x34>)
  40254c:	4798      	blx	r3

	_pmc_init();
  40254e:	4b07      	ldr	r3, [pc, #28]	; (40256c <_init_chip+0x38>)
  402550:	4798      	blx	r3
}
  402552:	bf00      	nop
  402554:	bd80      	pop	{r7, pc}
  402556:	bf00      	nop
  402558:	004024f1 	.word	0x004024f1
  40255c:	400e0c00 	.word	0x400e0c00
  402560:	004023af 	.word	0x004023af
  402564:	00402471 	.word	0x00402471
  402568:	00406501 	.word	0x00406501
  40256c:	004030b9 	.word	0x004030b9

00402570 <hri_dacc_write_CHDR_reg>:
{
	((Dacc *)hw)->DACC_CHDR = mask;
}

static inline void hri_dacc_write_CHDR_reg(const void *const hw, hri_dacc_chsr_reg_t data)
{
  402570:	b480      	push	{r7}
  402572:	b083      	sub	sp, #12
  402574:	af00      	add	r7, sp, #0
  402576:	6078      	str	r0, [r7, #4]
  402578:	6039      	str	r1, [r7, #0]
	((Dacc *)hw)->DACC_CHDR = data;
  40257a:	687b      	ldr	r3, [r7, #4]
  40257c:	683a      	ldr	r2, [r7, #0]
  40257e:	615a      	str	r2, [r3, #20]
}
  402580:	bf00      	nop
  402582:	370c      	adds	r7, #12
  402584:	46bd      	mov	sp, r7
  402586:	f85d 7b04 	ldr.w	r7, [sp], #4
  40258a:	4770      	bx	lr

0040258c <hri_dacc_write_CR_reg>:
{
	return ((Dacc *)hw)->DACC_ISR;
}

static inline void hri_dacc_write_CR_reg(const void *const hw, hri_dacc_cr_reg_t data)
{
  40258c:	b480      	push	{r7}
  40258e:	b083      	sub	sp, #12
  402590:	af00      	add	r7, sp, #0
  402592:	6078      	str	r0, [r7, #4]
  402594:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_CR = data;
  402596:	687b      	ldr	r3, [r7, #4]
  402598:	683a      	ldr	r2, [r7, #0]
  40259a:	601a      	str	r2, [r3, #0]
	DACC_CRITICAL_SECTION_LEAVE();
}
  40259c:	bf00      	nop
  40259e:	370c      	adds	r7, #12
  4025a0:	46bd      	mov	sp, r7
  4025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025a6:	4770      	bx	lr

004025a8 <hri_dacc_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_MR_reg(const void *const hw, hri_dacc_mr_reg_t data)
{
  4025a8:	b480      	push	{r7}
  4025aa:	b083      	sub	sp, #12
  4025ac:	af00      	add	r7, sp, #0
  4025ae:	6078      	str	r0, [r7, #4]
  4025b0:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_MR = data;
  4025b2:	687b      	ldr	r3, [r7, #4]
  4025b4:	683a      	ldr	r2, [r7, #0]
  4025b6:	605a      	str	r2, [r3, #4]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4025b8:	bf00      	nop
  4025ba:	370c      	adds	r7, #12
  4025bc:	46bd      	mov	sp, r7
  4025be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025c2:	4770      	bx	lr

004025c4 <hri_dacc_write_TRIGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_TRIGR_reg(const void *const hw, hri_dacc_trigr_reg_t data)
{
  4025c4:	b480      	push	{r7}
  4025c6:	b083      	sub	sp, #12
  4025c8:	af00      	add	r7, sp, #0
  4025ca:	6078      	str	r0, [r7, #4]
  4025cc:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_TRIGR = data;
  4025ce:	687b      	ldr	r3, [r7, #4]
  4025d0:	683a      	ldr	r2, [r7, #0]
  4025d2:	609a      	str	r2, [r3, #8]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4025d4:	bf00      	nop
  4025d6:	370c      	adds	r7, #12
  4025d8:	46bd      	mov	sp, r7
  4025da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025de:	4770      	bx	lr

004025e0 <hri_dacc_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_WPMR_reg(const void *const hw, hri_dacc_wpmr_reg_t data)
{
  4025e0:	b480      	push	{r7}
  4025e2:	b083      	sub	sp, #12
  4025e4:	af00      	add	r7, sp, #0
  4025e6:	6078      	str	r0, [r7, #4]
  4025e8:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_WPMR = data;
  4025ea:	687b      	ldr	r3, [r7, #4]
  4025ec:	683a      	ldr	r2, [r7, #0]
  4025ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC_CRITICAL_SECTION_LEAVE();
}
  4025f2:	bf00      	nop
  4025f4:	370c      	adds	r7, #12
  4025f6:	46bd      	mov	sp, r7
  4025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025fc:	4770      	bx	lr
	...

00402600 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
  402600:	b580      	push	{r7, lr}
  402602:	b082      	sub	sp, #8
  402604:	af00      	add	r7, sp, #0
  402606:	6078      	str	r0, [r7, #4]
  402608:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  40260a:	687b      	ldr	r3, [r7, #4]
  40260c:	2b00      	cmp	r3, #0
  40260e:	bf14      	ite	ne
  402610:	2301      	movne	r3, #1
  402612:	2300      	moveq	r3, #0
  402614:	b2db      	uxtb	r3, r3
  402616:	225d      	movs	r2, #93	; 0x5d
  402618:	4908      	ldr	r1, [pc, #32]	; (40263c <_dac_sync_init+0x3c>)
  40261a:	4618      	mov	r0, r3
  40261c:	4b08      	ldr	r3, [pc, #32]	; (402640 <_dac_sync_init+0x40>)
  40261e:	4798      	blx	r3

	device->hw = hw;
  402620:	687b      	ldr	r3, [r7, #4]
  402622:	683a      	ldr	r2, [r7, #0]
  402624:	601a      	str	r2, [r3, #0]

	return _dac_init(device->hw);
  402626:	687b      	ldr	r3, [r7, #4]
  402628:	681b      	ldr	r3, [r3, #0]
  40262a:	4618      	mov	r0, r3
  40262c:	4b05      	ldr	r3, [pc, #20]	; (402644 <_dac_sync_init+0x44>)
  40262e:	4798      	blx	r3
  402630:	4603      	mov	r3, r0
}
  402632:	4618      	mov	r0, r3
  402634:	3708      	adds	r7, #8
  402636:	46bd      	mov	sp, r7
  402638:	bd80      	pop	{r7, pc}
  40263a:	bf00      	nop
  40263c:	00406b18 	.word	0x00406b18
  402640:	004020b9 	.word	0x004020b9
  402644:	00402649 	.word	0x00402649

00402648 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
  402648:	b580      	push	{r7, lr}
  40264a:	b082      	sub	sp, #8
  40264c:	af00      	add	r7, sp, #0
  40264e:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  402650:	687b      	ldr	r3, [r7, #4]
  402652:	2b00      	cmp	r3, #0
  402654:	bf14      	ite	ne
  402656:	2301      	movne	r3, #1
  402658:	2300      	moveq	r3, #0
  40265a:	b2db      	uxtb	r3, r3
  40265c:	f240 1201 	movw	r2, #257	; 0x101
  402660:	490f      	ldr	r1, [pc, #60]	; (4026a0 <_dac_init+0x58>)
  402662:	4618      	mov	r0, r3
  402664:	4b0f      	ldr	r3, [pc, #60]	; (4026a4 <_dac_init+0x5c>)
  402666:	4798      	blx	r3

	hri_dacc_write_CR_reg(hw, DACC_CR_SWRST);
  402668:	2101      	movs	r1, #1
  40266a:	6878      	ldr	r0, [r7, #4]
  40266c:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <_dac_init+0x60>)
  40266e:	4798      	blx	r3
	hri_dacc_write_CHDR_reg(hw, DACC_CHDR_Msk);
  402670:	2103      	movs	r1, #3
  402672:	6878      	ldr	r0, [r7, #4]
  402674:	4b0d      	ldr	r3, [pc, #52]	; (4026ac <_dac_init+0x64>)
  402676:	4798      	blx	r3
	_dac_write_protection_disable(hw);
  402678:	6878      	ldr	r0, [r7, #4]
  40267a:	4b0d      	ldr	r3, [pc, #52]	; (4026b0 <_dac_init+0x68>)
  40267c:	4798      	blx	r3
	hri_dacc_write_MR_reg(hw, _dac.mr);
  40267e:	4b0d      	ldr	r3, [pc, #52]	; (4026b4 <_dac_init+0x6c>)
  402680:	681b      	ldr	r3, [r3, #0]
  402682:	4619      	mov	r1, r3
  402684:	6878      	ldr	r0, [r7, #4]
  402686:	4b0c      	ldr	r3, [pc, #48]	; (4026b8 <_dac_init+0x70>)
  402688:	4798      	blx	r3
	hri_dacc_write_TRIGR_reg(hw, _dac.trigr);
  40268a:	4b0a      	ldr	r3, [pc, #40]	; (4026b4 <_dac_init+0x6c>)
  40268c:	685b      	ldr	r3, [r3, #4]
  40268e:	4619      	mov	r1, r3
  402690:	6878      	ldr	r0, [r7, #4]
  402692:	4b0a      	ldr	r3, [pc, #40]	; (4026bc <_dac_init+0x74>)
  402694:	4798      	blx	r3

	return ERR_NONE;
  402696:	2300      	movs	r3, #0
}
  402698:	4618      	mov	r0, r3
  40269a:	3708      	adds	r7, #8
  40269c:	46bd      	mov	sp, r7
  40269e:	bd80      	pop	{r7, pc}
  4026a0:	00406b18 	.word	0x00406b18
  4026a4:	004020b9 	.word	0x004020b9
  4026a8:	0040258d 	.word	0x0040258d
  4026ac:	00402571 	.word	0x00402571
  4026b0:	004026c1 	.word	0x004026c1
  4026b4:	20400000 	.word	0x20400000
  4026b8:	004025a9 	.word	0x004025a9
  4026bc:	004025c5 	.word	0x004025c5

004026c0 <_dac_write_protection_disable>:
 * \internal Disable DAC write protection
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _dac_write_protection_disable(void *const hw)
{
  4026c0:	b580      	push	{r7, lr}
  4026c2:	b082      	sub	sp, #8
  4026c4:	af00      	add	r7, sp, #0
  4026c6:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4026c8:	687b      	ldr	r3, [r7, #4]
  4026ca:	2b00      	cmp	r3, #0
  4026cc:	bf14      	ite	ne
  4026ce:	2301      	movne	r3, #1
  4026d0:	2300      	moveq	r3, #0
  4026d2:	b2db      	uxtb	r3, r3
  4026d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
  4026d8:	4905      	ldr	r1, [pc, #20]	; (4026f0 <_dac_write_protection_disable+0x30>)
  4026da:	4618      	mov	r0, r3
  4026dc:	4b05      	ldr	r3, [pc, #20]	; (4026f4 <_dac_write_protection_disable+0x34>)
  4026de:	4798      	blx	r3
	hri_dacc_write_WPMR_reg(hw, (hri_dacc_wpmr_reg_t)DACC_WPMR_WPKEY_PASSWD);
  4026e0:	4905      	ldr	r1, [pc, #20]	; (4026f8 <_dac_write_protection_disable+0x38>)
  4026e2:	6878      	ldr	r0, [r7, #4]
  4026e4:	4b05      	ldr	r3, [pc, #20]	; (4026fc <_dac_write_protection_disable+0x3c>)
  4026e6:	4798      	blx	r3
}
  4026e8:	bf00      	nop
  4026ea:	3708      	adds	r7, #8
  4026ec:	46bd      	mov	sp, r7
  4026ee:	bd80      	pop	{r7, pc}
  4026f0:	00406b18 	.word	0x00406b18
  4026f4:	004020b9 	.word	0x004020b9
  4026f8:	44414300 	.word	0x44414300
  4026fc:	004025e1 	.word	0x004025e1

00402700 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402700:	b480      	push	{r7}
  402702:	b083      	sub	sp, #12
  402704:	af00      	add	r7, sp, #0
  402706:	4603      	mov	r3, r0
  402708:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40270a:	4909      	ldr	r1, [pc, #36]	; (402730 <NVIC_EnableIRQ+0x30>)
  40270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402710:	095b      	lsrs	r3, r3, #5
  402712:	79fa      	ldrb	r2, [r7, #7]
  402714:	f002 021f 	and.w	r2, r2, #31
  402718:	2001      	movs	r0, #1
  40271a:	fa00 f202 	lsl.w	r2, r0, r2
  40271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402722:	bf00      	nop
  402724:	370c      	adds	r7, #12
  402726:	46bd      	mov	sp, r7
  402728:	f85d 7b04 	ldr.w	r7, [sp], #4
  40272c:	4770      	bx	lr
  40272e:	bf00      	nop
  402730:	e000e100 	.word	0xe000e100

00402734 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  402734:	b480      	push	{r7}
  402736:	b083      	sub	sp, #12
  402738:	af00      	add	r7, sp, #0
  40273a:	4603      	mov	r3, r0
  40273c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40273e:	4909      	ldr	r1, [pc, #36]	; (402764 <NVIC_DisableIRQ+0x30>)
  402740:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402744:	095b      	lsrs	r3, r3, #5
  402746:	79fa      	ldrb	r2, [r7, #7]
  402748:	f002 021f 	and.w	r2, r2, #31
  40274c:	2001      	movs	r0, #1
  40274e:	fa00 f202 	lsl.w	r2, r0, r2
  402752:	3320      	adds	r3, #32
  402754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402758:	bf00      	nop
  40275a:	370c      	adds	r7, #12
  40275c:	46bd      	mov	sp, r7
  40275e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402762:	4770      	bx	lr
  402764:	e000e100 	.word	0xe000e100

00402768 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  402768:	b480      	push	{r7}
  40276a:	b083      	sub	sp, #12
  40276c:	af00      	add	r7, sp, #0
  40276e:	4603      	mov	r3, r0
  402770:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402772:	4909      	ldr	r1, [pc, #36]	; (402798 <NVIC_ClearPendingIRQ+0x30>)
  402774:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402778:	095b      	lsrs	r3, r3, #5
  40277a:	79fa      	ldrb	r2, [r7, #7]
  40277c:	f002 021f 	and.w	r2, r2, #31
  402780:	2001      	movs	r0, #1
  402782:	fa00 f202 	lsl.w	r2, r0, r2
  402786:	3360      	adds	r3, #96	; 0x60
  402788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40278c:	bf00      	nop
  40278e:	370c      	adds	r7, #12
  402790:	46bd      	mov	sp, r7
  402792:	f85d 7b04 	ldr.w	r7, [sp], #4
  402796:	4770      	bx	lr
  402798:	e000e100 	.word	0xe000e100

0040279c <hri_pio_set_IMR_reg>:
{
  40279c:	b480      	push	{r7}
  40279e:	b083      	sub	sp, #12
  4027a0:	af00      	add	r7, sp, #0
  4027a2:	6078      	str	r0, [r7, #4]
  4027a4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IER = mask;
  4027a6:	687b      	ldr	r3, [r7, #4]
  4027a8:	683a      	ldr	r2, [r7, #0]
  4027aa:	641a      	str	r2, [r3, #64]	; 0x40
}
  4027ac:	bf00      	nop
  4027ae:	370c      	adds	r7, #12
  4027b0:	46bd      	mov	sp, r7
  4027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027b6:	4770      	bx	lr

004027b8 <hri_pio_read_IMR_reg>:
{
  4027b8:	b480      	push	{r7}
  4027ba:	b083      	sub	sp, #12
  4027bc:	af00      	add	r7, sp, #0
  4027be:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_IMR;
  4027c0:	687b      	ldr	r3, [r7, #4]
  4027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4027c4:	4618      	mov	r0, r3
  4027c6:	370c      	adds	r7, #12
  4027c8:	46bd      	mov	sp, r7
  4027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027ce:	4770      	bx	lr

004027d0 <hri_pio_clear_IMR_reg>:
{
  4027d0:	b480      	push	{r7}
  4027d2:	b083      	sub	sp, #12
  4027d4:	af00      	add	r7, sp, #0
  4027d6:	6078      	str	r0, [r7, #4]
  4027d8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IDR = mask;
  4027da:	687b      	ldr	r3, [r7, #4]
  4027dc:	683a      	ldr	r2, [r7, #0]
  4027de:	645a      	str	r2, [r3, #68]	; 0x44
}
  4027e0:	bf00      	nop
  4027e2:	370c      	adds	r7, #12
  4027e4:	46bd      	mov	sp, r7
  4027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027ea:	4770      	bx	lr

004027ec <hri_pio_set_AIMMR_reg>:
{
  4027ec:	b480      	push	{r7}
  4027ee:	b083      	sub	sp, #12
  4027f0:	af00      	add	r7, sp, #0
  4027f2:	6078      	str	r0, [r7, #4]
  4027f4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_AIMER = mask;
  4027f6:	687b      	ldr	r3, [r7, #4]
  4027f8:	683a      	ldr	r2, [r7, #0]
  4027fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
  4027fe:	bf00      	nop
  402800:	370c      	adds	r7, #12
  402802:	46bd      	mov	sp, r7
  402804:	f85d 7b04 	ldr.w	r7, [sp], #4
  402808:	4770      	bx	lr

0040280a <hri_pio_set_ELSR_reg>:
{
  40280a:	b480      	push	{r7}
  40280c:	b083      	sub	sp, #12
  40280e:	af00      	add	r7, sp, #0
  402810:	6078      	str	r0, [r7, #4]
  402812:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_LSR = mask;
  402814:	687b      	ldr	r3, [r7, #4]
  402816:	683a      	ldr	r2, [r7, #0]
  402818:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40281c:	bf00      	nop
  40281e:	370c      	adds	r7, #12
  402820:	46bd      	mov	sp, r7
  402822:	f85d 7b04 	ldr.w	r7, [sp], #4
  402826:	4770      	bx	lr

00402828 <hri_pio_clear_ELSR_reg>:
{
  402828:	b480      	push	{r7}
  40282a:	b083      	sub	sp, #12
  40282c:	af00      	add	r7, sp, #0
  40282e:	6078      	str	r0, [r7, #4]
  402830:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ESR = mask;
  402832:	687b      	ldr	r3, [r7, #4]
  402834:	683a      	ldr	r2, [r7, #0]
  402836:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
  40283a:	bf00      	nop
  40283c:	370c      	adds	r7, #12
  40283e:	46bd      	mov	sp, r7
  402840:	f85d 7b04 	ldr.w	r7, [sp], #4
  402844:	4770      	bx	lr

00402846 <hri_pio_set_FRLHSR_reg>:
{
  402846:	b480      	push	{r7}
  402848:	b083      	sub	sp, #12
  40284a:	af00      	add	r7, sp, #0
  40284c:	6078      	str	r0, [r7, #4]
  40284e:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_REHLSR = mask;
  402850:	687b      	ldr	r3, [r7, #4]
  402852:	683a      	ldr	r2, [r7, #0]
  402854:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
  402858:	bf00      	nop
  40285a:	370c      	adds	r7, #12
  40285c:	46bd      	mov	sp, r7
  40285e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402862:	4770      	bx	lr

00402864 <hri_pio_clear_FRLHSR_reg>:
{
  402864:	b480      	push	{r7}
  402866:	b083      	sub	sp, #12
  402868:	af00      	add	r7, sp, #0
  40286a:	6078      	str	r0, [r7, #4]
  40286c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_FELLSR = mask;
  40286e:	687b      	ldr	r3, [r7, #4]
  402870:	683a      	ldr	r2, [r7, #0]
  402872:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
  402876:	bf00      	nop
  402878:	370c      	adds	r7, #12
  40287a:	46bd      	mov	sp, r7
  40287c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402880:	4770      	bx	lr

00402882 <hri_pio_read_ISR_reg>:
{
  402882:	b480      	push	{r7}
  402884:	b083      	sub	sp, #12
  402886:	af00      	add	r7, sp, #0
  402888:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_ISR;
  40288a:	687b      	ldr	r3, [r7, #4]
  40288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40288e:	4618      	mov	r0, r3
  402890:	370c      	adds	r7, #12
  402892:	46bd      	mov	sp, r7
  402894:	f85d 7b04 	ldr.w	r7, [sp], #4
  402898:	4770      	bx	lr

0040289a <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  40289a:	b480      	push	{r7}
  40289c:	b087      	sub	sp, #28
  40289e:	af00      	add	r7, sp, #0
  4028a0:	6078      	str	r0, [r7, #4]
  4028a2:	460b      	mov	r3, r1
  4028a4:	70fb      	strb	r3, [r7, #3]
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  4028a6:	2300      	movs	r3, #0
  4028a8:	617b      	str	r3, [r7, #20]
  4028aa:	e01e      	b.n	4028ea <_ffs+0x50>
		bit = 1;
  4028ac:	2301      	movs	r3, #1
  4028ae:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4028b0:	2300      	movs	r3, #0
  4028b2:	613b      	str	r3, [r7, #16]
  4028b4:	e013      	b.n	4028de <_ffs+0x44>
			if (v[i] & bit) {
  4028b6:	697b      	ldr	r3, [r7, #20]
  4028b8:	009b      	lsls	r3, r3, #2
  4028ba:	687a      	ldr	r2, [r7, #4]
  4028bc:	4413      	add	r3, r2
  4028be:	681a      	ldr	r2, [r3, #0]
  4028c0:	68fb      	ldr	r3, [r7, #12]
  4028c2:	4013      	ands	r3, r2
  4028c4:	2b00      	cmp	r3, #0
  4028c6:	d004      	beq.n	4028d2 <_ffs+0x38>
				return i * 32 + j;
  4028c8:	697b      	ldr	r3, [r7, #20]
  4028ca:	015a      	lsls	r2, r3, #5
  4028cc:	693b      	ldr	r3, [r7, #16]
  4028ce:	4413      	add	r3, r2
  4028d0:	e011      	b.n	4028f6 <_ffs+0x5c>
			}
			bit <<= 1;
  4028d2:	68fb      	ldr	r3, [r7, #12]
  4028d4:	005b      	lsls	r3, r3, #1
  4028d6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4028d8:	693b      	ldr	r3, [r7, #16]
  4028da:	3301      	adds	r3, #1
  4028dc:	613b      	str	r3, [r7, #16]
  4028de:	693b      	ldr	r3, [r7, #16]
  4028e0:	2b1f      	cmp	r3, #31
  4028e2:	d9e8      	bls.n	4028b6 <_ffs+0x1c>
	for (i = 0; i < len; i++) {
  4028e4:	697b      	ldr	r3, [r7, #20]
  4028e6:	3301      	adds	r3, #1
  4028e8:	617b      	str	r3, [r7, #20]
  4028ea:	78fa      	ldrb	r2, [r7, #3]
  4028ec:	697b      	ldr	r3, [r7, #20]
  4028ee:	429a      	cmp	r2, r3
  4028f0:	d8dc      	bhi.n	4028ac <_ffs+0x12>
		}
	}

	return -1;
  4028f2:	f04f 33ff 	mov.w	r3, #4294967295
}
  4028f6:	4618      	mov	r0, r3
  4028f8:	371c      	adds	r7, #28
  4028fa:	46bd      	mov	sp, r7
  4028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402900:	4770      	bx	lr
	...

00402904 <_get_hardware_instance>:
 * \param[in] pin The PIO pin
 *
 * \return The instance of PIO hardware
 */
static inline void *_get_hardware_instance(const uint8_t pin)
{
  402904:	b580      	push	{r7, lr}
  402906:	b082      	sub	sp, #8
  402908:	af00      	add	r7, sp, #0
  40290a:	4603      	mov	r3, r0
  40290c:	71fb      	strb	r3, [r7, #7]
	ASSERT(pin < 160);
  40290e:	79fb      	ldrb	r3, [r7, #7]
  402910:	2b9f      	cmp	r3, #159	; 0x9f
  402912:	bf94      	ite	ls
  402914:	2301      	movls	r3, #1
  402916:	2300      	movhi	r3, #0
  402918:	b2db      	uxtb	r3, r3
  40291a:	22b4      	movs	r2, #180	; 0xb4
  40291c:	4907      	ldr	r1, [pc, #28]	; (40293c <_get_hardware_instance+0x38>)
  40291e:	4618      	mov	r0, r3
  402920:	4b07      	ldr	r3, [pc, #28]	; (402940 <_get_hardware_instance+0x3c>)
  402922:	4798      	blx	r3

	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  402924:	79fb      	ldrb	r3, [r7, #7]
  402926:	095b      	lsrs	r3, r3, #5
  402928:	b2db      	uxtb	r3, r3
  40292a:	025b      	lsls	r3, r3, #9
  40292c:	461a      	mov	r2, r3
  40292e:	4b05      	ldr	r3, [pc, #20]	; (402944 <_get_hardware_instance+0x40>)
  402930:	4413      	add	r3, r2
}
  402932:	4618      	mov	r0, r3
  402934:	3708      	adds	r7, #8
  402936:	46bd      	mov	sp, r7
  402938:	bd80      	pop	{r7, pc}
  40293a:	bf00      	nop
  40293c:	00406b4c 	.word	0x00406b4c
  402940:	004020b9 	.word	0x004020b9
  402944:	400e0e00 	.word	0x400e0e00

00402948 <_pio_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of hardware instance
 */
static uint8_t _pio_get_hardware_index(const void *const hw)
{
  402948:	b580      	push	{r7, lr}
  40294a:	b082      	sub	sp, #8
  40294c:	af00      	add	r7, sp, #0
  40294e:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  402950:	687b      	ldr	r3, [r7, #4]
  402952:	2b00      	cmp	r3, #0
  402954:	bf14      	ite	ne
  402956:	2301      	movne	r3, #1
  402958:	2300      	moveq	r3, #0
  40295a:	b2db      	uxtb	r3, r3
  40295c:	22c3      	movs	r2, #195	; 0xc3
  40295e:	4906      	ldr	r1, [pc, #24]	; (402978 <_pio_get_hardware_index+0x30>)
  402960:	4618      	mov	r0, r3
  402962:	4b06      	ldr	r3, [pc, #24]	; (40297c <_pio_get_hardware_index+0x34>)
  402964:	4798      	blx	r3

	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  402966:	687a      	ldr	r2, [r7, #4]
  402968:	4b05      	ldr	r3, [pc, #20]	; (402980 <_pio_get_hardware_index+0x38>)
  40296a:	4413      	add	r3, r2
  40296c:	0a5b      	lsrs	r3, r3, #9
  40296e:	b2db      	uxtb	r3, r3
}
  402970:	4618      	mov	r0, r3
  402972:	3708      	adds	r7, #8
  402974:	46bd      	mov	sp, r7
  402976:	bd80      	pop	{r7, pc}
  402978:	00406b4c 	.word	0x00406b4c
  40297c:	004020b9 	.word	0x004020b9
  402980:	bff1f200 	.word	0xbff1f200

00402984 <_pio_get_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given PIO hardware instance
 */
static int8_t _pio_get_index(const void *const hw)
{
  402984:	b580      	push	{r7, lr}
  402986:	b084      	sub	sp, #16
  402988:	af00      	add	r7, sp, #0
  40298a:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  40298c:	687b      	ldr	r3, [r7, #4]
  40298e:	2b00      	cmp	r3, #0
  402990:	bf14      	ite	ne
  402992:	2301      	movne	r3, #1
  402994:	2300      	moveq	r3, #0
  402996:	b2db      	uxtb	r3, r3
  402998:	22d1      	movs	r2, #209	; 0xd1
  40299a:	4913      	ldr	r1, [pc, #76]	; (4029e8 <_pio_get_index+0x64>)
  40299c:	4618      	mov	r0, r3
  40299e:	4b13      	ldr	r3, [pc, #76]	; (4029ec <_pio_get_index+0x68>)
  4029a0:	4798      	blx	r3

	uint8_t offset = _pio_get_hardware_index(hw);
  4029a2:	6878      	ldr	r0, [r7, #4]
  4029a4:	4b12      	ldr	r3, [pc, #72]	; (4029f0 <_pio_get_index+0x6c>)
  4029a6:	4798      	blx	r3
  4029a8:	4603      	mov	r3, r0
  4029aa:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4029ac:	2300      	movs	r3, #0
  4029ae:	73fb      	strb	r3, [r7, #15]
  4029b0:	e010      	b.n	4029d4 <_pio_get_index+0x50>
		if (_ext_irq[i].number == offset) {
  4029b2:	7bfa      	ldrb	r2, [r7, #15]
  4029b4:	490f      	ldr	r1, [pc, #60]	; (4029f4 <_pio_get_index+0x70>)
  4029b6:	4613      	mov	r3, r2
  4029b8:	00db      	lsls	r3, r3, #3
  4029ba:	1a9b      	subs	r3, r3, r2
  4029bc:	009b      	lsls	r3, r3, #2
  4029be:	440b      	add	r3, r1
  4029c0:	781b      	ldrb	r3, [r3, #0]
  4029c2:	7bba      	ldrb	r2, [r7, #14]
  4029c4:	429a      	cmp	r2, r3
  4029c6:	d102      	bne.n	4029ce <_pio_get_index+0x4a>
			return i;
  4029c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4029cc:	e007      	b.n	4029de <_pio_get_index+0x5a>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4029ce:	7bfb      	ldrb	r3, [r7, #15]
  4029d0:	3301      	adds	r3, #1
  4029d2:	73fb      	strb	r3, [r7, #15]
  4029d4:	7bfb      	ldrb	r3, [r7, #15]
  4029d6:	2b00      	cmp	r3, #0
  4029d8:	d0eb      	beq.n	4029b2 <_pio_get_index+0x2e>
		}
	}

	return ERR_INVALID_DATA;
  4029da:	f04f 33ff 	mov.w	r3, #4294967295
}
  4029de:	4618      	mov	r0, r3
  4029e0:	3710      	adds	r7, #16
  4029e2:	46bd      	mov	sp, r7
  4029e4:	bd80      	pop	{r7, pc}
  4029e6:	bf00      	nop
  4029e8:	00406b4c 	.word	0x00406b4c
  4029ec:	004020b9 	.word	0x004020b9
  4029f0:	00402949 	.word	0x00402949
  4029f4:	00406b30 	.word	0x00406b30

004029f8 <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  4029f8:	b580      	push	{r7, lr}
  4029fa:	b088      	sub	sp, #32
  4029fc:	af00      	add	r7, sp, #0
	uint32_t flag_total = 0, flags[5] = {
  4029fe:	2300      	movs	r3, #0
  402a00:	61fb      	str	r3, [r7, #28]
  402a02:	1d3b      	adds	r3, r7, #4
  402a04:	2200      	movs	r2, #0
  402a06:	601a      	str	r2, [r3, #0]
  402a08:	605a      	str	r2, [r3, #4]
  402a0a:	609a      	str	r2, [r3, #8]
  402a0c:	60da      	str	r2, [r3, #12]
  402a0e:	611a      	str	r2, [r3, #16]
	                             0,
	                         };
	int8_t pos;

	ASSERT(callback);
  402a10:	4b36      	ldr	r3, [pc, #216]	; (402aec <_ext_irq_handler+0xf4>)
  402a12:	681b      	ldr	r3, [r3, #0]
  402a14:	2b00      	cmp	r3, #0
  402a16:	bf14      	ite	ne
  402a18:	2301      	movne	r3, #1
  402a1a:	2300      	moveq	r3, #0
  402a1c:	b2db      	uxtb	r3, r3
  402a1e:	22e9      	movs	r2, #233	; 0xe9
  402a20:	4933      	ldr	r1, [pc, #204]	; (402af0 <_ext_irq_handler+0xf8>)
  402a22:	4618      	mov	r0, r3
  402a24:	4b33      	ldr	r3, [pc, #204]	; (402af4 <_ext_irq_handler+0xfc>)
  402a26:	4798      	blx	r3
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
  402a28:	4833      	ldr	r0, [pc, #204]	; (402af8 <_ext_irq_handler+0x100>)
  402a2a:	4b34      	ldr	r3, [pc, #208]	; (402afc <_ext_irq_handler+0x104>)
  402a2c:	4798      	blx	r3
  402a2e:	4603      	mov	r3, r0
  402a30:	60bb      	str	r3, [r7, #8]
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  402a32:	4831      	ldr	r0, [pc, #196]	; (402af8 <_ext_irq_handler+0x100>)
  402a34:	4b32      	ldr	r3, [pc, #200]	; (402b00 <_ext_irq_handler+0x108>)
  402a36:	4798      	blx	r3
  402a38:	4602      	mov	r2, r0
  402a3a:	68bb      	ldr	r3, [r7, #8]
  402a3c:	4013      	ands	r3, r2
  402a3e:	60bb      	str	r3, [r7, #8]
	flag_total |= flags[1];
  402a40:	68bb      	ldr	r3, [r7, #8]
  402a42:	69fa      	ldr	r2, [r7, #28]
  402a44:	4313      	orrs	r3, r2
  402a46:	61fb      	str	r3, [r7, #28]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  402a48:	e048      	b.n	402adc <_ext_irq_handler+0xe4>
		pos = _ffs(flags, 5);
  402a4a:	1d3b      	adds	r3, r7, #4
  402a4c:	2105      	movs	r1, #5
  402a4e:	4618      	mov	r0, r3
  402a50:	4b2c      	ldr	r3, [pc, #176]	; (402b04 <_ext_irq_handler+0x10c>)
  402a52:	4798      	blx	r3
  402a54:	4603      	mov	r3, r0
  402a56:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  402a58:	e029      	b.n	402aae <_ext_irq_handler+0xb6>
			callback(pos);
  402a5a:	4b24      	ldr	r3, [pc, #144]	; (402aec <_ext_irq_handler+0xf4>)
  402a5c:	681b      	ldr	r3, [r3, #0]
  402a5e:	f997 201b 	ldrsb.w	r2, [r7, #27]
  402a62:	4610      	mov	r0, r2
  402a64:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  402a66:	f997 301b 	ldrsb.w	r3, [r7, #27]
  402a6a:	115b      	asrs	r3, r3, #5
  402a6c:	b25b      	sxtb	r3, r3
  402a6e:	4618      	mov	r0, r3
  402a70:	f997 301b 	ldrsb.w	r3, [r7, #27]
  402a74:	115b      	asrs	r3, r3, #5
  402a76:	b25b      	sxtb	r3, r3
  402a78:	009b      	lsls	r3, r3, #2
  402a7a:	f107 0220 	add.w	r2, r7, #32
  402a7e:	4413      	add	r3, r2
  402a80:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  402a84:	7efa      	ldrb	r2, [r7, #27]
  402a86:	f002 021f 	and.w	r2, r2, #31
  402a8a:	2101      	movs	r1, #1
  402a8c:	fa01 f202 	lsl.w	r2, r1, r2
  402a90:	43d2      	mvns	r2, r2
  402a92:	401a      	ands	r2, r3
  402a94:	0083      	lsls	r3, r0, #2
  402a96:	f107 0120 	add.w	r1, r7, #32
  402a9a:	440b      	add	r3, r1
  402a9c:	f843 2c1c 	str.w	r2, [r3, #-28]
			pos = _ffs(flags, 5);
  402aa0:	1d3b      	adds	r3, r7, #4
  402aa2:	2105      	movs	r1, #5
  402aa4:	4618      	mov	r0, r3
  402aa6:	4b17      	ldr	r3, [pc, #92]	; (402b04 <_ext_irq_handler+0x10c>)
  402aa8:	4798      	blx	r3
  402aaa:	4603      	mov	r3, r0
  402aac:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  402aae:	f997 301b 	ldrsb.w	r3, [r7, #27]
  402ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
  402ab6:	d1d0      	bne.n	402a5a <_ext_irq_handler+0x62>
		}
		flag_total = 0;
  402ab8:	2300      	movs	r3, #0
  402aba:	61fb      	str	r3, [r7, #28]
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
  402abc:	480e      	ldr	r0, [pc, #56]	; (402af8 <_ext_irq_handler+0x100>)
  402abe:	4b0f      	ldr	r3, [pc, #60]	; (402afc <_ext_irq_handler+0x104>)
  402ac0:	4798      	blx	r3
  402ac2:	4603      	mov	r3, r0
  402ac4:	60bb      	str	r3, [r7, #8]
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  402ac6:	480c      	ldr	r0, [pc, #48]	; (402af8 <_ext_irq_handler+0x100>)
  402ac8:	4b0d      	ldr	r3, [pc, #52]	; (402b00 <_ext_irq_handler+0x108>)
  402aca:	4798      	blx	r3
  402acc:	4602      	mov	r2, r0
  402ace:	68bb      	ldr	r3, [r7, #8]
  402ad0:	4013      	ands	r3, r2
  402ad2:	60bb      	str	r3, [r7, #8]
		flag_total |= flags[1];
  402ad4:	68bb      	ldr	r3, [r7, #8]
  402ad6:	69fa      	ldr	r2, [r7, #28]
  402ad8:	4313      	orrs	r3, r2
  402ada:	61fb      	str	r3, [r7, #28]
	while (flag_total) {
  402adc:	69fb      	ldr	r3, [r7, #28]
  402ade:	2b00      	cmp	r3, #0
  402ae0:	d1b3      	bne.n	402a4a <_ext_irq_handler+0x52>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  402ae2:	bf00      	nop
  402ae4:	3720      	adds	r7, #32
  402ae6:	46bd      	mov	sp, r7
  402ae8:	bd80      	pop	{r7, pc}
  402aea:	bf00      	nop
  402aec:	20401168 	.word	0x20401168
  402af0:	00406b4c 	.word	0x00406b4c
  402af4:	004020b9 	.word	0x004020b9
  402af8:	400e1000 	.word	0x400e1000
  402afc:	00402883 	.word	0x00402883
  402b00:	004027b9 	.word	0x004027b9
  402b04:	0040289b 	.word	0x0040289b

00402b08 <PIOB_Handler>:

void PIOB_Handler(void)
{
  402b08:	b580      	push	{r7, lr}
  402b0a:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  402b0c:	4b01      	ldr	r3, [pc, #4]	; (402b14 <PIOB_Handler+0xc>)
  402b0e:	4798      	blx	r3
}
  402b10:	bf00      	nop
  402b12:	bd80      	pop	{r7, pc}
  402b14:	004029f9 	.word	0x004029f9

00402b18 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  402b18:	b580      	push	{r7, lr}
  402b1a:	b084      	sub	sp, #16
  402b1c:	af00      	add	r7, sp, #0
  402b1e:	6078      	str	r0, [r7, #4]
	int8_t i;

	ASSERT(hw);
  402b20:	687b      	ldr	r3, [r7, #4]
  402b22:	2b00      	cmp	r3, #0
  402b24:	bf14      	ite	ne
  402b26:	2301      	movne	r3, #1
  402b28:	2300      	moveq	r3, #0
  402b2a:	b2db      	uxtb	r3, r3
  402b2c:	f240 1245 	movw	r2, #325	; 0x145
  402b30:	4933      	ldr	r1, [pc, #204]	; (402c00 <_pio_init+0xe8>)
  402b32:	4618      	mov	r0, r3
  402b34:	4b33      	ldr	r3, [pc, #204]	; (402c04 <_pio_init+0xec>)
  402b36:	4798      	blx	r3

	i = _pio_get_index(hw);
  402b38:	6878      	ldr	r0, [r7, #4]
  402b3a:	4b33      	ldr	r3, [pc, #204]	; (402c08 <_pio_init+0xf0>)
  402b3c:	4798      	blx	r3
  402b3e:	4603      	mov	r3, r0
  402b40:	73fb      	strb	r3, [r7, #15]
	if (i < 0) {
  402b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402b46:	2b00      	cmp	r3, #0
  402b48:	da02      	bge.n	402b50 <_pio_init+0x38>
		return ERR_DENIED;
  402b4a:	f06f 0310 	mvn.w	r3, #16
  402b4e:	e053      	b.n	402bf8 <_pio_init+0xe0>
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  402b50:	f997 200f 	ldrsb.w	r2, [r7, #15]
  402b54:	492d      	ldr	r1, [pc, #180]	; (402c0c <_pio_init+0xf4>)
  402b56:	4613      	mov	r3, r2
  402b58:	00db      	lsls	r3, r3, #3
  402b5a:	1a9b      	subs	r3, r3, r2
  402b5c:	009b      	lsls	r3, r3, #2
  402b5e:	440b      	add	r3, r1
  402b60:	3308      	adds	r3, #8
  402b62:	681b      	ldr	r3, [r3, #0]
  402b64:	4619      	mov	r1, r3
  402b66:	6878      	ldr	r0, [r7, #4]
  402b68:	4b29      	ldr	r3, [pc, #164]	; (402c10 <_pio_init+0xf8>)
  402b6a:	4798      	blx	r3
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  402b6c:	f997 200f 	ldrsb.w	r2, [r7, #15]
  402b70:	4926      	ldr	r1, [pc, #152]	; (402c0c <_pio_init+0xf4>)
  402b72:	4613      	mov	r3, r2
  402b74:	00db      	lsls	r3, r3, #3
  402b76:	1a9b      	subs	r3, r3, r2
  402b78:	009b      	lsls	r3, r3, #2
  402b7a:	440b      	add	r3, r1
  402b7c:	330c      	adds	r3, #12
  402b7e:	681b      	ldr	r3, [r3, #0]
  402b80:	4619      	mov	r1, r3
  402b82:	6878      	ldr	r0, [r7, #4]
  402b84:	4b23      	ldr	r3, [pc, #140]	; (402c14 <_pio_init+0xfc>)
  402b86:	4798      	blx	r3
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  402b88:	f997 200f 	ldrsb.w	r2, [r7, #15]
  402b8c:	491f      	ldr	r1, [pc, #124]	; (402c0c <_pio_init+0xf4>)
  402b8e:	4613      	mov	r3, r2
  402b90:	00db      	lsls	r3, r3, #3
  402b92:	1a9b      	subs	r3, r3, r2
  402b94:	009b      	lsls	r3, r3, #2
  402b96:	440b      	add	r3, r1
  402b98:	3310      	adds	r3, #16
  402b9a:	681b      	ldr	r3, [r3, #0]
  402b9c:	4619      	mov	r1, r3
  402b9e:	6878      	ldr	r0, [r7, #4]
  402ba0:	4b1d      	ldr	r3, [pc, #116]	; (402c18 <_pio_init+0x100>)
  402ba2:	4798      	blx	r3
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  402ba4:	2300      	movs	r3, #0
  402ba6:	4619      	mov	r1, r3
  402ba8:	6878      	ldr	r0, [r7, #4]
  402baa:	4b1c      	ldr	r3, [pc, #112]	; (402c1c <_pio_init+0x104>)
  402bac:	4798      	blx	r3
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  402bae:	f997 200f 	ldrsb.w	r2, [r7, #15]
  402bb2:	4916      	ldr	r1, [pc, #88]	; (402c0c <_pio_init+0xf4>)
  402bb4:	4613      	mov	r3, r2
  402bb6:	00db      	lsls	r3, r3, #3
  402bb8:	1a9b      	subs	r3, r3, r2
  402bba:	009b      	lsls	r3, r3, #2
  402bbc:	440b      	add	r3, r1
  402bbe:	3314      	adds	r3, #20
  402bc0:	681b      	ldr	r3, [r3, #0]
  402bc2:	4619      	mov	r1, r3
  402bc4:	6878      	ldr	r0, [r7, #4]
  402bc6:	4b16      	ldr	r3, [pc, #88]	; (402c20 <_pio_init+0x108>)
  402bc8:	4798      	blx	r3

	i = _pio_get_hardware_index(hw) + PIOA_IRQn;
  402bca:	6878      	ldr	r0, [r7, #4]
  402bcc:	4b15      	ldr	r3, [pc, #84]	; (402c24 <_pio_init+0x10c>)
  402bce:	4798      	blx	r3
  402bd0:	4603      	mov	r3, r0
  402bd2:	330a      	adds	r3, #10
  402bd4:	b2db      	uxtb	r3, r3
  402bd6:	73fb      	strb	r3, [r7, #15]
	NVIC_DisableIRQ(i);
  402bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402bdc:	4618      	mov	r0, r3
  402bde:	4b12      	ldr	r3, [pc, #72]	; (402c28 <_pio_init+0x110>)
  402be0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(i);
  402be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402be6:	4618      	mov	r0, r3
  402be8:	4b10      	ldr	r3, [pc, #64]	; (402c2c <_pio_init+0x114>)
  402bea:	4798      	blx	r3
	NVIC_EnableIRQ(i);
  402bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402bf0:	4618      	mov	r0, r3
  402bf2:	4b0f      	ldr	r3, [pc, #60]	; (402c30 <_pio_init+0x118>)
  402bf4:	4798      	blx	r3

	return ERR_NONE;
  402bf6:	2300      	movs	r3, #0
}
  402bf8:	4618      	mov	r0, r3
  402bfa:	3710      	adds	r7, #16
  402bfc:	46bd      	mov	sp, r7
  402bfe:	bd80      	pop	{r7, pc}
  402c00:	00406b4c 	.word	0x00406b4c
  402c04:	004020b9 	.word	0x004020b9
  402c08:	00402985 	.word	0x00402985
  402c0c:	00406b30 	.word	0x00406b30
  402c10:	004027ed 	.word	0x004027ed
  402c14:	00402829 	.word	0x00402829
  402c18:	0040280b 	.word	0x0040280b
  402c1c:	00402865 	.word	0x00402865
  402c20:	00402847 	.word	0x00402847
  402c24:	00402949 	.word	0x00402949
  402c28:	00402735 	.word	0x00402735
  402c2c:	00402769 	.word	0x00402769
  402c30:	00402701 	.word	0x00402701

00402c34 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  402c34:	b580      	push	{r7, lr}
  402c36:	b082      	sub	sp, #8
  402c38:	af00      	add	r7, sp, #0
  402c3a:	6078      	str	r0, [r7, #4]
#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  402c3c:	4805      	ldr	r0, [pc, #20]	; (402c54 <_ext_irq_init+0x20>)
  402c3e:	4b06      	ldr	r3, [pc, #24]	; (402c58 <_ext_irq_init+0x24>)
  402c40:	4798      	blx	r3

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  402c42:	4a06      	ldr	r2, [pc, #24]	; (402c5c <_ext_irq_init+0x28>)
  402c44:	687b      	ldr	r3, [r7, #4]
  402c46:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
  402c48:	2300      	movs	r3, #0
}
  402c4a:	4618      	mov	r0, r3
  402c4c:	3708      	adds	r7, #8
  402c4e:	46bd      	mov	sp, r7
  402c50:	bd80      	pop	{r7, pc}
  402c52:	bf00      	nop
  402c54:	400e1000 	.word	0x400e1000
  402c58:	00402b19 	.word	0x00402b19
  402c5c:	20401168 	.word	0x20401168

00402c60 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  402c60:	b580      	push	{r7, lr}
  402c62:	b084      	sub	sp, #16
  402c64:	af00      	add	r7, sp, #0
  402c66:	6078      	str	r0, [r7, #4]
  402c68:	460b      	mov	r3, r1
  402c6a:	70fb      	strb	r3, [r7, #3]
	void *   hw   = PIOA;
  402c6c:	4b19      	ldr	r3, [pc, #100]	; (402cd4 <_ext_irq_enable+0x74>)
  402c6e:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
  402c70:	2300      	movs	r3, #0
  402c72:	60bb      	str	r3, [r7, #8]

	ASSERT(pin < 160);
  402c74:	687b      	ldr	r3, [r7, #4]
  402c76:	2b9f      	cmp	r3, #159	; 0x9f
  402c78:	bf94      	ite	ls
  402c7a:	2301      	movls	r3, #1
  402c7c:	2300      	movhi	r3, #0
  402c7e:	b2db      	uxtb	r3, r3
  402c80:	f44f 72c9 	mov.w	r2, #402	; 0x192
  402c84:	4914      	ldr	r1, [pc, #80]	; (402cd8 <_ext_irq_enable+0x78>)
  402c86:	4618      	mov	r0, r3
  402c88:	4b14      	ldr	r3, [pc, #80]	; (402cdc <_ext_irq_enable+0x7c>)
  402c8a:	4798      	blx	r3

	hw   = _get_hardware_instance(pin);
  402c8c:	687b      	ldr	r3, [r7, #4]
  402c8e:	b2db      	uxtb	r3, r3
  402c90:	4618      	mov	r0, r3
  402c92:	4b13      	ldr	r3, [pc, #76]	; (402ce0 <_ext_irq_enable+0x80>)
  402c94:	4798      	blx	r3
  402c96:	60f8      	str	r0, [r7, #12]
	temp = pin & 31;
  402c98:	687b      	ldr	r3, [r7, #4]
  402c9a:	f003 031f 	and.w	r3, r3, #31
  402c9e:	60bb      	str	r3, [r7, #8]

	if (enable) {
  402ca0:	78fb      	ldrb	r3, [r7, #3]
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	d008      	beq.n	402cb8 <_ext_irq_enable+0x58>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  402ca6:	2201      	movs	r2, #1
  402ca8:	68bb      	ldr	r3, [r7, #8]
  402caa:	fa02 f303 	lsl.w	r3, r2, r3
  402cae:	4619      	mov	r1, r3
  402cb0:	68f8      	ldr	r0, [r7, #12]
  402cb2:	4b0c      	ldr	r3, [pc, #48]	; (402ce4 <_ext_irq_enable+0x84>)
  402cb4:	4798      	blx	r3
  402cb6:	e007      	b.n	402cc8 <_ext_irq_enable+0x68>
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  402cb8:	2201      	movs	r2, #1
  402cba:	68bb      	ldr	r3, [r7, #8]
  402cbc:	fa02 f303 	lsl.w	r3, r2, r3
  402cc0:	4619      	mov	r1, r3
  402cc2:	68f8      	ldr	r0, [r7, #12]
  402cc4:	4b08      	ldr	r3, [pc, #32]	; (402ce8 <_ext_irq_enable+0x88>)
  402cc6:	4798      	blx	r3
	}

	return ERR_NONE;
  402cc8:	2300      	movs	r3, #0
}
  402cca:	4618      	mov	r0, r3
  402ccc:	3710      	adds	r7, #16
  402cce:	46bd      	mov	sp, r7
  402cd0:	bd80      	pop	{r7, pc}
  402cd2:	bf00      	nop
  402cd4:	400e0e00 	.word	0x400e0e00
  402cd8:	00406b4c 	.word	0x00406b4c
  402cdc:	004020b9 	.word	0x004020b9
  402ce0:	00402905 	.word	0x00402905
  402ce4:	0040279d 	.word	0x0040279d
  402ce8:	004027d1 	.word	0x004027d1

00402cec <hri_pmc_write_CKGR_UCKR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_CKGR_UCKR_reg(const void *const hw, hri_pmc_ckgr_uckr_reg_t data)
{
  402cec:	b480      	push	{r7}
  402cee:	b083      	sub	sp, #12
  402cf0:	af00      	add	r7, sp, #0
  402cf2:	6078      	str	r0, [r7, #4]
  402cf4:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_UCKR = data;
  402cf6:	687b      	ldr	r3, [r7, #4]
  402cf8:	683a      	ldr	r2, [r7, #0]
  402cfa:	61da      	str	r2, [r3, #28]
	PMC_CRITICAL_SECTION_LEAVE();
}
  402cfc:	bf00      	nop
  402cfe:	370c      	adds	r7, #12
  402d00:	46bd      	mov	sp, r7
  402d02:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d06:	4770      	bx	lr

00402d08 <hri_pmc_set_CKGR_MOR_reg>:
	tmp = (tmp & CKGR_MOR_KEY_Msk) >> CKGR_MOR_KEY_Pos;
	return tmp;
}

static inline void hri_pmc_set_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t mask)
{
  402d08:	b480      	push	{r7}
  402d0a:	b083      	sub	sp, #12
  402d0c:	af00      	add	r7, sp, #0
  402d0e:	6078      	str	r0, [r7, #4]
  402d10:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR |= mask;
  402d12:	687b      	ldr	r3, [r7, #4]
  402d14:	6a1a      	ldr	r2, [r3, #32]
  402d16:	683b      	ldr	r3, [r7, #0]
  402d18:	431a      	orrs	r2, r3
  402d1a:	687b      	ldr	r3, [r7, #4]
  402d1c:	621a      	str	r2, [r3, #32]
	PMC_CRITICAL_SECTION_LEAVE();
}
  402d1e:	bf00      	nop
  402d20:	370c      	adds	r7, #12
  402d22:	46bd      	mov	sp, r7
  402d24:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d28:	4770      	bx	lr

00402d2a <hri_pmc_write_CKGR_MOR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t data)
{
  402d2a:	b480      	push	{r7}
  402d2c:	b083      	sub	sp, #12
  402d2e:	af00      	add	r7, sp, #0
  402d30:	6078      	str	r0, [r7, #4]
  402d32:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR = data;
  402d34:	687b      	ldr	r3, [r7, #4]
  402d36:	683a      	ldr	r2, [r7, #0]
  402d38:	621a      	str	r2, [r3, #32]
	PMC_CRITICAL_SECTION_LEAVE();
}
  402d3a:	bf00      	nop
  402d3c:	370c      	adds	r7, #12
  402d3e:	46bd      	mov	sp, r7
  402d40:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d44:	4770      	bx	lr

00402d46 <hri_pmc_read_CKGR_MOR_reg>:
	((Pmc *)hw)->CKGR_MOR ^= mask;
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
  402d46:	b480      	push	{r7}
  402d48:	b083      	sub	sp, #12
  402d4a:	af00      	add	r7, sp, #0
  402d4c:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->CKGR_MOR;
  402d4e:	687b      	ldr	r3, [r7, #4]
  402d50:	6a1b      	ldr	r3, [r3, #32]
}
  402d52:	4618      	mov	r0, r3
  402d54:	370c      	adds	r7, #12
  402d56:	46bd      	mov	sp, r7
  402d58:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d5c:	4770      	bx	lr
	...

00402d60 <hri_pmc_write_CKGR_PLLAR_MULA_bf>:
	tmp = (tmp & CKGR_PLLAR_MULA(mask)) >> CKGR_PLLAR_MULA_Pos;
	return tmp;
}

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
  402d60:	b480      	push	{r7}
  402d62:	b085      	sub	sp, #20
  402d64:	af00      	add	r7, sp, #0
  402d66:	6078      	str	r0, [r7, #4]
  402d68:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402d6a:	687b      	ldr	r3, [r7, #4]
  402d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402d6e:	60fb      	str	r3, [r7, #12]
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402d70:	68fa      	ldr	r2, [r7, #12]
  402d72:	4b09      	ldr	r3, [pc, #36]	; (402d98 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x38>)
  402d74:	4013      	ands	r3, r2
  402d76:	60fb      	str	r3, [r7, #12]
	tmp |= CKGR_PLLAR_MULA(data);
  402d78:	683b      	ldr	r3, [r7, #0]
  402d7a:	041a      	lsls	r2, r3, #16
  402d7c:	4b07      	ldr	r3, [pc, #28]	; (402d9c <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x3c>)
  402d7e:	4013      	ands	r3, r2
  402d80:	68fa      	ldr	r2, [r7, #12]
  402d82:	4313      	orrs	r3, r2
  402d84:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  402d86:	687b      	ldr	r3, [r7, #4]
  402d88:	68fa      	ldr	r2, [r7, #12]
  402d8a:	629a      	str	r2, [r3, #40]	; 0x28
	PMC_CRITICAL_SECTION_LEAVE();
}
  402d8c:	bf00      	nop
  402d8e:	3714      	adds	r7, #20
  402d90:	46bd      	mov	sp, r7
  402d92:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d96:	4770      	bx	lr
  402d98:	f800ffff 	.word	0xf800ffff
  402d9c:	07ff0000 	.word	0x07ff0000

00402da0 <hri_pmc_write_CKGR_PLLAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
  402da0:	b480      	push	{r7}
  402da2:	b083      	sub	sp, #12
  402da4:	af00      	add	r7, sp, #0
  402da6:	6078      	str	r0, [r7, #4]
  402da8:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  402daa:	687b      	ldr	r3, [r7, #4]
  402dac:	683a      	ldr	r2, [r7, #0]
  402dae:	629a      	str	r2, [r3, #40]	; 0x28
	PMC_CRITICAL_SECTION_LEAVE();
}
  402db0:	bf00      	nop
  402db2:	370c      	adds	r7, #12
  402db4:	46bd      	mov	sp, r7
  402db6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402dba:	4770      	bx	lr

00402dbc <hri_pmc_write_MCKR_UPLLDIV2_bit>:
	tmp = (tmp & PMC_MCKR_UPLLDIV2) >> PMC_MCKR_UPLLDIV2_Pos;
	return (bool)tmp;
}

static inline void hri_pmc_write_MCKR_UPLLDIV2_bit(const void *const hw, bool value)
{
  402dbc:	b480      	push	{r7}
  402dbe:	b085      	sub	sp, #20
  402dc0:	af00      	add	r7, sp, #0
  402dc2:	6078      	str	r0, [r7, #4]
  402dc4:	460b      	mov	r3, r1
  402dc6:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402dc8:	687b      	ldr	r3, [r7, #4]
  402dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402dcc:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_UPLLDIV2;
  402dce:	68fb      	ldr	r3, [r7, #12]
  402dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402dd4:	60fb      	str	r3, [r7, #12]
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  402dd6:	78fb      	ldrb	r3, [r7, #3]
  402dd8:	035b      	lsls	r3, r3, #13
  402dda:	461a      	mov	r2, r3
  402ddc:	68fb      	ldr	r3, [r7, #12]
  402dde:	4313      	orrs	r3, r2
  402de0:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  402de2:	687b      	ldr	r3, [r7, #4]
  402de4:	68fa      	ldr	r2, [r7, #12]
  402de6:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  402de8:	bf00      	nop
  402dea:	3714      	adds	r7, #20
  402dec:	46bd      	mov	sp, r7
  402dee:	f85d 7b04 	ldr.w	r7, [sp], #4
  402df2:	4770      	bx	lr

00402df4 <hri_pmc_write_MCKR_CSS_bf>:
	tmp = (tmp & PMC_MCKR_CSS(mask)) >> PMC_MCKR_CSS_Pos;
	return tmp;
}

static inline void hri_pmc_write_MCKR_CSS_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
  402df4:	b480      	push	{r7}
  402df6:	b085      	sub	sp, #20
  402df8:	af00      	add	r7, sp, #0
  402dfa:	6078      	str	r0, [r7, #4]
  402dfc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402dfe:	687b      	ldr	r3, [r7, #4]
  402e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e02:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_CSS_Msk;
  402e04:	68fb      	ldr	r3, [r7, #12]
  402e06:	f023 0303 	bic.w	r3, r3, #3
  402e0a:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_CSS(data);
  402e0c:	683b      	ldr	r3, [r7, #0]
  402e0e:	f003 0303 	and.w	r3, r3, #3
  402e12:	68fa      	ldr	r2, [r7, #12]
  402e14:	4313      	orrs	r3, r2
  402e16:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  402e18:	687b      	ldr	r3, [r7, #4]
  402e1a:	68fa      	ldr	r2, [r7, #12]
  402e1c:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  402e1e:	bf00      	nop
  402e20:	3714      	adds	r7, #20
  402e22:	46bd      	mov	sp, r7
  402e24:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e28:	4770      	bx	lr

00402e2a <hri_pmc_write_MCKR_PRES_bf>:
	tmp = (tmp & PMC_MCKR_PRES(mask)) >> PMC_MCKR_PRES_Pos;
	return tmp;
}

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
  402e2a:	b480      	push	{r7}
  402e2c:	b085      	sub	sp, #20
  402e2e:	af00      	add	r7, sp, #0
  402e30:	6078      	str	r0, [r7, #4]
  402e32:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402e34:	687b      	ldr	r3, [r7, #4]
  402e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e38:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_PRES_Msk;
  402e3a:	68fb      	ldr	r3, [r7, #12]
  402e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402e40:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_PRES(data);
  402e42:	683b      	ldr	r3, [r7, #0]
  402e44:	011b      	lsls	r3, r3, #4
  402e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e4a:	68fa      	ldr	r2, [r7, #12]
  402e4c:	4313      	orrs	r3, r2
  402e4e:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  402e50:	687b      	ldr	r3, [r7, #4]
  402e52:	68fa      	ldr	r2, [r7, #12]
  402e54:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  402e56:	bf00      	nop
  402e58:	3714      	adds	r7, #20
  402e5a:	46bd      	mov	sp, r7
  402e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e60:	4770      	bx	lr

00402e62 <hri_pmc_write_MCKR_MDIV_bf>:
	tmp = (tmp & PMC_MCKR_MDIV(mask)) >> PMC_MCKR_MDIV_Pos;
	return tmp;
}

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
  402e62:	b480      	push	{r7}
  402e64:	b085      	sub	sp, #20
  402e66:	af00      	add	r7, sp, #0
  402e68:	6078      	str	r0, [r7, #4]
  402e6a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402e6c:	687b      	ldr	r3, [r7, #4]
  402e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402e70:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_MDIV_Msk;
  402e72:	68fb      	ldr	r3, [r7, #12]
  402e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402e78:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_MDIV(data);
  402e7a:	683b      	ldr	r3, [r7, #0]
  402e7c:	021b      	lsls	r3, r3, #8
  402e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  402e82:	68fa      	ldr	r2, [r7, #12]
  402e84:	4313      	orrs	r3, r2
  402e86:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  402e88:	687b      	ldr	r3, [r7, #4]
  402e8a:	68fa      	ldr	r2, [r7, #12]
  402e8c:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  402e8e:	bf00      	nop
  402e90:	3714      	adds	r7, #20
  402e92:	46bd      	mov	sp, r7
  402e94:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e98:	4770      	bx	lr

00402e9a <hri_pmc_get_SR_MOSCXTS_bit>:
{
	return ((Pmc *)hw)->PMC_PMMR;
}

static inline bool hri_pmc_get_SR_MOSCXTS_bit(const void *const hw)
{
  402e9a:	b480      	push	{r7}
  402e9c:	b083      	sub	sp, #12
  402e9e:	af00      	add	r7, sp, #0
  402ea0:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  402ea2:	687b      	ldr	r3, [r7, #4]
  402ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402ea6:	f003 0301 	and.w	r3, r3, #1
  402eaa:	2b00      	cmp	r3, #0
  402eac:	bf14      	ite	ne
  402eae:	2301      	movne	r3, #1
  402eb0:	2300      	moveq	r3, #0
  402eb2:	b2db      	uxtb	r3, r3
}
  402eb4:	4618      	mov	r0, r3
  402eb6:	370c      	adds	r7, #12
  402eb8:	46bd      	mov	sp, r7
  402eba:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ebe:	4770      	bx	lr

00402ec0 <hri_pmc_get_SR_LOCKA_bit>:

static inline bool hri_pmc_get_SR_LOCKA_bit(const void *const hw)
{
  402ec0:	b480      	push	{r7}
  402ec2:	b083      	sub	sp, #12
  402ec4:	af00      	add	r7, sp, #0
  402ec6:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  402ec8:	687b      	ldr	r3, [r7, #4]
  402eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402ecc:	f003 0302 	and.w	r3, r3, #2
  402ed0:	2b00      	cmp	r3, #0
  402ed2:	bf14      	ite	ne
  402ed4:	2301      	movne	r3, #1
  402ed6:	2300      	moveq	r3, #0
  402ed8:	b2db      	uxtb	r3, r3
}
  402eda:	4618      	mov	r0, r3
  402edc:	370c      	adds	r7, #12
  402ede:	46bd      	mov	sp, r7
  402ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ee4:	4770      	bx	lr

00402ee6 <hri_pmc_get_SR_MCKRDY_bit>:

static inline bool hri_pmc_get_SR_MCKRDY_bit(const void *const hw)
{
  402ee6:	b480      	push	{r7}
  402ee8:	b083      	sub	sp, #12
  402eea:	af00      	add	r7, sp, #0
  402eec:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  402eee:	687b      	ldr	r3, [r7, #4]
  402ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402ef2:	f003 0308 	and.w	r3, r3, #8
  402ef6:	2b00      	cmp	r3, #0
  402ef8:	bf14      	ite	ne
  402efa:	2301      	movne	r3, #1
  402efc:	2300      	moveq	r3, #0
  402efe:	b2db      	uxtb	r3, r3
}
  402f00:	4618      	mov	r0, r3
  402f02:	370c      	adds	r7, #12
  402f04:	46bd      	mov	sp, r7
  402f06:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f0a:	4770      	bx	lr

00402f0c <hri_pmc_get_SR_LOCKU_bit>:

static inline bool hri_pmc_get_SR_LOCKU_bit(const void *const hw)
{
  402f0c:	b480      	push	{r7}
  402f0e:	b083      	sub	sp, #12
  402f10:	af00      	add	r7, sp, #0
  402f12:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  402f14:	687b      	ldr	r3, [r7, #4]
  402f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402f1c:	2b00      	cmp	r3, #0
  402f1e:	bf14      	ite	ne
  402f20:	2301      	movne	r3, #1
  402f22:	2300      	moveq	r3, #0
  402f24:	b2db      	uxtb	r3, r3
}
  402f26:	4618      	mov	r0, r3
  402f28:	370c      	adds	r7, #12
  402f2a:	46bd      	mov	sp, r7
  402f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f30:	4770      	bx	lr
	...

00402f34 <_pmc_init_sources>:
 * \brief Initializes clock generators
 *
 * All clock sources are running when this function returns.
 */
static void _pmc_init_sources(void)
{
  402f34:	b580      	push	{r7, lr}
  402f36:	b082      	sub	sp, #8
  402f38:	af00      	add	r7, sp, #0
	uint32_t data = 0;
  402f3a:	2300      	movs	r3, #0
  402f3c:	607b      	str	r3, [r7, #4]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402f3e:	4826      	ldr	r0, [pc, #152]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f40:	4b26      	ldr	r3, [pc, #152]	; (402fdc <_pmc_init_sources+0xa8>)
  402f42:	4798      	blx	r3
  402f44:	4603      	mov	r3, r0
  402f46:	f023 0302 	bic.w	r3, r3, #2
  402f4a:	607b      	str	r3, [r7, #4]
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402f4c:	687a      	ldr	r2, [r7, #4]
  402f4e:	4b24      	ldr	r3, [pc, #144]	; (402fe0 <_pmc_init_sources+0xac>)
  402f50:	4313      	orrs	r3, r2
  402f52:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
  402f54:	6879      	ldr	r1, [r7, #4]
  402f56:	4820      	ldr	r0, [pc, #128]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f58:	4b22      	ldr	r3, [pc, #136]	; (402fe4 <_pmc_init_sources+0xb0>)
  402f5a:	4798      	blx	r3
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402f5c:	bf00      	nop
  402f5e:	481e      	ldr	r0, [pc, #120]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f60:	4b21      	ldr	r3, [pc, #132]	; (402fe8 <_pmc_init_sources+0xb4>)
  402f62:	4798      	blx	r3
  402f64:	4603      	mov	r3, r0
  402f66:	f083 0301 	eor.w	r3, r3, #1
  402f6a:	b2db      	uxtb	r3, r3
  402f6c:	2b00      	cmp	r3, #0
  402f6e:	d1f6      	bne.n	402f5e <_pmc_init_sources+0x2a>
		/* Wait until the XTAL to stabilize */
	}
	hri_pmc_set_CKGR_MOR_reg(PMC, CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL);
  402f70:	491e      	ldr	r1, [pc, #120]	; (402fec <_pmc_init_sources+0xb8>)
  402f72:	4819      	ldr	r0, [pc, #100]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f74:	4b1e      	ldr	r3, [pc, #120]	; (402ff0 <_pmc_init_sources+0xbc>)
  402f76:	4798      	blx	r3
#endif
#endif
#endif

#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  402f78:	4b1e      	ldr	r3, [pc, #120]	; (402ff4 <_pmc_init_sources+0xc0>)
  402f7a:	607b      	str	r3, [r7, #4]
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
  402f7c:	2100      	movs	r1, #0
  402f7e:	4816      	ldr	r0, [pc, #88]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f80:	4b1d      	ldr	r3, [pc, #116]	; (402ff8 <_pmc_init_sources+0xc4>)
  402f82:	4798      	blx	r3
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
  402f84:	687b      	ldr	r3, [r7, #4]
  402f86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402f8a:	4619      	mov	r1, r3
  402f8c:	4812      	ldr	r0, [pc, #72]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f8e:	4b1b      	ldr	r3, [pc, #108]	; (402ffc <_pmc_init_sources+0xc8>)
  402f90:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  402f92:	bf00      	nop
  402f94:	4810      	ldr	r0, [pc, #64]	; (402fd8 <_pmc_init_sources+0xa4>)
  402f96:	4b1a      	ldr	r3, [pc, #104]	; (403000 <_pmc_init_sources+0xcc>)
  402f98:	4798      	blx	r3
  402f9a:	4603      	mov	r3, r0
  402f9c:	f083 0301 	eor.w	r3, r3, #1
  402fa0:	b2db      	uxtb	r3, r3
  402fa2:	2b00      	cmp	r3, #0
  402fa4:	d1f6      	bne.n	402f94 <_pmc_init_sources+0x60>
		/* Wait until PLLACK stabilize */
	}
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  402fa6:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  402faa:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
  402fac:	687b      	ldr	r3, [r7, #4]
  402fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402fb2:	4619      	mov	r1, r3
  402fb4:	4808      	ldr	r0, [pc, #32]	; (402fd8 <_pmc_init_sources+0xa4>)
  402fb6:	4b13      	ldr	r3, [pc, #76]	; (403004 <_pmc_init_sources+0xd0>)
  402fb8:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  402fba:	bf00      	nop
  402fbc:	4806      	ldr	r0, [pc, #24]	; (402fd8 <_pmc_init_sources+0xa4>)
  402fbe:	4b12      	ldr	r3, [pc, #72]	; (403008 <_pmc_init_sources+0xd4>)
  402fc0:	4798      	blx	r3
  402fc2:	4603      	mov	r3, r0
  402fc4:	f083 0301 	eor.w	r3, r3, #1
  402fc8:	b2db      	uxtb	r3, r3
  402fca:	2b00      	cmp	r3, #0
  402fcc:	d1f6      	bne.n	402fbc <_pmc_init_sources+0x88>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  402fce:	bf00      	nop
  402fd0:	3708      	adds	r7, #8
  402fd2:	46bd      	mov	sp, r7
  402fd4:	bd80      	pop	{r7, pc}
  402fd6:	bf00      	nop
  402fd8:	400e0600 	.word	0x400e0600
  402fdc:	00402d47 	.word	0x00402d47
  402fe0:	00373e01 	.word	0x00373e01
  402fe4:	00402d2b 	.word	0x00402d2b
  402fe8:	00402e9b 	.word	0x00402e9b
  402fec:	01370000 	.word	0x01370000
  402ff0:	00402d09 	.word	0x00402d09
  402ff4:	00183f01 	.word	0x00183f01
  402ff8:	00402d61 	.word	0x00402d61
  402ffc:	00402da1 	.word	0x00402da1
  403000:	00402ec1 	.word	0x00402ec1
  403004:	00402ced 	.word	0x00402ced
  403008:	00402f0d 	.word	0x00402f0d

0040300c <_pmc_init_master_clock>:
 * \brief Initializes master clock generators
 *
 * Master clock are running when this function returns.
 */
static void _pmc_init_master_clock(void)
{
  40300c:	b580      	push	{r7, lr}
  40300e:	af00      	add	r7, sp, #0
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
  403010:	2101      	movs	r1, #1
  403012:	481c      	ldr	r0, [pc, #112]	; (403084 <_pmc_init_master_clock+0x78>)
  403014:	4b1c      	ldr	r3, [pc, #112]	; (403088 <_pmc_init_master_clock+0x7c>)
  403016:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403018:	bf00      	nop
  40301a:	481a      	ldr	r0, [pc, #104]	; (403084 <_pmc_init_master_clock+0x78>)
  40301c:	4b1b      	ldr	r3, [pc, #108]	; (40308c <_pmc_init_master_clock+0x80>)
  40301e:	4798      	blx	r3
  403020:	4603      	mov	r3, r0
  403022:	f083 0301 	eor.w	r3, r3, #1
  403026:	b2db      	uxtb	r3, r3
  403028:	2b00      	cmp	r3, #0
  40302a:	d1f6      	bne.n	40301a <_pmc_init_master_clock+0xe>
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
  40302c:	2100      	movs	r1, #0
  40302e:	4815      	ldr	r0, [pc, #84]	; (403084 <_pmc_init_master_clock+0x78>)
  403030:	4b17      	ldr	r3, [pc, #92]	; (403090 <_pmc_init_master_clock+0x84>)
  403032:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403034:	bf00      	nop
  403036:	4813      	ldr	r0, [pc, #76]	; (403084 <_pmc_init_master_clock+0x78>)
  403038:	4b14      	ldr	r3, [pc, #80]	; (40308c <_pmc_init_master_clock+0x80>)
  40303a:	4798      	blx	r3
  40303c:	4603      	mov	r3, r0
  40303e:	f083 0301 	eor.w	r3, r3, #1
  403042:	b2db      	uxtb	r3, r3
  403044:	2b00      	cmp	r3, #0
  403046:	d1f6      	bne.n	403036 <_pmc_init_master_clock+0x2a>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
  403048:	2101      	movs	r1, #1
  40304a:	480e      	ldr	r0, [pc, #56]	; (403084 <_pmc_init_master_clock+0x78>)
  40304c:	4b11      	ldr	r3, [pc, #68]	; (403094 <_pmc_init_master_clock+0x88>)
  40304e:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403050:	bf00      	nop
  403052:	480c      	ldr	r0, [pc, #48]	; (403084 <_pmc_init_master_clock+0x78>)
  403054:	4b0d      	ldr	r3, [pc, #52]	; (40308c <_pmc_init_master_clock+0x80>)
  403056:	4798      	blx	r3
  403058:	4603      	mov	r3, r0
  40305a:	f083 0301 	eor.w	r3, r3, #1
  40305e:	b2db      	uxtb	r3, r3
  403060:	2b00      	cmp	r3, #0
  403062:	d1f6      	bne.n	403052 <_pmc_init_master_clock+0x46>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
  403064:	2102      	movs	r1, #2
  403066:	4807      	ldr	r0, [pc, #28]	; (403084 <_pmc_init_master_clock+0x78>)
  403068:	4b0b      	ldr	r3, [pc, #44]	; (403098 <_pmc_init_master_clock+0x8c>)
  40306a:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40306c:	bf00      	nop
  40306e:	4805      	ldr	r0, [pc, #20]	; (403084 <_pmc_init_master_clock+0x78>)
  403070:	4b06      	ldr	r3, [pc, #24]	; (40308c <_pmc_init_master_clock+0x80>)
  403072:	4798      	blx	r3
  403074:	4603      	mov	r3, r0
  403076:	f083 0301 	eor.w	r3, r3, #1
  40307a:	b2db      	uxtb	r3, r3
  40307c:	2b00      	cmp	r3, #0
  40307e:	d1f6      	bne.n	40306e <_pmc_init_master_clock+0x62>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  403080:	bf00      	nop
  403082:	bd80      	pop	{r7, pc}
  403084:	400e0600 	.word	0x400e0600
  403088:	00402dbd 	.word	0x00402dbd
  40308c:	00402ee7 	.word	0x00402ee7
  403090:	00402e2b 	.word	0x00402e2b
  403094:	00402e63 	.word	0x00402e63
  403098:	00402df5 	.word	0x00402df5

0040309c <_pmc_init_program_clock>:
 * \brief Initializes programmable clock generators
 *
 * Programmable clock are running when this function returns.
 */
static void _pmc_init_program_clock(void)
{
  40309c:	b480      	push	{r7}
  40309e:	af00      	add	r7, sp, #0
	while (!hri_pmc_get_SR_PCKRDY0_bit(PMC)) {
		/* Wait until PCK6 clock is ready */
	}
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK6);
#endif
}
  4030a0:	bf00      	nop
  4030a2:	46bd      	mov	sp, r7
  4030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030a8:	4770      	bx	lr

004030aa <_pmc_init_fs_clock>:
 * \brief Initializes USB FS clock generators
 *
 * USB FS clock are running when this function returns.
 */
static void _pmc_init_fs_clock(void)
{
  4030aa:	b480      	push	{r7}
  4030ac:	af00      	add	r7, sp, #0
	}
	data |= PMC_USB_USBDIV(CONF_USB_48M_DIV - 1);
	hri_pmc_write_USB_reg(PMC, data);
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_USBCLK);
#endif
}
  4030ae:	bf00      	nop
  4030b0:	46bd      	mov	sp, r7
  4030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030b6:	4770      	bx	lr

004030b8 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4030b8:	b580      	push	{r7, lr}
  4030ba:	af00      	add	r7, sp, #0
	_pmc_init_sources();
  4030bc:	4b04      	ldr	r3, [pc, #16]	; (4030d0 <_pmc_init+0x18>)
  4030be:	4798      	blx	r3
	_pmc_init_master_clock();
  4030c0:	4b04      	ldr	r3, [pc, #16]	; (4030d4 <_pmc_init+0x1c>)
  4030c2:	4798      	blx	r3
	_pmc_init_program_clock();
  4030c4:	4b04      	ldr	r3, [pc, #16]	; (4030d8 <_pmc_init+0x20>)
  4030c6:	4798      	blx	r3
	_pmc_init_fs_clock();
  4030c8:	4b04      	ldr	r3, [pc, #16]	; (4030dc <_pmc_init+0x24>)
  4030ca:	4798      	blx	r3
}
  4030cc:	bf00      	nop
  4030ce:	bd80      	pop	{r7, pc}
  4030d0:	00402f35 	.word	0x00402f35
  4030d4:	0040300d 	.word	0x0040300d
  4030d8:	0040309d 	.word	0x0040309d
  4030dc:	004030ab 	.word	0x004030ab

004030e0 <NVIC_EnableIRQ>:
{
  4030e0:	b480      	push	{r7}
  4030e2:	b083      	sub	sp, #12
  4030e4:	af00      	add	r7, sp, #0
  4030e6:	4603      	mov	r3, r0
  4030e8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4030ea:	4909      	ldr	r1, [pc, #36]	; (403110 <NVIC_EnableIRQ+0x30>)
  4030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030f0:	095b      	lsrs	r3, r3, #5
  4030f2:	79fa      	ldrb	r2, [r7, #7]
  4030f4:	f002 021f 	and.w	r2, r2, #31
  4030f8:	2001      	movs	r0, #1
  4030fa:	fa00 f202 	lsl.w	r2, r0, r2
  4030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403102:	bf00      	nop
  403104:	370c      	adds	r7, #12
  403106:	46bd      	mov	sp, r7
  403108:	f85d 7b04 	ldr.w	r7, [sp], #4
  40310c:	4770      	bx	lr
  40310e:	bf00      	nop
  403110:	e000e100 	.word	0xe000e100

00403114 <hri_spi_write_CR_reg>:
{
	((Spi *)hw)->SPI_IDR = mask;
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
  403114:	b480      	push	{r7}
  403116:	b083      	sub	sp, #12
  403118:	af00      	add	r7, sp, #0
  40311a:	6078      	str	r0, [r7, #4]
  40311c:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  40311e:	687b      	ldr	r3, [r7, #4]
  403120:	683a      	ldr	r2, [r7, #0]
  403122:	601a      	str	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403124:	bf00      	nop
  403126:	370c      	adds	r7, #12
  403128:	46bd      	mov	sp, r7
  40312a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40312e:	4770      	bx	lr

00403130 <hri_spi_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_MR_reg(const void *const hw, hri_spi_mr_reg_t data)
{
  403130:	b480      	push	{r7}
  403132:	b083      	sub	sp, #12
  403134:	af00      	add	r7, sp, #0
  403136:	6078      	str	r0, [r7, #4]
  403138:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MR = data;
  40313a:	687b      	ldr	r3, [r7, #4]
  40313c:	683a      	ldr	r2, [r7, #0]
  40313e:	605a      	str	r2, [r3, #4]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403140:	bf00      	nop
  403142:	370c      	adds	r7, #12
  403144:	46bd      	mov	sp, r7
  403146:	f85d 7b04 	ldr.w	r7, [sp], #4
  40314a:	4770      	bx	lr

0040314c <hri_spi_write_CSR_BITS_bf>:
	tmp = (tmp & SPI_CSR_BITS(mask)) >> SPI_CSR_BITS_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_BITS_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  40314c:	b480      	push	{r7}
  40314e:	b087      	sub	sp, #28
  403150:	af00      	add	r7, sp, #0
  403152:	60f8      	str	r0, [r7, #12]
  403154:	460b      	mov	r3, r1
  403156:	607a      	str	r2, [r7, #4]
  403158:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  40315a:	7afa      	ldrb	r2, [r7, #11]
  40315c:	68fb      	ldr	r3, [r7, #12]
  40315e:	320c      	adds	r2, #12
  403160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403164:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_BITS_Msk;
  403166:	697b      	ldr	r3, [r7, #20]
  403168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40316c:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_BITS(data);
  40316e:	687b      	ldr	r3, [r7, #4]
  403170:	011b      	lsls	r3, r3, #4
  403172:	b2db      	uxtb	r3, r3
  403174:	697a      	ldr	r2, [r7, #20]
  403176:	4313      	orrs	r3, r2
  403178:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  40317a:	7afa      	ldrb	r2, [r7, #11]
  40317c:	68fb      	ldr	r3, [r7, #12]
  40317e:	320c      	adds	r2, #12
  403180:	6979      	ldr	r1, [r7, #20]
  403182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403186:	bf00      	nop
  403188:	371c      	adds	r7, #28
  40318a:	46bd      	mov	sp, r7
  40318c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403190:	4770      	bx	lr

00403192 <hri_spi_write_CSR_SCBR_bf>:
	tmp = (tmp & SPI_CSR_SCBR(mask)) >> SPI_CSR_SCBR_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_SCBR_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  403192:	b480      	push	{r7}
  403194:	b087      	sub	sp, #28
  403196:	af00      	add	r7, sp, #0
  403198:	60f8      	str	r0, [r7, #12]
  40319a:	460b      	mov	r3, r1
  40319c:	607a      	str	r2, [r7, #4]
  40319e:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  4031a0:	7afa      	ldrb	r2, [r7, #11]
  4031a2:	68fb      	ldr	r3, [r7, #12]
  4031a4:	320c      	adds	r2, #12
  4031a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4031aa:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_SCBR_Msk;
  4031ac:	697b      	ldr	r3, [r7, #20]
  4031ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4031b2:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_SCBR(data);
  4031b4:	687b      	ldr	r3, [r7, #4]
  4031b6:	021b      	lsls	r3, r3, #8
  4031b8:	b29b      	uxth	r3, r3
  4031ba:	697a      	ldr	r2, [r7, #20]
  4031bc:	4313      	orrs	r3, r2
  4031be:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  4031c0:	7afa      	ldrb	r2, [r7, #11]
  4031c2:	68fb      	ldr	r3, [r7, #12]
  4031c4:	320c      	adds	r2, #12
  4031c6:	6979      	ldr	r1, [r7, #20]
  4031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4031cc:	bf00      	nop
  4031ce:	371c      	adds	r7, #28
  4031d0:	46bd      	mov	sp, r7
  4031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031d6:	4770      	bx	lr

004031d8 <hri_spi_write_CSR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CSR_reg(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  4031d8:	b480      	push	{r7}
  4031da:	b085      	sub	sp, #20
  4031dc:	af00      	add	r7, sp, #0
  4031de:	60f8      	str	r0, [r7, #12]
  4031e0:	460b      	mov	r3, r1
  4031e2:	607a      	str	r2, [r7, #4]
  4031e4:	72fb      	strb	r3, [r7, #11]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CSR[index] = data;
  4031e6:	7afa      	ldrb	r2, [r7, #11]
  4031e8:	68fb      	ldr	r3, [r7, #12]
  4031ea:	320c      	adds	r2, #12
  4031ec:	6879      	ldr	r1, [r7, #4]
  4031ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4031f2:	bf00      	nop
  4031f4:	3714      	adds	r7, #20
  4031f6:	46bd      	mov	sp, r7
  4031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031fc:	4770      	bx	lr

004031fe <hri_spi_read_CSR_reg>:
	((Spi *)hw)->SPI_CSR[index] ^= mask;
	SPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_spi_csr_reg_t hri_spi_read_CSR_reg(const void *const hw, uint8_t index)
{
  4031fe:	b480      	push	{r7}
  403200:	b083      	sub	sp, #12
  403202:	af00      	add	r7, sp, #0
  403204:	6078      	str	r0, [r7, #4]
  403206:	460b      	mov	r3, r1
  403208:	70fb      	strb	r3, [r7, #3]
	return ((Spi *)hw)->SPI_CSR[index];
  40320a:	78fa      	ldrb	r2, [r7, #3]
  40320c:	687b      	ldr	r3, [r7, #4]
  40320e:	320c      	adds	r2, #12
  403210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  403214:	4618      	mov	r0, r3
  403216:	370c      	adds	r7, #12
  403218:	46bd      	mov	sp, r7
  40321a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40321e:	4770      	bx	lr

00403220 <hri_spi_get_SR_SPIENS_bit>:
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
  403220:	b480      	push	{r7}
  403222:	b083      	sub	sp, #12
  403224:	af00      	add	r7, sp, #0
  403226:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  403228:	687b      	ldr	r3, [r7, #4]
  40322a:	691b      	ldr	r3, [r3, #16]
  40322c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403230:	2b00      	cmp	r3, #0
  403232:	bf14      	ite	ne
  403234:	2301      	movne	r3, #1
  403236:	2300      	moveq	r3, #0
  403238:	b2db      	uxtb	r3, r3
}
  40323a:	4618      	mov	r0, r3
  40323c:	370c      	adds	r7, #12
  40323e:	46bd      	mov	sp, r7
  403240:	f85d 7b04 	ldr.w	r7, [sp], #4
  403244:	4770      	bx	lr
	...

00403248 <_spi_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _spi_get_irq_num(const void *const hw)
{
  403248:	b480      	push	{r7}
  40324a:	b083      	sub	sp, #12
  40324c:	af00      	add	r7, sp, #0
  40324e:	6078      	str	r0, [r7, #4]

	if (hw == SPI0) {
  403250:	687b      	ldr	r3, [r7, #4]
  403252:	4a06      	ldr	r2, [pc, #24]	; (40326c <_spi_get_irq_num+0x24>)
  403254:	4293      	cmp	r3, r2
  403256:	d101      	bne.n	40325c <_spi_get_irq_num+0x14>
		return SPI0_IRQn;
  403258:	2315      	movs	r3, #21
  40325a:	e000      	b.n	40325e <_spi_get_irq_num+0x16>
	} else {
		return SPI1_IRQn;
  40325c:	232a      	movs	r3, #42	; 0x2a
	}
}
  40325e:	4618      	mov	r0, r3
  403260:	370c      	adds	r7, #12
  403262:	46bd      	mov	sp, r7
  403264:	f85d 7b04 	ldr.w	r7, [sp], #4
  403268:	4770      	bx	lr
  40326a:	bf00      	nop
  40326c:	40008000 	.word	0x40008000

00403270 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
  403270:	b580      	push	{r7, lr}
  403272:	b082      	sub	sp, #8
  403274:	af00      	add	r7, sp, #0
  403276:	6078      	str	r0, [r7, #4]
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);
  403278:	2101      	movs	r1, #1
  40327a:	6878      	ldr	r0, [r7, #4]
  40327c:	4b03      	ldr	r3, [pc, #12]	; (40328c <_spi_sync_enable+0x1c>)
  40327e:	4798      	blx	r3

	return ERR_NONE;
  403280:	2300      	movs	r3, #0
}
  403282:	4618      	mov	r0, r3
  403284:	3708      	adds	r7, #8
  403286:	46bd      	mov	sp, r7
  403288:	bd80      	pop	{r7, pc}
  40328a:	bf00      	nop
  40328c:	00403115 	.word	0x00403115

00403290 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
  403290:	b580      	push	{r7, lr}
  403292:	b082      	sub	sp, #8
  403294:	af00      	add	r7, sp, #0
  403296:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
  403298:	6878      	ldr	r0, [r7, #4]
  40329a:	4b07      	ldr	r3, [pc, #28]	; (4032b8 <_spi_async_enable+0x28>)
  40329c:	4798      	blx	r3
	NVIC_EnableIRQ(_spi_get_irq_num(hw));
  40329e:	6878      	ldr	r0, [r7, #4]
  4032a0:	4b06      	ldr	r3, [pc, #24]	; (4032bc <_spi_async_enable+0x2c>)
  4032a2:	4798      	blx	r3
  4032a4:	4603      	mov	r3, r0
  4032a6:	4618      	mov	r0, r3
  4032a8:	4b05      	ldr	r3, [pc, #20]	; (4032c0 <_spi_async_enable+0x30>)
  4032aa:	4798      	blx	r3

	return ERR_NONE;
  4032ac:	2300      	movs	r3, #0
}
  4032ae:	4618      	mov	r0, r3
  4032b0:	3708      	adds	r7, #8
  4032b2:	46bd      	mov	sp, r7
  4032b4:	bd80      	pop	{r7, pc}
  4032b6:	bf00      	nop
  4032b8:	00403271 	.word	0x00403271
  4032bc:	00403249 	.word	0x00403249
  4032c0:	004030e1 	.word	0x004030e1

004032c4 <_spi_set_mode>:
 * \param[in] mode The mode to set
 *
 * \return Setting mode status
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
  4032c4:	b580      	push	{r7, lr}
  4032c6:	b084      	sub	sp, #16
  4032c8:	af00      	add	r7, sp, #0
  4032ca:	6078      	str	r0, [r7, #4]
  4032cc:	460b      	mov	r3, r1
  4032ce:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;

	temp = hri_spi_read_CSR_reg(hw, 0);
  4032d0:	2100      	movs	r1, #0
  4032d2:	6878      	ldr	r0, [r7, #4]
  4032d4:	4b11      	ldr	r3, [pc, #68]	; (40331c <_spi_set_mode+0x58>)
  4032d6:	4798      	blx	r3
  4032d8:	60f8      	str	r0, [r7, #12]
	temp &= ~(SPI_CSR_CPOL | SPI_CSR_NCPHA);
  4032da:	68fb      	ldr	r3, [r7, #12]
  4032dc:	f023 0303 	bic.w	r3, r3, #3
  4032e0:	60fb      	str	r3, [r7, #12]
	temp |= (~(mode & 0x01u)) & 0x01u;
  4032e2:	78fb      	ldrb	r3, [r7, #3]
  4032e4:	f003 0301 	and.w	r3, r3, #1
  4032e8:	2b00      	cmp	r3, #0
  4032ea:	bf0c      	ite	eq
  4032ec:	2301      	moveq	r3, #1
  4032ee:	2300      	movne	r3, #0
  4032f0:	b2db      	uxtb	r3, r3
  4032f2:	461a      	mov	r2, r3
  4032f4:	68fb      	ldr	r3, [r7, #12]
  4032f6:	4313      	orrs	r3, r2
  4032f8:	60fb      	str	r3, [r7, #12]
	temp |= (mode & 0x02u) << 0;
  4032fa:	78fb      	ldrb	r3, [r7, #3]
  4032fc:	f003 0302 	and.w	r3, r3, #2
  403300:	68fa      	ldr	r2, [r7, #12]
  403302:	4313      	orrs	r3, r2
  403304:	60fb      	str	r3, [r7, #12]
	hri_spi_write_CSR_reg(hw, 0, temp);
  403306:	68fa      	ldr	r2, [r7, #12]
  403308:	2100      	movs	r1, #0
  40330a:	6878      	ldr	r0, [r7, #4]
  40330c:	4b04      	ldr	r3, [pc, #16]	; (403320 <_spi_set_mode+0x5c>)
  40330e:	4798      	blx	r3

	return ERR_NONE;
  403310:	2300      	movs	r3, #0
}
  403312:	4618      	mov	r0, r3
  403314:	3710      	adds	r7, #16
  403316:	46bd      	mov	sp, r7
  403318:	bd80      	pop	{r7, pc}
  40331a:	bf00      	nop
  40331c:	004031ff 	.word	0x004031ff
  403320:	004031d9 	.word	0x004031d9

00403324 <_spi_set_baudrate>:
 * \param[in] baud_val The baudrate to set
 *
 * \return Setting baudrate status
 */
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
  403324:	b580      	push	{r7, lr}
  403326:	b082      	sub	sp, #8
  403328:	af00      	add	r7, sp, #0
  40332a:	6078      	str	r0, [r7, #4]
  40332c:	6039      	str	r1, [r7, #0]
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);
  40332e:	683b      	ldr	r3, [r7, #0]
  403330:	b2db      	uxtb	r3, r3
  403332:	461a      	mov	r2, r3
  403334:	2100      	movs	r1, #0
  403336:	6878      	ldr	r0, [r7, #4]
  403338:	4b03      	ldr	r3, [pc, #12]	; (403348 <_spi_set_baudrate+0x24>)
  40333a:	4798      	blx	r3

	return ERR_NONE;
  40333c:	2300      	movs	r3, #0
}
  40333e:	4618      	mov	r0, r3
  403340:	3708      	adds	r7, #8
  403342:	46bd      	mov	sp, r7
  403344:	bd80      	pop	{r7, pc}
  403346:	bf00      	nop
  403348:	00403193 	.word	0x00403193

0040334c <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
  40334c:	b480      	push	{r7}
  40334e:	b085      	sub	sp, #20
  403350:	af00      	add	r7, sp, #0
  403352:	6078      	str	r0, [r7, #4]

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  403354:	687a      	ldr	r2, [r7, #4]
  403356:	4b08      	ldr	r3, [pc, #32]	; (403378 <_spi_get_hardware_index+0x2c>)
  403358:	4413      	add	r3, r2
  40335a:	0c1b      	lsrs	r3, r3, #16
  40335c:	73fb      	strb	r3, [r7, #15]

	if (index == 5) {
  40335e:	7bfb      	ldrb	r3, [r7, #15]
  403360:	2b05      	cmp	r3, #5
  403362:	d101      	bne.n	403368 <_spi_get_hardware_index+0x1c>
		return 1;
  403364:	2301      	movs	r3, #1
  403366:	e000      	b.n	40336a <_spi_get_hardware_index+0x1e>
	} else {
		return 0;
  403368:	2300      	movs	r3, #0
	}
}
  40336a:	4618      	mov	r0, r3
  40336c:	3714      	adds	r7, #20
  40336e:	46bd      	mov	sp, r7
  403370:	f85d 7b04 	ldr.w	r7, [sp], #4
  403374:	4770      	bx	lr
  403376:	bf00      	nop
  403378:	bfff8000 	.word	0xbfff8000

0040337c <_spi_get_tx_dma_channel>:
/** \brief Return the SPI TX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
  40337c:	b580      	push	{r7, lr}
  40337e:	b082      	sub	sp, #8
  403380:	af00      	add	r7, sp, #0
  403382:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  403384:	6878      	ldr	r0, [r7, #4]
  403386:	4b06      	ldr	r3, [pc, #24]	; (4033a0 <_spi_get_tx_dma_channel+0x24>)
  403388:	4798      	blx	r3
  40338a:	4603      	mov	r3, r0
  40338c:	2b00      	cmp	r3, #0
  40338e:	d101      	bne.n	403394 <_spi_get_tx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_TX_CHANNEL;
  403390:	2300      	movs	r3, #0
  403392:	e000      	b.n	403396 <_spi_get_tx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_TX_CHANNEL;
  403394:	2300      	movs	r3, #0
	}
}
  403396:	4618      	mov	r0, r3
  403398:	3708      	adds	r7, #8
  40339a:	46bd      	mov	sp, r7
  40339c:	bd80      	pop	{r7, pc}
  40339e:	bf00      	nop
  4033a0:	0040334d 	.word	0x0040334d

004033a4 <_spi_get_rx_dma_channel>:
/** \brief Return the SPI RX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
  4033a4:	b580      	push	{r7, lr}
  4033a6:	b082      	sub	sp, #8
  4033a8:	af00      	add	r7, sp, #0
  4033aa:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  4033ac:	6878      	ldr	r0, [r7, #4]
  4033ae:	4b06      	ldr	r3, [pc, #24]	; (4033c8 <_spi_get_rx_dma_channel+0x24>)
  4033b0:	4798      	blx	r3
  4033b2:	4603      	mov	r3, r0
  4033b4:	2b00      	cmp	r3, #0
  4033b6:	d101      	bne.n	4033bc <_spi_get_rx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_RX_CHANNEL;
  4033b8:	2301      	movs	r3, #1
  4033ba:	e000      	b.n	4033be <_spi_get_rx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_RX_CHANNEL;
  4033bc:	2301      	movs	r3, #1
	}
}
  4033be:	4618      	mov	r0, r3
  4033c0:	3708      	adds	r7, #8
  4033c2:	46bd      	mov	sp, r7
  4033c4:	bd80      	pop	{r7, pc}
  4033c6:	bf00      	nop
  4033c8:	0040334d 	.word	0x0040334d

004033cc <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
  4033cc:	b580      	push	{r7, lr}
  4033ce:	b084      	sub	sp, #16
  4033d0:	af00      	add	r7, sp, #0
  4033d2:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4033d4:	687b      	ldr	r3, [r7, #4]
  4033d6:	4618      	mov	r0, r3
  4033d8:	4b12      	ldr	r3, [pc, #72]	; (403424 <_spi_get_regs+0x58>)
  4033da:	4798      	blx	r3
  4033dc:	4603      	mov	r3, r0
  4033de:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4033e0:	2300      	movs	r3, #0
  4033e2:	73fb      	strb	r3, [r7, #15]
  4033e4:	e015      	b.n	403412 <_spi_get_regs+0x46>
		if (spi_regs[i].number == n) {
  4033e6:	7bfa      	ldrb	r2, [r7, #15]
  4033e8:	490f      	ldr	r1, [pc, #60]	; (403428 <_spi_get_regs+0x5c>)
  4033ea:	4613      	mov	r3, r2
  4033ec:	009b      	lsls	r3, r3, #2
  4033ee:	4413      	add	r3, r2
  4033f0:	009b      	lsls	r3, r3, #2
  4033f2:	440b      	add	r3, r1
  4033f4:	781b      	ldrb	r3, [r3, #0]
  4033f6:	7bba      	ldrb	r2, [r7, #14]
  4033f8:	429a      	cmp	r2, r3
  4033fa:	d107      	bne.n	40340c <_spi_get_regs+0x40>
			return &spi_regs[i];
  4033fc:	7bfa      	ldrb	r2, [r7, #15]
  4033fe:	4613      	mov	r3, r2
  403400:	009b      	lsls	r3, r3, #2
  403402:	4413      	add	r3, r2
  403404:	009b      	lsls	r3, r3, #2
  403406:	4a08      	ldr	r2, [pc, #32]	; (403428 <_spi_get_regs+0x5c>)
  403408:	4413      	add	r3, r2
  40340a:	e006      	b.n	40341a <_spi_get_regs+0x4e>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  40340c:	7bfb      	ldrb	r3, [r7, #15]
  40340e:	3301      	adds	r3, #1
  403410:	73fb      	strb	r3, [r7, #15]
  403412:	7bfb      	ldrb	r3, [r7, #15]
  403414:	2b00      	cmp	r3, #0
  403416:	d0e6      	beq.n	4033e6 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
  403418:	2300      	movs	r3, #0
}
  40341a:	4618      	mov	r0, r3
  40341c:	3710      	adds	r7, #16
  40341e:	46bd      	mov	sp, r7
  403420:	bd80      	pop	{r7, pc}
  403422:	bf00      	nop
  403424:	0040334d 	.word	0x0040334d
  403428:	00406b68 	.word	0x00406b68

0040342c <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
  40342c:	b580      	push	{r7, lr}
  40342e:	b084      	sub	sp, #16
  403430:	af00      	add	r7, sp, #0
  403432:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  403434:	687b      	ldr	r3, [r7, #4]
  403436:	689b      	ldr	r3, [r3, #8]
  403438:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.rx) {
  40343a:	68fb      	ldr	r3, [r7, #12]
  40343c:	689b      	ldr	r3, [r3, #8]
  40343e:	2b00      	cmp	r3, #0
  403440:	d003      	beq.n	40344a <_spi_dma_rx_complete+0x1e>
		dev->callbacks.rx(resource);
  403442:	68fb      	ldr	r3, [r7, #12]
  403444:	689b      	ldr	r3, [r3, #8]
  403446:	6878      	ldr	r0, [r7, #4]
  403448:	4798      	blx	r3
	}
}
  40344a:	bf00      	nop
  40344c:	3710      	adds	r7, #16
  40344e:	46bd      	mov	sp, r7
  403450:	bd80      	pop	{r7, pc}

00403452 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
  403452:	b580      	push	{r7, lr}
  403454:	b084      	sub	sp, #16
  403456:	af00      	add	r7, sp, #0
  403458:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  40345a:	687b      	ldr	r3, [r7, #4]
  40345c:	689b      	ldr	r3, [r3, #8]
  40345e:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.tx) {
  403460:	68fb      	ldr	r3, [r7, #12]
  403462:	685b      	ldr	r3, [r3, #4]
  403464:	2b00      	cmp	r3, #0
  403466:	d003      	beq.n	403470 <_spi_dma_tx_complete+0x1e>
		dev->callbacks.tx(resource);
  403468:	68fb      	ldr	r3, [r7, #12]
  40346a:	685b      	ldr	r3, [r3, #4]
  40346c:	6878      	ldr	r0, [r7, #4]
  40346e:	4798      	blx	r3
	}
}
  403470:	bf00      	nop
  403472:	3710      	adds	r7, #16
  403474:	46bd      	mov	sp, r7
  403476:	bd80      	pop	{r7, pc}

00403478 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
  403478:	b580      	push	{r7, lr}
  40347a:	b084      	sub	sp, #16
  40347c:	af00      	add	r7, sp, #0
  40347e:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  403480:	687b      	ldr	r3, [r7, #4]
  403482:	689b      	ldr	r3, [r3, #8]
  403484:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.error) {
  403486:	68fb      	ldr	r3, [r7, #12]
  403488:	68db      	ldr	r3, [r3, #12]
  40348a:	2b00      	cmp	r3, #0
  40348c:	d003      	beq.n	403496 <_spi_dma_error_occured+0x1e>
		dev->callbacks.error(resource);
  40348e:	68fb      	ldr	r3, [r7, #12]
  403490:	68db      	ldr	r3, [r3, #12]
  403492:	6878      	ldr	r0, [r7, #4]
  403494:	4798      	blx	r3
	}
}
  403496:	bf00      	nop
  403498:	3710      	adds	r7, #16
  40349a:	46bd      	mov	sp, r7
  40349c:	bd80      	pop	{r7, pc}

0040349e <_spi_m_get_source_for_dma>:

static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
  40349e:	b480      	push	{r7}
  4034a0:	b083      	sub	sp, #12
  4034a2:	af00      	add	r7, sp, #0
  4034a4:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_RDR);
  4034a6:	687b      	ldr	r3, [r7, #4]
  4034a8:	3308      	adds	r3, #8
}
  4034aa:	4618      	mov	r0, r3
  4034ac:	370c      	adds	r7, #12
  4034ae:	46bd      	mov	sp, r7
  4034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4034b4:	4770      	bx	lr

004034b6 <_spi_m_get_destination_for_dma>:

static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
  4034b6:	b480      	push	{r7}
  4034b8:	b083      	sub	sp, #12
  4034ba:	af00      	add	r7, sp, #0
  4034bc:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_TDR);
  4034be:	687b      	ldr	r3, [r7, #4]
  4034c0:	330c      	adds	r3, #12
}
  4034c2:	4618      	mov	r0, r3
  4034c4:	370c      	adds	r7, #12
  4034c6:	46bd      	mov	sp, r7
  4034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4034cc:	4770      	bx	lr
	...

004034d0 <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
  4034d0:	b590      	push	{r4, r7, lr}
  4034d2:	b085      	sub	sp, #20
  4034d4:	af00      	add	r7, sp, #0
  4034d6:	6078      	str	r0, [r7, #4]
  4034d8:	6039      	str	r1, [r7, #0]
	struct _spi_m_dma_dev *    spid = dev;
  4034da:	687b      	ldr	r3, [r7, #4]
  4034dc:	60fb      	str	r3, [r7, #12]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
  4034de:	683b      	ldr	r3, [r7, #0]
  4034e0:	4618      	mov	r0, r3
  4034e2:	4b34      	ldr	r3, [pc, #208]	; (4035b4 <_spi_m_dma_init+0xe4>)
  4034e4:	4798      	blx	r3
  4034e6:	60b8      	str	r0, [r7, #8]

	/* Do hardware initialize. */
	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4034e8:	6838      	ldr	r0, [r7, #0]
  4034ea:	4b33      	ldr	r3, [pc, #204]	; (4035b8 <_spi_m_dma_init+0xe8>)
  4034ec:	4798      	blx	r3
  4034ee:	4603      	mov	r3, r0
  4034f0:	2b00      	cmp	r3, #0
  4034f2:	d002      	beq.n	4034fa <_spi_m_dma_init+0x2a>
		return ERR_DENIED;
  4034f4:	f06f 0310 	mvn.w	r3, #16
  4034f8:	e057      	b.n	4035aa <_spi_m_dma_init+0xda>
	}

	spid->prvt = hw;
  4034fa:	68fb      	ldr	r3, [r7, #12]
  4034fc:	683a      	ldr	r2, [r7, #0]
  4034fe:	601a      	str	r2, [r3, #0]
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
  403500:	2180      	movs	r1, #128	; 0x80
  403502:	6838      	ldr	r0, [r7, #0]
  403504:	4b2d      	ldr	r3, [pc, #180]	; (4035bc <_spi_m_dma_init+0xec>)
  403506:	4798      	blx	r3
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  403508:	68bb      	ldr	r3, [r7, #8]
  40350a:	685a      	ldr	r2, [r3, #4]
  40350c:	4b2c      	ldr	r3, [pc, #176]	; (4035c0 <_spi_m_dma_init+0xf0>)
  40350e:	4013      	ands	r3, r2
  403510:	4619      	mov	r1, r3
  403512:	6838      	ldr	r0, [r7, #0]
  403514:	4b29      	ldr	r3, [pc, #164]	; (4035bc <_spi_m_dma_init+0xec>)
  403516:	4798      	blx	r3
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  403518:	68bb      	ldr	r3, [r7, #8]
  40351a:	689a      	ldr	r2, [r3, #8]
  40351c:	4b29      	ldr	r3, [pc, #164]	; (4035c4 <_spi_m_dma_init+0xf4>)
  40351e:	4013      	ands	r3, r2
  403520:	4a29      	ldr	r2, [pc, #164]	; (4035c8 <_spi_m_dma_init+0xf8>)
  403522:	431a      	orrs	r2, r3
  403524:	4611      	mov	r1, r2
  403526:	6838      	ldr	r0, [r7, #0]
  403528:	4b28      	ldr	r3, [pc, #160]	; (4035cc <_spi_m_dma_init+0xfc>)
  40352a:	4798      	blx	r3
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  40352c:	68bb      	ldr	r3, [r7, #8]
  40352e:	68db      	ldr	r3, [r3, #12]
  403530:	461a      	mov	r2, r3
  403532:	2100      	movs	r1, #0
  403534:	6838      	ldr	r0, [r7, #0]
  403536:	4b26      	ldr	r3, [pc, #152]	; (4035d0 <_spi_m_dma_init+0x100>)
  403538:	4798      	blx	r3

	/* Initialize callbacks: must use them */
	spid->callbacks.error = NULL;
  40353a:	68fb      	ldr	r3, [r7, #12]
  40353c:	2200      	movs	r2, #0
  40353e:	60da      	str	r2, [r3, #12]
	spid->callbacks.rx    = NULL;
  403540:	68fb      	ldr	r3, [r7, #12]
  403542:	2200      	movs	r2, #0
  403544:	609a      	str	r2, [r3, #8]
	spid->callbacks.tx    = NULL;
  403546:	68fb      	ldr	r3, [r7, #12]
  403548:	2200      	movs	r2, #0
  40354a:	605a      	str	r2, [r3, #4]

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
  40354c:	687b      	ldr	r3, [r7, #4]
  40354e:	f103 0418 	add.w	r4, r3, #24
  403552:	6838      	ldr	r0, [r7, #0]
  403554:	4b1f      	ldr	r3, [pc, #124]	; (4035d4 <_spi_m_dma_init+0x104>)
  403556:	4798      	blx	r3
  403558:	4603      	mov	r3, r0
  40355a:	4619      	mov	r1, r3
  40355c:	4620      	mov	r0, r4
  40355e:	4b1e      	ldr	r3, [pc, #120]	; (4035d8 <_spi_m_dma_init+0x108>)
  403560:	4798      	blx	r3
	dev->resource->back                 = dev;
  403562:	687b      	ldr	r3, [r7, #4]
  403564:	699b      	ldr	r3, [r3, #24]
  403566:	687a      	ldr	r2, [r7, #4]
  403568:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
  40356a:	687b      	ldr	r3, [r7, #4]
  40356c:	699b      	ldr	r3, [r3, #24]
  40356e:	4a1b      	ldr	r2, [pc, #108]	; (4035dc <_spi_m_dma_init+0x10c>)
  403570:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  403572:	687b      	ldr	r3, [r7, #4]
  403574:	699b      	ldr	r3, [r3, #24]
  403576:	4a1a      	ldr	r2, [pc, #104]	; (4035e0 <_spi_m_dma_init+0x110>)
  403578:	605a      	str	r2, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
  40357a:	687b      	ldr	r3, [r7, #4]
  40357c:	f103 0418 	add.w	r4, r3, #24
  403580:	6838      	ldr	r0, [r7, #0]
  403582:	4b18      	ldr	r3, [pc, #96]	; (4035e4 <_spi_m_dma_init+0x114>)
  403584:	4798      	blx	r3
  403586:	4603      	mov	r3, r0
  403588:	4619      	mov	r1, r3
  40358a:	4620      	mov	r0, r4
  40358c:	4b12      	ldr	r3, [pc, #72]	; (4035d8 <_spi_m_dma_init+0x108>)
  40358e:	4798      	blx	r3
	dev->resource->back                 = dev;
  403590:	687b      	ldr	r3, [r7, #4]
  403592:	699b      	ldr	r3, [r3, #24]
  403594:	687a      	ldr	r2, [r7, #4]
  403596:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
  403598:	687b      	ldr	r3, [r7, #4]
  40359a:	699b      	ldr	r3, [r3, #24]
  40359c:	4a12      	ldr	r2, [pc, #72]	; (4035e8 <_spi_m_dma_init+0x118>)
  40359e:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  4035a0:	687b      	ldr	r3, [r7, #4]
  4035a2:	699b      	ldr	r3, [r3, #24]
  4035a4:	4a0e      	ldr	r2, [pc, #56]	; (4035e0 <_spi_m_dma_init+0x110>)
  4035a6:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
  4035a8:	2300      	movs	r3, #0
}
  4035aa:	4618      	mov	r0, r3
  4035ac:	3714      	adds	r7, #20
  4035ae:	46bd      	mov	sp, r7
  4035b0:	bd90      	pop	{r4, r7, pc}
  4035b2:	bf00      	nop
  4035b4:	004033cd 	.word	0x004033cd
  4035b8:	00403221 	.word	0x00403221
  4035bc:	00403115 	.word	0x00403115
  4035c0:	feffff7c 	.word	0xfeffff7c
  4035c4:	fff1ff6f 	.word	0xfff1ff6f
  4035c8:	000e0010 	.word	0x000e0010
  4035cc:	00403131 	.word	0x00403131
  4035d0:	004031d9 	.word	0x004031d9
  4035d4:	004033a5 	.word	0x004033a5
  4035d8:	00406731 	.word	0x00406731
  4035dc:	0040342d 	.word	0x0040342d
  4035e0:	00403479 	.word	0x00403479
  4035e4:	0040337d 	.word	0x0040337d
  4035e8:	00403453 	.word	0x00403453

004035ec <_spi_m_dma_enable>:
	ASSERT(dev && dev->prvt);

	return _spi_async_enable(dev->prvt);
}
int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
  4035ec:	b580      	push	{r7, lr}
  4035ee:	b082      	sub	sp, #8
  4035f0:	af00      	add	r7, sp, #0
  4035f2:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
  4035f4:	687b      	ldr	r3, [r7, #4]
  4035f6:	2b00      	cmp	r3, #0
  4035f8:	d005      	beq.n	403606 <_spi_m_dma_enable+0x1a>
  4035fa:	687b      	ldr	r3, [r7, #4]
  4035fc:	681b      	ldr	r3, [r3, #0]
  4035fe:	2b00      	cmp	r3, #0
  403600:	d001      	beq.n	403606 <_spi_m_dma_enable+0x1a>
  403602:	2301      	movs	r3, #1
  403604:	e000      	b.n	403608 <_spi_m_dma_enable+0x1c>
  403606:	2300      	movs	r3, #0
  403608:	f003 0301 	and.w	r3, r3, #1
  40360c:	b2db      	uxtb	r3, r3
  40360e:	f240 2203 	movw	r2, #515	; 0x203
  403612:	4907      	ldr	r1, [pc, #28]	; (403630 <_spi_m_dma_enable+0x44>)
  403614:	4618      	mov	r0, r3
  403616:	4b07      	ldr	r3, [pc, #28]	; (403634 <_spi_m_dma_enable+0x48>)
  403618:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
  40361a:	687b      	ldr	r3, [r7, #4]
  40361c:	681b      	ldr	r3, [r3, #0]
  40361e:	4618      	mov	r0, r3
  403620:	4b05      	ldr	r3, [pc, #20]	; (403638 <_spi_m_dma_enable+0x4c>)
  403622:	4798      	blx	r3
  403624:	4603      	mov	r3, r0
}
  403626:	4618      	mov	r0, r3
  403628:	3708      	adds	r7, #8
  40362a:	46bd      	mov	sp, r7
  40362c:	bd80      	pop	{r7, pc}
  40362e:	bf00      	nop
  403630:	00406b7c 	.word	0x00406b7c
  403634:	004020b9 	.word	0x004020b9
  403638:	00403291 	.word	0x00403291

0040363c <_spi_m_dma_set_mode>:
	ASSERT(dev && dev->prvt);

	return _spi_set_mode(dev->prvt, mode);
}
int32_t _spi_m_dma_set_mode(struct _spi_m_dma_dev *dev, const enum spi_transfer_mode mode)
{
  40363c:	b580      	push	{r7, lr}
  40363e:	b082      	sub	sp, #8
  403640:	af00      	add	r7, sp, #0
  403642:	6078      	str	r0, [r7, #4]
  403644:	460b      	mov	r3, r1
  403646:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  403648:	687b      	ldr	r3, [r7, #4]
  40364a:	2b00      	cmp	r3, #0
  40364c:	d005      	beq.n	40365a <_spi_m_dma_set_mode+0x1e>
  40364e:	687b      	ldr	r3, [r7, #4]
  403650:	681b      	ldr	r3, [r3, #0]
  403652:	2b00      	cmp	r3, #0
  403654:	d001      	beq.n	40365a <_spi_m_dma_set_mode+0x1e>
  403656:	2301      	movs	r3, #1
  403658:	e000      	b.n	40365c <_spi_m_dma_set_mode+0x20>
  40365a:	2300      	movs	r3, #0
  40365c:	f003 0301 	and.w	r3, r3, #1
  403660:	b2db      	uxtb	r3, r3
  403662:	f240 222b 	movw	r2, #555	; 0x22b
  403666:	4908      	ldr	r1, [pc, #32]	; (403688 <_spi_m_dma_set_mode+0x4c>)
  403668:	4618      	mov	r0, r3
  40366a:	4b08      	ldr	r3, [pc, #32]	; (40368c <_spi_m_dma_set_mode+0x50>)
  40366c:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
  40366e:	687b      	ldr	r3, [r7, #4]
  403670:	681b      	ldr	r3, [r3, #0]
  403672:	78fa      	ldrb	r2, [r7, #3]
  403674:	4611      	mov	r1, r2
  403676:	4618      	mov	r0, r3
  403678:	4b05      	ldr	r3, [pc, #20]	; (403690 <_spi_m_dma_set_mode+0x54>)
  40367a:	4798      	blx	r3
  40367c:	4603      	mov	r3, r0
}
  40367e:	4618      	mov	r0, r3
  403680:	3708      	adds	r7, #8
  403682:	46bd      	mov	sp, r7
  403684:	bd80      	pop	{r7, pc}
  403686:	bf00      	nop
  403688:	00406b7c 	.word	0x00406b7c
  40368c:	004020b9 	.word	0x004020b9
  403690:	004032c5 	.word	0x004032c5

00403694 <_spi_m_dma_set_baudrate>:
	ASSERT(dev && dev->prvt);

	return _spi_set_baudrate(dev->prvt, baud_val);
}
int32_t _spi_m_dma_set_baudrate(struct _spi_m_dma_dev *dev, const uint32_t baud_val)
{
  403694:	b580      	push	{r7, lr}
  403696:	b082      	sub	sp, #8
  403698:	af00      	add	r7, sp, #0
  40369a:	6078      	str	r0, [r7, #4]
  40369c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->prvt);
  40369e:	687b      	ldr	r3, [r7, #4]
  4036a0:	2b00      	cmp	r3, #0
  4036a2:	d005      	beq.n	4036b0 <_spi_m_dma_set_baudrate+0x1c>
  4036a4:	687b      	ldr	r3, [r7, #4]
  4036a6:	681b      	ldr	r3, [r3, #0]
  4036a8:	2b00      	cmp	r3, #0
  4036aa:	d001      	beq.n	4036b0 <_spi_m_dma_set_baudrate+0x1c>
  4036ac:	2301      	movs	r3, #1
  4036ae:	e000      	b.n	4036b2 <_spi_m_dma_set_baudrate+0x1e>
  4036b0:	2300      	movs	r3, #0
  4036b2:	f003 0301 	and.w	r3, r3, #1
  4036b6:	b2db      	uxtb	r3, r3
  4036b8:	f240 2252 	movw	r2, #594	; 0x252
  4036bc:	4907      	ldr	r1, [pc, #28]	; (4036dc <_spi_m_dma_set_baudrate+0x48>)
  4036be:	4618      	mov	r0, r3
  4036c0:	4b07      	ldr	r3, [pc, #28]	; (4036e0 <_spi_m_dma_set_baudrate+0x4c>)
  4036c2:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  4036c4:	687b      	ldr	r3, [r7, #4]
  4036c6:	681b      	ldr	r3, [r3, #0]
  4036c8:	6839      	ldr	r1, [r7, #0]
  4036ca:	4618      	mov	r0, r3
  4036cc:	4b05      	ldr	r3, [pc, #20]	; (4036e4 <_spi_m_dma_set_baudrate+0x50>)
  4036ce:	4798      	blx	r3
  4036d0:	4603      	mov	r3, r0
}
  4036d2:	4618      	mov	r0, r3
  4036d4:	3708      	adds	r7, #8
  4036d6:	46bd      	mov	sp, r7
  4036d8:	bd80      	pop	{r7, pc}
  4036da:	bf00      	nop
  4036dc:	00406b7c 	.word	0x00406b7c
  4036e0:	004020b9 	.word	0x004020b9
  4036e4:	00403325 	.word	0x00403325

004036e8 <_spi_m_dma_set_char_size>:
	ASSERT(dev && dev->prvt);

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}
int32_t _spi_m_dma_set_char_size(struct _spi_m_dma_dev *dev, const enum spi_char_size char_size)
{
  4036e8:	b580      	push	{r7, lr}
  4036ea:	b082      	sub	sp, #8
  4036ec:	af00      	add	r7, sp, #0
  4036ee:	6078      	str	r0, [r7, #4]
  4036f0:	460b      	mov	r3, r1
  4036f2:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  4036f4:	687b      	ldr	r3, [r7, #4]
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	d005      	beq.n	403706 <_spi_m_dma_set_char_size+0x1e>
  4036fa:	687b      	ldr	r3, [r7, #4]
  4036fc:	681b      	ldr	r3, [r3, #0]
  4036fe:	2b00      	cmp	r3, #0
  403700:	d001      	beq.n	403706 <_spi_m_dma_set_char_size+0x1e>
  403702:	2301      	movs	r3, #1
  403704:	e000      	b.n	403708 <_spi_m_dma_set_char_size+0x20>
  403706:	2300      	movs	r3, #0
  403708:	f003 0301 	and.w	r3, r3, #1
  40370c:	b2db      	uxtb	r3, r3
  40370e:	f240 227d 	movw	r2, #637	; 0x27d
  403712:	490a      	ldr	r1, [pc, #40]	; (40373c <_spi_m_dma_set_char_size+0x54>)
  403714:	4618      	mov	r0, r3
  403716:	4b0a      	ldr	r3, [pc, #40]	; (403740 <_spi_m_dma_set_char_size+0x58>)
  403718:	4798      	blx	r3

	hri_spi_write_CSR_BITS_bf(dev->prvt, 0, char_size);
  40371a:	687b      	ldr	r3, [r7, #4]
  40371c:	681b      	ldr	r3, [r3, #0]
  40371e:	78fa      	ldrb	r2, [r7, #3]
  403720:	2100      	movs	r1, #0
  403722:	4618      	mov	r0, r3
  403724:	4b07      	ldr	r3, [pc, #28]	; (403744 <_spi_m_dma_set_char_size+0x5c>)
  403726:	4798      	blx	r3

	return (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
  403728:	78fb      	ldrb	r3, [r7, #3]
  40372a:	2b00      	cmp	r3, #0
  40372c:	d101      	bne.n	403732 <_spi_m_dma_set_char_size+0x4a>
  40372e:	2301      	movs	r3, #1
  403730:	e000      	b.n	403734 <_spi_m_dma_set_char_size+0x4c>
  403732:	2302      	movs	r3, #2
}
  403734:	4618      	mov	r0, r3
  403736:	3708      	adds	r7, #8
  403738:	46bd      	mov	sp, r7
  40373a:	bd80      	pop	{r7, pc}
  40373c:	00406b7c 	.word	0x00406b7c
  403740:	004020b9 	.word	0x004020b9
  403744:	0040314d 	.word	0x0040314d

00403748 <_spi_m_dma_register_callback>:
			hri_spi_clear_IMR_OVRES_bit(device->prvt);
		}
	}
}
void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
  403748:	b580      	push	{r7, lr}
  40374a:	b084      	sub	sp, #16
  40374c:	af00      	add	r7, sp, #0
  40374e:	60f8      	str	r0, [r7, #12]
  403750:	460b      	mov	r3, r1
  403752:	607a      	str	r2, [r7, #4]
  403754:	72fb      	strb	r3, [r7, #11]
	switch (type) {
  403756:	7afb      	ldrb	r3, [r7, #11]
  403758:	2b03      	cmp	r3, #3
  40375a:	d85c      	bhi.n	403816 <_spi_m_dma_register_callback+0xce>
  40375c:	a201      	add	r2, pc, #4	; (adr r2, 403764 <_spi_m_dma_register_callback+0x1c>)
  40375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403762:	bf00      	nop
  403764:	00403775 	.word	0x00403775
  403768:	0040379f 	.word	0x0040379f
  40376c:	004037c9 	.word	0x004037c9
  403770:	00403815 	.word	0x00403815
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
  403774:	68fb      	ldr	r3, [r7, #12]
  403776:	687a      	ldr	r2, [r7, #4]
  403778:	605a      	str	r2, [r3, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  40377a:	68fb      	ldr	r3, [r7, #12]
  40377c:	681b      	ldr	r3, [r3, #0]
  40377e:	4618      	mov	r0, r3
  403780:	4b27      	ldr	r3, [pc, #156]	; (403820 <_spi_m_dma_register_callback+0xd8>)
  403782:	4798      	blx	r3
  403784:	4603      	mov	r3, r0
  403786:	4618      	mov	r0, r3
  403788:	687b      	ldr	r3, [r7, #4]
  40378a:	2b00      	cmp	r3, #0
  40378c:	bf14      	ite	ne
  40378e:	2301      	movne	r3, #1
  403790:	2300      	moveq	r3, #0
  403792:	b2db      	uxtb	r3, r3
  403794:	461a      	mov	r2, r3
  403796:	2100      	movs	r1, #0
  403798:	4b22      	ldr	r3, [pc, #136]	; (403824 <_spi_m_dma_register_callback+0xdc>)
  40379a:	4798      	blx	r3
		break;
  40379c:	e03b      	b.n	403816 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
  40379e:	68fb      	ldr	r3, [r7, #12]
  4037a0:	687a      	ldr	r2, [r7, #4]
  4037a2:	609a      	str	r2, [r3, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  4037a4:	68fb      	ldr	r3, [r7, #12]
  4037a6:	681b      	ldr	r3, [r3, #0]
  4037a8:	4618      	mov	r0, r3
  4037aa:	4b1f      	ldr	r3, [pc, #124]	; (403828 <_spi_m_dma_register_callback+0xe0>)
  4037ac:	4798      	blx	r3
  4037ae:	4603      	mov	r3, r0
  4037b0:	4618      	mov	r0, r3
  4037b2:	687b      	ldr	r3, [r7, #4]
  4037b4:	2b00      	cmp	r3, #0
  4037b6:	bf14      	ite	ne
  4037b8:	2301      	movne	r3, #1
  4037ba:	2300      	moveq	r3, #0
  4037bc:	b2db      	uxtb	r3, r3
  4037be:	461a      	mov	r2, r3
  4037c0:	2100      	movs	r1, #0
  4037c2:	4b18      	ldr	r3, [pc, #96]	; (403824 <_spi_m_dma_register_callback+0xdc>)
  4037c4:	4798      	blx	r3
		break;
  4037c6:	e026      	b.n	403816 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
  4037c8:	68fb      	ldr	r3, [r7, #12]
  4037ca:	687a      	ldr	r2, [r7, #4]
  4037cc:	60da      	str	r2, [r3, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  4037ce:	68fb      	ldr	r3, [r7, #12]
  4037d0:	681b      	ldr	r3, [r3, #0]
  4037d2:	4618      	mov	r0, r3
  4037d4:	4b14      	ldr	r3, [pc, #80]	; (403828 <_spi_m_dma_register_callback+0xe0>)
  4037d6:	4798      	blx	r3
  4037d8:	4603      	mov	r3, r0
  4037da:	4618      	mov	r0, r3
  4037dc:	687b      	ldr	r3, [r7, #4]
  4037de:	2b00      	cmp	r3, #0
  4037e0:	bf14      	ite	ne
  4037e2:	2301      	movne	r3, #1
  4037e4:	2300      	moveq	r3, #0
  4037e6:	b2db      	uxtb	r3, r3
  4037e8:	461a      	mov	r2, r3
  4037ea:	2101      	movs	r1, #1
  4037ec:	4b0d      	ldr	r3, [pc, #52]	; (403824 <_spi_m_dma_register_callback+0xdc>)
  4037ee:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  4037f0:	68fb      	ldr	r3, [r7, #12]
  4037f2:	681b      	ldr	r3, [r3, #0]
  4037f4:	4618      	mov	r0, r3
  4037f6:	4b0a      	ldr	r3, [pc, #40]	; (403820 <_spi_m_dma_register_callback+0xd8>)
  4037f8:	4798      	blx	r3
  4037fa:	4603      	mov	r3, r0
  4037fc:	4618      	mov	r0, r3
  4037fe:	687b      	ldr	r3, [r7, #4]
  403800:	2b00      	cmp	r3, #0
  403802:	bf14      	ite	ne
  403804:	2301      	movne	r3, #1
  403806:	2300      	moveq	r3, #0
  403808:	b2db      	uxtb	r3, r3
  40380a:	461a      	mov	r2, r3
  40380c:	2101      	movs	r1, #1
  40380e:	4b05      	ldr	r3, [pc, #20]	; (403824 <_spi_m_dma_register_callback+0xdc>)
  403810:	4798      	blx	r3
		break;
  403812:	e000      	b.n	403816 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_N:
		break;
  403814:	bf00      	nop
	}
}
  403816:	bf00      	nop
  403818:	3710      	adds	r7, #16
  40381a:	46bd      	mov	sp, r7
  40381c:	bd80      	pop	{r7, pc}
  40381e:	bf00      	nop
  403820:	0040337d 	.word	0x0040337d
  403824:	00406761 	.word	0x00406761
  403828:	004033a5 	.word	0x004033a5

0040382c <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
  40382c:	b580      	push	{r7, lr}
  40382e:	b086      	sub	sp, #24
  403830:	af00      	add	r7, sp, #0
  403832:	60f8      	str	r0, [r7, #12]
  403834:	60b9      	str	r1, [r7, #8]
  403836:	607a      	str	r2, [r7, #4]
  403838:	807b      	strh	r3, [r7, #2]
	const struct spi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
  40383a:	68fb      	ldr	r3, [r7, #12]
  40383c:	681b      	ldr	r3, [r3, #0]
  40383e:	4618      	mov	r0, r3
  403840:	4b39      	ldr	r3, [pc, #228]	; (403928 <_spi_m_dma_transfer+0xfc>)
  403842:	4798      	blx	r3
  403844:	6178      	str	r0, [r7, #20]
	uint8_t                    rx_ch = _spi_get_rx_dma_channel(dev->prvt);
  403846:	68fb      	ldr	r3, [r7, #12]
  403848:	681b      	ldr	r3, [r3, #0]
  40384a:	4618      	mov	r0, r3
  40384c:	4b37      	ldr	r3, [pc, #220]	; (40392c <_spi_m_dma_transfer+0x100>)
  40384e:	4798      	blx	r3
  403850:	4603      	mov	r3, r0
  403852:	74fb      	strb	r3, [r7, #19]
	uint8_t                    tx_ch = _spi_get_tx_dma_channel(dev->prvt);
  403854:	68fb      	ldr	r3, [r7, #12]
  403856:	681b      	ldr	r3, [r3, #0]
  403858:	4618      	mov	r0, r3
  40385a:	4b35      	ldr	r3, [pc, #212]	; (403930 <_spi_m_dma_transfer+0x104>)
  40385c:	4798      	blx	r3
  40385e:	4603      	mov	r3, r0
  403860:	74bb      	strb	r3, [r7, #18]

	if (rxbuf) {
  403862:	687b      	ldr	r3, [r7, #4]
  403864:	2b00      	cmp	r3, #0
  403866:	d01b      	beq.n	4038a0 <_spi_m_dma_transfer+0x74>
		/* Enable spi rx */
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
  403868:	68fb      	ldr	r3, [r7, #12]
  40386a:	681b      	ldr	r3, [r3, #0]
  40386c:	4618      	mov	r0, r3
  40386e:	4b31      	ldr	r3, [pc, #196]	; (403934 <_spi_m_dma_transfer+0x108>)
  403870:	4798      	blx	r3
  403872:	4603      	mov	r3, r0
  403874:	461a      	mov	r2, r3
  403876:	7cfb      	ldrb	r3, [r7, #19]
  403878:	4611      	mov	r1, r2
  40387a:	4618      	mov	r0, r3
  40387c:	4b2e      	ldr	r3, [pc, #184]	; (403938 <_spi_m_dma_transfer+0x10c>)
  40387e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
  403880:	7cfb      	ldrb	r3, [r7, #19]
  403882:	6879      	ldr	r1, [r7, #4]
  403884:	4618      	mov	r0, r3
  403886:	4b2d      	ldr	r3, [pc, #180]	; (40393c <_spi_m_dma_transfer+0x110>)
  403888:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
  40388a:	887a      	ldrh	r2, [r7, #2]
  40388c:	7cfb      	ldrb	r3, [r7, #19]
  40388e:	4611      	mov	r1, r2
  403890:	4618      	mov	r0, r3
  403892:	4b2b      	ldr	r3, [pc, #172]	; (403940 <_spi_m_dma_transfer+0x114>)
  403894:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
  403896:	7cfb      	ldrb	r3, [r7, #19]
  403898:	2100      	movs	r1, #0
  40389a:	4618      	mov	r0, r3
  40389c:	4b29      	ldr	r3, [pc, #164]	; (403944 <_spi_m_dma_transfer+0x118>)
  40389e:	4798      	blx	r3
	}

	if (txbuf) {
  4038a0:	68bb      	ldr	r3, [r7, #8]
  4038a2:	2b00      	cmp	r3, #0
  4038a4:	d017      	beq.n	4038d6 <_spi_m_dma_transfer+0xaa>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
  4038a6:	7cbb      	ldrb	r3, [r7, #18]
  4038a8:	68b9      	ldr	r1, [r7, #8]
  4038aa:	4618      	mov	r0, r3
  4038ac:	4b22      	ldr	r3, [pc, #136]	; (403938 <_spi_m_dma_transfer+0x10c>)
  4038ae:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  4038b0:	68fb      	ldr	r3, [r7, #12]
  4038b2:	681b      	ldr	r3, [r3, #0]
  4038b4:	4618      	mov	r0, r3
  4038b6:	4b24      	ldr	r3, [pc, #144]	; (403948 <_spi_m_dma_transfer+0x11c>)
  4038b8:	4798      	blx	r3
  4038ba:	4603      	mov	r3, r0
  4038bc:	461a      	mov	r2, r3
  4038be:	7cbb      	ldrb	r3, [r7, #18]
  4038c0:	4611      	mov	r1, r2
  4038c2:	4618      	mov	r0, r3
  4038c4:	4b1d      	ldr	r3, [pc, #116]	; (40393c <_spi_m_dma_transfer+0x110>)
  4038c6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  4038c8:	887a      	ldrh	r2, [r7, #2]
  4038ca:	7cbb      	ldrb	r3, [r7, #18]
  4038cc:	4611      	mov	r1, r2
  4038ce:	4618      	mov	r0, r3
  4038d0:	4b1b      	ldr	r3, [pc, #108]	; (403940 <_spi_m_dma_transfer+0x114>)
  4038d2:	4798      	blx	r3
  4038d4:	e01e      	b.n	403914 <_spi_m_dma_transfer+0xe8>
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
  4038d6:	697b      	ldr	r3, [r7, #20]
  4038d8:	f103 0210 	add.w	r2, r3, #16
  4038dc:	7cbb      	ldrb	r3, [r7, #18]
  4038de:	4611      	mov	r1, r2
  4038e0:	4618      	mov	r0, r3
  4038e2:	4b15      	ldr	r3, [pc, #84]	; (403938 <_spi_m_dma_transfer+0x10c>)
  4038e4:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	681b      	ldr	r3, [r3, #0]
  4038ea:	4618      	mov	r0, r3
  4038ec:	4b16      	ldr	r3, [pc, #88]	; (403948 <_spi_m_dma_transfer+0x11c>)
  4038ee:	4798      	blx	r3
  4038f0:	4603      	mov	r3, r0
  4038f2:	461a      	mov	r2, r3
  4038f4:	7cbb      	ldrb	r3, [r7, #18]
  4038f6:	4611      	mov	r1, r2
  4038f8:	4618      	mov	r0, r3
  4038fa:	4b10      	ldr	r3, [pc, #64]	; (40393c <_spi_m_dma_transfer+0x110>)
  4038fc:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
  4038fe:	7cbb      	ldrb	r3, [r7, #18]
  403900:	2100      	movs	r1, #0
  403902:	4618      	mov	r0, r3
  403904:	4b11      	ldr	r3, [pc, #68]	; (40394c <_spi_m_dma_transfer+0x120>)
  403906:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  403908:	887a      	ldrh	r2, [r7, #2]
  40390a:	7cbb      	ldrb	r3, [r7, #18]
  40390c:	4611      	mov	r1, r2
  40390e:	4618      	mov	r0, r3
  403910:	4b0b      	ldr	r3, [pc, #44]	; (403940 <_spi_m_dma_transfer+0x114>)
  403912:	4798      	blx	r3
	}
	_dma_enable_transaction(tx_ch, false);
  403914:	7cbb      	ldrb	r3, [r7, #18]
  403916:	2100      	movs	r1, #0
  403918:	4618      	mov	r0, r3
  40391a:	4b0a      	ldr	r3, [pc, #40]	; (403944 <_spi_m_dma_transfer+0x118>)
  40391c:	4798      	blx	r3

	return ERR_NONE;
  40391e:	2300      	movs	r3, #0
}
  403920:	4618      	mov	r0, r3
  403922:	3718      	adds	r7, #24
  403924:	46bd      	mov	sp, r7
  403926:	bd80      	pop	{r7, pc}
  403928:	004033cd 	.word	0x004033cd
  40392c:	004033a5 	.word	0x004033a5
  403930:	0040337d 	.word	0x0040337d
  403934:	0040349f 	.word	0x0040349f
  403938:	00406605 	.word	0x00406605
  40393c:	004065d9 	.word	0x004065d9
  403940:	004066a1 	.word	0x004066a1
  403944:	004066e5 	.word	0x004066e5
  403948:	004034b7 	.word	0x004034b7
  40394c:	00406631 	.word	0x00406631

00403950 <hri_twihs_write_CR_reg>:
{
	((Twihs *)hw)->TWIHS_IDR = mask;
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
  403950:	b480      	push	{r7}
  403952:	b083      	sub	sp, #12
  403954:	af00      	add	r7, sp, #0
  403956:	6078      	str	r0, [r7, #4]
  403958:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  40395a:	687b      	ldr	r3, [r7, #4]
  40395c:	683a      	ldr	r2, [r7, #0]
  40395e:	601a      	str	r2, [r3, #0]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  403960:	bf00      	nop
  403962:	370c      	adds	r7, #12
  403964:	46bd      	mov	sp, r7
  403966:	f85d 7b04 	ldr.w	r7, [sp], #4
  40396a:	4770      	bx	lr

0040396c <hri_twihs_write_THR_reg>:

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
  40396c:	b480      	push	{r7}
  40396e:	b083      	sub	sp, #12
  403970:	af00      	add	r7, sp, #0
  403972:	6078      	str	r0, [r7, #4]
  403974:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  403976:	687b      	ldr	r3, [r7, #4]
  403978:	683a      	ldr	r2, [r7, #0]
  40397a:	635a      	str	r2, [r3, #52]	; 0x34
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  40397c:	bf00      	nop
  40397e:	370c      	adds	r7, #12
  403980:	46bd      	mov	sp, r7
  403982:	f85d 7b04 	ldr.w	r7, [sp], #4
  403986:	4770      	bx	lr

00403988 <hri_twihs_write_MMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_MMR_reg(const void *const hw, hri_twihs_mmr_reg_t data)
{
  403988:	b480      	push	{r7}
  40398a:	b083      	sub	sp, #12
  40398c:	af00      	add	r7, sp, #0
  40398e:	6078      	str	r0, [r7, #4]
  403990:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_MMR = data;
  403992:	687b      	ldr	r3, [r7, #4]
  403994:	683a      	ldr	r2, [r7, #0]
  403996:	605a      	str	r2, [r3, #4]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  403998:	bf00      	nop
  40399a:	370c      	adds	r7, #12
  40399c:	46bd      	mov	sp, r7
  40399e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039a2:	4770      	bx	lr

004039a4 <hri_twihs_write_IADR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_IADR_reg(const void *const hw, hri_twihs_iadr_reg_t data)
{
  4039a4:	b480      	push	{r7}
  4039a6:	b083      	sub	sp, #12
  4039a8:	af00      	add	r7, sp, #0
  4039aa:	6078      	str	r0, [r7, #4]
  4039ac:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_IADR = data;
  4039ae:	687b      	ldr	r3, [r7, #4]
  4039b0:	683a      	ldr	r2, [r7, #0]
  4039b2:	60da      	str	r2, [r3, #12]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4039b4:	bf00      	nop
  4039b6:	370c      	adds	r7, #12
  4039b8:	46bd      	mov	sp, r7
  4039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039be:	4770      	bx	lr

004039c0 <hri_twihs_write_CWGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_CWGR_reg(const void *const hw, hri_twihs_cwgr_reg_t data)
{
  4039c0:	b480      	push	{r7}
  4039c2:	b083      	sub	sp, #12
  4039c4:	af00      	add	r7, sp, #0
  4039c6:	6078      	str	r0, [r7, #4]
  4039c8:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CWGR = data;
  4039ca:	687b      	ldr	r3, [r7, #4]
  4039cc:	683a      	ldr	r2, [r7, #0]
  4039ce:	611a      	str	r2, [r3, #16]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4039d0:	bf00      	nop
  4039d2:	370c      	adds	r7, #12
  4039d4:	46bd      	mov	sp, r7
  4039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039da:	4770      	bx	lr

004039dc <hri_twihs_write_SMBTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_SMBTR_reg(const void *const hw, hri_twihs_smbtr_reg_t data)
{
  4039dc:	b480      	push	{r7}
  4039de:	b083      	sub	sp, #12
  4039e0:	af00      	add	r7, sp, #0
  4039e2:	6078      	str	r0, [r7, #4]
  4039e4:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_SMBTR = data;
  4039e6:	687b      	ldr	r3, [r7, #4]
  4039e8:	683a      	ldr	r2, [r7, #0]
  4039ea:	639a      	str	r2, [r3, #56]	; 0x38
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4039ec:	bf00      	nop
  4039ee:	370c      	adds	r7, #12
  4039f0:	46bd      	mov	sp, r7
  4039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039f6:	4770      	bx	lr

004039f8 <hri_twihs_write_FILTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_FILTR_reg(const void *const hw, hri_twihs_filtr_reg_t data)
{
  4039f8:	b480      	push	{r7}
  4039fa:	b083      	sub	sp, #12
  4039fc:	af00      	add	r7, sp, #0
  4039fe:	6078      	str	r0, [r7, #4]
  403a00:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_FILTR = data;
  403a02:	687b      	ldr	r3, [r7, #4]
  403a04:	683a      	ldr	r2, [r7, #0]
  403a06:	645a      	str	r2, [r3, #68]	; 0x44
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  403a08:	bf00      	nop
  403a0a:	370c      	adds	r7, #12
  403a0c:	46bd      	mov	sp, r7
  403a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a12:	4770      	bx	lr

00403a14 <hri_twihs_get_SR_TXCOMP_bit>:
{
	return ((Twihs *)hw)->TWIHS_WPMR;
}

static inline bool hri_twihs_get_SR_TXCOMP_bit(const void *const hw)
{
  403a14:	b480      	push	{r7}
  403a16:	b083      	sub	sp, #12
  403a18:	af00      	add	r7, sp, #0
  403a1a:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  403a1c:	687b      	ldr	r3, [r7, #4]
  403a1e:	6a1b      	ldr	r3, [r3, #32]
  403a20:	f003 0301 	and.w	r3, r3, #1
  403a24:	2b00      	cmp	r3, #0
  403a26:	bf14      	ite	ne
  403a28:	2301      	movne	r3, #1
  403a2a:	2300      	moveq	r3, #0
  403a2c:	b2db      	uxtb	r3, r3
}
  403a2e:	4618      	mov	r0, r3
  403a30:	370c      	adds	r7, #12
  403a32:	46bd      	mov	sp, r7
  403a34:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a38:	4770      	bx	lr

00403a3a <hri_twihs_get_SR_RXRDY_bit>:

static inline bool hri_twihs_get_SR_RXRDY_bit(const void *const hw)
{
  403a3a:	b480      	push	{r7}
  403a3c:	b083      	sub	sp, #12
  403a3e:	af00      	add	r7, sp, #0
  403a40:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  403a42:	687b      	ldr	r3, [r7, #4]
  403a44:	6a1b      	ldr	r3, [r3, #32]
  403a46:	f003 0302 	and.w	r3, r3, #2
  403a4a:	2b00      	cmp	r3, #0
  403a4c:	bf14      	ite	ne
  403a4e:	2301      	movne	r3, #1
  403a50:	2300      	moveq	r3, #0
  403a52:	b2db      	uxtb	r3, r3
}
  403a54:	4618      	mov	r0, r3
  403a56:	370c      	adds	r7, #12
  403a58:	46bd      	mov	sp, r7
  403a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a5e:	4770      	bx	lr

00403a60 <hri_twihs_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_sr_reg_t hri_twihs_read_SR_reg(const void *const hw)
{
  403a60:	b480      	push	{r7}
  403a62:	b083      	sub	sp, #12
  403a64:	af00      	add	r7, sp, #0
  403a66:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_SR;
  403a68:	687b      	ldr	r3, [r7, #4]
  403a6a:	6a1b      	ldr	r3, [r3, #32]
}
  403a6c:	4618      	mov	r0, r3
  403a6e:	370c      	adds	r7, #12
  403a70:	46bd      	mov	sp, r7
  403a72:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a76:	4770      	bx	lr

00403a78 <hri_twihs_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_rhr_reg_t hri_twihs_read_RHR_reg(const void *const hw)
{
  403a78:	b480      	push	{r7}
  403a7a:	b083      	sub	sp, #12
  403a7c:	af00      	add	r7, sp, #0
  403a7e:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_RHR;
  403a80:	687b      	ldr	r3, [r7, #4]
  403a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  403a84:	4618      	mov	r0, r3
  403a86:	370c      	adds	r7, #12
  403a88:	46bd      	mov	sp, r7
  403a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a8e:	4770      	bx	lr

00403a90 <_get_i2cm_sync_cfg>:

/**
 * \berif Retrieve I2C Master Sync configuration instance
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
  403a90:	b480      	push	{r7}
  403a92:	b085      	sub	sp, #20
  403a94:	af00      	add	r7, sp, #0
  403a96:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  403a98:	2300      	movs	r3, #0
  403a9a:	73fb      	strb	r3, [r7, #15]
  403a9c:	e015      	b.n	403aca <_get_i2cm_sync_cfg+0x3a>
		if (_i2cm_sync_cfgs[i].hw == hw) {
  403a9e:	7bfa      	ldrb	r2, [r7, #15]
  403aa0:	490f      	ldr	r1, [pc, #60]	; (403ae0 <_get_i2cm_sync_cfg+0x50>)
  403aa2:	4613      	mov	r3, r2
  403aa4:	005b      	lsls	r3, r3, #1
  403aa6:	4413      	add	r3, r2
  403aa8:	00db      	lsls	r3, r3, #3
  403aaa:	440b      	add	r3, r1
  403aac:	681a      	ldr	r2, [r3, #0]
  403aae:	687b      	ldr	r3, [r7, #4]
  403ab0:	429a      	cmp	r2, r3
  403ab2:	d107      	bne.n	403ac4 <_get_i2cm_sync_cfg+0x34>
			return &(_i2cm_sync_cfgs[i]);
  403ab4:	7bfa      	ldrb	r2, [r7, #15]
  403ab6:	4613      	mov	r3, r2
  403ab8:	005b      	lsls	r3, r3, #1
  403aba:	4413      	add	r3, r2
  403abc:	00db      	lsls	r3, r3, #3
  403abe:	4a08      	ldr	r2, [pc, #32]	; (403ae0 <_get_i2cm_sync_cfg+0x50>)
  403ac0:	4413      	add	r3, r2
  403ac2:	e006      	b.n	403ad2 <_get_i2cm_sync_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  403ac4:	7bfb      	ldrb	r3, [r7, #15]
  403ac6:	3301      	adds	r3, #1
  403ac8:	73fb      	strb	r3, [r7, #15]
  403aca:	7bfb      	ldrb	r3, [r7, #15]
  403acc:	2b01      	cmp	r3, #1
  403ace:	d9e6      	bls.n	403a9e <_get_i2cm_sync_cfg+0xe>
		}
	}
	return NULL;
  403ad0:	2300      	movs	r3, #0
}
  403ad2:	4618      	mov	r0, r3
  403ad4:	3714      	adds	r7, #20
  403ad6:	46bd      	mov	sp, r7
  403ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403adc:	4770      	bx	lr
  403ade:	bf00      	nop
  403ae0:	00406b94 	.word	0x00406b94

00403ae4 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  403ae4:	b580      	push	{r7, lr}
  403ae6:	b084      	sub	sp, #16
  403ae8:	af00      	add	r7, sp, #0
  403aea:	6078      	str	r0, [r7, #4]
  403aec:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
  403aee:	687b      	ldr	r3, [r7, #4]
  403af0:	2b00      	cmp	r3, #0
  403af2:	d004      	beq.n	403afe <_i2c_m_sync_init+0x1a>
  403af4:	683b      	ldr	r3, [r7, #0]
  403af6:	2b00      	cmp	r3, #0
  403af8:	d001      	beq.n	403afe <_i2c_m_sync_init+0x1a>
  403afa:	2301      	movs	r3, #1
  403afc:	e000      	b.n	403b00 <_i2c_m_sync_init+0x1c>
  403afe:	2300      	movs	r3, #0
  403b00:	f003 0301 	and.w	r3, r3, #1
  403b04:	b2db      	uxtb	r3, r3
  403b06:	2288      	movs	r2, #136	; 0x88
  403b08:	4918      	ldr	r1, [pc, #96]	; (403b6c <_i2c_m_sync_init+0x88>)
  403b0a:	4618      	mov	r0, r3
  403b0c:	4b18      	ldr	r3, [pc, #96]	; (403b70 <_i2c_m_sync_init+0x8c>)
  403b0e:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  403b10:	687b      	ldr	r3, [r7, #4]
  403b12:	683a      	ldr	r2, [r7, #0]
  403b14:	611a      	str	r2, [r3, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  403b16:	687b      	ldr	r3, [r7, #4]
  403b18:	691b      	ldr	r3, [r3, #16]
  403b1a:	4618      	mov	r0, r3
  403b1c:	4b15      	ldr	r3, [pc, #84]	; (403b74 <_i2c_m_sync_init+0x90>)
  403b1e:	4798      	blx	r3
  403b20:	60f8      	str	r0, [r7, #12]

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  403b22:	687b      	ldr	r3, [r7, #4]
  403b24:	691a      	ldr	r2, [r3, #16]
  403b26:	68fb      	ldr	r3, [r7, #12]
  403b28:	685b      	ldr	r3, [r3, #4]
  403b2a:	4619      	mov	r1, r3
  403b2c:	4610      	mov	r0, r2
  403b2e:	4b12      	ldr	r3, [pc, #72]	; (403b78 <_i2c_m_sync_init+0x94>)
  403b30:	4798      	blx	r3
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  403b32:	687b      	ldr	r3, [r7, #4]
  403b34:	691a      	ldr	r2, [r3, #16]
  403b36:	68fb      	ldr	r3, [r7, #12]
  403b38:	689b      	ldr	r3, [r3, #8]
  403b3a:	4619      	mov	r1, r3
  403b3c:	4610      	mov	r0, r2
  403b3e:	4b0f      	ldr	r3, [pc, #60]	; (403b7c <_i2c_m_sync_init+0x98>)
  403b40:	4798      	blx	r3
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  403b42:	687b      	ldr	r3, [r7, #4]
  403b44:	691a      	ldr	r2, [r3, #16]
  403b46:	68fb      	ldr	r3, [r7, #12]
  403b48:	68db      	ldr	r3, [r3, #12]
  403b4a:	4619      	mov	r1, r3
  403b4c:	4610      	mov	r0, r2
  403b4e:	4b0c      	ldr	r3, [pc, #48]	; (403b80 <_i2c_m_sync_init+0x9c>)
  403b50:	4798      	blx	r3
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  403b52:	687b      	ldr	r3, [r7, #4]
  403b54:	691a      	ldr	r2, [r3, #16]
  403b56:	68fb      	ldr	r3, [r7, #12]
  403b58:	691b      	ldr	r3, [r3, #16]
  403b5a:	4619      	mov	r1, r3
  403b5c:	4610      	mov	r0, r2
  403b5e:	4b09      	ldr	r3, [pc, #36]	; (403b84 <_i2c_m_sync_init+0xa0>)
  403b60:	4798      	blx	r3

	return ERR_NONE;
  403b62:	2300      	movs	r3, #0
}
  403b64:	4618      	mov	r0, r3
  403b66:	3710      	adds	r7, #16
  403b68:	46bd      	mov	sp, r7
  403b6a:	bd80      	pop	{r7, pc}
  403b6c:	00406bc4 	.word	0x00406bc4
  403b70:	004020b9 	.word	0x004020b9
  403b74:	00403a91 	.word	0x00403a91
  403b78:	00403951 	.word	0x00403951
  403b7c:	004039dd 	.word	0x004039dd
  403b80:	004039f9 	.word	0x004039f9
  403b84:	004039c1 	.word	0x004039c1

00403b88 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  403b88:	b580      	push	{r7, lr}
  403b8a:	b082      	sub	sp, #8
  403b8c:	af00      	add	r7, sp, #0
  403b8e:	6078      	str	r0, [r7, #4]
  403b90:	6039      	str	r1, [r7, #0]
	ASSERT(dev && msg);
  403b92:	687b      	ldr	r3, [r7, #4]
  403b94:	2b00      	cmp	r3, #0
  403b96:	d004      	beq.n	403ba2 <_i2c_m_sync_transfer+0x1a>
  403b98:	683b      	ldr	r3, [r7, #0]
  403b9a:	2b00      	cmp	r3, #0
  403b9c:	d001      	beq.n	403ba2 <_i2c_m_sync_transfer+0x1a>
  403b9e:	2301      	movs	r3, #1
  403ba0:	e000      	b.n	403ba4 <_i2c_m_sync_transfer+0x1c>
  403ba2:	2300      	movs	r3, #0
  403ba4:	f003 0301 	and.w	r3, r3, #1
  403ba8:	b2db      	uxtb	r3, r3
  403baa:	22ca      	movs	r2, #202	; 0xca
  403bac:	4911      	ldr	r1, [pc, #68]	; (403bf4 <_i2c_m_sync_transfer+0x6c>)
  403bae:	4618      	mov	r0, r3
  403bb0:	4b11      	ldr	r3, [pc, #68]	; (403bf8 <_i2c_m_sync_transfer+0x70>)
  403bb2:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  403bb4:	687b      	ldr	r3, [r7, #4]
  403bb6:	885b      	ldrh	r3, [r3, #2]
  403bb8:	b29b      	uxth	r3, r3
  403bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403bbe:	2b00      	cmp	r3, #0
  403bc0:	d002      	beq.n	403bc8 <_i2c_m_sync_transfer+0x40>
		return I2C_ERR_BUSY;
  403bc2:	f06f 0305 	mvn.w	r3, #5
  403bc6:	e011      	b.n	403bec <_i2c_m_sync_transfer+0x64>
	}

	if (msg->flags & I2C_M_RD) {
  403bc8:	683b      	ldr	r3, [r7, #0]
  403bca:	885b      	ldrh	r3, [r3, #2]
  403bcc:	b29b      	uxth	r3, r3
  403bce:	f003 0301 	and.w	r3, r3, #1
  403bd2:	2b00      	cmp	r3, #0
  403bd4:	d005      	beq.n	403be2 <_i2c_m_sync_transfer+0x5a>
		return _i2c_m_sync_read(dev, msg);
  403bd6:	6839      	ldr	r1, [r7, #0]
  403bd8:	6878      	ldr	r0, [r7, #4]
  403bda:	4b08      	ldr	r3, [pc, #32]	; (403bfc <_i2c_m_sync_transfer+0x74>)
  403bdc:	4798      	blx	r3
  403bde:	4603      	mov	r3, r0
  403be0:	e004      	b.n	403bec <_i2c_m_sync_transfer+0x64>
	} else {
		return _i2c_m_sync_write(dev, msg);
  403be2:	6839      	ldr	r1, [r7, #0]
  403be4:	6878      	ldr	r0, [r7, #4]
  403be6:	4b06      	ldr	r3, [pc, #24]	; (403c00 <_i2c_m_sync_transfer+0x78>)
  403be8:	4798      	blx	r3
  403bea:	4603      	mov	r3, r0
	}
}
  403bec:	4618      	mov	r0, r3
  403bee:	3708      	adds	r7, #8
  403bf0:	46bd      	mov	sp, r7
  403bf2:	bd80      	pop	{r7, pc}
  403bf4:	00406bc4 	.word	0x00406bc4
  403bf8:	004020b9 	.word	0x004020b9
  403bfc:	00403d35 	.word	0x00403d35
  403c00:	00403c05 	.word	0x00403c05

00403c04 <_i2c_m_sync_write>:

static inline int32_t _i2c_m_sync_write(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  403c04:	b580      	push	{r7, lr}
  403c06:	b086      	sub	sp, #24
  403c08:	af00      	add	r7, sp, #0
  403c0a:	6078      	str	r0, [r7, #4]
  403c0c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;
  403c0e:	2300      	movs	r3, #0
  403c10:	613b      	str	r3, [r7, #16]

	msg->flags |= I2C_M_BUSY;
  403c12:	683b      	ldr	r3, [r7, #0]
  403c14:	885b      	ldrh	r3, [r3, #2]
  403c16:	b29b      	uxth	r3, r3
  403c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403c1c:	b29a      	uxth	r2, r3
  403c1e:	683b      	ldr	r3, [r7, #0]
  403c20:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  403c22:	683b      	ldr	r3, [r7, #0]
  403c24:	881b      	ldrh	r3, [r3, #0]
  403c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  403c2a:	2b00      	cmp	r3, #0
  403c2c:	d01b      	beq.n	403c66 <_i2c_m_sync_write+0x62>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  403c2e:	687b      	ldr	r3, [r7, #4]
  403c30:	691a      	ldr	r2, [r3, #16]
  403c32:	683b      	ldr	r3, [r7, #0]
  403c34:	881b      	ldrh	r3, [r3, #0]
  403c36:	0a1b      	lsrs	r3, r3, #8
  403c38:	b29b      	uxth	r3, r3
  403c3a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  403c3e:	b29b      	uxth	r3, r3
  403c40:	041b      	lsls	r3, r3, #16
  403c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  403c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403c4a:	4619      	mov	r1, r3
  403c4c:	4610      	mov	r0, r2
  403c4e:	4b33      	ldr	r3, [pc, #204]	; (403d1c <_i2c_m_sync_write+0x118>)
  403c50:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  403c52:	687b      	ldr	r3, [r7, #4]
  403c54:	691a      	ldr	r2, [r3, #16]
  403c56:	683b      	ldr	r3, [r7, #0]
  403c58:	881b      	ldrh	r3, [r3, #0]
  403c5a:	b2db      	uxtb	r3, r3
  403c5c:	4619      	mov	r1, r3
  403c5e:	4610      	mov	r0, r2
  403c60:	4b2f      	ldr	r3, [pc, #188]	; (403d20 <_i2c_m_sync_write+0x11c>)
  403c62:	4798      	blx	r3
  403c64:	e00a      	b.n	403c7c <_i2c_m_sync_write+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  403c66:	687b      	ldr	r3, [r7, #4]
  403c68:	691a      	ldr	r2, [r3, #16]
  403c6a:	683b      	ldr	r3, [r7, #0]
  403c6c:	881b      	ldrh	r3, [r3, #0]
  403c6e:	041b      	lsls	r3, r3, #16
  403c70:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  403c74:	4619      	mov	r1, r3
  403c76:	4610      	mov	r0, r2
  403c78:	4b28      	ldr	r3, [pc, #160]	; (403d1c <_i2c_m_sync_write+0x118>)
  403c7a:	4798      	blx	r3
	}

	for (i = 0; i < msg->len; i++) {
  403c7c:	2300      	movs	r3, #0
  403c7e:	617b      	str	r3, [r7, #20]
  403c80:	e020      	b.n	403cc4 <_i2c_m_sync_write+0xc0>
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
  403c82:	687b      	ldr	r3, [r7, #4]
  403c84:	691b      	ldr	r3, [r3, #16]
  403c86:	4618      	mov	r0, r3
  403c88:	4b26      	ldr	r3, [pc, #152]	; (403d24 <_i2c_m_sync_write+0x120>)
  403c8a:	4798      	blx	r3
  403c8c:	60f8      	str	r0, [r7, #12]
			if (sr & TWIHS_SR_NACK) {
  403c8e:	68fb      	ldr	r3, [r7, #12]
  403c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
  403c94:	2b00      	cmp	r3, #0
  403c96:	d003      	beq.n	403ca0 <_i2c_m_sync_write+0x9c>
				ret = I2C_NACK;
  403c98:	f06f 0301 	mvn.w	r3, #1
  403c9c:	613b      	str	r3, [r7, #16]
				break;
  403c9e:	e004      	b.n	403caa <_i2c_m_sync_write+0xa6>
			}
		} while (!(sr & TWIHS_SR_TXRDY));
  403ca0:	68fb      	ldr	r3, [r7, #12]
  403ca2:	f003 0304 	and.w	r3, r3, #4
  403ca6:	2b00      	cmp	r3, #0
  403ca8:	d0eb      	beq.n	403c82 <_i2c_m_sync_write+0x7e>

		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  403caa:	687b      	ldr	r3, [r7, #4]
  403cac:	6918      	ldr	r0, [r3, #16]
  403cae:	683b      	ldr	r3, [r7, #0]
  403cb0:	689a      	ldr	r2, [r3, #8]
  403cb2:	697b      	ldr	r3, [r7, #20]
  403cb4:	4413      	add	r3, r2
  403cb6:	781b      	ldrb	r3, [r3, #0]
  403cb8:	4619      	mov	r1, r3
  403cba:	4b1b      	ldr	r3, [pc, #108]	; (403d28 <_i2c_m_sync_write+0x124>)
  403cbc:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  403cbe:	697b      	ldr	r3, [r7, #20]
  403cc0:	3301      	adds	r3, #1
  403cc2:	617b      	str	r3, [r7, #20]
  403cc4:	683b      	ldr	r3, [r7, #0]
  403cc6:	685b      	ldr	r3, [r3, #4]
  403cc8:	461a      	mov	r2, r3
  403cca:	697b      	ldr	r3, [r7, #20]
  403ccc:	429a      	cmp	r2, r3
  403cce:	d8d8      	bhi.n	403c82 <_i2c_m_sync_write+0x7e>
	}

	if (msg->flags & I2C_M_STOP) {
  403cd0:	683b      	ldr	r3, [r7, #0]
  403cd2:	885b      	ldrh	r3, [r3, #2]
  403cd4:	b29b      	uxth	r3, r3
  403cd6:	b21b      	sxth	r3, r3
  403cd8:	2b00      	cmp	r3, #0
  403cda:	da11      	bge.n	403d00 <_i2c_m_sync_write+0xfc>
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  403cdc:	687b      	ldr	r3, [r7, #4]
  403cde:	691b      	ldr	r3, [r3, #16]
  403ce0:	2102      	movs	r1, #2
  403ce2:	4618      	mov	r0, r3
  403ce4:	4b11      	ldr	r3, [pc, #68]	; (403d2c <_i2c_m_sync_write+0x128>)
  403ce6:	4798      	blx	r3
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  403ce8:	bf00      	nop
  403cea:	687b      	ldr	r3, [r7, #4]
  403cec:	691b      	ldr	r3, [r3, #16]
  403cee:	4618      	mov	r0, r3
  403cf0:	4b0f      	ldr	r3, [pc, #60]	; (403d30 <_i2c_m_sync_write+0x12c>)
  403cf2:	4798      	blx	r3
  403cf4:	4603      	mov	r3, r0
  403cf6:	f083 0301 	eor.w	r3, r3, #1
  403cfa:	b2db      	uxtb	r3, r3
  403cfc:	2b00      	cmp	r3, #0
  403cfe:	d1f4      	bne.n	403cea <_i2c_m_sync_write+0xe6>
		};
	}

	dev->service.msg.flags &= ~I2C_M_BUSY;
  403d00:	687b      	ldr	r3, [r7, #4]
  403d02:	885b      	ldrh	r3, [r3, #2]
  403d04:	b29b      	uxth	r3, r3
  403d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  403d0a:	b29a      	uxth	r2, r3
  403d0c:	687b      	ldr	r3, [r7, #4]
  403d0e:	805a      	strh	r2, [r3, #2]

	return ret;
  403d10:	693b      	ldr	r3, [r7, #16]
}
  403d12:	4618      	mov	r0, r3
  403d14:	3718      	adds	r7, #24
  403d16:	46bd      	mov	sp, r7
  403d18:	bd80      	pop	{r7, pc}
  403d1a:	bf00      	nop
  403d1c:	00403989 	.word	0x00403989
  403d20:	004039a5 	.word	0x004039a5
  403d24:	00403a61 	.word	0x00403a61
  403d28:	0040396d 	.word	0x0040396d
  403d2c:	00403951 	.word	0x00403951
  403d30:	00403a15 	.word	0x00403a15

00403d34 <_i2c_m_sync_read>:

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  403d34:	b590      	push	{r4, r7, lr}
  403d36:	b085      	sub	sp, #20
  403d38:	af00      	add	r7, sp, #0
  403d3a:	6078      	str	r0, [r7, #4]
  403d3c:	6039      	str	r1, [r7, #0]
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  403d3e:	683b      	ldr	r3, [r7, #0]
  403d40:	885b      	ldrh	r3, [r3, #2]
  403d42:	b29b      	uxth	r3, r3
  403d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403d48:	b29a      	uxth	r2, r3
  403d4a:	683b      	ldr	r3, [r7, #0]
  403d4c:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  403d4e:	683b      	ldr	r3, [r7, #0]
  403d50:	881b      	ldrh	r3, [r3, #0]
  403d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  403d56:	2b00      	cmp	r3, #0
  403d58:	d01b      	beq.n	403d92 <_i2c_m_sync_read+0x5e>
		hri_twihs_write_MMR_reg(dev->hw,
  403d5a:	687b      	ldr	r3, [r7, #4]
  403d5c:	691a      	ldr	r2, [r3, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  403d5e:	683b      	ldr	r3, [r7, #0]
  403d60:	881b      	ldrh	r3, [r3, #0]
  403d62:	0a1b      	lsrs	r3, r3, #8
  403d64:	b29b      	uxth	r3, r3
  403d66:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  403d6a:	b29b      	uxth	r3, r3
  403d6c:	041b      	lsls	r3, r3, #16
  403d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  403d72:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
		hri_twihs_write_MMR_reg(dev->hw,
  403d76:	4619      	mov	r1, r3
  403d78:	4610      	mov	r0, r2
  403d7a:	4b38      	ldr	r3, [pc, #224]	; (403e5c <_i2c_m_sync_read+0x128>)
  403d7c:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  403d7e:	687b      	ldr	r3, [r7, #4]
  403d80:	691a      	ldr	r2, [r3, #16]
  403d82:	683b      	ldr	r3, [r7, #0]
  403d84:	881b      	ldrh	r3, [r3, #0]
  403d86:	b2db      	uxtb	r3, r3
  403d88:	4619      	mov	r1, r3
  403d8a:	4610      	mov	r0, r2
  403d8c:	4b34      	ldr	r3, [pc, #208]	; (403e60 <_i2c_m_sync_read+0x12c>)
  403d8e:	4798      	blx	r3
  403d90:	e00c      	b.n	403dac <_i2c_m_sync_read+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  403d92:	687b      	ldr	r3, [r7, #4]
  403d94:	691a      	ldr	r2, [r3, #16]
  403d96:	683b      	ldr	r3, [r7, #0]
  403d98:	881b      	ldrh	r3, [r3, #0]
  403d9a:	041b      	lsls	r3, r3, #16
  403d9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  403da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403da4:	4619      	mov	r1, r3
  403da6:	4610      	mov	r0, r2
  403da8:	4b2c      	ldr	r3, [pc, #176]	; (403e5c <_i2c_m_sync_read+0x128>)
  403daa:	4798      	blx	r3
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  403dac:	687b      	ldr	r3, [r7, #4]
  403dae:	691a      	ldr	r2, [r3, #16]
  403db0:	683b      	ldr	r3, [r7, #0]
  403db2:	685b      	ldr	r3, [r3, #4]
  403db4:	2b01      	cmp	r3, #1
  403db6:	d101      	bne.n	403dbc <_i2c_m_sync_read+0x88>
  403db8:	2303      	movs	r3, #3
  403dba:	e000      	b.n	403dbe <_i2c_m_sync_read+0x8a>
  403dbc:	2301      	movs	r3, #1
  403dbe:	4619      	mov	r1, r3
  403dc0:	4610      	mov	r0, r2
  403dc2:	4b28      	ldr	r3, [pc, #160]	; (403e64 <_i2c_m_sync_read+0x130>)
  403dc4:	4798      	blx	r3

	for (i = 0; i < msg->len; i++) {
  403dc6:	2300      	movs	r3, #0
  403dc8:	60fb      	str	r3, [r7, #12]
  403dca:	e027      	b.n	403e1c <_i2c_m_sync_read+0xe8>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  403dcc:	bf00      	nop
  403dce:	687b      	ldr	r3, [r7, #4]
  403dd0:	691b      	ldr	r3, [r3, #16]
  403dd2:	4618      	mov	r0, r3
  403dd4:	4b24      	ldr	r3, [pc, #144]	; (403e68 <_i2c_m_sync_read+0x134>)
  403dd6:	4798      	blx	r3
  403dd8:	4603      	mov	r3, r0
  403dda:	f083 0301 	eor.w	r3, r3, #1
  403dde:	b2db      	uxtb	r3, r3
  403de0:	2b00      	cmp	r3, #0
  403de2:	d1f4      	bne.n	403dce <_i2c_m_sync_read+0x9a>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  403de4:	683b      	ldr	r3, [r7, #0]
  403de6:	689a      	ldr	r2, [r3, #8]
  403de8:	68fb      	ldr	r3, [r7, #12]
  403dea:	18d4      	adds	r4, r2, r3
  403dec:	687b      	ldr	r3, [r7, #4]
  403dee:	691b      	ldr	r3, [r3, #16]
  403df0:	4618      	mov	r0, r3
  403df2:	4b1e      	ldr	r3, [pc, #120]	; (403e6c <_i2c_m_sync_read+0x138>)
  403df4:	4798      	blx	r3
  403df6:	4603      	mov	r3, r0
  403df8:	b2db      	uxtb	r3, r3
  403dfa:	7023      	strb	r3, [r4, #0]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  403dfc:	683b      	ldr	r3, [r7, #0]
  403dfe:	685b      	ldr	r3, [r3, #4]
  403e00:	3b02      	subs	r3, #2
  403e02:	461a      	mov	r2, r3
  403e04:	68fb      	ldr	r3, [r7, #12]
  403e06:	429a      	cmp	r2, r3
  403e08:	d105      	bne.n	403e16 <_i2c_m_sync_read+0xe2>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  403e0a:	687b      	ldr	r3, [r7, #4]
  403e0c:	691b      	ldr	r3, [r3, #16]
  403e0e:	2102      	movs	r1, #2
  403e10:	4618      	mov	r0, r3
  403e12:	4b14      	ldr	r3, [pc, #80]	; (403e64 <_i2c_m_sync_read+0x130>)
  403e14:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  403e16:	68fb      	ldr	r3, [r7, #12]
  403e18:	3301      	adds	r3, #1
  403e1a:	60fb      	str	r3, [r7, #12]
  403e1c:	683b      	ldr	r3, [r7, #0]
  403e1e:	685b      	ldr	r3, [r3, #4]
  403e20:	461a      	mov	r2, r3
  403e22:	68fb      	ldr	r3, [r7, #12]
  403e24:	429a      	cmp	r2, r3
  403e26:	d8d1      	bhi.n	403dcc <_i2c_m_sync_read+0x98>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  403e28:	bf00      	nop
  403e2a:	687b      	ldr	r3, [r7, #4]
  403e2c:	691b      	ldr	r3, [r3, #16]
  403e2e:	4618      	mov	r0, r3
  403e30:	4b0f      	ldr	r3, [pc, #60]	; (403e70 <_i2c_m_sync_read+0x13c>)
  403e32:	4798      	blx	r3
  403e34:	4603      	mov	r3, r0
  403e36:	f083 0301 	eor.w	r3, r3, #1
  403e3a:	b2db      	uxtb	r3, r3
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	d1f4      	bne.n	403e2a <_i2c_m_sync_read+0xf6>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  403e40:	687b      	ldr	r3, [r7, #4]
  403e42:	885b      	ldrh	r3, [r3, #2]
  403e44:	b29b      	uxth	r3, r3
  403e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  403e4a:	b29a      	uxth	r2, r3
  403e4c:	687b      	ldr	r3, [r7, #4]
  403e4e:	805a      	strh	r2, [r3, #2]

	return ERR_NONE;
  403e50:	2300      	movs	r3, #0
}
  403e52:	4618      	mov	r0, r3
  403e54:	3714      	adds	r7, #20
  403e56:	46bd      	mov	sp, r7
  403e58:	bd90      	pop	{r4, r7, pc}
  403e5a:	bf00      	nop
  403e5c:	00403989 	.word	0x00403989
  403e60:	004039a5 	.word	0x004039a5
  403e64:	00403951 	.word	0x00403951
  403e68:	00403a3b 	.word	0x00403a3b
  403e6c:	00403a79 	.word	0x00403a79
  403e70:	00403a15 	.word	0x00403a15

00403e74 <NVIC_EnableIRQ>:
{
  403e74:	b480      	push	{r7}
  403e76:	b083      	sub	sp, #12
  403e78:	af00      	add	r7, sp, #0
  403e7a:	4603      	mov	r3, r0
  403e7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403e7e:	4909      	ldr	r1, [pc, #36]	; (403ea4 <NVIC_EnableIRQ+0x30>)
  403e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403e84:	095b      	lsrs	r3, r3, #5
  403e86:	79fa      	ldrb	r2, [r7, #7]
  403e88:	f002 021f 	and.w	r2, r2, #31
  403e8c:	2001      	movs	r0, #1
  403e8e:	fa00 f202 	lsl.w	r2, r0, r2
  403e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403e96:	bf00      	nop
  403e98:	370c      	adds	r7, #12
  403e9a:	46bd      	mov	sp, r7
  403e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ea0:	4770      	bx	lr
  403ea2:	bf00      	nop
  403ea4:	e000e100 	.word	0xe000e100

00403ea8 <NVIC_DisableIRQ>:
{
  403ea8:	b480      	push	{r7}
  403eaa:	b083      	sub	sp, #12
  403eac:	af00      	add	r7, sp, #0
  403eae:	4603      	mov	r3, r0
  403eb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403eb2:	4909      	ldr	r1, [pc, #36]	; (403ed8 <NVIC_DisableIRQ+0x30>)
  403eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403eb8:	095b      	lsrs	r3, r3, #5
  403eba:	79fa      	ldrb	r2, [r7, #7]
  403ebc:	f002 021f 	and.w	r2, r2, #31
  403ec0:	2001      	movs	r0, #1
  403ec2:	fa00 f202 	lsl.w	r2, r0, r2
  403ec6:	3320      	adds	r3, #32
  403ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403ecc:	bf00      	nop
  403ece:	370c      	adds	r7, #12
  403ed0:	46bd      	mov	sp, r7
  403ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ed6:	4770      	bx	lr
  403ed8:	e000e100 	.word	0xe000e100

00403edc <NVIC_ClearPendingIRQ>:
{
  403edc:	b480      	push	{r7}
  403ede:	b083      	sub	sp, #12
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	4603      	mov	r3, r0
  403ee4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403ee6:	4909      	ldr	r1, [pc, #36]	; (403f0c <NVIC_ClearPendingIRQ+0x30>)
  403ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403eec:	095b      	lsrs	r3, r3, #5
  403eee:	79fa      	ldrb	r2, [r7, #7]
  403ef0:	f002 021f 	and.w	r2, r2, #31
  403ef4:	2001      	movs	r0, #1
  403ef6:	fa00 f202 	lsl.w	r2, r0, r2
  403efa:	3360      	adds	r3, #96	; 0x60
  403efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403f00:	bf00      	nop
  403f02:	370c      	adds	r7, #12
  403f04:	46bd      	mov	sp, r7
  403f06:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f0a:	4770      	bx	lr
  403f0c:	e000e100 	.word	0xe000e100

00403f10 <hri_uart_get_IMR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IER = UART_IMR_RXRDY;
}

static inline bool hri_uart_get_IMR_RXRDY_bit(const void *const hw)
{
  403f10:	b480      	push	{r7}
  403f12:	b083      	sub	sp, #12
  403f14:	af00      	add	r7, sp, #0
  403f16:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_RXRDY) >> UART_IMR_RXRDY_Pos;
  403f18:	687b      	ldr	r3, [r7, #4]
  403f1a:	691b      	ldr	r3, [r3, #16]
  403f1c:	f003 0301 	and.w	r3, r3, #1
  403f20:	2b00      	cmp	r3, #0
  403f22:	bf14      	ite	ne
  403f24:	2301      	movne	r3, #1
  403f26:	2300      	moveq	r3, #0
  403f28:	b2db      	uxtb	r3, r3
}
  403f2a:	4618      	mov	r0, r3
  403f2c:	370c      	adds	r7, #12
  403f2e:	46bd      	mov	sp, r7
  403f30:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f34:	4770      	bx	lr

00403f36 <hri_uart_set_IMR_TXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_RXRDY;
}

static inline void hri_uart_set_IMR_TXRDY_bit(const void *const hw)
{
  403f36:	b480      	push	{r7}
  403f38:	b083      	sub	sp, #12
  403f3a:	af00      	add	r7, sp, #0
  403f3c:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
  403f3e:	687b      	ldr	r3, [r7, #4]
  403f40:	2202      	movs	r2, #2
  403f42:	609a      	str	r2, [r3, #8]
}
  403f44:	bf00      	nop
  403f46:	370c      	adds	r7, #12
  403f48:	46bd      	mov	sp, r7
  403f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f4e:	4770      	bx	lr

00403f50 <hri_uart_get_IMR_TXRDY_bit>:

static inline bool hri_uart_get_IMR_TXRDY_bit(const void *const hw)
{
  403f50:	b480      	push	{r7}
  403f52:	b083      	sub	sp, #12
  403f54:	af00      	add	r7, sp, #0
  403f56:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXRDY) >> UART_IMR_TXRDY_Pos;
  403f58:	687b      	ldr	r3, [r7, #4]
  403f5a:	691b      	ldr	r3, [r3, #16]
  403f5c:	085b      	lsrs	r3, r3, #1
  403f5e:	f003 0301 	and.w	r3, r3, #1
  403f62:	2b00      	cmp	r3, #0
  403f64:	bf14      	ite	ne
  403f66:	2301      	movne	r3, #1
  403f68:	2300      	moveq	r3, #0
  403f6a:	b2db      	uxtb	r3, r3
}
  403f6c:	4618      	mov	r0, r3
  403f6e:	370c      	adds	r7, #12
  403f70:	46bd      	mov	sp, r7
  403f72:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f76:	4770      	bx	lr

00403f78 <hri_uart_clear_IMR_TXRDY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
	}
}

static inline void hri_uart_clear_IMR_TXRDY_bit(const void *const hw)
{
  403f78:	b480      	push	{r7}
  403f7a:	b083      	sub	sp, #12
  403f7c:	af00      	add	r7, sp, #0
  403f7e:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXRDY;
  403f80:	687b      	ldr	r3, [r7, #4]
  403f82:	2202      	movs	r2, #2
  403f84:	60da      	str	r2, [r3, #12]
}
  403f86:	bf00      	nop
  403f88:	370c      	adds	r7, #12
  403f8a:	46bd      	mov	sp, r7
  403f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f90:	4770      	bx	lr

00403f92 <hri_uart_set_IMR_TXEMPTY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_PARE;
}

static inline void hri_uart_set_IMR_TXEMPTY_bit(const void *const hw)
{
  403f92:	b480      	push	{r7}
  403f94:	b083      	sub	sp, #12
  403f96:	af00      	add	r7, sp, #0
  403f98:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
  403f9a:	687b      	ldr	r3, [r7, #4]
  403f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
  403fa0:	609a      	str	r2, [r3, #8]
}
  403fa2:	bf00      	nop
  403fa4:	370c      	adds	r7, #12
  403fa6:	46bd      	mov	sp, r7
  403fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fac:	4770      	bx	lr

00403fae <hri_uart_get_IMR_TXEMPTY_bit>:

static inline bool hri_uart_get_IMR_TXEMPTY_bit(const void *const hw)
{
  403fae:	b480      	push	{r7}
  403fb0:	b083      	sub	sp, #12
  403fb2:	af00      	add	r7, sp, #0
  403fb4:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXEMPTY) >> UART_IMR_TXEMPTY_Pos;
  403fb6:	687b      	ldr	r3, [r7, #4]
  403fb8:	691b      	ldr	r3, [r3, #16]
  403fba:	0a5b      	lsrs	r3, r3, #9
  403fbc:	f003 0301 	and.w	r3, r3, #1
  403fc0:	2b00      	cmp	r3, #0
  403fc2:	bf14      	ite	ne
  403fc4:	2301      	movne	r3, #1
  403fc6:	2300      	moveq	r3, #0
  403fc8:	b2db      	uxtb	r3, r3
}
  403fca:	4618      	mov	r0, r3
  403fcc:	370c      	adds	r7, #12
  403fce:	46bd      	mov	sp, r7
  403fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fd4:	4770      	bx	lr

00403fd6 <hri_uart_clear_IMR_TXEMPTY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
	}
}

static inline void hri_uart_clear_IMR_TXEMPTY_bit(const void *const hw)
{
  403fd6:	b480      	push	{r7}
  403fd8:	b083      	sub	sp, #12
  403fda:	af00      	add	r7, sp, #0
  403fdc:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXEMPTY;
  403fde:	687b      	ldr	r3, [r7, #4]
  403fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
  403fe4:	60da      	str	r2, [r3, #12]
}
  403fe6:	bf00      	nop
  403fe8:	370c      	adds	r7, #12
  403fea:	46bd      	mov	sp, r7
  403fec:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ff0:	4770      	bx	lr

00403ff2 <hri_uart_write_CR_reg>:
{
	((Uart *)hw)->UART_IDR = mask;
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
  403ff2:	b480      	push	{r7}
  403ff4:	b083      	sub	sp, #12
  403ff6:	af00      	add	r7, sp, #0
  403ff8:	6078      	str	r0, [r7, #4]
  403ffa:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  403ffc:	687b      	ldr	r3, [r7, #4]
  403ffe:	683a      	ldr	r2, [r7, #0]
  404000:	601a      	str	r2, [r3, #0]
	UART_CRITICAL_SECTION_LEAVE();
}
  404002:	bf00      	nop
  404004:	370c      	adds	r7, #12
  404006:	46bd      	mov	sp, r7
  404008:	f85d 7b04 	ldr.w	r7, [sp], #4
  40400c:	4770      	bx	lr

0040400e <hri_uart_write_THR_reg>:

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
  40400e:	b480      	push	{r7}
  404010:	b083      	sub	sp, #12
  404012:	af00      	add	r7, sp, #0
  404014:	6078      	str	r0, [r7, #4]
  404016:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  404018:	687b      	ldr	r3, [r7, #4]
  40401a:	683a      	ldr	r2, [r7, #0]
  40401c:	61da      	str	r2, [r3, #28]
	UART_CRITICAL_SECTION_LEAVE();
}
  40401e:	bf00      	nop
  404020:	370c      	adds	r7, #12
  404022:	46bd      	mov	sp, r7
  404024:	f85d 7b04 	ldr.w	r7, [sp], #4
  404028:	4770      	bx	lr

0040402a <hri_uart_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_MR_reg(const void *const hw, hri_uart_mr_reg_t data)
{
  40402a:	b480      	push	{r7}
  40402c:	b083      	sub	sp, #12
  40402e:	af00      	add	r7, sp, #0
  404030:	6078      	str	r0, [r7, #4]
  404032:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_MR = data;
  404034:	687b      	ldr	r3, [r7, #4]
  404036:	683a      	ldr	r2, [r7, #0]
  404038:	605a      	str	r2, [r3, #4]
	UART_CRITICAL_SECTION_LEAVE();
}
  40403a:	bf00      	nop
  40403c:	370c      	adds	r7, #12
  40403e:	46bd      	mov	sp, r7
  404040:	f85d 7b04 	ldr.w	r7, [sp], #4
  404044:	4770      	bx	lr

00404046 <hri_uart_write_BRGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_BRGR_reg(const void *const hw, hri_uart_brgr_reg_t data)
{
  404046:	b480      	push	{r7}
  404048:	b083      	sub	sp, #12
  40404a:	af00      	add	r7, sp, #0
  40404c:	6078      	str	r0, [r7, #4]
  40404e:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_BRGR = data;
  404050:	687b      	ldr	r3, [r7, #4]
  404052:	683a      	ldr	r2, [r7, #0]
  404054:	621a      	str	r2, [r3, #32]
	UART_CRITICAL_SECTION_LEAVE();
}
  404056:	bf00      	nop
  404058:	370c      	adds	r7, #12
  40405a:	46bd      	mov	sp, r7
  40405c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404060:	4770      	bx	lr

00404062 <hri_uart_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
  404062:	b480      	push	{r7}
  404064:	b083      	sub	sp, #12
  404066:	af00      	add	r7, sp, #0
  404068:	6078      	str	r0, [r7, #4]
  40406a:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  40406c:	687b      	ldr	r3, [r7, #4]
  40406e:	683a      	ldr	r2, [r7, #0]
  404070:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	UART_CRITICAL_SECTION_LEAVE();
}
  404074:	bf00      	nop
  404076:	370c      	adds	r7, #12
  404078:	46bd      	mov	sp, r7
  40407a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40407e:	4770      	bx	lr

00404080 <hri_uart_get_SR_RXRDY_bit>:
{
	return ((Uart *)hw)->UART_WPMR;
}

static inline bool hri_uart_get_SR_RXRDY_bit(const void *const hw)
{
  404080:	b480      	push	{r7}
  404082:	b083      	sub	sp, #12
  404084:	af00      	add	r7, sp, #0
  404086:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  404088:	687b      	ldr	r3, [r7, #4]
  40408a:	695b      	ldr	r3, [r3, #20]
  40408c:	f003 0301 	and.w	r3, r3, #1
  404090:	2b00      	cmp	r3, #0
  404092:	bf14      	ite	ne
  404094:	2301      	movne	r3, #1
  404096:	2300      	moveq	r3, #0
  404098:	b2db      	uxtb	r3, r3
}
  40409a:	4618      	mov	r0, r3
  40409c:	370c      	adds	r7, #12
  40409e:	46bd      	mov	sp, r7
  4040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040a4:	4770      	bx	lr

004040a6 <hri_uart_get_SR_TXRDY_bit>:

static inline bool hri_uart_get_SR_TXRDY_bit(const void *const hw)
{
  4040a6:	b480      	push	{r7}
  4040a8:	b083      	sub	sp, #12
  4040aa:	af00      	add	r7, sp, #0
  4040ac:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  4040ae:	687b      	ldr	r3, [r7, #4]
  4040b0:	695b      	ldr	r3, [r3, #20]
  4040b2:	f003 0302 	and.w	r3, r3, #2
  4040b6:	2b00      	cmp	r3, #0
  4040b8:	bf14      	ite	ne
  4040ba:	2301      	movne	r3, #1
  4040bc:	2300      	moveq	r3, #0
  4040be:	b2db      	uxtb	r3, r3
}
  4040c0:	4618      	mov	r0, r3
  4040c2:	370c      	adds	r7, #12
  4040c4:	46bd      	mov	sp, r7
  4040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040ca:	4770      	bx	lr

004040cc <hri_uart_get_SR_TXEMPTY_bit>:
{
	return (((Uart *)hw)->UART_SR & UART_SR_PARE) > 0;
}

static inline bool hri_uart_get_SR_TXEMPTY_bit(const void *const hw)
{
  4040cc:	b480      	push	{r7}
  4040ce:	b083      	sub	sp, #12
  4040d0:	af00      	add	r7, sp, #0
  4040d2:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  4040d4:	687b      	ldr	r3, [r7, #4]
  4040d6:	695b      	ldr	r3, [r3, #20]
  4040d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4040dc:	2b00      	cmp	r3, #0
  4040de:	bf14      	ite	ne
  4040e0:	2301      	movne	r3, #1
  4040e2:	2300      	moveq	r3, #0
  4040e4:	b2db      	uxtb	r3, r3
}
  4040e6:	4618      	mov	r0, r3
  4040e8:	370c      	adds	r7, #12
  4040ea:	46bd      	mov	sp, r7
  4040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040f0:	4770      	bx	lr

004040f2 <hri_uart_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_sr_reg_t hri_uart_read_SR_reg(const void *const hw)
{
  4040f2:	b480      	push	{r7}
  4040f4:	b083      	sub	sp, #12
  4040f6:	af00      	add	r7, sp, #0
  4040f8:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_SR;
  4040fa:	687b      	ldr	r3, [r7, #4]
  4040fc:	695b      	ldr	r3, [r3, #20]
}
  4040fe:	4618      	mov	r0, r3
  404100:	370c      	adds	r7, #12
  404102:	46bd      	mov	sp, r7
  404104:	f85d 7b04 	ldr.w	r7, [sp], #4
  404108:	4770      	bx	lr

0040410a <hri_uart_read_RHR_RXCHR_bf>:
{
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR(mask)) >> UART_RHR_RXCHR_Pos;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_RXCHR_bf(const void *const hw)
{
  40410a:	b480      	push	{r7}
  40410c:	b083      	sub	sp, #12
  40410e:	af00      	add	r7, sp, #0
  404110:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  404112:	687b      	ldr	r3, [r7, #4]
  404114:	699b      	ldr	r3, [r3, #24]
  404116:	b2db      	uxtb	r3, r3
}
  404118:	4618      	mov	r0, r3
  40411a:	370c      	adds	r7, #12
  40411c:	46bd      	mov	sp, r7
  40411e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404122:	4770      	bx	lr

00404124 <hri_uart_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_reg(const void *const hw)
{
  404124:	b480      	push	{r7}
  404126:	b083      	sub	sp, #12
  404128:	af00      	add	r7, sp, #0
  40412a:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_RHR;
  40412c:	687b      	ldr	r3, [r7, #4]
  40412e:	699b      	ldr	r3, [r3, #24]
}
  404130:	4618      	mov	r0, r3
  404132:	370c      	adds	r7, #12
  404134:	46bd      	mov	sp, r7
  404136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40413a:	4770      	bx	lr

0040413c <_uart_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_irq_num(const void *const hw)
{
  40413c:	b580      	push	{r7, lr}
  40413e:	b084      	sub	sp, #16
  404140:	af00      	add	r7, sp, #0
  404142:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  404144:	687b      	ldr	r3, [r7, #4]
  404146:	2b00      	cmp	r3, #0
  404148:	bf14      	ite	ne
  40414a:	2301      	movne	r3, #1
  40414c:	2300      	moveq	r3, #0
  40414e:	b2db      	uxtb	r3, r3
  404150:	2291      	movs	r2, #145	; 0x91
  404152:	4916      	ldr	r1, [pc, #88]	; (4041ac <_uart_get_irq_num+0x70>)
  404154:	4618      	mov	r0, r3
  404156:	4b16      	ldr	r3, [pc, #88]	; (4041b0 <_uart_get_irq_num+0x74>)
  404158:	4798      	blx	r3
	uint8_t i;
	i = _uart_get_hardware_index(hw);
  40415a:	6878      	ldr	r0, [r7, #4]
  40415c:	4b15      	ldr	r3, [pc, #84]	; (4041b4 <_uart_get_irq_num+0x78>)
  40415e:	4798      	blx	r3
  404160:	4603      	mov	r3, r0
  404162:	73fb      	strb	r3, [r7, #15]
	switch (i) {
  404164:	7bfb      	ldrb	r3, [r7, #15]
  404166:	2b04      	cmp	r3, #4
  404168:	d816      	bhi.n	404198 <_uart_get_irq_num+0x5c>
  40416a:	a201      	add	r2, pc, #4	; (adr r2, 404170 <_uart_get_irq_num+0x34>)
  40416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404170:	00404185 	.word	0x00404185
  404174:	00404189 	.word	0x00404189
  404178:	0040418d 	.word	0x0040418d
  40417c:	00404191 	.word	0x00404191
  404180:	00404195 	.word	0x00404195
	case 0:
		return UART0_IRQn;
  404184:	2307      	movs	r3, #7
  404186:	e00d      	b.n	4041a4 <_uart_get_irq_num+0x68>

	case 1:
		return UART1_IRQn;
  404188:	2308      	movs	r3, #8
  40418a:	e00b      	b.n	4041a4 <_uart_get_irq_num+0x68>
	case 2:
		return UART2_IRQn;
  40418c:	232c      	movs	r3, #44	; 0x2c
  40418e:	e009      	b.n	4041a4 <_uart_get_irq_num+0x68>

	case 3:
		return UART3_IRQn;
  404190:	232d      	movs	r3, #45	; 0x2d
  404192:	e007      	b.n	4041a4 <_uart_get_irq_num+0x68>

	case 4:
		return UART4_IRQn;
  404194:	232e      	movs	r3, #46	; 0x2e
  404196:	e005      	b.n	4041a4 <_uart_get_irq_num+0x68>
	default:
		ASSERT(false);
  404198:	22a3      	movs	r2, #163	; 0xa3
  40419a:	4904      	ldr	r1, [pc, #16]	; (4041ac <_uart_get_irq_num+0x70>)
  40419c:	2000      	movs	r0, #0
  40419e:	4b04      	ldr	r3, [pc, #16]	; (4041b0 <_uart_get_irq_num+0x74>)
  4041a0:	4798      	blx	r3
		return ERR_INVALID_DATA;
  4041a2:	23ff      	movs	r3, #255	; 0xff
	}
}
  4041a4:	4618      	mov	r0, r3
  4041a6:	3710      	adds	r7, #16
  4041a8:	46bd      	mov	sp, r7
  4041aa:	bd80      	pop	{r7, pc}
  4041ac:	00406be0 	.word	0x00406be0
  4041b0:	004020b9 	.word	0x004020b9
  4041b4:	004044ad 	.word	0x004044ad

004041b8 <_uart_init_irq_param>:

/**
 * \brief Init irq param with the given twi hardware instance
 */
static void _uart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
  4041b8:	b480      	push	{r7}
  4041ba:	b083      	sub	sp, #12
  4041bc:	af00      	add	r7, sp, #0
  4041be:	6078      	str	r0, [r7, #4]
  4041c0:	6039      	str	r1, [r7, #0]
	if (hw == UART4) {
  4041c2:	687b      	ldr	r3, [r7, #4]
  4041c4:	4a05      	ldr	r2, [pc, #20]	; (4041dc <_uart_init_irq_param+0x24>)
  4041c6:	4293      	cmp	r3, r2
  4041c8:	d102      	bne.n	4041d0 <_uart_init_irq_param+0x18>
		_uart4_dev = dev;
  4041ca:	4a05      	ldr	r2, [pc, #20]	; (4041e0 <_uart_init_irq_param+0x28>)
  4041cc:	683b      	ldr	r3, [r7, #0]
  4041ce:	6013      	str	r3, [r2, #0]
	}
}
  4041d0:	bf00      	nop
  4041d2:	370c      	adds	r7, #12
  4041d4:	46bd      	mov	sp, r7
  4041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041da:	4770      	bx	lr
  4041dc:	400e1e00 	.word	0x400e1e00
  4041e0:	2040116c 	.word	0x2040116c

004041e4 <_usart_sync_init>:

/**
 * \brief Initialize synchronous UART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
  4041e4:	b580      	push	{r7, lr}
  4041e6:	b082      	sub	sp, #8
  4041e8:	af00      	add	r7, sp, #0
  4041ea:	6078      	str	r0, [r7, #4]
  4041ec:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  4041ee:	687b      	ldr	r3, [r7, #4]
  4041f0:	2b00      	cmp	r3, #0
  4041f2:	bf14      	ite	ne
  4041f4:	2301      	movne	r3, #1
  4041f6:	2300      	moveq	r3, #0
  4041f8:	b2db      	uxtb	r3, r3
  4041fa:	22b7      	movs	r2, #183	; 0xb7
  4041fc:	490c      	ldr	r1, [pc, #48]	; (404230 <_usart_sync_init+0x4c>)
  4041fe:	4618      	mov	r0, r3
  404200:	4b0c      	ldr	r3, [pc, #48]	; (404234 <_usart_sync_init+0x50>)
  404202:	4798      	blx	r3
	ASSERT(hw);
  404204:	683b      	ldr	r3, [r7, #0]
  404206:	2b00      	cmp	r3, #0
  404208:	bf14      	ite	ne
  40420a:	2301      	movne	r3, #1
  40420c:	2300      	moveq	r3, #0
  40420e:	b2db      	uxtb	r3, r3
  404210:	22b8      	movs	r2, #184	; 0xb8
  404212:	4907      	ldr	r1, [pc, #28]	; (404230 <_usart_sync_init+0x4c>)
  404214:	4618      	mov	r0, r3
  404216:	4b07      	ldr	r3, [pc, #28]	; (404234 <_usart_sync_init+0x50>)
  404218:	4798      	blx	r3

	device->hw = hw;
  40421a:	687b      	ldr	r3, [r7, #4]
  40421c:	683a      	ldr	r2, [r7, #0]
  40421e:	601a      	str	r2, [r3, #0]

	return _uart_init(hw);
  404220:	6838      	ldr	r0, [r7, #0]
  404222:	4b05      	ldr	r3, [pc, #20]	; (404238 <_usart_sync_init+0x54>)
  404224:	4798      	blx	r3
  404226:	4603      	mov	r3, r0
}
  404228:	4618      	mov	r0, r3
  40422a:	3708      	adds	r7, #8
  40422c:	46bd      	mov	sp, r7
  40422e:	bd80      	pop	{r7, pc}
  404230:	00406be0 	.word	0x00406be0
  404234:	004020b9 	.word	0x004020b9
  404238:	00404711 	.word	0x00404711

0040423c <_usart_async_init>:

/**
 * \brief Initialize asynchronous UART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
  40423c:	b580      	push	{r7, lr}
  40423e:	b084      	sub	sp, #16
  404240:	af00      	add	r7, sp, #0
  404242:	6078      	str	r0, [r7, #4]
  404244:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
  404246:	687b      	ldr	r3, [r7, #4]
  404248:	2b00      	cmp	r3, #0
  40424a:	bf14      	ite	ne
  40424c:	2301      	movne	r3, #1
  40424e:	2300      	moveq	r3, #0
  404250:	b2db      	uxtb	r3, r3
  404252:	22c6      	movs	r2, #198	; 0xc6
  404254:	4918      	ldr	r1, [pc, #96]	; (4042b8 <_usart_async_init+0x7c>)
  404256:	4618      	mov	r0, r3
  404258:	4b18      	ldr	r3, [pc, #96]	; (4042bc <_usart_async_init+0x80>)
  40425a:	4798      	blx	r3

	init_status = _uart_init(hw);
  40425c:	6838      	ldr	r0, [r7, #0]
  40425e:	4b18      	ldr	r3, [pc, #96]	; (4042c0 <_usart_async_init+0x84>)
  404260:	4798      	blx	r3
  404262:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  404264:	68fb      	ldr	r3, [r7, #12]
  404266:	2b00      	cmp	r3, #0
  404268:	d001      	beq.n	40426e <_usart_async_init+0x32>
		return init_status;
  40426a:	68fb      	ldr	r3, [r7, #12]
  40426c:	e01f      	b.n	4042ae <_usart_async_init+0x72>
	}
	device->hw = hw;
  40426e:	687b      	ldr	r3, [r7, #4]
  404270:	683a      	ldr	r2, [r7, #0]
  404272:	619a      	str	r2, [r3, #24]

	_uart_init_irq_param(hw, device);
  404274:	6879      	ldr	r1, [r7, #4]
  404276:	6838      	ldr	r0, [r7, #0]
  404278:	4b12      	ldr	r3, [pc, #72]	; (4042c4 <_usart_async_init+0x88>)
  40427a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  40427c:	6838      	ldr	r0, [r7, #0]
  40427e:	4b12      	ldr	r3, [pc, #72]	; (4042c8 <_usart_async_init+0x8c>)
  404280:	4798      	blx	r3
  404282:	4603      	mov	r3, r0
  404284:	b25b      	sxtb	r3, r3
  404286:	4618      	mov	r0, r3
  404288:	4b10      	ldr	r3, [pc, #64]	; (4042cc <_usart_async_init+0x90>)
  40428a:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_uart_get_irq_num(hw));
  40428c:	6838      	ldr	r0, [r7, #0]
  40428e:	4b0e      	ldr	r3, [pc, #56]	; (4042c8 <_usart_async_init+0x8c>)
  404290:	4798      	blx	r3
  404292:	4603      	mov	r3, r0
  404294:	b25b      	sxtb	r3, r3
  404296:	4618      	mov	r0, r3
  404298:	4b0d      	ldr	r3, [pc, #52]	; (4042d0 <_usart_async_init+0x94>)
  40429a:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  40429c:	6838      	ldr	r0, [r7, #0]
  40429e:	4b0a      	ldr	r3, [pc, #40]	; (4042c8 <_usart_async_init+0x8c>)
  4042a0:	4798      	blx	r3
  4042a2:	4603      	mov	r3, r0
  4042a4:	b25b      	sxtb	r3, r3
  4042a6:	4618      	mov	r0, r3
  4042a8:	4b0a      	ldr	r3, [pc, #40]	; (4042d4 <_usart_async_init+0x98>)
  4042aa:	4798      	blx	r3

	return ERR_NONE;
  4042ac:	2300      	movs	r3, #0
}
  4042ae:	4618      	mov	r0, r3
  4042b0:	3710      	adds	r7, #16
  4042b2:	46bd      	mov	sp, r7
  4042b4:	bd80      	pop	{r7, pc}
  4042b6:	bf00      	nop
  4042b8:	00406be0 	.word	0x00406be0
  4042bc:	004020b9 	.word	0x004020b9
  4042c0:	00404711 	.word	0x00404711
  4042c4:	004041b9 	.word	0x004041b9
  4042c8:	0040413d 	.word	0x0040413d
  4042cc:	00403ea9 	.word	0x00403ea9
  4042d0:	00403edd 	.word	0x00403edd
  4042d4:	00403e75 	.word	0x00403e75

004042d8 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
  4042d8:	b580      	push	{r7, lr}
  4042da:	b082      	sub	sp, #8
  4042dc:	af00      	add	r7, sp, #0
  4042de:	6078      	str	r0, [r7, #4]
  4042e0:	460b      	mov	r3, r1
  4042e2:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  4042e4:	687b      	ldr	r3, [r7, #4]
  4042e6:	2b00      	cmp	r3, #0
  4042e8:	bf14      	ite	ne
  4042ea:	2301      	movne	r3, #1
  4042ec:	2300      	moveq	r3, #0
  4042ee:	b2db      	uxtb	r3, r3
  4042f0:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
  4042f4:	4907      	ldr	r1, [pc, #28]	; (404314 <_usart_sync_write_byte+0x3c>)
  4042f6:	4618      	mov	r0, r3
  4042f8:	4b07      	ldr	r3, [pc, #28]	; (404318 <_usart_sync_write_byte+0x40>)
  4042fa:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  4042fc:	687b      	ldr	r3, [r7, #4]
  4042fe:	681b      	ldr	r3, [r3, #0]
  404300:	78fa      	ldrb	r2, [r7, #3]
  404302:	4611      	mov	r1, r2
  404304:	4618      	mov	r0, r3
  404306:	4b05      	ldr	r3, [pc, #20]	; (40431c <_usart_sync_write_byte+0x44>)
  404308:	4798      	blx	r3
}
  40430a:	bf00      	nop
  40430c:	3708      	adds	r7, #8
  40430e:	46bd      	mov	sp, r7
  404310:	bd80      	pop	{r7, pc}
  404312:	bf00      	nop
  404314:	00406be0 	.word	0x00406be0
  404318:	004020b9 	.word	0x004020b9
  40431c:	0040400f 	.word	0x0040400f

00404320 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
  404320:	b580      	push	{r7, lr}
  404322:	b082      	sub	sp, #8
  404324:	af00      	add	r7, sp, #0
  404326:	6078      	str	r0, [r7, #4]
  404328:	460b      	mov	r3, r1
  40432a:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  40432c:	687b      	ldr	r3, [r7, #4]
  40432e:	2b00      	cmp	r3, #0
  404330:	bf14      	ite	ne
  404332:	2301      	movne	r3, #1
  404334:	2300      	moveq	r3, #0
  404336:	b2db      	uxtb	r3, r3
  404338:	f240 12ab 	movw	r2, #427	; 0x1ab
  40433c:	4907      	ldr	r1, [pc, #28]	; (40435c <_usart_async_write_byte+0x3c>)
  40433e:	4618      	mov	r0, r3
  404340:	4b07      	ldr	r3, [pc, #28]	; (404360 <_usart_async_write_byte+0x40>)
  404342:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  404344:	687b      	ldr	r3, [r7, #4]
  404346:	699b      	ldr	r3, [r3, #24]
  404348:	78fa      	ldrb	r2, [r7, #3]
  40434a:	4611      	mov	r1, r2
  40434c:	4618      	mov	r0, r3
  40434e:	4b05      	ldr	r3, [pc, #20]	; (404364 <_usart_async_write_byte+0x44>)
  404350:	4798      	blx	r3
}
  404352:	bf00      	nop
  404354:	3708      	adds	r7, #8
  404356:	46bd      	mov	sp, r7
  404358:	bd80      	pop	{r7, pc}
  40435a:	bf00      	nop
  40435c:	00406be0 	.word	0x00406be0
  404360:	004020b9 	.word	0x004020b9
  404364:	0040400f 	.word	0x0040400f

00404368 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given UART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
  404368:	b580      	push	{r7, lr}
  40436a:	b082      	sub	sp, #8
  40436c:	af00      	add	r7, sp, #0
  40436e:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404370:	687b      	ldr	r3, [r7, #4]
  404372:	2b00      	cmp	r3, #0
  404374:	bf14      	ite	ne
  404376:	2301      	movne	r3, #1
  404378:	2300      	moveq	r3, #0
  40437a:	b2db      	uxtb	r3, r3
  40437c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
  404380:	4907      	ldr	r1, [pc, #28]	; (4043a0 <_usart_sync_read_byte+0x38>)
  404382:	4618      	mov	r0, r3
  404384:	4b07      	ldr	r3, [pc, #28]	; (4043a4 <_usart_sync_read_byte+0x3c>)
  404386:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  404388:	687b      	ldr	r3, [r7, #4]
  40438a:	681b      	ldr	r3, [r3, #0]
  40438c:	4618      	mov	r0, r3
  40438e:	4b06      	ldr	r3, [pc, #24]	; (4043a8 <_usart_sync_read_byte+0x40>)
  404390:	4798      	blx	r3
  404392:	4603      	mov	r3, r0
  404394:	b2db      	uxtb	r3, r3
}
  404396:	4618      	mov	r0, r3
  404398:	3708      	adds	r7, #8
  40439a:	46bd      	mov	sp, r7
  40439c:	bd80      	pop	{r7, pc}
  40439e:	bf00      	nop
  4043a0:	00406be0 	.word	0x00406be0
  4043a4:	004020b9 	.word	0x004020b9
  4043a8:	0040410b 	.word	0x0040410b

004043ac <_usart_sync_is_byte_sent>:

/**
 * \brief Check if UART is ready to send next byte
 */
bool _usart_sync_is_byte_sent(const struct _usart_sync_device *const device)
{
  4043ac:	b580      	push	{r7, lr}
  4043ae:	b082      	sub	sp, #8
  4043b0:	af00      	add	r7, sp, #0
  4043b2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4043b4:	687b      	ldr	r3, [r7, #4]
  4043b6:	2b00      	cmp	r3, #0
  4043b8:	bf14      	ite	ne
  4043ba:	2301      	movne	r3, #1
  4043bc:	2300      	moveq	r3, #0
  4043be:	b2db      	uxtb	r3, r3
  4043c0:	f240 12bd 	movw	r2, #445	; 0x1bd
  4043c4:	4906      	ldr	r1, [pc, #24]	; (4043e0 <_usart_sync_is_byte_sent+0x34>)
  4043c6:	4618      	mov	r0, r3
  4043c8:	4b06      	ldr	r3, [pc, #24]	; (4043e4 <_usart_sync_is_byte_sent+0x38>)
  4043ca:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  4043cc:	687b      	ldr	r3, [r7, #4]
  4043ce:	681b      	ldr	r3, [r3, #0]
  4043d0:	4618      	mov	r0, r3
  4043d2:	4b05      	ldr	r3, [pc, #20]	; (4043e8 <_usart_sync_is_byte_sent+0x3c>)
  4043d4:	4798      	blx	r3
  4043d6:	4603      	mov	r3, r0
}
  4043d8:	4618      	mov	r0, r3
  4043da:	3708      	adds	r7, #8
  4043dc:	46bd      	mov	sp, r7
  4043de:	bd80      	pop	{r7, pc}
  4043e0:	00406be0 	.word	0x00406be0
  4043e4:	004020b9 	.word	0x004020b9
  4043e8:	004040a7 	.word	0x004040a7

004043ec <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by UART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
  4043ec:	b580      	push	{r7, lr}
  4043ee:	b082      	sub	sp, #8
  4043f0:	af00      	add	r7, sp, #0
  4043f2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4043f4:	687b      	ldr	r3, [r7, #4]
  4043f6:	2b00      	cmp	r3, #0
  4043f8:	bf14      	ite	ne
  4043fa:	2301      	movne	r3, #1
  4043fc:	2300      	moveq	r3, #0
  4043fe:	b2db      	uxtb	r3, r3
  404400:	f240 12cf 	movw	r2, #463	; 0x1cf
  404404:	4906      	ldr	r1, [pc, #24]	; (404420 <_usart_sync_is_byte_received+0x34>)
  404406:	4618      	mov	r0, r3
  404408:	4b06      	ldr	r3, [pc, #24]	; (404424 <_usart_sync_is_byte_received+0x38>)
  40440a:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  40440c:	687b      	ldr	r3, [r7, #4]
  40440e:	681b      	ldr	r3, [r3, #0]
  404410:	4618      	mov	r0, r3
  404412:	4b05      	ldr	r3, [pc, #20]	; (404428 <_usart_sync_is_byte_received+0x3c>)
  404414:	4798      	blx	r3
  404416:	4603      	mov	r3, r0
}
  404418:	4618      	mov	r0, r3
  40441a:	3708      	adds	r7, #8
  40441c:	46bd      	mov	sp, r7
  40441e:	bd80      	pop	{r7, pc}
  404420:	00406be0 	.word	0x00406be0
  404424:	004020b9 	.word	0x004020b9
  404428:	00404081 	.word	0x00404081

0040442c <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
  40442c:	b580      	push	{r7, lr}
  40442e:	b082      	sub	sp, #8
  404430:	af00      	add	r7, sp, #0
  404432:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404434:	687b      	ldr	r3, [r7, #4]
  404436:	2b00      	cmp	r3, #0
  404438:	bf14      	ite	ne
  40443a:	2301      	movne	r3, #1
  40443c:	2300      	moveq	r3, #0
  40443e:	b2db      	uxtb	r3, r3
  404440:	f240 220a 	movw	r2, #522	; 0x20a
  404444:	4906      	ldr	r1, [pc, #24]	; (404460 <_usart_async_enable_byte_sent_irq+0x34>)
  404446:	4618      	mov	r0, r3
  404448:	4b06      	ldr	r3, [pc, #24]	; (404464 <_usart_async_enable_byte_sent_irq+0x38>)
  40444a:	4798      	blx	r3
	hri_uart_set_IMR_TXRDY_bit(device->hw);
  40444c:	687b      	ldr	r3, [r7, #4]
  40444e:	699b      	ldr	r3, [r3, #24]
  404450:	4618      	mov	r0, r3
  404452:	4b05      	ldr	r3, [pc, #20]	; (404468 <_usart_async_enable_byte_sent_irq+0x3c>)
  404454:	4798      	blx	r3
}
  404456:	bf00      	nop
  404458:	3708      	adds	r7, #8
  40445a:	46bd      	mov	sp, r7
  40445c:	bd80      	pop	{r7, pc}
  40445e:	bf00      	nop
  404460:	00406be0 	.word	0x00406be0
  404464:	004020b9 	.word	0x004020b9
  404468:	00403f37 	.word	0x00403f37

0040446c <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
  40446c:	b580      	push	{r7, lr}
  40446e:	b082      	sub	sp, #8
  404470:	af00      	add	r7, sp, #0
  404472:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404474:	687b      	ldr	r3, [r7, #4]
  404476:	2b00      	cmp	r3, #0
  404478:	bf14      	ite	ne
  40447a:	2301      	movne	r3, #1
  40447c:	2300      	moveq	r3, #0
  40447e:	b2db      	uxtb	r3, r3
  404480:	f240 2213 	movw	r2, #531	; 0x213
  404484:	4906      	ldr	r1, [pc, #24]	; (4044a0 <_usart_async_enable_tx_done_irq+0x34>)
  404486:	4618      	mov	r0, r3
  404488:	4b06      	ldr	r3, [pc, #24]	; (4044a4 <_usart_async_enable_tx_done_irq+0x38>)
  40448a:	4798      	blx	r3
	hri_uart_set_IMR_TXEMPTY_bit(device->hw);
  40448c:	687b      	ldr	r3, [r7, #4]
  40448e:	699b      	ldr	r3, [r3, #24]
  404490:	4618      	mov	r0, r3
  404492:	4b05      	ldr	r3, [pc, #20]	; (4044a8 <_usart_async_enable_tx_done_irq+0x3c>)
  404494:	4798      	blx	r3
}
  404496:	bf00      	nop
  404498:	3708      	adds	r7, #8
  40449a:	46bd      	mov	sp, r7
  40449c:	bd80      	pop	{r7, pc}
  40449e:	bf00      	nop
  4044a0:	00406be0 	.word	0x00406be0
  4044a4:	004020b9 	.word	0x004020b9
  4044a8:	00403f93 	.word	0x00403f93

004044ac <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4044ac:	b580      	push	{r7, lr}
  4044ae:	b082      	sub	sp, #8
  4044b0:	af00      	add	r7, sp, #0
  4044b2:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4044b4:	687b      	ldr	r3, [r7, #4]
  4044b6:	2b00      	cmp	r3, #0
  4044b8:	bf14      	ite	ne
  4044ba:	2301      	movne	r3, #1
  4044bc:	2300      	moveq	r3, #0
  4044be:	b2db      	uxtb	r3, r3
  4044c0:	f240 221d 	movw	r2, #541	; 0x21d
  4044c4:	4913      	ldr	r1, [pc, #76]	; (404514 <_uart_get_hardware_index+0x68>)
  4044c6:	4618      	mov	r0, r3
  4044c8:	4b13      	ldr	r3, [pc, #76]	; (404518 <_uart_get_hardware_index+0x6c>)
  4044ca:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4044cc:	687b      	ldr	r3, [r7, #4]
  4044ce:	4a13      	ldr	r2, [pc, #76]	; (40451c <_uart_get_hardware_index+0x70>)
  4044d0:	4293      	cmp	r3, r2
  4044d2:	d101      	bne.n	4044d8 <_uart_get_hardware_index+0x2c>
		return 0;
  4044d4:	2300      	movs	r3, #0
  4044d6:	e018      	b.n	40450a <_uart_get_hardware_index+0x5e>
	} else if (UART1 == hw) {
  4044d8:	687b      	ldr	r3, [r7, #4]
  4044da:	4a11      	ldr	r2, [pc, #68]	; (404520 <_uart_get_hardware_index+0x74>)
  4044dc:	4293      	cmp	r3, r2
  4044de:	d101      	bne.n	4044e4 <_uart_get_hardware_index+0x38>
		return 1;
  4044e0:	2301      	movs	r3, #1
  4044e2:	e012      	b.n	40450a <_uart_get_hardware_index+0x5e>
	} else if (UART2 == hw) {
  4044e4:	687b      	ldr	r3, [r7, #4]
  4044e6:	4a0f      	ldr	r2, [pc, #60]	; (404524 <_uart_get_hardware_index+0x78>)
  4044e8:	4293      	cmp	r3, r2
  4044ea:	d101      	bne.n	4044f0 <_uart_get_hardware_index+0x44>
		return 2;
  4044ec:	2302      	movs	r3, #2
  4044ee:	e00c      	b.n	40450a <_uart_get_hardware_index+0x5e>
	} else if (UART3 == hw) {
  4044f0:	687b      	ldr	r3, [r7, #4]
  4044f2:	4a0d      	ldr	r2, [pc, #52]	; (404528 <_uart_get_hardware_index+0x7c>)
  4044f4:	4293      	cmp	r3, r2
  4044f6:	d101      	bne.n	4044fc <_uart_get_hardware_index+0x50>
		return 3;
  4044f8:	2303      	movs	r3, #3
  4044fa:	e006      	b.n	40450a <_uart_get_hardware_index+0x5e>
	} else if (UART4 == hw) {
  4044fc:	687b      	ldr	r3, [r7, #4]
  4044fe:	4a0b      	ldr	r2, [pc, #44]	; (40452c <_uart_get_hardware_index+0x80>)
  404500:	4293      	cmp	r3, r2
  404502:	d101      	bne.n	404508 <_uart_get_hardware_index+0x5c>
		return 4;
  404504:	2304      	movs	r3, #4
  404506:	e000      	b.n	40450a <_uart_get_hardware_index+0x5e>
	} else {
		return ERR_INVALID_DATA;
  404508:	23ff      	movs	r3, #255	; 0xff
	}
}
  40450a:	4618      	mov	r0, r3
  40450c:	3708      	adds	r7, #8
  40450e:	46bd      	mov	sp, r7
  404510:	bd80      	pop	{r7, pc}
  404512:	bf00      	nop
  404514:	00406be0 	.word	0x00406be0
  404518:	004020b9 	.word	0x004020b9
  40451c:	400e0800 	.word	0x400e0800
  404520:	400e0a00 	.word	0x400e0a00
  404524:	400e1a00 	.word	0x400e1a00
  404528:	400e1c00 	.word	0x400e1c00
  40452c:	400e1e00 	.word	0x400e1e00

00404530 <_uart_get_usart_sync>:

/**
 * \brief Retrieve usart sync helper functions
 */
void *_uart_get_usart_sync(void)
{
  404530:	b480      	push	{r7}
  404532:	af00      	add	r7, sp, #0
	return (void *)NULL;
  404534:	2300      	movs	r3, #0
}
  404536:	4618      	mov	r0, r3
  404538:	46bd      	mov	sp, r7
  40453a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40453e:	4770      	bx	lr

00404540 <_uart_get_usart_async>:

/**
 * \brief Retrieve usart async helper functions
 */
void *_uart_get_usart_async(void)
{
  404540:	b480      	push	{r7}
  404542:	af00      	add	r7, sp, #0
	return (void *)NULL;
  404544:	2300      	movs	r3, #0
}
  404546:	4618      	mov	r0, r3
  404548:	46bd      	mov	sp, r7
  40454a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40454e:	4770      	bx	lr

00404550 <_uart_interrupt_handler>:
 * \internal Uart interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _uart_interrupt_handler(struct _usart_async_device *device)
{
  404550:	b590      	push	{r4, r7, lr}
  404552:	b085      	sub	sp, #20
  404554:	af00      	add	r7, sp, #0
  404556:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  404558:	687b      	ldr	r3, [r7, #4]
  40455a:	2b00      	cmp	r3, #0
  40455c:	bf14      	ite	ne
  40455e:	2301      	movne	r3, #1
  404560:	2300      	moveq	r3, #0
  404562:	b2db      	uxtb	r3, r3
  404564:	f240 2281 	movw	r2, #641	; 0x281
  404568:	4935      	ldr	r1, [pc, #212]	; (404640 <_uart_interrupt_handler+0xf0>)
  40456a:	4618      	mov	r0, r3
  40456c:	4b35      	ldr	r3, [pc, #212]	; (404644 <_uart_interrupt_handler+0xf4>)
  40456e:	4798      	blx	r3
	void *hw = device->hw;
  404570:	687b      	ldr	r3, [r7, #4]
  404572:	699b      	ldr	r3, [r3, #24]
  404574:	60fb      	str	r3, [r7, #12]

	if (hri_uart_get_SR_TXRDY_bit(hw) && hri_uart_get_IMR_TXRDY_bit(hw)) {
  404576:	68f8      	ldr	r0, [r7, #12]
  404578:	4b33      	ldr	r3, [pc, #204]	; (404648 <_uart_interrupt_handler+0xf8>)
  40457a:	4798      	blx	r3
  40457c:	4603      	mov	r3, r0
  40457e:	2b00      	cmp	r3, #0
  404580:	d00d      	beq.n	40459e <_uart_interrupt_handler+0x4e>
  404582:	68f8      	ldr	r0, [r7, #12]
  404584:	4b31      	ldr	r3, [pc, #196]	; (40464c <_uart_interrupt_handler+0xfc>)
  404586:	4798      	blx	r3
  404588:	4603      	mov	r3, r0
  40458a:	2b00      	cmp	r3, #0
  40458c:	d007      	beq.n	40459e <_uart_interrupt_handler+0x4e>
		hri_uart_clear_IMR_TXRDY_bit(hw);
  40458e:	68f8      	ldr	r0, [r7, #12]
  404590:	4b2f      	ldr	r3, [pc, #188]	; (404650 <_uart_interrupt_handler+0x100>)
  404592:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
  404594:	687b      	ldr	r3, [r7, #4]
  404596:	681b      	ldr	r3, [r3, #0]
  404598:	6878      	ldr	r0, [r7, #4]
  40459a:	4798      	blx	r3
  40459c:	e04c      	b.n	404638 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_TXEMPTY_bit(hw) && hri_uart_get_IMR_TXEMPTY_bit(hw)) {
  40459e:	68f8      	ldr	r0, [r7, #12]
  4045a0:	4b2c      	ldr	r3, [pc, #176]	; (404654 <_uart_interrupt_handler+0x104>)
  4045a2:	4798      	blx	r3
  4045a4:	4603      	mov	r3, r0
  4045a6:	2b00      	cmp	r3, #0
  4045a8:	d00d      	beq.n	4045c6 <_uart_interrupt_handler+0x76>
  4045aa:	68f8      	ldr	r0, [r7, #12]
  4045ac:	4b2a      	ldr	r3, [pc, #168]	; (404658 <_uart_interrupt_handler+0x108>)
  4045ae:	4798      	blx	r3
  4045b0:	4603      	mov	r3, r0
  4045b2:	2b00      	cmp	r3, #0
  4045b4:	d007      	beq.n	4045c6 <_uart_interrupt_handler+0x76>
		hri_uart_clear_IMR_TXEMPTY_bit(hw);
  4045b6:	68f8      	ldr	r0, [r7, #12]
  4045b8:	4b28      	ldr	r3, [pc, #160]	; (40465c <_uart_interrupt_handler+0x10c>)
  4045ba:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
  4045bc:	687b      	ldr	r3, [r7, #4]
  4045be:	689b      	ldr	r3, [r3, #8]
  4045c0:	6878      	ldr	r0, [r7, #4]
  4045c2:	4798      	blx	r3
  4045c4:	e038      	b.n	404638 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_RXRDY_bit(hw) && hri_uart_get_IMR_RXRDY_bit(hw)) {
  4045c6:	68f8      	ldr	r0, [r7, #12]
  4045c8:	4b25      	ldr	r3, [pc, #148]	; (404660 <_uart_interrupt_handler+0x110>)
  4045ca:	4798      	blx	r3
  4045cc:	4603      	mov	r3, r0
  4045ce:	2b00      	cmp	r3, #0
  4045d0:	d021      	beq.n	404616 <_uart_interrupt_handler+0xc6>
  4045d2:	68f8      	ldr	r0, [r7, #12]
  4045d4:	4b23      	ldr	r3, [pc, #140]	; (404664 <_uart_interrupt_handler+0x114>)
  4045d6:	4798      	blx	r3
  4045d8:	4603      	mov	r3, r0
  4045da:	2b00      	cmp	r3, #0
  4045dc:	d01b      	beq.n	404616 <_uart_interrupt_handler+0xc6>
		if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  4045de:	68f8      	ldr	r0, [r7, #12]
  4045e0:	4b21      	ldr	r3, [pc, #132]	; (404668 <_uart_interrupt_handler+0x118>)
  4045e2:	4798      	blx	r3
  4045e4:	4603      	mov	r3, r0
  4045e6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  4045ea:	2b00      	cmp	r3, #0
  4045ec:	d008      	beq.n	404600 <_uart_interrupt_handler+0xb0>
			hri_uart_read_RHR_reg(hw);
  4045ee:	68f8      	ldr	r0, [r7, #12]
  4045f0:	4b1e      	ldr	r3, [pc, #120]	; (40466c <_uart_interrupt_handler+0x11c>)
  4045f2:	4798      	blx	r3
			hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  4045f4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4045f8:	68f8      	ldr	r0, [r7, #12]
  4045fa:	4b1d      	ldr	r3, [pc, #116]	; (404670 <_uart_interrupt_handler+0x120>)
  4045fc:	4798      	blx	r3
			return;
  4045fe:	e01b      	b.n	404638 <_uart_interrupt_handler+0xe8>
		}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_uart_read_RHR_RXCHR_bf(hw));
  404600:	687b      	ldr	r3, [r7, #4]
  404602:	685c      	ldr	r4, [r3, #4]
  404604:	68f8      	ldr	r0, [r7, #12]
  404606:	4b1b      	ldr	r3, [pc, #108]	; (404674 <_uart_interrupt_handler+0x124>)
  404608:	4798      	blx	r3
  40460a:	4603      	mov	r3, r0
  40460c:	b2db      	uxtb	r3, r3
  40460e:	4619      	mov	r1, r3
  404610:	6878      	ldr	r0, [r7, #4]
  404612:	47a0      	blx	r4
  404614:	e010      	b.n	404638 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  404616:	68f8      	ldr	r0, [r7, #12]
  404618:	4b13      	ldr	r3, [pc, #76]	; (404668 <_uart_interrupt_handler+0x118>)
  40461a:	4798      	blx	r3
  40461c:	4603      	mov	r3, r0
  40461e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  404622:	2b00      	cmp	r3, #0
  404624:	d008      	beq.n	404638 <_uart_interrupt_handler+0xe8>
		hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  404626:	f44f 7180 	mov.w	r1, #256	; 0x100
  40462a:	68f8      	ldr	r0, [r7, #12]
  40462c:	4b10      	ldr	r3, [pc, #64]	; (404670 <_uart_interrupt_handler+0x120>)
  40462e:	4798      	blx	r3
		device->usart_cb.error_cb(device);
  404630:	687b      	ldr	r3, [r7, #4]
  404632:	68db      	ldr	r3, [r3, #12]
  404634:	6878      	ldr	r0, [r7, #4]
  404636:	4798      	blx	r3
	}
}
  404638:	3714      	adds	r7, #20
  40463a:	46bd      	mov	sp, r7
  40463c:	bd90      	pop	{r4, r7, pc}
  40463e:	bf00      	nop
  404640:	00406be0 	.word	0x00406be0
  404644:	004020b9 	.word	0x004020b9
  404648:	004040a7 	.word	0x004040a7
  40464c:	00403f51 	.word	0x00403f51
  404650:	00403f79 	.word	0x00403f79
  404654:	004040cd 	.word	0x004040cd
  404658:	00403faf 	.word	0x00403faf
  40465c:	00403fd7 	.word	0x00403fd7
  404660:	00404081 	.word	0x00404081
  404664:	00403f11 	.word	0x00403f11
  404668:	004040f3 	.word	0x004040f3
  40466c:	00404125 	.word	0x00404125
  404670:	00403ff3 	.word	0x00403ff3
  404674:	0040410b 	.word	0x0040410b

00404678 <UART4_Handler>:

/**
 * \internal UART interrupt handler
 */
void UART4_Handler(void)
{
  404678:	b580      	push	{r7, lr}
  40467a:	af00      	add	r7, sp, #0
	_uart_interrupt_handler(_uart4_dev);
  40467c:	4b03      	ldr	r3, [pc, #12]	; (40468c <UART4_Handler+0x14>)
  40467e:	681b      	ldr	r3, [r3, #0]
  404680:	4618      	mov	r0, r3
  404682:	4b03      	ldr	r3, [pc, #12]	; (404690 <UART4_Handler+0x18>)
  404684:	4798      	blx	r3
}
  404686:	bf00      	nop
  404688:	bd80      	pop	{r7, pc}
  40468a:	bf00      	nop
  40468c:	2040116c 	.word	0x2040116c
  404690:	00404551 	.word	0x00404551

00404694 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  404694:	b580      	push	{r7, lr}
  404696:	b084      	sub	sp, #16
  404698:	af00      	add	r7, sp, #0
  40469a:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  40469c:	687b      	ldr	r3, [r7, #4]
  40469e:	2b00      	cmp	r3, #0
  4046a0:	bf14      	ite	ne
  4046a2:	2301      	movne	r3, #1
  4046a4:	2300      	moveq	r3, #0
  4046a6:	b2db      	uxtb	r3, r3
  4046a8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  4046ac:	4914      	ldr	r1, [pc, #80]	; (404700 <_get_uart_index+0x6c>)
  4046ae:	4618      	mov	r0, r3
  4046b0:	4b14      	ldr	r3, [pc, #80]	; (404704 <_get_uart_index+0x70>)
  4046b2:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  4046b4:	6878      	ldr	r0, [r7, #4]
  4046b6:	4b14      	ldr	r3, [pc, #80]	; (404708 <_get_uart_index+0x74>)
  4046b8:	4798      	blx	r3
  4046ba:	4603      	mov	r3, r0
  4046bc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4046be:	2300      	movs	r3, #0
  4046c0:	73fb      	strb	r3, [r7, #15]
  4046c2:	e00f      	b.n	4046e4 <_get_uart_index+0x50>
		if (_uarts[i].number == uart_offset) {
  4046c4:	7bfa      	ldrb	r2, [r7, #15]
  4046c6:	4911      	ldr	r1, [pc, #68]	; (40470c <_get_uart_index+0x78>)
  4046c8:	4613      	mov	r3, r2
  4046ca:	005b      	lsls	r3, r3, #1
  4046cc:	4413      	add	r3, r2
  4046ce:	009b      	lsls	r3, r3, #2
  4046d0:	440b      	add	r3, r1
  4046d2:	781b      	ldrb	r3, [r3, #0]
  4046d4:	7bba      	ldrb	r2, [r7, #14]
  4046d6:	429a      	cmp	r2, r3
  4046d8:	d101      	bne.n	4046de <_get_uart_index+0x4a>
			return i;
  4046da:	7bfb      	ldrb	r3, [r7, #15]
  4046dc:	e00c      	b.n	4046f8 <_get_uart_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4046de:	7bfb      	ldrb	r3, [r7, #15]
  4046e0:	3301      	adds	r3, #1
  4046e2:	73fb      	strb	r3, [r7, #15]
  4046e4:	7bfb      	ldrb	r3, [r7, #15]
  4046e6:	2b01      	cmp	r3, #1
  4046e8:	d9ec      	bls.n	4046c4 <_get_uart_index+0x30>
		}
	}

	ASSERT(false);
  4046ea:	f240 22b2 	movw	r2, #690	; 0x2b2
  4046ee:	4904      	ldr	r1, [pc, #16]	; (404700 <_get_uart_index+0x6c>)
  4046f0:	2000      	movs	r0, #0
  4046f2:	4b04      	ldr	r3, [pc, #16]	; (404704 <_get_uart_index+0x70>)
  4046f4:	4798      	blx	r3
	return 0;
  4046f6:	2300      	movs	r3, #0
}
  4046f8:	4618      	mov	r0, r3
  4046fa:	3710      	adds	r7, #16
  4046fc:	46bd      	mov	sp, r7
  4046fe:	bd80      	pop	{r7, pc}
  404700:	00406be0 	.word	0x00406be0
  404704:	004020b9 	.word	0x004020b9
  404708:	004044ad 	.word	0x004044ad
  40470c:	20400008 	.word	0x20400008

00404710 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  404710:	b580      	push	{r7, lr}
  404712:	b084      	sub	sp, #16
  404714:	af00      	add	r7, sp, #0
  404716:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  404718:	687b      	ldr	r3, [r7, #4]
  40471a:	2b00      	cmp	r3, #0
  40471c:	bf14      	ite	ne
  40471e:	2301      	movne	r3, #1
  404720:	2300      	moveq	r3, #0
  404722:	b2db      	uxtb	r3, r3
  404724:	f240 22bf 	movw	r2, #703	; 0x2bf
  404728:	491a      	ldr	r1, [pc, #104]	; (404794 <_uart_init+0x84>)
  40472a:	4618      	mov	r0, r3
  40472c:	4b1a      	ldr	r3, [pc, #104]	; (404798 <_uart_init+0x88>)
  40472e:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  404730:	6878      	ldr	r0, [r7, #4]
  404732:	4b1a      	ldr	r3, [pc, #104]	; (40479c <_uart_init+0x8c>)
  404734:	4798      	blx	r3
  404736:	4603      	mov	r3, r0
  404738:	73fb      	strb	r3, [r7, #15]
	/* Disable the Write Protect. */
	hri_uart_write_WPMR_reg(hw, UART_WPMR_WPKEY_PASSWD);
  40473a:	4919      	ldr	r1, [pc, #100]	; (4047a0 <_uart_init+0x90>)
  40473c:	6878      	ldr	r0, [r7, #4]
  40473e:	4b19      	ldr	r3, [pc, #100]	; (4047a4 <_uart_init+0x94>)
  404740:	4798      	blx	r3

	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
  404742:	21ac      	movs	r1, #172	; 0xac
  404744:	6878      	ldr	r0, [r7, #4]
  404746:	4b18      	ldr	r3, [pc, #96]	; (4047a8 <_uart_init+0x98>)
  404748:	4798      	blx	r3
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  40474a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40474e:	6878      	ldr	r0, [r7, #4]
  404750:	4b15      	ldr	r3, [pc, #84]	; (4047a8 <_uart_init+0x98>)
  404752:	4798      	blx	r3

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  404754:	7bfa      	ldrb	r2, [r7, #15]
  404756:	4915      	ldr	r1, [pc, #84]	; (4047ac <_uart_init+0x9c>)
  404758:	4613      	mov	r3, r2
  40475a:	005b      	lsls	r3, r3, #1
  40475c:	4413      	add	r3, r2
  40475e:	009b      	lsls	r3, r3, #2
  404760:	440b      	add	r3, r1
  404762:	3304      	adds	r3, #4
  404764:	681b      	ldr	r3, [r3, #0]
  404766:	4619      	mov	r1, r3
  404768:	6878      	ldr	r0, [r7, #4]
  40476a:	4b11      	ldr	r3, [pc, #68]	; (4047b0 <_uart_init+0xa0>)
  40476c:	4798      	blx	r3
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);
  40476e:	7bfa      	ldrb	r2, [r7, #15]
  404770:	490e      	ldr	r1, [pc, #56]	; (4047ac <_uart_init+0x9c>)
  404772:	4613      	mov	r3, r2
  404774:	005b      	lsls	r3, r3, #1
  404776:	4413      	add	r3, r2
  404778:	009b      	lsls	r3, r3, #2
  40477a:	440b      	add	r3, r1
  40477c:	3308      	adds	r3, #8
  40477e:	681b      	ldr	r3, [r3, #0]
  404780:	4619      	mov	r1, r3
  404782:	6878      	ldr	r0, [r7, #4]
  404784:	4b0b      	ldr	r3, [pc, #44]	; (4047b4 <_uart_init+0xa4>)
  404786:	4798      	blx	r3

	return ERR_NONE;
  404788:	2300      	movs	r3, #0
}
  40478a:	4618      	mov	r0, r3
  40478c:	3710      	adds	r7, #16
  40478e:	46bd      	mov	sp, r7
  404790:	bd80      	pop	{r7, pc}
  404792:	bf00      	nop
  404794:	00406be0 	.word	0x00406be0
  404798:	004020b9 	.word	0x004020b9
  40479c:	00404695 	.word	0x00404695
  4047a0:	55415200 	.word	0x55415200
  4047a4:	00404063 	.word	0x00404063
  4047a8:	00403ff3 	.word	0x00403ff3
  4047ac:	20400008 	.word	0x20400008
  4047b0:	0040402b 	.word	0x0040402b
  4047b4:	00404047 	.word	0x00404047

004047b8 <hri_usbhs_set_DEVIMR_SUSPE_bit>:
typedef uint32_t hri_usbhshstdma_hstdmacontrol_reg_t;
typedef uint32_t hri_usbhshstdma_hstdmanxtdsc_reg_t;
typedef uint32_t hri_usbhshstdma_hstdmastatus_reg_t;

static inline void hri_usbhs_set_DEVIMR_SUSPE_bit(const void *const hw)
{
  4047b8:	b480      	push	{r7}
  4047ba:	b083      	sub	sp, #12
  4047bc:	af00      	add	r7, sp, #0
  4047be:	6078      	str	r0, [r7, #4]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  4047c0:	687b      	ldr	r3, [r7, #4]
  4047c2:	2201      	movs	r2, #1
  4047c4:	619a      	str	r2, [r3, #24]
}
  4047c6:	bf00      	nop
  4047c8:	370c      	adds	r7, #12
  4047ca:	46bd      	mov	sp, r7
  4047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047d0:	4770      	bx	lr

004047d2 <hri_usbhs_set_DEVIMR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_DMA_7;
}

static inline void hri_usbhs_set_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  4047d2:	b480      	push	{r7}
  4047d4:	b083      	sub	sp, #12
  4047d6:	af00      	add	r7, sp, #0
  4047d8:	6078      	str	r0, [r7, #4]
  4047da:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4047dc:	687b      	ldr	r3, [r7, #4]
  4047de:	683a      	ldr	r2, [r7, #0]
  4047e0:	619a      	str	r2, [r3, #24]
}
  4047e2:	bf00      	nop
  4047e4:	370c      	adds	r7, #12
  4047e6:	46bd      	mov	sp, r7
  4047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047ec:	4770      	bx	lr

004047ee <hri_usbhs_read_DEVIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devimr_reg_t hri_usbhs_read_DEVIMR_reg(const void *const hw)
{
  4047ee:	b480      	push	{r7}
  4047f0:	b083      	sub	sp, #12
  4047f2:	af00      	add	r7, sp, #0
  4047f4:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  4047f6:	687b      	ldr	r3, [r7, #4]
  4047f8:	691b      	ldr	r3, [r3, #16]
}
  4047fa:	4618      	mov	r0, r3
  4047fc:	370c      	adds	r7, #12
  4047fe:	46bd      	mov	sp, r7
  404800:	f85d 7b04 	ldr.w	r7, [sp], #4
  404804:	4770      	bx	lr

00404806 <hri_usbhs_clear_DEVIMR_reg>:
	((Usbhs *)hw)->USBHS_DEVIER = data;
	((Usbhs *)hw)->USBHS_DEVIDR = ~data;
}

static inline void hri_usbhs_clear_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  404806:	b480      	push	{r7}
  404808:	b083      	sub	sp, #12
  40480a:	af00      	add	r7, sp, #0
  40480c:	6078      	str	r0, [r7, #4]
  40480e:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  404810:	687b      	ldr	r3, [r7, #4]
  404812:	683a      	ldr	r2, [r7, #0]
  404814:	615a      	str	r2, [r3, #20]
}
  404816:	bf00      	nop
  404818:	370c      	adds	r7, #12
  40481a:	46bd      	mov	sp, r7
  40481c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404820:	4770      	bx	lr

00404822 <hri_usbhs_get_DEVEPTISR_RXSTPI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_RXOUTI;
}

static inline bool hri_usbhs_get_DEVEPTISR_RXSTPI_bit(const void *const hw, uint8_t index)
{
  404822:	b480      	push	{r7}
  404824:	b083      	sub	sp, #12
  404826:	af00      	add	r7, sp, #0
  404828:	6078      	str	r0, [r7, #4]
  40482a:	460b      	mov	r3, r1
  40482c:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  40482e:	78fa      	ldrb	r2, [r7, #3]
  404830:	687b      	ldr	r3, [r7, #4]
  404832:	324c      	adds	r2, #76	; 0x4c
  404834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404838:	089b      	lsrs	r3, r3, #2
  40483a:	f003 0301 	and.w	r3, r3, #1
  40483e:	2b00      	cmp	r3, #0
  404840:	bf14      	ite	ne
  404842:	2301      	movne	r3, #1
  404844:	2300      	moveq	r3, #0
  404846:	b2db      	uxtb	r3, r3
}
  404848:	4618      	mov	r0, r3
  40484a:	370c      	adds	r7, #12
  40484c:	46bd      	mov	sp, r7
  40484e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404852:	4770      	bx	lr

00404854 <hri_usbhs_get_DEVEPTISR_STALLEDI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_OVERFI;
}

static inline bool hri_usbhs_get_DEVEPTISR_STALLEDI_bit(const void *const hw, uint8_t index)
{
  404854:	b480      	push	{r7}
  404856:	b083      	sub	sp, #12
  404858:	af00      	add	r7, sp, #0
  40485a:	6078      	str	r0, [r7, #4]
  40485c:	460b      	mov	r3, r1
  40485e:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  404860:	78fa      	ldrb	r2, [r7, #3]
  404862:	687b      	ldr	r3, [r7, #4]
  404864:	324c      	adds	r2, #76	; 0x4c
  404866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40486a:	099b      	lsrs	r3, r3, #6
  40486c:	f003 0301 	and.w	r3, r3, #1
  404870:	2b00      	cmp	r3, #0
  404872:	bf14      	ite	ne
  404874:	2301      	movne	r3, #1
  404876:	2300      	moveq	r3, #0
  404878:	b2db      	uxtb	r3, r3
}
  40487a:	4618      	mov	r0, r3
  40487c:	370c      	adds	r7, #12
  40487e:	46bd      	mov	sp, r7
  404880:	f85d 7b04 	ldr.w	r7, [sp], #4
  404884:	4770      	bx	lr

00404886 <hri_usbhs_get_DEVEPTISR_RWALL_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_SHORTPACKET;
}

static inline bool hri_usbhs_get_DEVEPTISR_RWALL_bit(const void *const hw, uint8_t index)
{
  404886:	b480      	push	{r7}
  404888:	b083      	sub	sp, #12
  40488a:	af00      	add	r7, sp, #0
  40488c:	6078      	str	r0, [r7, #4]
  40488e:	460b      	mov	r3, r1
  404890:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  404892:	78fa      	ldrb	r2, [r7, #3]
  404894:	687b      	ldr	r3, [r7, #4]
  404896:	324c      	adds	r2, #76	; 0x4c
  404898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40489c:	0c1b      	lsrs	r3, r3, #16
  40489e:	f003 0301 	and.w	r3, r3, #1
  4048a2:	2b00      	cmp	r3, #0
  4048a4:	bf14      	ite	ne
  4048a6:	2301      	movne	r3, #1
  4048a8:	2300      	moveq	r3, #0
  4048aa:	b2db      	uxtb	r3, r3
}
  4048ac:	4618      	mov	r0, r3
  4048ae:	370c      	adds	r7, #12
  4048b0:	46bd      	mov	sp, r7
  4048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048b6:	4770      	bx	lr

004048b8 <hri_usbhs_get_DEVEPTISR_reg>:
	return tmp;
}

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_get_DEVEPTISR_reg(const void *const hw, uint8_t index,
                                                                    hri_usbhs_deveptisr_reg_t mask)
{
  4048b8:	b480      	push	{r7}
  4048ba:	b087      	sub	sp, #28
  4048bc:	af00      	add	r7, sp, #0
  4048be:	60f8      	str	r0, [r7, #12]
  4048c0:	460b      	mov	r3, r1
  4048c2:	607a      	str	r2, [r7, #4]
  4048c4:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  4048c6:	7afa      	ldrb	r2, [r7, #11]
  4048c8:	68fb      	ldr	r3, [r7, #12]
  4048ca:	324c      	adds	r2, #76	; 0x4c
  4048cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4048d0:	617b      	str	r3, [r7, #20]
	tmp &= mask;
  4048d2:	697a      	ldr	r2, [r7, #20]
  4048d4:	687b      	ldr	r3, [r7, #4]
  4048d6:	4013      	ands	r3, r2
  4048d8:	617b      	str	r3, [r7, #20]
	return tmp;
  4048da:	697b      	ldr	r3, [r7, #20]
}
  4048dc:	4618      	mov	r0, r3
  4048de:	371c      	adds	r7, #28
  4048e0:	46bd      	mov	sp, r7
  4048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048e6:	4770      	bx	lr

004048e8 <hri_usbhs_read_DEVEPTISR_reg>:

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_read_DEVEPTISR_reg(const void *const hw, uint8_t index)
{
  4048e8:	b480      	push	{r7}
  4048ea:	b083      	sub	sp, #12
  4048ec:	af00      	add	r7, sp, #0
  4048ee:	6078      	str	r0, [r7, #4]
  4048f0:	460b      	mov	r3, r1
  4048f2:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  4048f4:	78fa      	ldrb	r2, [r7, #3]
  4048f6:	687b      	ldr	r3, [r7, #4]
  4048f8:	324c      	adds	r2, #76	; 0x4c
  4048fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  4048fe:	4618      	mov	r0, r3
  404900:	370c      	adds	r7, #12
  404902:	46bd      	mov	sp, r7
  404904:	f85d 7b04 	ldr.w	r7, [sp], #4
  404908:	4770      	bx	lr

0040490a <hri_usbhs_write_DEVEPTICR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
  40490a:	b480      	push	{r7}
  40490c:	b085      	sub	sp, #20
  40490e:	af00      	add	r7, sp, #0
  404910:	60f8      	str	r0, [r7, #12]
  404912:	460b      	mov	r3, r1
  404914:	607a      	str	r2, [r7, #4]
  404916:	72fb      	strb	r3, [r7, #11]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  404918:	7afa      	ldrb	r2, [r7, #11]
  40491a:	68fb      	ldr	r3, [r7, #12]
  40491c:	3258      	adds	r2, #88	; 0x58
  40491e:	6879      	ldr	r1, [r7, #4]
  404920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  404924:	bf00      	nop
  404926:	3714      	adds	r7, #20
  404928:	46bd      	mov	sp, r7
  40492a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40492e:	4770      	bx	lr

00404930 <hri_usbhs_write_DEVICR_reg>:
{
	((Usbhs *)hw)->USBHS_HSTPIPICR[index] = data;
}

static inline void hri_usbhs_write_DEVICR_reg(const void *const hw, hri_usbhs_devicr_reg_t data)
{
  404930:	b480      	push	{r7}
  404932:	b083      	sub	sp, #12
  404934:	af00      	add	r7, sp, #0
  404936:	6078      	str	r0, [r7, #4]
  404938:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVICR = data;
  40493a:	687b      	ldr	r3, [r7, #4]
  40493c:	683a      	ldr	r2, [r7, #0]
  40493e:	609a      	str	r2, [r3, #8]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404940:	bf00      	nop
  404942:	370c      	adds	r7, #12
  404944:	46bd      	mov	sp, r7
  404946:	f85d 7b04 	ldr.w	r7, [sp], #4
  40494a:	4770      	bx	lr

0040494c <hri_usbhs_write_DEVEPTIFR_reg>:
	((Usbhs *)hw)->USBHS_DEVIFR = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_write_DEVEPTIFR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptifr_reg_t data)
{
  40494c:	b480      	push	{r7}
  40494e:	b085      	sub	sp, #20
  404950:	af00      	add	r7, sp, #0
  404952:	60f8      	str	r0, [r7, #12]
  404954:	460b      	mov	r3, r1
  404956:	607a      	str	r2, [r7, #4]
  404958:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  40495a:	7afa      	ldrb	r2, [r7, #11]
  40495c:	68fb      	ldr	r3, [r7, #12]
  40495e:	3264      	adds	r2, #100	; 0x64
  404960:	6879      	ldr	r1, [r7, #4]
  404962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404966:	bf00      	nop
  404968:	3714      	adds	r7, #20
  40496a:	46bd      	mov	sp, r7
  40496c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404970:	4770      	bx	lr

00404972 <hri_usbhs_write_DEVEPTIER_reg>:

static inline void hri_usbhs_write_DEVEPTIER_reg(const void *const hw, uint8_t index, hri_usbhs_deveptier_reg_t data)
{
  404972:	b480      	push	{r7}
  404974:	b085      	sub	sp, #20
  404976:	af00      	add	r7, sp, #0
  404978:	60f8      	str	r0, [r7, #12]
  40497a:	460b      	mov	r3, r1
  40497c:	607a      	str	r2, [r7, #4]
  40497e:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  404980:	7afa      	ldrb	r2, [r7, #11]
  404982:	68fb      	ldr	r3, [r7, #12]
  404984:	327c      	adds	r2, #124	; 0x7c
  404986:	6879      	ldr	r1, [r7, #4]
  404988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40498c:	bf00      	nop
  40498e:	3714      	adds	r7, #20
  404990:	46bd      	mov	sp, r7
  404992:	f85d 7b04 	ldr.w	r7, [sp], #4
  404996:	4770      	bx	lr

00404998 <hri_usbhs_write_DEVEPTIDR_reg>:

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
  404998:	b480      	push	{r7}
  40499a:	b085      	sub	sp, #20
  40499c:	af00      	add	r7, sp, #0
  40499e:	60f8      	str	r0, [r7, #12]
  4049a0:	460b      	mov	r3, r1
  4049a2:	607a      	str	r2, [r7, #4]
  4049a4:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  4049a6:	7afa      	ldrb	r2, [r7, #11]
  4049a8:	68fb      	ldr	r3, [r7, #12]
  4049aa:	3288      	adds	r2, #136	; 0x88
  4049ac:	6879      	ldr	r1, [r7, #4]
  4049ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4049b2:	bf00      	nop
  4049b4:	3714      	adds	r7, #20
  4049b6:	46bd      	mov	sp, r7
  4049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049bc:	4770      	bx	lr

004049be <hri_usbhs_set_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_HSTPIPIDR[index] = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVCTRL_ADDEN_bit(const void *const hw)
{
  4049be:	b480      	push	{r7}
  4049c0:	b083      	sub	sp, #12
  4049c2:	af00      	add	r7, sp, #0
  4049c4:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  4049c6:	687b      	ldr	r3, [r7, #4]
  4049c8:	681b      	ldr	r3, [r3, #0]
  4049ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  4049ce:	687b      	ldr	r3, [r7, #4]
  4049d0:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4049d2:	bf00      	nop
  4049d4:	370c      	adds	r7, #12
  4049d6:	46bd      	mov	sp, r7
  4049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049dc:	4770      	bx	lr

004049de <hri_usbhs_clear_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
  4049de:	b480      	push	{r7}
  4049e0:	b083      	sub	sp, #12
  4049e2:	af00      	add	r7, sp, #0
  4049e4:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  4049e6:	687b      	ldr	r3, [r7, #4]
  4049e8:	681b      	ldr	r3, [r3, #0]
  4049ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  4049ee:	687b      	ldr	r3, [r7, #4]
  4049f0:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4049f2:	bf00      	nop
  4049f4:	370c      	adds	r7, #12
  4049f6:	46bd      	mov	sp, r7
  4049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049fc:	4770      	bx	lr

004049fe <hri_usbhs_write_DEVCTRL_UADD_bf>:
	tmp = (tmp & USBHS_DEVCTRL_UADD(mask)) >> USBHS_DEVCTRL_UADD_Pos;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  4049fe:	b480      	push	{r7}
  404a00:	b085      	sub	sp, #20
  404a02:	af00      	add	r7, sp, #0
  404a04:	6078      	str	r0, [r7, #4]
  404a06:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  404a08:	687b      	ldr	r3, [r7, #4]
  404a0a:	681b      	ldr	r3, [r3, #0]
  404a0c:	60fb      	str	r3, [r7, #12]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  404a0e:	68fb      	ldr	r3, [r7, #12]
  404a10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404a14:	60fb      	str	r3, [r7, #12]
	tmp |= USBHS_DEVCTRL_UADD(data);
  404a16:	683b      	ldr	r3, [r7, #0]
  404a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404a1c:	68fa      	ldr	r2, [r7, #12]
  404a1e:	4313      	orrs	r3, r2
  404a20:	60fb      	str	r3, [r7, #12]
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  404a22:	687b      	ldr	r3, [r7, #4]
  404a24:	68fa      	ldr	r2, [r7, #12]
  404a26:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404a28:	bf00      	nop
  404a2a:	3714      	adds	r7, #20
  404a2c:	46bd      	mov	sp, r7
  404a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a32:	4770      	bx	lr

00404a34 <hri_usbhs_write_DEVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_reg(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  404a34:	b480      	push	{r7}
  404a36:	b083      	sub	sp, #12
  404a38:	af00      	add	r7, sp, #0
  404a3a:	6078      	str	r0, [r7, #4]
  404a3c:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  404a3e:	687b      	ldr	r3, [r7, #4]
  404a40:	683a      	ldr	r2, [r7, #0]
  404a42:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404a44:	bf00      	nop
  404a46:	370c      	adds	r7, #12
  404a48:	46bd      	mov	sp, r7
  404a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a4e:	4770      	bx	lr

00404a50 <hri_usbhs_set_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPDIR;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  404a50:	b480      	push	{r7}
  404a52:	b083      	sub	sp, #12
  404a54:	af00      	add	r7, sp, #0
  404a56:	6078      	str	r0, [r7, #4]
  404a58:	460b      	mov	r3, r1
  404a5a:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  404a5c:	78fa      	ldrb	r2, [r7, #3]
  404a5e:	78f9      	ldrb	r1, [r7, #3]
  404a60:	687b      	ldr	r3, [r7, #4]
  404a62:	3140      	adds	r1, #64	; 0x40
  404a64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  404a68:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  404a6c:	687b      	ldr	r3, [r7, #4]
  404a6e:	3240      	adds	r2, #64	; 0x40
  404a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404a74:	bf00      	nop
  404a76:	370c      	adds	r7, #12
  404a78:	46bd      	mov	sp, r7
  404a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a7e:	4770      	bx	lr

00404a80 <hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  404a80:	b480      	push	{r7}
  404a82:	b083      	sub	sp, #12
  404a84:	af00      	add	r7, sp, #0
  404a86:	6078      	str	r0, [r7, #4]
  404a88:	460b      	mov	r3, r1
  404a8a:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  404a8c:	78fa      	ldrb	r2, [r7, #3]
  404a8e:	78f9      	ldrb	r1, [r7, #3]
  404a90:	687b      	ldr	r3, [r7, #4]
  404a92:	3140      	adds	r1, #64	; 0x40
  404a94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  404a98:	f423 7100 	bic.w	r1, r3, #512	; 0x200
  404a9c:	687b      	ldr	r3, [r7, #4]
  404a9e:	3240      	adds	r2, #64	; 0x40
  404aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404aa4:	bf00      	nop
  404aa6:	370c      	adds	r7, #12
  404aa8:	46bd      	mov	sp, r7
  404aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404aae:	4770      	bx	lr

00404ab0 <hri_usbhs_read_DEVEPTCFG_EPTYPE_bf>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPTYPE(mask);
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_deveptcfg_reg_t hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(const void *const hw, uint8_t index)
{
  404ab0:	b480      	push	{r7}
  404ab2:	b085      	sub	sp, #20
  404ab4:	af00      	add	r7, sp, #0
  404ab6:	6078      	str	r0, [r7, #4]
  404ab8:	460b      	mov	r3, r1
  404aba:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  404abc:	78fa      	ldrb	r2, [r7, #3]
  404abe:	687b      	ldr	r3, [r7, #4]
  404ac0:	3240      	adds	r2, #64	; 0x40
  404ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404ac6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_DEVEPTCFG_EPTYPE_Msk) >> USBHS_DEVEPTCFG_EPTYPE_Pos;
  404ac8:	68fb      	ldr	r3, [r7, #12]
  404aca:	0adb      	lsrs	r3, r3, #11
  404acc:	f003 0303 	and.w	r3, r3, #3
  404ad0:	60fb      	str	r3, [r7, #12]
	return tmp;
  404ad2:	68fb      	ldr	r3, [r7, #12]
}
  404ad4:	4618      	mov	r0, r3
  404ad6:	3714      	adds	r7, #20
  404ad8:	46bd      	mov	sp, r7
  404ada:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ade:	4770      	bx	lr

00404ae0 <hri_usbhs_get_CTRL_USBE_bit>:
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_CTRL_USBE_bit(const void *const hw)
{
  404ae0:	b480      	push	{r7}
  404ae2:	b085      	sub	sp, #20
  404ae4:	af00      	add	r7, sp, #0
  404ae6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  404ae8:	687b      	ldr	r3, [r7, #4]
  404aea:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  404aee:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_CTRL_USBE) >> USBHS_CTRL_USBE_Pos;
  404af0:	68fb      	ldr	r3, [r7, #12]
  404af2:	0bdb      	lsrs	r3, r3, #15
  404af4:	f003 0301 	and.w	r3, r3, #1
  404af8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
  404afa:	68fb      	ldr	r3, [r7, #12]
  404afc:	2b00      	cmp	r3, #0
  404afe:	bf14      	ite	ne
  404b00:	2301      	movne	r3, #1
  404b02:	2300      	moveq	r3, #0
  404b04:	b2db      	uxtb	r3, r3
}
  404b06:	4618      	mov	r0, r3
  404b08:	3714      	adds	r7, #20
  404b0a:	46bd      	mov	sp, r7
  404b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b10:	4770      	bx	lr

00404b12 <hri_usbhs_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_CTRL_reg(const void *const hw, hri_usbhs_ctrl_reg_t data)
{
  404b12:	b480      	push	{r7}
  404b14:	b083      	sub	sp, #12
  404b16:	af00      	add	r7, sp, #0
  404b18:	6078      	str	r0, [r7, #4]
  404b1a:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL = data;
  404b1c:	687b      	ldr	r3, [r7, #4]
  404b1e:	683a      	ldr	r2, [r7, #0]
  404b20:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404b24:	bf00      	nop
  404b26:	370c      	adds	r7, #12
  404b28:	46bd      	mov	sp, r7
  404b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b2e:	4770      	bx	lr

00404b30 <hri_usbhs_read_DEVISR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devisr_reg_t hri_usbhs_read_DEVISR_reg(const void *const hw)
{
  404b30:	b480      	push	{r7}
  404b32:	b083      	sub	sp, #12
  404b34:	af00      	add	r7, sp, #0
  404b36:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVISR;
  404b38:	687b      	ldr	r3, [r7, #4]
  404b3a:	685b      	ldr	r3, [r3, #4]
}
  404b3c:	4618      	mov	r0, r3
  404b3e:	370c      	adds	r7, #12
  404b40:	46bd      	mov	sp, r7
  404b42:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b46:	4770      	bx	lr

00404b48 <hri_usbhs_read_DEVEPTIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_deveptimr_reg_t hri_usbhs_read_DEVEPTIMR_reg(const void *const hw, uint8_t index)
{
  404b48:	b480      	push	{r7}
  404b4a:	b083      	sub	sp, #12
  404b4c:	af00      	add	r7, sp, #0
  404b4e:	6078      	str	r0, [r7, #4]
  404b50:	460b      	mov	r3, r1
  404b52:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  404b54:	78fa      	ldrb	r2, [r7, #3]
  404b56:	687b      	ldr	r3, [r7, #4]
  404b58:	3270      	adds	r2, #112	; 0x70
  404b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  404b5e:	4618      	mov	r0, r3
  404b60:	370c      	adds	r7, #12
  404b62:	46bd      	mov	sp, r7
  404b64:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b68:	4770      	bx	lr

00404b6a <hri_usbhs_write_DEVDMAADDRESS_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
  404b6a:	b480      	push	{r7}
  404b6c:	b085      	sub	sp, #20
  404b6e:	af00      	add	r7, sp, #0
  404b70:	60f8      	str	r0, [r7, #12]
  404b72:	460b      	mov	r3, r1
  404b74:	607a      	str	r2, [r7, #4]
  404b76:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMAADDRESS = data;
  404b78:	7afb      	ldrb	r3, [r7, #11]
  404b7a:	68fa      	ldr	r2, [r7, #12]
  404b7c:	3331      	adds	r3, #49	; 0x31
  404b7e:	011b      	lsls	r3, r3, #4
  404b80:	4413      	add	r3, r2
  404b82:	3304      	adds	r3, #4
  404b84:	687a      	ldr	r2, [r7, #4]
  404b86:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404b88:	bf00      	nop
  404b8a:	3714      	adds	r7, #20
  404b8c:	46bd      	mov	sp, r7
  404b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b92:	4770      	bx	lr

00404b94 <hri_usbhs_write_DEVDMACONTROL_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMACONTROL_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmacontrol_reg_t data)
{
  404b94:	b480      	push	{r7}
  404b96:	b085      	sub	sp, #20
  404b98:	af00      	add	r7, sp, #0
  404b9a:	60f8      	str	r0, [r7, #12]
  404b9c:	460b      	mov	r3, r1
  404b9e:	607a      	str	r2, [r7, #4]
  404ba0:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL = data;
  404ba2:	7afb      	ldrb	r3, [r7, #11]
  404ba4:	68fa      	ldr	r2, [r7, #12]
  404ba6:	011b      	lsls	r3, r3, #4
  404ba8:	4413      	add	r3, r2
  404baa:	f503 7346 	add.w	r3, r3, #792	; 0x318
  404bae:	687a      	ldr	r2, [r7, #4]
  404bb0:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  404bb2:	bf00      	nop
  404bb4:	3714      	adds	r7, #20
  404bb6:	46bd      	mov	sp, r7
  404bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bbc:	4770      	bx	lr

00404bbe <hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit>:
{
	return ((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL;
}

static inline bool hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(const void *const hw, uint8_t submodule_index)
{
  404bbe:	b480      	push	{r7}
  404bc0:	b083      	sub	sp, #12
  404bc2:	af00      	add	r7, sp, #0
  404bc4:	6078      	str	r0, [r7, #4]
  404bc6:	460b      	mov	r3, r1
  404bc8:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  404bca:	78fb      	ldrb	r3, [r7, #3]
  404bcc:	687a      	ldr	r2, [r7, #4]
  404bce:	011b      	lsls	r3, r3, #4
  404bd0:	4413      	add	r3, r2
  404bd2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  404bd6:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_CHANN_ENB_Pos;
  404bd8:	f003 0301 	and.w	r3, r3, #1
  404bdc:	2b00      	cmp	r3, #0
  404bde:	bf14      	ite	ne
  404be0:	2301      	movne	r3, #1
  404be2:	2300      	moveq	r3, #0
  404be4:	b2db      	uxtb	r3, r3
}
  404be6:	4618      	mov	r0, r3
  404be8:	370c      	adds	r7, #12
  404bea:	46bd      	mov	sp, r7
  404bec:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bf0:	4770      	bx	lr

00404bf2 <hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit>:
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS = USBHS_DEVDMASTATUS_CHANN_ACT;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
  404bf2:	b480      	push	{r7}
  404bf4:	b083      	sub	sp, #12
  404bf6:	af00      	add	r7, sp, #0
  404bf8:	6078      	str	r0, [r7, #4]
  404bfa:	460b      	mov	r3, r1
  404bfc:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  404bfe:	78fb      	ldrb	r3, [r7, #3]
  404c00:	687a      	ldr	r2, [r7, #4]
  404c02:	011b      	lsls	r3, r3, #4
  404c04:	4413      	add	r3, r2
  404c06:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  404c0a:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_END_TR_ST_Pos;
  404c0c:	091b      	lsrs	r3, r3, #4
  404c0e:	f003 0301 	and.w	r3, r3, #1
  404c12:	2b00      	cmp	r3, #0
  404c14:	bf14      	ite	ne
  404c16:	2301      	movne	r3, #1
  404c18:	2300      	moveq	r3, #0
  404c1a:	b2db      	uxtb	r3, r3
}
  404c1c:	4618      	mov	r0, r3
  404c1e:	370c      	adds	r7, #12
  404c20:	46bd      	mov	sp, r7
  404c22:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c26:	4770      	bx	lr

00404c28 <hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf>:
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
  404c28:	b480      	push	{r7}
  404c2a:	b083      	sub	sp, #12
  404c2c:	af00      	add	r7, sp, #0
  404c2e:	6078      	str	r0, [r7, #4]
  404c30:	460b      	mov	r3, r1
  404c32:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  404c34:	78fb      	ldrb	r3, [r7, #3]
  404c36:	687a      	ldr	r2, [r7, #4]
  404c38:	011b      	lsls	r3, r3, #4
  404c3a:	4413      	add	r3, r2
  404c3c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  404c40:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_BUFF_COUNT_Pos;
  404c42:	0c1b      	lsrs	r3, r3, #16
  404c44:	b29b      	uxth	r3, r3
}
  404c46:	4618      	mov	r0, r3
  404c48:	370c      	adds	r7, #12
  404c4a:	46bd      	mov	sp, r7
  404c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c50:	4770      	bx	lr

00404c52 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  404c52:	b480      	push	{r7}
  404c54:	b083      	sub	sp, #12
  404c56:	af00      	add	r7, sp, #0
  404c58:	6078      	str	r0, [r7, #4]
  404c5a:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
}
  404c5c:	bf00      	nop
  404c5e:	370c      	adds	r7, #12
  404c60:	46bd      	mov	sp, r7
  404c62:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c66:	4770      	bx	lr

00404c68 <_dummy_func_return_false>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
  404c68:	b480      	push	{r7}
  404c6a:	b083      	sub	sp, #12
  404c6c:	af00      	add	r7, sp, #0
  404c6e:	6078      	str	r0, [r7, #4]
  404c70:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
  404c72:	2300      	movs	r3, #0
}
  404c74:	4618      	mov	r0, r3
  404c76:	370c      	adds	r7, #12
  404c78:	46bd      	mov	sp, r7
  404c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c7e:	4770      	bx	lr

00404c80 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
  404c80:	b580      	push	{r7, lr}
  404c82:	b082      	sub	sp, #8
  404c84:	af00      	add	r7, sp, #0
  404c86:	4603      	mov	r3, r0
  404c88:	6039      	str	r1, [r7, #0]
  404c8a:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTICR_reg(USBHS, epn, flags);
  404c8c:	79fb      	ldrb	r3, [r7, #7]
  404c8e:	683a      	ldr	r2, [r7, #0]
  404c90:	4619      	mov	r1, r3
  404c92:	4803      	ldr	r0, [pc, #12]	; (404ca0 <_usbd_ep_int_ack+0x20>)
  404c94:	4b03      	ldr	r3, [pc, #12]	; (404ca4 <_usbd_ep_int_ack+0x24>)
  404c96:	4798      	blx	r3
}
  404c98:	bf00      	nop
  404c9a:	3708      	adds	r7, #8
  404c9c:	46bd      	mov	sp, r7
  404c9e:	bd80      	pop	{r7, pc}
  404ca0:	40038000 	.word	0x40038000
  404ca4:	0040490b 	.word	0x0040490b

00404ca8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
  404ca8:	b580      	push	{r7, lr}
  404caa:	b082      	sub	sp, #8
  404cac:	af00      	add	r7, sp, #0
  404cae:	4603      	mov	r3, r0
  404cb0:	6039      	str	r1, [r7, #0]
  404cb2:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIER_reg(USBHS, epn, flags);
  404cb4:	79fb      	ldrb	r3, [r7, #7]
  404cb6:	683a      	ldr	r2, [r7, #0]
  404cb8:	4619      	mov	r1, r3
  404cba:	4808      	ldr	r0, [pc, #32]	; (404cdc <_usbd_ep_int_en+0x34>)
  404cbc:	4b08      	ldr	r3, [pc, #32]	; (404ce0 <_usbd_ep_int_en+0x38>)
  404cbe:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  404cc0:	79fb      	ldrb	r3, [r7, #7]
  404cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404cc6:	fa02 f303 	lsl.w	r3, r2, r3
  404cca:	4619      	mov	r1, r3
  404ccc:	4803      	ldr	r0, [pc, #12]	; (404cdc <_usbd_ep_int_en+0x34>)
  404cce:	4b05      	ldr	r3, [pc, #20]	; (404ce4 <_usbd_ep_int_en+0x3c>)
  404cd0:	4798      	blx	r3
}
  404cd2:	bf00      	nop
  404cd4:	3708      	adds	r7, #8
  404cd6:	46bd      	mov	sp, r7
  404cd8:	bd80      	pop	{r7, pc}
  404cda:	bf00      	nop
  404cdc:	40038000 	.word	0x40038000
  404ce0:	00404973 	.word	0x00404973
  404ce4:	004047d3 	.word	0x004047d3

00404ce8 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
  404ce8:	b580      	push	{r7, lr}
  404cea:	b082      	sub	sp, #8
  404cec:	af00      	add	r7, sp, #0
  404cee:	4603      	mov	r3, r0
  404cf0:	6039      	str	r1, [r7, #0]
  404cf2:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, flags);
  404cf4:	79fb      	ldrb	r3, [r7, #7]
  404cf6:	683a      	ldr	r2, [r7, #0]
  404cf8:	4619      	mov	r1, r3
  404cfa:	4803      	ldr	r0, [pc, #12]	; (404d08 <_usbd_ep_int_dis+0x20>)
  404cfc:	4b03      	ldr	r3, [pc, #12]	; (404d0c <_usbd_ep_int_dis+0x24>)
  404cfe:	4798      	blx	r3
}
  404d00:	bf00      	nop
  404d02:	3708      	adds	r7, #8
  404d04:	46bd      	mov	sp, r7
  404d06:	bd80      	pop	{r7, pc}
  404d08:	40038000 	.word	0x40038000
  404d0c:	00404999 	.word	0x00404999

00404d10 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
  404d10:	b580      	push	{r7, lr}
  404d12:	b082      	sub	sp, #8
  404d14:	af00      	add	r7, sp, #0
  404d16:	4603      	mov	r3, r0
  404d18:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(USBHS, epn) == USB_D_EPCFG_CTRL);
  404d1a:	79fb      	ldrb	r3, [r7, #7]
  404d1c:	4619      	mov	r1, r3
  404d1e:	4806      	ldr	r0, [pc, #24]	; (404d38 <_usbd_ep_is_ctrl+0x28>)
  404d20:	4b06      	ldr	r3, [pc, #24]	; (404d3c <_usbd_ep_is_ctrl+0x2c>)
  404d22:	4798      	blx	r3
  404d24:	4603      	mov	r3, r0
  404d26:	2b00      	cmp	r3, #0
  404d28:	bf0c      	ite	eq
  404d2a:	2301      	moveq	r3, #1
  404d2c:	2300      	movne	r3, #0
  404d2e:	b2db      	uxtb	r3, r3
}
  404d30:	4618      	mov	r0, r3
  404d32:	3708      	adds	r7, #8
  404d34:	46bd      	mov	sp, r7
  404d36:	bd80      	pop	{r7, pc}
  404d38:	40038000 	.word	0x40038000
  404d3c:	00404ab1 	.word	0x00404ab1

00404d40 <_usbd_ep_set_stall>:
/** \brief Set endpoint stall
 * \param[in] epn Endpoint number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, bool st)
{
  404d40:	b580      	push	{r7, lr}
  404d42:	b084      	sub	sp, #16
  404d44:	af00      	add	r7, sp, #0
  404d46:	4603      	mov	r3, r0
  404d48:	460a      	mov	r2, r1
  404d4a:	71fb      	strb	r3, [r7, #7]
  404d4c:	4613      	mov	r3, r2
  404d4e:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  404d50:	4b0b      	ldr	r3, [pc, #44]	; (404d80 <_usbd_ep_set_stall+0x40>)
  404d52:	60fb      	str	r3, [r7, #12]

	if (st) {
  404d54:	79bb      	ldrb	r3, [r7, #6]
  404d56:	2b00      	cmp	r3, #0
  404d58:	d007      	beq.n	404d6a <_usbd_ep_set_stall+0x2a>
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_STALLRQS);
  404d5a:	79fb      	ldrb	r3, [r7, #7]
  404d5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404d60:	4619      	mov	r1, r3
  404d62:	68f8      	ldr	r0, [r7, #12]
  404d64:	4b07      	ldr	r3, [pc, #28]	; (404d84 <_usbd_ep_set_stall+0x44>)
  404d66:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
	}
}
  404d68:	e006      	b.n	404d78 <_usbd_ep_set_stall+0x38>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
  404d6a:	79fb      	ldrb	r3, [r7, #7]
  404d6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404d70:	4619      	mov	r1, r3
  404d72:	68f8      	ldr	r0, [r7, #12]
  404d74:	4b04      	ldr	r3, [pc, #16]	; (404d88 <_usbd_ep_set_stall+0x48>)
  404d76:	4798      	blx	r3
}
  404d78:	bf00      	nop
  404d7a:	3710      	adds	r7, #16
  404d7c:	46bd      	mov	sp, r7
  404d7e:	bd80      	pop	{r7, pc}
  404d80:	40038000 	.word	0x40038000
  404d84:	00404973 	.word	0x00404973
  404d88:	00404999 	.word	0x00404999

00404d8c <_usbd_ep_is_stall_sent>:
/** \brief Check if stall has been sent from the endpoint
 * \param[in] epn Endpoint number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn)
{
  404d8c:	b580      	push	{r7, lr}
  404d8e:	b082      	sub	sp, #8
  404d90:	af00      	add	r7, sp, #0
  404d92:	4603      	mov	r3, r0
  404d94:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_STALLEDI_bit(USBHS, epn));
  404d96:	79fb      	ldrb	r3, [r7, #7]
  404d98:	4619      	mov	r1, r3
  404d9a:	4804      	ldr	r0, [pc, #16]	; (404dac <_usbd_ep_is_stall_sent+0x20>)
  404d9c:	4b04      	ldr	r3, [pc, #16]	; (404db0 <_usbd_ep_is_stall_sent+0x24>)
  404d9e:	4798      	blx	r3
  404da0:	4603      	mov	r3, r0
}
  404da2:	4618      	mov	r0, r3
  404da4:	3708      	adds	r7, #8
  404da6:	46bd      	mov	sp, r7
  404da8:	bd80      	pop	{r7, pc}
  404daa:	bf00      	nop
  404dac:	40038000 	.word	0x40038000
  404db0:	00404855 	.word	0x00404855

00404db4 <_usbd_ep_ack_stall>:

/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn)
{
  404db4:	b580      	push	{r7, lr}
  404db6:	b082      	sub	sp, #8
  404db8:	af00      	add	r7, sp, #0
  404dba:	4603      	mov	r3, r0
  404dbc:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_STALLEDI);
  404dbe:	79fb      	ldrb	r3, [r7, #7]
  404dc0:	2140      	movs	r1, #64	; 0x40
  404dc2:	4618      	mov	r0, r3
  404dc4:	4b02      	ldr	r3, [pc, #8]	; (404dd0 <_usbd_ep_ack_stall+0x1c>)
  404dc6:	4798      	blx	r3
}
  404dc8:	bf00      	nop
  404dca:	3708      	adds	r7, #8
  404dcc:	46bd      	mov	sp, r7
  404dce:	bd80      	pop	{r7, pc}
  404dd0:	00404c81 	.word	0x00404c81

00404dd4 <_usbd_ep_int_stall_en>:
/** \brief Enable/disable endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, const bool en)
{
  404dd4:	b580      	push	{r7, lr}
  404dd6:	b082      	sub	sp, #8
  404dd8:	af00      	add	r7, sp, #0
  404dda:	4603      	mov	r3, r0
  404ddc:	460a      	mov	r2, r1
  404dde:	71fb      	strb	r3, [r7, #7]
  404de0:	4613      	mov	r3, r2
  404de2:	71bb      	strb	r3, [r7, #6]
	if (en) {
  404de4:	79bb      	ldrb	r3, [r7, #6]
  404de6:	2b00      	cmp	r3, #0
  404de8:	d005      	beq.n	404df6 <_usbd_ep_int_stall_en+0x22>
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  404dea:	79fb      	ldrb	r3, [r7, #7]
  404dec:	2140      	movs	r1, #64	; 0x40
  404dee:	4618      	mov	r0, r3
  404df0:	4b05      	ldr	r3, [pc, #20]	; (404e08 <_usbd_ep_int_stall_en+0x34>)
  404df2:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
	}
}
  404df4:	e004      	b.n	404e00 <_usbd_ep_int_stall_en+0x2c>
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  404df6:	79fb      	ldrb	r3, [r7, #7]
  404df8:	2140      	movs	r1, #64	; 0x40
  404dfa:	4618      	mov	r0, r3
  404dfc:	4b03      	ldr	r3, [pc, #12]	; (404e0c <_usbd_ep_int_stall_en+0x38>)
  404dfe:	4798      	blx	r3
}
  404e00:	bf00      	nop
  404e02:	3708      	adds	r7, #8
  404e04:	46bd      	mov	sp, r7
  404e06:	bd80      	pop	{r7, pc}
  404e08:	00404ca9 	.word	0x00404ca9
  404e0c:	00404ce9 	.word	0x00404ce9

00404e10 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
  404e10:	b580      	push	{r7, lr}
  404e12:	b082      	sub	sp, #8
  404e14:	af00      	add	r7, sp, #0
  404e16:	4603      	mov	r3, r0
  404e18:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, USBHS_DEVEPTIDR_RXSTPEC);
  404e1a:	79fb      	ldrb	r3, [r7, #7]
  404e1c:	2204      	movs	r2, #4
  404e1e:	4619      	mov	r1, r3
  404e20:	4803      	ldr	r0, [pc, #12]	; (404e30 <_usbd_ep_stop_setup+0x20>)
  404e22:	4b04      	ldr	r3, [pc, #16]	; (404e34 <_usbd_ep_stop_setup+0x24>)
  404e24:	4798      	blx	r3
}
  404e26:	bf00      	nop
  404e28:	3708      	adds	r7, #8
  404e2a:	46bd      	mov	sp, r7
  404e2c:	bd80      	pop	{r7, pc}
  404e2e:	bf00      	nop
  404e30:	40038000 	.word	0x40038000
  404e34:	00404999 	.word	0x00404999

00404e38 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
  404e38:	b580      	push	{r7, lr}
  404e3a:	b082      	sub	sp, #8
  404e3c:	af00      	add	r7, sp, #0
  404e3e:	4603      	mov	r3, r0
  404e40:	71fb      	strb	r3, [r7, #7]
	return hri_usbhs_get_DEVEPTISR_RXSTPI_bit(USBHS, epn);
  404e42:	79fb      	ldrb	r3, [r7, #7]
  404e44:	4619      	mov	r1, r3
  404e46:	4804      	ldr	r0, [pc, #16]	; (404e58 <_usbd_ep_is_setup+0x20>)
  404e48:	4b04      	ldr	r3, [pc, #16]	; (404e5c <_usbd_ep_is_setup+0x24>)
  404e4a:	4798      	blx	r3
  404e4c:	4603      	mov	r3, r0
}
  404e4e:	4618      	mov	r0, r3
  404e50:	3708      	adds	r7, #8
  404e52:	46bd      	mov	sp, r7
  404e54:	bd80      	pop	{r7, pc}
  404e56:	bf00      	nop
  404e58:	40038000 	.word	0x40038000
  404e5c:	00404823 	.word	0x00404823

00404e60 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
  404e60:	b580      	push	{r7, lr}
  404e62:	b082      	sub	sp, #8
  404e64:	af00      	add	r7, sp, #0
  404e66:	4603      	mov	r3, r0
  404e68:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_RXSTPI);
  404e6a:	79fb      	ldrb	r3, [r7, #7]
  404e6c:	2104      	movs	r1, #4
  404e6e:	4618      	mov	r0, r3
  404e70:	4b02      	ldr	r3, [pc, #8]	; (404e7c <_usbd_ep_ack_setup+0x1c>)
  404e72:	4798      	blx	r3
}
  404e74:	bf00      	nop
  404e76:	3708      	adds	r7, #8
  404e78:	46bd      	mov	sp, r7
  404e7a:	bd80      	pop	{r7, pc}
  404e7c:	00404c81 	.word	0x00404c81

00404e80 <_usbd_ep_reset_toggle>:

/** \brief Reset endpoint toggle value
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset_toggle(uint8_t epn)
{
  404e80:	b580      	push	{r7, lr}
  404e82:	b084      	sub	sp, #16
  404e84:	af00      	add	r7, sp, #0
  404e86:	4603      	mov	r3, r0
  404e88:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  404e8a:	4b06      	ldr	r3, [pc, #24]	; (404ea4 <_usbd_ep_reset_toggle+0x24>)
  404e8c:	60fb      	str	r3, [r7, #12]
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RSTDTS);
  404e8e:	79fb      	ldrb	r3, [r7, #7]
  404e90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  404e94:	4619      	mov	r1, r3
  404e96:	68f8      	ldr	r0, [r7, #12]
  404e98:	4b03      	ldr	r3, [pc, #12]	; (404ea8 <_usbd_ep_reset_toggle+0x28>)
  404e9a:	4798      	blx	r3
}
  404e9c:	bf00      	nop
  404e9e:	3710      	adds	r7, #16
  404ea0:	46bd      	mov	sp, r7
  404ea2:	bd80      	pop	{r7, pc}
  404ea4:	40038000 	.word	0x40038000
  404ea8:	00404973 	.word	0x00404973

00404eac <_usbd_ep_get_trans_count>:

/** \brief Get byte count for transactions
 * \param[in] epn Endpoint number.
 */
static inline uint16_t _usbd_ep_get_trans_count(uint8_t epn)
{
  404eac:	b580      	push	{r7, lr}
  404eae:	b082      	sub	sp, #8
  404eb0:	af00      	add	r7, sp, #0
  404eb2:	4603      	mov	r3, r0
  404eb4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  404eb6:	79fb      	ldrb	r3, [r7, #7]
  404eb8:	4a05      	ldr	r2, [pc, #20]	; (404ed0 <_usbd_ep_get_trans_count+0x24>)
  404eba:	4619      	mov	r1, r3
  404ebc:	4805      	ldr	r0, [pc, #20]	; (404ed4 <_usbd_ep_get_trans_count+0x28>)
  404ebe:	4b06      	ldr	r3, [pc, #24]	; (404ed8 <_usbd_ep_get_trans_count+0x2c>)
  404ec0:	4798      	blx	r3
  404ec2:	4603      	mov	r3, r0
  404ec4:	0d1b      	lsrs	r3, r3, #20
  404ec6:	b29b      	uxth	r3, r3
}
  404ec8:	4618      	mov	r0, r3
  404eca:	3708      	adds	r7, #8
  404ecc:	46bd      	mov	sp, r7
  404ece:	bd80      	pop	{r7, pc}
  404ed0:	7ff00000 	.word	0x7ff00000
  404ed4:	40038000 	.word	0x40038000
  404ed8:	004048b9 	.word	0x004048b9

00404edc <_usbd_ep_send_zlp_in>:

/** \brief Send a ZLP IN on control endpoint
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_send_zlp_in(uint8_t epn)
{
  404edc:	b580      	push	{r7, lr}
  404ede:	b084      	sub	sp, #16
  404ee0:	af00      	add	r7, sp, #0
  404ee2:	4603      	mov	r3, r0
  404ee4:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  404ee6:	4b0c      	ldr	r3, [pc, #48]	; (404f18 <_usbd_ep_send_zlp_in+0x3c>)
  404ee8:	60fb      	str	r3, [r7, #12]

	/* Send ZLP on IN endpoint. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  404eea:	79fb      	ldrb	r3, [r7, #7]
  404eec:	2201      	movs	r2, #1
  404eee:	4619      	mov	r1, r3
  404ef0:	68f8      	ldr	r0, [r7, #12]
  404ef2:	4b0a      	ldr	r3, [pc, #40]	; (404f1c <_usbd_ep_send_zlp_in+0x40>)
  404ef4:	4798      	blx	r3

	/* To detect a protocol error, enable nak interrupt on data OUT phase. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_NAKOUTIC);
  404ef6:	79fb      	ldrb	r3, [r7, #7]
  404ef8:	2208      	movs	r2, #8
  404efa:	4619      	mov	r1, r3
  404efc:	68f8      	ldr	r0, [r7, #12]
  404efe:	4b07      	ldr	r3, [pc, #28]	; (404f1c <_usbd_ep_send_zlp_in+0x40>)
  404f00:	4798      	blx	r3
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_NAKOUTES);
  404f02:	79fb      	ldrb	r3, [r7, #7]
  404f04:	2208      	movs	r2, #8
  404f06:	4619      	mov	r1, r3
  404f08:	68f8      	ldr	r0, [r7, #12]
  404f0a:	4b05      	ldr	r3, [pc, #20]	; (404f20 <_usbd_ep_send_zlp_in+0x44>)
  404f0c:	4798      	blx	r3
}
  404f0e:	bf00      	nop
  404f10:	3710      	adds	r7, #16
  404f12:	46bd      	mov	sp, r7
  404f14:	bd80      	pop	{r7, pc}
  404f16:	bf00      	nop
  404f18:	40038000 	.word	0x40038000
  404f1c:	0040490b 	.word	0x0040490b
  404f20:	00404973 	.word	0x00404973

00404f24 <_usbd_ep_set_in_rdy>:
/** Set IN ready for IN transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, const bool rdy)
{
  404f24:	b580      	push	{r7, lr}
  404f26:	b084      	sub	sp, #16
  404f28:	af00      	add	r7, sp, #0
  404f2a:	4603      	mov	r3, r0
  404f2c:	460a      	mov	r2, r1
  404f2e:	71fb      	strb	r3, [r7, #7]
  404f30:	4613      	mov	r3, r2
  404f32:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  404f34:	4b0a      	ldr	r3, [pc, #40]	; (404f60 <_usbd_ep_set_in_rdy+0x3c>)
  404f36:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  404f38:	79bb      	ldrb	r3, [r7, #6]
  404f3a:	2b00      	cmp	r3, #0
  404f3c:	d006      	beq.n	404f4c <_usbd_ep_set_in_rdy+0x28>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  404f3e:	79fb      	ldrb	r3, [r7, #7]
  404f40:	2201      	movs	r2, #1
  404f42:	4619      	mov	r1, r3
  404f44:	68f8      	ldr	r0, [r7, #12]
  404f46:	4b07      	ldr	r3, [pc, #28]	; (404f64 <_usbd_ep_set_in_rdy+0x40>)
  404f48:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
	}
}
  404f4a:	e005      	b.n	404f58 <_usbd_ep_set_in_rdy+0x34>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  404f4c:	79fb      	ldrb	r3, [r7, #7]
  404f4e:	2201      	movs	r2, #1
  404f50:	4619      	mov	r1, r3
  404f52:	68f8      	ldr	r0, [r7, #12]
  404f54:	4b04      	ldr	r3, [pc, #16]	; (404f68 <_usbd_ep_set_in_rdy+0x44>)
  404f56:	4798      	blx	r3
}
  404f58:	bf00      	nop
  404f5a:	3710      	adds	r7, #16
  404f5c:	46bd      	mov	sp, r7
  404f5e:	bd80      	pop	{r7, pc}
  404f60:	40038000 	.word	0x40038000
  404f64:	0040490b 	.word	0x0040490b
  404f68:	0040494d 	.word	0x0040494d

00404f6c <_usbd_ep_set_out_rdy>:
/** \brief Set ready for OUT transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, const bool rdy)
{
  404f6c:	b580      	push	{r7, lr}
  404f6e:	b084      	sub	sp, #16
  404f70:	af00      	add	r7, sp, #0
  404f72:	4603      	mov	r3, r0
  404f74:	460a      	mov	r2, r1
  404f76:	71fb      	strb	r3, [r7, #7]
  404f78:	4613      	mov	r3, r2
  404f7a:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  404f7c:	4b0a      	ldr	r3, [pc, #40]	; (404fa8 <_usbd_ep_set_out_rdy+0x3c>)
  404f7e:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  404f80:	79bb      	ldrb	r3, [r7, #6]
  404f82:	2b00      	cmp	r3, #0
  404f84:	d006      	beq.n	404f94 <_usbd_ep_set_out_rdy+0x28>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_RXOUTIS);
  404f86:	79fb      	ldrb	r3, [r7, #7]
  404f88:	2202      	movs	r2, #2
  404f8a:	4619      	mov	r1, r3
  404f8c:	68f8      	ldr	r0, [r7, #12]
  404f8e:	4b07      	ldr	r3, [pc, #28]	; (404fac <_usbd_ep_set_out_rdy+0x40>)
  404f90:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
	}
}
  404f92:	e005      	b.n	404fa0 <_usbd_ep_set_out_rdy+0x34>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  404f94:	79fb      	ldrb	r3, [r7, #7]
  404f96:	2202      	movs	r2, #2
  404f98:	4619      	mov	r1, r3
  404f9a:	68f8      	ldr	r0, [r7, #12]
  404f9c:	4b04      	ldr	r3, [pc, #16]	; (404fb0 <_usbd_ep_set_out_rdy+0x44>)
  404f9e:	4798      	blx	r3
}
  404fa0:	bf00      	nop
  404fa2:	3710      	adds	r7, #16
  404fa4:	46bd      	mov	sp, r7
  404fa6:	bd80      	pop	{r7, pc}
  404fa8:	40038000 	.word	0x40038000
  404fac:	0040494d 	.word	0x0040494d
  404fb0:	0040490b 	.word	0x0040490b

00404fb4 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
  404fb4:	b580      	push	{r7, lr}
  404fb6:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_SOFC);
  404fb8:	2104      	movs	r1, #4
  404fba:	4804      	ldr	r0, [pc, #16]	; (404fcc <_usb_d_dev_sof+0x18>)
  404fbc:	4b04      	ldr	r3, [pc, #16]	; (404fd0 <_usb_d_dev_sof+0x1c>)
  404fbe:	4798      	blx	r3
	dev_inst.callbacks.sof();
  404fc0:	4b04      	ldr	r3, [pc, #16]	; (404fd4 <_usb_d_dev_sof+0x20>)
  404fc2:	681b      	ldr	r3, [r3, #0]
  404fc4:	4798      	blx	r3
}
  404fc6:	bf00      	nop
  404fc8:	bd80      	pop	{r7, pc}
  404fca:	bf00      	nop
  404fcc:	40038000 	.word	0x40038000
  404fd0:	00404931 	.word	0x00404931
  404fd4:	20401170 	.word	0x20401170

00404fd8 <_usb_d_dev_msof>:

/**
 * \brief Handles USB MSOF interrupt
 */
static inline void _usb_d_dev_msof(void)
{
  404fd8:	b580      	push	{r7, lr}
  404fda:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_MSOFC);
  404fdc:	2102      	movs	r1, #2
  404fde:	4804      	ldr	r0, [pc, #16]	; (404ff0 <_usb_d_dev_msof+0x18>)
  404fe0:	4b04      	ldr	r3, [pc, #16]	; (404ff4 <_usb_d_dev_msof+0x1c>)
  404fe2:	4798      	blx	r3
	dev_inst.callbacks.sof();
  404fe4:	4b04      	ldr	r3, [pc, #16]	; (404ff8 <_usb_d_dev_msof+0x20>)
  404fe6:	681b      	ldr	r3, [r3, #0]
  404fe8:	4798      	blx	r3
}
  404fea:	bf00      	nop
  404fec:	bd80      	pop	{r7, pc}
  404fee:	bf00      	nop
  404ff0:	40038000 	.word	0x40038000
  404ff4:	00404931 	.word	0x00404931
  404ff8:	20401170 	.word	0x20401170

00404ffc <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
  404ffc:	b580      	push	{r7, lr}
  404ffe:	b082      	sub	sp, #8
  405000:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405002:	4b0b      	ldr	r3, [pc, #44]	; (405030 <_usb_d_dev_wakeup+0x34>)
  405004:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405006:	2170      	movs	r1, #112	; 0x70
  405008:	6878      	ldr	r0, [r7, #4]
  40500a:	4b0a      	ldr	r3, [pc, #40]	; (405034 <_usb_d_dev_wakeup+0x38>)
  40500c:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  40500e:	2170      	movs	r1, #112	; 0x70
  405010:	6878      	ldr	r0, [r7, #4]
  405012:	4b09      	ldr	r3, [pc, #36]	; (405038 <_usb_d_dev_wakeup+0x3c>)
  405014:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_SUSPE_bit(hw);
  405016:	6878      	ldr	r0, [r7, #4]
  405018:	4b08      	ldr	r3, [pc, #32]	; (40503c <_usb_d_dev_wakeup+0x40>)
  40501a:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  40501c:	4b08      	ldr	r3, [pc, #32]	; (405040 <_usb_d_dev_wakeup+0x44>)
  40501e:	685b      	ldr	r3, [r3, #4]
  405020:	2100      	movs	r1, #0
  405022:	2002      	movs	r0, #2
  405024:	4798      	blx	r3
}
  405026:	bf00      	nop
  405028:	3708      	adds	r7, #8
  40502a:	46bd      	mov	sp, r7
  40502c:	bd80      	pop	{r7, pc}
  40502e:	bf00      	nop
  405030:	40038000 	.word	0x40038000
  405034:	00404931 	.word	0x00404931
  405038:	00404807 	.word	0x00404807
  40503c:	004047b9 	.word	0x004047b9
  405040:	20401170 	.word	0x20401170

00405044 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
  405044:	b580      	push	{r7, lr}
  405046:	b082      	sub	sp, #8
  405048:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  40504a:	4b0c      	ldr	r3, [pc, #48]	; (40507c <_usb_d_dev_reset+0x38>)
  40504c:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USBHS_DEVICR_EORSTC);
  40504e:	2108      	movs	r1, #8
  405050:	6878      	ldr	r0, [r7, #4]
  405052:	4b0b      	ldr	r3, [pc, #44]	; (405080 <_usb_d_dev_reset+0x3c>)
  405054:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405056:	2170      	movs	r1, #112	; 0x70
  405058:	6878      	ldr	r0, [r7, #4]
  40505a:	4b0a      	ldr	r3, [pc, #40]	; (405084 <_usb_d_dev_reset+0x40>)
  40505c:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  40505e:	2101      	movs	r1, #1
  405060:	6878      	ldr	r0, [r7, #4]
  405062:	4b09      	ldr	r3, [pc, #36]	; (405088 <_usb_d_dev_reset+0x44>)
  405064:	4798      	blx	r3

	_usb_d_dev_reset_epts();
  405066:	4b09      	ldr	r3, [pc, #36]	; (40508c <_usb_d_dev_reset+0x48>)
  405068:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  40506a:	4b09      	ldr	r3, [pc, #36]	; (405090 <_usb_d_dev_reset+0x4c>)
  40506c:	685b      	ldr	r3, [r3, #4]
  40506e:	2100      	movs	r1, #0
  405070:	2001      	movs	r0, #1
  405072:	4798      	blx	r3
}
  405074:	bf00      	nop
  405076:	3708      	adds	r7, #8
  405078:	46bd      	mov	sp, r7
  40507a:	bd80      	pop	{r7, pc}
  40507c:	40038000 	.word	0x40038000
  405080:	00404931 	.word	0x00404931
  405084:	00404807 	.word	0x00404807
  405088:	004047d3 	.word	0x004047d3
  40508c:	00405ab1 	.word	0x00405ab1
  405090:	20401170 	.word	0x20401170

00405094 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
  405094:	b580      	push	{r7, lr}
  405096:	b082      	sub	sp, #8
  405098:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  40509a:	4b0b      	ldr	r3, [pc, #44]	; (4050c8 <_usb_d_dev_suspend+0x34>)
  40509c:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  40509e:	2101      	movs	r1, #1
  4050a0:	6878      	ldr	r0, [r7, #4]
  4050a2:	4b0a      	ldr	r3, [pc, #40]	; (4050cc <_usb_d_dev_suspend+0x38>)
  4050a4:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(USBHS, USB_D_SUSPEND_INT_FLAGS);
  4050a6:	2101      	movs	r1, #1
  4050a8:	4807      	ldr	r0, [pc, #28]	; (4050c8 <_usb_d_dev_suspend+0x34>)
  4050aa:	4b09      	ldr	r3, [pc, #36]	; (4050d0 <_usb_d_dev_suspend+0x3c>)
  4050ac:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USB_D_WAKEUP_INT_FLAGS);
  4050ae:	2170      	movs	r1, #112	; 0x70
  4050b0:	4805      	ldr	r0, [pc, #20]	; (4050c8 <_usb_d_dev_suspend+0x34>)
  4050b2:	4b08      	ldr	r3, [pc, #32]	; (4050d4 <_usb_d_dev_suspend+0x40>)
  4050b4:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  4050b6:	4b08      	ldr	r3, [pc, #32]	; (4050d8 <_usb_d_dev_suspend+0x44>)
  4050b8:	685b      	ldr	r3, [r3, #4]
  4050ba:	2100      	movs	r1, #0
  4050bc:	2004      	movs	r0, #4
  4050be:	4798      	blx	r3
}
  4050c0:	bf00      	nop
  4050c2:	3708      	adds	r7, #8
  4050c4:	46bd      	mov	sp, r7
  4050c6:	bd80      	pop	{r7, pc}
  4050c8:	40038000 	.word	0x40038000
  4050cc:	00404931 	.word	0x00404931
  4050d0:	00404807 	.word	0x00404807
  4050d4:	004047d3 	.word	0x004047d3
  4050d8:	20401170 	.word	0x20401170

004050dc <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
  4050dc:	b580      	push	{r7, lr}
  4050de:	b082      	sub	sp, #8
  4050e0:	af00      	add	r7, sp, #0
	bool     rc    = true;
  4050e2:	2301      	movs	r3, #1
  4050e4:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  4050e6:	481f      	ldr	r0, [pc, #124]	; (405164 <_usb_d_dev_handle_nep+0x88>)
  4050e8:	4b1f      	ldr	r3, [pc, #124]	; (405168 <_usb_d_dev_handle_nep+0x8c>)
  4050ea:	4798      	blx	r3
  4050ec:	4603      	mov	r3, r0
  4050ee:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  4050f0:	481c      	ldr	r0, [pc, #112]	; (405164 <_usb_d_dev_handle_nep+0x88>)
  4050f2:	4b1e      	ldr	r3, [pc, #120]	; (40516c <_usb_d_dev_handle_nep+0x90>)
  4050f4:	4798      	blx	r3
  4050f6:	4603      	mov	r3, r0
  4050f8:	b29a      	uxth	r2, r3
  4050fa:	88bb      	ldrh	r3, [r7, #4]
  4050fc:	4013      	ands	r3, r2
  4050fe:	80bb      	strh	r3, [r7, #4]

	if (flags & USBHS_DEVISR_SOF) {
  405100:	88bb      	ldrh	r3, [r7, #4]
  405102:	f003 0304 	and.w	r3, r3, #4
  405106:	2b00      	cmp	r3, #0
  405108:	d003      	beq.n	405112 <_usb_d_dev_handle_nep+0x36>
		_usb_d_dev_sof();
  40510a:	4b19      	ldr	r3, [pc, #100]	; (405170 <_usb_d_dev_handle_nep+0x94>)
  40510c:	4798      	blx	r3
		return true;
  40510e:	2301      	movs	r3, #1
  405110:	e023      	b.n	40515a <_usb_d_dev_handle_nep+0x7e>
	} else if (flags & USBHS_DEVISR_MSOF) {
  405112:	88bb      	ldrh	r3, [r7, #4]
  405114:	f003 0302 	and.w	r3, r3, #2
  405118:	2b00      	cmp	r3, #0
  40511a:	d003      	beq.n	405124 <_usb_d_dev_handle_nep+0x48>
		_usb_d_dev_msof();
  40511c:	4b15      	ldr	r3, [pc, #84]	; (405174 <_usb_d_dev_handle_nep+0x98>)
  40511e:	4798      	blx	r3
		return true;
  405120:	2301      	movs	r3, #1
  405122:	e01a      	b.n	40515a <_usb_d_dev_handle_nep+0x7e>
	}

	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  405124:	88bb      	ldrh	r3, [r7, #4]
  405126:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40512a:	2b00      	cmp	r3, #0
  40512c:	d002      	beq.n	405134 <_usb_d_dev_handle_nep+0x58>
		_usb_d_dev_wakeup();
  40512e:	4b12      	ldr	r3, [pc, #72]	; (405178 <_usb_d_dev_handle_nep+0x9c>)
  405130:	4798      	blx	r3
  405132:	e011      	b.n	405158 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_EORST) {
  405134:	88bb      	ldrh	r3, [r7, #4]
  405136:	f003 0308 	and.w	r3, r3, #8
  40513a:	2b00      	cmp	r3, #0
  40513c:	d002      	beq.n	405144 <_usb_d_dev_handle_nep+0x68>
		_usb_d_dev_reset();
  40513e:	4b0f      	ldr	r3, [pc, #60]	; (40517c <_usb_d_dev_handle_nep+0xa0>)
  405140:	4798      	blx	r3
  405142:	e009      	b.n	405158 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_SUSP) {
  405144:	88bb      	ldrh	r3, [r7, #4]
  405146:	f003 0301 	and.w	r3, r3, #1
  40514a:	2b00      	cmp	r3, #0
  40514c:	d002      	beq.n	405154 <_usb_d_dev_handle_nep+0x78>
		_usb_d_dev_suspend();
  40514e:	4b0c      	ldr	r3, [pc, #48]	; (405180 <_usb_d_dev_handle_nep+0xa4>)
  405150:	4798      	blx	r3
  405152:	e001      	b.n	405158 <_usb_d_dev_handle_nep+0x7c>
	} else {
		rc = false;
  405154:	2300      	movs	r3, #0
  405156:	71fb      	strb	r3, [r7, #7]
	}

	return rc;
  405158:	79fb      	ldrb	r3, [r7, #7]
}
  40515a:	4618      	mov	r0, r3
  40515c:	3708      	adds	r7, #8
  40515e:	46bd      	mov	sp, r7
  405160:	bd80      	pop	{r7, pc}
  405162:	bf00      	nop
  405164:	40038000 	.word	0x40038000
  405168:	00404b31 	.word	0x00404b31
  40516c:	004047ef 	.word	0x004047ef
  405170:	00404fb5 	.word	0x00404fb5
  405174:	00404fd9 	.word	0x00404fd9
  405178:	00404ffd 	.word	0x00404ffd
  40517c:	00405045 	.word	0x00405045
  405180:	00405095 	.word	0x00405095

00405184 <_usb_d_dev_in_next>:
/**
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept)
{
  405184:	b580      	push	{r7, lr}
  405186:	b08a      	sub	sp, #40	; 0x28
  405188:	af00      	add	r7, sp, #0
  40518a:	6078      	str	r0, [r7, #4]
	Usbhs *  hw       = USBHS;
  40518c:	4b65      	ldr	r3, [pc, #404]	; (405324 <_usb_d_dev_in_next+0x1a0>)
  40518e:	623b      	str	r3, [r7, #32]
	uint8_t  epn      = USB_EP_GET_N(ept->ep);
  405190:	687b      	ldr	r3, [r7, #4]
  405192:	7c9b      	ldrb	r3, [r3, #18]
  405194:	f003 030f 	and.w	r3, r3, #15
  405198:	77fb      	strb	r3, [r7, #31]
	uint8_t *ptr_dest = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  40519a:	7ffb      	ldrb	r3, [r7, #31]
  40519c:	03da      	lsls	r2, r3, #15
  40519e:	4b62      	ldr	r3, [pc, #392]	; (405328 <_usb_d_dev_in_next+0x1a4>)
  4051a0:	4413      	add	r3, r2
  4051a2:	61bb      	str	r3, [r7, #24]
	uint8_t *ptr_src;

	uint16_t trans_count = ept->trans_load;
  4051a4:	687b      	ldr	r3, [r7, #4]
  4051a6:	68db      	ldr	r3, [r3, #12]
  4051a8:	82fb      	strh	r3, [r7, #22]
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  4051aa:	687b      	ldr	r3, [r7, #4]
  4051ac:	8a1b      	ldrh	r3, [r3, #16]
  4051ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4051b2:	4293      	cmp	r3, r2
  4051b4:	d103      	bne.n	4051be <_usb_d_dev_in_next+0x3a>
  4051b6:	687b      	ldr	r3, [r7, #4]
  4051b8:	8a1b      	ldrh	r3, [r3, #16]
  4051ba:	b21b      	sxth	r3, r3
  4051bc:	e004      	b.n	4051c8 <_usb_d_dev_in_next+0x44>
  4051be:	687b      	ldr	r3, [r7, #4]
  4051c0:	8a1b      	ldrh	r3, [r3, #16]
  4051c2:	3b01      	subs	r3, #1
  4051c4:	b29b      	uxth	r3, r3
  4051c6:	b21b      	sxth	r3, r3
  4051c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
  4051cc:	4013      	ands	r3, r2
  4051ce:	b21b      	sxth	r3, r3
  4051d0:	82bb      	strh	r3, [r7, #20]
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  4051d2:	687b      	ldr	r3, [r7, #4]
  4051d4:	7cdb      	ldrb	r3, [r3, #19]
  4051d6:	f003 0307 	and.w	r3, r3, #7
  4051da:	b2db      	uxtb	r3, r3
  4051dc:	2b01      	cmp	r3, #1
  4051de:	bf0c      	ite	eq
  4051e0:	2301      	moveq	r3, #1
  4051e2:	2300      	movne	r3, #0
  4051e4:	74fb      	strb	r3, [r7, #19]

	if (ept->trans_count >= ept->trans_size) {
  4051e6:	687b      	ldr	r3, [r7, #4]
  4051e8:	689a      	ldr	r2, [r3, #8]
  4051ea:	687b      	ldr	r3, [r7, #4]
  4051ec:	685b      	ldr	r3, [r3, #4]
  4051ee:	429a      	cmp	r2, r3
  4051f0:	d358      	bcc.n	4052a4 <_usb_d_dev_in_next+0x120>
		if (ept->flags.bits.need_zlp) {
  4051f2:	687b      	ldr	r3, [r7, #4]
  4051f4:	7cdb      	ldrb	r3, [r3, #19]
  4051f6:	f003 0310 	and.w	r3, r3, #16
  4051fa:	b2db      	uxtb	r3, r3
  4051fc:	2b00      	cmp	r3, #0
  4051fe:	d019      	beq.n	405234 <_usb_d_dev_in_next+0xb0>
			ept->trans_load          = 0;
  405200:	687b      	ldr	r3, [r7, #4]
  405202:	2200      	movs	r2, #0
  405204:	60da      	str	r2, [r3, #12]
			ept->flags.bits.need_zlp = 0;
  405206:	687a      	ldr	r2, [r7, #4]
  405208:	7cd3      	ldrb	r3, [r2, #19]
  40520a:	f36f 1304 	bfc	r3, #4, #1
  40520e:	74d3      	strb	r3, [r2, #19]
			_usbd_ep_send_zlp_in(epn);
  405210:	7ffb      	ldrb	r3, [r7, #31]
  405212:	4618      	mov	r0, r3
  405214:	4b45      	ldr	r3, [pc, #276]	; (40532c <_usb_d_dev_in_next+0x1a8>)
  405216:	4798      	blx	r3
			if (!is_ctrl) {
  405218:	7cfb      	ldrb	r3, [r7, #19]
  40521a:	f083 0301 	eor.w	r3, r3, #1
  40521e:	b2db      	uxtb	r3, r3
  405220:	2b00      	cmp	r3, #0
  405222:	d078      	beq.n	405316 <_usb_d_dev_in_next+0x192>
				/** Switch to next bank. */
				hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  405224:	7ffb      	ldrb	r3, [r7, #31]
  405226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40522a:	4619      	mov	r1, r3
  40522c:	6a38      	ldr	r0, [r7, #32]
  40522e:	4b40      	ldr	r3, [pc, #256]	; (405330 <_usb_d_dev_in_next+0x1ac>)
  405230:	4798      	blx	r3
			}
			return;
  405232:	e070      	b.n	405316 <_usb_d_dev_in_next+0x192>
		}

		/* Complete. */
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_TXINEC);
  405234:	7ffb      	ldrb	r3, [r7, #31]
  405236:	2201      	movs	r2, #1
  405238:	4619      	mov	r1, r3
  40523a:	6a38      	ldr	r0, [r7, #32]
  40523c:	4b3c      	ldr	r3, [pc, #240]	; (405330 <_usb_d_dev_in_next+0x1ac>)
  40523e:	4798      	blx	r3
		if (!is_ctrl) {
  405240:	7cfb      	ldrb	r3, [r7, #19]
  405242:	f083 0301 	eor.w	r3, r3, #1
  405246:	b2db      	uxtb	r3, r3
  405248:	2b00      	cmp	r3, #0
  40524a:	d008      	beq.n	40525e <_usb_d_dev_in_next+0xda>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  40524c:	7ffb      	ldrb	r3, [r7, #31]
  40524e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405252:	fa02 f303 	lsl.w	r3, r2, r3
  405256:	4619      	mov	r1, r3
  405258:	6a38      	ldr	r0, [r7, #32]
  40525a:	4b36      	ldr	r3, [pc, #216]	; (405334 <_usb_d_dev_in_next+0x1b0>)
  40525c:	4798      	blx	r3
		}

		ept->trans_size = ept->trans_count;
  40525e:	687b      	ldr	r3, [r7, #4]
  405260:	689a      	ldr	r2, [r3, #8]
  405262:	687b      	ldr	r3, [r7, #4]
  405264:	605a      	str	r2, [r3, #4]

		/* No ping-pong, so ask more data without background transfer. */
		if (last_pkt == ept->size) {
  405266:	687b      	ldr	r3, [r7, #4]
  405268:	8a1b      	ldrh	r3, [r3, #16]
  40526a:	8aba      	ldrh	r2, [r7, #20]
  40526c:	429a      	cmp	r2, r3
  40526e:	d114      	bne.n	40529a <_usb_d_dev_in_next+0x116>
			ept->flags.bits.is_busy = 0;
  405270:	687a      	ldr	r2, [r7, #4]
  405272:	7cd3      	ldrb	r3, [r2, #19]
  405274:	f36f 1386 	bfc	r3, #6, #1
  405278:	74d3      	strb	r3, [r2, #19]
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  40527a:	4b2f      	ldr	r3, [pc, #188]	; (405338 <_usb_d_dev_in_next+0x1b4>)
  40527c:	68db      	ldr	r3, [r3, #12]
  40527e:	687a      	ldr	r2, [r7, #4]
  405280:	7c90      	ldrb	r0, [r2, #18]
  405282:	687a      	ldr	r2, [r7, #4]
  405284:	6892      	ldr	r2, [r2, #8]
  405286:	4611      	mov	r1, r2
  405288:	4798      	blx	r3
  40528a:	4603      	mov	r3, r0
  40528c:	2b00      	cmp	r3, #0
  40528e:	d144      	bne.n	40531a <_usb_d_dev_in_next+0x196>
				/* More data added. */
				return;
			}
			ept->flags.bits.is_busy = 1;
  405290:	687a      	ldr	r2, [r7, #4]
  405292:	7cd3      	ldrb	r3, [r2, #19]
  405294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405298:	74d3      	strb	r3, [r2, #19]
		}
		/* Finish normally. */
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  40529a:	2100      	movs	r1, #0
  40529c:	6878      	ldr	r0, [r7, #4]
  40529e:	4b27      	ldr	r3, [pc, #156]	; (40533c <_usb_d_dev_in_next+0x1b8>)
  4052a0:	4798      	blx	r3
		return;
  4052a2:	e03b      	b.n	40531c <_usb_d_dev_in_next+0x198>
	} else {
		trans_next = ept->trans_size - ept->trans_count;
  4052a4:	687b      	ldr	r3, [r7, #4]
  4052a6:	685b      	ldr	r3, [r3, #4]
  4052a8:	b29a      	uxth	r2, r3
  4052aa:	687b      	ldr	r3, [r7, #4]
  4052ac:	689b      	ldr	r3, [r3, #8]
  4052ae:	b29b      	uxth	r3, r3
  4052b0:	1ad3      	subs	r3, r2, r3
  4052b2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (trans_next > ept->size) {
  4052b4:	687b      	ldr	r3, [r7, #4]
  4052b6:	8a1b      	ldrh	r3, [r3, #16]
  4052b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  4052ba:	429a      	cmp	r2, r3
  4052bc:	d902      	bls.n	4052c4 <_usb_d_dev_in_next+0x140>
			trans_next = ept->size;
  4052be:	687b      	ldr	r3, [r7, #4]
  4052c0:	8a1b      	ldrh	r3, [r3, #16]
  4052c2:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		ptr_src = &ept->trans_buf[ept->trans_count];
  4052c4:	687b      	ldr	r3, [r7, #4]
  4052c6:	681a      	ldr	r2, [r3, #0]
  4052c8:	687b      	ldr	r3, [r7, #4]
  4052ca:	689b      	ldr	r3, [r3, #8]
  4052cc:	4413      	add	r3, r2
  4052ce:	60fb      	str	r3, [r7, #12]
		memcpy(ptr_dest, ptr_src, trans_next);
  4052d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4052d2:	461a      	mov	r2, r3
  4052d4:	68f9      	ldr	r1, [r7, #12]
  4052d6:	69b8      	ldr	r0, [r7, #24]
  4052d8:	4b19      	ldr	r3, [pc, #100]	; (405340 <_usb_d_dev_in_next+0x1bc>)
  4052da:	4798      	blx	r3
		ept->trans_load = trans_next;
  4052dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  4052de:	687b      	ldr	r3, [r7, #4]
  4052e0:	60da      	str	r2, [r3, #12]
		ept->trans_count += trans_next;
  4052e2:	687b      	ldr	r3, [r7, #4]
  4052e4:	689a      	ldr	r2, [r3, #8]
  4052e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  4052e8:	441a      	add	r2, r3
  4052ea:	687b      	ldr	r3, [r7, #4]
  4052ec:	609a      	str	r2, [r3, #8]
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  4052ee:	7ffb      	ldrb	r3, [r7, #31]
  4052f0:	2201      	movs	r2, #1
  4052f2:	4619      	mov	r1, r3
  4052f4:	6a38      	ldr	r0, [r7, #32]
  4052f6:	4b13      	ldr	r3, [pc, #76]	; (405344 <_usb_d_dev_in_next+0x1c0>)
  4052f8:	4798      	blx	r3
		if (!is_ctrl) {
  4052fa:	7cfb      	ldrb	r3, [r7, #19]
  4052fc:	f083 0301 	eor.w	r3, r3, #1
  405300:	b2db      	uxtb	r3, r3
  405302:	2b00      	cmp	r3, #0
  405304:	d00a      	beq.n	40531c <_usb_d_dev_in_next+0x198>
			/** Switch to next bank. */
			hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  405306:	7ffb      	ldrb	r3, [r7, #31]
  405308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40530c:	4619      	mov	r1, r3
  40530e:	6a38      	ldr	r0, [r7, #32]
  405310:	4b07      	ldr	r3, [pc, #28]	; (405330 <_usb_d_dev_in_next+0x1ac>)
  405312:	4798      	blx	r3
  405314:	e002      	b.n	40531c <_usb_d_dev_in_next+0x198>
			return;
  405316:	bf00      	nop
  405318:	e000      	b.n	40531c <_usb_d_dev_in_next+0x198>
				return;
  40531a:	bf00      	nop
		}
	}
}
  40531c:	3728      	adds	r7, #40	; 0x28
  40531e:	46bd      	mov	sp, r7
  405320:	bd80      	pop	{r7, pc}
  405322:	bf00      	nop
  405324:	40038000 	.word	0x40038000
  405328:	a0100000 	.word	0xa0100000
  40532c:	00404edd 	.word	0x00404edd
  405330:	00404999 	.word	0x00404999
  405334:	00404807 	.word	0x00404807
  405338:	20401170 	.word	0x20401170
  40533c:	00405d8d 	.word	0x00405d8d
  405340:	00406a21 	.word	0x00406a21
  405344:	0040490b 	.word	0x0040490b

00405348 <_usb_d_dev_out_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept)
{
  405348:	b580      	push	{r7, lr}
  40534a:	b088      	sub	sp, #32
  40534c:	af00      	add	r7, sp, #0
  40534e:	6078      	str	r0, [r7, #4]
	Usbhs *  hw          = USBHS;
  405350:	4b47      	ldr	r3, [pc, #284]	; (405470 <_usb_d_dev_out_next+0x128>)
  405352:	61bb      	str	r3, [r7, #24]
	uint8_t  epn         = USB_EP_GET_N(ept->ep);
  405354:	687b      	ldr	r3, [r7, #4]
  405356:	7c9b      	ldrb	r3, [r3, #18]
  405358:	f003 030f 	and.w	r3, r3, #15
  40535c:	75fb      	strb	r3, [r7, #23]
	uint16_t last_trans  = _usbd_ep_get_trans_count(epn);
  40535e:	7dfb      	ldrb	r3, [r7, #23]
  405360:	4618      	mov	r0, r3
  405362:	4b44      	ldr	r3, [pc, #272]	; (405474 <_usb_d_dev_out_next+0x12c>)
  405364:	4798      	blx	r3
  405366:	4603      	mov	r3, r0
  405368:	83fb      	strh	r3, [r7, #30]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  40536a:	687b      	ldr	r3, [r7, #4]
  40536c:	685b      	ldr	r3, [r3, #4]
  40536e:	b29a      	uxth	r2, r3
  405370:	687b      	ldr	r3, [r7, #4]
  405372:	689b      	ldr	r3, [r3, #8]
  405374:	b29b      	uxth	r3, r3
  405376:	1ad3      	subs	r3, r2, r3
  405378:	82bb      	strh	r3, [r7, #20]
	uint8_t *ptr         = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  40537a:	7dfb      	ldrb	r3, [r7, #23]
  40537c:	03da      	lsls	r2, r3, #15
  40537e:	4b3e      	ldr	r3, [pc, #248]	; (405478 <_usb_d_dev_out_next+0x130>)
  405380:	4413      	add	r3, r2
  405382:	613b      	str	r3, [r7, #16]
	bool     is_full = false, is_short = false;
  405384:	2300      	movs	r3, #0
  405386:	777b      	strb	r3, [r7, #29]
  405388:	2300      	movs	r3, #0
  40538a:	773b      	strb	r3, [r7, #28]
	bool     is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  40538c:	687b      	ldr	r3, [r7, #4]
  40538e:	7cdb      	ldrb	r3, [r3, #19]
  405390:	f003 0307 	and.w	r3, r3, #7
  405394:	b2db      	uxtb	r3, r3
  405396:	2b01      	cmp	r3, #1
  405398:	bf0c      	ite	eq
  40539a:	2301      	moveq	r3, #1
  40539c:	2300      	movne	r3, #0
  40539e:	73fb      	strb	r3, [r7, #15]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  4053a0:	7dfb      	ldrb	r3, [r7, #23]
  4053a2:	2202      	movs	r2, #2
  4053a4:	4619      	mov	r1, r3
  4053a6:	69b8      	ldr	r0, [r7, #24]
  4053a8:	4b34      	ldr	r3, [pc, #208]	; (40547c <_usb_d_dev_out_next+0x134>)
  4053aa:	4798      	blx	r3

	if (last_trans > 0) {
  4053ac:	8bfb      	ldrh	r3, [r7, #30]
  4053ae:	2b00      	cmp	r3, #0
  4053b0:	d021      	beq.n	4053f6 <_usb_d_dev_out_next+0xae>
		if (last_trans > last_remain) {
  4053b2:	8bfa      	ldrh	r2, [r7, #30]
  4053b4:	8abb      	ldrh	r3, [r7, #20]
  4053b6:	429a      	cmp	r2, r3
  4053b8:	d903      	bls.n	4053c2 <_usb_d_dev_out_next+0x7a>
			last_trans = last_remain;
  4053ba:	8abb      	ldrh	r3, [r7, #20]
  4053bc:	83fb      	strh	r3, [r7, #30]
			is_full    = true;
  4053be:	2301      	movs	r3, #1
  4053c0:	777b      	strb	r3, [r7, #29]
		}
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  4053c2:	687b      	ldr	r3, [r7, #4]
  4053c4:	681a      	ldr	r2, [r3, #0]
  4053c6:	687b      	ldr	r3, [r7, #4]
  4053c8:	689b      	ldr	r3, [r3, #8]
  4053ca:	4413      	add	r3, r2
  4053cc:	8bfa      	ldrh	r2, [r7, #30]
  4053ce:	6939      	ldr	r1, [r7, #16]
  4053d0:	4618      	mov	r0, r3
  4053d2:	4b2b      	ldr	r3, [pc, #172]	; (405480 <_usb_d_dev_out_next+0x138>)
  4053d4:	4798      	blx	r3
		ept->trans_count += last_trans;
  4053d6:	687b      	ldr	r3, [r7, #4]
  4053d8:	689a      	ldr	r2, [r3, #8]
  4053da:	8bfb      	ldrh	r3, [r7, #30]
  4053dc:	441a      	add	r2, r3
  4053de:	687b      	ldr	r3, [r7, #4]
  4053e0:	609a      	str	r2, [r3, #8]
		ept->trans_load = last_trans;
  4053e2:	8bfa      	ldrh	r2, [r7, #30]
  4053e4:	687b      	ldr	r3, [r7, #4]
  4053e6:	60da      	str	r2, [r3, #12]
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  4053e8:	7dfb      	ldrb	r3, [r7, #23]
  4053ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4053ee:	4619      	mov	r1, r3
  4053f0:	69b8      	ldr	r0, [r7, #24]
  4053f2:	4b24      	ldr	r3, [pc, #144]	; (405484 <_usb_d_dev_out_next+0x13c>)
  4053f4:	4798      	blx	r3
	}

	if (last_trans < ept->size) {
  4053f6:	687b      	ldr	r3, [r7, #4]
  4053f8:	8a1b      	ldrh	r3, [r3, #16]
  4053fa:	8bfa      	ldrh	r2, [r7, #30]
  4053fc:	429a      	cmp	r2, r3
  4053fe:	d207      	bcs.n	405410 <_usb_d_dev_out_next+0xc8>
		ept->flags.bits.need_zlp = 0;
  405400:	687a      	ldr	r2, [r7, #4]
  405402:	7cd3      	ldrb	r3, [r2, #19]
  405404:	f36f 1304 	bfc	r3, #4, #1
  405408:	74d3      	strb	r3, [r2, #19]
		is_short                 = true;
  40540a:	2301      	movs	r3, #1
  40540c:	773b      	strb	r3, [r7, #28]
  40540e:	e007      	b.n	405420 <_usb_d_dev_out_next+0xd8>
	} else if (ept->trans_count >= ept->trans_size) {
  405410:	687b      	ldr	r3, [r7, #4]
  405412:	689a      	ldr	r2, [r3, #8]
  405414:	687b      	ldr	r3, [r7, #4]
  405416:	685b      	ldr	r3, [r3, #4]
  405418:	429a      	cmp	r2, r3
  40541a:	d301      	bcc.n	405420 <_usb_d_dev_out_next+0xd8>
		is_full = true;
  40541c:	2301      	movs	r3, #1
  40541e:	777b      	strb	r3, [r7, #29]
	}

	/* Complete. */
	if (is_full || is_short) {
  405420:	7f7b      	ldrb	r3, [r7, #29]
  405422:	2b00      	cmp	r3, #0
  405424:	d102      	bne.n	40542c <_usb_d_dev_out_next+0xe4>
  405426:	7f3b      	ldrb	r3, [r7, #28]
  405428:	2b00      	cmp	r3, #0
  40542a:	d01c      	beq.n	405466 <_usb_d_dev_out_next+0x11e>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_RXOUTEC);
  40542c:	7dfb      	ldrb	r3, [r7, #23]
  40542e:	2202      	movs	r2, #2
  405430:	4619      	mov	r1, r3
  405432:	69b8      	ldr	r0, [r7, #24]
  405434:	4b13      	ldr	r3, [pc, #76]	; (405484 <_usb_d_dev_out_next+0x13c>)
  405436:	4798      	blx	r3
		if (!is_ctrl) {
  405438:	7bfb      	ldrb	r3, [r7, #15]
  40543a:	f083 0301 	eor.w	r3, r3, #1
  40543e:	b2db      	uxtb	r3, r3
  405440:	2b00      	cmp	r3, #0
  405442:	d008      	beq.n	405456 <_usb_d_dev_out_next+0x10e>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  405444:	7dfb      	ldrb	r3, [r7, #23]
  405446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40544a:	fa02 f303 	lsl.w	r3, r2, r3
  40544e:	4619      	mov	r1, r3
  405450:	69b8      	ldr	r0, [r7, #24]
  405452:	4b0d      	ldr	r3, [pc, #52]	; (405488 <_usb_d_dev_out_next+0x140>)
  405454:	4798      	blx	r3
		}
		ept->trans_size = ept->trans_count;
  405456:	687b      	ldr	r3, [r7, #4]
  405458:	689a      	ldr	r2, [r3, #8]
  40545a:	687b      	ldr	r3, [r7, #4]
  40545c:	605a      	str	r2, [r3, #4]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  40545e:	2100      	movs	r1, #0
  405460:	6878      	ldr	r0, [r7, #4]
  405462:	4b0a      	ldr	r3, [pc, #40]	; (40548c <_usb_d_dev_out_next+0x144>)
  405464:	4798      	blx	r3
	}
}
  405466:	bf00      	nop
  405468:	3720      	adds	r7, #32
  40546a:	46bd      	mov	sp, r7
  40546c:	bd80      	pop	{r7, pc}
  40546e:	bf00      	nop
  405470:	40038000 	.word	0x40038000
  405474:	00404ead 	.word	0x00404ead
  405478:	a0100000 	.word	0xa0100000
  40547c:	0040490b 	.word	0x0040490b
  405480:	00406a21 	.word	0x00406a21
  405484:	00404999 	.word	0x00404999
  405488:	00404807 	.word	0x00404807
  40548c:	00405d8d 	.word	0x00405d8d

00405490 <_usb_d_dev_dma_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_dma_next(struct _usb_d_dev_ep *ept)
{
  405490:	b580      	push	{r7, lr}
  405492:	b086      	sub	sp, #24
  405494:	af00      	add	r7, sp, #0
  405496:	6078      	str	r0, [r7, #4]
	Usbhs *  hw  = USBHS;
  405498:	4b61      	ldr	r3, [pc, #388]	; (405620 <_usb_d_dev_dma_next+0x190>)
  40549a:	60fb      	str	r3, [r7, #12]
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  40549c:	687b      	ldr	r3, [r7, #4]
  40549e:	7c9b      	ldrb	r3, [r3, #18]
  4054a0:	f003 030f 	and.w	r3, r3, #15
  4054a4:	72fb      	strb	r3, [r7, #11]
	uint32_t trans_next;
	uint32_t dma_ctrl;

	if (!ept->flags.bits.is_busy) {
  4054a6:	687b      	ldr	r3, [r7, #4]
  4054a8:	7cdb      	ldrb	r3, [r3, #19]
  4054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4054ae:	b2db      	uxtb	r3, r3
  4054b0:	2b00      	cmp	r3, #0
  4054b2:	f000 80b0 	beq.w	405616 <_usb_d_dev_dma_next+0x186>
		/* No job is running, then ignore it (system error) */
		return;
	}

	if (ept->trans_count != ept->trans_size) {
  4054b6:	687b      	ldr	r3, [r7, #4]
  4054b8:	689a      	ldr	r2, [r3, #8]
  4054ba:	687b      	ldr	r3, [r7, #4]
  4054bc:	685b      	ldr	r3, [r3, #4]
  4054be:	429a      	cmp	r2, r3
  4054c0:	d073      	beq.n	4055aa <_usb_d_dev_dma_next+0x11a>
		trans_next = ept->trans_size - ept->trans_count;
  4054c2:	687b      	ldr	r3, [r7, #4]
  4054c4:	685a      	ldr	r2, [r3, #4]
  4054c6:	687b      	ldr	r3, [r7, #4]
  4054c8:	689b      	ldr	r3, [r3, #8]
  4054ca:	1ad3      	subs	r3, r2, r3
  4054cc:	617b      	str	r3, [r7, #20]
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  4054ce:	697b      	ldr	r3, [r7, #20]
  4054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4054d4:	d905      	bls.n	4054e2 <_usb_d_dev_dma_next+0x52>
			trans_next = USB_D_DEV_TRANS_MAX;
  4054d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4054da:	617b      	str	r3, [r7, #20]
			/* Set 0 to transfer the maximum */
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  4054dc:	2300      	movs	r3, #0
  4054de:	613b      	str	r3, [r7, #16]
  4054e0:	e002      	b.n	4054e8 <_usb_d_dev_dma_next+0x58>
		} else {
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  4054e2:	697b      	ldr	r3, [r7, #20]
  4054e4:	041b      	lsls	r3, r3, #16
  4054e6:	613b      	str	r3, [r7, #16]
		}
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  4054e8:	687b      	ldr	r3, [r7, #4]
  4054ea:	7cdb      	ldrb	r3, [r3, #19]
  4054ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4054f0:	b2db      	uxtb	r3, r3
  4054f2:	2b00      	cmp	r3, #0
  4054f4:	d00b      	beq.n	40550e <_usb_d_dev_dma_next+0x7e>
  4054f6:	687b      	ldr	r3, [r7, #4]
  4054f8:	7cdb      	ldrb	r3, [r3, #19]
  4054fa:	f003 0310 	and.w	r3, r3, #16
  4054fe:	b2db      	uxtb	r3, r3
  405500:	2b00      	cmp	r3, #0
  405502:	d104      	bne.n	40550e <_usb_d_dev_dma_next+0x7e>
			/* Enable short packet option, else the DMA transfer is accepted
			    and interrupt DMA valid but nothing is sent. */
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  405504:	693b      	ldr	r3, [r7, #16]
  405506:	f043 0308 	orr.w	r3, r3, #8
  40550a:	613b      	str	r3, [r7, #16]
  40550c:	e010      	b.n	405530 <_usb_d_dev_dma_next+0xa0>
		} else {
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  40550e:	687b      	ldr	r3, [r7, #4]
  405510:	7cdb      	ldrb	r3, [r3, #19]
  405512:	f003 0307 	and.w	r3, r3, #7
  405516:	b2db      	uxtb	r3, r3
  405518:	2b02      	cmp	r3, #2
  40551a:	d105      	bne.n	405528 <_usb_d_dev_dma_next+0x98>
  40551c:	687b      	ldr	r3, [r7, #4]
  40551e:	8a1b      	ldrh	r3, [r3, #16]
  405520:	461a      	mov	r2, r3
  405522:	697b      	ldr	r3, [r7, #20]
  405524:	429a      	cmp	r2, r3
  405526:	d303      	bcc.n	405530 <_usb_d_dev_dma_next+0xa0>
				/* Enable short packet reception */
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  405528:	693b      	ldr	r3, [r7, #16]
  40552a:	f043 0314 	orr.w	r3, r3, #20
  40552e:	613b      	str	r3, [r7, #16]
			}
		}

		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  405530:	7afb      	ldrb	r3, [r7, #11]
  405532:	3b01      	subs	r3, #1
  405534:	b2d9      	uxtb	r1, r3
  405536:	687b      	ldr	r3, [r7, #4]
  405538:	681a      	ldr	r2, [r3, #0]
  40553a:	687b      	ldr	r3, [r7, #4]
  40553c:	689b      	ldr	r3, [r3, #8]
  40553e:	4413      	add	r3, r2
  405540:	461a      	mov	r2, r3
  405542:	68f8      	ldr	r0, [r7, #12]
  405544:	4b37      	ldr	r3, [pc, #220]	; (405624 <_usb_d_dev_dma_next+0x194>)
  405546:	4798      	blx	r3
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  405548:	693b      	ldr	r3, [r7, #16]
  40554a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
  40554e:	613b      	str	r3, [r7, #16]

		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  405550:	7afb      	ldrb	r3, [r7, #11]
  405552:	3b01      	subs	r3, #1
  405554:	b2db      	uxtb	r3, r3
  405556:	4619      	mov	r1, r3
  405558:	68f8      	ldr	r0, [r7, #12]
  40555a:	4b33      	ldr	r3, [pc, #204]	; (405628 <_usb_d_dev_dma_next+0x198>)
  40555c:	4798      	blx	r3
  40555e:	4603      	mov	r3, r0
  405560:	f083 0301 	eor.w	r3, r3, #1
  405564:	b2db      	uxtb	r3, r3
  405566:	2b00      	cmp	r3, #0
  405568:	d01b      	beq.n	4055a2 <_usb_d_dev_dma_next+0x112>
			hri_usbhs_write_DEVDMACONTROL_reg(hw, (epn - 1), dma_ctrl);
  40556a:	7afb      	ldrb	r3, [r7, #11]
  40556c:	3b01      	subs	r3, #1
  40556e:	b2db      	uxtb	r3, r3
  405570:	693a      	ldr	r2, [r7, #16]
  405572:	4619      	mov	r1, r3
  405574:	68f8      	ldr	r0, [r7, #12]
  405576:	4b2d      	ldr	r3, [pc, #180]	; (40562c <_usb_d_dev_dma_next+0x19c>)
  405578:	4798      	blx	r3
			ept->trans_count += trans_next;
  40557a:	687b      	ldr	r3, [r7, #4]
  40557c:	689a      	ldr	r2, [r3, #8]
  40557e:	697b      	ldr	r3, [r7, #20]
  405580:	441a      	add	r2, r3
  405582:	687b      	ldr	r3, [r7, #4]
  405584:	609a      	str	r2, [r3, #8]
			ept->trans_load = trans_next;
  405586:	687b      	ldr	r3, [r7, #4]
  405588:	697a      	ldr	r2, [r7, #20]
  40558a:	60da      	str	r2, [r3, #12]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  40558c:	7afb      	ldrb	r3, [r7, #11]
  40558e:	3b01      	subs	r3, #1
  405590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405594:	fa02 f303 	lsl.w	r3, r2, r3
  405598:	4619      	mov	r1, r3
  40559a:	68f8      	ldr	r0, [r7, #12]
  40559c:	4b24      	ldr	r3, [pc, #144]	; (405630 <_usb_d_dev_dma_next+0x1a0>)
  40559e:	4798      	blx	r3
			return;
  4055a0:	e03a      	b.n	405618 <_usb_d_dev_dma_next+0x188>
		}

		/* Here a ZLP has been received and the DMA transfer must be not started.
		   It is the end of transfer. */
		ept->trans_size = ept->trans_count;
  4055a2:	687b      	ldr	r3, [r7, #4]
  4055a4:	689a      	ldr	r2, [r3, #8]
  4055a6:	687b      	ldr	r3, [r7, #4]
  4055a8:	605a      	str	r2, [r3, #4]
	}

	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  4055aa:	687b      	ldr	r3, [r7, #4]
  4055ac:	7cdb      	ldrb	r3, [r3, #19]
  4055ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4055b2:	b2db      	uxtb	r3, r3
  4055b4:	2b00      	cmp	r3, #0
  4055b6:	d029      	beq.n	40560c <_usb_d_dev_dma_next+0x17c>
  4055b8:	687b      	ldr	r3, [r7, #4]
  4055ba:	7cdb      	ldrb	r3, [r3, #19]
  4055bc:	f003 0310 	and.w	r3, r3, #16
  4055c0:	b2db      	uxtb	r3, r3
  4055c2:	2b00      	cmp	r3, #0
  4055c4:	d022      	beq.n	40560c <_usb_d_dev_dma_next+0x17c>
		/* Need to send a ZLP (No possible with USB DMA) enable interrupt to
		   wait a free bank to sent ZLP. */
		_usbd_ep_int_ack(epn, USBHS_DEVEPTICR_TXINIC);
  4055c6:	7afb      	ldrb	r3, [r7, #11]
  4055c8:	2101      	movs	r1, #1
  4055ca:	4618      	mov	r0, r3
  4055cc:	4b19      	ldr	r3, [pc, #100]	; (405634 <_usb_d_dev_dma_next+0x1a4>)
  4055ce:	4798      	blx	r3
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  4055d0:	7afb      	ldrb	r3, [r7, #11]
  4055d2:	4619      	mov	r1, r3
  4055d4:	68f8      	ldr	r0, [r7, #12]
  4055d6:	4b18      	ldr	r3, [pc, #96]	; (405638 <_usb_d_dev_dma_next+0x1a8>)
  4055d8:	4798      	blx	r3
  4055da:	4603      	mov	r3, r0
  4055dc:	2b00      	cmp	r3, #0
  4055de:	d005      	beq.n	4055ec <_usb_d_dev_dma_next+0x15c>
			hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  4055e0:	7afb      	ldrb	r3, [r7, #11]
  4055e2:	2201      	movs	r2, #1
  4055e4:	4619      	mov	r1, r3
  4055e6:	68f8      	ldr	r0, [r7, #12]
  4055e8:	4b14      	ldr	r3, [pc, #80]	; (40563c <_usb_d_dev_dma_next+0x1ac>)
  4055ea:	4798      	blx	r3
		}
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  4055ec:	7afb      	ldrb	r3, [r7, #11]
  4055ee:	2201      	movs	r2, #1
  4055f0:	4619      	mov	r1, r3
  4055f2:	68f8      	ldr	r0, [r7, #12]
  4055f4:	4b12      	ldr	r3, [pc, #72]	; (405640 <_usb_d_dev_dma_next+0x1b0>)
  4055f6:	4798      	blx	r3
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4055f8:	7afb      	ldrb	r3, [r7, #11]
  4055fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4055fe:	fa02 f303 	lsl.w	r3, r2, r3
  405602:	4619      	mov	r1, r3
  405604:	68f8      	ldr	r0, [r7, #12]
  405606:	4b0a      	ldr	r3, [pc, #40]	; (405630 <_usb_d_dev_dma_next+0x1a0>)
  405608:	4798      	blx	r3
		return;
  40560a:	e005      	b.n	405618 <_usb_d_dev_dma_next+0x188>
	}

	/* Complete */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  40560c:	2100      	movs	r1, #0
  40560e:	6878      	ldr	r0, [r7, #4]
  405610:	4b0c      	ldr	r3, [pc, #48]	; (405644 <_usb_d_dev_dma_next+0x1b4>)
  405612:	4798      	blx	r3
  405614:	e000      	b.n	405618 <_usb_d_dev_dma_next+0x188>
		return;
  405616:	bf00      	nop
}
  405618:	3718      	adds	r7, #24
  40561a:	46bd      	mov	sp, r7
  40561c:	bd80      	pop	{r7, pc}
  40561e:	bf00      	nop
  405620:	40038000 	.word	0x40038000
  405624:	00404b6b 	.word	0x00404b6b
  405628:	00404bf3 	.word	0x00404bf3
  40562c:	00404b95 	.word	0x00404b95
  405630:	004047d3 	.word	0x004047d3
  405634:	00404c81 	.word	0x00404c81
  405638:	00404887 	.word	0x00404887
  40563c:	0040494d 	.word	0x0040494d
  405640:	00404973 	.word	0x00404973
  405644:	00405d8d 	.word	0x00405d8d

00405648 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  405648:	b580      	push	{r7, lr}
  40564a:	b084      	sub	sp, #16
  40564c:	af00      	add	r7, sp, #0
  40564e:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  405650:	687b      	ldr	r3, [r7, #4]
  405652:	7c9b      	ldrb	r3, [r3, #18]
  405654:	f003 030f 	and.w	r3, r3, #15
  405658:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  40565a:	687b      	ldr	r3, [r7, #4]
  40565c:	7cdb      	ldrb	r3, [r3, #19]
  40565e:	f003 0307 	and.w	r3, r3, #7
  405662:	b2db      	uxtb	r3, r3
  405664:	2b01      	cmp	r3, #1
  405666:	bf0c      	ite	eq
  405668:	2301      	moveq	r3, #1
  40566a:	2300      	movne	r3, #0
  40566c:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
  40566e:	7bbb      	ldrb	r3, [r7, #14]
  405670:	f083 0301 	eor.w	r3, r3, #1
  405674:	b2db      	uxtb	r3, r3
  405676:	2b00      	cmp	r3, #0
  405678:	d008      	beq.n	40568c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
  40567a:	7bfb      	ldrb	r3, [r7, #15]
  40567c:	4618      	mov	r0, r3
  40567e:	4b1a      	ldr	r3, [pc, #104]	; (4056e8 <_usb_d_dev_handle_setup+0xa0>)
  405680:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
  405682:	7bfb      	ldrb	r3, [r7, #15]
  405684:	4618      	mov	r0, r3
  405686:	4b19      	ldr	r3, [pc, #100]	; (4056ec <_usb_d_dev_handle_setup+0xa4>)
  405688:	4798      	blx	r3
		return;
  40568a:	e02a      	b.n	4056e2 <_usb_d_dev_handle_setup+0x9a>

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  40568c:	687b      	ldr	r3, [r7, #4]
  40568e:	7cdb      	ldrb	r3, [r3, #19]
  405690:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405694:	b2db      	uxtb	r3, r3
  405696:	2b00      	cmp	r3, #0
  405698:	d00e      	beq.n	4056b8 <_usb_d_dev_handle_setup+0x70>
		ept->flags.bits.is_busy = 0;
  40569a:	687a      	ldr	r2, [r7, #4]
  40569c:	7cd3      	ldrb	r3, [r2, #19]
  40569e:	f36f 1386 	bfc	r3, #6, #1
  4056a2:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
  4056a4:	7bfb      	ldrb	r3, [r7, #15]
  4056a6:	2100      	movs	r1, #0
  4056a8:	4618      	mov	r0, r3
  4056aa:	4b11      	ldr	r3, [pc, #68]	; (4056f0 <_usb_d_dev_handle_setup+0xa8>)
  4056ac:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, false);
  4056ae:	7bfb      	ldrb	r3, [r7, #15]
  4056b0:	2100      	movs	r1, #0
  4056b2:	4618      	mov	r0, r3
  4056b4:	4b0f      	ldr	r3, [pc, #60]	; (4056f4 <_usb_d_dev_handle_setup+0xac>)
  4056b6:	4798      	blx	r3
	}

	ept->flags.bits.is_stalled = 0;
  4056b8:	687a      	ldr	r2, [r7, #4]
  4056ba:	7cd3      	ldrb	r3, [r2, #19]
  4056bc:	f36f 03c3 	bfc	r3, #3, #1
  4056c0:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
  4056c2:	7bfb      	ldrb	r3, [r7, #15]
  4056c4:	2118      	movs	r1, #24
  4056c6:	4618      	mov	r0, r3
  4056c8:	4b0b      	ldr	r3, [pc, #44]	; (4056f8 <_usb_d_dev_handle_setup+0xb0>)
  4056ca:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
  4056cc:	7bfb      	ldrb	r3, [r7, #15]
  4056ce:	2118      	movs	r1, #24
  4056d0:	4618      	mov	r0, r3
  4056d2:	4b0a      	ldr	r3, [pc, #40]	; (4056fc <_usb_d_dev_handle_setup+0xb4>)
  4056d4:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  4056d6:	4b0a      	ldr	r3, [pc, #40]	; (405700 <_usb_d_dev_handle_setup+0xb8>)
  4056d8:	689b      	ldr	r3, [r3, #8]
  4056da:	687a      	ldr	r2, [r7, #4]
  4056dc:	7c92      	ldrb	r2, [r2, #18]
  4056de:	4610      	mov	r0, r2
  4056e0:	4798      	blx	r3
}
  4056e2:	3710      	adds	r7, #16
  4056e4:	46bd      	mov	sp, r7
  4056e6:	bd80      	pop	{r7, pc}
  4056e8:	00404e61 	.word	0x00404e61
  4056ec:	00404e11 	.word	0x00404e11
  4056f0:	00404f25 	.word	0x00404f25
  4056f4:	00404f6d 	.word	0x00404f6d
  4056f8:	00404c81 	.word	0x00404c81
  4056fc:	00404ce9 	.word	0x00404ce9
  405700:	20401170 	.word	0x20401170

00405704 <_usb_d_dev_handle_stall>:
/**
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept)
{
  405704:	b580      	push	{r7, lr}
  405706:	b084      	sub	sp, #16
  405708:	af00      	add	r7, sp, #0
  40570a:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40570c:	687b      	ldr	r3, [r7, #4]
  40570e:	7c9b      	ldrb	r3, [r3, #18]
  405710:	f003 030f 	and.w	r3, r3, #15
  405714:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, false);
  405716:	7bfb      	ldrb	r3, [r7, #15]
  405718:	2100      	movs	r1, #0
  40571a:	4618      	mov	r0, r3
  40571c:	4b04      	ldr	r3, [pc, #16]	; (405730 <_usb_d_dev_handle_stall+0x2c>)
  40571e:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  405720:	2101      	movs	r1, #1
  405722:	6878      	ldr	r0, [r7, #4]
  405724:	4b03      	ldr	r3, [pc, #12]	; (405734 <_usb_d_dev_handle_stall+0x30>)
  405726:	4798      	blx	r3
}
  405728:	bf00      	nop
  40572a:	3710      	adds	r7, #16
  40572c:	46bd      	mov	sp, r7
  40572e:	bd80      	pop	{r7, pc}
  405730:	00404dd5 	.word	0x00404dd5
  405734:	00405d8d 	.word	0x00405d8d

00405738 <_usb_d_dev_handle_overflow>:
/**
 * \brief Handles transaction overflow interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_overflow(struct _usb_d_dev_ep *ept)
{
  405738:	b580      	push	{r7, lr}
  40573a:	b084      	sub	sp, #16
  40573c:	af00      	add	r7, sp, #0
  40573e:	6078      	str	r0, [r7, #4]
	Usbhs * hw  = USBHS;
  405740:	4b0f      	ldr	r3, [pc, #60]	; (405780 <_usb_d_dev_handle_overflow+0x48>)
  405742:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  405744:	687b      	ldr	r3, [r7, #4]
  405746:	7c9b      	ldrb	r3, [r3, #18]
  405748:	f003 030f 	and.w	r3, r3, #15
  40574c:	72fb      	strb	r3, [r7, #11]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_OVERFIC);
  40574e:	7afb      	ldrb	r3, [r7, #11]
  405750:	2220      	movs	r2, #32
  405752:	4619      	mov	r1, r3
  405754:	68f8      	ldr	r0, [r7, #12]
  405756:	4b0b      	ldr	r3, [pc, #44]	; (405784 <_usb_d_dev_handle_overflow+0x4c>)
  405758:	4798      	blx	r3
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  40575a:	687b      	ldr	r3, [r7, #4]
  40575c:	7cdb      	ldrb	r3, [r3, #19]
  40575e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  405762:	b2db      	uxtb	r3, r3
  405764:	2b00      	cmp	r3, #0
  405766:	bf14      	ite	ne
  405768:	2301      	movne	r3, #1
  40576a:	2300      	moveq	r3, #0
  40576c:	b2db      	uxtb	r3, r3
  40576e:	2204      	movs	r2, #4
  405770:	4619      	mov	r1, r3
  405772:	6878      	ldr	r0, [r7, #4]
  405774:	4b04      	ldr	r3, [pc, #16]	; (405788 <_usb_d_dev_handle_overflow+0x50>)
  405776:	4798      	blx	r3
}
  405778:	bf00      	nop
  40577a:	3710      	adds	r7, #16
  40577c:	46bd      	mov	sp, r7
  40577e:	bd80      	pop	{r7, pc}
  405780:	40038000 	.word	0x40038000
  405784:	0040490b 	.word	0x0040490b
  405788:	00405dd5 	.word	0x00405dd5

0040578c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  40578c:	b580      	push	{r7, lr}
  40578e:	b082      	sub	sp, #8
  405790:	af00      	add	r7, sp, #0
  405792:	6078      	str	r0, [r7, #4]
  405794:	460b      	mov	r3, r1
  405796:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  405798:	78fb      	ldrb	r3, [r7, #3]
  40579a:	f003 0304 	and.w	r3, r3, #4
  40579e:	2b00      	cmp	r3, #0
  4057a0:	d003      	beq.n	4057aa <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
  4057a2:	6878      	ldr	r0, [r7, #4]
  4057a4:	4b07      	ldr	r3, [pc, #28]	; (4057c4 <_usb_d_dev_trans_setup_isr+0x38>)
  4057a6:	4798      	blx	r3
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
		_usb_d_dev_handle_stall(ept);
	}
}
  4057a8:	e007      	b.n	4057ba <_usb_d_dev_trans_setup_isr+0x2e>
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
  4057aa:	78fb      	ldrb	r3, [r7, #3]
  4057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4057b0:	2b00      	cmp	r3, #0
  4057b2:	d002      	beq.n	4057ba <_usb_d_dev_trans_setup_isr+0x2e>
		_usb_d_dev_handle_stall(ept);
  4057b4:	6878      	ldr	r0, [r7, #4]
  4057b6:	4b04      	ldr	r3, [pc, #16]	; (4057c8 <_usb_d_dev_trans_setup_isr+0x3c>)
  4057b8:	4798      	blx	r3
}
  4057ba:	bf00      	nop
  4057bc:	3708      	adds	r7, #8
  4057be:	46bd      	mov	sp, r7
  4057c0:	bd80      	pop	{r7, pc}
  4057c2:	bf00      	nop
  4057c4:	00405649 	.word	0x00405649
  4057c8:	00405705 	.word	0x00405705

004057cc <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  4057cc:	b580      	push	{r7, lr}
  4057ce:	b082      	sub	sp, #8
  4057d0:	af00      	add	r7, sp, #0
  4057d2:	6078      	str	r0, [r7, #4]
  4057d4:	460b      	mov	r3, r1
  4057d6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_TXINI) {
  4057d8:	78fb      	ldrb	r3, [r7, #3]
  4057da:	f003 0301 	and.w	r3, r3, #1
  4057de:	2b00      	cmp	r3, #0
  4057e0:	d003      	beq.n	4057ea <_usb_d_dev_trans_in_isr+0x1e>
		_usb_d_dev_in_next(ept);
  4057e2:	6878      	ldr	r0, [r7, #4]
  4057e4:	4b0a      	ldr	r3, [pc, #40]	; (405810 <_usb_d_dev_trans_in_isr+0x44>)
  4057e6:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  4057e8:	e00e      	b.n	405808 <_usb_d_dev_trans_in_isr+0x3c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  4057ea:	687b      	ldr	r3, [r7, #4]
  4057ec:	7cdb      	ldrb	r3, [r3, #19]
  4057ee:	f003 0307 	and.w	r3, r3, #7
  4057f2:	b2db      	uxtb	r3, r3
  4057f4:	2b01      	cmp	r3, #1
  4057f6:	d107      	bne.n	405808 <_usb_d_dev_trans_in_isr+0x3c>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4057f8:	78fb      	ldrb	r3, [r7, #3]
  4057fa:	f003 0304 	and.w	r3, r3, #4
  4057fe:	2b00      	cmp	r3, #0
  405800:	d002      	beq.n	405808 <_usb_d_dev_trans_in_isr+0x3c>
			_usb_d_dev_handle_setup(ept);
  405802:	6878      	ldr	r0, [r7, #4]
  405804:	4b03      	ldr	r3, [pc, #12]	; (405814 <_usb_d_dev_trans_in_isr+0x48>)
  405806:	4798      	blx	r3
}
  405808:	bf00      	nop
  40580a:	3708      	adds	r7, #8
  40580c:	46bd      	mov	sp, r7
  40580e:	bd80      	pop	{r7, pc}
  405810:	00405185 	.word	0x00405185
  405814:	00405649 	.word	0x00405649

00405818 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  405818:	b580      	push	{r7, lr}
  40581a:	b082      	sub	sp, #8
  40581c:	af00      	add	r7, sp, #0
  40581e:	6078      	str	r0, [r7, #4]
  405820:	460b      	mov	r3, r1
  405822:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  405824:	78fb      	ldrb	r3, [r7, #3]
  405826:	f003 0320 	and.w	r3, r3, #32
  40582a:	2b00      	cmp	r3, #0
  40582c:	d003      	beq.n	405836 <_usb_d_dev_trans_out_isr+0x1e>
		_usb_d_dev_handle_overflow(ept);
  40582e:	6878      	ldr	r0, [r7, #4]
  405830:	4b0f      	ldr	r3, [pc, #60]	; (405870 <_usb_d_dev_trans_out_isr+0x58>)
  405832:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  405834:	e017      	b.n	405866 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  405836:	78fb      	ldrb	r3, [r7, #3]
  405838:	f003 0302 	and.w	r3, r3, #2
  40583c:	2b00      	cmp	r3, #0
  40583e:	d003      	beq.n	405848 <_usb_d_dev_trans_out_isr+0x30>
		_usb_d_dev_out_next(ept);
  405840:	6878      	ldr	r0, [r7, #4]
  405842:	4b0c      	ldr	r3, [pc, #48]	; (405874 <_usb_d_dev_trans_out_isr+0x5c>)
  405844:	4798      	blx	r3
}
  405846:	e00e      	b.n	405866 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  405848:	687b      	ldr	r3, [r7, #4]
  40584a:	7cdb      	ldrb	r3, [r3, #19]
  40584c:	f003 0307 	and.w	r3, r3, #7
  405850:	b2db      	uxtb	r3, r3
  405852:	2b01      	cmp	r3, #1
  405854:	d107      	bne.n	405866 <_usb_d_dev_trans_out_isr+0x4e>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  405856:	78fb      	ldrb	r3, [r7, #3]
  405858:	f003 0304 	and.w	r3, r3, #4
  40585c:	2b00      	cmp	r3, #0
  40585e:	d002      	beq.n	405866 <_usb_d_dev_trans_out_isr+0x4e>
			_usb_d_dev_handle_setup(ept);
  405860:	6878      	ldr	r0, [r7, #4]
  405862:	4b05      	ldr	r3, [pc, #20]	; (405878 <_usb_d_dev_trans_out_isr+0x60>)
  405864:	4798      	blx	r3
}
  405866:	bf00      	nop
  405868:	3708      	adds	r7, #8
  40586a:	46bd      	mov	sp, r7
  40586c:	bd80      	pop	{r7, pc}
  40586e:	bf00      	nop
  405870:	00405739 	.word	0x00405739
  405874:	00405349 	.word	0x00405349
  405878:	00405649 	.word	0x00405649

0040587c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  40587c:	b580      	push	{r7, lr}
  40587e:	b084      	sub	sp, #16
  405880:	af00      	add	r7, sp, #0
  405882:	6078      	str	r0, [r7, #4]
  405884:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  405886:	4b28      	ldr	r3, [pc, #160]	; (405928 <_usb_d_dev_handle_eps+0xac>)
  405888:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40588a:	683b      	ldr	r3, [r7, #0]
  40588c:	7c9b      	ldrb	r3, [r3, #18]
  40588e:	f003 030f 	and.w	r3, r3, #15
  405892:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
  405894:	7afb      	ldrb	r3, [r7, #11]
  405896:	2201      	movs	r2, #1
  405898:	409a      	lsls	r2, r3
  40589a:	687b      	ldr	r3, [r7, #4]
  40589c:	4013      	ands	r3, r2
  40589e:	2b00      	cmp	r3, #0
  4058a0:	d03d      	beq.n	40591e <_usb_d_dev_handle_eps+0xa2>
		return;
	}

	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  4058a2:	7afb      	ldrb	r3, [r7, #11]
  4058a4:	4619      	mov	r1, r3
  4058a6:	68f8      	ldr	r0, [r7, #12]
  4058a8:	4b20      	ldr	r3, [pc, #128]	; (40592c <_usb_d_dev_handle_eps+0xb0>)
  4058aa:	4798      	blx	r3
  4058ac:	4603      	mov	r3, r0
  4058ae:	72bb      	strb	r3, [r7, #10]
	mask  = hri_usbhs_read_DEVEPTIMR_reg(hw, epn);
  4058b0:	7afb      	ldrb	r3, [r7, #11]
  4058b2:	4619      	mov	r1, r3
  4058b4:	68f8      	ldr	r0, [r7, #12]
  4058b6:	4b1e      	ldr	r3, [pc, #120]	; (405930 <_usb_d_dev_handle_eps+0xb4>)
  4058b8:	4798      	blx	r3
  4058ba:	4603      	mov	r3, r0
  4058bc:	727b      	strb	r3, [r7, #9]
	flags &= mask;
  4058be:	7aba      	ldrb	r2, [r7, #10]
  4058c0:	7a7b      	ldrb	r3, [r7, #9]
  4058c2:	4013      	ands	r3, r2
  4058c4:	72bb      	strb	r3, [r7, #10]

	if (flags) {
  4058c6:	7abb      	ldrb	r3, [r7, #10]
  4058c8:	2b00      	cmp	r3, #0
  4058ca:	d029      	beq.n	405920 <_usb_d_dev_handle_eps+0xa4>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  4058cc:	7abb      	ldrb	r3, [r7, #10]
  4058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4058d2:	2b00      	cmp	r3, #0
  4058d4:	d003      	beq.n	4058de <_usb_d_dev_handle_eps+0x62>
			_usb_d_dev_handle_stall(ept);
  4058d6:	6838      	ldr	r0, [r7, #0]
  4058d8:	4b16      	ldr	r3, [pc, #88]	; (405934 <_usb_d_dev_handle_eps+0xb8>)
  4058da:	4798      	blx	r3
  4058dc:	e020      	b.n	405920 <_usb_d_dev_handle_eps+0xa4>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  4058de:	683b      	ldr	r3, [r7, #0]
  4058e0:	7cdb      	ldrb	r3, [r3, #19]
  4058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4058e6:	b2db      	uxtb	r3, r3
  4058e8:	2b00      	cmp	r3, #0
  4058ea:	d105      	bne.n	4058f8 <_usb_d_dev_handle_eps+0x7c>
			_usb_d_dev_trans_setup_isr(ept, flags);
  4058ec:	7abb      	ldrb	r3, [r7, #10]
  4058ee:	4619      	mov	r1, r3
  4058f0:	6838      	ldr	r0, [r7, #0]
  4058f2:	4b11      	ldr	r3, [pc, #68]	; (405938 <_usb_d_dev_handle_eps+0xbc>)
  4058f4:	4798      	blx	r3
  4058f6:	e013      	b.n	405920 <_usb_d_dev_handle_eps+0xa4>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  4058f8:	683b      	ldr	r3, [r7, #0]
  4058fa:	7cdb      	ldrb	r3, [r3, #19]
  4058fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405900:	b2db      	uxtb	r3, r3
  405902:	2b00      	cmp	r3, #0
  405904:	d005      	beq.n	405912 <_usb_d_dev_handle_eps+0x96>
			_usb_d_dev_trans_in_isr(ept, flags);
  405906:	7abb      	ldrb	r3, [r7, #10]
  405908:	4619      	mov	r1, r3
  40590a:	6838      	ldr	r0, [r7, #0]
  40590c:	4b0b      	ldr	r3, [pc, #44]	; (40593c <_usb_d_dev_handle_eps+0xc0>)
  40590e:	4798      	blx	r3
  405910:	e006      	b.n	405920 <_usb_d_dev_handle_eps+0xa4>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
  405912:	7abb      	ldrb	r3, [r7, #10]
  405914:	4619      	mov	r1, r3
  405916:	6838      	ldr	r0, [r7, #0]
  405918:	4b09      	ldr	r3, [pc, #36]	; (405940 <_usb_d_dev_handle_eps+0xc4>)
  40591a:	4798      	blx	r3
  40591c:	e000      	b.n	405920 <_usb_d_dev_handle_eps+0xa4>
		return;
  40591e:	bf00      	nop
		}
	}
}
  405920:	3710      	adds	r7, #16
  405922:	46bd      	mov	sp, r7
  405924:	bd80      	pop	{r7, pc}
  405926:	bf00      	nop
  405928:	40038000 	.word	0x40038000
  40592c:	004048e9 	.word	0x004048e9
  405930:	00404b49 	.word	0x00404b49
  405934:	00405705 	.word	0x00405705
  405938:	0040578d 	.word	0x0040578d
  40593c:	004057cd 	.word	0x004057cd
  405940:	00405819 	.word	0x00405819

00405944 <_usb_d_dev_handle_dma>:
 * \brief Handles the endpoint DMA interrupts.
 * \param[in] epint Endpoint DMA interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_dma(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  405944:	b580      	push	{r7, lr}
  405946:	b086      	sub	sp, #24
  405948:	af00      	add	r7, sp, #0
  40594a:	6078      	str	r0, [r7, #4]
  40594c:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  40594e:	4b21      	ldr	r3, [pc, #132]	; (4059d4 <_usb_d_dev_handle_dma+0x90>)
  405950:	617b      	str	r3, [r7, #20]

	uint8_t  epn = USB_EP_GET_N(ept->ep);
  405952:	683b      	ldr	r3, [r7, #0]
  405954:	7c9b      	ldrb	r3, [r3, #18]
  405956:	f003 030f 	and.w	r3, r3, #15
  40595a:	74fb      	strb	r3, [r7, #19]
	uint32_t trans_next;

	if (!(epint & (1u << (epn - 1)))) {
  40595c:	7cfb      	ldrb	r3, [r7, #19]
  40595e:	3b01      	subs	r3, #1
  405960:	2201      	movs	r2, #1
  405962:	409a      	lsls	r2, r3
  405964:	687b      	ldr	r3, [r7, #4]
  405966:	4013      	ands	r3, r2
  405968:	2b00      	cmp	r3, #0
  40596a:	d02c      	beq.n	4059c6 <_usb_d_dev_handle_dma+0x82>
		return;
	}

	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  40596c:	7cfb      	ldrb	r3, [r7, #19]
  40596e:	3b01      	subs	r3, #1
  405970:	b2db      	uxtb	r3, r3
  405972:	4619      	mov	r1, r3
  405974:	6978      	ldr	r0, [r7, #20]
  405976:	4b18      	ldr	r3, [pc, #96]	; (4059d8 <_usb_d_dev_handle_dma+0x94>)
  405978:	4798      	blx	r3
  40597a:	4603      	mov	r3, r0
  40597c:	2b00      	cmp	r3, #0
  40597e:	d124      	bne.n	4059ca <_usb_d_dev_handle_dma+0x86>
		/* Ignore EOT_STA interrupt */
		return;
	}
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  405980:	7cfb      	ldrb	r3, [r7, #19]
  405982:	3b01      	subs	r3, #1
  405984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  405988:	fa02 f303 	lsl.w	r3, r2, r3
  40598c:	4619      	mov	r1, r3
  40598e:	6978      	ldr	r0, [r7, #20]
  405990:	4b12      	ldr	r3, [pc, #72]	; (4059dc <_usb_d_dev_handle_dma+0x98>)
  405992:	4798      	blx	r3
	trans_next = hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(hw, (epn - 1));
  405994:	7cfb      	ldrb	r3, [r7, #19]
  405996:	3b01      	subs	r3, #1
  405998:	b2db      	uxtb	r3, r3
  40599a:	4619      	mov	r1, r3
  40599c:	6978      	ldr	r0, [r7, #20]
  40599e:	4b10      	ldr	r3, [pc, #64]	; (4059e0 <_usb_d_dev_handle_dma+0x9c>)
  4059a0:	4798      	blx	r3
  4059a2:	60f8      	str	r0, [r7, #12]
	if (trans_next) {
  4059a4:	68fb      	ldr	r3, [r7, #12]
  4059a6:	2b00      	cmp	r3, #0
  4059a8:	d009      	beq.n	4059be <_usb_d_dev_handle_dma+0x7a>
		/* Transfer no complete (short packet or ZLP) then: Update number of
		   data transfered */
		ept->trans_count -= trans_next;
  4059aa:	683b      	ldr	r3, [r7, #0]
  4059ac:	689a      	ldr	r2, [r3, #8]
  4059ae:	68fb      	ldr	r3, [r7, #12]
  4059b0:	1ad2      	subs	r2, r2, r3
  4059b2:	683b      	ldr	r3, [r7, #0]
  4059b4:	609a      	str	r2, [r3, #8]
		/* Set transfer complete to stop the transfer */
		ept->trans_size = ept->trans_count;
  4059b6:	683b      	ldr	r3, [r7, #0]
  4059b8:	689a      	ldr	r2, [r3, #8]
  4059ba:	683b      	ldr	r3, [r7, #0]
  4059bc:	605a      	str	r2, [r3, #4]
	}
	_usb_d_dev_dma_next(ept);
  4059be:	6838      	ldr	r0, [r7, #0]
  4059c0:	4b08      	ldr	r3, [pc, #32]	; (4059e4 <_usb_d_dev_handle_dma+0xa0>)
  4059c2:	4798      	blx	r3
  4059c4:	e002      	b.n	4059cc <_usb_d_dev_handle_dma+0x88>
		return;
  4059c6:	bf00      	nop
  4059c8:	e000      	b.n	4059cc <_usb_d_dev_handle_dma+0x88>
		return;
  4059ca:	bf00      	nop
}
  4059cc:	3718      	adds	r7, #24
  4059ce:	46bd      	mov	sp, r7
  4059d0:	bd80      	pop	{r7, pc}
  4059d2:	bf00      	nop
  4059d4:	40038000 	.word	0x40038000
  4059d8:	00404bbf 	.word	0x00404bbf
  4059dc:	00404807 	.word	0x00404807
  4059e0:	00404c29 	.word	0x00404c29
  4059e4:	00405491 	.word	0x00405491

004059e8 <USBHS_Handler>:

/**
 * \brief USB device interrupt handler
 */
void USBHS_Handler(void)
{
  4059e8:	b590      	push	{r4, r7, lr}
  4059ea:	b087      	sub	sp, #28
  4059ec:	af00      	add	r7, sp, #0
	Usbhs *  hw = USBHS;
  4059ee:	4b29      	ldr	r3, [pc, #164]	; (405a94 <USBHS_Handler+0xac>)
  4059f0:	613b      	str	r3, [r7, #16]
	uint8_t  i;
	uint32_t flags, ep_int, dma_int;

	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  4059f2:	6938      	ldr	r0, [r7, #16]
  4059f4:	4b28      	ldr	r3, [pc, #160]	; (405a98 <USBHS_Handler+0xb0>)
  4059f6:	4798      	blx	r3
  4059f8:	4604      	mov	r4, r0
  4059fa:	6938      	ldr	r0, [r7, #16]
  4059fc:	4b27      	ldr	r3, [pc, #156]	; (405a9c <USBHS_Handler+0xb4>)
  4059fe:	4798      	blx	r3
  405a00:	4603      	mov	r3, r0
  405a02:	4023      	ands	r3, r4
  405a04:	60fb      	str	r3, [r7, #12]

	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  405a06:	68fb      	ldr	r3, [r7, #12]
  405a08:	0b1b      	lsrs	r3, r3, #12
  405a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  405a0e:	60bb      	str	r3, [r7, #8]
#if (CONF_USB_D_DMA_ENABLE == 1)
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  405a10:	68fb      	ldr	r3, [r7, #12]
  405a12:	0e5b      	lsrs	r3, r3, #25
  405a14:	607b      	str	r3, [r7, #4]
#endif

#if (CONF_USB_D_DMA_ENABLE == 1)
	if ((ep_int == 0) && (dma_int == 0)) {
  405a16:	68bb      	ldr	r3, [r7, #8]
  405a18:	2b00      	cmp	r3, #0
  405a1a:	d107      	bne.n	405a2c <USBHS_Handler+0x44>
  405a1c:	687b      	ldr	r3, [r7, #4]
  405a1e:	2b00      	cmp	r3, #0
  405a20:	d104      	bne.n	405a2c <USBHS_Handler+0x44>
#else
	if (ep_int == 0) {
#endif
		if (_usb_d_dev_handle_nep()) {
  405a22:	4b1f      	ldr	r3, [pc, #124]	; (405aa0 <USBHS_Handler+0xb8>)
  405a24:	4798      	blx	r3
  405a26:	4603      	mov	r3, r0
  405a28:	2b00      	cmp	r3, #0
  405a2a:	d12e      	bne.n	405a8a <USBHS_Handler+0xa2>
			return;
		}
	}

	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
  405a2c:	2300      	movs	r3, #0
  405a2e:	75fb      	strb	r3, [r7, #23]
  405a30:	e027      	b.n	405a82 <USBHS_Handler+0x9a>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  405a32:	7dfa      	ldrb	r2, [r7, #23]
  405a34:	4613      	mov	r3, r2
  405a36:	009b      	lsls	r3, r3, #2
  405a38:	4413      	add	r3, r2
  405a3a:	009b      	lsls	r3, r3, #2
  405a3c:	3310      	adds	r3, #16
  405a3e:	4a19      	ldr	r2, [pc, #100]	; (405aa4 <USBHS_Handler+0xbc>)
  405a40:	4413      	add	r3, r2
  405a42:	3304      	adds	r3, #4
  405a44:	603b      	str	r3, [r7, #0]

		if (ept->ep == 0xFF) {
  405a46:	683b      	ldr	r3, [r7, #0]
  405a48:	7c9b      	ldrb	r3, [r3, #18]
  405a4a:	2bff      	cmp	r3, #255	; 0xff
  405a4c:	d015      	beq.n	405a7a <USBHS_Handler+0x92>
			continue;
		}
		if (ep_int) {
  405a4e:	68bb      	ldr	r3, [r7, #8]
  405a50:	2b00      	cmp	r3, #0
  405a52:	d004      	beq.n	405a5e <USBHS_Handler+0x76>
			_usb_d_dev_handle_eps(ep_int, ept);
  405a54:	6839      	ldr	r1, [r7, #0]
  405a56:	68b8      	ldr	r0, [r7, #8]
  405a58:	4b13      	ldr	r3, [pc, #76]	; (405aa8 <USBHS_Handler+0xc0>)
  405a5a:	4798      	blx	r3
  405a5c:	e00e      	b.n	405a7c <USBHS_Handler+0x94>
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  405a5e:	687b      	ldr	r3, [r7, #4]
  405a60:	2b00      	cmp	r3, #0
  405a62:	d00b      	beq.n	405a7c <USBHS_Handler+0x94>
  405a64:	7dfb      	ldrb	r3, [r7, #23]
  405a66:	2b00      	cmp	r3, #0
  405a68:	d008      	beq.n	405a7c <USBHS_Handler+0x94>
  405a6a:	7dfb      	ldrb	r3, [r7, #23]
  405a6c:	2b06      	cmp	r3, #6
  405a6e:	d805      	bhi.n	405a7c <USBHS_Handler+0x94>
			_usb_d_dev_handle_dma(dma_int, ept);
  405a70:	6839      	ldr	r1, [r7, #0]
  405a72:	6878      	ldr	r0, [r7, #4]
  405a74:	4b0d      	ldr	r3, [pc, #52]	; (405aac <USBHS_Handler+0xc4>)
  405a76:	4798      	blx	r3
  405a78:	e000      	b.n	405a7c <USBHS_Handler+0x94>
			continue;
  405a7a:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
  405a7c:	7dfb      	ldrb	r3, [r7, #23]
  405a7e:	3301      	adds	r3, #1
  405a80:	75fb      	strb	r3, [r7, #23]
  405a82:	7dfb      	ldrb	r3, [r7, #23]
  405a84:	2b03      	cmp	r3, #3
  405a86:	d9d4      	bls.n	405a32 <USBHS_Handler+0x4a>
  405a88:	e000      	b.n	405a8c <USBHS_Handler+0xa4>
			return;
  405a8a:	bf00      	nop
		}
#endif
	}
}
  405a8c:	371c      	adds	r7, #28
  405a8e:	46bd      	mov	sp, r7
  405a90:	bd90      	pop	{r4, r7, pc}
  405a92:	bf00      	nop
  405a94:	40038000 	.word	0x40038000
  405a98:	00404b31 	.word	0x00404b31
  405a9c:	004047ef 	.word	0x004047ef
  405aa0:	004050dd 	.word	0x004050dd
  405aa4:	20401170 	.word	0x20401170
  405aa8:	0040587d 	.word	0x0040587d
  405aac:	00405945 	.word	0x00405945

00405ab0 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
  405ab0:	b580      	push	{r7, lr}
  405ab2:	b082      	sub	sp, #8
  405ab4:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Reset USB address to 0 */
	hri_usbhs_clear_DEVCTRL_ADDEN_bit(USBHS);
  405ab6:	481c      	ldr	r0, [pc, #112]	; (405b28 <_usb_d_dev_reset_epts+0x78>)
  405ab8:	4b1c      	ldr	r3, [pc, #112]	; (405b2c <_usb_d_dev_reset_epts+0x7c>)
  405aba:	4798      	blx	r3
	hri_usbhs_write_DEVCTRL_UADD_bf(USBHS, 0);
  405abc:	2100      	movs	r1, #0
  405abe:	481a      	ldr	r0, [pc, #104]	; (405b28 <_usb_d_dev_reset_epts+0x78>)
  405ac0:	4b1b      	ldr	r3, [pc, #108]	; (405b30 <_usb_d_dev_reset_epts+0x80>)
  405ac2:	4798      	blx	r3
	hri_usbhs_set_DEVCTRL_ADDEN_bit(USBHS);
  405ac4:	4818      	ldr	r0, [pc, #96]	; (405b28 <_usb_d_dev_reset_epts+0x78>)
  405ac6:	4b1b      	ldr	r3, [pc, #108]	; (405b34 <_usb_d_dev_reset_epts+0x84>)
  405ac8:	4798      	blx	r3

	for (i = 0; i < USB_D_N_EP; i++) {
  405aca:	2300      	movs	r3, #0
  405acc:	71fb      	strb	r3, [r7, #7]
  405ace:	e023      	b.n	405b18 <_usb_d_dev_reset_epts+0x68>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  405ad0:	79fa      	ldrb	r2, [r7, #7]
  405ad2:	4613      	mov	r3, r2
  405ad4:	009b      	lsls	r3, r3, #2
  405ad6:	4413      	add	r3, r2
  405ad8:	009b      	lsls	r3, r3, #2
  405ada:	3310      	adds	r3, #16
  405adc:	4a16      	ldr	r2, [pc, #88]	; (405b38 <_usb_d_dev_reset_epts+0x88>)
  405ade:	4413      	add	r3, r2
  405ae0:	3304      	adds	r3, #4
  405ae2:	2103      	movs	r1, #3
  405ae4:	4618      	mov	r0, r3
  405ae6:	4b15      	ldr	r3, [pc, #84]	; (405b3c <_usb_d_dev_reset_epts+0x8c>)
  405ae8:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
  405aea:	79fa      	ldrb	r2, [r7, #7]
  405aec:	4912      	ldr	r1, [pc, #72]	; (405b38 <_usb_d_dev_reset_epts+0x88>)
  405aee:	4613      	mov	r3, r2
  405af0:	009b      	lsls	r3, r3, #2
  405af2:	4413      	add	r3, r2
  405af4:	009b      	lsls	r3, r3, #2
  405af6:	440b      	add	r3, r1
  405af8:	3326      	adds	r3, #38	; 0x26
  405afa:	22ff      	movs	r2, #255	; 0xff
  405afc:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
  405afe:	79fa      	ldrb	r2, [r7, #7]
  405b00:	490d      	ldr	r1, [pc, #52]	; (405b38 <_usb_d_dev_reset_epts+0x88>)
  405b02:	4613      	mov	r3, r2
  405b04:	009b      	lsls	r3, r3, #2
  405b06:	4413      	add	r3, r2
  405b08:	009b      	lsls	r3, r3, #2
  405b0a:	440b      	add	r3, r1
  405b0c:	3327      	adds	r3, #39	; 0x27
  405b0e:	2200      	movs	r2, #0
  405b10:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
  405b12:	79fb      	ldrb	r3, [r7, #7]
  405b14:	3301      	adds	r3, #1
  405b16:	71fb      	strb	r3, [r7, #7]
  405b18:	79fb      	ldrb	r3, [r7, #7]
  405b1a:	2b03      	cmp	r3, #3
  405b1c:	d9d8      	bls.n	405ad0 <_usb_d_dev_reset_epts+0x20>
	}
}
  405b1e:	bf00      	nop
  405b20:	3708      	adds	r7, #8
  405b22:	46bd      	mov	sp, r7
  405b24:	bd80      	pop	{r7, pc}
  405b26:	bf00      	nop
  405b28:	40038000 	.word	0x40038000
  405b2c:	004049df 	.word	0x004049df
  405b30:	004049ff 	.word	0x004049ff
  405b34:	004049bf 	.word	0x004049bf
  405b38:	20401170 	.word	0x20401170
  405b3c:	00405d8d 	.word	0x00405d8d

00405b40 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
  405b40:	b590      	push	{r4, r7, lr}
  405b42:	b089      	sub	sp, #36	; 0x24
  405b44:	af00      	add	r7, sp, #0
	Usbhs *        hw = USBHS;
  405b46:	4b1d      	ldr	r3, [pc, #116]	; (405bbc <_usb_d_dev_init+0x7c>)
  405b48:	61fb      	str	r3, [r7, #28]
	uint32_t       data;
	uint8_t        speed      = CONF_USB_D_SPEED;
  405b4a:	2302      	movs	r3, #2
  405b4c:	76fb      	strb	r3, [r7, #27]
	const uint32_t spdconf[4] = {
  405b4e:	4b1c      	ldr	r3, [pc, #112]	; (405bc0 <_usb_d_dev_init+0x80>)
  405b50:	1d3c      	adds	r4, r7, #4
  405b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  405b54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0,                                             /* HS */
		0                                              /* Reserved */
	};
#endif

	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  405b58:	69f8      	ldr	r0, [r7, #28]
  405b5a:	4b1a      	ldr	r3, [pc, #104]	; (405bc4 <_usb_d_dev_init+0x84>)
  405b5c:	4798      	blx	r3
  405b5e:	4603      	mov	r3, r0
  405b60:	2b00      	cmp	r3, #0
  405b62:	d002      	beq.n	405b6a <_usb_d_dev_init+0x2a>
		return ERR_DENIED;
  405b64:	f06f 0310 	mvn.w	r3, #16
  405b68:	e024      	b.n	405bb4 <_usb_d_dev_init+0x74>
	}

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  405b6a:	4b17      	ldr	r3, [pc, #92]	; (405bc8 <_usb_d_dev_init+0x88>)
  405b6c:	4a17      	ldr	r2, [pc, #92]	; (405bcc <_usb_d_dev_init+0x8c>)
  405b6e:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  405b70:	4b15      	ldr	r3, [pc, #84]	; (405bc8 <_usb_d_dev_init+0x88>)
  405b72:	4a16      	ldr	r2, [pc, #88]	; (405bcc <_usb_d_dev_init+0x8c>)
  405b74:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  405b76:	4b14      	ldr	r3, [pc, #80]	; (405bc8 <_usb_d_dev_init+0x88>)
  405b78:	4a14      	ldr	r2, [pc, #80]	; (405bcc <_usb_d_dev_init+0x8c>)
  405b7a:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  405b7c:	4b12      	ldr	r3, [pc, #72]	; (405bc8 <_usb_d_dev_init+0x88>)
  405b7e:	4a14      	ldr	r2, [pc, #80]	; (405bd0 <_usb_d_dev_init+0x90>)
  405b80:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  405b82:	4b11      	ldr	r3, [pc, #68]	; (405bc8 <_usb_d_dev_init+0x88>)
  405b84:	4a11      	ldr	r2, [pc, #68]	; (405bcc <_usb_d_dev_init+0x8c>)
  405b86:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
  405b88:	4b12      	ldr	r3, [pc, #72]	; (405bd4 <_usb_d_dev_init+0x94>)
  405b8a:	4798      	blx	r3
	hri_usbhs_write_CTRL_reg(hw, USBHS_CTRL_UIMOD);
  405b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  405b90:	69f8      	ldr	r0, [r7, #28]
  405b92:	4b11      	ldr	r3, [pc, #68]	; (405bd8 <_usb_d_dev_init+0x98>)
  405b94:	4798      	blx	r3

	data = spdconf[speed] | USBHS_DEVCTRL_DETACH;
  405b96:	7efb      	ldrb	r3, [r7, #27]
  405b98:	009b      	lsls	r3, r3, #2
  405b9a:	f107 0220 	add.w	r2, r7, #32
  405b9e:	4413      	add	r3, r2
  405ba0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  405ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  405ba8:	617b      	str	r3, [r7, #20]
	hri_usbhs_write_DEVCTRL_reg(hw, data);
  405baa:	6979      	ldr	r1, [r7, #20]
  405bac:	69f8      	ldr	r0, [r7, #28]
  405bae:	4b0b      	ldr	r3, [pc, #44]	; (405bdc <_usb_d_dev_init+0x9c>)
  405bb0:	4798      	blx	r3

	return ERR_NONE;
  405bb2:	2300      	movs	r3, #0
}
  405bb4:	4618      	mov	r0, r3
  405bb6:	3724      	adds	r7, #36	; 0x24
  405bb8:	46bd      	mov	sp, r7
  405bba:	bd90      	pop	{r4, r7, pc}
  405bbc:	40038000 	.word	0x40038000
  405bc0:	00406bf8 	.word	0x00406bf8
  405bc4:	00404ae1 	.word	0x00404ae1
  405bc8:	20401170 	.word	0x20401170
  405bcc:	00404c53 	.word	0x00404c53
  405bd0:	00404c69 	.word	0x00404c69
  405bd4:	00405ab1 	.word	0x00405ab1
  405bd8:	00404b13 	.word	0x00404b13
  405bdc:	00404a35 	.word	0x00404a35

00405be0 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept)
{
  405be0:	b480      	push	{r7}
  405be2:	b083      	sub	sp, #12
  405be4:	af00      	add	r7, sp, #0
  405be6:	6078      	str	r0, [r7, #4]
	return ept->flags.bits.is_stalled;
  405be8:	687b      	ldr	r3, [r7, #4]
  405bea:	7cdb      	ldrb	r3, [r3, #19]
  405bec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  405bf0:	b2db      	uxtb	r3, r3
}
  405bf2:	4618      	mov	r0, r3
  405bf4:	370c      	adds	r7, #12
  405bf6:	46bd      	mov	sp, r7
  405bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bfc:	4770      	bx	lr
	...

00405c00 <_usb_d_dev_ep_stall_set>:
 * \brief Set endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept)
{
  405c00:	b580      	push	{r7, lr}
  405c02:	b084      	sub	sp, #16
  405c04:	af00      	add	r7, sp, #0
  405c06:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  405c08:	687b      	ldr	r3, [r7, #4]
  405c0a:	7c9b      	ldrb	r3, [r3, #18]
  405c0c:	f003 030f 	and.w	r3, r3, #15
  405c10:	73fb      	strb	r3, [r7, #15]
	if (epn > CONF_USB_D_MAX_EP_N) {
  405c12:	7bfb      	ldrb	r3, [r7, #15]
  405c14:	2b03      	cmp	r3, #3
  405c16:	d902      	bls.n	405c1e <_usb_d_dev_ep_stall_set+0x1e>
		return ERR_NOT_FOUND;
  405c18:	f06f 0309 	mvn.w	r3, #9
  405c1c:	e016      	b.n	405c4c <_usb_d_dev_ep_stall_set+0x4c>
	}
	if (!ept->flags.bits.is_stalled) {
  405c1e:	687b      	ldr	r3, [r7, #4]
  405c20:	7cdb      	ldrb	r3, [r3, #19]
  405c22:	f003 0308 	and.w	r3, r3, #8
  405c26:	b2db      	uxtb	r3, r3
  405c28:	2b00      	cmp	r3, #0
  405c2a:	d10e      	bne.n	405c4a <_usb_d_dev_ep_stall_set+0x4a>
		ept->flags.bits.is_stalled = 1;
  405c2c:	687a      	ldr	r2, [r7, #4]
  405c2e:	7cd3      	ldrb	r3, [r2, #19]
  405c30:	f043 0308 	orr.w	r3, r3, #8
  405c34:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  405c36:	7bfb      	ldrb	r3, [r7, #15]
  405c38:	2140      	movs	r1, #64	; 0x40
  405c3a:	4618      	mov	r0, r3
  405c3c:	4b05      	ldr	r3, [pc, #20]	; (405c54 <_usb_d_dev_ep_stall_set+0x54>)
  405c3e:	4798      	blx	r3
		_usbd_ep_set_stall(epn, true);
  405c40:	7bfb      	ldrb	r3, [r7, #15]
  405c42:	2101      	movs	r1, #1
  405c44:	4618      	mov	r0, r3
  405c46:	4b04      	ldr	r3, [pc, #16]	; (405c58 <_usb_d_dev_ep_stall_set+0x58>)
  405c48:	4798      	blx	r3
	}

	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
  405c4a:	2300      	movs	r3, #0
}
  405c4c:	4618      	mov	r0, r3
  405c4e:	3710      	adds	r7, #16
  405c50:	46bd      	mov	sp, r7
  405c52:	bd80      	pop	{r7, pc}
  405c54:	00404ca9 	.word	0x00404ca9
  405c58:	00404d41 	.word	0x00404d41

00405c5c <_usb_d_dev_ep_stall_clr>:
 * \brief Clear endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept)
{
  405c5c:	b580      	push	{r7, lr}
  405c5e:	b084      	sub	sp, #16
  405c60:	af00      	add	r7, sp, #0
  405c62:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  405c64:	687b      	ldr	r3, [r7, #4]
  405c66:	7c9b      	ldrb	r3, [r3, #18]
  405c68:	f003 030f 	and.w	r3, r3, #15
  405c6c:	73fb      	strb	r3, [r7, #15]

	if (!ept->flags.bits.is_stalled) {
  405c6e:	687b      	ldr	r3, [r7, #4]
  405c70:	7cdb      	ldrb	r3, [r3, #19]
  405c72:	f003 0308 	and.w	r3, r3, #8
  405c76:	b2db      	uxtb	r3, r3
  405c78:	2b00      	cmp	r3, #0
  405c7a:	d101      	bne.n	405c80 <_usb_d_dev_ep_stall_clr+0x24>
		return ERR_NONE;
  405c7c:	2300      	movs	r3, #0
  405c7e:	e035      	b.n	405cec <_usb_d_dev_ep_stall_clr+0x90>
	}
	_usbd_ep_set_stall(epn, false);
  405c80:	7bfb      	ldrb	r3, [r7, #15]
  405c82:	2100      	movs	r1, #0
  405c84:	4618      	mov	r0, r3
  405c86:	4b1b      	ldr	r3, [pc, #108]	; (405cf4 <_usb_d_dev_ep_stall_clr+0x98>)
  405c88:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  405c8a:	7bfb      	ldrb	r3, [r7, #15]
  405c8c:	2140      	movs	r1, #64	; 0x40
  405c8e:	4618      	mov	r0, r3
  405c90:	4b19      	ldr	r3, [pc, #100]	; (405cf8 <_usb_d_dev_ep_stall_clr+0x9c>)
  405c92:	4798      	blx	r3

	if (_usbd_ep_is_stall_sent(epn)) {
  405c94:	7bfb      	ldrb	r3, [r7, #15]
  405c96:	4618      	mov	r0, r3
  405c98:	4b18      	ldr	r3, [pc, #96]	; (405cfc <_usb_d_dev_ep_stall_clr+0xa0>)
  405c9a:	4798      	blx	r3
  405c9c:	4603      	mov	r3, r0
  405c9e:	2b00      	cmp	r3, #0
  405ca0:	d007      	beq.n	405cb2 <_usb_d_dev_ep_stall_clr+0x56>
		_usbd_ep_ack_stall(epn);
  405ca2:	7bfb      	ldrb	r3, [r7, #15]
  405ca4:	4618      	mov	r0, r3
  405ca6:	4b16      	ldr	r3, [pc, #88]	; (405d00 <_usb_d_dev_ep_stall_clr+0xa4>)
  405ca8:	4798      	blx	r3
		_usbd_ep_reset_toggle(epn);
  405caa:	7bfb      	ldrb	r3, [r7, #15]
  405cac:	4618      	mov	r0, r3
  405cae:	4b15      	ldr	r3, [pc, #84]	; (405d04 <_usb_d_dev_ep_stall_clr+0xa8>)
  405cb0:	4798      	blx	r3
	}

	if (_usb_d_dev_ep_is_ctrl(ept)) {
  405cb2:	687b      	ldr	r3, [r7, #4]
  405cb4:	7cdb      	ldrb	r3, [r3, #19]
  405cb6:	f003 0307 	and.w	r3, r3, #7
  405cba:	b2db      	uxtb	r3, r3
  405cbc:	2b01      	cmp	r3, #1
  405cbe:	d10f      	bne.n	405ce0 <_usb_d_dev_ep_stall_clr+0x84>
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  405cc0:	7bfb      	ldrb	r3, [r7, #15]
  405cc2:	4619      	mov	r1, r3
  405cc4:	4810      	ldr	r0, [pc, #64]	; (405d08 <_usb_d_dev_ep_stall_clr+0xac>)
  405cc6:	4b11      	ldr	r3, [pc, #68]	; (405d0c <_usb_d_dev_ep_stall_clr+0xb0>)
  405cc8:	4798      	blx	r3
  405cca:	4603      	mov	r3, r0
  405ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405cd0:	2b00      	cmp	r3, #0
  405cd2:	d10a      	bne.n	405cea <_usb_d_dev_ep_stall_clr+0x8e>
			ept->flags.bits.is_stalled = 0;
  405cd4:	687a      	ldr	r2, [r7, #4]
  405cd6:	7cd3      	ldrb	r3, [r2, #19]
  405cd8:	f36f 03c3 	bfc	r3, #3, #1
  405cdc:	74d3      	strb	r3, [r2, #19]
  405cde:	e004      	b.n	405cea <_usb_d_dev_ep_stall_clr+0x8e>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
  405ce0:	687a      	ldr	r2, [r7, #4]
  405ce2:	7cd3      	ldrb	r3, [r2, #19]
  405ce4:	f36f 03c3 	bfc	r3, #3, #1
  405ce8:	74d3      	strb	r3, [r2, #19]
	}

	return ERR_NONE;
  405cea:	2300      	movs	r3, #0
}
  405cec:	4618      	mov	r0, r3
  405cee:	3710      	adds	r7, #16
  405cf0:	46bd      	mov	sp, r7
  405cf2:	bd80      	pop	{r7, pc}
  405cf4:	00404d41 	.word	0x00404d41
  405cf8:	00404ce9 	.word	0x00404ce9
  405cfc:	00404d8d 	.word	0x00404d8d
  405d00:	00404db5 	.word	0x00404db5
  405d04:	00404e81 	.word	0x00404e81
  405d08:	40038000 	.word	0x40038000
  405d0c:	004048e9 	.word	0x004048e9

00405d10 <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
  405d10:	b580      	push	{r7, lr}
  405d12:	b086      	sub	sp, #24
  405d14:	af00      	add	r7, sp, #0
  405d16:	4603      	mov	r3, r0
  405d18:	460a      	mov	r2, r1
  405d1a:	71fb      	strb	r3, [r7, #7]
  405d1c:	4613      	mov	r3, r2
  405d1e:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
  405d20:	79fb      	ldrb	r3, [r7, #7]
  405d22:	f003 030f 	and.w	r3, r3, #15
  405d26:	74fb      	strb	r3, [r7, #19]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  405d28:	7cfa      	ldrb	r2, [r7, #19]
  405d2a:	4613      	mov	r3, r2
  405d2c:	009b      	lsls	r3, r3, #2
  405d2e:	4413      	add	r3, r2
  405d30:	009b      	lsls	r3, r3, #2
  405d32:	3310      	adds	r3, #16
  405d34:	4a11      	ldr	r2, [pc, #68]	; (405d7c <_usb_d_dev_ep_stall+0x6c>)
  405d36:	4413      	add	r3, r2
  405d38:	3304      	adds	r3, #4
  405d3a:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
  405d3c:	7cfb      	ldrb	r3, [r7, #19]
  405d3e:	2b03      	cmp	r3, #3
  405d40:	d902      	bls.n	405d48 <_usb_d_dev_ep_stall+0x38>
		return -USB_ERR_PARAM;
  405d42:	f06f 0311 	mvn.w	r3, #17
  405d46:	e014      	b.n	405d72 <_usb_d_dev_ep_stall+0x62>
	}

	if (USB_EP_STALL_SET == ctrl) {
  405d48:	79bb      	ldrb	r3, [r7, #6]
  405d4a:	2b01      	cmp	r3, #1
  405d4c:	d104      	bne.n	405d58 <_usb_d_dev_ep_stall+0x48>
		rc = _usb_d_dev_ep_stall_set(ept);
  405d4e:	68f8      	ldr	r0, [r7, #12]
  405d50:	4b0b      	ldr	r3, [pc, #44]	; (405d80 <_usb_d_dev_ep_stall+0x70>)
  405d52:	4798      	blx	r3
  405d54:	6178      	str	r0, [r7, #20]
  405d56:	e00b      	b.n	405d70 <_usb_d_dev_ep_stall+0x60>
	} else if (USB_EP_STALL_CLR == ctrl) {
  405d58:	79bb      	ldrb	r3, [r7, #6]
  405d5a:	2b00      	cmp	r3, #0
  405d5c:	d104      	bne.n	405d68 <_usb_d_dev_ep_stall+0x58>
		rc = _usb_d_dev_ep_stall_clr(ept);
  405d5e:	68f8      	ldr	r0, [r7, #12]
  405d60:	4b08      	ldr	r3, [pc, #32]	; (405d84 <_usb_d_dev_ep_stall+0x74>)
  405d62:	4798      	blx	r3
  405d64:	6178      	str	r0, [r7, #20]
  405d66:	e003      	b.n	405d70 <_usb_d_dev_ep_stall+0x60>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept);
  405d68:	68f8      	ldr	r0, [r7, #12]
  405d6a:	4b07      	ldr	r3, [pc, #28]	; (405d88 <_usb_d_dev_ep_stall+0x78>)
  405d6c:	4798      	blx	r3
  405d6e:	6178      	str	r0, [r7, #20]
	}

	return rc;
  405d70:	697b      	ldr	r3, [r7, #20]
}
  405d72:	4618      	mov	r0, r3
  405d74:	3718      	adds	r7, #24
  405d76:	46bd      	mov	sp, r7
  405d78:	bd80      	pop	{r7, pc}
  405d7a:	bf00      	nop
  405d7c:	20401170 	.word	0x20401170
  405d80:	00405c01 	.word	0x00405c01
  405d84:	00405c5d 	.word	0x00405c5d
  405d88:	00405be1 	.word	0x00405be1

00405d8c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  405d8c:	b580      	push	{r7, lr}
  405d8e:	b082      	sub	sp, #8
  405d90:	af00      	add	r7, sp, #0
  405d92:	6078      	str	r0, [r7, #4]
  405d94:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  405d96:	687b      	ldr	r3, [r7, #4]
  405d98:	7c9b      	ldrb	r3, [r3, #18]
  405d9a:	2bff      	cmp	r3, #255	; 0xff
  405d9c:	d014      	beq.n	405dc8 <_usb_d_dev_trans_done+0x3c>
  405d9e:	687b      	ldr	r3, [r7, #4]
  405da0:	7cdb      	ldrb	r3, [r3, #19]
  405da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405da6:	b2db      	uxtb	r3, r3
  405da8:	2b00      	cmp	r3, #0
  405daa:	d00d      	beq.n	405dc8 <_usb_d_dev_trans_done+0x3c>
		return;
	}

	ept->flags.bits.is_busy = 0;
  405dac:	687a      	ldr	r2, [r7, #4]
  405dae:	7cd3      	ldrb	r3, [r2, #19]
  405db0:	f36f 1386 	bfc	r3, #6, #1
  405db4:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  405db6:	4b06      	ldr	r3, [pc, #24]	; (405dd0 <_usb_d_dev_trans_done+0x44>)
  405db8:	691b      	ldr	r3, [r3, #16]
  405dba:	687a      	ldr	r2, [r7, #4]
  405dbc:	7c90      	ldrb	r0, [r2, #18]
  405dbe:	687a      	ldr	r2, [r7, #4]
  405dc0:	6892      	ldr	r2, [r2, #8]
  405dc2:	6839      	ldr	r1, [r7, #0]
  405dc4:	4798      	blx	r3
  405dc6:	e000      	b.n	405dca <_usb_d_dev_trans_done+0x3e>
		return;
  405dc8:	bf00      	nop
}
  405dca:	3708      	adds	r7, #8
  405dcc:	46bd      	mov	sp, r7
  405dce:	bd80      	pop	{r7, pc}
  405dd0:	20401170 	.word	0x20401170

00405dd4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
  405dd4:	b580      	push	{r7, lr}
  405dd6:	b086      	sub	sp, #24
  405dd8:	af00      	add	r7, sp, #0
  405dda:	60f8      	str	r0, [r7, #12]
  405ddc:	460b      	mov	r3, r1
  405dde:	607a      	str	r2, [r7, #4]
  405de0:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  405de2:	68fb      	ldr	r3, [r7, #12]
  405de4:	7c9b      	ldrb	r3, [r3, #18]
  405de6:	f003 030f 	and.w	r3, r3, #15
  405dea:	75fb      	strb	r3, [r7, #23]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  405dec:	68fb      	ldr	r3, [r7, #12]
  405dee:	7c9b      	ldrb	r3, [r3, #18]
  405df0:	2bff      	cmp	r3, #255	; 0xff
  405df2:	d019      	beq.n	405e28 <_usb_d_dev_trans_stop+0x54>
  405df4:	68fb      	ldr	r3, [r7, #12]
  405df6:	7cdb      	ldrb	r3, [r3, #19]
  405df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405dfc:	b2db      	uxtb	r3, r3
  405dfe:	2b00      	cmp	r3, #0
  405e00:	d012      	beq.n	405e28 <_usb_d_dev_trans_stop+0x54>
		return;
	}

	/* Stop transfer */
	if (dir) {
  405e02:	7afb      	ldrb	r3, [r7, #11]
  405e04:	2b00      	cmp	r3, #0
  405e06:	d005      	beq.n	405e14 <_usb_d_dev_trans_stop+0x40>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, false);
  405e08:	7dfb      	ldrb	r3, [r7, #23]
  405e0a:	2100      	movs	r1, #0
  405e0c:	4618      	mov	r0, r3
  405e0e:	4b08      	ldr	r3, [pc, #32]	; (405e30 <_usb_d_dev_trans_stop+0x5c>)
  405e10:	4798      	blx	r3
  405e12:	e004      	b.n	405e1e <_usb_d_dev_trans_stop+0x4a>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
  405e14:	7dfb      	ldrb	r3, [r7, #23]
  405e16:	2100      	movs	r1, #0
  405e18:	4618      	mov	r0, r3
  405e1a:	4b06      	ldr	r3, [pc, #24]	; (405e34 <_usb_d_dev_trans_stop+0x60>)
  405e1c:	4798      	blx	r3
	}

	_usb_d_dev_trans_done(ept, code);
  405e1e:	6879      	ldr	r1, [r7, #4]
  405e20:	68f8      	ldr	r0, [r7, #12]
  405e22:	4b05      	ldr	r3, [pc, #20]	; (405e38 <_usb_d_dev_trans_stop+0x64>)
  405e24:	4798      	blx	r3
  405e26:	e000      	b.n	405e2a <_usb_d_dev_trans_stop+0x56>
		return;
  405e28:	bf00      	nop
}
  405e2a:	3718      	adds	r7, #24
  405e2c:	46bd      	mov	sp, r7
  405e2e:	bd80      	pop	{r7, pc}
  405e30:	00404f25 	.word	0x00404f25
  405e34:	00404f6d 	.word	0x00404f6d
  405e38:	00405d8d 	.word	0x00405d8d

00405e3c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
  405e3c:	b580      	push	{r7, lr}
  405e3e:	b084      	sub	sp, #16
  405e40:	af00      	add	r7, sp, #0
  405e42:	4603      	mov	r3, r0
  405e44:	6039      	str	r1, [r7, #0]
  405e46:	71fb      	strb	r3, [r7, #7]
	uint8_t epn = USB_EP_GET_N(ep);
  405e48:	79fb      	ldrb	r3, [r7, #7]
  405e4a:	f003 030f 	and.w	r3, r3, #15
  405e4e:	73fb      	strb	r3, [r7, #15]

	uint16_t bytes = _usbd_ep_get_trans_count(epn);
  405e50:	7bfb      	ldrb	r3, [r7, #15]
  405e52:	4618      	mov	r0, r3
  405e54:	4b1c      	ldr	r3, [pc, #112]	; (405ec8 <_usb_d_dev_ep_read_req+0x8c>)
  405e56:	4798      	blx	r3
  405e58:	4603      	mov	r3, r0
  405e5a:	81bb      	strh	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  405e5c:	7bfb      	ldrb	r3, [r7, #15]
  405e5e:	2b03      	cmp	r3, #3
  405e60:	d802      	bhi.n	405e68 <_usb_d_dev_ep_read_req+0x2c>
  405e62:	683b      	ldr	r3, [r7, #0]
  405e64:	2b00      	cmp	r3, #0
  405e66:	d102      	bne.n	405e6e <_usb_d_dev_ep_read_req+0x32>
		return -USB_ERR_PARAM;
  405e68:	f06f 0311 	mvn.w	r3, #17
  405e6c:	e027      	b.n	405ebe <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  405e6e:	7bfb      	ldrb	r3, [r7, #15]
  405e70:	4618      	mov	r0, r3
  405e72:	4b16      	ldr	r3, [pc, #88]	; (405ecc <_usb_d_dev_ep_read_req+0x90>)
  405e74:	4798      	blx	r3
  405e76:	4603      	mov	r3, r0
  405e78:	f083 0301 	eor.w	r3, r3, #1
  405e7c:	b2db      	uxtb	r3, r3
  405e7e:	2b00      	cmp	r3, #0
  405e80:	d002      	beq.n	405e88 <_usb_d_dev_ep_read_req+0x4c>
		return -USB_ERR_FUNC;
  405e82:	f06f 0312 	mvn.w	r3, #18
  405e86:	e01a      	b.n	405ebe <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_setup(epn)) {
  405e88:	7bfb      	ldrb	r3, [r7, #15]
  405e8a:	4618      	mov	r0, r3
  405e8c:	4b10      	ldr	r3, [pc, #64]	; (405ed0 <_usb_d_dev_ep_read_req+0x94>)
  405e8e:	4798      	blx	r3
  405e90:	4603      	mov	r3, r0
  405e92:	f083 0301 	eor.w	r3, r3, #1
  405e96:	b2db      	uxtb	r3, r3
  405e98:	2b00      	cmp	r3, #0
  405e9a:	d001      	beq.n	405ea0 <_usb_d_dev_ep_read_req+0x64>
		return ERR_NONE;
  405e9c:	2300      	movs	r3, #0
  405e9e:	e00e      	b.n	405ebe <_usb_d_dev_ep_read_req+0x82>
	}

	uint8_t *ptr = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  405ea0:	7bfb      	ldrb	r3, [r7, #15]
  405ea2:	03da      	lsls	r2, r3, #15
  405ea4:	4b0b      	ldr	r3, [pc, #44]	; (405ed4 <_usb_d_dev_ep_read_req+0x98>)
  405ea6:	4413      	add	r3, r2
  405ea8:	60bb      	str	r3, [r7, #8]
	memcpy(req_buf, (void *)ptr, 8);
  405eaa:	2208      	movs	r2, #8
  405eac:	68b9      	ldr	r1, [r7, #8]
  405eae:	6838      	ldr	r0, [r7, #0]
  405eb0:	4b09      	ldr	r3, [pc, #36]	; (405ed8 <_usb_d_dev_ep_read_req+0x9c>)
  405eb2:	4798      	blx	r3

	_usbd_ep_ack_setup(epn);
  405eb4:	7bfb      	ldrb	r3, [r7, #15]
  405eb6:	4618      	mov	r0, r3
  405eb8:	4b08      	ldr	r3, [pc, #32]	; (405edc <_usb_d_dev_ep_read_req+0xa0>)
  405eba:	4798      	blx	r3

	return bytes;
  405ebc:	89bb      	ldrh	r3, [r7, #12]
}
  405ebe:	4618      	mov	r0, r3
  405ec0:	3710      	adds	r7, #16
  405ec2:	46bd      	mov	sp, r7
  405ec4:	bd80      	pop	{r7, pc}
  405ec6:	bf00      	nop
  405ec8:	00404ead 	.word	0x00404ead
  405ecc:	00404d11 	.word	0x00404d11
  405ed0:	00404e39 	.word	0x00404e39
  405ed4:	a0100000 	.word	0xa0100000
  405ed8:	00406a21 	.word	0x00406a21
  405edc:	00404e61 	.word	0x00404e61

00405ee0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  405ee0:	b580      	push	{r7, lr}
  405ee2:	b088      	sub	sp, #32
  405ee4:	af00      	add	r7, sp, #0
  405ee6:	6078      	str	r0, [r7, #4]
	Usbhs *               hw  = USBHS;
  405ee8:	4b64      	ldr	r3, [pc, #400]	; (40607c <_usb_d_dev_ep_trans+0x19c>)
  405eea:	61fb      	str	r3, [r7, #28]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  405eec:	687b      	ldr	r3, [r7, #4]
  405eee:	7a1b      	ldrb	r3, [r3, #8]
  405ef0:	f003 030f 	and.w	r3, r3, #15
  405ef4:	76fb      	strb	r3, [r7, #27]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  405ef6:	687b      	ldr	r3, [r7, #4]
  405ef8:	7a1b      	ldrb	r3, [r3, #8]
  405efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405efe:	2b00      	cmp	r3, #0
  405f00:	bf14      	ite	ne
  405f02:	2301      	movne	r3, #1
  405f04:	2300      	moveq	r3, #0
  405f06:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  405f08:	7efa      	ldrb	r2, [r7, #27]
  405f0a:	4613      	mov	r3, r2
  405f0c:	009b      	lsls	r3, r3, #2
  405f0e:	4413      	add	r3, r2
  405f10:	009b      	lsls	r3, r3, #2
  405f12:	3310      	adds	r3, #16
  405f14:	4a5a      	ldr	r2, [pc, #360]	; (406080 <_usb_d_dev_ep_trans+0x1a0>)
  405f16:	4413      	add	r3, r2
  405f18:	3304      	adds	r3, #4
  405f1a:	617b      	str	r3, [r7, #20]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  405f1c:	697b      	ldr	r3, [r7, #20]
  405f1e:	8a1b      	ldrh	r3, [r3, #16]
  405f20:	f240 32ff 	movw	r2, #1023	; 0x3ff
  405f24:	4293      	cmp	r3, r2
  405f26:	d004      	beq.n	405f32 <_usb_d_dev_ep_trans+0x52>
  405f28:	697b      	ldr	r3, [r7, #20]
  405f2a:	8a1b      	ldrh	r3, [r3, #16]
  405f2c:	3b01      	subs	r3, #1
  405f2e:	b29b      	uxth	r3, r3
  405f30:	e001      	b.n	405f36 <_usb_d_dev_ep_trans+0x56>
  405f32:	f240 33ff 	movw	r3, #1023	; 0x3ff
  405f36:	827b      	strh	r3, [r7, #18]
	bool     size_n_aligned = (trans->size & size_mask);
  405f38:	687b      	ldr	r3, [r7, #4]
  405f3a:	685a      	ldr	r2, [r3, #4]
  405f3c:	8a7b      	ldrh	r3, [r7, #18]
  405f3e:	4013      	ands	r3, r2
  405f40:	2b00      	cmp	r3, #0
  405f42:	bf14      	ite	ne
  405f44:	2301      	movne	r3, #1
  405f46:	2300      	moveq	r3, #0
  405f48:	747b      	strb	r3, [r7, #17]
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  405f4a:	697b      	ldr	r3, [r7, #20]
  405f4c:	7cdb      	ldrb	r3, [r3, #19]
  405f4e:	f003 0307 	and.w	r3, r3, #7
  405f52:	b2db      	uxtb	r3, r3
  405f54:	2b01      	cmp	r3, #1
  405f56:	bf0c      	ite	eq
  405f58:	2301      	moveq	r3, #1
  405f5a:	2300      	movne	r3, #0
  405f5c:	743b      	strb	r3, [r7, #16]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  405f5e:	7efb      	ldrb	r3, [r7, #27]
  405f60:	2b03      	cmp	r3, #3
  405f62:	d902      	bls.n	405f6a <_usb_d_dev_ep_trans+0x8a>
		return -USB_ERR_PARAM;
  405f64:	f06f 0311 	mvn.w	r3, #17
  405f68:	e083      	b.n	406072 <_usb_d_dev_ep_trans+0x192>
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  405f6a:	697b      	ldr	r3, [r7, #20]
  405f6c:	7cdb      	ldrb	r3, [r3, #19]
  405f6e:	f003 0308 	and.w	r3, r3, #8
  405f72:	b2db      	uxtb	r3, r3
  405f74:	2b00      	cmp	r3, #0
  405f76:	d001      	beq.n	405f7c <_usb_d_dev_ep_trans+0x9c>
		return USB_HALTED;
  405f78:	2302      	movs	r3, #2
  405f7a:	e07a      	b.n	406072 <_usb_d_dev_ep_trans+0x192>
	}

	/* Try to start transactions. */
	atomic_enter_critical(&flags);
  405f7c:	f107 030c 	add.w	r3, r7, #12
  405f80:	4618      	mov	r0, r3
  405f82:	4b40      	ldr	r3, [pc, #256]	; (406084 <_usb_d_dev_ep_trans+0x1a4>)
  405f84:	4798      	blx	r3

	if (_usb_d_dev_ep_is_busy(ept)) {
  405f86:	697b      	ldr	r3, [r7, #20]
  405f88:	7cdb      	ldrb	r3, [r3, #19]
  405f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405f8e:	b2db      	uxtb	r3, r3
  405f90:	2b00      	cmp	r3, #0
  405f92:	d006      	beq.n	405fa2 <_usb_d_dev_ep_trans+0xc2>
		atomic_leave_critical(&flags);
  405f94:	f107 030c 	add.w	r3, r7, #12
  405f98:	4618      	mov	r0, r3
  405f9a:	4b3b      	ldr	r3, [pc, #236]	; (406088 <_usb_d_dev_ep_trans+0x1a8>)
  405f9c:	4798      	blx	r3
		return USB_BUSY;
  405f9e:	2301      	movs	r3, #1
  405fa0:	e067      	b.n	406072 <_usb_d_dev_ep_trans+0x192>
	}

	ept->flags.bits.is_busy = 1;
  405fa2:	697a      	ldr	r2, [r7, #20]
  405fa4:	7cd3      	ldrb	r3, [r2, #19]
  405fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405faa:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
  405fac:	f107 030c 	add.w	r3, r7, #12
  405fb0:	4618      	mov	r0, r3
  405fb2:	4b35      	ldr	r3, [pc, #212]	; (406088 <_usb_d_dev_ep_trans+0x1a8>)
  405fb4:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
  405fb6:	687b      	ldr	r3, [r7, #4]
  405fb8:	681a      	ldr	r2, [r3, #0]
  405fba:	697b      	ldr	r3, [r7, #20]
  405fbc:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
  405fbe:	687b      	ldr	r3, [r7, #4]
  405fc0:	685a      	ldr	r2, [r3, #4]
  405fc2:	697b      	ldr	r3, [r7, #20]
  405fc4:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
  405fc6:	697b      	ldr	r3, [r7, #20]
  405fc8:	2200      	movs	r2, #0
  405fca:	609a      	str	r2, [r3, #8]
	ept->trans_load  = 0;
  405fcc:	697b      	ldr	r3, [r7, #20]
  405fce:	2200      	movs	r2, #0
  405fd0:	60da      	str	r2, [r3, #12]

	ept->flags.bits.dir      = dir;
  405fd2:	697a      	ldr	r2, [r7, #20]
  405fd4:	7cd3      	ldrb	r3, [r2, #19]
  405fd6:	7eb9      	ldrb	r1, [r7, #26]
  405fd8:	f361 13c7 	bfi	r3, r1, #7, #1
  405fdc:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  405fde:	687b      	ldr	r3, [r7, #4]
  405fe0:	7a5b      	ldrb	r3, [r3, #9]
  405fe2:	2b00      	cmp	r3, #0
  405fe4:	d007      	beq.n	405ff6 <_usb_d_dev_ep_trans+0x116>
  405fe6:	7c7b      	ldrb	r3, [r7, #17]
  405fe8:	f083 0301 	eor.w	r3, r3, #1
  405fec:	b2db      	uxtb	r3, r3
  405fee:	2b00      	cmp	r3, #0
  405ff0:	d001      	beq.n	405ff6 <_usb_d_dev_ep_trans+0x116>
  405ff2:	2301      	movs	r3, #1
  405ff4:	e000      	b.n	405ff8 <_usb_d_dev_ep_trans+0x118>
  405ff6:	2300      	movs	r3, #0
  405ff8:	b2db      	uxtb	r3, r3
  405ffa:	f003 0301 	and.w	r3, r3, #1
  405ffe:	b2d9      	uxtb	r1, r3
  406000:	697a      	ldr	r2, [r7, #20]
  406002:	7cd3      	ldrb	r3, [r2, #19]
  406004:	f361 1304 	bfi	r3, r1, #4, #1
  406008:	74d3      	strb	r3, [r2, #19]

#if (CONF_USB_D_DMA_ENABLE == 1)
	if (_usb_d_dev_ep_is_dma(epn)) {
  40600a:	7efb      	ldrb	r3, [r7, #27]
  40600c:	2b00      	cmp	r3, #0
  40600e:	d00b      	beq.n	406028 <_usb_d_dev_ep_trans+0x148>
  406010:	7efb      	ldrb	r3, [r7, #27]
  406012:	2b06      	cmp	r3, #6
  406014:	d808      	bhi.n	406028 <_usb_d_dev_ep_trans+0x148>
		hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(hw, epn);
  406016:	7efb      	ldrb	r3, [r7, #27]
  406018:	4619      	mov	r1, r3
  40601a:	69f8      	ldr	r0, [r7, #28]
  40601c:	4b1b      	ldr	r3, [pc, #108]	; (40608c <_usb_d_dev_ep_trans+0x1ac>)
  40601e:	4798      	blx	r3
		_usb_d_dev_dma_next(ept);
  406020:	6978      	ldr	r0, [r7, #20]
  406022:	4b1b      	ldr	r3, [pc, #108]	; (406090 <_usb_d_dev_ep_trans+0x1b0>)
  406024:	4798      	blx	r3
  406026:	e023      	b.n	406070 <_usb_d_dev_ep_trans+0x190>
	} else {
#endif
		if (!is_ctrl) {
  406028:	7c3b      	ldrb	r3, [r7, #16]
  40602a:	f083 0301 	eor.w	r3, r3, #1
  40602e:	b2db      	uxtb	r3, r3
  406030:	2b00      	cmp	r3, #0
  406032:	d008      	beq.n	406046 <_usb_d_dev_ep_trans+0x166>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406034:	7efb      	ldrb	r3, [r7, #27]
  406036:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40603a:	fa02 f303 	lsl.w	r3, r2, r3
  40603e:	4619      	mov	r1, r3
  406040:	69f8      	ldr	r0, [r7, #28]
  406042:	4b14      	ldr	r3, [pc, #80]	; (406094 <_usb_d_dev_ep_trans+0x1b4>)
  406044:	4798      	blx	r3
		}
		hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(hw, epn);
  406046:	7efb      	ldrb	r3, [r7, #27]
  406048:	4619      	mov	r1, r3
  40604a:	69f8      	ldr	r0, [r7, #28]
  40604c:	4b12      	ldr	r3, [pc, #72]	; (406098 <_usb_d_dev_ep_trans+0x1b8>)
  40604e:	4798      	blx	r3
		if (dir) {
  406050:	7ebb      	ldrb	r3, [r7, #26]
  406052:	2b00      	cmp	r3, #0
  406054:	d006      	beq.n	406064 <_usb_d_dev_ep_trans+0x184>
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  406056:	7efb      	ldrb	r3, [r7, #27]
  406058:	2201      	movs	r2, #1
  40605a:	4619      	mov	r1, r3
  40605c:	69f8      	ldr	r0, [r7, #28]
  40605e:	4b0f      	ldr	r3, [pc, #60]	; (40609c <_usb_d_dev_ep_trans+0x1bc>)
  406060:	4798      	blx	r3
  406062:	e005      	b.n	406070 <_usb_d_dev_ep_trans+0x190>
		} else {
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RXOUTES);
  406064:	7efb      	ldrb	r3, [r7, #27]
  406066:	2202      	movs	r2, #2
  406068:	4619      	mov	r1, r3
  40606a:	69f8      	ldr	r0, [r7, #28]
  40606c:	4b0b      	ldr	r3, [pc, #44]	; (40609c <_usb_d_dev_ep_trans+0x1bc>)
  40606e:	4798      	blx	r3
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
  406070:	2300      	movs	r3, #0
}
  406072:	4618      	mov	r0, r3
  406074:	3720      	adds	r7, #32
  406076:	46bd      	mov	sp, r7
  406078:	bd80      	pop	{r7, pc}
  40607a:	bf00      	nop
  40607c:	40038000 	.word	0x40038000
  406080:	20401170 	.word	0x20401170
  406084:	004010e1 	.word	0x004010e1
  406088:	00401107 	.word	0x00401107
  40608c:	00404a51 	.word	0x00404a51
  406090:	00405491 	.word	0x00405491
  406094:	004047d3 	.word	0x004047d3
  406098:	00404a81 	.word	0x00404a81
  40609c:	00404973 	.word	0x00404973

004060a0 <_usb_d_dev_register_ep_callback>:
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
  4060a0:	b480      	push	{r7}
  4060a2:	b085      	sub	sp, #20
  4060a4:	af00      	add	r7, sp, #0
  4060a6:	4603      	mov	r3, r0
  4060a8:	6039      	str	r1, [r7, #0]
  4060aa:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  4060ac:	683b      	ldr	r3, [r7, #0]
  4060ae:	2b00      	cmp	r3, #0
  4060b0:	d001      	beq.n	4060b6 <_usb_d_dev_register_ep_callback+0x16>
  4060b2:	683b      	ldr	r3, [r7, #0]
  4060b4:	e000      	b.n	4060b8 <_usb_d_dev_register_ep_callback+0x18>
  4060b6:	4b0e      	ldr	r3, [pc, #56]	; (4060f0 <_usb_d_dev_register_ep_callback+0x50>)
  4060b8:	60fb      	str	r3, [r7, #12]

	if (type == USB_D_DEV_EP_CB_SETUP) {
  4060ba:	79fb      	ldrb	r3, [r7, #7]
  4060bc:	2b00      	cmp	r3, #0
  4060be:	d103      	bne.n	4060c8 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  4060c0:	4a0c      	ldr	r2, [pc, #48]	; (4060f4 <_usb_d_dev_register_ep_callback+0x54>)
  4060c2:	68fb      	ldr	r3, [r7, #12]
  4060c4:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
  4060c6:	e00c      	b.n	4060e2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  4060c8:	79fb      	ldrb	r3, [r7, #7]
  4060ca:	2b01      	cmp	r3, #1
  4060cc:	d103      	bne.n	4060d6 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  4060ce:	4a09      	ldr	r2, [pc, #36]	; (4060f4 <_usb_d_dev_register_ep_callback+0x54>)
  4060d0:	68fb      	ldr	r3, [r7, #12]
  4060d2:	60d3      	str	r3, [r2, #12]
}
  4060d4:	e005      	b.n	4060e2 <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  4060d6:	79fb      	ldrb	r3, [r7, #7]
  4060d8:	2b02      	cmp	r3, #2
  4060da:	d102      	bne.n	4060e2 <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  4060dc:	4a05      	ldr	r2, [pc, #20]	; (4060f4 <_usb_d_dev_register_ep_callback+0x54>)
  4060de:	68fb      	ldr	r3, [r7, #12]
  4060e0:	6113      	str	r3, [r2, #16]
}
  4060e2:	bf00      	nop
  4060e4:	3714      	adds	r7, #20
  4060e6:	46bd      	mov	sp, r7
  4060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060ec:	4770      	bx	lr
  4060ee:	bf00      	nop
  4060f0:	00404c53 	.word	0x00404c53
  4060f4:	20401170 	.word	0x20401170

004060f8 <NVIC_EnableIRQ>:
{
  4060f8:	b480      	push	{r7}
  4060fa:	b083      	sub	sp, #12
  4060fc:	af00      	add	r7, sp, #0
  4060fe:	4603      	mov	r3, r0
  406100:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  406102:	4909      	ldr	r1, [pc, #36]	; (406128 <NVIC_EnableIRQ+0x30>)
  406104:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406108:	095b      	lsrs	r3, r3, #5
  40610a:	79fa      	ldrb	r2, [r7, #7]
  40610c:	f002 021f 	and.w	r2, r2, #31
  406110:	2001      	movs	r0, #1
  406112:	fa00 f202 	lsl.w	r2, r0, r2
  406116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40611a:	bf00      	nop
  40611c:	370c      	adds	r7, #12
  40611e:	46bd      	mov	sp, r7
  406120:	f85d 7b04 	ldr.w	r7, [sp], #4
  406124:	4770      	bx	lr
  406126:	bf00      	nop
  406128:	e000e100 	.word	0xe000e100

0040612c <NVIC_DisableIRQ>:
{
  40612c:	b480      	push	{r7}
  40612e:	b083      	sub	sp, #12
  406130:	af00      	add	r7, sp, #0
  406132:	4603      	mov	r3, r0
  406134:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  406136:	4909      	ldr	r1, [pc, #36]	; (40615c <NVIC_DisableIRQ+0x30>)
  406138:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40613c:	095b      	lsrs	r3, r3, #5
  40613e:	79fa      	ldrb	r2, [r7, #7]
  406140:	f002 021f 	and.w	r2, r2, #31
  406144:	2001      	movs	r0, #1
  406146:	fa00 f202 	lsl.w	r2, r0, r2
  40614a:	3320      	adds	r3, #32
  40614c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406150:	bf00      	nop
  406152:	370c      	adds	r7, #12
  406154:	46bd      	mov	sp, r7
  406156:	f85d 7b04 	ldr.w	r7, [sp], #4
  40615a:	4770      	bx	lr
  40615c:	e000e100 	.word	0xe000e100

00406160 <NVIC_ClearPendingIRQ>:
{
  406160:	b480      	push	{r7}
  406162:	b083      	sub	sp, #12
  406164:	af00      	add	r7, sp, #0
  406166:	4603      	mov	r3, r0
  406168:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40616a:	4909      	ldr	r1, [pc, #36]	; (406190 <NVIC_ClearPendingIRQ+0x30>)
  40616c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  406170:	095b      	lsrs	r3, r3, #5
  406172:	79fa      	ldrb	r2, [r7, #7]
  406174:	f002 021f 	and.w	r2, r2, #31
  406178:	2001      	movs	r0, #1
  40617a:	fa00 f202 	lsl.w	r2, r0, r2
  40617e:	3360      	adds	r3, #96	; 0x60
  406180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  406184:	bf00      	nop
  406186:	370c      	adds	r7, #12
  406188:	46bd      	mov	sp, r7
  40618a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40618e:	4770      	bx	lr
  406190:	e000e100 	.word	0xe000e100

00406194 <hri_xdmac_set_CIM_reg>:
{
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = XDMAC_CIM_ROIM;
}

static inline void hri_xdmac_set_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  406194:	b480      	push	{r7}
  406196:	b085      	sub	sp, #20
  406198:	af00      	add	r7, sp, #0
  40619a:	60f8      	str	r0, [r7, #12]
  40619c:	460b      	mov	r3, r1
  40619e:	607a      	str	r2, [r7, #4]
  4061a0:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = mask;
  4061a2:	7afb      	ldrb	r3, [r7, #11]
  4061a4:	68fa      	ldr	r2, [r7, #12]
  4061a6:	019b      	lsls	r3, r3, #6
  4061a8:	4413      	add	r3, r2
  4061aa:	3350      	adds	r3, #80	; 0x50
  4061ac:	687a      	ldr	r2, [r7, #4]
  4061ae:	601a      	str	r2, [r3, #0]
}
  4061b0:	bf00      	nop
  4061b2:	3714      	adds	r7, #20
  4061b4:	46bd      	mov	sp, r7
  4061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061ba:	4770      	bx	lr

004061bc <hri_xdmac_clear_CIM_reg>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = data;
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = ~data;
}

static inline void hri_xdmac_clear_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  4061bc:	b480      	push	{r7}
  4061be:	b085      	sub	sp, #20
  4061c0:	af00      	add	r7, sp, #0
  4061c2:	60f8      	str	r0, [r7, #12]
  4061c4:	460b      	mov	r3, r1
  4061c6:	607a      	str	r2, [r7, #4]
  4061c8:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = mask;
  4061ca:	7afb      	ldrb	r3, [r7, #11]
  4061cc:	68fa      	ldr	r2, [r7, #12]
  4061ce:	019b      	lsls	r3, r3, #6
  4061d0:	4413      	add	r3, r2
  4061d2:	3354      	adds	r3, #84	; 0x54
  4061d4:	687a      	ldr	r2, [r7, #4]
  4061d6:	601a      	str	r2, [r3, #0]
}
  4061d8:	bf00      	nop
  4061da:	3714      	adds	r7, #20
  4061dc:	46bd      	mov	sp, r7
  4061de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061e2:	4770      	bx	lr

004061e4 <hri_xdmac_write_CSA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csa_reg_t data)
{
  4061e4:	b480      	push	{r7}
  4061e6:	b085      	sub	sp, #20
  4061e8:	af00      	add	r7, sp, #0
  4061ea:	60f8      	str	r0, [r7, #12]
  4061ec:	460b      	mov	r3, r1
  4061ee:	607a      	str	r2, [r7, #4]
  4061f0:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSA = data;
  4061f2:	7afb      	ldrb	r3, [r7, #11]
  4061f4:	68fa      	ldr	r2, [r7, #12]
  4061f6:	019b      	lsls	r3, r3, #6
  4061f8:	4413      	add	r3, r2
  4061fa:	3360      	adds	r3, #96	; 0x60
  4061fc:	687a      	ldr	r2, [r7, #4]
  4061fe:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406200:	bf00      	nop
  406202:	3714      	adds	r7, #20
  406204:	46bd      	mov	sp, r7
  406206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40620a:	4770      	bx	lr

0040620c <hri_xdmac_write_CDA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cda_reg_t data)
{
  40620c:	b480      	push	{r7}
  40620e:	b085      	sub	sp, #20
  406210:	af00      	add	r7, sp, #0
  406212:	60f8      	str	r0, [r7, #12]
  406214:	460b      	mov	r3, r1
  406216:	607a      	str	r2, [r7, #4]
  406218:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDA = data;
  40621a:	7afb      	ldrb	r3, [r7, #11]
  40621c:	68fa      	ldr	r2, [r7, #12]
  40621e:	019b      	lsls	r3, r3, #6
  406220:	4413      	add	r3, r2
  406222:	3364      	adds	r3, #100	; 0x64
  406224:	687a      	ldr	r2, [r7, #4]
  406226:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406228:	bf00      	nop
  40622a:	3714      	adds	r7, #20
  40622c:	46bd      	mov	sp, r7
  40622e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406232:	4770      	bx	lr

00406234 <hri_xdmac_write_CNDC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
  406234:	b480      	push	{r7}
  406236:	b085      	sub	sp, #20
  406238:	af00      	add	r7, sp, #0
  40623a:	60f8      	str	r0, [r7, #12]
  40623c:	460b      	mov	r3, r1
  40623e:	607a      	str	r2, [r7, #4]
  406240:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CNDC = data;
  406242:	7afb      	ldrb	r3, [r7, #11]
  406244:	68fa      	ldr	r2, [r7, #12]
  406246:	019b      	lsls	r3, r3, #6
  406248:	4413      	add	r3, r2
  40624a:	336c      	adds	r3, #108	; 0x6c
  40624c:	687a      	ldr	r2, [r7, #4]
  40624e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406250:	bf00      	nop
  406252:	3714      	adds	r7, #20
  406254:	46bd      	mov	sp, r7
  406256:	f85d 7b04 	ldr.w	r7, [sp], #4
  40625a:	4770      	bx	lr

0040625c <hri_xdmac_write_CUBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CUBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cubc_reg_t data)
{
  40625c:	b480      	push	{r7}
  40625e:	b085      	sub	sp, #20
  406260:	af00      	add	r7, sp, #0
  406262:	60f8      	str	r0, [r7, #12]
  406264:	460b      	mov	r3, r1
  406266:	607a      	str	r2, [r7, #4]
  406268:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CUBC = data;
  40626a:	7afb      	ldrb	r3, [r7, #11]
  40626c:	68fa      	ldr	r2, [r7, #12]
  40626e:	019b      	lsls	r3, r3, #6
  406270:	4413      	add	r3, r2
  406272:	3370      	adds	r3, #112	; 0x70
  406274:	687a      	ldr	r2, [r7, #4]
  406276:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406278:	bf00      	nop
  40627a:	3714      	adds	r7, #20
  40627c:	46bd      	mov	sp, r7
  40627e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406282:	4770      	bx	lr

00406284 <hri_xdmac_write_CBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
  406284:	b480      	push	{r7}
  406286:	b085      	sub	sp, #20
  406288:	af00      	add	r7, sp, #0
  40628a:	60f8      	str	r0, [r7, #12]
  40628c:	460b      	mov	r3, r1
  40628e:	607a      	str	r2, [r7, #4]
  406290:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CBC = data;
  406292:	7afb      	ldrb	r3, [r7, #11]
  406294:	68fa      	ldr	r2, [r7, #12]
  406296:	019b      	lsls	r3, r3, #6
  406298:	4413      	add	r3, r2
  40629a:	3374      	adds	r3, #116	; 0x74
  40629c:	687a      	ldr	r2, [r7, #4]
  40629e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4062a0:	bf00      	nop
  4062a2:	3714      	adds	r7, #20
  4062a4:	46bd      	mov	sp, r7
  4062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062aa:	4770      	bx	lr

004062ac <hri_xdmac_get_CC_DWIDTH_bf>:
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_get_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index,
                                                            hri_xdmac_cc_reg_t mask)
{
  4062ac:	b480      	push	{r7}
  4062ae:	b087      	sub	sp, #28
  4062b0:	af00      	add	r7, sp, #0
  4062b2:	60f8      	str	r0, [r7, #12]
  4062b4:	460b      	mov	r3, r1
  4062b6:	607a      	str	r2, [r7, #4]
  4062b8:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  4062ba:	7afb      	ldrb	r3, [r7, #11]
  4062bc:	68fa      	ldr	r2, [r7, #12]
  4062be:	019b      	lsls	r3, r3, #6
  4062c0:	4413      	add	r3, r2
  4062c2:	3378      	adds	r3, #120	; 0x78
  4062c4:	681b      	ldr	r3, [r3, #0]
  4062c6:	617b      	str	r3, [r7, #20]
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  4062c8:	687b      	ldr	r3, [r7, #4]
  4062ca:	02da      	lsls	r2, r3, #11
  4062cc:	697b      	ldr	r3, [r7, #20]
  4062ce:	4013      	ands	r3, r2
  4062d0:	0adb      	lsrs	r3, r3, #11
  4062d2:	f003 0303 	and.w	r3, r3, #3
  4062d6:	617b      	str	r3, [r7, #20]
	return tmp;
  4062d8:	697b      	ldr	r3, [r7, #20]
}
  4062da:	4618      	mov	r0, r3
  4062dc:	371c      	adds	r7, #28
  4062de:	46bd      	mov	sp, r7
  4062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4062e4:	4770      	bx	lr

004062e6 <hri_xdmac_read_CC_DWIDTH_bf>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC ^= XDMAC_CC_DWIDTH(mask);
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_read_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index)
{
  4062e6:	b480      	push	{r7}
  4062e8:	b085      	sub	sp, #20
  4062ea:	af00      	add	r7, sp, #0
  4062ec:	6078      	str	r0, [r7, #4]
  4062ee:	460b      	mov	r3, r1
  4062f0:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  4062f2:	78fb      	ldrb	r3, [r7, #3]
  4062f4:	687a      	ldr	r2, [r7, #4]
  4062f6:	019b      	lsls	r3, r3, #6
  4062f8:	4413      	add	r3, r2
  4062fa:	3378      	adds	r3, #120	; 0x78
  4062fc:	681b      	ldr	r3, [r3, #0]
  4062fe:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & XDMAC_CC_DWIDTH_Msk) >> XDMAC_CC_DWIDTH_Pos;
  406300:	68fb      	ldr	r3, [r7, #12]
  406302:	0adb      	lsrs	r3, r3, #11
  406304:	f003 0303 	and.w	r3, r3, #3
  406308:	60fb      	str	r3, [r7, #12]
	return tmp;
  40630a:	68fb      	ldr	r3, [r7, #12]
}
  40630c:	4618      	mov	r0, r3
  40630e:	3714      	adds	r7, #20
  406310:	46bd      	mov	sp, r7
  406312:	f85d 7b04 	ldr.w	r7, [sp], #4
  406316:	4770      	bx	lr

00406318 <hri_xdmac_write_CC_SAM_bf>:
	tmp = (tmp & XDMAC_CC_SAM(mask)) >> XDMAC_CC_SAM_Pos;
	return tmp;
}

static inline void hri_xdmac_write_CC_SAM_bf(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  406318:	b480      	push	{r7}
  40631a:	b087      	sub	sp, #28
  40631c:	af00      	add	r7, sp, #0
  40631e:	60f8      	str	r0, [r7, #12]
  406320:	460b      	mov	r3, r1
  406322:	607a      	str	r2, [r7, #4]
  406324:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  406326:	7afb      	ldrb	r3, [r7, #11]
  406328:	68fa      	ldr	r2, [r7, #12]
  40632a:	019b      	lsls	r3, r3, #6
  40632c:	4413      	add	r3, r2
  40632e:	3378      	adds	r3, #120	; 0x78
  406330:	681b      	ldr	r3, [r3, #0]
  406332:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CC_SAM_Msk;
  406334:	697b      	ldr	r3, [r7, #20]
  406336:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40633a:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CC_SAM(data);
  40633c:	687b      	ldr	r3, [r7, #4]
  40633e:	041b      	lsls	r3, r3, #16
  406340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  406344:	697a      	ldr	r2, [r7, #20]
  406346:	4313      	orrs	r3, r2
  406348:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = tmp;
  40634a:	7afb      	ldrb	r3, [r7, #11]
  40634c:	68fa      	ldr	r2, [r7, #12]
  40634e:	019b      	lsls	r3, r3, #6
  406350:	4413      	add	r3, r2
  406352:	3378      	adds	r3, #120	; 0x78
  406354:	697a      	ldr	r2, [r7, #20]
  406356:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406358:	bf00      	nop
  40635a:	371c      	adds	r7, #28
  40635c:	46bd      	mov	sp, r7
  40635e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406362:	4770      	bx	lr

00406364 <hri_xdmac_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  406364:	b480      	push	{r7}
  406366:	b085      	sub	sp, #20
  406368:	af00      	add	r7, sp, #0
  40636a:	60f8      	str	r0, [r7, #12]
  40636c:	460b      	mov	r3, r1
  40636e:	607a      	str	r2, [r7, #4]
  406370:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = data;
  406372:	7afb      	ldrb	r3, [r7, #11]
  406374:	68fa      	ldr	r2, [r7, #12]
  406376:	019b      	lsls	r3, r3, #6
  406378:	4413      	add	r3, r2
  40637a:	3378      	adds	r3, #120	; 0x78
  40637c:	687a      	ldr	r2, [r7, #4]
  40637e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406380:	bf00      	nop
  406382:	3714      	adds	r7, #20
  406384:	46bd      	mov	sp, r7
  406386:	f85d 7b04 	ldr.w	r7, [sp], #4
  40638a:	4770      	bx	lr

0040638c <hri_xdmac_write_CDS_MSP_SDS_MSP_bf>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_SDS_MSP_bf(const void *const hw, uint8_t submodule_index,
                                                      hri_xdmac_cds_msp_reg_t data)
{
  40638c:	b480      	push	{r7}
  40638e:	b087      	sub	sp, #28
  406390:	af00      	add	r7, sp, #0
  406392:	60f8      	str	r0, [r7, #12]
  406394:	460b      	mov	r3, r1
  406396:	607a      	str	r2, [r7, #4]
  406398:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP;
  40639a:	7afb      	ldrb	r3, [r7, #11]
  40639c:	68fa      	ldr	r2, [r7, #12]
  40639e:	019b      	lsls	r3, r3, #6
  4063a0:	4413      	add	r3, r2
  4063a2:	337c      	adds	r3, #124	; 0x7c
  4063a4:	681b      	ldr	r3, [r3, #0]
  4063a6:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CDS_MSP_SDS_MSP_Msk;
  4063a8:	697a      	ldr	r2, [r7, #20]
  4063aa:	4b0a      	ldr	r3, [pc, #40]	; (4063d4 <hri_xdmac_write_CDS_MSP_SDS_MSP_bf+0x48>)
  4063ac:	4013      	ands	r3, r2
  4063ae:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CDS_MSP_SDS_MSP(data);
  4063b0:	687b      	ldr	r3, [r7, #4]
  4063b2:	b29b      	uxth	r3, r3
  4063b4:	697a      	ldr	r2, [r7, #20]
  4063b6:	4313      	orrs	r3, r2
  4063b8:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = tmp;
  4063ba:	7afb      	ldrb	r3, [r7, #11]
  4063bc:	68fa      	ldr	r2, [r7, #12]
  4063be:	019b      	lsls	r3, r3, #6
  4063c0:	4413      	add	r3, r2
  4063c2:	337c      	adds	r3, #124	; 0x7c
  4063c4:	697a      	ldr	r2, [r7, #20]
  4063c6:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4063c8:	bf00      	nop
  4063ca:	371c      	adds	r7, #28
  4063cc:	46bd      	mov	sp, r7
  4063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063d2:	4770      	bx	lr
  4063d4:	ffff0000 	.word	0xffff0000

004063d8 <hri_xdmac_write_CDS_MSP_reg>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_reg(const void *const hw, uint8_t submodule_index,
                                               hri_xdmac_cds_msp_reg_t data)
{
  4063d8:	b480      	push	{r7}
  4063da:	b085      	sub	sp, #20
  4063dc:	af00      	add	r7, sp, #0
  4063de:	60f8      	str	r0, [r7, #12]
  4063e0:	460b      	mov	r3, r1
  4063e2:	607a      	str	r2, [r7, #4]
  4063e4:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = data;
  4063e6:	7afb      	ldrb	r3, [r7, #11]
  4063e8:	68fa      	ldr	r2, [r7, #12]
  4063ea:	019b      	lsls	r3, r3, #6
  4063ec:	4413      	add	r3, r2
  4063ee:	337c      	adds	r3, #124	; 0x7c
  4063f0:	687a      	ldr	r2, [r7, #4]
  4063f2:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4063f4:	bf00      	nop
  4063f6:	3714      	adds	r7, #20
  4063f8:	46bd      	mov	sp, r7
  4063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063fe:	4770      	bx	lr

00406400 <hri_xdmac_write_CSUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
  406400:	b480      	push	{r7}
  406402:	b085      	sub	sp, #20
  406404:	af00      	add	r7, sp, #0
  406406:	60f8      	str	r0, [r7, #12]
  406408:	460b      	mov	r3, r1
  40640a:	607a      	str	r2, [r7, #4]
  40640c:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSUS = data;
  40640e:	7afb      	ldrb	r3, [r7, #11]
  406410:	68fa      	ldr	r2, [r7, #12]
  406412:	3302      	adds	r3, #2
  406414:	019b      	lsls	r3, r3, #6
  406416:	4413      	add	r3, r2
  406418:	687a      	ldr	r2, [r7, #4]
  40641a:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  40641c:	bf00      	nop
  40641e:	3714      	adds	r7, #20
  406420:	46bd      	mov	sp, r7
  406422:	f85d 7b04 	ldr.w	r7, [sp], #4
  406426:	4770      	bx	lr

00406428 <hri_xdmac_write_CDUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
  406428:	b480      	push	{r7}
  40642a:	b085      	sub	sp, #20
  40642c:	af00      	add	r7, sp, #0
  40642e:	60f8      	str	r0, [r7, #12]
  406430:	460b      	mov	r3, r1
  406432:	607a      	str	r2, [r7, #4]
  406434:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDUS = data;
  406436:	7afb      	ldrb	r3, [r7, #11]
  406438:	68fa      	ldr	r2, [r7, #12]
  40643a:	3302      	adds	r3, #2
  40643c:	019b      	lsls	r3, r3, #6
  40643e:	4413      	add	r3, r2
  406440:	3304      	adds	r3, #4
  406442:	687a      	ldr	r2, [r7, #4]
  406444:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  406446:	bf00      	nop
  406448:	3714      	adds	r7, #20
  40644a:	46bd      	mov	sp, r7
  40644c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406450:	4770      	bx	lr

00406452 <hri_xdmac_read_CIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
  406452:	b480      	push	{r7}
  406454:	b083      	sub	sp, #12
  406456:	af00      	add	r7, sp, #0
  406458:	6078      	str	r0, [r7, #4]
  40645a:	460b      	mov	r3, r1
  40645c:	70fb      	strb	r3, [r7, #3]
	return ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIS;
  40645e:	78fb      	ldrb	r3, [r7, #3]
  406460:	687a      	ldr	r2, [r7, #4]
  406462:	019b      	lsls	r3, r3, #6
  406464:	4413      	add	r3, r2
  406466:	335c      	adds	r3, #92	; 0x5c
  406468:	681b      	ldr	r3, [r3, #0]
}
  40646a:	4618      	mov	r0, r3
  40646c:	370c      	adds	r7, #12
  40646e:	46bd      	mov	sp, r7
  406470:	f85d 7b04 	ldr.w	r7, [sp], #4
  406474:	4770      	bx	lr

00406476 <hri_xdmac_set_GIM_reg>:
{
	((Xdmac *)hw)->XDMAC_GID = XDMAC_GIM_IM23;
}

static inline void hri_xdmac_set_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  406476:	b480      	push	{r7}
  406478:	b083      	sub	sp, #12
  40647a:	af00      	add	r7, sp, #0
  40647c:	6078      	str	r0, [r7, #4]
  40647e:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GIE = mask;
  406480:	687b      	ldr	r3, [r7, #4]
  406482:	683a      	ldr	r2, [r7, #0]
  406484:	60da      	str	r2, [r3, #12]
}
  406486:	bf00      	nop
  406488:	370c      	adds	r7, #12
  40648a:	46bd      	mov	sp, r7
  40648c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406490:	4770      	bx	lr

00406492 <hri_xdmac_clear_GIM_reg>:
	((Xdmac *)hw)->XDMAC_GIE = data;
	((Xdmac *)hw)->XDMAC_GID = ~data;
}

static inline void hri_xdmac_clear_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  406492:	b480      	push	{r7}
  406494:	b083      	sub	sp, #12
  406496:	af00      	add	r7, sp, #0
  406498:	6078      	str	r0, [r7, #4]
  40649a:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GID = mask;
  40649c:	687b      	ldr	r3, [r7, #4]
  40649e:	683a      	ldr	r2, [r7, #0]
  4064a0:	611a      	str	r2, [r3, #16]
}
  4064a2:	bf00      	nop
  4064a4:	370c      	adds	r7, #12
  4064a6:	46bd      	mov	sp, r7
  4064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064ac:	4770      	bx	lr

004064ae <hri_xdmac_set_GS_reg>:
{
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
  4064ae:	b480      	push	{r7}
  4064b0:	b083      	sub	sp, #12
  4064b2:	af00      	add	r7, sp, #0
  4064b4:	6078      	str	r0, [r7, #4]
  4064b6:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GE = mask;
  4064b8:	687b      	ldr	r3, [r7, #4]
  4064ba:	683a      	ldr	r2, [r7, #0]
  4064bc:	61da      	str	r2, [r3, #28]
}
  4064be:	bf00      	nop
  4064c0:	370c      	adds	r7, #12
  4064c2:	46bd      	mov	sp, r7
  4064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064c8:	4770      	bx	lr

004064ca <hri_xdmac_write_GSWR_reg>:
	((Xdmac *)hw)->XDMAC_GRWR = data;
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
  4064ca:	b480      	push	{r7}
  4064cc:	b083      	sub	sp, #12
  4064ce:	af00      	add	r7, sp, #0
  4064d0:	6078      	str	r0, [r7, #4]
  4064d2:	6039      	str	r1, [r7, #0]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  4064d4:	687b      	ldr	r3, [r7, #4]
  4064d6:	683a      	ldr	r2, [r7, #0]
  4064d8:	639a      	str	r2, [r3, #56]	; 0x38
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4064da:	bf00      	nop
  4064dc:	370c      	adds	r7, #12
  4064de:	46bd      	mov	sp, r7
  4064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064e4:	4770      	bx	lr

004064e6 <hri_xdmac_read_GIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_gis_reg_t hri_xdmac_read_GIS_reg(const void *const hw)
{
  4064e6:	b480      	push	{r7}
  4064e8:	b083      	sub	sp, #12
  4064ea:	af00      	add	r7, sp, #0
  4064ec:	6078      	str	r0, [r7, #4]
	return ((Xdmac *)hw)->XDMAC_GIS;
  4064ee:	687b      	ldr	r3, [r7, #4]
  4064f0:	699b      	ldr	r3, [r3, #24]
}
  4064f2:	4618      	mov	r0, r3
  4064f4:	370c      	adds	r7, #12
  4064f6:	46bd      	mov	sp, r7
  4064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4064fc:	4770      	bx	lr
	...

00406500 <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  406500:	b580      	push	{r7, lr}
  406502:	b082      	sub	sp, #8
  406504:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  406506:	2300      	movs	r3, #0
  406508:	71fb      	strb	r3, [r7, #7]
  40650a:	e007      	b.n	40651c <_dma_init+0x1c>
		hri_xdmac_read_CIS_reg(XDMAC, i);
  40650c:	79fb      	ldrb	r3, [r7, #7]
  40650e:	4619      	mov	r1, r3
  406510:	4825      	ldr	r0, [pc, #148]	; (4065a8 <_dma_init+0xa8>)
  406512:	4b26      	ldr	r3, [pc, #152]	; (4065ac <_dma_init+0xac>)
  406514:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  406516:	79fb      	ldrb	r3, [r7, #7]
  406518:	3301      	adds	r3, #1
  40651a:	71fb      	strb	r3, [r7, #7]
  40651c:	79fb      	ldrb	r3, [r7, #7]
  40651e:	2b17      	cmp	r3, #23
  406520:	d9f4      	bls.n	40650c <_dma_init+0xc>
	}
	/* Configuration Registers */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  406522:	2300      	movs	r3, #0
  406524:	71fb      	strb	r3, [r7, #7]
  406526:	e02d      	b.n	406584 <_dma_init+0x84>
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
  406528:	79fb      	ldrb	r3, [r7, #7]
  40652a:	2200      	movs	r2, #0
  40652c:	4619      	mov	r1, r3
  40652e:	481e      	ldr	r0, [pc, #120]	; (4065a8 <_dma_init+0xa8>)
  406530:	4b1f      	ldr	r3, [pc, #124]	; (4065b0 <_dma_init+0xb0>)
  406532:	4798      	blx	r3
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
  406534:	79fb      	ldrb	r3, [r7, #7]
  406536:	2200      	movs	r2, #0
  406538:	4619      	mov	r1, r3
  40653a:	481b      	ldr	r0, [pc, #108]	; (4065a8 <_dma_init+0xa8>)
  40653c:	4b1d      	ldr	r3, [pc, #116]	; (4065b4 <_dma_init+0xb4>)
  40653e:	4798      	blx	r3
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
  406540:	79fb      	ldrb	r3, [r7, #7]
  406542:	2200      	movs	r2, #0
  406544:	4619      	mov	r1, r3
  406546:	4818      	ldr	r0, [pc, #96]	; (4065a8 <_dma_init+0xa8>)
  406548:	4b1b      	ldr	r3, [pc, #108]	; (4065b8 <_dma_init+0xb8>)
  40654a:	4798      	blx	r3
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
  40654c:	79fb      	ldrb	r3, [r7, #7]
  40654e:	2200      	movs	r2, #0
  406550:	4619      	mov	r1, r3
  406552:	4815      	ldr	r0, [pc, #84]	; (4065a8 <_dma_init+0xa8>)
  406554:	4b19      	ldr	r3, [pc, #100]	; (4065bc <_dma_init+0xbc>)
  406556:	4798      	blx	r3
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  406558:	79fb      	ldrb	r3, [r7, #7]
  40655a:	4a19      	ldr	r2, [pc, #100]	; (4065c0 <_dma_init+0xc0>)
  40655c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  406560:	79fb      	ldrb	r3, [r7, #7]
  406562:	4619      	mov	r1, r3
  406564:	4810      	ldr	r0, [pc, #64]	; (4065a8 <_dma_init+0xa8>)
  406566:	4b17      	ldr	r3, [pc, #92]	; (4065c4 <_dma_init+0xc4>)
  406568:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  40656a:	79fb      	ldrb	r3, [r7, #7]
  40656c:	4a14      	ldr	r2, [pc, #80]	; (4065c0 <_dma_init+0xc0>)
  40656e:	00db      	lsls	r3, r3, #3
  406570:	4413      	add	r3, r2
  406572:	685a      	ldr	r2, [r3, #4]
  406574:	79fb      	ldrb	r3, [r7, #7]
  406576:	4619      	mov	r1, r3
  406578:	480b      	ldr	r0, [pc, #44]	; (4065a8 <_dma_init+0xa8>)
  40657a:	4b13      	ldr	r3, [pc, #76]	; (4065c8 <_dma_init+0xc8>)
  40657c:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40657e:	79fb      	ldrb	r3, [r7, #7]
  406580:	3301      	adds	r3, #1
  406582:	71fb      	strb	r3, [r7, #7]
  406584:	79fb      	ldrb	r3, [r7, #7]
  406586:	2b17      	cmp	r3, #23
  406588:	d9ce      	bls.n	406528 <_dma_init+0x28>
	}

	NVIC_DisableIRQ(XDMAC_IRQn);
  40658a:	203a      	movs	r0, #58	; 0x3a
  40658c:	4b0f      	ldr	r3, [pc, #60]	; (4065cc <_dma_init+0xcc>)
  40658e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
  406590:	203a      	movs	r0, #58	; 0x3a
  406592:	4b0f      	ldr	r3, [pc, #60]	; (4065d0 <_dma_init+0xd0>)
  406594:	4798      	blx	r3
	NVIC_EnableIRQ(XDMAC_IRQn);
  406596:	203a      	movs	r0, #58	; 0x3a
  406598:	4b0e      	ldr	r3, [pc, #56]	; (4065d4 <_dma_init+0xd4>)
  40659a:	4798      	blx	r3

	return ERR_NONE;
  40659c:	2300      	movs	r3, #0
}
  40659e:	4618      	mov	r0, r3
  4065a0:	3708      	adds	r7, #8
  4065a2:	46bd      	mov	sp, r7
  4065a4:	bd80      	pop	{r7, pc}
  4065a6:	bf00      	nop
  4065a8:	40078000 	.word	0x40078000
  4065ac:	00406453 	.word	0x00406453
  4065b0:	00406235 	.word	0x00406235
  4065b4:	00406285 	.word	0x00406285
  4065b8:	00406401 	.word	0x00406401
  4065bc:	00406429 	.word	0x00406429
  4065c0:	00406c28 	.word	0x00406c28
  4065c4:	00406365 	.word	0x00406365
  4065c8:	004063d9 	.word	0x004063d9
  4065cc:	0040612d 	.word	0x0040612d
  4065d0:	00406161 	.word	0x00406161
  4065d4:	004060f9 	.word	0x004060f9

004065d8 <_dma_set_destination_address>:

int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
  4065d8:	b580      	push	{r7, lr}
  4065da:	b082      	sub	sp, #8
  4065dc:	af00      	add	r7, sp, #0
  4065de:	4603      	mov	r3, r0
  4065e0:	6039      	str	r1, [r7, #0]
  4065e2:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);
  4065e4:	683a      	ldr	r2, [r7, #0]
  4065e6:	79fb      	ldrb	r3, [r7, #7]
  4065e8:	4619      	mov	r1, r3
  4065ea:	4804      	ldr	r0, [pc, #16]	; (4065fc <_dma_set_destination_address+0x24>)
  4065ec:	4b04      	ldr	r3, [pc, #16]	; (406600 <_dma_set_destination_address+0x28>)
  4065ee:	4798      	blx	r3

	return ERR_NONE;
  4065f0:	2300      	movs	r3, #0
}
  4065f2:	4618      	mov	r0, r3
  4065f4:	3708      	adds	r7, #8
  4065f6:	46bd      	mov	sp, r7
  4065f8:	bd80      	pop	{r7, pc}
  4065fa:	bf00      	nop
  4065fc:	40078000 	.word	0x40078000
  406600:	0040620d 	.word	0x0040620d

00406604 <_dma_set_source_address>:

int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
  406604:	b580      	push	{r7, lr}
  406606:	b082      	sub	sp, #8
  406608:	af00      	add	r7, sp, #0
  40660a:	4603      	mov	r3, r0
  40660c:	6039      	str	r1, [r7, #0]
  40660e:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);
  406610:	683a      	ldr	r2, [r7, #0]
  406612:	79fb      	ldrb	r3, [r7, #7]
  406614:	4619      	mov	r1, r3
  406616:	4804      	ldr	r0, [pc, #16]	; (406628 <_dma_set_source_address+0x24>)
  406618:	4b04      	ldr	r3, [pc, #16]	; (40662c <_dma_set_source_address+0x28>)
  40661a:	4798      	blx	r3

	return ERR_NONE;
  40661c:	2300      	movs	r3, #0
}
  40661e:	4618      	mov	r0, r3
  406620:	3708      	adds	r7, #8
  406622:	46bd      	mov	sp, r7
  406624:	bd80      	pop	{r7, pc}
  406626:	bf00      	nop
  406628:	40078000 	.word	0x40078000
  40662c:	004061e5 	.word	0x004061e5

00406630 <_dma_srcinc_enable>:

int32_t _dma_srcinc_enable(const uint8_t channel, const bool enable)
{
  406630:	b580      	push	{r7, lr}
  406632:	b082      	sub	sp, #8
  406634:	af00      	add	r7, sp, #0
  406636:	4603      	mov	r3, r0
  406638:	460a      	mov	r2, r1
  40663a:	71fb      	strb	r3, [r7, #7]
  40663c:	4613      	mov	r3, r2
  40663e:	71bb      	strb	r3, [r7, #6]
	if (!enable && (hri_xdmac_read_CC_DWIDTH_bf(XDMAC, channel) != XDMAC_CC_DWIDTH_WORD_Val)) {
  406640:	79bb      	ldrb	r3, [r7, #6]
  406642:	f083 0301 	eor.w	r3, r3, #1
  406646:	b2db      	uxtb	r3, r3
  406648:	2b00      	cmp	r3, #0
  40664a:	d015      	beq.n	406678 <_dma_srcinc_enable+0x48>
  40664c:	79fb      	ldrb	r3, [r7, #7]
  40664e:	4619      	mov	r1, r3
  406650:	480f      	ldr	r0, [pc, #60]	; (406690 <_dma_srcinc_enable+0x60>)
  406652:	4b10      	ldr	r3, [pc, #64]	; (406694 <_dma_srcinc_enable+0x64>)
  406654:	4798      	blx	r3
  406656:	4603      	mov	r3, r0
  406658:	2b02      	cmp	r3, #2
  40665a:	d00d      	beq.n	406678 <_dma_srcinc_enable+0x48>
		 * are incremented by 8-bit or 16-bit.
		 * Workaround: The user can fix the problem by setting the source addressing
		 * mode to use micro block and data striding with micro block stride set to 0 and
		 * data stride set to -1.
		 */
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, XDMAC_CC_SAM_UBS_DS_AM_Val);
  40665c:	79fb      	ldrb	r3, [r7, #7]
  40665e:	2203      	movs	r2, #3
  406660:	4619      	mov	r1, r3
  406662:	480b      	ldr	r0, [pc, #44]	; (406690 <_dma_srcinc_enable+0x60>)
  406664:	4b0c      	ldr	r3, [pc, #48]	; (406698 <_dma_srcinc_enable+0x68>)
  406666:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_SDS_MSP_bf(XDMAC, channel, (int16_t)(-1));
  406668:	79fb      	ldrb	r3, [r7, #7]
  40666a:	f04f 32ff 	mov.w	r2, #4294967295
  40666e:	4619      	mov	r1, r3
  406670:	4807      	ldr	r0, [pc, #28]	; (406690 <_dma_srcinc_enable+0x60>)
  406672:	4b0a      	ldr	r3, [pc, #40]	; (40669c <_dma_srcinc_enable+0x6c>)
  406674:	4798      	blx	r3
  406676:	e005      	b.n	406684 <_dma_srcinc_enable+0x54>
	} else {
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, enable);
  406678:	79ba      	ldrb	r2, [r7, #6]
  40667a:	79fb      	ldrb	r3, [r7, #7]
  40667c:	4619      	mov	r1, r3
  40667e:	4804      	ldr	r0, [pc, #16]	; (406690 <_dma_srcinc_enable+0x60>)
  406680:	4b05      	ldr	r3, [pc, #20]	; (406698 <_dma_srcinc_enable+0x68>)
  406682:	4798      	blx	r3
	}

	return ERR_NONE;
  406684:	2300      	movs	r3, #0
}
  406686:	4618      	mov	r0, r3
  406688:	3708      	adds	r7, #8
  40668a:	46bd      	mov	sp, r7
  40668c:	bd80      	pop	{r7, pc}
  40668e:	bf00      	nop
  406690:	40078000 	.word	0x40078000
  406694:	004062e7 	.word	0x004062e7
  406698:	00406319 	.word	0x00406319
  40669c:	0040638d 	.word	0x0040638d

004066a0 <_dma_set_data_amount>:

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
  4066a0:	b580      	push	{r7, lr}
  4066a2:	b084      	sub	sp, #16
  4066a4:	af00      	add	r7, sp, #0
  4066a6:	4603      	mov	r3, r0
  4066a8:	6039      	str	r1, [r7, #0]
  4066aa:	71fb      	strb	r3, [r7, #7]
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
  4066ac:	79fb      	ldrb	r3, [r7, #7]
  4066ae:	2203      	movs	r2, #3
  4066b0:	4619      	mov	r1, r3
  4066b2:	4809      	ldr	r0, [pc, #36]	; (4066d8 <_dma_set_data_amount+0x38>)
  4066b4:	4b09      	ldr	r3, [pc, #36]	; (4066dc <_dma_set_data_amount+0x3c>)
  4066b6:	4798      	blx	r3
  4066b8:	4603      	mov	r3, r0
  4066ba:	73fb      	strb	r3, [r7, #15]
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  4066bc:	7bfb      	ldrb	r3, [r7, #15]
  4066be:	683a      	ldr	r2, [r7, #0]
  4066c0:	40da      	lsrs	r2, r3
  4066c2:	79fb      	ldrb	r3, [r7, #7]
  4066c4:	4619      	mov	r1, r3
  4066c6:	4804      	ldr	r0, [pc, #16]	; (4066d8 <_dma_set_data_amount+0x38>)
  4066c8:	4b05      	ldr	r3, [pc, #20]	; (4066e0 <_dma_set_data_amount+0x40>)
  4066ca:	4798      	blx	r3

	return ERR_NONE;
  4066cc:	2300      	movs	r3, #0
}
  4066ce:	4618      	mov	r0, r3
  4066d0:	3710      	adds	r7, #16
  4066d2:	46bd      	mov	sp, r7
  4066d4:	bd80      	pop	{r7, pc}
  4066d6:	bf00      	nop
  4066d8:	40078000 	.word	0x40078000
  4066dc:	004062ad 	.word	0x004062ad
  4066e0:	0040625d 	.word	0x0040625d

004066e4 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
  4066e4:	b580      	push	{r7, lr}
  4066e6:	b082      	sub	sp, #8
  4066e8:	af00      	add	r7, sp, #0
  4066ea:	4603      	mov	r3, r0
  4066ec:	460a      	mov	r2, r1
  4066ee:	71fb      	strb	r3, [r7, #7]
  4066f0:	4613      	mov	r3, r2
  4066f2:	71bb      	strb	r3, [r7, #6]
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  4066f4:	79fb      	ldrb	r3, [r7, #7]
  4066f6:	2201      	movs	r2, #1
  4066f8:	fa02 f303 	lsl.w	r3, r2, r3
  4066fc:	4619      	mov	r1, r3
  4066fe:	4809      	ldr	r0, [pc, #36]	; (406724 <_dma_enable_transaction+0x40>)
  406700:	4b09      	ldr	r3, [pc, #36]	; (406728 <_dma_enable_transaction+0x44>)
  406702:	4798      	blx	r3

	if (software_trigger) {
  406704:	79bb      	ldrb	r3, [r7, #6]
  406706:	2b00      	cmp	r3, #0
  406708:	d007      	beq.n	40671a <_dma_enable_transaction+0x36>
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
  40670a:	79fb      	ldrb	r3, [r7, #7]
  40670c:	2201      	movs	r2, #1
  40670e:	fa02 f303 	lsl.w	r3, r2, r3
  406712:	4619      	mov	r1, r3
  406714:	4803      	ldr	r0, [pc, #12]	; (406724 <_dma_enable_transaction+0x40>)
  406716:	4b05      	ldr	r3, [pc, #20]	; (40672c <_dma_enable_transaction+0x48>)
  406718:	4798      	blx	r3
	}

	return ERR_NONE;
  40671a:	2300      	movs	r3, #0
}
  40671c:	4618      	mov	r0, r3
  40671e:	3708      	adds	r7, #8
  406720:	46bd      	mov	sp, r7
  406722:	bd80      	pop	{r7, pc}
  406724:	40078000 	.word	0x40078000
  406728:	004064af 	.word	0x004064af
  40672c:	004064cb 	.word	0x004064cb

00406730 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
  406730:	b480      	push	{r7}
  406732:	b083      	sub	sp, #12
  406734:	af00      	add	r7, sp, #0
  406736:	6078      	str	r0, [r7, #4]
  406738:	460b      	mov	r3, r1
  40673a:	70fb      	strb	r3, [r7, #3]
	*resource = &_resources[channel];
  40673c:	78fa      	ldrb	r2, [r7, #3]
  40673e:	4613      	mov	r3, r2
  406740:	005b      	lsls	r3, r3, #1
  406742:	4413      	add	r3, r2
  406744:	009b      	lsls	r3, r3, #2
  406746:	4a05      	ldr	r2, [pc, #20]	; (40675c <_dma_get_channel_resource+0x2c>)
  406748:	441a      	add	r2, r3
  40674a:	687b      	ldr	r3, [r7, #4]
  40674c:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  40674e:	2300      	movs	r3, #0
}
  406750:	4618      	mov	r0, r3
  406752:	370c      	adds	r7, #12
  406754:	46bd      	mov	sp, r7
  406756:	f85d 7b04 	ldr.w	r7, [sp], #4
  40675a:	4770      	bx	lr
  40675c:	204011d4 	.word	0x204011d4

00406760 <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
  406760:	b580      	push	{r7, lr}
  406762:	b082      	sub	sp, #8
  406764:	af00      	add	r7, sp, #0
  406766:	4603      	mov	r3, r0
  406768:	71fb      	strb	r3, [r7, #7]
  40676a:	460b      	mov	r3, r1
  40676c:	71bb      	strb	r3, [r7, #6]
  40676e:	4613      	mov	r3, r2
  406770:	717b      	strb	r3, [r7, #5]
	if (state) {
  406772:	797b      	ldrb	r3, [r7, #5]
  406774:	2b00      	cmp	r3, #0
  406776:	d01b      	beq.n	4067b0 <_dma_set_irq_state+0x50>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  406778:	79bb      	ldrb	r3, [r7, #6]
  40677a:	2b00      	cmp	r3, #0
  40677c:	d106      	bne.n	40678c <_dma_set_irq_state+0x2c>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
  40677e:	79fb      	ldrb	r3, [r7, #7]
  406780:	2201      	movs	r2, #1
  406782:	4619      	mov	r1, r3
  406784:	481a      	ldr	r0, [pc, #104]	; (4067f0 <_dma_set_irq_state+0x90>)
  406786:	4b1b      	ldr	r3, [pc, #108]	; (4067f4 <_dma_set_irq_state+0x94>)
  406788:	4798      	blx	r3
  40678a:	e008      	b.n	40679e <_dma_set_irq_state+0x3e>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  40678c:	79bb      	ldrb	r3, [r7, #6]
  40678e:	2b01      	cmp	r3, #1
  406790:	d105      	bne.n	40679e <_dma_set_irq_state+0x3e>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
  406792:	79fb      	ldrb	r3, [r7, #7]
  406794:	2270      	movs	r2, #112	; 0x70
  406796:	4619      	mov	r1, r3
  406798:	4815      	ldr	r0, [pc, #84]	; (4067f0 <_dma_set_irq_state+0x90>)
  40679a:	4b16      	ldr	r3, [pc, #88]	; (4067f4 <_dma_set_irq_state+0x94>)
  40679c:	4798      	blx	r3
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  40679e:	79fb      	ldrb	r3, [r7, #7]
  4067a0:	2201      	movs	r2, #1
  4067a2:	fa02 f303 	lsl.w	r3, r2, r3
  4067a6:	4619      	mov	r1, r3
  4067a8:	4811      	ldr	r0, [pc, #68]	; (4067f0 <_dma_set_irq_state+0x90>)
  4067aa:	4b13      	ldr	r3, [pc, #76]	; (4067f8 <_dma_set_irq_state+0x98>)
  4067ac:	4798      	blx	r3
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
	}
}
  4067ae:	e01a      	b.n	4067e6 <_dma_set_irq_state+0x86>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  4067b0:	79bb      	ldrb	r3, [r7, #6]
  4067b2:	2b00      	cmp	r3, #0
  4067b4:	d106      	bne.n	4067c4 <_dma_set_irq_state+0x64>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
  4067b6:	79fb      	ldrb	r3, [r7, #7]
  4067b8:	2201      	movs	r2, #1
  4067ba:	4619      	mov	r1, r3
  4067bc:	480c      	ldr	r0, [pc, #48]	; (4067f0 <_dma_set_irq_state+0x90>)
  4067be:	4b0f      	ldr	r3, [pc, #60]	; (4067fc <_dma_set_irq_state+0x9c>)
  4067c0:	4798      	blx	r3
  4067c2:	e008      	b.n	4067d6 <_dma_set_irq_state+0x76>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  4067c4:	79bb      	ldrb	r3, [r7, #6]
  4067c6:	2b01      	cmp	r3, #1
  4067c8:	d105      	bne.n	4067d6 <_dma_set_irq_state+0x76>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
  4067ca:	79fb      	ldrb	r3, [r7, #7]
  4067cc:	2270      	movs	r2, #112	; 0x70
  4067ce:	4619      	mov	r1, r3
  4067d0:	4807      	ldr	r0, [pc, #28]	; (4067f0 <_dma_set_irq_state+0x90>)
  4067d2:	4b0a      	ldr	r3, [pc, #40]	; (4067fc <_dma_set_irq_state+0x9c>)
  4067d4:	4798      	blx	r3
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  4067d6:	79fb      	ldrb	r3, [r7, #7]
  4067d8:	2201      	movs	r2, #1
  4067da:	fa02 f303 	lsl.w	r3, r2, r3
  4067de:	4619      	mov	r1, r3
  4067e0:	4803      	ldr	r0, [pc, #12]	; (4067f0 <_dma_set_irq_state+0x90>)
  4067e2:	4b07      	ldr	r3, [pc, #28]	; (406800 <_dma_set_irq_state+0xa0>)
  4067e4:	4798      	blx	r3
}
  4067e6:	bf00      	nop
  4067e8:	3708      	adds	r7, #8
  4067ea:	46bd      	mov	sp, r7
  4067ec:	bd80      	pop	{r7, pc}
  4067ee:	bf00      	nop
  4067f0:	40078000 	.word	0x40078000
  4067f4:	00406195 	.word	0x00406195
  4067f8:	00406477 	.word	0x00406477
  4067fc:	004061bd 	.word	0x004061bd
  406800:	00406493 	.word	0x00406493

00406804 <XDMAC_Handler>:

/**
 * \internal XDMAC interrupt handler
 */
void XDMAC_Handler(void)
{
  406804:	b580      	push	{r7, lr}
  406806:	b084      	sub	sp, #16
  406808:	af00      	add	r7, sp, #0
	uint32_t              status;
	struct _dma_resource *tmp_resource;
	int8_t                channel = -1;
  40680a:	23ff      	movs	r3, #255	; 0xff
  40680c:	73fb      	strb	r3, [r7, #15]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);
  40680e:	4821      	ldr	r0, [pc, #132]	; (406894 <XDMAC_Handler+0x90>)
  406810:	4b21      	ldr	r3, [pc, #132]	; (406898 <XDMAC_Handler+0x94>)
  406812:	4798      	blx	r3
  406814:	60b8      	str	r0, [r7, #8]

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  406816:	2300      	movs	r3, #0
  406818:	73bb      	strb	r3, [r7, #14]
  40681a:	e00d      	b.n	406838 <XDMAC_Handler+0x34>
		if ((pend >> i) & 1) {
  40681c:	7bbb      	ldrb	r3, [r7, #14]
  40681e:	68ba      	ldr	r2, [r7, #8]
  406820:	fa22 f303 	lsr.w	r3, r2, r3
  406824:	f003 0301 	and.w	r3, r3, #1
  406828:	2b00      	cmp	r3, #0
  40682a:	d002      	beq.n	406832 <XDMAC_Handler+0x2e>
			channel = i;
  40682c:	7bbb      	ldrb	r3, [r7, #14]
  40682e:	73fb      	strb	r3, [r7, #15]
			break;
  406830:	e005      	b.n	40683e <XDMAC_Handler+0x3a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  406832:	7bbb      	ldrb	r3, [r7, #14]
  406834:	3301      	adds	r3, #1
  406836:	73bb      	strb	r3, [r7, #14]
  406838:	7bbb      	ldrb	r3, [r7, #14]
  40683a:	2b17      	cmp	r3, #23
  40683c:	d9ee      	bls.n	40681c <XDMAC_Handler+0x18>
		}
	}

	if (channel < 0) {
  40683e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406842:	2b00      	cmp	r3, #0
  406844:	db22      	blt.n	40688c <XDMAC_Handler+0x88>
		return;
	}

	tmp_resource = &_resources[channel];
  406846:	f997 200f 	ldrsb.w	r2, [r7, #15]
  40684a:	4613      	mov	r3, r2
  40684c:	005b      	lsls	r3, r3, #1
  40684e:	4413      	add	r3, r2
  406850:	009b      	lsls	r3, r3, #2
  406852:	4a12      	ldr	r2, [pc, #72]	; (40689c <XDMAC_Handler+0x98>)
  406854:	4413      	add	r3, r2
  406856:	607b      	str	r3, [r7, #4]
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  406858:	7bfb      	ldrb	r3, [r7, #15]
  40685a:	4619      	mov	r1, r3
  40685c:	480d      	ldr	r0, [pc, #52]	; (406894 <XDMAC_Handler+0x90>)
  40685e:	4b10      	ldr	r3, [pc, #64]	; (4068a0 <XDMAC_Handler+0x9c>)
  406860:	4798      	blx	r3
  406862:	6038      	str	r0, [r7, #0]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  406864:	683b      	ldr	r3, [r7, #0]
  406866:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40686a:	2b00      	cmp	r3, #0
  40686c:	d004      	beq.n	406878 <XDMAC_Handler+0x74>
		tmp_resource->dma_cb.error(tmp_resource);
  40686e:	687b      	ldr	r3, [r7, #4]
  406870:	685b      	ldr	r3, [r3, #4]
  406872:	6878      	ldr	r0, [r7, #4]
  406874:	4798      	blx	r3
  406876:	e00a      	b.n	40688e <XDMAC_Handler+0x8a>
	} else if (status & XDMAC_CIS_BIS) {
  406878:	683b      	ldr	r3, [r7, #0]
  40687a:	f003 0301 	and.w	r3, r3, #1
  40687e:	2b00      	cmp	r3, #0
  406880:	d005      	beq.n	40688e <XDMAC_Handler+0x8a>
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  406882:	687b      	ldr	r3, [r7, #4]
  406884:	681b      	ldr	r3, [r3, #0]
  406886:	6878      	ldr	r0, [r7, #4]
  406888:	4798      	blx	r3
  40688a:	e000      	b.n	40688e <XDMAC_Handler+0x8a>
		return;
  40688c:	bf00      	nop
	}
}
  40688e:	3710      	adds	r7, #16
  406890:	46bd      	mov	sp, r7
  406892:	bd80      	pop	{r7, pc}
  406894:	40078000 	.word	0x40078000
  406898:	004064e7 	.word	0x004064e7
  40689c:	204011d4 	.word	0x204011d4
  4068a0:	00406453 	.word	0x00406453

004068a4 <hri_pio_set_ODSR_reg>:
{
  4068a4:	b480      	push	{r7}
  4068a6:	b083      	sub	sp, #12
  4068a8:	af00      	add	r7, sp, #0
  4068aa:	6078      	str	r0, [r7, #4]
  4068ac:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4068ae:	687b      	ldr	r3, [r7, #4]
  4068b0:	683a      	ldr	r2, [r7, #0]
  4068b2:	631a      	str	r2, [r3, #48]	; 0x30
}
  4068b4:	bf00      	nop
  4068b6:	370c      	adds	r7, #12
  4068b8:	46bd      	mov	sp, r7
  4068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068be:	4770      	bx	lr

004068c0 <hri_pio_clear_ODSR_reg>:
{
  4068c0:	b480      	push	{r7}
  4068c2:	b083      	sub	sp, #12
  4068c4:	af00      	add	r7, sp, #0
  4068c6:	6078      	str	r0, [r7, #4]
  4068c8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  4068ca:	687b      	ldr	r3, [r7, #4]
  4068cc:	683a      	ldr	r2, [r7, #0]
  4068ce:	635a      	str	r2, [r3, #52]	; 0x34
}
  4068d0:	bf00      	nop
  4068d2:	370c      	adds	r7, #12
  4068d4:	46bd      	mov	sp, r7
  4068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068da:	4770      	bx	lr

004068dc <port_to_reg>:
{
  4068dc:	b480      	push	{r7}
  4068de:	b083      	sub	sp, #12
  4068e0:	af00      	add	r7, sp, #0
  4068e2:	4603      	mov	r3, r0
  4068e4:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  4068e6:	79fb      	ldrb	r3, [r7, #7]
  4068e8:	025b      	lsls	r3, r3, #9
  4068ea:	461a      	mov	r2, r3
  4068ec:	4b03      	ldr	r3, [pc, #12]	; (4068fc <port_to_reg+0x20>)
  4068ee:	4413      	add	r3, r2
}
  4068f0:	4618      	mov	r0, r3
  4068f2:	370c      	adds	r7, #12
  4068f4:	46bd      	mov	sp, r7
  4068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068fa:	4770      	bx	lr
  4068fc:	400e0e00 	.word	0x400e0e00

00406900 <_gpio_set_level>:
{
  406900:	b580      	push	{r7, lr}
  406902:	b084      	sub	sp, #16
  406904:	af00      	add	r7, sp, #0
  406906:	4603      	mov	r3, r0
  406908:	6039      	str	r1, [r7, #0]
  40690a:	71fb      	strb	r3, [r7, #7]
  40690c:	4613      	mov	r3, r2
  40690e:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  406910:	79fb      	ldrb	r3, [r7, #7]
  406912:	4618      	mov	r0, r3
  406914:	4b09      	ldr	r3, [pc, #36]	; (40693c <_gpio_set_level+0x3c>)
  406916:	4798      	blx	r3
  406918:	60f8      	str	r0, [r7, #12]
	if (level) {
  40691a:	79bb      	ldrb	r3, [r7, #6]
  40691c:	2b00      	cmp	r3, #0
  40691e:	d004      	beq.n	40692a <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  406920:	6839      	ldr	r1, [r7, #0]
  406922:	68f8      	ldr	r0, [r7, #12]
  406924:	4b06      	ldr	r3, [pc, #24]	; (406940 <_gpio_set_level+0x40>)
  406926:	4798      	blx	r3
}
  406928:	e003      	b.n	406932 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  40692a:	6839      	ldr	r1, [r7, #0]
  40692c:	68f8      	ldr	r0, [r7, #12]
  40692e:	4b05      	ldr	r3, [pc, #20]	; (406944 <_gpio_set_level+0x44>)
  406930:	4798      	blx	r3
}
  406932:	bf00      	nop
  406934:	3710      	adds	r7, #16
  406936:	46bd      	mov	sp, r7
  406938:	bd80      	pop	{r7, pc}
  40693a:	bf00      	nop
  40693c:	004068dd 	.word	0x004068dd
  406940:	004068a5 	.word	0x004068a5
  406944:	004068c1 	.word	0x004068c1

00406948 <gpio_set_pin_level>:
{
  406948:	b580      	push	{r7, lr}
  40694a:	b082      	sub	sp, #8
  40694c:	af00      	add	r7, sp, #0
  40694e:	4603      	mov	r3, r0
  406950:	460a      	mov	r2, r1
  406952:	71fb      	strb	r3, [r7, #7]
  406954:	4613      	mov	r3, r2
  406956:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  406958:	79fb      	ldrb	r3, [r7, #7]
  40695a:	095b      	lsrs	r3, r3, #5
  40695c:	b2d8      	uxtb	r0, r3
  40695e:	79fb      	ldrb	r3, [r7, #7]
  406960:	f003 031f 	and.w	r3, r3, #31
  406964:	2201      	movs	r2, #1
  406966:	fa02 f303 	lsl.w	r3, r2, r3
  40696a:	79ba      	ldrb	r2, [r7, #6]
  40696c:	4619      	mov	r1, r3
  40696e:	4b03      	ldr	r3, [pc, #12]	; (40697c <gpio_set_pin_level+0x34>)
  406970:	4798      	blx	r3
}
  406972:	bf00      	nop
  406974:	3708      	adds	r7, #8
  406976:	46bd      	mov	sp, r7
  406978:	bd80      	pop	{r7, pc}
  40697a:	bf00      	nop
  40697c:	00406901 	.word	0x00406901

00406980 <main>:
#include <atmel_start.h>
#include "Glue.h"
#include "AT86_Impl.h"

int main(void)
{
  406980:	b580      	push	{r7, lr}
  406982:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  406984:	4b0c      	ldr	r3, [pc, #48]	; (4069b8 <main+0x38>)
  406986:	4798      	blx	r3
	
	glue_set_peripherals_inited();
  406988:	4b0c      	ldr	r3, [pc, #48]	; (4069bc <main+0x3c>)
  40698a:	4798      	blx	r3
	
	glue_enforce_driver_init();
  40698c:	4b0c      	ldr	r3, [pc, #48]	; (4069c0 <main+0x40>)
  40698e:	4798      	blx	r3
	
	glue_init();	
  406990:	4b0c      	ldr	r3, [pc, #48]	; (4069c4 <main+0x44>)
  406992:	4798      	blx	r3

	EXTERNAL_IRQ_0_example1();
  406994:	4b0c      	ldr	r3, [pc, #48]	; (4069c8 <main+0x48>)
  406996:	4798      	blx	r3
	
	gpio_set_pin_level(PB1, true);
  406998:	2101      	movs	r1, #1
  40699a:	2021      	movs	r0, #33	; 0x21
  40699c:	4b0b      	ldr	r3, [pc, #44]	; (4069cc <main+0x4c>)
  40699e:	4798      	blx	r3
	delay_us(100000);
  4069a0:	f248 60a0 	movw	r0, #34464	; 0x86a0
  4069a4:	4b0a      	ldr	r3, [pc, #40]	; (4069d0 <main+0x50>)
  4069a6:	4798      	blx	r3

	/* Replace with your application code */
	while (1)
	{
		asm("");
		AT86_Test_Comms(AT86_INSTANCE0);
  4069a8:	2000      	movs	r0, #0
  4069aa:	4b0a      	ldr	r3, [pc, #40]	; (4069d4 <main+0x54>)
  4069ac:	4798      	blx	r3

		
		//gpio_set_pin_pull_mode(PB0, GPIO_PULL_UP);
		//delay_us(100000);
		//gpio_set_pin_level(PB1, false);
		delay_us(100000);
  4069ae:	f248 60a0 	movw	r0, #34464	; 0x86a0
  4069b2:	4b07      	ldr	r3, [pc, #28]	; (4069d0 <main+0x50>)
  4069b4:	4798      	blx	r3
		asm("");
  4069b6:	e7f7      	b.n	4069a8 <main+0x28>
  4069b8:	0040031d 	.word	0x0040031d
  4069bc:	00400fb5 	.word	0x00400fb5
  4069c0:	00400fcd 	.word	0x00400fcd
  4069c4:	00400f29 	.word	0x00400f29
  4069c8:	004010c9 	.word	0x004010c9
  4069cc:	00406949 	.word	0x00406949
  4069d0:	004011b1 	.word	0x004011b1
  4069d4:	004002d5 	.word	0x004002d5

004069d8 <__libc_init_array>:
  4069d8:	b570      	push	{r4, r5, r6, lr}
  4069da:	4e0d      	ldr	r6, [pc, #52]	; (406a10 <__libc_init_array+0x38>)
  4069dc:	4c0d      	ldr	r4, [pc, #52]	; (406a14 <__libc_init_array+0x3c>)
  4069de:	1ba4      	subs	r4, r4, r6
  4069e0:	10a4      	asrs	r4, r4, #2
  4069e2:	2500      	movs	r5, #0
  4069e4:	42a5      	cmp	r5, r4
  4069e6:	d109      	bne.n	4069fc <__libc_init_array+0x24>
  4069e8:	4e0b      	ldr	r6, [pc, #44]	; (406a18 <__libc_init_array+0x40>)
  4069ea:	4c0c      	ldr	r4, [pc, #48]	; (406a1c <__libc_init_array+0x44>)
  4069ec:	f000 f97c 	bl	406ce8 <_init>
  4069f0:	1ba4      	subs	r4, r4, r6
  4069f2:	10a4      	asrs	r4, r4, #2
  4069f4:	2500      	movs	r5, #0
  4069f6:	42a5      	cmp	r5, r4
  4069f8:	d105      	bne.n	406a06 <__libc_init_array+0x2e>
  4069fa:	bd70      	pop	{r4, r5, r6, pc}
  4069fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  406a00:	4798      	blx	r3
  406a02:	3501      	adds	r5, #1
  406a04:	e7ee      	b.n	4069e4 <__libc_init_array+0xc>
  406a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  406a0a:	4798      	blx	r3
  406a0c:	3501      	adds	r5, #1
  406a0e:	e7f2      	b.n	4069f6 <__libc_init_array+0x1e>
  406a10:	00406cf4 	.word	0x00406cf4
  406a14:	00406cf4 	.word	0x00406cf4
  406a18:	00406cf4 	.word	0x00406cf4
  406a1c:	00406cf8 	.word	0x00406cf8

00406a20 <memcpy>:
  406a20:	b510      	push	{r4, lr}
  406a22:	1e43      	subs	r3, r0, #1
  406a24:	440a      	add	r2, r1
  406a26:	4291      	cmp	r1, r2
  406a28:	d100      	bne.n	406a2c <memcpy+0xc>
  406a2a:	bd10      	pop	{r4, pc}
  406a2c:	f811 4b01 	ldrb.w	r4, [r1], #1
  406a30:	f803 4f01 	strb.w	r4, [r3, #1]!
  406a34:	e7f7      	b.n	406a26 <memcpy+0x6>

00406a36 <memset>:
  406a36:	4402      	add	r2, r0
  406a38:	4603      	mov	r3, r0
  406a3a:	4293      	cmp	r3, r2
  406a3c:	d100      	bne.n	406a40 <memset+0xa>
  406a3e:	4770      	bx	lr
  406a40:	f803 1b01 	strb.w	r1, [r3], #1
  406a44:	e7f9      	b.n	406a3a <memset+0x4>
  406a46:	0000      	movs	r0, r0
  406a48:	682f2e2e 	.word	0x682f2e2e
  406a4c:	702f6c70 	.word	0x702f6c70
  406a50:	682f6f69 	.word	0x682f6f69
  406a54:	675f6c70 	.word	0x675f6c70
  406a58:	5f6f6970 	.word	0x5f6f6970
  406a5c:	65736162 	.word	0x65736162
  406a60:	0000682e 	.word	0x0000682e
  406a64:	682f2e2e 	.word	0x682f2e2e
  406a68:	732f6c61 	.word	0x732f6c61
  406a6c:	682f6372 	.word	0x682f6372
  406a70:	645f6c61 	.word	0x645f6c61
  406a74:	735f6361 	.word	0x735f6361
  406a78:	2e636e79 	.word	0x2e636e79
  406a7c:	00000063 	.word	0x00000063
  406a80:	682f2e2e 	.word	0x682f2e2e
  406a84:	732f6c61 	.word	0x732f6c61
  406a88:	682f6372 	.word	0x682f6372
  406a8c:	695f6c61 	.word	0x695f6c61
  406a90:	6d5f6332 	.word	0x6d5f6332
  406a94:	6e79735f 	.word	0x6e79735f
  406a98:	00632e63 	.word	0x00632e63
  406a9c:	682f2e2e 	.word	0x682f2e2e
  406aa0:	732f6c61 	.word	0x732f6c61
  406aa4:	682f6372 	.word	0x682f6372
  406aa8:	735f6c61 	.word	0x735f6c61
  406aac:	6d5f6970 	.word	0x6d5f6970
  406ab0:	616d645f 	.word	0x616d645f
  406ab4:	0000632e 	.word	0x0000632e
  406ab8:	682f2e2e 	.word	0x682f2e2e
  406abc:	732f6c61 	.word	0x732f6c61
  406ac0:	682f6372 	.word	0x682f6372
  406ac4:	755f6c61 	.word	0x755f6c61
  406ac8:	74726173 	.word	0x74726173
  406acc:	7973615f 	.word	0x7973615f
  406ad0:	632e636e 	.word	0x632e636e
  406ad4:	00000000 	.word	0x00000000
  406ad8:	682f2e2e 	.word	0x682f2e2e
  406adc:	732f6c61 	.word	0x732f6c61
  406ae0:	682f6372 	.word	0x682f6372
  406ae4:	755f6c61 	.word	0x755f6c61
  406ae8:	74726173 	.word	0x74726173
  406aec:	6e79735f 	.word	0x6e79735f
  406af0:	00632e63 	.word	0x00632e63
  406af4:	682f2e2e 	.word	0x682f2e2e
  406af8:	752f6c61 	.word	0x752f6c61
  406afc:	736c6974 	.word	0x736c6974
  406b00:	6372732f 	.word	0x6372732f
  406b04:	6974752f 	.word	0x6974752f
  406b08:	725f736c 	.word	0x725f736c
  406b0c:	62676e69 	.word	0x62676e69
  406b10:	65666675 	.word	0x65666675
  406b14:	00632e72 	.word	0x00632e72
  406b18:	682f2e2e 	.word	0x682f2e2e
  406b1c:	642f6c70 	.word	0x642f6c70
  406b20:	682f6361 	.word	0x682f6361
  406b24:	645f6c70 	.word	0x645f6c70
  406b28:	632e6361 	.word	0x632e6361
  406b2c:	00000000 	.word	0x00000000

00406b30 <_ext_irq>:
  406b30:	00000001 00000001 00000001 00000001     ................
  406b40:	00000000 00000001 00000000 682f2e2e     ............../h
  406b50:	702f6c70 682f6f69 705f6c70 655f6f69     pl/pio/hpl_pio_e
  406b60:	632e7478 00000000                       xt.c....

00406b68 <spi_regs>:
  406b68:	00000001 80000000 00000001 04960c82     ................
  406b78:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  406b88:	735f6c70 632e6970 00000000              pl_spi.c....

00406b94 <_i2cm_sync_cfgs>:
  406b94:	40018000 00000020 00000000 00000000     ...@ ...........
  406ba4:	0002baba 000249f0 4001c000 00000020     .....I.....@ ...
	...
  406bbc:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  406bcc:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  406bdc:	00000000 682f2e2e 752f6c70 2f747261     ....../hpl/uart/
  406bec:	5f6c7068 74726175 0000632e 00001000     hpl_uart.c......
  406bfc:	00000c00 00000000 00000000 00000201     ................
  406c0c:	682f2e2e 752f6c70 73686273 6c70682f     ../hpl/usbhs/hpl
  406c1c:	6273755f 632e7368 00000000              _usbhs.c....

00406c28 <_cfgs>:
  406c28:	03014011 00000000 04072001 0000ffff     .@....... ......
  406c38:	00000040 00000000 00000040 00000000     @.......@.......
  406c48:	00000040 00000000 00000040 00000000     @.......@.......
  406c58:	00000040 00000000 00000040 00000000     @.......@.......
  406c68:	00000040 00000000 00000040 00000000     @.......@.......
  406c78:	00000040 00000000 00000040 00000000     @.......@.......
  406c88:	00000040 00000000 00000040 00000000     @.......@.......
  406c98:	00000040 00000000 00000040 00000000     @.......@.......
  406ca8:	00000040 00000000 00000040 00000000     @.......@.......
  406cb8:	00000040 00000000 00000040 00000000     @.......@.......
  406cc8:	00000040 00000000 00000040 00000000     @.......@.......
  406cd8:	00000040 00000000 00000040 00000000     @.......@.......

00406ce8 <_init>:
  406ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406cea:	bf00      	nop
  406cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406cee:	bc08      	pop	{r3}
  406cf0:	469e      	mov	lr, r3
  406cf2:	4770      	bx	lr

00406cf4 <__init_array_start>:
  406cf4:	00400165 	.word	0x00400165

00406cf8 <_fini>:
  406cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406cfa:	bf00      	nop
  406cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406cfe:	bc08      	pop	{r3}
  406d00:	469e      	mov	lr, r3
  406d02:	4770      	bx	lr

00406d04 <__fini_array_start>:
  406d04:	00400141 	.word	0x00400141
