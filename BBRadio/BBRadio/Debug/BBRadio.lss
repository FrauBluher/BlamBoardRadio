
BBRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007df4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20400000  00407df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000142c  20400020  00407e14  00020020  2**2
                  ALLOC
  3 .heap         00000204  2040144c  00409240  00020020  2**0
                  ALLOC
  4 .stack        00000400  20401650  00409444  00020020  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001aed5  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000342b  00000000  00000000  0003af7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000e359  00000000  00000000  0003e3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000018f0  00000000  00000000  0004c700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001758  00000000  00000000  0004dff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036cbc  00000000  00000000  0004f748  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018b21  00000000  00000000  00086404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001023a2  00000000  00000000  0009ef25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006954  00000000  00000000  001a12c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 1a 40 20 25 0b 40 00 a9 0b 40 00 a9 0b 40 00     P.@ %.@...@...@.
  400010:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 0b 40 00 a9 0b 40 00 00 00 00 00 a9 0b 40 00     ..@...@.......@.
  40003c:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  40004c:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  40005c:	a9 0b 40 00 a9 0b 40 00 00 00 00 00 a9 0b 40 00     ..@...@.......@.
  40006c:	71 39 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     q9@...@...@...@.
  40007c:	a9 0b 40 00 81 39 40 00 a9 0b 40 00 a9 0b 40 00     ..@..9@...@...@.
  40008c:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  40009c:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  4000ac:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  4000bc:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 79 69 40 00     ..@...@...@.yi@.
	...
  4000e0:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  4000f0:	a9 0b 40 00 a9 0b 40 00 79 55 40 00 a9 0b 40 00     ..@...@.yU@...@.
  400100:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  400110:	a9 0b 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	a9 0b 40 00 a9 0b 40 00 c1 77 40 00 a9 0b 40 00     ..@...@..w@...@.
  400130:	a9 0b 40 00 a9 0b 40 00 a9 0b 40 00 a9 0b 40 00     ..@...@...@...@.
  400140:	a9 0b 40 00 a9 0b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  400150:	a9 0b 40 00                                         ..@.

00400154 <__do_global_dtors_aux>:
  400154:	b510      	push	{r4, lr}
  400156:	4c05      	ldr	r4, [pc, #20]	; (40016c <__do_global_dtors_aux+0x18>)
  400158:	7823      	ldrb	r3, [r4, #0]
  40015a:	b933      	cbnz	r3, 40016a <__do_global_dtors_aux+0x16>
  40015c:	4b04      	ldr	r3, [pc, #16]	; (400170 <__do_global_dtors_aux+0x1c>)
  40015e:	b113      	cbz	r3, 400166 <__do_global_dtors_aux+0x12>
  400160:	4804      	ldr	r0, [pc, #16]	; (400174 <__do_global_dtors_aux+0x20>)
  400162:	f3af 8000 	nop.w
  400166:	2301      	movs	r3, #1
  400168:	7023      	strb	r3, [r4, #0]
  40016a:	bd10      	pop	{r4, pc}
  40016c:	20400020 	.word	0x20400020
  400170:	00000000 	.word	0x00000000
  400174:	00407df4 	.word	0x00407df4

00400178 <frame_dummy>:
  400178:	4b0c      	ldr	r3, [pc, #48]	; (4001ac <frame_dummy+0x34>)
  40017a:	b143      	cbz	r3, 40018e <frame_dummy+0x16>
  40017c:	480c      	ldr	r0, [pc, #48]	; (4001b0 <frame_dummy+0x38>)
  40017e:	490d      	ldr	r1, [pc, #52]	; (4001b4 <frame_dummy+0x3c>)
  400180:	b510      	push	{r4, lr}
  400182:	f3af 8000 	nop.w
  400186:	480c      	ldr	r0, [pc, #48]	; (4001b8 <frame_dummy+0x40>)
  400188:	6803      	ldr	r3, [r0, #0]
  40018a:	b923      	cbnz	r3, 400196 <frame_dummy+0x1e>
  40018c:	bd10      	pop	{r4, pc}
  40018e:	480a      	ldr	r0, [pc, #40]	; (4001b8 <frame_dummy+0x40>)
  400190:	6803      	ldr	r3, [r0, #0]
  400192:	b933      	cbnz	r3, 4001a2 <frame_dummy+0x2a>
  400194:	4770      	bx	lr
  400196:	4b09      	ldr	r3, [pc, #36]	; (4001bc <frame_dummy+0x44>)
  400198:	2b00      	cmp	r3, #0
  40019a:	d0f7      	beq.n	40018c <frame_dummy+0x14>
  40019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001a0:	4718      	bx	r3
  4001a2:	4b06      	ldr	r3, [pc, #24]	; (4001bc <frame_dummy+0x44>)
  4001a4:	2b00      	cmp	r3, #0
  4001a6:	d0f5      	beq.n	400194 <frame_dummy+0x1c>
  4001a8:	4718      	bx	r3
  4001aa:	bf00      	nop
  4001ac:	00000000 	.word	0x00000000
  4001b0:	00407df4 	.word	0x00407df4
  4001b4:	20400024 	.word	0x20400024
  4001b8:	00407df4 	.word	0x00407df4
  4001bc:	00000000 	.word	0x00000000

004001c0 <AT86_Init>:
 * @pre All peripheral devices must be initialized before this function runs.
 *
 * @return     returns at86_return_codes enum values
 */
uint8_t AT86_Init(SpiDevice *spi_dev, IRQDevice *irq_dev, uint8_t atDev)
{
  4001c0:	b480      	push	{r7}
  4001c2:	b087      	sub	sp, #28
  4001c4:	af00      	add	r7, sp, #0
  4001c6:	60f8      	str	r0, [r7, #12]
  4001c8:	60b9      	str	r1, [r7, #8]
  4001ca:	4613      	mov	r3, r2
  4001cc:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *at = &Instance[atDev];
  4001ce:	79fa      	ldrb	r2, [r7, #7]
  4001d0:	4613      	mov	r3, r2
  4001d2:	005b      	lsls	r3, r3, #1
  4001d4:	4413      	add	r3, r2
  4001d6:	011b      	lsls	r3, r3, #4
  4001d8:	4a3f      	ldr	r2, [pc, #252]	; (4002d8 <AT86_Init+0x118>)
  4001da:	4413      	add	r3, r2
  4001dc:	613b      	str	r3, [r7, #16]
	
	if (spi_dev == NULL || irq_dev == NULL)
  4001de:	68fb      	ldr	r3, [r7, #12]
  4001e0:	2b00      	cmp	r3, #0
  4001e2:	d002      	beq.n	4001ea <AT86_Init+0x2a>
  4001e4:	68bb      	ldr	r3, [r7, #8]
  4001e6:	2b00      	cmp	r3, #0
  4001e8:	d101      	bne.n	4001ee <AT86_Init+0x2e>
	{
		return AT86_ERROR;
  4001ea:	2302      	movs	r3, #2
  4001ec:	e06e      	b.n	4002cc <AT86_Init+0x10c>
	}

	if (currentInstances == MAX_AT86_INSTANCES)
  4001ee:	4b3b      	ldr	r3, [pc, #236]	; (4002dc <AT86_Init+0x11c>)
  4001f0:	781b      	ldrb	r3, [r3, #0]
  4001f2:	2b03      	cmp	r3, #3
  4001f4:	d101      	bne.n	4001fa <AT86_Init+0x3a>
	{
		return AT86_ERROR;
  4001f6:	2302      	movs	r3, #2
  4001f8:	e068      	b.n	4002cc <AT86_Init+0x10c>
	}

	if (at->initialized == 1)
  4001fa:	693b      	ldr	r3, [r7, #16]
  4001fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  400200:	2b01      	cmp	r3, #1
  400202:	d101      	bne.n	400208 <AT86_Init+0x48>
	{
		return AT86_ERROR;
  400204:	2302      	movs	r3, #2
  400206:	e061      	b.n	4002cc <AT86_Init+0x10c>
	}

	// Each AT86 must have its own SPI/IRQ handlers, no doubling up.
	if (currentInstances != 0)
  400208:	4b34      	ldr	r3, [pc, #208]	; (4002dc <AT86_Init+0x11c>)
  40020a:	781b      	ldrb	r3, [r3, #0]
  40020c:	2b00      	cmp	r3, #0
  40020e:	d025      	beq.n	40025c <AT86_Init+0x9c>
	{
		uint8_t i;
		for (i = 0; i < currentInstances; i++)
  400210:	2300      	movs	r3, #0
  400212:	75fb      	strb	r3, [r7, #23]
  400214:	e01d      	b.n	400252 <AT86_Init+0x92>
		{
			if ((IRQDevice *) &(Instance[i].irqDev) == irq_dev)
  400216:	7dfa      	ldrb	r2, [r7, #23]
  400218:	4613      	mov	r3, r2
  40021a:	005b      	lsls	r3, r3, #1
  40021c:	4413      	add	r3, r2
  40021e:	011b      	lsls	r3, r3, #4
  400220:	3328      	adds	r3, #40	; 0x28
  400222:	4a2d      	ldr	r2, [pc, #180]	; (4002d8 <AT86_Init+0x118>)
  400224:	441a      	add	r2, r3
  400226:	68bb      	ldr	r3, [r7, #8]
  400228:	429a      	cmp	r2, r3
  40022a:	d101      	bne.n	400230 <AT86_Init+0x70>
			{
				return AT86_ERROR;
  40022c:	2302      	movs	r3, #2
  40022e:	e04d      	b.n	4002cc <AT86_Init+0x10c>
			}

			if ((SpiDevice *) &(Instance[i].spiDev) == spi_dev)
  400230:	7dfa      	ldrb	r2, [r7, #23]
  400232:	4613      	mov	r3, r2
  400234:	005b      	lsls	r3, r3, #1
  400236:	4413      	add	r3, r2
  400238:	011b      	lsls	r3, r3, #4
  40023a:	3320      	adds	r3, #32
  40023c:	4a26      	ldr	r2, [pc, #152]	; (4002d8 <AT86_Init+0x118>)
  40023e:	4413      	add	r3, r2
  400240:	1d1a      	adds	r2, r3, #4
  400242:	68fb      	ldr	r3, [r7, #12]
  400244:	429a      	cmp	r2, r3
  400246:	d101      	bne.n	40024c <AT86_Init+0x8c>
			{
				return AT86_ERROR;
  400248:	2302      	movs	r3, #2
  40024a:	e03f      	b.n	4002cc <AT86_Init+0x10c>
		for (i = 0; i < currentInstances; i++)
  40024c:	7dfb      	ldrb	r3, [r7, #23]
  40024e:	3301      	adds	r3, #1
  400250:	75fb      	strb	r3, [r7, #23]
  400252:	4b22      	ldr	r3, [pc, #136]	; (4002dc <AT86_Init+0x11c>)
  400254:	781b      	ldrb	r3, [r3, #0]
  400256:	7dfa      	ldrb	r2, [r7, #23]
  400258:	429a      	cmp	r2, r3
  40025a:	d3dc      	bcc.n	400216 <AT86_Init+0x56>
			}
		}
	}
	
	currentInstances++;
  40025c:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <AT86_Init+0x11c>)
  40025e:	781b      	ldrb	r3, [r3, #0]
  400260:	3301      	adds	r3, #1
  400262:	b2da      	uxtb	r2, r3
  400264:	4b1d      	ldr	r3, [pc, #116]	; (4002dc <AT86_Init+0x11c>)
  400266:	701a      	strb	r2, [r3, #0]

	at->baseband_2400.baseband_state = AFE_STATE_POWER_OFF;
  400268:	693b      	ldr	r3, [r7, #16]
  40026a:	2200      	movs	r2, #0
  40026c:	741a      	strb	r2, [r3, #16]
	at->baseband_900.baseband_state = AFE_STATE_POWER_OFF;
  40026e:	693b      	ldr	r3, [r7, #16]
  400270:	2200      	movs	r2, #0
  400272:	701a      	strb	r2, [r3, #0]
	at->at86_state = AT86_STATE_INIT;
  400274:	693b      	ldr	r3, [r7, #16]
  400276:	2200      	movs	r2, #0
  400278:	f883 2020 	strb.w	r2, [r3, #32]

	at->baseband_900.lastIRQ = 0;
  40027c:	693b      	ldr	r3, [r7, #16]
  40027e:	2200      	movs	r2, #0
  400280:	809a      	strh	r2, [r3, #4]
	at->baseband_2400.lastIRQ = 0;
  400282:	693b      	ldr	r3, [r7, #16]
  400284:	2200      	movs	r2, #0
  400286:	829a      	strh	r2, [r3, #20]

	at->baseband_2400.CSMA_EN = 0;
  400288:	693b      	ldr	r3, [r7, #16]
  40028a:	2200      	movs	r2, #0
  40028c:	759a      	strb	r2, [r3, #22]
	at->baseband_900.CSMA_EN = 0;
  40028e:	693b      	ldr	r3, [r7, #16]
  400290:	2200      	movs	r2, #0
  400292:	719a      	strb	r2, [r3, #6]
	
	at->baseband_2400.channel_power_assesment = 1; // Special baseband state.
  400294:	693b      	ldr	r3, [r7, #16]
  400296:	2201      	movs	r2, #1
  400298:	75da      	strb	r2, [r3, #23]
	at->baseband_900.channel_power_assesment = 1; // Special baseband state.
  40029a:	693b      	ldr	r3, [r7, #16]
  40029c:	2201      	movs	r2, #1
  40029e:	71da      	strb	r2, [r3, #7]

	at->baseband_900.parent = at;
  4002a0:	693b      	ldr	r3, [r7, #16]
  4002a2:	693a      	ldr	r2, [r7, #16]
  4002a4:	60da      	str	r2, [r3, #12]
	at->baseband_2400.parent = at;
  4002a6:	693b      	ldr	r3, [r7, #16]
  4002a8:	693a      	ldr	r2, [r7, #16]
  4002aa:	61da      	str	r2, [r3, #28]

	//We set the peripheral interface associated with the driver here
	irq_dev->deviceDriver = (void *) at;
  4002ac:	68bb      	ldr	r3, [r7, #8]
  4002ae:	693a      	ldr	r2, [r7, #16]
  4002b0:	605a      	str	r2, [r3, #4]
	spi_dev->deviceDriver = (void *) at;
  4002b2:	68fb      	ldr	r3, [r7, #12]
  4002b4:	693a      	ldr	r2, [r7, #16]
  4002b6:	605a      	str	r2, [r3, #4]
	
	//Set the devices here.
	at->irqDev = irq_dev;
  4002b8:	693b      	ldr	r3, [r7, #16]
  4002ba:	68ba      	ldr	r2, [r7, #8]
  4002bc:	629a      	str	r2, [r3, #40]	; 0x28
	at->spiDev = spi_dev;
  4002be:	693b      	ldr	r3, [r7, #16]
  4002c0:	68fa      	ldr	r2, [r7, #12]
  4002c2:	625a      	str	r2, [r3, #36]	; 0x24

	//This is most definitely wrong.
	irq_dev->callback = (void *)(AT86_IRQ_Handler);
  4002c4:	68bb      	ldr	r3, [r7, #8]
  4002c6:	4a06      	ldr	r2, [pc, #24]	; (4002e0 <AT86_Init+0x120>)
  4002c8:	609a      	str	r2, [r3, #8]

	return AT86_OK;
  4002ca:	2300      	movs	r3, #0
}
  4002cc:	4618      	mov	r0, r3
  4002ce:	371c      	adds	r7, #28
  4002d0:	46bd      	mov	sp, r7
  4002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d6:	4770      	bx	lr
  4002d8:	2040003c 	.word	0x2040003c
  4002dc:	204000cc 	.word	0x204000cc
  4002e0:	00400a25 	.word	0x00400a25

004002e4 <AT86_Tick>:

uint8_t AT86_Tick(uint8_t atDev)
{
  4002e4:	b590      	push	{r4, r7, lr}
  4002e6:	b085      	sub	sp, #20
  4002e8:	af00      	add	r7, sp, #0
  4002ea:	4603      	mov	r3, r0
  4002ec:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *at = &Instance[atDev];
  4002ee:	79fa      	ldrb	r2, [r7, #7]
  4002f0:	4613      	mov	r3, r2
  4002f2:	005b      	lsls	r3, r3, #1
  4002f4:	4413      	add	r3, r2
  4002f6:	011b      	lsls	r3, r3, #4
  4002f8:	4a79      	ldr	r2, [pc, #484]	; (4004e0 <AT86_Tick+0x1fc>)
  4002fa:	4413      	add	r3, r2
  4002fc:	60fb      	str	r3, [r7, #12]
	
	if (at->at86_state != AT86_STATE_INIT)
  4002fe:	68fb      	ldr	r3, [r7, #12]
  400300:	f893 3020 	ldrb.w	r3, [r3, #32]
  400304:	2b00      	cmp	r3, #0
  400306:	d02e      	beq.n	400366 <AT86_Tick+0x82>
	{
		//RFn_STATE to check state.
		txBuf[0] = 0x01;
  400308:	4b76      	ldr	r3, [pc, #472]	; (4004e4 <AT86_Tick+0x200>)
  40030a:	2201      	movs	r2, #1
  40030c:	701a      	strb	r2, [r3, #0]
		txBuf[1] = 0x02;
  40030e:	4b75      	ldr	r3, [pc, #468]	; (4004e4 <AT86_Tick+0x200>)
  400310:	2202      	movs	r2, #2
  400312:	705a      	strb	r2, [r3, #1]
		//Just read from 0's for status.
		glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 10);
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400318:	230a      	movs	r3, #10
  40031a:	4a73      	ldr	r2, [pc, #460]	; (4004e8 <AT86_Tick+0x204>)
  40031c:	4971      	ldr	r1, [pc, #452]	; (4004e4 <AT86_Tick+0x200>)
  40031e:	4c73      	ldr	r4, [pc, #460]	; (4004ec <AT86_Tick+0x208>)
  400320:	47a0      	blx	r4
		while(glue_spi_in_process(at->spiDev));
  400322:	bf00      	nop
  400324:	68fb      	ldr	r3, [r7, #12]
  400326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400328:	4618      	mov	r0, r3
  40032a:	4b71      	ldr	r3, [pc, #452]	; (4004f0 <AT86_Tick+0x20c>)
  40032c:	4798      	blx	r3
  40032e:	4603      	mov	r3, r0
  400330:	2b00      	cmp	r3, #0
  400332:	d1f7      	bne.n	400324 <AT86_Tick+0x40>
	
		txBuf[0] = 0x02;
  400334:	4b6b      	ldr	r3, [pc, #428]	; (4004e4 <AT86_Tick+0x200>)
  400336:	2202      	movs	r2, #2
  400338:	701a      	strb	r2, [r3, #0]
		txBuf[1] = 0x02;
  40033a:	4b6a      	ldr	r3, [pc, #424]	; (4004e4 <AT86_Tick+0x200>)
  40033c:	2202      	movs	r2, #2
  40033e:	705a      	strb	r2, [r3, #1]
		txBuf[2] = 0x00;
  400340:	4b68      	ldr	r3, [pc, #416]	; (4004e4 <AT86_Tick+0x200>)
  400342:	2200      	movs	r2, #0
  400344:	709a      	strb	r2, [r3, #2]
		//Just read from 0's for status.
		glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 10);
  400346:	68fb      	ldr	r3, [r7, #12]
  400348:	6a58      	ldr	r0, [r3, #36]	; 0x24
  40034a:	230a      	movs	r3, #10
  40034c:	4a66      	ldr	r2, [pc, #408]	; (4004e8 <AT86_Tick+0x204>)
  40034e:	4965      	ldr	r1, [pc, #404]	; (4004e4 <AT86_Tick+0x200>)
  400350:	4c66      	ldr	r4, [pc, #408]	; (4004ec <AT86_Tick+0x208>)
  400352:	47a0      	blx	r4
		while(glue_spi_in_process(at->spiDev));
  400354:	bf00      	nop
  400356:	68fb      	ldr	r3, [r7, #12]
  400358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40035a:	4618      	mov	r0, r3
  40035c:	4b64      	ldr	r3, [pc, #400]	; (4004f0 <AT86_Tick+0x20c>)
  40035e:	4798      	blx	r3
  400360:	4603      	mov	r3, r0
  400362:	2b00      	cmp	r3, #0
  400364:	d1f7      	bne.n	400356 <AT86_Tick+0x72>
	}
	
	if (interruptCounts > 0)
  400366:	4b63      	ldr	r3, [pc, #396]	; (4004f4 <AT86_Tick+0x210>)
  400368:	881b      	ldrh	r3, [r3, #0]
  40036a:	b29b      	uxth	r3, r3
  40036c:	2b00      	cmp	r3, #0
  40036e:	f000 80ad 	beq.w	4004cc <AT86_Tick+0x1e8>
	{
		txBuf[0] = 0;
  400372:	4b5c      	ldr	r3, [pc, #368]	; (4004e4 <AT86_Tick+0x200>)
  400374:	2200      	movs	r2, #0
  400376:	701a      	strb	r2, [r3, #0]
		txBuf[1] = 0;
  400378:	4b5a      	ldr	r3, [pc, #360]	; (4004e4 <AT86_Tick+0x200>)
  40037a:	2200      	movs	r2, #0
  40037c:	705a      	strb	r2, [r3, #1]
		txBuf[2] = 0;
  40037e:	4b59      	ldr	r3, [pc, #356]	; (4004e4 <AT86_Tick+0x200>)
  400380:	2200      	movs	r2, #0
  400382:	709a      	strb	r2, [r3, #2]
		//Just read from 0's for status.
		glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 8);
  400384:	68fb      	ldr	r3, [r7, #12]
  400386:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400388:	2308      	movs	r3, #8
  40038a:	4a57      	ldr	r2, [pc, #348]	; (4004e8 <AT86_Tick+0x204>)
  40038c:	4955      	ldr	r1, [pc, #340]	; (4004e4 <AT86_Tick+0x200>)
  40038e:	4c57      	ldr	r4, [pc, #348]	; (4004ec <AT86_Tick+0x208>)
  400390:	47a0      	blx	r4
		//TODO: Go do something else while we wait for the SPI/DMA to finish
		while(glue_spi_in_process(at->spiDev));
  400392:	bf00      	nop
  400394:	68fb      	ldr	r3, [r7, #12]
  400396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400398:	4618      	mov	r0, r3
  40039a:	4b55      	ldr	r3, [pc, #340]	; (4004f0 <AT86_Tick+0x20c>)
  40039c:	4798      	blx	r3
  40039e:	4603      	mov	r3, r0
  4003a0:	2b00      	cmp	r3, #0
  4003a2:	d1f7      	bne.n	400394 <AT86_Tick+0xb0>
		
		if (rxBuf[0] == 0x00 && rxBuf[1] == 0x00)
  4003a4:	4b50      	ldr	r3, [pc, #320]	; (4004e8 <AT86_Tick+0x204>)
  4003a6:	781b      	ldrb	r3, [r3, #0]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d142      	bne.n	400432 <AT86_Tick+0x14e>
  4003ac:	4b4e      	ldr	r3, [pc, #312]	; (4004e8 <AT86_Tick+0x204>)
  4003ae:	785b      	ldrb	r3, [r3, #1]
  4003b0:	2b00      	cmp	r3, #0
  4003b2:	d13e      	bne.n	400432 <AT86_Tick+0x14e>
		{
			if (rxBuf[2] != 0x00 || rxBuf[4] != 0x00)
  4003b4:	4b4c      	ldr	r3, [pc, #304]	; (4004e8 <AT86_Tick+0x204>)
  4003b6:	789b      	ldrb	r3, [r3, #2]
  4003b8:	2b00      	cmp	r3, #0
  4003ba:	d103      	bne.n	4003c4 <AT86_Tick+0xe0>
  4003bc:	4b4a      	ldr	r3, [pc, #296]	; (4004e8 <AT86_Tick+0x204>)
  4003be:	791b      	ldrb	r3, [r3, #4]
  4003c0:	2b00      	cmp	r3, #0
  4003c2:	d016      	beq.n	4003f2 <AT86_Tick+0x10e>
			{
				at->baseband_900.lastIRQ = (rxBuf[2] << 8) & 0xFF00;
  4003c4:	4b48      	ldr	r3, [pc, #288]	; (4004e8 <AT86_Tick+0x204>)
  4003c6:	789b      	ldrb	r3, [r3, #2]
  4003c8:	021b      	lsls	r3, r3, #8
  4003ca:	b29a      	uxth	r2, r3
  4003cc:	68fb      	ldr	r3, [r7, #12]
  4003ce:	809a      	strh	r2, [r3, #4]
				at->baseband_900.lastIRQ &= rxBuf[4] | 0xFF00;
  4003d0:	68fb      	ldr	r3, [r7, #12]
  4003d2:	889b      	ldrh	r3, [r3, #4]
  4003d4:	b21a      	sxth	r2, r3
  4003d6:	4b44      	ldr	r3, [pc, #272]	; (4004e8 <AT86_Tick+0x204>)
  4003d8:	791b      	ldrb	r3, [r3, #4]
  4003da:	b21b      	sxth	r3, r3
  4003dc:	f063 03ff 	orn	r3, r3, #255	; 0xff
  4003e0:	b21b      	sxth	r3, r3
  4003e2:	4013      	ands	r3, r2
  4003e4:	b21b      	sxth	r3, r3
  4003e6:	b29a      	uxth	r2, r3
  4003e8:	68fb      	ldr	r3, [r7, #12]
  4003ea:	809a      	strh	r2, [r3, #4]
				at->baseband_900.gotIRQ = 1;
  4003ec:	68fb      	ldr	r3, [r7, #12]
  4003ee:	2201      	movs	r2, #1
  4003f0:	705a      	strb	r2, [r3, #1]
			}
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  4003f2:	4b3d      	ldr	r3, [pc, #244]	; (4004e8 <AT86_Tick+0x204>)
  4003f4:	78db      	ldrb	r3, [r3, #3]
  4003f6:	2b00      	cmp	r3, #0
  4003f8:	d103      	bne.n	400402 <AT86_Tick+0x11e>
  4003fa:	4b3b      	ldr	r3, [pc, #236]	; (4004e8 <AT86_Tick+0x204>)
  4003fc:	795b      	ldrb	r3, [r3, #5]
  4003fe:	2b00      	cmp	r3, #0
  400400:	d05e      	beq.n	4004c0 <AT86_Tick+0x1dc>
			{
				at->baseband_2400.lastIRQ = (rxBuf[3] << 8) & 0xFF00;
  400402:	4b39      	ldr	r3, [pc, #228]	; (4004e8 <AT86_Tick+0x204>)
  400404:	78db      	ldrb	r3, [r3, #3]
  400406:	021b      	lsls	r3, r3, #8
  400408:	b29a      	uxth	r2, r3
  40040a:	68fb      	ldr	r3, [r7, #12]
  40040c:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.lastIRQ &= rxBuf[5] | 0xFF00;
  40040e:	68fb      	ldr	r3, [r7, #12]
  400410:	8a9b      	ldrh	r3, [r3, #20]
  400412:	b21a      	sxth	r2, r3
  400414:	4b34      	ldr	r3, [pc, #208]	; (4004e8 <AT86_Tick+0x204>)
  400416:	795b      	ldrb	r3, [r3, #5]
  400418:	b21b      	sxth	r3, r3
  40041a:	f063 03ff 	orn	r3, r3, #255	; 0xff
  40041e:	b21b      	sxth	r3, r3
  400420:	4013      	ands	r3, r2
  400422:	b21b      	sxth	r3, r3
  400424:	b29a      	uxth	r2, r3
  400426:	68fb      	ldr	r3, [r7, #12]
  400428:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.gotIRQ = 1;
  40042a:	68fb      	ldr	r3, [r7, #12]
  40042c:	2201      	movs	r2, #1
  40042e:	745a      	strb	r2, [r3, #17]
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  400430:	e046      	b.n	4004c0 <AT86_Tick+0x1dc>
			}
		}
		else if (rxBuf[1] == 0x00 && rxBuf[2] == 0x00)
  400432:	4b2d      	ldr	r3, [pc, #180]	; (4004e8 <AT86_Tick+0x204>)
  400434:	785b      	ldrb	r3, [r3, #1]
  400436:	2b00      	cmp	r3, #0
  400438:	d143      	bne.n	4004c2 <AT86_Tick+0x1de>
  40043a:	4b2b      	ldr	r3, [pc, #172]	; (4004e8 <AT86_Tick+0x204>)
  40043c:	789b      	ldrb	r3, [r3, #2]
  40043e:	2b00      	cmp	r3, #0
  400440:	d13f      	bne.n	4004c2 <AT86_Tick+0x1de>
		{
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  400442:	4b29      	ldr	r3, [pc, #164]	; (4004e8 <AT86_Tick+0x204>)
  400444:	78db      	ldrb	r3, [r3, #3]
  400446:	2b00      	cmp	r3, #0
  400448:	d103      	bne.n	400452 <AT86_Tick+0x16e>
  40044a:	4b27      	ldr	r3, [pc, #156]	; (4004e8 <AT86_Tick+0x204>)
  40044c:	795b      	ldrb	r3, [r3, #5]
  40044e:	2b00      	cmp	r3, #0
  400450:	d016      	beq.n	400480 <AT86_Tick+0x19c>
			{
				at->baseband_900.lastIRQ = (rxBuf[3] << 8) & 0xFF00;
  400452:	4b25      	ldr	r3, [pc, #148]	; (4004e8 <AT86_Tick+0x204>)
  400454:	78db      	ldrb	r3, [r3, #3]
  400456:	021b      	lsls	r3, r3, #8
  400458:	b29a      	uxth	r2, r3
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	809a      	strh	r2, [r3, #4]
				at->baseband_900.lastIRQ &= rxBuf[5] | 0xFF00;
  40045e:	68fb      	ldr	r3, [r7, #12]
  400460:	889b      	ldrh	r3, [r3, #4]
  400462:	b21a      	sxth	r2, r3
  400464:	4b20      	ldr	r3, [pc, #128]	; (4004e8 <AT86_Tick+0x204>)
  400466:	795b      	ldrb	r3, [r3, #5]
  400468:	b21b      	sxth	r3, r3
  40046a:	f063 03ff 	orn	r3, r3, #255	; 0xff
  40046e:	b21b      	sxth	r3, r3
  400470:	4013      	ands	r3, r2
  400472:	b21b      	sxth	r3, r3
  400474:	b29a      	uxth	r2, r3
  400476:	68fb      	ldr	r3, [r7, #12]
  400478:	809a      	strh	r2, [r3, #4]
				at->baseband_900.gotIRQ = 1;
  40047a:	68fb      	ldr	r3, [r7, #12]
  40047c:	2201      	movs	r2, #1
  40047e:	705a      	strb	r2, [r3, #1]
			}
			if (rxBuf[4] != 0x00 || rxBuf[6] != 0x00)
  400480:	4b19      	ldr	r3, [pc, #100]	; (4004e8 <AT86_Tick+0x204>)
  400482:	791b      	ldrb	r3, [r3, #4]
  400484:	2b00      	cmp	r3, #0
  400486:	d103      	bne.n	400490 <AT86_Tick+0x1ac>
  400488:	4b17      	ldr	r3, [pc, #92]	; (4004e8 <AT86_Tick+0x204>)
  40048a:	799b      	ldrb	r3, [r3, #6]
  40048c:	2b00      	cmp	r3, #0
  40048e:	d018      	beq.n	4004c2 <AT86_Tick+0x1de>
			{
				at->baseband_2400.lastIRQ = (rxBuf[4] << 8) & 0xFF00;
  400490:	4b15      	ldr	r3, [pc, #84]	; (4004e8 <AT86_Tick+0x204>)
  400492:	791b      	ldrb	r3, [r3, #4]
  400494:	021b      	lsls	r3, r3, #8
  400496:	b29a      	uxth	r2, r3
  400498:	68fb      	ldr	r3, [r7, #12]
  40049a:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.lastIRQ &= rxBuf[6] | 0xFF00;
  40049c:	68fb      	ldr	r3, [r7, #12]
  40049e:	8a9b      	ldrh	r3, [r3, #20]
  4004a0:	b21a      	sxth	r2, r3
  4004a2:	4b11      	ldr	r3, [pc, #68]	; (4004e8 <AT86_Tick+0x204>)
  4004a4:	799b      	ldrb	r3, [r3, #6]
  4004a6:	b21b      	sxth	r3, r3
  4004a8:	f063 03ff 	orn	r3, r3, #255	; 0xff
  4004ac:	b21b      	sxth	r3, r3
  4004ae:	4013      	ands	r3, r2
  4004b0:	b21b      	sxth	r3, r3
  4004b2:	b29a      	uxth	r2, r3
  4004b4:	68fb      	ldr	r3, [r7, #12]
  4004b6:	829a      	strh	r2, [r3, #20]
				at->baseband_2400.gotIRQ = 1;
  4004b8:	68fb      	ldr	r3, [r7, #12]
  4004ba:	2201      	movs	r2, #1
  4004bc:	745a      	strb	r2, [r3, #17]
  4004be:	e000      	b.n	4004c2 <AT86_Tick+0x1de>
			if (rxBuf[3] != 0x00 || rxBuf[5] != 0x00)
  4004c0:	bf00      	nop
		else
		{
			//Something bad happened...
		}

		uint8_t i = 0;
  4004c2:	2300      	movs	r3, #0
  4004c4:	72fb      	strb	r3, [r7, #11]
		interruptCounts = 0;
  4004c6:	4b0b      	ldr	r3, [pc, #44]	; (4004f4 <AT86_Tick+0x210>)
  4004c8:	2200      	movs	r2, #0
  4004ca:	801a      	strh	r2, [r3, #0]
	}
	
	//TODO: Check current BB state against actual state in register.
	
	AT86_FSM(atDev);
  4004cc:	79fb      	ldrb	r3, [r7, #7]
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b09      	ldr	r3, [pc, #36]	; (4004f8 <AT86_Tick+0x214>)
  4004d2:	4798      	blx	r3
	
	return(AT86_OK);
  4004d4:	2300      	movs	r3, #0
}
  4004d6:	4618      	mov	r0, r3
  4004d8:	3714      	adds	r7, #20
  4004da:	46bd      	mov	sp, r7
  4004dc:	bd90      	pop	{r4, r7, pc}
  4004de:	bf00      	nop
  4004e0:	2040003c 	.word	0x2040003c
  4004e4:	204000d0 	.word	0x204000d0
  4004e8:	204008d0 	.word	0x204008d0
  4004ec:	00401ac9 	.word	0x00401ac9
  4004f0:	00401b1d 	.word	0x00401b1d
  4004f4:	204000ce 	.word	0x204000ce
  4004f8:	004004fd 	.word	0x004004fd

004004fc <AT86_FSM>:
 * This function should be thought of as the high-level controller that deals
 * with data buffers/IRQs, etc.  All of the TX/RX state handling happens in the
 * baseband fsms.
 */
uint8_t AT86_FSM(uint8_t atDevNum)
{
  4004fc:	b590      	push	{r4, r7, lr}
  4004fe:	b085      	sub	sp, #20
  400500:	af00      	add	r7, sp, #0
  400502:	4603      	mov	r3, r0
  400504:	71fb      	strb	r3, [r7, #7]
	AT86_Instance *atDev = &Instance[atDevNum];
  400506:	79fa      	ldrb	r2, [r7, #7]
  400508:	4613      	mov	r3, r2
  40050a:	005b      	lsls	r3, r3, #1
  40050c:	4413      	add	r3, r2
  40050e:	011b      	lsls	r3, r3, #4
  400510:	4a60      	ldr	r2, [pc, #384]	; (400694 <AT86_FSM+0x198>)
  400512:	4413      	add	r3, r2
  400514:	60fb      	str	r3, [r7, #12]
	
	//TODO: Break until we get the first ext interrupt indicating TXRDY.
	switch (atDev->at86_state)
  400516:	68fb      	ldr	r3, [r7, #12]
  400518:	f893 3020 	ldrb.w	r3, [r3, #32]
  40051c:	2b04      	cmp	r3, #4
  40051e:	f200 80b2 	bhi.w	400686 <AT86_FSM+0x18a>
  400522:	a201      	add	r2, pc, #4	; (adr r2, 400528 <AT86_FSM+0x2c>)
  400524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400528:	0040053d 	.word	0x0040053d
  40052c:	004005d5 	.word	0x004005d5
  400530:	00400635 	.word	0x00400635
  400534:	00400647 	.word	0x00400647
  400538:	0040065b 	.word	0x0040065b
	{
		case (AT86_STATE_INIT):
		
			// Turn off fast oscillator startup.
			// 0x0009 << 0x00
			AT86_write_reg(0x0009, 0x1D, atDev);
  40053c:	68fa      	ldr	r2, [r7, #12]
  40053e:	211d      	movs	r1, #29
  400540:	2009      	movs	r0, #9
  400542:	4b55      	ldr	r3, [pc, #340]	; (400698 <AT86_FSM+0x19c>)
  400544:	4798      	blx	r3
			
			// Turn off CLKO
			// 0x0007 << 0x08
			AT86_write_reg(0x0007, 0x08, atDev);
  400546:	68fa      	ldr	r2, [r7, #12]
  400548:	2108      	movs	r1, #8
  40054a:	2007      	movs	r0, #7
  40054c:	4b52      	ldr	r3, [pc, #328]	; (400698 <AT86_FSM+0x19c>)
  40054e:	4798      	blx	r3
			// Bit 4 - Transmitter frame end (TXFE) X
			// Bit 3 - Receiver extended match (RXEM)
			// Bit 2 - Receiver address match (RXAM)
			// Bit 1 - Receiver frame end interrupt (RXFE) X
			// Bit 0 - Receiver frame start interrupt (RXFS)
			AT86_write_reg(0x0300, 0x12, atDev);
  400550:	68fa      	ldr	r2, [r7, #12]
  400552:	2112      	movs	r1, #18
  400554:	f44f 7040 	mov.w	r0, #768	; 0x300
  400558:	4b4f      	ldr	r3, [pc, #316]	; (400698 <AT86_FSM+0x19c>)
  40055a:	4798      	blx	r3
			// Bit 4 - IRQM.TRXERR: Transceiver Error Interrupt Mask X
			// Bit 3 - IRQM.BATLOW: Battery Low Interrupt Mask
			// Bit 2 - IRQM.EDC: Energy Detection Completion Interrupt Mask
			// Bit 1 - IRQM.TRXRDY: Transceiver Ready Interrupt Mask X
			// Bit 0 - IRQM.WAKEUP: Wake-up / Reset Interrupt Mask
			AT86_write_reg(0x0100, 0x1F, atDev);
  40055c:	68fa      	ldr	r2, [r7, #12]
  40055e:	211f      	movs	r1, #31
  400560:	f44f 7080 	mov.w	r0, #256	; 0x100
  400564:	4b4c      	ldr	r3, [pc, #304]	; (400698 <AT86_FSM+0x19c>)
  400566:	4798      	blx	r3
			// Bit 4 - Transmitter frame end (TXFE) X
			// Bit 3 - Receiver extended match (RXEM)
			// Bit 2 - Receiver address match (RXAM)
			// Bit 1 - Receiver frame end interrupt (RXFE) X
			// Bit 0 - Receiver frame start interrupt (RXFS)
			AT86_write_reg(0x0400, 0x12, atDev);
  400568:	68fa      	ldr	r2, [r7, #12]
  40056a:	2112      	movs	r1, #18
  40056c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400570:	4b49      	ldr	r3, [pc, #292]	; (400698 <AT86_FSM+0x19c>)
  400572:	4798      	blx	r3
			// Bit 4 - IRQM.TRXERR: Transceiver Error Interrupt Mask X
			// Bit 3 - IRQM.BATLOW: Battery Low Interrupt Mask
			// Bit 2 - IRQM.EDC: Energy Detection Completion Interrupt Mask
			// Bit 1 - IRQM.TRXRDY: Transceiver Ready Interrupt Mask X
			// Bit 0 - IRQM.WAKEUP: Wake-up / Reset Interrupt Mask
			AT86_write_reg(0x0200, 0x1F, atDev);
  400574:	68fa      	ldr	r2, [r7, #12]
  400576:	211f      	movs	r1, #31
  400578:	f44f 7000 	mov.w	r0, #512	; 0x200
  40057c:	4b46      	ldr	r3, [pc, #280]	; (400698 <AT86_FSM+0x19c>)
  40057e:	4798      	blx	r3
			//0x0214 //24
			
			//Set center frequency for 2.4Ghz to 2427 center.
			//0x90D8
			//CNM = 0
			AT86_write_reg(RF24_CCF0H, 0x90, atDev);
  400580:	68fa      	ldr	r2, [r7, #12]
  400582:	2190      	movs	r1, #144	; 0x90
  400584:	f240 2006 	movw	r0, #518	; 0x206
  400588:	4b43      	ldr	r3, [pc, #268]	; (400698 <AT86_FSM+0x19c>)
  40058a:	4798      	blx	r3
			AT86_write_reg(RF24_CCF0L, 0xD8, atDev);
  40058c:	68fa      	ldr	r2, [r7, #12]
  40058e:	21d8      	movs	r1, #216	; 0xd8
  400590:	f240 2005 	movw	r0, #517	; 0x205
  400594:	4b40      	ldr	r3, [pc, #256]	; (400698 <AT86_FSM+0x19c>)
  400596:	4798      	blx	r3
			AT86_write_reg(RF24_CNM, 0x00, atDev);
  400598:	68fa      	ldr	r2, [r7, #12]
  40059a:	2100      	movs	r1, #0
  40059c:	f44f 7002 	mov.w	r0, #520	; 0x208
  4005a0:	4b3d      	ldr	r3, [pc, #244]	; (400698 <AT86_FSM+0x19c>)
  4005a2:	4798      	blx	r3
			
			glue_spi0_dma_transfer(atDev->spiDev, txBuf, rxBuf, 3);
  4005a4:	68fb      	ldr	r3, [r7, #12]
  4005a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
  4005a8:	2303      	movs	r3, #3
  4005aa:	4a3c      	ldr	r2, [pc, #240]	; (40069c <AT86_FSM+0x1a0>)
  4005ac:	493c      	ldr	r1, [pc, #240]	; (4006a0 <AT86_FSM+0x1a4>)
  4005ae:	4c3d      	ldr	r4, [pc, #244]	; (4006a4 <AT86_FSM+0x1a8>)
  4005b0:	47a0      	blx	r4
			AT86_write_reg(0x0114, 0x60, atDev);
  4005b2:	68fa      	ldr	r2, [r7, #12]
  4005b4:	2160      	movs	r1, #96	; 0x60
  4005b6:	f44f 708a 	mov.w	r0, #276	; 0x114
  4005ba:	4b37      	ldr	r3, [pc, #220]	; (400698 <AT86_FSM+0x19c>)
  4005bc:	4798      	blx	r3
			AT86_write_reg(0x0214, 0x60, atDev);
  4005be:	68fa      	ldr	r2, [r7, #12]
  4005c0:	2160      	movs	r1, #96	; 0x60
  4005c2:	f44f 7005 	mov.w	r0, #532	; 0x214
  4005c6:	4b34      	ldr	r3, [pc, #208]	; (400698 <AT86_FSM+0x19c>)
  4005c8:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  4005ca:	68fb      	ldr	r3, [r7, #12]
  4005cc:	2201      	movs	r2, #1
  4005ce:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  4005d2:	e059      	b.n	400688 <AT86_FSM+0x18c>
		//timeout and an extra state that polls the state and kicks the bb state
		//with the polled state and calls the FSM update.
		case (AT86_STATE_IDLE):
			//Poll for data?
			asm("");
			if (atDev->baseband_900.gotIRQ && atDev->baseband_2400.gotIRQ)
  4005d4:	68fb      	ldr	r3, [r7, #12]
  4005d6:	785b      	ldrb	r3, [r3, #1]
  4005d8:	2b00      	cmp	r3, #0
  4005da:	d00e      	beq.n	4005fa <AT86_FSM+0xfe>
  4005dc:	68fb      	ldr	r3, [r7, #12]
  4005de:	7c5b      	ldrb	r3, [r3, #17]
  4005e0:	2b00      	cmp	r3, #0
  4005e2:	d00a      	beq.n	4005fa <AT86_FSM+0xfe>
			{
				atDev->baseband_900.gotIRQ = 0;
  4005e4:	68fb      	ldr	r3, [r7, #12]
  4005e6:	2200      	movs	r2, #0
  4005e8:	705a      	strb	r2, [r3, #1]
				atDev->baseband_2400.gotIRQ = 0;
  4005ea:	68fb      	ldr	r3, [r7, #12]
  4005ec:	2200      	movs	r2, #0
  4005ee:	745a      	strb	r2, [r3, #17]
				
				atDev->at86_state = AT86_STATE_ALL_UPDATE;
  4005f0:	68fb      	ldr	r3, [r7, #12]
  4005f2:	2204      	movs	r2, #4
  4005f4:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  4005f8:	e046      	b.n	400688 <AT86_FSM+0x18c>
			}
			else if (atDev->baseband_900.gotIRQ)
  4005fa:	68fb      	ldr	r3, [r7, #12]
  4005fc:	785b      	ldrb	r3, [r3, #1]
  4005fe:	2b00      	cmp	r3, #0
  400600:	d007      	beq.n	400612 <AT86_FSM+0x116>
			{
				atDev->baseband_900.gotIRQ = 0;
  400602:	68fb      	ldr	r3, [r7, #12]
  400604:	2200      	movs	r2, #0
  400606:	705a      	strb	r2, [r3, #1]

				atDev->at86_state = AT86_STATE_0900_UPDATE;
  400608:	68fb      	ldr	r3, [r7, #12]
  40060a:	2202      	movs	r2, #2
  40060c:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  400610:	e03a      	b.n	400688 <AT86_FSM+0x18c>
			}
			else if (atDev->baseband_2400.gotIRQ)
  400612:	68fb      	ldr	r3, [r7, #12]
  400614:	7c5b      	ldrb	r3, [r3, #17]
  400616:	2b00      	cmp	r3, #0
  400618:	d007      	beq.n	40062a <AT86_FSM+0x12e>
			{
				atDev->baseband_2400.gotIRQ = 0;
  40061a:	68fb      	ldr	r3, [r7, #12]
  40061c:	2200      	movs	r2, #0
  40061e:	745a      	strb	r2, [r3, #17]

				atDev->at86_state = AT86_STATE_2400_UPDATE;
  400620:	68fb      	ldr	r3, [r7, #12]
  400622:	2203      	movs	r2, #3
  400624:	f883 2020 	strb.w	r2, [r3, #32]
				break;
  400628:	e02e      	b.n	400688 <AT86_FSM+0x18c>
			}
			
			atDev->at86_state = AT86_STATE_IDLE;
  40062a:	68fb      	ldr	r3, [r7, #12]
  40062c:	2201      	movs	r2, #1
  40062e:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400632:	e029      	b.n	400688 <AT86_FSM+0x18c>
			//if (getSpiStatus() == DevSpiState_IN_PROCESS)
			//{
			//	break;
			//	atDev->at86_state = AT86_STATE_0900_UPDATE;
			//}
			AT86_BB_FSM(&atDev->baseband_900);
  400634:	68fb      	ldr	r3, [r7, #12]
  400636:	4618      	mov	r0, r3
  400638:	4b1b      	ldr	r3, [pc, #108]	; (4006a8 <AT86_FSM+0x1ac>)
  40063a:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  40063c:	68fb      	ldr	r3, [r7, #12]
  40063e:	2201      	movs	r2, #1
  400640:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400644:	e020      	b.n	400688 <AT86_FSM+0x18c>
			//if (getSpiStatus() == DevSpiState_IN_PROCESS)
			//{
			//	break;
			//	atDev->at86_state = AT86_STATE_2400_UPDATE;
			//}
			AT86_BB_FSM(&atDev->baseband_2400);
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	3310      	adds	r3, #16
  40064a:	4618      	mov	r0, r3
  40064c:	4b16      	ldr	r3, [pc, #88]	; (4006a8 <AT86_FSM+0x1ac>)
  40064e:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	2201      	movs	r2, #1
  400654:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400658:	e016      	b.n	400688 <AT86_FSM+0x18c>
		
		case (AT86_STATE_ALL_UPDATE):
		
			atDev->at86_state = AT86_STATE_0900_UPDATE;
  40065a:	68fb      	ldr	r3, [r7, #12]
  40065c:	2202      	movs	r2, #2
  40065e:	f883 2020 	strb.w	r2, [r3, #32]
			AT86_BB_FSM(&atDev->baseband_900);
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	4618      	mov	r0, r3
  400666:	4b10      	ldr	r3, [pc, #64]	; (4006a8 <AT86_FSM+0x1ac>)
  400668:	4798      	blx	r3
			atDev->at86_state = AT86_STATE_2400_UPDATE;
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	2203      	movs	r2, #3
  40066e:	f883 2020 	strb.w	r2, [r3, #32]
			AT86_BB_FSM(&atDev->baseband_2400);
  400672:	68fb      	ldr	r3, [r7, #12]
  400674:	3310      	adds	r3, #16
  400676:	4618      	mov	r0, r3
  400678:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <AT86_FSM+0x1ac>)
  40067a:	4798      	blx	r3
			
			atDev->at86_state = AT86_STATE_IDLE;
  40067c:	68fb      	ldr	r3, [r7, #12]
  40067e:	2201      	movs	r2, #1
  400680:	f883 2020 	strb.w	r2, [r3, #32]
			break;
  400684:	e000      	b.n	400688 <AT86_FSM+0x18c>
			
		default:
			while(1);
  400686:	e7fe      	b.n	400686 <AT86_FSM+0x18a>
			break;
			
	}

	return(AT86_OK);
  400688:	2300      	movs	r3, #0
}
  40068a:	4618      	mov	r0, r3
  40068c:	3714      	adds	r7, #20
  40068e:	46bd      	mov	sp, r7
  400690:	bd90      	pop	{r4, r7, pc}
  400692:	bf00      	nop
  400694:	2040003c 	.word	0x2040003c
  400698:	00400a4d 	.word	0x00400a4d
  40069c:	204008d0 	.word	0x204008d0
  4006a0:	204000d0 	.word	0x204000d0
  4006a4:	004019d1 	.word	0x004019d1
  4006a8:	004006ad 	.word	0x004006ad

004006ac <AT86_BB_FSM>:
 * 
 * This FSM may automatically support CCS/wait to send as it should automatically send
 * when appropriate after sending the TX command.  TODO: Must verify this.
 */
uint8_t AT86_BB_FSM(baseband_info_t *bb)
{
  4006ac:	b580      	push	{r7, lr}
  4006ae:	b082      	sub	sp, #8
  4006b0:	af00      	add	r7, sp, #0
  4006b2:	6078      	str	r0, [r7, #4]
	switch (bb->baseband_state)
  4006b4:	687b      	ldr	r3, [r7, #4]
  4006b6:	781b      	ldrb	r3, [r3, #0]
  4006b8:	2b08      	cmp	r3, #8
  4006ba:	f200 81ac 	bhi.w	400a16 <AT86_BB_FSM+0x36a>
  4006be:	a201      	add	r2, pc, #4	; (adr r2, 4006c4 <AT86_BB_FSM+0x18>)
  4006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006c4:	004006e9 	.word	0x004006e9
  4006c8:	00400749 	.word	0x00400749
  4006cc:	0040076d 	.word	0x0040076d
  4006d0:	00400791 	.word	0x00400791
  4006d4:	00400a17 	.word	0x00400a17
  4006d8:	0040085f 	.word	0x0040085f
  4006dc:	00400999 	.word	0x00400999
  4006e0:	00400a17 	.word	0x00400a17
  4006e4:	004009db 	.word	0x004009db
	{
		case (AFE_STATE_POWER_OFF):
			asm("");
			if (bb->lastIRQ & WAKEUP)
  4006e8:	687b      	ldr	r3, [r7, #4]
  4006ea:	889b      	ldrh	r3, [r3, #4]
  4006ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	f000 8183 	beq.w	4009fc <AT86_BB_FSM+0x350>
			{
				bb->lastIRQ &= ~WAKEUP;
  4006f6:	687b      	ldr	r3, [r7, #4]
  4006f8:	889a      	ldrh	r2, [r3, #4]
  4006fa:	4ba1      	ldr	r3, [pc, #644]	; (400980 <AT86_BB_FSM+0x2d4>)
  4006fc:	4013      	ands	r3, r2
  4006fe:	b29a      	uxth	r2, r3
  400700:	687b      	ldr	r3, [r7, #4]
  400702:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TRXOFF;
  400704:	687b      	ldr	r3, [r7, #4]
  400706:	2201      	movs	r2, #1
  400708:	701a      	strb	r2, [r3, #0]

				// Send SPI command to get us into TXPREP
				if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  40070a:	687b      	ldr	r3, [r7, #4]
  40070c:	68db      	ldr	r3, [r3, #12]
  40070e:	f893 3020 	ldrb.w	r3, [r3, #32]
  400712:	2b02      	cmp	r3, #2
  400714:	d108      	bne.n	400728 <AT86_BB_FSM+0x7c>
				{
					AT86_write_reg(RF09_CMD, RF_CMD_TXPREP, bb->parent);
  400716:	687b      	ldr	r3, [r7, #4]
  400718:	68db      	ldr	r3, [r3, #12]
  40071a:	461a      	mov	r2, r3
  40071c:	2103      	movs	r1, #3
  40071e:	f240 1003 	movw	r0, #259	; 0x103
  400722:	4b98      	ldr	r3, [pc, #608]	; (400984 <AT86_BB_FSM+0x2d8>)
  400724:	4798      	blx	r3
				else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
				{
					AT86_write_reg(RF24_CMD, RF_CMD_TXPREP, bb->parent);
				}
			}
			break;
  400726:	e169      	b.n	4009fc <AT86_BB_FSM+0x350>
				else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  400728:	687b      	ldr	r3, [r7, #4]
  40072a:	68db      	ldr	r3, [r3, #12]
  40072c:	f893 3020 	ldrb.w	r3, [r3, #32]
  400730:	2b03      	cmp	r3, #3
  400732:	f040 8163 	bne.w	4009fc <AT86_BB_FSM+0x350>
					AT86_write_reg(RF24_CMD, RF_CMD_TXPREP, bb->parent);
  400736:	687b      	ldr	r3, [r7, #4]
  400738:	68db      	ldr	r3, [r3, #12]
  40073a:	461a      	mov	r2, r3
  40073c:	2103      	movs	r1, #3
  40073e:	f240 2003 	movw	r0, #515	; 0x203
  400742:	4b90      	ldr	r3, [pc, #576]	; (400984 <AT86_BB_FSM+0x2d8>)
  400744:	4798      	blx	r3
			break;
  400746:	e159      	b.n	4009fc <AT86_BB_FSM+0x350>

		case (AFE_STATE_TRXOFF):
			asm("");
			if (bb->lastIRQ & TRXRDY)
  400748:	687b      	ldr	r3, [r7, #4]
  40074a:	889b      	ldrh	r3, [r3, #4]
  40074c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  400750:	2b00      	cmp	r3, #0
  400752:	f000 8155 	beq.w	400a00 <AT86_BB_FSM+0x354>
			{
				bb->lastIRQ &= ~TRXRDY;
  400756:	687b      	ldr	r3, [r7, #4]
  400758:	889a      	ldrh	r2, [r3, #4]
  40075a:	4b8b      	ldr	r3, [pc, #556]	; (400988 <AT86_BB_FSM+0x2dc>)
  40075c:	4013      	ands	r3, r2
  40075e:	b29a      	uxth	r2, r3
  400760:	687b      	ldr	r3, [r7, #4]
  400762:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  400764:	687b      	ldr	r3, [r7, #4]
  400766:	2203      	movs	r2, #3
  400768:	701a      	strb	r2, [r3, #0]
				goto txprep;
  40076a:	e011      	b.n	400790 <AT86_BB_FSM+0xe4>
			}
			break;

		case (AFE_STATE_TRANSITION):
			asm("");
			if (bb->lastIRQ & TRXRDY)
  40076c:	687b      	ldr	r3, [r7, #4]
  40076e:	889b      	ldrh	r3, [r3, #4]
  400770:	f403 7300 	and.w	r3, r3, #512	; 0x200
  400774:	2b00      	cmp	r3, #0
  400776:	f000 8145 	beq.w	400a04 <AT86_BB_FSM+0x358>
			{
				bb->lastIRQ &= ~TRXRDY;
  40077a:	687b      	ldr	r3, [r7, #4]
  40077c:	889a      	ldrh	r2, [r3, #4]
  40077e:	4b82      	ldr	r3, [pc, #520]	; (400988 <AT86_BB_FSM+0x2dc>)
  400780:	4013      	ands	r3, r2
  400782:	b29a      	uxth	r2, r3
  400784:	687b      	ldr	r3, [r7, #4]
  400786:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  400788:	687b      	ldr	r3, [r7, #4]
  40078a:	2203      	movs	r2, #3
  40078c:	701a      	strb	r2, [r3, #0]
				goto txprep;
  40078e:	bf00      	nop
			break;			

		case (AFE_STATE_TXPREP):
txprep:
			asm("");
			if (bb->lastIRQ & TRXERR)
  400790:	687b      	ldr	r3, [r7, #4]
  400792:	889b      	ldrh	r3, [r3, #4]
  400794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400798:	2b00      	cmp	r3, #0
  40079a:	d00a      	beq.n	4007b2 <AT86_BB_FSM+0x106>
			{
				bb->lastIRQ &= ~TRXERR;
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	889a      	ldrh	r2, [r3, #4]
  4007a0:	4b7a      	ldr	r3, [pc, #488]	; (40098c <AT86_BB_FSM+0x2e0>)
  4007a2:	4013      	ands	r3, r2
  4007a4:	b29a      	uxth	r2, r3
  4007a6:	687b      	ldr	r3, [r7, #4]
  4007a8:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  4007aa:	687b      	ldr	r3, [r7, #4]
  4007ac:	2203      	movs	r2, #3
  4007ae:	701a      	strb	r2, [r3, #0]
  4007b0:	e00f      	b.n	4007d2 <AT86_BB_FSM+0x126>
			}
			else if (bb->lastIRQ & TRXRDY)
  4007b2:	687b      	ldr	r3, [r7, #4]
  4007b4:	889b      	ldrh	r3, [r3, #4]
  4007b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  4007ba:	2b00      	cmp	r3, #0
  4007bc:	d009      	beq.n	4007d2 <AT86_BB_FSM+0x126>
			{
				bb->lastIRQ &= ~TRXRDY;
  4007be:	687b      	ldr	r3, [r7, #4]
  4007c0:	889a      	ldrh	r2, [r3, #4]
  4007c2:	4b71      	ldr	r3, [pc, #452]	; (400988 <AT86_BB_FSM+0x2dc>)
  4007c4:	4013      	ands	r3, r2
  4007c6:	b29a      	uxth	r2, r3
  4007c8:	687b      	ldr	r3, [r7, #4]
  4007ca:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  4007cc:	687b      	ldr	r3, [r7, #4]
  4007ce:	2203      	movs	r2, #3
  4007d0:	701a      	strb	r2, [r3, #0]
				//If we need to send data, which the AT86 top-level-fsm handles, we will do so here.
				//
				//We will only initialize sending data from this state if we're manually handling
				//CCA and energy detection thresholds.  Otherwise CCATX is initiated from the RX state.

				if (bb->channel_power_assesment == 1)
  4007d2:	687b      	ldr	r3, [r7, #4]
  4007d4:	79db      	ldrb	r3, [r3, #7]
  4007d6:	2b01      	cmp	r3, #1
  4007d8:	f040 8116 	bne.w	400a08 <AT86_BB_FSM+0x35c>
					//PC.BBEN to 0
					//RX to RFn_CMD
					//EDC.EDM to 1

					//Send transition command to RX
					if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  4007dc:	687b      	ldr	r3, [r7, #4]
  4007de:	68db      	ldr	r3, [r3, #12]
  4007e0:	f893 3020 	ldrb.w	r3, [r3, #32]
  4007e4:	2b02      	cmp	r3, #2
  4007e6:	d118      	bne.n	40081a <AT86_BB_FSM+0x16e>
					{
						//0b01010100 Default BBCn_PC
						//0b01010000
						AT86_write_reg(BBC0_PC, 0x50, bb->parent);
  4007e8:	687b      	ldr	r3, [r7, #4]
  4007ea:	68db      	ldr	r3, [r3, #12]
  4007ec:	461a      	mov	r2, r3
  4007ee:	2150      	movs	r1, #80	; 0x50
  4007f0:	f240 3001 	movw	r0, #769	; 0x301
  4007f4:	4b63      	ldr	r3, [pc, #396]	; (400984 <AT86_BB_FSM+0x2d8>)
  4007f6:	4798      	blx	r3
						AT86_write_reg(RF09_CMD, RF_CMD_RX, bb->parent);
  4007f8:	687b      	ldr	r3, [r7, #4]
  4007fa:	68db      	ldr	r3, [r3, #12]
  4007fc:	461a      	mov	r2, r3
  4007fe:	2105      	movs	r1, #5
  400800:	f240 1003 	movw	r0, #259	; 0x103
  400804:	4b5f      	ldr	r3, [pc, #380]	; (400984 <AT86_BB_FSM+0x2d8>)
  400806:	4798      	blx	r3
						AT86_write_reg(RF09_EDC, 0x01, bb->parent);
  400808:	687b      	ldr	r3, [r7, #4]
  40080a:	68db      	ldr	r3, [r3, #12]
  40080c:	461a      	mov	r2, r3
  40080e:	2101      	movs	r1, #1
  400810:	f44f 7087 	mov.w	r0, #270	; 0x10e
  400814:	4b5b      	ldr	r3, [pc, #364]	; (400984 <AT86_BB_FSM+0x2d8>)
  400816:	4798      	blx	r3
  400818:	e01d      	b.n	400856 <AT86_BB_FSM+0x1aa>
					}
					else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  40081a:	687b      	ldr	r3, [r7, #4]
  40081c:	68db      	ldr	r3, [r3, #12]
  40081e:	f893 3020 	ldrb.w	r3, [r3, #32]
  400822:	2b03      	cmp	r3, #3
  400824:	d117      	bne.n	400856 <AT86_BB_FSM+0x1aa>
					{
						AT86_write_reg(BBC1_PC, 0x50, bb->parent);
  400826:	687b      	ldr	r3, [r7, #4]
  400828:	68db      	ldr	r3, [r3, #12]
  40082a:	461a      	mov	r2, r3
  40082c:	2150      	movs	r1, #80	; 0x50
  40082e:	f240 4001 	movw	r0, #1025	; 0x401
  400832:	4b54      	ldr	r3, [pc, #336]	; (400984 <AT86_BB_FSM+0x2d8>)
  400834:	4798      	blx	r3
						AT86_write_reg(RF24_CMD, RF_CMD_RX, bb->parent);
  400836:	687b      	ldr	r3, [r7, #4]
  400838:	68db      	ldr	r3, [r3, #12]
  40083a:	461a      	mov	r2, r3
  40083c:	2105      	movs	r1, #5
  40083e:	f240 2003 	movw	r0, #515	; 0x203
  400842:	4b50      	ldr	r3, [pc, #320]	; (400984 <AT86_BB_FSM+0x2d8>)
  400844:	4798      	blx	r3
						AT86_write_reg(RF24_EDC, 0x01, bb->parent);
  400846:	687b      	ldr	r3, [r7, #4]
  400848:	68db      	ldr	r3, [r3, #12]
  40084a:	461a      	mov	r2, r3
  40084c:	2101      	movs	r1, #1
  40084e:	f240 200e 	movw	r0, #526	; 0x20e
  400852:	4b4c      	ldr	r3, [pc, #304]	; (400984 <AT86_BB_FSM+0x2d8>)
  400854:	4798      	blx	r3
					}
					
					bb->baseband_state = AFE_STATE_RX;
  400856:	687b      	ldr	r3, [r7, #4]
  400858:	2205      	movs	r2, #5
  40085a:	701a      	strb	r2, [r3, #0]
					break;
  40085c:	e0db      	b.n	400a16 <AT86_BB_FSM+0x36a>
				//return transmission complete, which will be handled in AT86 state machine, where the frame will be dequeued.
			}
			break;

		case (AFE_STATE_RX):
			if (bb->lastIRQ & EDC)
  40085e:	687b      	ldr	r3, [r7, #4]
  400860:	889b      	ldrh	r3, [r3, #4]
  400862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  400866:	2b00      	cmp	r3, #0
  400868:	d07b      	beq.n	400962 <AT86_BB_FSM+0x2b6>
			{
				bb->lastIRQ &= ~EDC;
  40086a:	687b      	ldr	r3, [r7, #4]
  40086c:	889a      	ldrh	r2, [r3, #4]
  40086e:	4b48      	ldr	r3, [pc, #288]	; (400990 <AT86_BB_FSM+0x2e4>)
  400870:	4013      	ands	r3, r2
  400872:	b29a      	uxth	r2, r3
  400874:	687b      	ldr	r3, [r7, #4]
  400876:	809a      	strh	r2, [r3, #4]
				//Got energy detection results.
				
				//If we are still in the power assessment override state,
				//reissue the single shot energy detection.
				if (bb->channel_power_assesment)
  400878:	687b      	ldr	r3, [r7, #4]
  40087a:	79db      	ldrb	r3, [r3, #7]
  40087c:	2b00      	cmp	r3, #0
  40087e:	d040      	beq.n	400902 <AT86_BB_FSM+0x256>
				{
					if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  400880:	687b      	ldr	r3, [r7, #4]
  400882:	68db      	ldr	r3, [r3, #12]
  400884:	f893 3020 	ldrb.w	r3, [r3, #32]
  400888:	2b02      	cmp	r3, #2
  40088a:	d118      	bne.n	4008be <AT86_BB_FSM+0x212>
					{
						AT86_read_bytes_from_reg(0x010F, 3, bb->parent);
  40088c:	687b      	ldr	r3, [r7, #4]
  40088e:	68db      	ldr	r3, [r3, #12]
  400890:	461a      	mov	r2, r3
  400892:	2103      	movs	r1, #3
  400894:	f240 100f 	movw	r0, #271	; 0x10f
  400898:	4b3e      	ldr	r3, [pc, #248]	; (400994 <AT86_BB_FSM+0x2e8>)
  40089a:	4798      	blx	r3
						AT86_write_reg(RF09_EDD, 0xFF, bb->parent); //Super long integration period: 128 uS * 2^6
  40089c:	687b      	ldr	r3, [r7, #4]
  40089e:	68db      	ldr	r3, [r3, #12]
  4008a0:	461a      	mov	r2, r3
  4008a2:	21ff      	movs	r1, #255	; 0xff
  4008a4:	f240 100f 	movw	r0, #271	; 0x10f
  4008a8:	4b36      	ldr	r3, [pc, #216]	; (400984 <AT86_BB_FSM+0x2d8>)
  4008aa:	4798      	blx	r3
						AT86_write_reg(RF09_EDC, 0x01, bb->parent);
  4008ac:	687b      	ldr	r3, [r7, #4]
  4008ae:	68db      	ldr	r3, [r3, #12]
  4008b0:	461a      	mov	r2, r3
  4008b2:	2101      	movs	r1, #1
  4008b4:	f44f 7087 	mov.w	r0, #270	; 0x10e
  4008b8:	4b32      	ldr	r3, [pc, #200]	; (400984 <AT86_BB_FSM+0x2d8>)
  4008ba:	4798      	blx	r3
  4008bc:	e01d      	b.n	4008fa <AT86_BB_FSM+0x24e>
					}
					else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  4008be:	687b      	ldr	r3, [r7, #4]
  4008c0:	68db      	ldr	r3, [r3, #12]
  4008c2:	f893 3020 	ldrb.w	r3, [r3, #32]
  4008c6:	2b03      	cmp	r3, #3
  4008c8:	d117      	bne.n	4008fa <AT86_BB_FSM+0x24e>
					{
						AT86_read_bytes_from_reg(0x020F, 3, bb->parent);
  4008ca:	687b      	ldr	r3, [r7, #4]
  4008cc:	68db      	ldr	r3, [r3, #12]
  4008ce:	461a      	mov	r2, r3
  4008d0:	2103      	movs	r1, #3
  4008d2:	f240 200f 	movw	r0, #527	; 0x20f
  4008d6:	4b2f      	ldr	r3, [pc, #188]	; (400994 <AT86_BB_FSM+0x2e8>)
  4008d8:	4798      	blx	r3
						AT86_write_reg(RF24_EDD, 0xFF, bb->parent); //Super long integration period: 128 uS * 2^6
  4008da:	687b      	ldr	r3, [r7, #4]
  4008dc:	68db      	ldr	r3, [r3, #12]
  4008de:	461a      	mov	r2, r3
  4008e0:	21ff      	movs	r1, #255	; 0xff
  4008e2:	f240 200f 	movw	r0, #527	; 0x20f
  4008e6:	4b27      	ldr	r3, [pc, #156]	; (400984 <AT86_BB_FSM+0x2d8>)
  4008e8:	4798      	blx	r3
						AT86_write_reg(RF24_EDC, 0x01, bb->parent);
  4008ea:	687b      	ldr	r3, [r7, #4]
  4008ec:	68db      	ldr	r3, [r3, #12]
  4008ee:	461a      	mov	r2, r3
  4008f0:	2101      	movs	r1, #1
  4008f2:	f240 200e 	movw	r0, #526	; 0x20e
  4008f6:	4b23      	ldr	r3, [pc, #140]	; (400984 <AT86_BB_FSM+0x2d8>)
  4008f8:	4798      	blx	r3
					}
					bb->baseband_state = AFE_STATE_RX;
  4008fa:	687b      	ldr	r3, [r7, #4]
  4008fc:	2205      	movs	r2, #5
  4008fe:	701a      	strb	r2, [r3, #0]
  400900:	e02f      	b.n	400962 <AT86_BB_FSM+0x2b6>
				}
				else
				{
					//Send TXPREP command
					//Enable baseband.
					if (bb->parent->at86_state == AT86_STATE_0900_UPDATE)
  400902:	687b      	ldr	r3, [r7, #4]
  400904:	68db      	ldr	r3, [r3, #12]
  400906:	f893 3020 	ldrb.w	r3, [r3, #32]
  40090a:	2b02      	cmp	r3, #2
  40090c:	d110      	bne.n	400930 <AT86_BB_FSM+0x284>
					{
						AT86_write_reg(BBC0_PC, 0x54, bb->parent);
  40090e:	687b      	ldr	r3, [r7, #4]
  400910:	68db      	ldr	r3, [r3, #12]
  400912:	461a      	mov	r2, r3
  400914:	2154      	movs	r1, #84	; 0x54
  400916:	f240 3001 	movw	r0, #769	; 0x301
  40091a:	4b1a      	ldr	r3, [pc, #104]	; (400984 <AT86_BB_FSM+0x2d8>)
  40091c:	4798      	blx	r3
						AT86_write_reg(RF09_CMD, RF_CMD_TXPREP, bb->parent);
  40091e:	687b      	ldr	r3, [r7, #4]
  400920:	68db      	ldr	r3, [r3, #12]
  400922:	461a      	mov	r2, r3
  400924:	2103      	movs	r1, #3
  400926:	f240 1003 	movw	r0, #259	; 0x103
  40092a:	4b16      	ldr	r3, [pc, #88]	; (400984 <AT86_BB_FSM+0x2d8>)
  40092c:	4798      	blx	r3
  40092e:	e015      	b.n	40095c <AT86_BB_FSM+0x2b0>
					}
					else if (bb->parent->at86_state == AT86_STATE_2400_UPDATE)
  400930:	687b      	ldr	r3, [r7, #4]
  400932:	68db      	ldr	r3, [r3, #12]
  400934:	f893 3020 	ldrb.w	r3, [r3, #32]
  400938:	2b03      	cmp	r3, #3
  40093a:	d10f      	bne.n	40095c <AT86_BB_FSM+0x2b0>
					{
						AT86_write_reg(BBC1_PC, 0x50, bb->parent);
  40093c:	687b      	ldr	r3, [r7, #4]
  40093e:	68db      	ldr	r3, [r3, #12]
  400940:	461a      	mov	r2, r3
  400942:	2150      	movs	r1, #80	; 0x50
  400944:	f240 4001 	movw	r0, #1025	; 0x401
  400948:	4b0e      	ldr	r3, [pc, #56]	; (400984 <AT86_BB_FSM+0x2d8>)
  40094a:	4798      	blx	r3
						AT86_write_reg(RF24_CMD, RF_CMD_TXPREP, bb->parent);
  40094c:	687b      	ldr	r3, [r7, #4]
  40094e:	68db      	ldr	r3, [r3, #12]
  400950:	461a      	mov	r2, r3
  400952:	2103      	movs	r1, #3
  400954:	f240 2003 	movw	r0, #515	; 0x203
  400958:	4b0a      	ldr	r3, [pc, #40]	; (400984 <AT86_BB_FSM+0x2d8>)
  40095a:	4798      	blx	r3
					}
					
					bb->baseband_state = AFE_STATE_TXPREP;
  40095c:	687b      	ldr	r3, [r7, #4]
  40095e:	2203      	movs	r2, #3
  400960:	701a      	strb	r2, [r3, #0]
			{
				bb->lastIRQ &= ~AGCH;
				//AGC is held, preamble detected.
			}

			if (bb->lastIRQ & RXFS)
  400962:	687b      	ldr	r3, [r7, #4]
  400964:	889b      	ldrh	r3, [r3, #4]
  400966:	f003 0301 	and.w	r3, r3, #1
  40096a:	2b00      	cmp	r3, #0
  40096c:	d04e      	beq.n	400a0c <AT86_BB_FSM+0x360>
			{
				bb->lastIRQ &= ~RXFS;
  40096e:	687b      	ldr	r3, [r7, #4]
  400970:	889b      	ldrh	r3, [r3, #4]
  400972:	f023 0301 	bic.w	r3, r3, #1
  400976:	b29a      	uxth	r2, r3
  400978:	687b      	ldr	r3, [r7, #4]
  40097a:	809a      	strh	r2, [r3, #4]
				//EDM = 1;
				//bb->baseband_state = ;
			}
			

			break;
  40097c:	e046      	b.n	400a0c <AT86_BB_FSM+0x360>
  40097e:	bf00      	nop
  400980:	fffffe00 	.word	0xfffffe00
  400984:	00400a4d 	.word	0x00400a4d
  400988:	fffffd00 	.word	0xfffffd00
  40098c:	ffffef00 	.word	0xffffef00
  400990:	fffffb00 	.word	0xfffffb00
  400994:	00400ab5 	.word	0x00400ab5
		case (AFE_STATE_RX_CCATX):
			if (bb->lastIRQ & (TXFE | EDC))
  400998:	687b      	ldr	r3, [r7, #4]
  40099a:	889b      	ldrh	r3, [r3, #4]
  40099c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  4009a0:	2b00      	cmp	r3, #0
  4009a2:	d009      	beq.n	4009b8 <AT86_BB_FSM+0x30c>
			{
				bb->lastIRQ &= ~(TXFE | EDC);
  4009a4:	687b      	ldr	r3, [r7, #4]
  4009a6:	889b      	ldrh	r3, [r3, #4]
  4009a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  4009ac:	b29a      	uxth	r2, r3
  4009ae:	687b      	ldr	r3, [r7, #4]
  4009b0:	809a      	strh	r2, [r3, #4]
				//Busy channel detected, jump back to the RX state.
				
				bb->baseband_state = AFE_STATE_RX;
  4009b2:	687b      	ldr	r3, [r7, #4]
  4009b4:	2205      	movs	r2, #5
  4009b6:	701a      	strb	r2, [r3, #0]
			}

			if (bb->lastIRQ & (TRXRDY | EDC))
  4009b8:	687b      	ldr	r3, [r7, #4]
  4009ba:	889b      	ldrh	r3, [r3, #4]
  4009bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  4009c0:	2b00      	cmp	r3, #0
  4009c2:	d025      	beq.n	400a10 <AT86_BB_FSM+0x364>
			{
				bb->lastIRQ &= ~(TRXRDY | EDC);
  4009c4:	687b      	ldr	r3, [r7, #4]
  4009c6:	889b      	ldrh	r3, [r3, #4]
  4009c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
  4009cc:	b29a      	uxth	r2, r3
  4009ce:	687b      	ldr	r3, [r7, #4]
  4009d0:	809a      	strh	r2, [r3, #4]
				//Channel free, will transition to TX state.  Assumes this is CCATX.
				
				bb->baseband_state = AFE_STATE_TX;
  4009d2:	687b      	ldr	r3, [r7, #4]
  4009d4:	2204      	movs	r2, #4
  4009d6:	701a      	strb	r2, [r3, #0]
			}

			break;
  4009d8:	e01a      	b.n	400a10 <AT86_BB_FSM+0x364>

		case (AFE_STATE_SLEEP):
			break;

		case (AFE_STATE_DEEP_SLEEP):
			if (bb->lastIRQ & WAKEUP)
  4009da:	687b      	ldr	r3, [r7, #4]
  4009dc:	889b      	ldrh	r3, [r3, #4]
  4009de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4009e2:	2b00      	cmp	r3, #0
  4009e4:	d016      	beq.n	400a14 <AT86_BB_FSM+0x368>
			{
				bb->lastIRQ &= ~WAKEUP;
  4009e6:	687b      	ldr	r3, [r7, #4]
  4009e8:	889a      	ldrh	r2, [r3, #4]
  4009ea:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <AT86_BB_FSM+0x374>)
  4009ec:	4013      	ands	r3, r2
  4009ee:	b29a      	uxth	r2, r3
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	809a      	strh	r2, [r3, #4]
				bb->baseband_state = AFE_STATE_TXPREP;
  4009f4:	687b      	ldr	r3, [r7, #4]
  4009f6:	2203      	movs	r2, #3
  4009f8:	701a      	strb	r2, [r3, #0]
			}
			break;
  4009fa:	e00b      	b.n	400a14 <AT86_BB_FSM+0x368>
			break;
  4009fc:	bf00      	nop
  4009fe:	e00a      	b.n	400a16 <AT86_BB_FSM+0x36a>
			break;
  400a00:	bf00      	nop
  400a02:	e008      	b.n	400a16 <AT86_BB_FSM+0x36a>
			break;			
  400a04:	bf00      	nop
  400a06:	e006      	b.n	400a16 <AT86_BB_FSM+0x36a>
			break;
  400a08:	bf00      	nop
  400a0a:	e004      	b.n	400a16 <AT86_BB_FSM+0x36a>
			break;
  400a0c:	bf00      	nop
  400a0e:	e002      	b.n	400a16 <AT86_BB_FSM+0x36a>
			break;
  400a10:	bf00      	nop
  400a12:	e000      	b.n	400a16 <AT86_BB_FSM+0x36a>
			break;
  400a14:	bf00      	nop

		}
}
  400a16:	bf00      	nop
  400a18:	4618      	mov	r0, r3
  400a1a:	3708      	adds	r7, #8
  400a1c:	46bd      	mov	sp, r7
  400a1e:	bd80      	pop	{r7, pc}
  400a20:	fffffe00 	.word	0xfffffe00

00400a24 <AT86_IRQ_Handler>:

void AT86_IRQ_Handler(uint8_t atDev)
{
  400a24:	b480      	push	{r7}
  400a26:	b083      	sub	sp, #12
  400a28:	af00      	add	r7, sp, #0
  400a2a:	4603      	mov	r3, r0
  400a2c:	71fb      	strb	r3, [r7, #7]
	//Increment the number of interrupts that occurred
	//since the last time the FSM was run.
	interruptCounts++;
  400a2e:	4b06      	ldr	r3, [pc, #24]	; (400a48 <AT86_IRQ_Handler+0x24>)
  400a30:	881b      	ldrh	r3, [r3, #0]
  400a32:	b29b      	uxth	r3, r3
  400a34:	3301      	adds	r3, #1
  400a36:	b29a      	uxth	r2, r3
  400a38:	4b03      	ldr	r3, [pc, #12]	; (400a48 <AT86_IRQ_Handler+0x24>)
  400a3a:	801a      	strh	r2, [r3, #0]
}
  400a3c:	bf00      	nop
  400a3e:	370c      	adds	r7, #12
  400a40:	46bd      	mov	sp, r7
  400a42:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a46:	4770      	bx	lr
  400a48:	204000ce 	.word	0x204000ce

00400a4c <AT86_write_reg>:

void AT86_write_reg(uint16_t reg, uint8_t val, AT86_Instance *at)
{
  400a4c:	b590      	push	{r4, r7, lr}
  400a4e:	b083      	sub	sp, #12
  400a50:	af00      	add	r7, sp, #0
  400a52:	4603      	mov	r3, r0
  400a54:	603a      	str	r2, [r7, #0]
  400a56:	80fb      	strh	r3, [r7, #6]
  400a58:	460b      	mov	r3, r1
  400a5a:	717b      	strb	r3, [r7, #5]
	txBuf[0] = 0x80 | (reg >> 8);
  400a5c:	88fb      	ldrh	r3, [r7, #6]
  400a5e:	0a1b      	lsrs	r3, r3, #8
  400a60:	b29b      	uxth	r3, r3
  400a62:	b2db      	uxtb	r3, r3
  400a64:	f063 037f 	orn	r3, r3, #127	; 0x7f
  400a68:	b2da      	uxtb	r2, r3
  400a6a:	4b0e      	ldr	r3, [pc, #56]	; (400aa4 <AT86_write_reg+0x58>)
  400a6c:	701a      	strb	r2, [r3, #0]
	txBuf[1] = reg & 0x00FF;
  400a6e:	88fb      	ldrh	r3, [r7, #6]
  400a70:	b2da      	uxtb	r2, r3
  400a72:	4b0c      	ldr	r3, [pc, #48]	; (400aa4 <AT86_write_reg+0x58>)
  400a74:	705a      	strb	r2, [r3, #1]
	txBuf[2] = val;
  400a76:	4a0b      	ldr	r2, [pc, #44]	; (400aa4 <AT86_write_reg+0x58>)
  400a78:	797b      	ldrb	r3, [r7, #5]
  400a7a:	7093      	strb	r3, [r2, #2]
	glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 3);
  400a7c:	683b      	ldr	r3, [r7, #0]
  400a7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400a80:	2303      	movs	r3, #3
  400a82:	4a09      	ldr	r2, [pc, #36]	; (400aa8 <AT86_write_reg+0x5c>)
  400a84:	4907      	ldr	r1, [pc, #28]	; (400aa4 <AT86_write_reg+0x58>)
  400a86:	4c09      	ldr	r4, [pc, #36]	; (400aac <AT86_write_reg+0x60>)
  400a88:	47a0      	blx	r4
	while(glue_spi_in_process(at->spiDev));		
  400a8a:	bf00      	nop
  400a8c:	683b      	ldr	r3, [r7, #0]
  400a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400a90:	4618      	mov	r0, r3
  400a92:	4b07      	ldr	r3, [pc, #28]	; (400ab0 <AT86_write_reg+0x64>)
  400a94:	4798      	blx	r3
  400a96:	4603      	mov	r3, r0
  400a98:	2b00      	cmp	r3, #0
  400a9a:	d1f7      	bne.n	400a8c <AT86_write_reg+0x40>
}
  400a9c:	bf00      	nop
  400a9e:	370c      	adds	r7, #12
  400aa0:	46bd      	mov	sp, r7
  400aa2:	bd90      	pop	{r4, r7, pc}
  400aa4:	204000d0 	.word	0x204000d0
  400aa8:	204008d0 	.word	0x204008d0
  400aac:	00401ac9 	.word	0x00401ac9
  400ab0:	00401b1d 	.word	0x00401b1d

00400ab4 <AT86_read_bytes_from_reg>:

void AT86_read_bytes_from_reg(uint16_t reg, uint16_t numBytes, AT86_Instance *at)
{
  400ab4:	b590      	push	{r4, r7, lr}
  400ab6:	b083      	sub	sp, #12
  400ab8:	af00      	add	r7, sp, #0
  400aba:	4603      	mov	r3, r0
  400abc:	603a      	str	r2, [r7, #0]
  400abe:	80fb      	strh	r3, [r7, #6]
  400ac0:	460b      	mov	r3, r1
  400ac2:	80bb      	strh	r3, [r7, #4]
	txBuf[0] = 0x00 | (reg >> 8);
  400ac4:	88fb      	ldrh	r3, [r7, #6]
  400ac6:	0a1b      	lsrs	r3, r3, #8
  400ac8:	b29b      	uxth	r3, r3
  400aca:	b2da      	uxtb	r2, r3
  400acc:	4b0d      	ldr	r3, [pc, #52]	; (400b04 <AT86_read_bytes_from_reg+0x50>)
  400ace:	701a      	strb	r2, [r3, #0]
	txBuf[1] = reg & 0x00FF;
  400ad0:	88fb      	ldrh	r3, [r7, #6]
  400ad2:	b2da      	uxtb	r2, r3
  400ad4:	4b0b      	ldr	r3, [pc, #44]	; (400b04 <AT86_read_bytes_from_reg+0x50>)
  400ad6:	705a      	strb	r2, [r3, #1]
	glue_spi_dma_transfer(at->spiDev, txBuf, rxBuf, 2 + numBytes);
  400ad8:	683b      	ldr	r3, [r7, #0]
  400ada:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400adc:	88bb      	ldrh	r3, [r7, #4]
  400ade:	3302      	adds	r3, #2
  400ae0:	b29b      	uxth	r3, r3
  400ae2:	4a09      	ldr	r2, [pc, #36]	; (400b08 <AT86_read_bytes_from_reg+0x54>)
  400ae4:	4907      	ldr	r1, [pc, #28]	; (400b04 <AT86_read_bytes_from_reg+0x50>)
  400ae6:	4c09      	ldr	r4, [pc, #36]	; (400b0c <AT86_read_bytes_from_reg+0x58>)
  400ae8:	47a0      	blx	r4
	while(glue_spi_in_process(at->spiDev));		
  400aea:	bf00      	nop
  400aec:	683b      	ldr	r3, [r7, #0]
  400aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400af0:	4618      	mov	r0, r3
  400af2:	4b07      	ldr	r3, [pc, #28]	; (400b10 <AT86_read_bytes_from_reg+0x5c>)
  400af4:	4798      	blx	r3
  400af6:	4603      	mov	r3, r0
  400af8:	2b00      	cmp	r3, #0
  400afa:	d1f7      	bne.n	400aec <AT86_read_bytes_from_reg+0x38>
  400afc:	bf00      	nop
  400afe:	370c      	adds	r7, #12
  400b00:	46bd      	mov	sp, r7
  400b02:	bd90      	pop	{r4, r7, pc}
  400b04:	204000d0 	.word	0x204000d0
  400b08:	204008d0 	.word	0x204008d0
  400b0c:	00401ac9 	.word	0x00401ac9
  400b10:	00401b1d 	.word	0x00401b1d

00400b14 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  400b14:	b580      	push	{r7, lr}
  400b16:	af00      	add	r7, sp, #0
	system_init();
  400b18:	4b01      	ldr	r3, [pc, #4]	; (400b20 <atmel_start_init+0xc>)
  400b1a:	4798      	blx	r3
}
  400b1c:	bf00      	nop
  400b1e:	bd80      	pop	{r7, pc}
  400b20:	00401599 	.word	0x00401599

00400b24 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400b24:	b580      	push	{r7, lr}
  400b26:	b082      	sub	sp, #8
  400b28:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  400b2a:	4b16      	ldr	r3, [pc, #88]	; (400b84 <Reset_Handler+0x60>)
  400b2c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  400b2e:	4b16      	ldr	r3, [pc, #88]	; (400b88 <Reset_Handler+0x64>)
  400b30:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  400b32:	687a      	ldr	r2, [r7, #4]
  400b34:	683b      	ldr	r3, [r7, #0]
  400b36:	429a      	cmp	r2, r3
  400b38:	d00c      	beq.n	400b54 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  400b3a:	e007      	b.n	400b4c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  400b3c:	683b      	ldr	r3, [r7, #0]
  400b3e:	1d1a      	adds	r2, r3, #4
  400b40:	603a      	str	r2, [r7, #0]
  400b42:	687a      	ldr	r2, [r7, #4]
  400b44:	1d11      	adds	r1, r2, #4
  400b46:	6079      	str	r1, [r7, #4]
  400b48:	6812      	ldr	r2, [r2, #0]
  400b4a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  400b4c:	683b      	ldr	r3, [r7, #0]
  400b4e:	4a0f      	ldr	r2, [pc, #60]	; (400b8c <Reset_Handler+0x68>)
  400b50:	4293      	cmp	r3, r2
  400b52:	d3f3      	bcc.n	400b3c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400b54:	4b0e      	ldr	r3, [pc, #56]	; (400b90 <Reset_Handler+0x6c>)
  400b56:	603b      	str	r3, [r7, #0]
  400b58:	e004      	b.n	400b64 <Reset_Handler+0x40>
                *pDest++ = 0;
  400b5a:	683b      	ldr	r3, [r7, #0]
  400b5c:	1d1a      	adds	r2, r3, #4
  400b5e:	603a      	str	r2, [r7, #0]
  400b60:	2200      	movs	r2, #0
  400b62:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400b64:	683b      	ldr	r3, [r7, #0]
  400b66:	4a0b      	ldr	r2, [pc, #44]	; (400b94 <Reset_Handler+0x70>)
  400b68:	4293      	cmp	r3, r2
  400b6a:	d3f6      	bcc.n	400b5a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400b6c:	4b0a      	ldr	r3, [pc, #40]	; (400b98 <Reset_Handler+0x74>)
  400b6e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400b70:	4a0a      	ldr	r2, [pc, #40]	; (400b9c <Reset_Handler+0x78>)
  400b72:	687b      	ldr	r3, [r7, #4]
  400b74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400b78:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  400b7a:	4b09      	ldr	r3, [pc, #36]	; (400ba0 <Reset_Handler+0x7c>)
  400b7c:	4798      	blx	r3

        /* Branch to main function */
        main();
  400b7e:	4b09      	ldr	r3, [pc, #36]	; (400ba4 <Reset_Handler+0x80>)
  400b80:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400b82:	e7fe      	b.n	400b82 <Reset_Handler+0x5e>
  400b84:	00407df4 	.word	0x00407df4
  400b88:	20400000 	.word	0x20400000
  400b8c:	20400020 	.word	0x20400020
  400b90:	20400020 	.word	0x20400020
  400b94:	2040144c 	.word	0x2040144c
  400b98:	00400000 	.word	0x00400000
  400b9c:	e000ed00 	.word	0xe000ed00
  400ba0:	00407a8d 	.word	0x00407a8d
  400ba4:	004079fd 	.word	0x004079fd

00400ba8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ba8:	b480      	push	{r7}
  400baa:	af00      	add	r7, sp, #0
        while (1) {
  400bac:	e7fe      	b.n	400bac <Dummy_Handler+0x4>

00400bae <hri_matrix_set_CCFG_SYSIO_reg>:
	((Matrix *)hw)->CCFG_SYSIO ^= CCFG_SYSIO_SYSIO12;
	MATRIX_CRITICAL_SECTION_LEAVE();
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
  400bae:	b480      	push	{r7}
  400bb0:	b083      	sub	sp, #12
  400bb2:	af00      	add	r7, sp, #0
  400bb4:	6078      	str	r0, [r7, #4]
  400bb6:	6039      	str	r1, [r7, #0]
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400bb8:	687b      	ldr	r3, [r7, #4]
  400bba:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400bbe:	683b      	ldr	r3, [r7, #0]
  400bc0:	431a      	orrs	r2, r3
  400bc2:	687b      	ldr	r3, [r7, #4]
  400bc4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	MATRIX_CRITICAL_SECTION_LEAVE();
}
  400bc8:	bf00      	nop
  400bca:	370c      	adds	r7, #12
  400bcc:	46bd      	mov	sp, r7
  400bce:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd2:	4770      	bx	lr

00400bd4 <hri_pio_set_PSR_reg>:
{
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400bd4:	b480      	push	{r7}
  400bd6:	b083      	sub	sp, #12
  400bd8:	af00      	add	r7, sp, #0
  400bda:	6078      	str	r0, [r7, #4]
  400bdc:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  400bde:	687b      	ldr	r3, [r7, #4]
  400be0:	683a      	ldr	r2, [r7, #0]
  400be2:	601a      	str	r2, [r3, #0]
}
  400be4:	bf00      	nop
  400be6:	370c      	adds	r7, #12
  400be8:	46bd      	mov	sp, r7
  400bea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bee:	4770      	bx	lr

00400bf0 <hri_pio_clear_PSR_reg>:
	((Pio *)hw)->PIO_PER = data;
	((Pio *)hw)->PIO_PDR = ~data;
}

static inline void hri_pio_clear_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400bf0:	b480      	push	{r7}
  400bf2:	b083      	sub	sp, #12
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	6078      	str	r0, [r7, #4]
  400bf8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  400bfa:	687b      	ldr	r3, [r7, #4]
  400bfc:	683a      	ldr	r2, [r7, #0]
  400bfe:	605a      	str	r2, [r3, #4]
}
  400c00:	bf00      	nop
  400c02:	370c      	adds	r7, #12
  400c04:	46bd      	mov	sp, r7
  400c06:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c0a:	4770      	bx	lr

00400c0c <hri_pio_set_OSR_reg>:
{
	((Pio *)hw)->PIO_ODR = PIO_OSR_P31;
}

static inline void hri_pio_set_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400c0c:	b480      	push	{r7}
  400c0e:	b083      	sub	sp, #12
  400c10:	af00      	add	r7, sp, #0
  400c12:	6078      	str	r0, [r7, #4]
  400c14:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  400c16:	687b      	ldr	r3, [r7, #4]
  400c18:	683a      	ldr	r2, [r7, #0]
  400c1a:	611a      	str	r2, [r3, #16]
}
  400c1c:	bf00      	nop
  400c1e:	370c      	adds	r7, #12
  400c20:	46bd      	mov	sp, r7
  400c22:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c26:	4770      	bx	lr

00400c28 <hri_pio_clear_OSR_reg>:
	((Pio *)hw)->PIO_OER = data;
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  400c28:	b480      	push	{r7}
  400c2a:	b083      	sub	sp, #12
  400c2c:	af00      	add	r7, sp, #0
  400c2e:	6078      	str	r0, [r7, #4]
  400c30:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  400c32:	687b      	ldr	r3, [r7, #4]
  400c34:	683a      	ldr	r2, [r7, #0]
  400c36:	615a      	str	r2, [r3, #20]
}
  400c38:	bf00      	nop
  400c3a:	370c      	adds	r7, #12
  400c3c:	46bd      	mov	sp, r7
  400c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c42:	4770      	bx	lr

00400c44 <hri_pio_set_ODSR_reg>:
{
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400c44:	b480      	push	{r7}
  400c46:	b083      	sub	sp, #12
  400c48:	af00      	add	r7, sp, #0
  400c4a:	6078      	str	r0, [r7, #4]
  400c4c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  400c4e:	687b      	ldr	r3, [r7, #4]
  400c50:	683a      	ldr	r2, [r7, #0]
  400c52:	631a      	str	r2, [r3, #48]	; 0x30
}
  400c54:	bf00      	nop
  400c56:	370c      	adds	r7, #12
  400c58:	46bd      	mov	sp, r7
  400c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c5e:	4770      	bx	lr

00400c60 <hri_pio_clear_ODSR_reg>:
	((Pio *)hw)->PIO_SODR = data;
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400c60:	b480      	push	{r7}
  400c62:	b083      	sub	sp, #12
  400c64:	af00      	add	r7, sp, #0
  400c66:	6078      	str	r0, [r7, #4]
  400c68:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	683a      	ldr	r2, [r7, #0]
  400c6e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400c70:	bf00      	nop
  400c72:	370c      	adds	r7, #12
  400c74:	46bd      	mov	sp, r7
  400c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c7a:	4770      	bx	lr

00400c7c <hri_pio_set_PUSR_reg>:
{
	((Pio *)hw)->PIO_PUDR = PIO_PUSR_P31;
}

static inline void hri_pio_set_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400c7c:	b480      	push	{r7}
  400c7e:	b083      	sub	sp, #12
  400c80:	af00      	add	r7, sp, #0
  400c82:	6078      	str	r0, [r7, #4]
  400c84:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUER = mask;
  400c86:	687b      	ldr	r3, [r7, #4]
  400c88:	683a      	ldr	r2, [r7, #0]
  400c8a:	665a      	str	r2, [r3, #100]	; 0x64
}
  400c8c:	bf00      	nop
  400c8e:	370c      	adds	r7, #12
  400c90:	46bd      	mov	sp, r7
  400c92:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c96:	4770      	bx	lr

00400c98 <hri_pio_clear_PUSR_reg>:
	((Pio *)hw)->PIO_PUER = data;
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400c98:	b480      	push	{r7}
  400c9a:	b083      	sub	sp, #12
  400c9c:	af00      	add	r7, sp, #0
  400c9e:	6078      	str	r0, [r7, #4]
  400ca0:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUDR = mask;
  400ca2:	687b      	ldr	r3, [r7, #4]
  400ca4:	683a      	ldr	r2, [r7, #0]
  400ca6:	661a      	str	r2, [r3, #96]	; 0x60
}
  400ca8:	bf00      	nop
  400caa:	370c      	adds	r7, #12
  400cac:	46bd      	mov	sp, r7
  400cae:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cb2:	4770      	bx	lr

00400cb4 <hri_pio_set_PPDSR_reg>:
{
	((Pio *)hw)->PIO_PPDDR = PIO_PPDSR_P31;
}

static inline void hri_pio_set_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  400cb4:	b480      	push	{r7}
  400cb6:	b083      	sub	sp, #12
  400cb8:	af00      	add	r7, sp, #0
  400cba:	6078      	str	r0, [r7, #4]
  400cbc:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDER = mask;
  400cbe:	687b      	ldr	r3, [r7, #4]
  400cc0:	683a      	ldr	r2, [r7, #0]
  400cc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
  400cc6:	bf00      	nop
  400cc8:	370c      	adds	r7, #12
  400cca:	46bd      	mov	sp, r7
  400ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd0:	4770      	bx	lr

00400cd2 <hri_pio_clear_PPDSR_reg>:
	((Pio *)hw)->PIO_PPDER = data;
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  400cd2:	b480      	push	{r7}
  400cd4:	b083      	sub	sp, #12
  400cd6:	af00      	add	r7, sp, #0
  400cd8:	6078      	str	r0, [r7, #4]
  400cda:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDDR = mask;
  400cdc:	687b      	ldr	r3, [r7, #4]
  400cde:	683a      	ldr	r2, [r7, #0]
  400ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  400ce4:	bf00      	nop
  400ce6:	370c      	adds	r7, #12
  400ce8:	46bd      	mov	sp, r7
  400cea:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cee:	4770      	bx	lr

00400cf0 <hri_pio_set_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] ^= PIO_ABCDSR_P31;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400cf0:	b480      	push	{r7}
  400cf2:	b085      	sub	sp, #20
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	60f8      	str	r0, [r7, #12]
  400cf8:	460b      	mov	r3, r1
  400cfa:	607a      	str	r2, [r7, #4]
  400cfc:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400cfe:	7afa      	ldrb	r2, [r7, #11]
  400d00:	7af9      	ldrb	r1, [r7, #11]
  400d02:	68fb      	ldr	r3, [r7, #12]
  400d04:	311c      	adds	r1, #28
  400d06:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400d0a:	687b      	ldr	r3, [r7, #4]
  400d0c:	4319      	orrs	r1, r3
  400d0e:	68fb      	ldr	r3, [r7, #12]
  400d10:	321c      	adds	r2, #28
  400d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400d16:	bf00      	nop
  400d18:	3714      	adds	r7, #20
  400d1a:	46bd      	mov	sp, r7
  400d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d20:	4770      	bx	lr

00400d22 <hri_pio_clear_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] = data;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400d22:	b480      	push	{r7}
  400d24:	b085      	sub	sp, #20
  400d26:	af00      	add	r7, sp, #0
  400d28:	60f8      	str	r0, [r7, #12]
  400d2a:	460b      	mov	r3, r1
  400d2c:	607a      	str	r2, [r7, #4]
  400d2e:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400d30:	7afa      	ldrb	r2, [r7, #11]
  400d32:	7af9      	ldrb	r1, [r7, #11]
  400d34:	68fb      	ldr	r3, [r7, #12]
  400d36:	311c      	adds	r1, #28
  400d38:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400d3c:	687b      	ldr	r3, [r7, #4]
  400d3e:	43db      	mvns	r3, r3
  400d40:	4019      	ands	r1, r3
  400d42:	68fb      	ldr	r3, [r7, #12]
  400d44:	321c      	adds	r2, #28
  400d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400d4a:	bf00      	nop
  400d4c:	3714      	adds	r7, #20
  400d4e:	46bd      	mov	sp, r7
  400d50:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d54:	4770      	bx	lr

00400d56 <hri_pmc_set_PCSR0_reg>:
{
	((Pmc *)hw)->PMC_PCDR0 = PMC_PCSR0_PID31;
}

static inline void hri_pmc_set_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  400d56:	b480      	push	{r7}
  400d58:	b083      	sub	sp, #12
  400d5a:	af00      	add	r7, sp, #0
  400d5c:	6078      	str	r0, [r7, #4]
  400d5e:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  400d60:	687b      	ldr	r3, [r7, #4]
  400d62:	683a      	ldr	r2, [r7, #0]
  400d64:	611a      	str	r2, [r3, #16]
}
  400d66:	bf00      	nop
  400d68:	370c      	adds	r7, #12
  400d6a:	46bd      	mov	sp, r7
  400d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d70:	4770      	bx	lr

00400d72 <hri_pmc_get_PCSR0_reg>:

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  400d72:	b480      	push	{r7}
  400d74:	b085      	sub	sp, #20
  400d76:	af00      	add	r7, sp, #0
  400d78:	6078      	str	r0, [r7, #4]
  400d7a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	699b      	ldr	r3, [r3, #24]
  400d80:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400d82:	68fa      	ldr	r2, [r7, #12]
  400d84:	683b      	ldr	r3, [r7, #0]
  400d86:	4013      	ands	r3, r2
  400d88:	60fb      	str	r3, [r7, #12]
	return tmp;
  400d8a:	68fb      	ldr	r3, [r7, #12]
}
  400d8c:	4618      	mov	r0, r3
  400d8e:	3714      	adds	r7, #20
  400d90:	46bd      	mov	sp, r7
  400d92:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d96:	4770      	bx	lr

00400d98 <hri_pmc_set_PCSR1_reg>:
{
	((Pmc *)hw)->PMC_PCDR1 = PMC_PCSR1_PID60;
}

static inline void hri_pmc_set_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  400d98:	b480      	push	{r7}
  400d9a:	b083      	sub	sp, #12
  400d9c:	af00      	add	r7, sp, #0
  400d9e:	6078      	str	r0, [r7, #4]
  400da0:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  400da2:	687b      	ldr	r3, [r7, #4]
  400da4:	683a      	ldr	r2, [r7, #0]
  400da6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  400daa:	bf00      	nop
  400dac:	370c      	adds	r7, #12
  400dae:	46bd      	mov	sp, r7
  400db0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400db4:	4770      	bx	lr

00400db6 <hri_pmc_get_PCSR1_reg>:

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  400db6:	b480      	push	{r7}
  400db8:	b085      	sub	sp, #20
  400dba:	af00      	add	r7, sp, #0
  400dbc:	6078      	str	r0, [r7, #4]
  400dbe:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400dc0:	687b      	ldr	r3, [r7, #4]
  400dc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400dc6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400dc8:	68fa      	ldr	r2, [r7, #12]
  400dca:	683b      	ldr	r3, [r7, #0]
  400dcc:	4013      	ands	r3, r2
  400dce:	60fb      	str	r3, [r7, #12]
	return tmp;
  400dd0:	68fb      	ldr	r3, [r7, #12]
}
  400dd2:	4618      	mov	r0, r3
  400dd4:	3714      	adds	r7, #20
  400dd6:	46bd      	mov	sp, r7
  400dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ddc:	4770      	bx	lr

00400dde <hri_pmc_write_PCR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_PCR_reg(const void *const hw, hri_pmc_pcr_reg_t data)
{
  400dde:	b480      	push	{r7}
  400de0:	b083      	sub	sp, #12
  400de2:	af00      	add	r7, sp, #0
  400de4:	6078      	str	r0, [r7, #4]
  400de6:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCR = data;
  400de8:	687b      	ldr	r3, [r7, #4]
  400dea:	683a      	ldr	r2, [r7, #0]
  400dec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC_CRITICAL_SECTION_LEAVE();
}
  400df0:	bf00      	nop
  400df2:	370c      	adds	r7, #12
  400df4:	46bd      	mov	sp, r7
  400df6:	f85d 7b04 	ldr.w	r7, [sp], #4
  400dfa:	4770      	bx	lr

00400dfc <hri_pmc_read_PCR_reg>:
	((Pmc *)hw)->PMC_PCR ^= mask;
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_pcr_reg_t hri_pmc_read_PCR_reg(const void *const hw)
{
  400dfc:	b480      	push	{r7}
  400dfe:	b083      	sub	sp, #12
  400e00:	af00      	add	r7, sp, #0
  400e02:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  400e04:	687b      	ldr	r3, [r7, #4]
  400e06:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  400e0a:	4618      	mov	r0, r3
  400e0c:	370c      	adds	r7, #12
  400e0e:	46bd      	mov	sp, r7
  400e10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e14:	4770      	bx	lr

00400e16 <hri_wdt_set_MR_WDDIS_bit>:
	((Wdt *)hw)->WDT_MR ^= WDT_MR_WDRSTEN;
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
  400e16:	b480      	push	{r7}
  400e18:	b083      	sub	sp, #12
  400e1a:	af00      	add	r7, sp, #0
  400e1c:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400e1e:	687b      	ldr	r3, [r7, #4]
  400e20:	685b      	ldr	r3, [r3, #4]
  400e22:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  400e26:	687b      	ldr	r3, [r7, #4]
  400e28:	605a      	str	r2, [r3, #4]
	WDT_CRITICAL_SECTION_LEAVE();
}
  400e2a:	bf00      	nop
  400e2c:	370c      	adds	r7, #12
  400e2e:	46bd      	mov	sp, r7
  400e30:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e34:	4770      	bx	lr
	...

00400e38 <port_to_reg>:

/**
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
  400e38:	b480      	push	{r7}
  400e3a:	b083      	sub	sp, #12
  400e3c:	af00      	add	r7, sp, #0
  400e3e:	4603      	mov	r3, r0
  400e40:	71fb      	strb	r3, [r7, #7]
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  400e42:	79fb      	ldrb	r3, [r7, #7]
  400e44:	025b      	lsls	r3, r3, #9
  400e46:	461a      	mov	r2, r3
  400e48:	4b03      	ldr	r3, [pc, #12]	; (400e58 <port_to_reg+0x20>)
  400e4a:	4413      	add	r3, r2
}
  400e4c:	4618      	mov	r0, r3
  400e4e:	370c      	adds	r7, #12
  400e50:	46bd      	mov	sp, r7
  400e52:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e56:	4770      	bx	lr
  400e58:	400e0e00 	.word	0x400e0e00

00400e5c <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
  400e5c:	b580      	push	{r7, lr}
  400e5e:	b084      	sub	sp, #16
  400e60:	af00      	add	r7, sp, #0
  400e62:	4603      	mov	r3, r0
  400e64:	6039      	str	r1, [r7, #0]
  400e66:	71fb      	strb	r3, [r7, #7]
  400e68:	4613      	mov	r3, r2
  400e6a:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400e6c:	79fb      	ldrb	r3, [r7, #7]
  400e6e:	4618      	mov	r0, r3
  400e70:	4b0e      	ldr	r3, [pc, #56]	; (400eac <_gpio_set_direction+0x50>)
  400e72:	4798      	blx	r3
  400e74:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  400e76:	79bb      	ldrb	r3, [r7, #6]
  400e78:	2b00      	cmp	r3, #0
  400e7a:	db0e      	blt.n	400e9a <_gpio_set_direction+0x3e>
  400e7c:	2b01      	cmp	r3, #1
  400e7e:	dd02      	ble.n	400e86 <_gpio_set_direction+0x2a>
  400e80:	2b02      	cmp	r3, #2
  400e82:	d005      	beq.n	400e90 <_gpio_set_direction+0x34>
  400e84:	e009      	b.n	400e9a <_gpio_set_direction+0x3e>
	case GPIO_DIRECTION_OFF:
	case GPIO_DIRECTION_IN:
		hri_pio_clear_OSR_reg(hw, mask);
  400e86:	6839      	ldr	r1, [r7, #0]
  400e88:	68f8      	ldr	r0, [r7, #12]
  400e8a:	4b09      	ldr	r3, [pc, #36]	; (400eb0 <_gpio_set_direction+0x54>)
  400e8c:	4798      	blx	r3
		break;
  400e8e:	e009      	b.n	400ea4 <_gpio_set_direction+0x48>

	case GPIO_DIRECTION_OUT:
		hri_pio_set_OSR_reg(hw, mask);
  400e90:	6839      	ldr	r1, [r7, #0]
  400e92:	68f8      	ldr	r0, [r7, #12]
  400e94:	4b07      	ldr	r3, [pc, #28]	; (400eb4 <_gpio_set_direction+0x58>)
  400e96:	4798      	blx	r3
		break;
  400e98:	e004      	b.n	400ea4 <_gpio_set_direction+0x48>

	default:
		ASSERT(false);
  400e9a:	2241      	movs	r2, #65	; 0x41
  400e9c:	4906      	ldr	r1, [pc, #24]	; (400eb8 <_gpio_set_direction+0x5c>)
  400e9e:	2000      	movs	r0, #0
  400ea0:	4b06      	ldr	r3, [pc, #24]	; (400ebc <_gpio_set_direction+0x60>)
  400ea2:	4798      	blx	r3
	}
}
  400ea4:	bf00      	nop
  400ea6:	3710      	adds	r7, #16
  400ea8:	46bd      	mov	sp, r7
  400eaa:	bd80      	pop	{r7, pc}
  400eac:	00400e39 	.word	0x00400e39
  400eb0:	00400c29 	.word	0x00400c29
  400eb4:	00400c0d 	.word	0x00400c0d
  400eb8:	00407afc 	.word	0x00407afc
  400ebc:	00402d41 	.word	0x00402d41

00400ec0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
  400ec0:	b580      	push	{r7, lr}
  400ec2:	b084      	sub	sp, #16
  400ec4:	af00      	add	r7, sp, #0
  400ec6:	4603      	mov	r3, r0
  400ec8:	6039      	str	r1, [r7, #0]
  400eca:	71fb      	strb	r3, [r7, #7]
  400ecc:	4613      	mov	r3, r2
  400ece:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400ed0:	79fb      	ldrb	r3, [r7, #7]
  400ed2:	4618      	mov	r0, r3
  400ed4:	4b09      	ldr	r3, [pc, #36]	; (400efc <_gpio_set_level+0x3c>)
  400ed6:	4798      	blx	r3
  400ed8:	60f8      	str	r0, [r7, #12]
	if (level) {
  400eda:	79bb      	ldrb	r3, [r7, #6]
  400edc:	2b00      	cmp	r3, #0
  400ede:	d004      	beq.n	400eea <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  400ee0:	6839      	ldr	r1, [r7, #0]
  400ee2:	68f8      	ldr	r0, [r7, #12]
  400ee4:	4b06      	ldr	r3, [pc, #24]	; (400f00 <_gpio_set_level+0x40>)
  400ee6:	4798      	blx	r3
	} else {
		hri_pio_clear_ODSR_reg(hw, mask);
	}
}
  400ee8:	e003      	b.n	400ef2 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  400eea:	6839      	ldr	r1, [r7, #0]
  400eec:	68f8      	ldr	r0, [r7, #12]
  400eee:	4b05      	ldr	r3, [pc, #20]	; (400f04 <_gpio_set_level+0x44>)
  400ef0:	4798      	blx	r3
}
  400ef2:	bf00      	nop
  400ef4:	3710      	adds	r7, #16
  400ef6:	46bd      	mov	sp, r7
  400ef8:	bd80      	pop	{r7, pc}
  400efa:	bf00      	nop
  400efc:	00400e39 	.word	0x00400e39
  400f00:	00400c45 	.word	0x00400c45
  400f04:	00400c61 	.word	0x00400c61

00400f08 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
  400f08:	b580      	push	{r7, lr}
  400f0a:	b084      	sub	sp, #16
  400f0c:	af00      	add	r7, sp, #0
  400f0e:	4603      	mov	r3, r0
  400f10:	71fb      	strb	r3, [r7, #7]
  400f12:	460b      	mov	r3, r1
  400f14:	71bb      	strb	r3, [r7, #6]
  400f16:	4613      	mov	r3, r2
  400f18:	717b      	strb	r3, [r7, #5]
	void *const hw = port_to_reg(port);
  400f1a:	79fb      	ldrb	r3, [r7, #7]
  400f1c:	4618      	mov	r0, r3
  400f1e:	4b23      	ldr	r3, [pc, #140]	; (400fac <_gpio_set_pin_pull_mode+0xa4>)
  400f20:	4798      	blx	r3
  400f22:	60f8      	str	r0, [r7, #12]
	switch (pull_mode) {
  400f24:	797b      	ldrb	r3, [r7, #5]
  400f26:	2b01      	cmp	r3, #1
  400f28:	d014      	beq.n	400f54 <_gpio_set_pin_pull_mode+0x4c>
  400f2a:	2b02      	cmp	r3, #2
  400f2c:	d023      	beq.n	400f76 <_gpio_set_pin_pull_mode+0x6e>
  400f2e:	2b00      	cmp	r3, #0
  400f30:	d132      	bne.n	400f98 <_gpio_set_pin_pull_mode+0x90>
	case GPIO_PULL_OFF:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400f32:	79bb      	ldrb	r3, [r7, #6]
  400f34:	2201      	movs	r2, #1
  400f36:	fa02 f303 	lsl.w	r3, r2, r3
  400f3a:	4619      	mov	r1, r3
  400f3c:	68f8      	ldr	r0, [r7, #12]
  400f3e:	4b1c      	ldr	r3, [pc, #112]	; (400fb0 <_gpio_set_pin_pull_mode+0xa8>)
  400f40:	4798      	blx	r3
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400f42:	79bb      	ldrb	r3, [r7, #6]
  400f44:	2201      	movs	r2, #1
  400f46:	fa02 f303 	lsl.w	r3, r2, r3
  400f4a:	4619      	mov	r1, r3
  400f4c:	68f8      	ldr	r0, [r7, #12]
  400f4e:	4b19      	ldr	r3, [pc, #100]	; (400fb4 <_gpio_set_pin_pull_mode+0xac>)
  400f50:	4798      	blx	r3
		break;
  400f52:	e027      	b.n	400fa4 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_UP:
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  400f54:	79bb      	ldrb	r3, [r7, #6]
  400f56:	2201      	movs	r2, #1
  400f58:	fa02 f303 	lsl.w	r3, r2, r3
  400f5c:	4619      	mov	r1, r3
  400f5e:	68f8      	ldr	r0, [r7, #12]
  400f60:	4b14      	ldr	r3, [pc, #80]	; (400fb4 <_gpio_set_pin_pull_mode+0xac>)
  400f62:	4798      	blx	r3
		hri_pio_set_PUSR_reg(hw, 1U << pin);
  400f64:	79bb      	ldrb	r3, [r7, #6]
  400f66:	2201      	movs	r2, #1
  400f68:	fa02 f303 	lsl.w	r3, r2, r3
  400f6c:	4619      	mov	r1, r3
  400f6e:	68f8      	ldr	r0, [r7, #12]
  400f70:	4b11      	ldr	r3, [pc, #68]	; (400fb8 <_gpio_set_pin_pull_mode+0xb0>)
  400f72:	4798      	blx	r3
		break;
  400f74:	e016      	b.n	400fa4 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_DOWN:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400f76:	79bb      	ldrb	r3, [r7, #6]
  400f78:	2201      	movs	r2, #1
  400f7a:	fa02 f303 	lsl.w	r3, r2, r3
  400f7e:	4619      	mov	r1, r3
  400f80:	68f8      	ldr	r0, [r7, #12]
  400f82:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <_gpio_set_pin_pull_mode+0xa8>)
  400f84:	4798      	blx	r3
		hri_pio_set_PPDSR_reg(hw, 1U << pin);
  400f86:	79bb      	ldrb	r3, [r7, #6]
  400f88:	2201      	movs	r2, #1
  400f8a:	fa02 f303 	lsl.w	r3, r2, r3
  400f8e:	4619      	mov	r1, r3
  400f90:	68f8      	ldr	r0, [r7, #12]
  400f92:	4b0a      	ldr	r3, [pc, #40]	; (400fbc <_gpio_set_pin_pull_mode+0xb4>)
  400f94:	4798      	blx	r3
		break;
  400f96:	e005      	b.n	400fa4 <_gpio_set_pin_pull_mode+0x9c>

	default:
		ASSERT(false);
  400f98:	2283      	movs	r2, #131	; 0x83
  400f9a:	4909      	ldr	r1, [pc, #36]	; (400fc0 <_gpio_set_pin_pull_mode+0xb8>)
  400f9c:	2000      	movs	r0, #0
  400f9e:	4b09      	ldr	r3, [pc, #36]	; (400fc4 <_gpio_set_pin_pull_mode+0xbc>)
  400fa0:	4798      	blx	r3
		break;
  400fa2:	bf00      	nop
	}
}
  400fa4:	bf00      	nop
  400fa6:	3710      	adds	r7, #16
  400fa8:	46bd      	mov	sp, r7
  400faa:	bd80      	pop	{r7, pc}
  400fac:	00400e39 	.word	0x00400e39
  400fb0:	00400c99 	.word	0x00400c99
  400fb4:	00400cd3 	.word	0x00400cd3
  400fb8:	00400c7d 	.word	0x00400c7d
  400fbc:	00400cb5 	.word	0x00400cb5
  400fc0:	00407afc 	.word	0x00407afc
  400fc4:	00402d41 	.word	0x00402d41

00400fc8 <_gpio_set_pin_function>:

/**
 * \brief Set pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
  400fc8:	b580      	push	{r7, lr}
  400fca:	b084      	sub	sp, #16
  400fcc:	af00      	add	r7, sp, #0
  400fce:	6078      	str	r0, [r7, #4]
  400fd0:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  400fd2:	687b      	ldr	r3, [r7, #4]
  400fd4:	095b      	lsrs	r3, r3, #5
  400fd6:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  400fd8:	687b      	ldr	r3, [r7, #4]
  400fda:	b2db      	uxtb	r3, r3
  400fdc:	f003 031f 	and.w	r3, r3, #31
  400fe0:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  400fe2:	7bfb      	ldrb	r3, [r7, #15]
  400fe4:	4618      	mov	r0, r3
  400fe6:	4b33      	ldr	r3, [pc, #204]	; (4010b4 <_gpio_set_pin_function+0xec>)
  400fe8:	4798      	blx	r3
  400fea:	60b8      	str	r0, [r7, #8]

	if ((enum gpio_port)port == GPIO_PORTB) {
  400fec:	7bfb      	ldrb	r3, [r7, #15]
  400fee:	2b01      	cmp	r3, #1
  400ff0:	d116      	bne.n	401020 <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  400ff2:	7bbb      	ldrb	r3, [r7, #14]
  400ff4:	2b04      	cmp	r3, #4
  400ff6:	d00b      	beq.n	401010 <_gpio_set_pin_function+0x48>
  400ff8:	7bbb      	ldrb	r3, [r7, #14]
  400ffa:	2b05      	cmp	r3, #5
  400ffc:	d008      	beq.n	401010 <_gpio_set_pin_function+0x48>
  400ffe:	7bbb      	ldrb	r3, [r7, #14]
  401000:	2b06      	cmp	r3, #6
  401002:	d005      	beq.n	401010 <_gpio_set_pin_function+0x48>
  401004:	7bbb      	ldrb	r3, [r7, #14]
  401006:	2b07      	cmp	r3, #7
  401008:	d002      	beq.n	401010 <_gpio_set_pin_function+0x48>
  40100a:	7bbb      	ldrb	r3, [r7, #14]
  40100c:	2b0c      	cmp	r3, #12
  40100e:	d107      	bne.n	401020 <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  401010:	7bbb      	ldrb	r3, [r7, #14]
  401012:	2201      	movs	r2, #1
  401014:	fa02 f303 	lsl.w	r3, r2, r3
  401018:	4619      	mov	r1, r3
  40101a:	4827      	ldr	r0, [pc, #156]	; (4010b8 <_gpio_set_pin_function+0xf0>)
  40101c:	4b27      	ldr	r3, [pc, #156]	; (4010bc <_gpio_set_pin_function+0xf4>)
  40101e:	4798      	blx	r3
		}
	}

	if (function == GPIO_PIN_FUNCTION_OFF) {
  401020:	683b      	ldr	r3, [r7, #0]
  401022:	f1b3 3fff 	cmp.w	r3, #4294967295
  401026:	d108      	bne.n	40103a <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  401028:	7bbb      	ldrb	r3, [r7, #14]
  40102a:	2201      	movs	r2, #1
  40102c:	fa02 f303 	lsl.w	r3, r2, r3
  401030:	4619      	mov	r1, r3
  401032:	68b8      	ldr	r0, [r7, #8]
  401034:	4b22      	ldr	r3, [pc, #136]	; (4010c0 <_gpio_set_pin_function+0xf8>)
  401036:	4798      	blx	r3
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
		}

		hri_pio_clear_PSR_reg(hw, 1U << pin);
	}
}
  401038:	e037      	b.n	4010aa <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  40103a:	683b      	ldr	r3, [r7, #0]
  40103c:	f003 0301 	and.w	r3, r3, #1
  401040:	2b00      	cmp	r3, #0
  401042:	d009      	beq.n	401058 <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  401044:	7bbb      	ldrb	r3, [r7, #14]
  401046:	2201      	movs	r2, #1
  401048:	fa02 f303 	lsl.w	r3, r2, r3
  40104c:	461a      	mov	r2, r3
  40104e:	2100      	movs	r1, #0
  401050:	68b8      	ldr	r0, [r7, #8]
  401052:	4b1c      	ldr	r3, [pc, #112]	; (4010c4 <_gpio_set_pin_function+0xfc>)
  401054:	4798      	blx	r3
  401056:	e008      	b.n	40106a <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  401058:	7bbb      	ldrb	r3, [r7, #14]
  40105a:	2201      	movs	r2, #1
  40105c:	fa02 f303 	lsl.w	r3, r2, r3
  401060:	461a      	mov	r2, r3
  401062:	2100      	movs	r1, #0
  401064:	68b8      	ldr	r0, [r7, #8]
  401066:	4b18      	ldr	r3, [pc, #96]	; (4010c8 <_gpio_set_pin_function+0x100>)
  401068:	4798      	blx	r3
		if (function & 0x2) {
  40106a:	683b      	ldr	r3, [r7, #0]
  40106c:	f003 0302 	and.w	r3, r3, #2
  401070:	2b00      	cmp	r3, #0
  401072:	d009      	beq.n	401088 <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  401074:	7bbb      	ldrb	r3, [r7, #14]
  401076:	2201      	movs	r2, #1
  401078:	fa02 f303 	lsl.w	r3, r2, r3
  40107c:	461a      	mov	r2, r3
  40107e:	2101      	movs	r1, #1
  401080:	68b8      	ldr	r0, [r7, #8]
  401082:	4b10      	ldr	r3, [pc, #64]	; (4010c4 <_gpio_set_pin_function+0xfc>)
  401084:	4798      	blx	r3
  401086:	e008      	b.n	40109a <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  401088:	7bbb      	ldrb	r3, [r7, #14]
  40108a:	2201      	movs	r2, #1
  40108c:	fa02 f303 	lsl.w	r3, r2, r3
  401090:	461a      	mov	r2, r3
  401092:	2101      	movs	r1, #1
  401094:	68b8      	ldr	r0, [r7, #8]
  401096:	4b0c      	ldr	r3, [pc, #48]	; (4010c8 <_gpio_set_pin_function+0x100>)
  401098:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  40109a:	7bbb      	ldrb	r3, [r7, #14]
  40109c:	2201      	movs	r2, #1
  40109e:	fa02 f303 	lsl.w	r3, r2, r3
  4010a2:	4619      	mov	r1, r3
  4010a4:	68b8      	ldr	r0, [r7, #8]
  4010a6:	4b09      	ldr	r3, [pc, #36]	; (4010cc <_gpio_set_pin_function+0x104>)
  4010a8:	4798      	blx	r3
}
  4010aa:	bf00      	nop
  4010ac:	3710      	adds	r7, #16
  4010ae:	46bd      	mov	sp, r7
  4010b0:	bd80      	pop	{r7, pc}
  4010b2:	bf00      	nop
  4010b4:	00400e39 	.word	0x00400e39
  4010b8:	40088000 	.word	0x40088000
  4010bc:	00400baf 	.word	0x00400baf
  4010c0:	00400bd5 	.word	0x00400bd5
  4010c4:	00400cf1 	.word	0x00400cf1
  4010c8:	00400d23 	.word	0x00400d23
  4010cc:	00400bf1 	.word	0x00400bf1

004010d0 <gpio_set_pin_pull_mode>:
 *                      resistor
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
  4010d0:	b580      	push	{r7, lr}
  4010d2:	b082      	sub	sp, #8
  4010d4:	af00      	add	r7, sp, #0
  4010d6:	4603      	mov	r3, r0
  4010d8:	460a      	mov	r2, r1
  4010da:	71fb      	strb	r3, [r7, #7]
  4010dc:	4613      	mov	r3, r2
  4010de:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
  4010e0:	79fb      	ldrb	r3, [r7, #7]
  4010e2:	095b      	lsrs	r3, r3, #5
  4010e4:	b2d8      	uxtb	r0, r3
  4010e6:	79fb      	ldrb	r3, [r7, #7]
  4010e8:	f003 031f 	and.w	r3, r3, #31
  4010ec:	b2db      	uxtb	r3, r3
  4010ee:	79ba      	ldrb	r2, [r7, #6]
  4010f0:	4619      	mov	r1, r3
  4010f2:	4b03      	ldr	r3, [pc, #12]	; (401100 <gpio_set_pin_pull_mode+0x30>)
  4010f4:	4798      	blx	r3
}
  4010f6:	bf00      	nop
  4010f8:	3708      	adds	r7, #8
  4010fa:	46bd      	mov	sp, r7
  4010fc:	bd80      	pop	{r7, pc}
  4010fe:	bf00      	nop
  401100:	00400f09 	.word	0x00400f09

00401104 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
  401104:	b580      	push	{r7, lr}
  401106:	b082      	sub	sp, #8
  401108:	af00      	add	r7, sp, #0
  40110a:	6078      	str	r0, [r7, #4]
  40110c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  40110e:	6839      	ldr	r1, [r7, #0]
  401110:	6878      	ldr	r0, [r7, #4]
  401112:	4b03      	ldr	r3, [pc, #12]	; (401120 <gpio_set_pin_function+0x1c>)
  401114:	4798      	blx	r3
}
  401116:	bf00      	nop
  401118:	3708      	adds	r7, #8
  40111a:	46bd      	mov	sp, r7
  40111c:	bd80      	pop	{r7, pc}
  40111e:	bf00      	nop
  401120:	00400fc9 	.word	0x00400fc9

00401124 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
  401124:	b580      	push	{r7, lr}
  401126:	b082      	sub	sp, #8
  401128:	af00      	add	r7, sp, #0
  40112a:	4603      	mov	r3, r0
  40112c:	460a      	mov	r2, r1
  40112e:	71fb      	strb	r3, [r7, #7]
  401130:	4613      	mov	r3, r2
  401132:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  401134:	79fb      	ldrb	r3, [r7, #7]
  401136:	095b      	lsrs	r3, r3, #5
  401138:	b2d8      	uxtb	r0, r3
  40113a:	79fb      	ldrb	r3, [r7, #7]
  40113c:	f003 031f 	and.w	r3, r3, #31
  401140:	2201      	movs	r2, #1
  401142:	fa02 f303 	lsl.w	r3, r2, r3
  401146:	79ba      	ldrb	r2, [r7, #6]
  401148:	4619      	mov	r1, r3
  40114a:	4b03      	ldr	r3, [pc, #12]	; (401158 <gpio_set_pin_direction+0x34>)
  40114c:	4798      	blx	r3
}
  40114e:	bf00      	nop
  401150:	3708      	adds	r7, #8
  401152:	46bd      	mov	sp, r7
  401154:	bd80      	pop	{r7, pc}
  401156:	bf00      	nop
  401158:	00400e5d 	.word	0x00400e5d

0040115c <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
  40115c:	b580      	push	{r7, lr}
  40115e:	b082      	sub	sp, #8
  401160:	af00      	add	r7, sp, #0
  401162:	4603      	mov	r3, r0
  401164:	460a      	mov	r2, r1
  401166:	71fb      	strb	r3, [r7, #7]
  401168:	4613      	mov	r3, r2
  40116a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  40116c:	79fb      	ldrb	r3, [r7, #7]
  40116e:	095b      	lsrs	r3, r3, #5
  401170:	b2d8      	uxtb	r0, r3
  401172:	79fb      	ldrb	r3, [r7, #7]
  401174:	f003 031f 	and.w	r3, r3, #31
  401178:	2201      	movs	r2, #1
  40117a:	fa02 f303 	lsl.w	r3, r2, r3
  40117e:	79ba      	ldrb	r2, [r7, #6]
  401180:	4619      	mov	r1, r3
  401182:	4b03      	ldr	r3, [pc, #12]	; (401190 <gpio_set_pin_level+0x34>)
  401184:	4798      	blx	r3
}
  401186:	bf00      	nop
  401188:	3708      	adds	r7, #8
  40118a:	46bd      	mov	sp, r7
  40118c:	bd80      	pop	{r7, pc}
  40118e:	bf00      	nop
  401190:	00400ec1 	.word	0x00400ec1

00401194 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
  401194:	b580      	push	{r7, lr}
  401196:	af00      	add	r7, sp, #0
	_init_chip();
  401198:	4b01      	ldr	r3, [pc, #4]	; (4011a0 <init_mcu+0xc>)
  40119a:	4798      	blx	r3
}
  40119c:	bf00      	nop
  40119e:	bd80      	pop	{r7, pc}
  4011a0:	00403339 	.word	0x00403339

004011a4 <_pmc_enable_periph_clock>:
 *
 * \param periph_id Peripheral ID
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
  4011a4:	b580      	push	{r7, lr}
  4011a6:	b084      	sub	sp, #16
  4011a8:	af00      	add	r7, sp, #0
  4011aa:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  4011ac:	687b      	ldr	r3, [r7, #4]
  4011ae:	2b1f      	cmp	r3, #31
  4011b0:	d813      	bhi.n	4011da <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  4011b2:	2201      	movs	r2, #1
  4011b4:	687b      	ldr	r3, [r7, #4]
  4011b6:	fa02 f303 	lsl.w	r3, r2, r3
  4011ba:	4619      	mov	r1, r3
  4011bc:	481f      	ldr	r0, [pc, #124]	; (40123c <_pmc_enable_periph_clock+0x98>)
  4011be:	4b20      	ldr	r3, [pc, #128]	; (401240 <_pmc_enable_periph_clock+0x9c>)
  4011c0:	4798      	blx	r3
  4011c2:	4603      	mov	r3, r0
  4011c4:	2b00      	cmp	r3, #0
  4011c6:	d135      	bne.n	401234 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  4011c8:	2201      	movs	r2, #1
  4011ca:	687b      	ldr	r3, [r7, #4]
  4011cc:	fa02 f303 	lsl.w	r3, r2, r3
  4011d0:	4619      	mov	r1, r3
  4011d2:	481a      	ldr	r0, [pc, #104]	; (40123c <_pmc_enable_periph_clock+0x98>)
  4011d4:	4b1b      	ldr	r3, [pc, #108]	; (401244 <_pmc_enable_periph_clock+0xa0>)
  4011d6:	4798      	blx	r3
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
		tmp = hri_pmc_read_PCR_reg(PMC);
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
		hri_pmc_write_PCR_reg(PMC, tmp);
	}
}
  4011d8:	e02c      	b.n	401234 <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  4011da:	687b      	ldr	r3, [r7, #4]
  4011dc:	2b3f      	cmp	r3, #63	; 0x3f
  4011de:	d816      	bhi.n	40120e <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  4011e0:	687b      	ldr	r3, [r7, #4]
  4011e2:	3b20      	subs	r3, #32
  4011e4:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4011e6:	2201      	movs	r2, #1
  4011e8:	687b      	ldr	r3, [r7, #4]
  4011ea:	fa02 f303 	lsl.w	r3, r2, r3
  4011ee:	4619      	mov	r1, r3
  4011f0:	4812      	ldr	r0, [pc, #72]	; (40123c <_pmc_enable_periph_clock+0x98>)
  4011f2:	4b15      	ldr	r3, [pc, #84]	; (401248 <_pmc_enable_periph_clock+0xa4>)
  4011f4:	4798      	blx	r3
  4011f6:	4603      	mov	r3, r0
  4011f8:	2b00      	cmp	r3, #0
  4011fa:	d11b      	bne.n	401234 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  4011fc:	2201      	movs	r2, #1
  4011fe:	687b      	ldr	r3, [r7, #4]
  401200:	fa02 f303 	lsl.w	r3, r2, r3
  401204:	4619      	mov	r1, r3
  401206:	480d      	ldr	r0, [pc, #52]	; (40123c <_pmc_enable_periph_clock+0x98>)
  401208:	4b10      	ldr	r3, [pc, #64]	; (40124c <_pmc_enable_periph_clock+0xa8>)
  40120a:	4798      	blx	r3
}
  40120c:	e012      	b.n	401234 <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  40120e:	687b      	ldr	r3, [r7, #4]
  401210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401214:	4619      	mov	r1, r3
  401216:	4809      	ldr	r0, [pc, #36]	; (40123c <_pmc_enable_periph_clock+0x98>)
  401218:	4b0d      	ldr	r3, [pc, #52]	; (401250 <_pmc_enable_periph_clock+0xac>)
  40121a:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  40121c:	4807      	ldr	r0, [pc, #28]	; (40123c <_pmc_enable_periph_clock+0x98>)
  40121e:	4b0d      	ldr	r3, [pc, #52]	; (401254 <_pmc_enable_periph_clock+0xb0>)
  401220:	4798      	blx	r3
  401222:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  401224:	68fb      	ldr	r3, [r7, #12]
  401226:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  40122a:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  40122c:	68f9      	ldr	r1, [r7, #12]
  40122e:	4803      	ldr	r0, [pc, #12]	; (40123c <_pmc_enable_periph_clock+0x98>)
  401230:	4b07      	ldr	r3, [pc, #28]	; (401250 <_pmc_enable_periph_clock+0xac>)
  401232:	4798      	blx	r3
}
  401234:	bf00      	nop
  401236:	3710      	adds	r7, #16
  401238:	46bd      	mov	sp, r7
  40123a:	bd80      	pop	{r7, pc}
  40123c:	400e0600 	.word	0x400e0600
  401240:	00400d73 	.word	0x00400d73
  401244:	00400d57 	.word	0x00400d57
  401248:	00400db7 	.word	0x00400db7
  40124c:	00400d99 	.word	0x00400d99
  401250:	00400ddf 	.word	0x00400ddf
  401254:	00400dfd 	.word	0x00400dfd

00401258 <DAC_0_PORT_init>:
struct i2c_m_sync_desc I2C_INSTANCE;

struct usart_sync_descriptor USART_0;

void DAC_0_PORT_init(void)
{
  401258:	b580      	push	{r7, lr}
  40125a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, GPIO_PIN_FUNCTION_OFF);
  40125c:	f04f 31ff 	mov.w	r1, #4294967295
  401260:	202d      	movs	r0, #45	; 0x2d
  401262:	4b04      	ldr	r3, [pc, #16]	; (401274 <DAC_0_PORT_init+0x1c>)
  401264:	4798      	blx	r3

	gpio_set_pin_function(PD0, GPIO_PIN_FUNCTION_OFF);
  401266:	f04f 31ff 	mov.w	r1, #4294967295
  40126a:	2060      	movs	r0, #96	; 0x60
  40126c:	4b01      	ldr	r3, [pc, #4]	; (401274 <DAC_0_PORT_init+0x1c>)
  40126e:	4798      	blx	r3
}
  401270:	bf00      	nop
  401272:	bd80      	pop	{r7, pc}
  401274:	00401105 	.word	0x00401105

00401278 <DAC_0_CLOCK_init>:

void DAC_0_CLOCK_init(void)
{
  401278:	b580      	push	{r7, lr}
  40127a:	af00      	add	r7, sp, #0

	_pmc_enable_periph_clock(ID_DACC);
  40127c:	201e      	movs	r0, #30
  40127e:	4b02      	ldr	r3, [pc, #8]	; (401288 <DAC_0_CLOCK_init+0x10>)
  401280:	4798      	blx	r3
}
  401282:	bf00      	nop
  401284:	bd80      	pop	{r7, pc}
  401286:	bf00      	nop
  401288:	004011a5 	.word	0x004011a5

0040128c <DAC_0_init>:

void DAC_0_init(void)
{
  40128c:	b580      	push	{r7, lr}
  40128e:	af00      	add	r7, sp, #0
	DAC_0_CLOCK_init();
  401290:	4b04      	ldr	r3, [pc, #16]	; (4012a4 <DAC_0_init+0x18>)
  401292:	4798      	blx	r3
	dac_sync_init(&DAC_0, DACC);
  401294:	4904      	ldr	r1, [pc, #16]	; (4012a8 <DAC_0_init+0x1c>)
  401296:	4805      	ldr	r0, [pc, #20]	; (4012ac <DAC_0_init+0x20>)
  401298:	4b05      	ldr	r3, [pc, #20]	; (4012b0 <DAC_0_init+0x24>)
  40129a:	4798      	blx	r3
	DAC_0_PORT_init();
  40129c:	4b05      	ldr	r3, [pc, #20]	; (4012b4 <DAC_0_init+0x28>)
  40129e:	4798      	blx	r3
}
  4012a0:	bf00      	nop
  4012a2:	bd80      	pop	{r7, pc}
  4012a4:	00401279 	.word	0x00401279
  4012a8:	40040000 	.word	0x40040000
  4012ac:	20401374 	.word	0x20401374
  4012b0:	00401d65 	.word	0x00401d65
  4012b4:	00401259 	.word	0x00401259

004012b8 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
  4012b8:	b580      	push	{r7, lr}
  4012ba:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PB0, GPIO_DIRECTION_IN);
  4012bc:	2101      	movs	r1, #1
  4012be:	2020      	movs	r0, #32
  4012c0:	4b06      	ldr	r3, [pc, #24]	; (4012dc <EXTERNAL_IRQ_0_init+0x24>)
  4012c2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB0,
  4012c4:	2100      	movs	r1, #0
  4012c6:	2020      	movs	r0, #32
  4012c8:	4b05      	ldr	r3, [pc, #20]	; (4012e0 <EXTERNAL_IRQ_0_init+0x28>)
  4012ca:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB0, GPIO_PIN_FUNCTION_OFF);
  4012cc:	f04f 31ff 	mov.w	r1, #4294967295
  4012d0:	2020      	movs	r0, #32
  4012d2:	4b04      	ldr	r3, [pc, #16]	; (4012e4 <EXTERNAL_IRQ_0_init+0x2c>)
  4012d4:	4798      	blx	r3
}
  4012d6:	bf00      	nop
  4012d8:	bd80      	pop	{r7, pc}
  4012da:	bf00      	nop
  4012dc:	00401125 	.word	0x00401125
  4012e0:	004010d1 	.word	0x004010d1
  4012e4:	00401105 	.word	0x00401105

004012e8 <EXTERNAL_IRQ_1_init>:

void EXTERNAL_IRQ_1_init(void)
{
  4012e8:	b580      	push	{r7, lr}
  4012ea:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PD23, GPIO_DIRECTION_IN);
  4012ec:	2101      	movs	r1, #1
  4012ee:	2077      	movs	r0, #119	; 0x77
  4012f0:	4b06      	ldr	r3, [pc, #24]	; (40130c <EXTERNAL_IRQ_1_init+0x24>)
  4012f2:	4798      	blx	r3

	gpio_set_pin_pull_mode(PD23,
  4012f4:	2100      	movs	r1, #0
  4012f6:	2077      	movs	r0, #119	; 0x77
  4012f8:	4b05      	ldr	r3, [pc, #20]	; (401310 <EXTERNAL_IRQ_1_init+0x28>)
  4012fa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PD23, GPIO_PIN_FUNCTION_OFF);
  4012fc:	f04f 31ff 	mov.w	r1, #4294967295
  401300:	2077      	movs	r0, #119	; 0x77
  401302:	4b04      	ldr	r3, [pc, #16]	; (401314 <EXTERNAL_IRQ_1_init+0x2c>)
  401304:	4798      	blx	r3
}
  401306:	bf00      	nop
  401308:	bd80      	pop	{r7, pc}
  40130a:	bf00      	nop
  40130c:	00401125 	.word	0x00401125
  401310:	004010d1 	.word	0x004010d1
  401314:	00401105 	.word	0x00401105

00401318 <SPI_1_PORT_init>:

void SPI_1_PORT_init(void)
{
  401318:	b580      	push	{r7, lr}
  40131a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD20, MUX_PD20B_SPI0_MISO);
  40131c:	2101      	movs	r1, #1
  40131e:	2074      	movs	r0, #116	; 0x74
  401320:	4b05      	ldr	r3, [pc, #20]	; (401338 <SPI_1_PORT_init+0x20>)
  401322:	4798      	blx	r3

	gpio_set_pin_function(PD21, MUX_PD21B_SPI0_MOSI);
  401324:	2101      	movs	r1, #1
  401326:	2075      	movs	r0, #117	; 0x75
  401328:	4b03      	ldr	r3, [pc, #12]	; (401338 <SPI_1_PORT_init+0x20>)
  40132a:	4798      	blx	r3

	gpio_set_pin_function(PD22, MUX_PD22B_SPI0_SPCK);
  40132c:	2101      	movs	r1, #1
  40132e:	2076      	movs	r0, #118	; 0x76
  401330:	4b01      	ldr	r3, [pc, #4]	; (401338 <SPI_1_PORT_init+0x20>)
  401332:	4798      	blx	r3
}
  401334:	bf00      	nop
  401336:	bd80      	pop	{r7, pc}
  401338:	00401105 	.word	0x00401105

0040133c <SPI_1_CLOCK_init>:

void SPI_1_CLOCK_init(void)
{
  40133c:	b580      	push	{r7, lr}
  40133e:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI0);
  401340:	2015      	movs	r0, #21
  401342:	4b02      	ldr	r3, [pc, #8]	; (40134c <SPI_1_CLOCK_init+0x10>)
  401344:	4798      	blx	r3
}
  401346:	bf00      	nop
  401348:	bd80      	pop	{r7, pc}
  40134a:	bf00      	nop
  40134c:	004011a5 	.word	0x004011a5

00401350 <SPI_1_init>:

void SPI_1_init(void)
{
  401350:	b580      	push	{r7, lr}
  401352:	af00      	add	r7, sp, #0
	SPI_1_CLOCK_init();
  401354:	4b04      	ldr	r3, [pc, #16]	; (401368 <SPI_1_init+0x18>)
  401356:	4798      	blx	r3
	spi_m_dma_init(&SPI_1, SPI0);
  401358:	4904      	ldr	r1, [pc, #16]	; (40136c <SPI_1_init+0x1c>)
  40135a:	4805      	ldr	r0, [pc, #20]	; (401370 <SPI_1_init+0x20>)
  40135c:	4b05      	ldr	r3, [pc, #20]	; (401374 <SPI_1_init+0x24>)
  40135e:	4798      	blx	r3
	SPI_1_PORT_init();
  401360:	4b05      	ldr	r3, [pc, #20]	; (401378 <SPI_1_init+0x28>)
  401362:	4798      	blx	r3
}
  401364:	bf00      	nop
  401366:	bd80      	pop	{r7, pc}
  401368:	0040133d 	.word	0x0040133d
  40136c:	40008000 	.word	0x40008000
  401370:	2040134c 	.word	0x2040134c
  401374:	00402179 	.word	0x00402179
  401378:	00401319 	.word	0x00401319

0040137c <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
  40137c:	b580      	push	{r7, lr}
  40137e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(MISO, MUX_PC26C_SPI1_MISO);
  401380:	2102      	movs	r1, #2
  401382:	205a      	movs	r0, #90	; 0x5a
  401384:	4b05      	ldr	r3, [pc, #20]	; (40139c <SPI_0_PORT_init+0x20>)
  401386:	4798      	blx	r3

	gpio_set_pin_function(MOSI, MUX_PC27C_SPI1_MOSI);
  401388:	2102      	movs	r1, #2
  40138a:	205b      	movs	r0, #91	; 0x5b
  40138c:	4b03      	ldr	r3, [pc, #12]	; (40139c <SPI_0_PORT_init+0x20>)
  40138e:	4798      	blx	r3

	gpio_set_pin_function(SCLK, MUX_PC24C_SPI1_SPCK);
  401390:	2102      	movs	r1, #2
  401392:	2058      	movs	r0, #88	; 0x58
  401394:	4b01      	ldr	r3, [pc, #4]	; (40139c <SPI_0_PORT_init+0x20>)
  401396:	4798      	blx	r3
}
  401398:	bf00      	nop
  40139a:	bd80      	pop	{r7, pc}
  40139c:	00401105 	.word	0x00401105

004013a0 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
  4013a0:	b580      	push	{r7, lr}
  4013a2:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI1);
  4013a4:	202a      	movs	r0, #42	; 0x2a
  4013a6:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <SPI_0_CLOCK_init+0x10>)
  4013a8:	4798      	blx	r3
}
  4013aa:	bf00      	nop
  4013ac:	bd80      	pop	{r7, pc}
  4013ae:	bf00      	nop
  4013b0:	004011a5 	.word	0x004011a5

004013b4 <SPI_0_init>:

void SPI_0_init(void)
{
  4013b4:	b580      	push	{r7, lr}
  4013b6:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
  4013b8:	4b04      	ldr	r3, [pc, #16]	; (4013cc <SPI_0_init+0x18>)
  4013ba:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SPI1);
  4013bc:	4904      	ldr	r1, [pc, #16]	; (4013d0 <SPI_0_init+0x1c>)
  4013be:	4805      	ldr	r0, [pc, #20]	; (4013d4 <SPI_0_init+0x20>)
  4013c0:	4b05      	ldr	r3, [pc, #20]	; (4013d8 <SPI_0_init+0x24>)
  4013c2:	4798      	blx	r3
	SPI_0_PORT_init();
  4013c4:	4b05      	ldr	r3, [pc, #20]	; (4013dc <SPI_0_init+0x28>)
  4013c6:	4798      	blx	r3
}
  4013c8:	bf00      	nop
  4013ca:	bd80      	pop	{r7, pc}
  4013cc:	004013a1 	.word	0x004013a1
  4013d0:	40058000 	.word	0x40058000
  4013d4:	20401388 	.word	0x20401388
  4013d8:	00402179 	.word	0x00402179
  4013dc:	0040137d 	.word	0x0040137d

004013e0 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
  4013e0:	b580      	push	{r7, lr}
  4013e2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA4, MUX_PA4A_TWIHS0_TWCK0);
  4013e4:	2100      	movs	r1, #0
  4013e6:	2004      	movs	r0, #4
  4013e8:	4b03      	ldr	r3, [pc, #12]	; (4013f8 <I2C_0_PORT_init+0x18>)
  4013ea:	4798      	blx	r3

	gpio_set_pin_function(PA3, MUX_PA3A_TWIHS0_TWD0);
  4013ec:	2100      	movs	r1, #0
  4013ee:	2003      	movs	r0, #3
  4013f0:	4b01      	ldr	r3, [pc, #4]	; (4013f8 <I2C_0_PORT_init+0x18>)
  4013f2:	4798      	blx	r3
}
  4013f4:	bf00      	nop
  4013f6:	bd80      	pop	{r7, pc}
  4013f8:	00401105 	.word	0x00401105

004013fc <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
  4013fc:	b580      	push	{r7, lr}
  4013fe:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS0);
  401400:	2013      	movs	r0, #19
  401402:	4b02      	ldr	r3, [pc, #8]	; (40140c <I2C_0_CLOCK_init+0x10>)
  401404:	4798      	blx	r3
}
  401406:	bf00      	nop
  401408:	bd80      	pop	{r7, pc}
  40140a:	bf00      	nop
  40140c:	004011a5 	.word	0x004011a5

00401410 <I2C_0_init>:

void I2C_0_init(void)
{
  401410:	b580      	push	{r7, lr}
  401412:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
  401414:	4b04      	ldr	r3, [pc, #16]	; (401428 <I2C_0_init+0x18>)
  401416:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  401418:	4904      	ldr	r1, [pc, #16]	; (40142c <I2C_0_init+0x1c>)
  40141a:	4805      	ldr	r0, [pc, #20]	; (401430 <I2C_0_init+0x20>)
  40141c:	4b05      	ldr	r3, [pc, #20]	; (401434 <I2C_0_init+0x24>)
  40141e:	4798      	blx	r3

	I2C_0_PORT_init();
  401420:	4b05      	ldr	r3, [pc, #20]	; (401438 <I2C_0_init+0x28>)
  401422:	4798      	blx	r3
}
  401424:	bf00      	nop
  401426:	bd80      	pop	{r7, pc}
  401428:	004013fd 	.word	0x004013fd
  40142c:	40018000 	.word	0x40018000
  401430:	2040142c 	.word	0x2040142c
  401434:	00402119 	.word	0x00402119
  401438:	004013e1 	.word	0x004013e1

0040143c <I2C_INSTANCE_PORT_init>:

void I2C_INSTANCE_PORT_init(void)
{
  40143c:	b480      	push	{r7}
  40143e:	af00      	add	r7, sp, #0
}
  401440:	bf00      	nop
  401442:	46bd      	mov	sp, r7
  401444:	f85d 7b04 	ldr.w	r7, [sp], #4
  401448:	4770      	bx	lr
	...

0040144c <I2C_INSTANCE_CLOCK_init>:

void I2C_INSTANCE_CLOCK_init(void)
{
  40144c:	b580      	push	{r7, lr}
  40144e:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS1);
  401450:	2014      	movs	r0, #20
  401452:	4b02      	ldr	r3, [pc, #8]	; (40145c <I2C_INSTANCE_CLOCK_init+0x10>)
  401454:	4798      	blx	r3
}
  401456:	bf00      	nop
  401458:	bd80      	pop	{r7, pc}
  40145a:	bf00      	nop
  40145c:	004011a5 	.word	0x004011a5

00401460 <I2C_INSTANCE_init>:

void I2C_INSTANCE_init(void)
{
  401460:	b580      	push	{r7, lr}
  401462:	af00      	add	r7, sp, #0
	I2C_INSTANCE_CLOCK_init();
  401464:	4b04      	ldr	r3, [pc, #16]	; (401478 <I2C_INSTANCE_init+0x18>)
  401466:	4798      	blx	r3

	i2c_m_sync_init(&I2C_INSTANCE, TWIHS1);
  401468:	4904      	ldr	r1, [pc, #16]	; (40147c <I2C_INSTANCE_init+0x1c>)
  40146a:	4805      	ldr	r0, [pc, #20]	; (401480 <I2C_INSTANCE_init+0x20>)
  40146c:	4b05      	ldr	r3, [pc, #20]	; (401484 <I2C_INSTANCE_init+0x24>)
  40146e:	4798      	blx	r3

	I2C_INSTANCE_PORT_init();
  401470:	4b05      	ldr	r3, [pc, #20]	; (401488 <I2C_INSTANCE_init+0x28>)
  401472:	4798      	blx	r3
}
  401474:	bf00      	nop
  401476:	bd80      	pop	{r7, pc}
  401478:	0040144d 	.word	0x0040144d
  40147c:	4001c000 	.word	0x4001c000
  401480:	204013bc 	.word	0x204013bc
  401484:	00402119 	.word	0x00402119
  401488:	0040143d 	.word	0x0040143d

0040148c <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
  40148c:	b580      	push	{r7, lr}
  40148e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA9, MUX_PA9A_UART0_URXD0);
  401490:	2100      	movs	r1, #0
  401492:	2009      	movs	r0, #9
  401494:	4b03      	ldr	r3, [pc, #12]	; (4014a4 <USART_0_PORT_init+0x18>)
  401496:	4798      	blx	r3

	gpio_set_pin_function(PA10, MUX_PA10A_UART0_UTXD0);
  401498:	2100      	movs	r1, #0
  40149a:	200a      	movs	r0, #10
  40149c:	4b01      	ldr	r3, [pc, #4]	; (4014a4 <USART_0_PORT_init+0x18>)
  40149e:	4798      	blx	r3
}
  4014a0:	bf00      	nop
  4014a2:	bd80      	pop	{r7, pc}
  4014a4:	00401105 	.word	0x00401105

004014a8 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
  4014a8:	b580      	push	{r7, lr}
  4014aa:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART0);
  4014ac:	2007      	movs	r0, #7
  4014ae:	4b02      	ldr	r3, [pc, #8]	; (4014b8 <USART_0_CLOCK_init+0x10>)
  4014b0:	4798      	blx	r3
}
  4014b2:	bf00      	nop
  4014b4:	bd80      	pop	{r7, pc}
  4014b6:	bf00      	nop
  4014b8:	004011a5 	.word	0x004011a5

004014bc <USART_0_init>:

void USART_0_init(void)
{
  4014bc:	b580      	push	{r7, lr}
  4014be:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
  4014c0:	4b06      	ldr	r3, [pc, #24]	; (4014dc <USART_0_init+0x20>)
  4014c2:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  4014c4:	4b06      	ldr	r3, [pc, #24]	; (4014e0 <USART_0_init+0x24>)
  4014c6:	4798      	blx	r3
  4014c8:	4603      	mov	r3, r0
  4014ca:	461a      	mov	r2, r3
  4014cc:	4905      	ldr	r1, [pc, #20]	; (4014e4 <USART_0_init+0x28>)
  4014ce:	4806      	ldr	r0, [pc, #24]	; (4014e8 <USART_0_init+0x2c>)
  4014d0:	4b06      	ldr	r3, [pc, #24]	; (4014ec <USART_0_init+0x30>)
  4014d2:	4798      	blx	r3
	USART_0_PORT_init();
  4014d4:	4b06      	ldr	r3, [pc, #24]	; (4014f0 <USART_0_init+0x34>)
  4014d6:	4798      	blx	r3
}
  4014d8:	bf00      	nop
  4014da:	bd80      	pop	{r7, pc}
  4014dc:	004014a9 	.word	0x004014a9
  4014e0:	00405431 	.word	0x00405431
  4014e4:	400e0800 	.word	0x400e0800
  4014e8:	204013b0 	.word	0x204013b0
  4014ec:	0040271d 	.word	0x0040271d
  4014f0:	0040148d 	.word	0x0040148d

004014f4 <USART_1_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_1_CLOCK_init()
{
  4014f4:	b580      	push	{r7, lr}
  4014f6:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART4);
  4014f8:	202e      	movs	r0, #46	; 0x2e
  4014fa:	4b02      	ldr	r3, [pc, #8]	; (401504 <USART_1_CLOCK_init+0x10>)
  4014fc:	4798      	blx	r3
}
  4014fe:	bf00      	nop
  401500:	bd80      	pop	{r7, pc}
  401502:	bf00      	nop
  401504:	004011a5 	.word	0x004011a5

00401508 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
  401508:	b580      	push	{r7, lr}
  40150a:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD18, MUX_PD18C_UART4_URXD4);
  40150c:	2102      	movs	r1, #2
  40150e:	2072      	movs	r0, #114	; 0x72
  401510:	4b03      	ldr	r3, [pc, #12]	; (401520 <USART_1_PORT_init+0x18>)
  401512:	4798      	blx	r3

	gpio_set_pin_function(PD19, MUX_PD19C_UART4_UTXD4);
  401514:	2102      	movs	r1, #2
  401516:	2073      	movs	r0, #115	; 0x73
  401518:	4b01      	ldr	r3, [pc, #4]	; (401520 <USART_1_PORT_init+0x18>)
  40151a:	4798      	blx	r3
}
  40151c:	bf00      	nop
  40151e:	bd80      	pop	{r7, pc}
  401520:	00401105 	.word	0x00401105

00401524 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
  401524:	b590      	push	{r4, r7, lr}
  401526:	b083      	sub	sp, #12
  401528:	af02      	add	r7, sp, #8
	USART_1_CLOCK_init();
  40152a:	4b09      	ldr	r3, [pc, #36]	; (401550 <USART_1_init+0x2c>)
  40152c:	4798      	blx	r3
	usart_async_init(&USART_1, UART4, USART_1_buffer, USART_1_BUFFER_SIZE, _uart_get_usart_async());
  40152e:	4b09      	ldr	r3, [pc, #36]	; (401554 <USART_1_init+0x30>)
  401530:	4798      	blx	r3
  401532:	4603      	mov	r3, r0
  401534:	9300      	str	r3, [sp, #0]
  401536:	2310      	movs	r3, #16
  401538:	4a07      	ldr	r2, [pc, #28]	; (401558 <USART_1_init+0x34>)
  40153a:	4908      	ldr	r1, [pc, #32]	; (40155c <USART_1_init+0x38>)
  40153c:	4808      	ldr	r0, [pc, #32]	; (401560 <USART_1_init+0x3c>)
  40153e:	4c09      	ldr	r4, [pc, #36]	; (401564 <USART_1_init+0x40>)
  401540:	47a0      	blx	r4
	USART_1_PORT_init();
  401542:	4b09      	ldr	r3, [pc, #36]	; (401568 <USART_1_init+0x44>)
  401544:	4798      	blx	r3
}
  401546:	bf00      	nop
  401548:	3704      	adds	r7, #4
  40154a:	46bd      	mov	sp, r7
  40154c:	bd90      	pop	{r4, r7, pc}
  40154e:	bf00      	nop
  401550:	004014f5 	.word	0x004014f5
  401554:	00405441 	.word	0x00405441
  401558:	204010d0 	.word	0x204010d0
  40155c:	400e1e00 	.word	0x400e1e00
  401560:	204013dc 	.word	0x204013dc
  401564:	00402419 	.word	0x00402419
  401568:	00401509 	.word	0x00401509

0040156c <USB_0_CLOCK_init>:
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif
#endif

void USB_0_CLOCK_init(void)
{
  40156c:	b580      	push	{r7, lr}
  40156e:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_USBHS);
  401570:	2022      	movs	r0, #34	; 0x22
  401572:	4b02      	ldr	r3, [pc, #8]	; (40157c <USB_0_CLOCK_init+0x10>)
  401574:	4798      	blx	r3
}
  401576:	bf00      	nop
  401578:	bd80      	pop	{r7, pc}
  40157a:	bf00      	nop
  40157c:	004011a5 	.word	0x004011a5

00401580 <USB_0_init>:

void USB_0_init(void)
{
  401580:	b580      	push	{r7, lr}
  401582:	af00      	add	r7, sp, #0
	USB_0_CLOCK_init();
  401584:	4b02      	ldr	r3, [pc, #8]	; (401590 <USB_0_init+0x10>)
  401586:	4798      	blx	r3
	usb_d_init();
  401588:	4b02      	ldr	r3, [pc, #8]	; (401594 <USB_0_init+0x14>)
  40158a:	4798      	blx	r3
}
  40158c:	bf00      	nop
  40158e:	bd80      	pop	{r7, pc}
  401590:	0040156d 	.word	0x0040156d
  401594:	00402c95 	.word	0x00402c95

00401598 <system_init>:

void system_init(void)
{
  401598:	b580      	push	{r7, lr}
  40159a:	af00      	add	r7, sp, #0
	init_mcu();
  40159c:	4b34      	ldr	r3, [pc, #208]	; (401670 <system_init+0xd8>)
  40159e:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOB);
  4015a0:	200b      	movs	r0, #11
  4015a2:	4b34      	ldr	r3, [pc, #208]	; (401674 <system_init+0xdc>)
  4015a4:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOC);
  4015a6:	200c      	movs	r0, #12
  4015a8:	4b32      	ldr	r3, [pc, #200]	; (401674 <system_init+0xdc>)
  4015aa:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOD);
  4015ac:	2010      	movs	r0, #16
  4015ae:	4b31      	ldr	r3, [pc, #196]	; (401674 <system_init+0xdc>)
  4015b0:	4798      	blx	r3

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);
  4015b2:	4831      	ldr	r0, [pc, #196]	; (401678 <system_init+0xe0>)
  4015b4:	4b31      	ldr	r3, [pc, #196]	; (40167c <system_init+0xe4>)
  4015b6:	4798      	blx	r3

	/* GPIO on PB1 */

	// Set pin direction to output
	gpio_set_pin_direction(AT86_1_RST, GPIO_DIRECTION_OUT);
  4015b8:	2102      	movs	r1, #2
  4015ba:	2021      	movs	r0, #33	; 0x21
  4015bc:	4b30      	ldr	r3, [pc, #192]	; (401680 <system_init+0xe8>)
  4015be:	4798      	blx	r3

	gpio_set_pin_level(AT86_1_RST,
  4015c0:	2100      	movs	r1, #0
  4015c2:	2021      	movs	r0, #33	; 0x21
  4015c4:	4b2f      	ldr	r3, [pc, #188]	; (401684 <system_init+0xec>)
  4015c6:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(AT86_1_RST, GPIO_PIN_FUNCTION_OFF);
  4015c8:	f04f 31ff 	mov.w	r1, #4294967295
  4015cc:	2021      	movs	r0, #33	; 0x21
  4015ce:	4b2e      	ldr	r3, [pc, #184]	; (401688 <system_init+0xf0>)
  4015d0:	4798      	blx	r3

	/* GPIO on PC7 */

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
  4015d2:	2102      	movs	r1, #2
  4015d4:	2047      	movs	r0, #71	; 0x47
  4015d6:	4b2a      	ldr	r3, [pc, #168]	; (401680 <system_init+0xe8>)
  4015d8:	4798      	blx	r3

	gpio_set_pin_level(LED0,
  4015da:	2100      	movs	r1, #0
  4015dc:	2047      	movs	r0, #71	; 0x47
  4015de:	4b29      	ldr	r3, [pc, #164]	; (401684 <system_init+0xec>)
  4015e0:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
  4015e2:	f04f 31ff 	mov.w	r1, #4294967295
  4015e6:	2047      	movs	r0, #71	; 0x47
  4015e8:	4b27      	ldr	r3, [pc, #156]	; (401688 <system_init+0xf0>)
  4015ea:	4798      	blx	r3

	/* GPIO on PC25 */

	gpio_set_pin_direction(CS,
  4015ec:	2102      	movs	r1, #2
  4015ee:	2059      	movs	r0, #89	; 0x59
  4015f0:	4b23      	ldr	r3, [pc, #140]	; (401680 <system_init+0xe8>)
  4015f2:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(CS,
  4015f4:	2100      	movs	r1, #0
  4015f6:	2059      	movs	r0, #89	; 0x59
  4015f8:	4b22      	ldr	r3, [pc, #136]	; (401684 <system_init+0xec>)
  4015fa:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(CS,
  4015fc:	2100      	movs	r1, #0
  4015fe:	2059      	movs	r0, #89	; 0x59
  401600:	4b22      	ldr	r3, [pc, #136]	; (40168c <system_init+0xf4>)
  401602:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(CS,
  401604:	2102      	movs	r1, #2
  401606:	2059      	movs	r0, #89	; 0x59
  401608:	4b1f      	ldr	r3, [pc, #124]	; (401688 <system_init+0xf0>)
  40160a:	4798      	blx	r3
	                      GPIO_PIN_FUNCTION_C);

	/* GPIO on PD17 */

	// Set pin direction to output
	gpio_set_pin_direction(CS_2, GPIO_DIRECTION_OUT);
  40160c:	2102      	movs	r1, #2
  40160e:	2071      	movs	r0, #113	; 0x71
  401610:	4b1b      	ldr	r3, [pc, #108]	; (401680 <system_init+0xe8>)
  401612:	4798      	blx	r3

	gpio_set_pin_level(CS_2,
  401614:	2100      	movs	r1, #0
  401616:	2071      	movs	r0, #113	; 0x71
  401618:	4b1a      	ldr	r3, [pc, #104]	; (401684 <system_init+0xec>)
  40161a:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(CS_2, GPIO_PIN_FUNCTION_OFF);
  40161c:	f04f 31ff 	mov.w	r1, #4294967295
  401620:	2071      	movs	r0, #113	; 0x71
  401622:	4b19      	ldr	r3, [pc, #100]	; (401688 <system_init+0xf0>)
  401624:	4798      	blx	r3

	/* GPIO on PD24 */

	// Set pin direction to output
	gpio_set_pin_direction(AT86_2_RST, GPIO_DIRECTION_OUT);
  401626:	2102      	movs	r1, #2
  401628:	2078      	movs	r0, #120	; 0x78
  40162a:	4b15      	ldr	r3, [pc, #84]	; (401680 <system_init+0xe8>)
  40162c:	4798      	blx	r3

	gpio_set_pin_level(AT86_2_RST,
  40162e:	2100      	movs	r1, #0
  401630:	2078      	movs	r0, #120	; 0x78
  401632:	4b14      	ldr	r3, [pc, #80]	; (401684 <system_init+0xec>)
  401634:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_function(AT86_2_RST, GPIO_PIN_FUNCTION_OFF);
  401636:	f04f 31ff 	mov.w	r1, #4294967295
  40163a:	2078      	movs	r0, #120	; 0x78
  40163c:	4b12      	ldr	r3, [pc, #72]	; (401688 <system_init+0xf0>)
  40163e:	4798      	blx	r3

	DAC_0_init();
  401640:	4b13      	ldr	r3, [pc, #76]	; (401690 <system_init+0xf8>)
  401642:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  401644:	4b13      	ldr	r3, [pc, #76]	; (401694 <system_init+0xfc>)
  401646:	4798      	blx	r3
	EXTERNAL_IRQ_1_init();
  401648:	4b13      	ldr	r3, [pc, #76]	; (401698 <system_init+0x100>)
  40164a:	4798      	blx	r3

	SPI_1_init();
  40164c:	4b13      	ldr	r3, [pc, #76]	; (40169c <system_init+0x104>)
  40164e:	4798      	blx	r3

	SPI_0_init();
  401650:	4b13      	ldr	r3, [pc, #76]	; (4016a0 <system_init+0x108>)
  401652:	4798      	blx	r3

	I2C_0_init();
  401654:	4b13      	ldr	r3, [pc, #76]	; (4016a4 <system_init+0x10c>)
  401656:	4798      	blx	r3

	I2C_INSTANCE_init();
  401658:	4b13      	ldr	r3, [pc, #76]	; (4016a8 <system_init+0x110>)
  40165a:	4798      	blx	r3

	USART_0_init();
  40165c:	4b13      	ldr	r3, [pc, #76]	; (4016ac <system_init+0x114>)
  40165e:	4798      	blx	r3
	USART_1_init();
  401660:	4b13      	ldr	r3, [pc, #76]	; (4016b0 <system_init+0x118>)
  401662:	4798      	blx	r3

	USB_0_init();
  401664:	4b13      	ldr	r3, [pc, #76]	; (4016b4 <system_init+0x11c>)
  401666:	4798      	blx	r3

	ext_irq_init();
  401668:	4b13      	ldr	r3, [pc, #76]	; (4016b8 <system_init+0x120>)
  40166a:	4798      	blx	r3
}
  40166c:	bf00      	nop
  40166e:	bd80      	pop	{r7, pc}
  401670:	00401195 	.word	0x00401195
  401674:	004011a5 	.word	0x004011a5
  401678:	400e1850 	.word	0x400e1850
  40167c:	00400e17 	.word	0x00400e17
  401680:	00401125 	.word	0x00401125
  401684:	0040115d 	.word	0x0040115d
  401688:	00401105 	.word	0x00401105
  40168c:	004010d1 	.word	0x004010d1
  401690:	0040128d 	.word	0x0040128d
  401694:	004012b9 	.word	0x004012b9
  401698:	004012e9 	.word	0x004012e9
  40169c:	00401351 	.word	0x00401351
  4016a0:	004013b5 	.word	0x004013b5
  4016a4:	00401411 	.word	0x00401411
  4016a8:	00401461 	.word	0x00401461
  4016ac:	004014bd 	.word	0x004014bd
  4016b0:	00401525 	.word	0x00401525
  4016b4:	00401581 	.word	0x00401581
  4016b8:	00401e51 	.word	0x00401e51

004016bc <hri_pio_set_ODSR_reg>:
{
  4016bc:	b480      	push	{r7}
  4016be:	b083      	sub	sp, #12
  4016c0:	af00      	add	r7, sp, #0
  4016c2:	6078      	str	r0, [r7, #4]
  4016c4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4016c6:	687b      	ldr	r3, [r7, #4]
  4016c8:	683a      	ldr	r2, [r7, #0]
  4016ca:	631a      	str	r2, [r3, #48]	; 0x30
}
  4016cc:	bf00      	nop
  4016ce:	370c      	adds	r7, #12
  4016d0:	46bd      	mov	sp, r7
  4016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016d6:	4770      	bx	lr

004016d8 <hri_pio_get_ODSR_reg>:
{
  4016d8:	b480      	push	{r7}
  4016da:	b085      	sub	sp, #20
  4016dc:	af00      	add	r7, sp, #0
  4016de:	6078      	str	r0, [r7, #4]
  4016e0:	6039      	str	r1, [r7, #0]
	tmp = ((Pio *)hw)->PIO_ODSR;
  4016e2:	687b      	ldr	r3, [r7, #4]
  4016e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4016e6:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4016e8:	68fa      	ldr	r2, [r7, #12]
  4016ea:	683b      	ldr	r3, [r7, #0]
  4016ec:	4013      	ands	r3, r2
  4016ee:	60fb      	str	r3, [r7, #12]
	return tmp;
  4016f0:	68fb      	ldr	r3, [r7, #12]
}
  4016f2:	4618      	mov	r0, r3
  4016f4:	3714      	adds	r7, #20
  4016f6:	46bd      	mov	sp, r7
  4016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016fc:	4770      	bx	lr

004016fe <hri_pio_clear_ODSR_reg>:
{
  4016fe:	b480      	push	{r7}
  401700:	b083      	sub	sp, #12
  401702:	af00      	add	r7, sp, #0
  401704:	6078      	str	r0, [r7, #4]
  401706:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401708:	687b      	ldr	r3, [r7, #4]
  40170a:	683a      	ldr	r2, [r7, #0]
  40170c:	635a      	str	r2, [r3, #52]	; 0x34
}
  40170e:	bf00      	nop
  401710:	370c      	adds	r7, #12
  401712:	46bd      	mov	sp, r7
  401714:	f85d 7b04 	ldr.w	r7, [sp], #4
  401718:	4770      	bx	lr
	...

0040171c <port_to_reg>:
{
  40171c:	b480      	push	{r7}
  40171e:	b083      	sub	sp, #12
  401720:	af00      	add	r7, sp, #0
  401722:	4603      	mov	r3, r0
  401724:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  401726:	79fb      	ldrb	r3, [r7, #7]
  401728:	025b      	lsls	r3, r3, #9
  40172a:	461a      	mov	r2, r3
  40172c:	4b03      	ldr	r3, [pc, #12]	; (40173c <port_to_reg+0x20>)
  40172e:	4413      	add	r3, r2
}
  401730:	4618      	mov	r0, r3
  401732:	370c      	adds	r7, #12
  401734:	46bd      	mov	sp, r7
  401736:	f85d 7b04 	ldr.w	r7, [sp], #4
  40173a:	4770      	bx	lr
  40173c:	400e0e00 	.word	0x400e0e00

00401740 <_gpio_set_level>:
{
  401740:	b580      	push	{r7, lr}
  401742:	b084      	sub	sp, #16
  401744:	af00      	add	r7, sp, #0
  401746:	4603      	mov	r3, r0
  401748:	6039      	str	r1, [r7, #0]
  40174a:	71fb      	strb	r3, [r7, #7]
  40174c:	4613      	mov	r3, r2
  40174e:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  401750:	79fb      	ldrb	r3, [r7, #7]
  401752:	4618      	mov	r0, r3
  401754:	4b09      	ldr	r3, [pc, #36]	; (40177c <_gpio_set_level+0x3c>)
  401756:	4798      	blx	r3
  401758:	60f8      	str	r0, [r7, #12]
	if (level) {
  40175a:	79bb      	ldrb	r3, [r7, #6]
  40175c:	2b00      	cmp	r3, #0
  40175e:	d004      	beq.n	40176a <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  401760:	6839      	ldr	r1, [r7, #0]
  401762:	68f8      	ldr	r0, [r7, #12]
  401764:	4b06      	ldr	r3, [pc, #24]	; (401780 <_gpio_set_level+0x40>)
  401766:	4798      	blx	r3
}
  401768:	e003      	b.n	401772 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  40176a:	6839      	ldr	r1, [r7, #0]
  40176c:	68f8      	ldr	r0, [r7, #12]
  40176e:	4b05      	ldr	r3, [pc, #20]	; (401784 <_gpio_set_level+0x44>)
  401770:	4798      	blx	r3
}
  401772:	bf00      	nop
  401774:	3710      	adds	r7, #16
  401776:	46bd      	mov	sp, r7
  401778:	bd80      	pop	{r7, pc}
  40177a:	bf00      	nop
  40177c:	0040171d 	.word	0x0040171d
  401780:	004016bd 	.word	0x004016bd
  401784:	004016ff 	.word	0x004016ff

00401788 <_gpio_toggle_level>:
{
  401788:	b580      	push	{r7, lr}
  40178a:	b086      	sub	sp, #24
  40178c:	af00      	add	r7, sp, #0
  40178e:	4603      	mov	r3, r0
  401790:	6039      	str	r1, [r7, #0]
  401792:	71fb      	strb	r3, [r7, #7]
	void *const hw = port_to_reg(port);
  401794:	79fb      	ldrb	r3, [r7, #7]
  401796:	4618      	mov	r0, r3
  401798:	4b0c      	ldr	r3, [pc, #48]	; (4017cc <_gpio_toggle_level+0x44>)
  40179a:	4798      	blx	r3
  40179c:	6178      	str	r0, [r7, #20]
	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
  40179e:	6839      	ldr	r1, [r7, #0]
  4017a0:	6978      	ldr	r0, [r7, #20]
  4017a2:	4b0b      	ldr	r3, [pc, #44]	; (4017d0 <_gpio_toggle_level+0x48>)
  4017a4:	4798      	blx	r3
  4017a6:	6138      	str	r0, [r7, #16]
	bits_set   = (~bits_clear) & mask;
  4017a8:	693b      	ldr	r3, [r7, #16]
  4017aa:	43da      	mvns	r2, r3
  4017ac:	683b      	ldr	r3, [r7, #0]
  4017ae:	4013      	ands	r3, r2
  4017b0:	60fb      	str	r3, [r7, #12]
	hri_pio_set_ODSR_reg(hw, bits_set);
  4017b2:	68f9      	ldr	r1, [r7, #12]
  4017b4:	6978      	ldr	r0, [r7, #20]
  4017b6:	4b07      	ldr	r3, [pc, #28]	; (4017d4 <_gpio_toggle_level+0x4c>)
  4017b8:	4798      	blx	r3
	hri_pio_clear_ODSR_reg(hw, bits_clear);
  4017ba:	6939      	ldr	r1, [r7, #16]
  4017bc:	6978      	ldr	r0, [r7, #20]
  4017be:	4b06      	ldr	r3, [pc, #24]	; (4017d8 <_gpio_toggle_level+0x50>)
  4017c0:	4798      	blx	r3
}
  4017c2:	bf00      	nop
  4017c4:	3718      	adds	r7, #24
  4017c6:	46bd      	mov	sp, r7
  4017c8:	bd80      	pop	{r7, pc}
  4017ca:	bf00      	nop
  4017cc:	0040171d 	.word	0x0040171d
  4017d0:	004016d9 	.word	0x004016d9
  4017d4:	004016bd 	.word	0x004016bd
  4017d8:	004016ff 	.word	0x004016ff

004017dc <gpio_set_pin_level>:
{
  4017dc:	b580      	push	{r7, lr}
  4017de:	b082      	sub	sp, #8
  4017e0:	af00      	add	r7, sp, #0
  4017e2:	4603      	mov	r3, r0
  4017e4:	460a      	mov	r2, r1
  4017e6:	71fb      	strb	r3, [r7, #7]
  4017e8:	4613      	mov	r3, r2
  4017ea:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4017ec:	79fb      	ldrb	r3, [r7, #7]
  4017ee:	095b      	lsrs	r3, r3, #5
  4017f0:	b2d8      	uxtb	r0, r3
  4017f2:	79fb      	ldrb	r3, [r7, #7]
  4017f4:	f003 031f 	and.w	r3, r3, #31
  4017f8:	2201      	movs	r2, #1
  4017fa:	fa02 f303 	lsl.w	r3, r2, r3
  4017fe:	79ba      	ldrb	r2, [r7, #6]
  401800:	4619      	mov	r1, r3
  401802:	4b03      	ldr	r3, [pc, #12]	; (401810 <gpio_set_pin_level+0x34>)
  401804:	4798      	blx	r3
}
  401806:	bf00      	nop
  401808:	3708      	adds	r7, #8
  40180a:	46bd      	mov	sp, r7
  40180c:	bd80      	pop	{r7, pc}
  40180e:	bf00      	nop
  401810:	00401741 	.word	0x00401741

00401814 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
  401814:	b580      	push	{r7, lr}
  401816:	b082      	sub	sp, #8
  401818:	af00      	add	r7, sp, #0
  40181a:	4603      	mov	r3, r0
  40181c:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  40181e:	79fb      	ldrb	r3, [r7, #7]
  401820:	095b      	lsrs	r3, r3, #5
  401822:	b2d8      	uxtb	r0, r3
  401824:	79fb      	ldrb	r3, [r7, #7]
  401826:	f003 031f 	and.w	r3, r3, #31
  40182a:	2201      	movs	r2, #1
  40182c:	fa02 f303 	lsl.w	r3, r2, r3
  401830:	4619      	mov	r1, r3
  401832:	4b03      	ldr	r3, [pc, #12]	; (401840 <gpio_toggle_pin_level+0x2c>)
  401834:	4798      	blx	r3
}
  401836:	bf00      	nop
  401838:	3708      	adds	r7, #8
  40183a:	46bd      	mov	sp, r7
  40183c:	bd80      	pop	{r7, pc}
  40183e:	bf00      	nop
  401840:	00401789 	.word	0x00401789

00401844 <glue_crash_and_burn>:

bool glue_spi_in_process(SpiDevice *spi_dev);

//For use during debugging.  Mainly used to check that things don't return zero.
static inline void glue_crash_and_burn(void)
{
  401844:	b580      	push	{r7, lr}
  401846:	b082      	sub	sp, #8
  401848:	af00      	add	r7, sp, #0
	while(1)
	{
		gpio_toggle_pin_level(LED0);
  40184a:	2047      	movs	r0, #71	; 0x47
  40184c:	4b07      	ldr	r3, [pc, #28]	; (40186c <glue_crash_and_burn+0x28>)
  40184e:	4798      	blx	r3
		//delay_ms(1);
		uint8_t test;
		for(uint32_t i = 0; i < 150000000; i++)
  401850:	2300      	movs	r3, #0
  401852:	603b      	str	r3, [r7, #0]
  401854:	e005      	b.n	401862 <glue_crash_and_burn+0x1e>
		{
			test++;
  401856:	79fb      	ldrb	r3, [r7, #7]
  401858:	3301      	adds	r3, #1
  40185a:	71fb      	strb	r3, [r7, #7]
		for(uint32_t i = 0; i < 150000000; i++)
  40185c:	683b      	ldr	r3, [r7, #0]
  40185e:	3301      	adds	r3, #1
  401860:	603b      	str	r3, [r7, #0]
  401862:	683b      	ldr	r3, [r7, #0]
  401864:	4a02      	ldr	r2, [pc, #8]	; (401870 <glue_crash_and_burn+0x2c>)
  401866:	4293      	cmp	r3, r2
  401868:	d9f5      	bls.n	401856 <glue_crash_and_burn+0x12>
	{
  40186a:	e7ee      	b.n	40184a <glue_crash_and_burn+0x6>
  40186c:	00401815 	.word	0x00401815
  401870:	08f0d17f 	.word	0x08f0d17f

00401874 <glue_init>:
static void glue_spi1_cb_tx_done(struct _dma_resource *resource);
static void glue_spi1_cb_rx_done(struct _dma_resource *resource);
static void glue_spi1_cb_error(struct _dma_resource *resource);

void glue_init(void)
{
  401874:	b580      	push	{r7, lr}
  401876:	af00      	add	r7, sp, #0
	//Set up SPI0
	//Set up IRQ0
	SPI_ZERO.halSpiDriver = &SPI_0;
  401878:	4b32      	ldr	r3, [pc, #200]	; (401944 <glue_init+0xd0>)
  40187a:	4a33      	ldr	r2, [pc, #204]	; (401948 <glue_init+0xd4>)
  40187c:	601a      	str	r2, [r3, #0]
	SPI_ONE.halSpiDriver = &SPI_1;
  40187e:	4b33      	ldr	r3, [pc, #204]	; (40194c <glue_init+0xd8>)
  401880:	4a33      	ldr	r2, [pc, #204]	; (401950 <glue_init+0xdc>)
  401882:	601a      	str	r2, [r3, #0]
	//IRQ_ZERO.halIRQDriver = IRQ0;
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi0_cb_tx_done);
  401884:	4b2f      	ldr	r3, [pc, #188]	; (401944 <glue_init+0xd0>)
  401886:	681b      	ldr	r3, [r3, #0]
  401888:	4a32      	ldr	r2, [pc, #200]	; (401954 <glue_init+0xe0>)
  40188a:	2100      	movs	r1, #0
  40188c:	4618      	mov	r0, r3
  40188e:	4b32      	ldr	r3, [pc, #200]	; (401958 <glue_init+0xe4>)
  401890:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi0_cb_rx_done);
  401892:	4b2c      	ldr	r3, [pc, #176]	; (401944 <glue_init+0xd0>)
  401894:	681b      	ldr	r3, [r3, #0]
  401896:	4a31      	ldr	r2, [pc, #196]	; (40195c <glue_init+0xe8>)
  401898:	2101      	movs	r1, #1
  40189a:	4618      	mov	r0, r3
  40189c:	4b2e      	ldr	r3, [pc, #184]	; (401958 <glue_init+0xe4>)
  40189e:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ZERO.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi0_cb_error);
  4018a0:	4b28      	ldr	r3, [pc, #160]	; (401944 <glue_init+0xd0>)
  4018a2:	681b      	ldr	r3, [r3, #0]
  4018a4:	4a2e      	ldr	r2, [pc, #184]	; (401960 <glue_init+0xec>)
  4018a6:	2102      	movs	r1, #2
  4018a8:	4618      	mov	r0, r3
  4018aa:	4b2b      	ldr	r3, [pc, #172]	; (401958 <glue_init+0xe4>)
  4018ac:	4798      	blx	r3
	
	//Set call-backs for spi here.
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_TX_DONE, glue_spi1_cb_tx_done);
  4018ae:	4b27      	ldr	r3, [pc, #156]	; (40194c <glue_init+0xd8>)
  4018b0:	681b      	ldr	r3, [r3, #0]
  4018b2:	4a2c      	ldr	r2, [pc, #176]	; (401964 <glue_init+0xf0>)
  4018b4:	2100      	movs	r1, #0
  4018b6:	4618      	mov	r0, r3
  4018b8:	4b27      	ldr	r3, [pc, #156]	; (401958 <glue_init+0xe4>)
  4018ba:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_RX_DONE, glue_spi1_cb_rx_done);
  4018bc:	4b23      	ldr	r3, [pc, #140]	; (40194c <glue_init+0xd8>)
  4018be:	681b      	ldr	r3, [r3, #0]
  4018c0:	4a29      	ldr	r2, [pc, #164]	; (401968 <glue_init+0xf4>)
  4018c2:	2101      	movs	r1, #1
  4018c4:	4618      	mov	r0, r3
  4018c6:	4b24      	ldr	r3, [pc, #144]	; (401958 <glue_init+0xe4>)
  4018c8:	4798      	blx	r3
	spi_m_dma_register_callback(SPI_ONE.halSpiDriver, SPI_M_DMA_CB_ERROR, glue_spi1_cb_error);
  4018ca:	4b20      	ldr	r3, [pc, #128]	; (40194c <glue_init+0xd8>)
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	4a27      	ldr	r2, [pc, #156]	; (40196c <glue_init+0xf8>)
  4018d0:	2102      	movs	r1, #2
  4018d2:	4618      	mov	r0, r3
  4018d4:	4b20      	ldr	r3, [pc, #128]	; (401958 <glue_init+0xe4>)
  4018d6:	4798      	blx	r3

	AT86_Init(&SPI_ZERO, &IRQ_ZERO, AT86_INSTANCE0);
  4018d8:	2200      	movs	r2, #0
  4018da:	4925      	ldr	r1, [pc, #148]	; (401970 <glue_init+0xfc>)
  4018dc:	4819      	ldr	r0, [pc, #100]	; (401944 <glue_init+0xd0>)
  4018de:	4b25      	ldr	r3, [pc, #148]	; (401974 <glue_init+0x100>)
  4018e0:	4798      	blx	r3
	AT86_Init(&SPI_ONE, &IRQ_ONE, AT86_INSTANCE1);
  4018e2:	2201      	movs	r2, #1
  4018e4:	4924      	ldr	r1, [pc, #144]	; (401978 <glue_init+0x104>)
  4018e6:	4819      	ldr	r0, [pc, #100]	; (40194c <glue_init+0xd8>)
  4018e8:	4b22      	ldr	r3, [pc, #136]	; (401974 <glue_init+0x100>)
  4018ea:	4798      	blx	r3
	
	ext_irq_register(PIO_PB0_IDX, IRQ_ZERO.callback);
  4018ec:	4b20      	ldr	r3, [pc, #128]	; (401970 <glue_init+0xfc>)
  4018ee:	689b      	ldr	r3, [r3, #8]
  4018f0:	4619      	mov	r1, r3
  4018f2:	2020      	movs	r0, #32
  4018f4:	4b21      	ldr	r3, [pc, #132]	; (40197c <glue_init+0x108>)
  4018f6:	4798      	blx	r3
	ext_irq_register(PIO_PD23_IDX, IRQ_ONE.callback);
  4018f8:	4b1f      	ldr	r3, [pc, #124]	; (401978 <glue_init+0x104>)
  4018fa:	689b      	ldr	r3, [r3, #8]
  4018fc:	4619      	mov	r1, r3
  4018fe:	2077      	movs	r0, #119	; 0x77
  401900:	4b1e      	ldr	r3, [pc, #120]	; (40197c <glue_init+0x108>)
  401902:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_0, SPI_MODE_0);
  401904:	2100      	movs	r1, #0
  401906:	4810      	ldr	r0, [pc, #64]	; (401948 <glue_init+0xd4>)
  401908:	4b1d      	ldr	r3, [pc, #116]	; (401980 <glue_init+0x10c>)
  40190a:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_0, 10000000);
  40190c:	491d      	ldr	r1, [pc, #116]	; (401984 <glue_init+0x110>)
  40190e:	480e      	ldr	r0, [pc, #56]	; (401948 <glue_init+0xd4>)
  401910:	4b1d      	ldr	r3, [pc, #116]	; (401988 <glue_init+0x114>)
  401912:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_0, SPI_CHAR_SIZE_8);
  401914:	2100      	movs	r1, #0
  401916:	480c      	ldr	r0, [pc, #48]	; (401948 <glue_init+0xd4>)
  401918:	4b1c      	ldr	r3, [pc, #112]	; (40198c <glue_init+0x118>)
  40191a:	4798      	blx	r3
	
	spi_m_dma_set_mode(&SPI_1, SPI_MODE_0);
  40191c:	2100      	movs	r1, #0
  40191e:	480c      	ldr	r0, [pc, #48]	; (401950 <glue_init+0xdc>)
  401920:	4b17      	ldr	r3, [pc, #92]	; (401980 <glue_init+0x10c>)
  401922:	4798      	blx	r3
	spi_m_dma_set_baudrate(&SPI_1, 10000000);
  401924:	4917      	ldr	r1, [pc, #92]	; (401984 <glue_init+0x110>)
  401926:	480a      	ldr	r0, [pc, #40]	; (401950 <glue_init+0xdc>)
  401928:	4b17      	ldr	r3, [pc, #92]	; (401988 <glue_init+0x114>)
  40192a:	4798      	blx	r3
	spi_m_dma_set_char_size(&SPI_1, SPI_CHAR_SIZE_8);
  40192c:	2100      	movs	r1, #0
  40192e:	4808      	ldr	r0, [pc, #32]	; (401950 <glue_init+0xdc>)
  401930:	4b16      	ldr	r3, [pc, #88]	; (40198c <glue_init+0x118>)
  401932:	4798      	blx	r3
	
	spi_m_dma_enable(&SPI_0);
  401934:	4804      	ldr	r0, [pc, #16]	; (401948 <glue_init+0xd4>)
  401936:	4b16      	ldr	r3, [pc, #88]	; (401990 <glue_init+0x11c>)
  401938:	4798      	blx	r3
	spi_m_dma_enable(&SPI_1);
  40193a:	4805      	ldr	r0, [pc, #20]	; (401950 <glue_init+0xdc>)
  40193c:	4b14      	ldr	r3, [pc, #80]	; (401990 <glue_init+0x11c>)
  40193e:	4798      	blx	r3
}
  401940:	bf00      	nop
  401942:	bd80      	pop	{r7, pc}
  401944:	20401100 	.word	0x20401100
  401948:	20401388 	.word	0x20401388
  40194c:	20401114 	.word	0x20401114
  401950:	2040134c 	.word	0x2040134c
  401954:	00401b91 	.word	0x00401b91
  401958:	004023d5 	.word	0x004023d5
  40195c:	00401be5 	.word	0x00401be5
  401960:	00401c25 	.word	0x00401c25
  401964:	00401c55 	.word	0x00401c55
  401968:	00401ca9 	.word	0x00401ca9
  40196c:	00401ce9 	.word	0x00401ce9
  401970:	20401108 	.word	0x20401108
  401974:	004001c1 	.word	0x004001c1
  401978:	2040111c 	.word	0x2040111c
  40197c:	00401e9d 	.word	0x00401e9d
  401980:	0040226d 	.word	0x0040226d
  401984:	00989680 	.word	0x00989680
  401988:	0040222d 	.word	0x0040222d
  40198c:	004022b1 	.word	0x004022b1
  401990:	004021f1 	.word	0x004021f1

00401994 <glue_set_peripherals_inited>:

void glue_set_peripherals_inited(void)
{
  401994:	b480      	push	{r7}
  401996:	af00      	add	r7, sp, #0
	peripherals_inited = true;
  401998:	4b03      	ldr	r3, [pc, #12]	; (4019a8 <glue_set_peripherals_inited+0x14>)
  40199a:	2201      	movs	r2, #1
  40199c:	701a      	strb	r2, [r3, #0]
}
  40199e:	bf00      	nop
  4019a0:	46bd      	mov	sp, r7
  4019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019a6:	4770      	bx	lr
  4019a8:	204010e0 	.word	0x204010e0

004019ac <glue_enforce_driver_init>:

//Returns if glue_set_peripherals_inited was called before.  Crashes otherwise.
void glue_enforce_driver_init(void)
{
  4019ac:	b580      	push	{r7, lr}
  4019ae:	af00      	add	r7, sp, #0
	if (peripherals_inited == false)
  4019b0:	4b05      	ldr	r3, [pc, #20]	; (4019c8 <glue_enforce_driver_init+0x1c>)
  4019b2:	781b      	ldrb	r3, [r3, #0]
  4019b4:	b2db      	uxtb	r3, r3
  4019b6:	f083 0301 	eor.w	r3, r3, #1
  4019ba:	b2db      	uxtb	r3, r3
  4019bc:	2b00      	cmp	r3, #0
  4019be:	d001      	beq.n	4019c4 <glue_enforce_driver_init+0x18>
	{
		glue_crash_and_burn();
  4019c0:	4b02      	ldr	r3, [pc, #8]	; (4019cc <glue_enforce_driver_init+0x20>)
  4019c2:	4798      	blx	r3
	}
}
  4019c4:	bf00      	nop
  4019c6:	bd80      	pop	{r7, pc}
  4019c8:	204010e0 	.word	0x204010e0
  4019cc:	00401845 	.word	0x00401845

004019d0 <glue_spi0_dma_transfer>:

void glue_spi0_dma_transfer(SpiDevice* spi, uint8_t *txBuf, uint8_t *rxBuf, uint16_t numBytes)
{
  4019d0:	b590      	push	{r4, r7, lr}
  4019d2:	b085      	sub	sp, #20
  4019d4:	af00      	add	r7, sp, #0
  4019d6:	60f8      	str	r0, [r7, #12]
  4019d8:	60b9      	str	r1, [r7, #8]
  4019da:	607a      	str	r2, [r7, #4]
  4019dc:	807b      	strh	r3, [r7, #2]
	gpio_set_pin_level(CS, false);
  4019de:	2100      	movs	r1, #0
  4019e0:	2059      	movs	r0, #89	; 0x59
  4019e2:	4b12      	ldr	r3, [pc, #72]	; (401a2c <glue_spi0_dma_transfer+0x5c>)
  4019e4:	4798      	blx	r3
	delay_us(2);
  4019e6:	2002      	movs	r0, #2
  4019e8:	4b11      	ldr	r3, [pc, #68]	; (401a30 <glue_spi0_dma_transfer+0x60>)
  4019ea:	4798      	blx	r3
	
	if (txBuf != NULL)
  4019ec:	68bb      	ldr	r3, [r7, #8]
  4019ee:	2b00      	cmp	r3, #0
  4019f0:	d005      	beq.n	4019fe <glue_spi0_dma_transfer+0x2e>
	{
		spi0_dma_tx_in_process = true;
  4019f2:	4b10      	ldr	r3, [pc, #64]	; (401a34 <glue_spi0_dma_transfer+0x64>)
  4019f4:	2201      	movs	r2, #1
  4019f6:	701a      	strb	r2, [r3, #0]
		spi0_tx_buf_ptr = (uint32_t *) txBuf;
  4019f8:	4a0f      	ldr	r2, [pc, #60]	; (401a38 <glue_spi0_dma_transfer+0x68>)
  4019fa:	68bb      	ldr	r3, [r7, #8]
  4019fc:	6013      	str	r3, [r2, #0]
	}
	
	if (rxBuf != NULL)
  4019fe:	687b      	ldr	r3, [r7, #4]
  401a00:	2b00      	cmp	r3, #0
  401a02:	d005      	beq.n	401a10 <glue_spi0_dma_transfer+0x40>
	{
		spi0_dma_rx_in_process = true;
  401a04:	4b0d      	ldr	r3, [pc, #52]	; (401a3c <glue_spi0_dma_transfer+0x6c>)
  401a06:	2201      	movs	r2, #1
  401a08:	701a      	strb	r2, [r3, #0]
		spi0_rx_buf_ptr = (uint32_t *) rxBuf;
  401a0a:	4a0d      	ldr	r2, [pc, #52]	; (401a40 <glue_spi0_dma_transfer+0x70>)
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	6013      	str	r3, [r2, #0]
	}
	
	current_spi0_transfer_size = numBytes;
  401a10:	4a0c      	ldr	r2, [pc, #48]	; (401a44 <glue_spi0_dma_transfer+0x74>)
  401a12:	887b      	ldrh	r3, [r7, #2]
  401a14:	8013      	strh	r3, [r2, #0]
		
		SCB_CleanDCache_by_Addr((uint32_t *) txBuf, temp);
	}
	*/	

	spi_m_dma_transfer(spi->halSpiDriver, txBuf, rxBuf, numBytes);
  401a16:	68fb      	ldr	r3, [r7, #12]
  401a18:	6818      	ldr	r0, [r3, #0]
  401a1a:	887b      	ldrh	r3, [r7, #2]
  401a1c:	687a      	ldr	r2, [r7, #4]
  401a1e:	68b9      	ldr	r1, [r7, #8]
  401a20:	4c09      	ldr	r4, [pc, #36]	; (401a48 <glue_spi0_dma_transfer+0x78>)
  401a22:	47a0      	blx	r4
}
  401a24:	bf00      	nop
  401a26:	3714      	adds	r7, #20
  401a28:	46bd      	mov	sp, r7
  401a2a:	bd90      	pop	{r4, r7, pc}
  401a2c:	004017dd 	.word	0x004017dd
  401a30:	00401de9 	.word	0x00401de9
  401a34:	204010e1 	.word	0x204010e1
  401a38:	204010e8 	.word	0x204010e8
  401a3c:	204010e2 	.word	0x204010e2
  401a40:	204010ec 	.word	0x204010ec
  401a44:	204010f8 	.word	0x204010f8
  401a48:	0040238d 	.word	0x0040238d

00401a4c <glue_spi1_dma_transfer>:

void glue_spi1_dma_transfer(SpiDevice* spi, uint8_t *txBuf, uint8_t *rxBuf, uint16_t numBytes)
{
  401a4c:	b590      	push	{r4, r7, lr}
  401a4e:	b085      	sub	sp, #20
  401a50:	af00      	add	r7, sp, #0
  401a52:	60f8      	str	r0, [r7, #12]
  401a54:	60b9      	str	r1, [r7, #8]
  401a56:	607a      	str	r2, [r7, #4]
  401a58:	807b      	strh	r3, [r7, #2]
	gpio_set_pin_level(CS_2, false);
  401a5a:	2100      	movs	r1, #0
  401a5c:	2071      	movs	r0, #113	; 0x71
  401a5e:	4b12      	ldr	r3, [pc, #72]	; (401aa8 <glue_spi1_dma_transfer+0x5c>)
  401a60:	4798      	blx	r3
	delay_us(2);
  401a62:	2002      	movs	r0, #2
  401a64:	4b11      	ldr	r3, [pc, #68]	; (401aac <glue_spi1_dma_transfer+0x60>)
  401a66:	4798      	blx	r3
	
	if (txBuf != NULL)
  401a68:	68bb      	ldr	r3, [r7, #8]
  401a6a:	2b00      	cmp	r3, #0
  401a6c:	d005      	beq.n	401a7a <glue_spi1_dma_transfer+0x2e>
	{
		spi1_dma_tx_in_process = true;
  401a6e:	4b10      	ldr	r3, [pc, #64]	; (401ab0 <glue_spi1_dma_transfer+0x64>)
  401a70:	2201      	movs	r2, #1
  401a72:	701a      	strb	r2, [r3, #0]
		spi1_tx_buf_ptr = (uint32_t *) txBuf;
  401a74:	4a0f      	ldr	r2, [pc, #60]	; (401ab4 <glue_spi1_dma_transfer+0x68>)
  401a76:	68bb      	ldr	r3, [r7, #8]
  401a78:	6013      	str	r3, [r2, #0]
	}
	
	if (rxBuf != NULL)
  401a7a:	687b      	ldr	r3, [r7, #4]
  401a7c:	2b00      	cmp	r3, #0
  401a7e:	d005      	beq.n	401a8c <glue_spi1_dma_transfer+0x40>
	{
		spi1_dma_rx_in_process = true;
  401a80:	4b0d      	ldr	r3, [pc, #52]	; (401ab8 <glue_spi1_dma_transfer+0x6c>)
  401a82:	2201      	movs	r2, #1
  401a84:	701a      	strb	r2, [r3, #0]
		spi1_rx_buf_ptr = (uint32_t *) rxBuf;
  401a86:	4a0d      	ldr	r2, [pc, #52]	; (401abc <glue_spi1_dma_transfer+0x70>)
  401a88:	687b      	ldr	r3, [r7, #4]
  401a8a:	6013      	str	r3, [r2, #0]
	}
	
	current_spi1_transfer_size = numBytes;
  401a8c:	4a0c      	ldr	r2, [pc, #48]	; (401ac0 <glue_spi1_dma_transfer+0x74>)
  401a8e:	887b      	ldrh	r3, [r7, #2]
  401a90:	8013      	strh	r3, [r2, #0]
		
		SCB_CleanDCache_by_Addr((uint32_t *) txBuf, temp);
	}
	*/	

	spi_m_dma_transfer(spi->halSpiDriver, txBuf, rxBuf, numBytes);
  401a92:	68fb      	ldr	r3, [r7, #12]
  401a94:	6818      	ldr	r0, [r3, #0]
  401a96:	887b      	ldrh	r3, [r7, #2]
  401a98:	687a      	ldr	r2, [r7, #4]
  401a9a:	68b9      	ldr	r1, [r7, #8]
  401a9c:	4c09      	ldr	r4, [pc, #36]	; (401ac4 <glue_spi1_dma_transfer+0x78>)
  401a9e:	47a0      	blx	r4
}
  401aa0:	bf00      	nop
  401aa2:	3714      	adds	r7, #20
  401aa4:	46bd      	mov	sp, r7
  401aa6:	bd90      	pop	{r4, r7, pc}
  401aa8:	004017dd 	.word	0x004017dd
  401aac:	00401de9 	.word	0x00401de9
  401ab0:	204010e3 	.word	0x204010e3
  401ab4:	204010f0 	.word	0x204010f0
  401ab8:	204010e4 	.word	0x204010e4
  401abc:	204010f4 	.word	0x204010f4
  401ac0:	204010fa 	.word	0x204010fa
  401ac4:	0040238d 	.word	0x0040238d

00401ac8 <glue_spi_dma_transfer>:

void glue_spi_dma_transfer(SpiDevice* spi, uint8_t *txBuf, uint8_t *rxBuf, uint16_t numBytes)
{
  401ac8:	b590      	push	{r4, r7, lr}
  401aca:	b085      	sub	sp, #20
  401acc:	af00      	add	r7, sp, #0
  401ace:	60f8      	str	r0, [r7, #12]
  401ad0:	60b9      	str	r1, [r7, #8]
  401ad2:	607a      	str	r2, [r7, #4]
  401ad4:	807b      	strh	r3, [r7, #2]
	if (spi->halSpiDriver == &SPI_0)
  401ad6:	68fb      	ldr	r3, [r7, #12]
  401ad8:	681b      	ldr	r3, [r3, #0]
  401ada:	4a0c      	ldr	r2, [pc, #48]	; (401b0c <glue_spi_dma_transfer+0x44>)
  401adc:	4293      	cmp	r3, r2
  401ade:	d106      	bne.n	401aee <glue_spi_dma_transfer+0x26>
	{
		glue_spi0_dma_transfer(spi, txBuf, rxBuf, numBytes);
  401ae0:	887b      	ldrh	r3, [r7, #2]
  401ae2:	687a      	ldr	r2, [r7, #4]
  401ae4:	68b9      	ldr	r1, [r7, #8]
  401ae6:	68f8      	ldr	r0, [r7, #12]
  401ae8:	4c09      	ldr	r4, [pc, #36]	; (401b10 <glue_spi_dma_transfer+0x48>)
  401aea:	47a0      	blx	r4
	}
	else if (spi->halSpiDriver == &SPI_1)
	{
		glue_spi1_dma_transfer(spi, txBuf, rxBuf, numBytes);
	}
}
  401aec:	e00a      	b.n	401b04 <glue_spi_dma_transfer+0x3c>
	else if (spi->halSpiDriver == &SPI_1)
  401aee:	68fb      	ldr	r3, [r7, #12]
  401af0:	681b      	ldr	r3, [r3, #0]
  401af2:	4a08      	ldr	r2, [pc, #32]	; (401b14 <glue_spi_dma_transfer+0x4c>)
  401af4:	4293      	cmp	r3, r2
  401af6:	d105      	bne.n	401b04 <glue_spi_dma_transfer+0x3c>
		glue_spi1_dma_transfer(spi, txBuf, rxBuf, numBytes);
  401af8:	887b      	ldrh	r3, [r7, #2]
  401afa:	687a      	ldr	r2, [r7, #4]
  401afc:	68b9      	ldr	r1, [r7, #8]
  401afe:	68f8      	ldr	r0, [r7, #12]
  401b00:	4c05      	ldr	r4, [pc, #20]	; (401b18 <glue_spi_dma_transfer+0x50>)
  401b02:	47a0      	blx	r4
}
  401b04:	bf00      	nop
  401b06:	3714      	adds	r7, #20
  401b08:	46bd      	mov	sp, r7
  401b0a:	bd90      	pop	{r4, r7, pc}
  401b0c:	20401388 	.word	0x20401388
  401b10:	004019d1 	.word	0x004019d1
  401b14:	2040134c 	.word	0x2040134c
  401b18:	00401a4d 	.word	0x00401a4d

00401b1c <glue_spi_in_process>:

bool glue_spi_in_process(SpiDevice* spi)
{
  401b1c:	b480      	push	{r7}
  401b1e:	b083      	sub	sp, #12
  401b20:	af00      	add	r7, sp, #0
  401b22:	6078      	str	r0, [r7, #4]
	if ((spi->halSpiDriver == &SPI_0) && (spi0_dma_tx_in_process || spi0_dma_rx_in_process))
  401b24:	687b      	ldr	r3, [r7, #4]
  401b26:	681b      	ldr	r3, [r3, #0]
  401b28:	4a13      	ldr	r2, [pc, #76]	; (401b78 <glue_spi_in_process+0x5c>)
  401b2a:	4293      	cmp	r3, r2
  401b2c:	d10b      	bne.n	401b46 <glue_spi_in_process+0x2a>
  401b2e:	4b13      	ldr	r3, [pc, #76]	; (401b7c <glue_spi_in_process+0x60>)
  401b30:	781b      	ldrb	r3, [r3, #0]
  401b32:	b2db      	uxtb	r3, r3
  401b34:	2b00      	cmp	r3, #0
  401b36:	d104      	bne.n	401b42 <glue_spi_in_process+0x26>
  401b38:	4b11      	ldr	r3, [pc, #68]	; (401b80 <glue_spi_in_process+0x64>)
  401b3a:	781b      	ldrb	r3, [r3, #0]
  401b3c:	b2db      	uxtb	r3, r3
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d001      	beq.n	401b46 <glue_spi_in_process+0x2a>
	{
		return(true);
  401b42:	2301      	movs	r3, #1
  401b44:	e011      	b.n	401b6a <glue_spi_in_process+0x4e>
	}
	else if ((spi->halSpiDriver == &SPI_1) && (spi1_dma_tx_in_process || spi1_dma_rx_in_process))
  401b46:	687b      	ldr	r3, [r7, #4]
  401b48:	681b      	ldr	r3, [r3, #0]
  401b4a:	4a0e      	ldr	r2, [pc, #56]	; (401b84 <glue_spi_in_process+0x68>)
  401b4c:	4293      	cmp	r3, r2
  401b4e:	d10b      	bne.n	401b68 <glue_spi_in_process+0x4c>
  401b50:	4b0d      	ldr	r3, [pc, #52]	; (401b88 <glue_spi_in_process+0x6c>)
  401b52:	781b      	ldrb	r3, [r3, #0]
  401b54:	b2db      	uxtb	r3, r3
  401b56:	2b00      	cmp	r3, #0
  401b58:	d104      	bne.n	401b64 <glue_spi_in_process+0x48>
  401b5a:	4b0c      	ldr	r3, [pc, #48]	; (401b8c <glue_spi_in_process+0x70>)
  401b5c:	781b      	ldrb	r3, [r3, #0]
  401b5e:	b2db      	uxtb	r3, r3
  401b60:	2b00      	cmp	r3, #0
  401b62:	d001      	beq.n	401b68 <glue_spi_in_process+0x4c>
	{
		return(true);
  401b64:	2301      	movs	r3, #1
  401b66:	e000      	b.n	401b6a <glue_spi_in_process+0x4e>
	}
	else
	{
		return(false);
  401b68:	2300      	movs	r3, #0
	}
}
  401b6a:	4618      	mov	r0, r3
  401b6c:	370c      	adds	r7, #12
  401b6e:	46bd      	mov	sp, r7
  401b70:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b74:	4770      	bx	lr
  401b76:	bf00      	nop
  401b78:	20401388 	.word	0x20401388
  401b7c:	204010e1 	.word	0x204010e1
  401b80:	204010e2 	.word	0x204010e2
  401b84:	2040134c 	.word	0x2040134c
  401b88:	204010e3 	.word	0x204010e3
  401b8c:	204010e4 	.word	0x204010e4

00401b90 <glue_spi0_cb_tx_done>:
// See: http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0646b/BABIGDDC.html
// There are potentially silicon eratta issues with cache coherency on this chip revision.
// See: http://community.atmel.com/forum/samv7-scbdisabledcache-crashes-hardfault

void glue_spi0_cb_tx_done(struct _dma_resource *resource)
{
  401b90:	b580      	push	{r7, lr}
  401b92:	b082      	sub	sp, #8
  401b94:	af00      	add	r7, sp, #0
  401b96:	6078      	str	r0, [r7, #4]
	//The interrupt fires before all bits are shifted out.  See if we can fix that later.
	//For now we just waste some cycles waiting for it to figure itself out.
	delay_us(30);
  401b98:	201e      	movs	r0, #30
  401b9a:	4b0d      	ldr	r3, [pc, #52]	; (401bd0 <glue_spi0_cb_tx_done+0x40>)
  401b9c:	4798      	blx	r3
	if (!spi0_dma_rx_in_process)
  401b9e:	4b0d      	ldr	r3, [pc, #52]	; (401bd4 <glue_spi0_cb_tx_done+0x44>)
  401ba0:	781b      	ldrb	r3, [r3, #0]
  401ba2:	b2db      	uxtb	r3, r3
  401ba4:	f083 0301 	eor.w	r3, r3, #1
  401ba8:	b2db      	uxtb	r3, r3
  401baa:	2b00      	cmp	r3, #0
  401bac:	d003      	beq.n	401bb6 <glue_spi0_cb_tx_done+0x26>
	{
		gpio_set_pin_level(CS, true);
  401bae:	2101      	movs	r1, #1
  401bb0:	2059      	movs	r0, #89	; 0x59
  401bb2:	4b09      	ldr	r3, [pc, #36]	; (401bd8 <glue_spi0_cb_tx_done+0x48>)
  401bb4:	4798      	blx	r3
	}
	spi0_dma_tx_in_process = false;
  401bb6:	4b09      	ldr	r3, [pc, #36]	; (401bdc <glue_spi0_cb_tx_done+0x4c>)
  401bb8:	2200      	movs	r2, #0
  401bba:	701a      	strb	r2, [r3, #0]
	txInts++;
  401bbc:	4b08      	ldr	r3, [pc, #32]	; (401be0 <glue_spi0_cb_tx_done+0x50>)
  401bbe:	881b      	ldrh	r3, [r3, #0]
  401bc0:	3301      	adds	r3, #1
  401bc2:	b29a      	uxth	r2, r3
  401bc4:	4b06      	ldr	r3, [pc, #24]	; (401be0 <glue_spi0_cb_tx_done+0x50>)
  401bc6:	801a      	strh	r2, [r3, #0]
}
  401bc8:	bf00      	nop
  401bca:	3708      	adds	r7, #8
  401bcc:	46bd      	mov	sp, r7
  401bce:	bd80      	pop	{r7, pc}
  401bd0:	00401de9 	.word	0x00401de9
  401bd4:	204010e2 	.word	0x204010e2
  401bd8:	004017dd 	.word	0x004017dd
  401bdc:	204010e1 	.word	0x204010e1
  401be0:	204010fc 	.word	0x204010fc

00401be4 <glue_spi0_cb_rx_done>:

void glue_spi0_cb_rx_done(struct _dma_resource *resource)
{
  401be4:	b580      	push	{r7, lr}
  401be6:	b082      	sub	sp, #8
  401be8:	af00      	add	r7, sp, #0
  401bea:	6078      	str	r0, [r7, #4]
	}
	*/
	
	//The interrupt fires before all bits are shifted out.  See if we can fix that later.
	//For now we just waste some cycles waiting for it to figure itself out
	delay_us(30);
  401bec:	201e      	movs	r0, #30
  401bee:	4b09      	ldr	r3, [pc, #36]	; (401c14 <glue_spi0_cb_rx_done+0x30>)
  401bf0:	4798      	blx	r3
	gpio_set_pin_level(CS, true);
  401bf2:	2101      	movs	r1, #1
  401bf4:	2059      	movs	r0, #89	; 0x59
  401bf6:	4b08      	ldr	r3, [pc, #32]	; (401c18 <glue_spi0_cb_rx_done+0x34>)
  401bf8:	4798      	blx	r3
	spi0_dma_rx_in_process = false;
  401bfa:	4b08      	ldr	r3, [pc, #32]	; (401c1c <glue_spi0_cb_rx_done+0x38>)
  401bfc:	2200      	movs	r2, #0
  401bfe:	701a      	strb	r2, [r3, #0]
	rxInts++;
  401c00:	4b07      	ldr	r3, [pc, #28]	; (401c20 <glue_spi0_cb_rx_done+0x3c>)
  401c02:	881b      	ldrh	r3, [r3, #0]
  401c04:	3301      	adds	r3, #1
  401c06:	b29a      	uxth	r2, r3
  401c08:	4b05      	ldr	r3, [pc, #20]	; (401c20 <glue_spi0_cb_rx_done+0x3c>)
  401c0a:	801a      	strh	r2, [r3, #0]
}
  401c0c:	bf00      	nop
  401c0e:	3708      	adds	r7, #8
  401c10:	46bd      	mov	sp, r7
  401c12:	bd80      	pop	{r7, pc}
  401c14:	00401de9 	.word	0x00401de9
  401c18:	004017dd 	.word	0x004017dd
  401c1c:	204010e2 	.word	0x204010e2
  401c20:	204010fe 	.word	0x204010fe

00401c24 <glue_spi0_cb_error>:

void glue_spi0_cb_error(struct _dma_resource *resource)
{
  401c24:	b580      	push	{r7, lr}
  401c26:	b082      	sub	sp, #8
  401c28:	af00      	add	r7, sp, #0
  401c2a:	6078      	str	r0, [r7, #4]
	//TODO: Reset flags based on the dma channel.
	gpio_set_pin_level(CS, true);
  401c2c:	2101      	movs	r1, #1
  401c2e:	2059      	movs	r0, #89	; 0x59
  401c30:	4b05      	ldr	r3, [pc, #20]	; (401c48 <glue_spi0_cb_error+0x24>)
  401c32:	4798      	blx	r3
	spi0_dma_tx_in_process = false;
  401c34:	4b05      	ldr	r3, [pc, #20]	; (401c4c <glue_spi0_cb_error+0x28>)
  401c36:	2200      	movs	r2, #0
  401c38:	701a      	strb	r2, [r3, #0]
	spi0_dma_rx_in_process = false;
  401c3a:	4b05      	ldr	r3, [pc, #20]	; (401c50 <glue_spi0_cb_error+0x2c>)
  401c3c:	2200      	movs	r2, #0
  401c3e:	701a      	strb	r2, [r3, #0]
}
  401c40:	bf00      	nop
  401c42:	3708      	adds	r7, #8
  401c44:	46bd      	mov	sp, r7
  401c46:	bd80      	pop	{r7, pc}
  401c48:	004017dd 	.word	0x004017dd
  401c4c:	204010e1 	.word	0x204010e1
  401c50:	204010e2 	.word	0x204010e2

00401c54 <glue_spi1_cb_tx_done>:

void glue_spi1_cb_tx_done(struct _dma_resource *resource)
{
  401c54:	b580      	push	{r7, lr}
  401c56:	b082      	sub	sp, #8
  401c58:	af00      	add	r7, sp, #0
  401c5a:	6078      	str	r0, [r7, #4]
	//The interrupt fires before all bits are shifted out.  See if we can fix that later.
	//For now we just waste some cycles waiting for it to figure itself out.
	delay_us(30);
  401c5c:	201e      	movs	r0, #30
  401c5e:	4b0d      	ldr	r3, [pc, #52]	; (401c94 <glue_spi1_cb_tx_done+0x40>)
  401c60:	4798      	blx	r3
	if (!spi1_dma_rx_in_process)
  401c62:	4b0d      	ldr	r3, [pc, #52]	; (401c98 <glue_spi1_cb_tx_done+0x44>)
  401c64:	781b      	ldrb	r3, [r3, #0]
  401c66:	b2db      	uxtb	r3, r3
  401c68:	f083 0301 	eor.w	r3, r3, #1
  401c6c:	b2db      	uxtb	r3, r3
  401c6e:	2b00      	cmp	r3, #0
  401c70:	d003      	beq.n	401c7a <glue_spi1_cb_tx_done+0x26>
	{
		gpio_set_pin_level(CS_2, true);
  401c72:	2101      	movs	r1, #1
  401c74:	2071      	movs	r0, #113	; 0x71
  401c76:	4b09      	ldr	r3, [pc, #36]	; (401c9c <glue_spi1_cb_tx_done+0x48>)
  401c78:	4798      	blx	r3
	}
	spi1_dma_tx_in_process = false;
  401c7a:	4b09      	ldr	r3, [pc, #36]	; (401ca0 <glue_spi1_cb_tx_done+0x4c>)
  401c7c:	2200      	movs	r2, #0
  401c7e:	701a      	strb	r2, [r3, #0]
	txInts++;
  401c80:	4b08      	ldr	r3, [pc, #32]	; (401ca4 <glue_spi1_cb_tx_done+0x50>)
  401c82:	881b      	ldrh	r3, [r3, #0]
  401c84:	3301      	adds	r3, #1
  401c86:	b29a      	uxth	r2, r3
  401c88:	4b06      	ldr	r3, [pc, #24]	; (401ca4 <glue_spi1_cb_tx_done+0x50>)
  401c8a:	801a      	strh	r2, [r3, #0]
}
  401c8c:	bf00      	nop
  401c8e:	3708      	adds	r7, #8
  401c90:	46bd      	mov	sp, r7
  401c92:	bd80      	pop	{r7, pc}
  401c94:	00401de9 	.word	0x00401de9
  401c98:	204010e4 	.word	0x204010e4
  401c9c:	004017dd 	.word	0x004017dd
  401ca0:	204010e3 	.word	0x204010e3
  401ca4:	204010fc 	.word	0x204010fc

00401ca8 <glue_spi1_cb_rx_done>:

void glue_spi1_cb_rx_done(struct _dma_resource *resource)
{
  401ca8:	b580      	push	{r7, lr}
  401caa:	b082      	sub	sp, #8
  401cac:	af00      	add	r7, sp, #0
  401cae:	6078      	str	r0, [r7, #4]
	}
	*/
	
	//The interrupt fires before all bits are shifted out.  See if we can fix that later.
	//For now we just waste some cycles waiting for it to figure itself out
	delay_us(30);
  401cb0:	201e      	movs	r0, #30
  401cb2:	4b09      	ldr	r3, [pc, #36]	; (401cd8 <glue_spi1_cb_rx_done+0x30>)
  401cb4:	4798      	blx	r3
	gpio_set_pin_level(CS_2, true);
  401cb6:	2101      	movs	r1, #1
  401cb8:	2071      	movs	r0, #113	; 0x71
  401cba:	4b08      	ldr	r3, [pc, #32]	; (401cdc <glue_spi1_cb_rx_done+0x34>)
  401cbc:	4798      	blx	r3
	spi1_dma_rx_in_process = false;
  401cbe:	4b08      	ldr	r3, [pc, #32]	; (401ce0 <glue_spi1_cb_rx_done+0x38>)
  401cc0:	2200      	movs	r2, #0
  401cc2:	701a      	strb	r2, [r3, #0]
	rxInts++;
  401cc4:	4b07      	ldr	r3, [pc, #28]	; (401ce4 <glue_spi1_cb_rx_done+0x3c>)
  401cc6:	881b      	ldrh	r3, [r3, #0]
  401cc8:	3301      	adds	r3, #1
  401cca:	b29a      	uxth	r2, r3
  401ccc:	4b05      	ldr	r3, [pc, #20]	; (401ce4 <glue_spi1_cb_rx_done+0x3c>)
  401cce:	801a      	strh	r2, [r3, #0]
}
  401cd0:	bf00      	nop
  401cd2:	3708      	adds	r7, #8
  401cd4:	46bd      	mov	sp, r7
  401cd6:	bd80      	pop	{r7, pc}
  401cd8:	00401de9 	.word	0x00401de9
  401cdc:	004017dd 	.word	0x004017dd
  401ce0:	204010e4 	.word	0x204010e4
  401ce4:	204010fe 	.word	0x204010fe

00401ce8 <glue_spi1_cb_error>:

void glue_spi1_cb_error(struct _dma_resource *resource)
{
  401ce8:	b580      	push	{r7, lr}
  401cea:	b082      	sub	sp, #8
  401cec:	af00      	add	r7, sp, #0
  401cee:	6078      	str	r0, [r7, #4]
	//TODO: Reset flags based on the dma channel.
	gpio_set_pin_level(CS_2, true);
  401cf0:	2101      	movs	r1, #1
  401cf2:	2071      	movs	r0, #113	; 0x71
  401cf4:	4b05      	ldr	r3, [pc, #20]	; (401d0c <glue_spi1_cb_error+0x24>)
  401cf6:	4798      	blx	r3
	spi1_dma_tx_in_process = false;
  401cf8:	4b05      	ldr	r3, [pc, #20]	; (401d10 <glue_spi1_cb_error+0x28>)
  401cfa:	2200      	movs	r2, #0
  401cfc:	701a      	strb	r2, [r3, #0]
	spi1_dma_rx_in_process = false;
  401cfe:	4b05      	ldr	r3, [pc, #20]	; (401d14 <glue_spi1_cb_error+0x2c>)
  401d00:	2200      	movs	r2, #0
  401d02:	701a      	strb	r2, [r3, #0]
  401d04:	bf00      	nop
  401d06:	3708      	adds	r7, #8
  401d08:	46bd      	mov	sp, r7
  401d0a:	bd80      	pop	{r7, pc}
  401d0c:	004017dd 	.word	0x004017dd
  401d10:	204010e3 	.word	0x204010e3
  401d14:	204010e4 	.word	0x204010e4

00401d18 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
  401d18:	b480      	push	{r7}
  401d1a:	b085      	sub	sp, #20
  401d1c:	af00      	add	r7, sp, #0
  401d1e:	6078      	str	r0, [r7, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401d20:	f3ef 8310 	mrs	r3, PRIMASK
  401d24:	60fb      	str	r3, [r7, #12]
  return(result);
  401d26:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
  401d28:	687b      	ldr	r3, [r7, #4]
  401d2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401d2c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  401d2e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  401d32:	bf00      	nop
  401d34:	3714      	adds	r7, #20
  401d36:	46bd      	mov	sp, r7
  401d38:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d3c:	4770      	bx	lr

00401d3e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
  401d3e:	b480      	push	{r7}
  401d40:	b085      	sub	sp, #20
  401d42:	af00      	add	r7, sp, #0
  401d44:	6078      	str	r0, [r7, #4]
  401d46:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
  401d4a:	687b      	ldr	r3, [r7, #4]
  401d4c:	681b      	ldr	r3, [r3, #0]
  401d4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  401d50:	68fb      	ldr	r3, [r7, #12]
  401d52:	f383 8810 	msr	PRIMASK, r3
}
  401d56:	bf00      	nop
  401d58:	3714      	adds	r7, #20
  401d5a:	46bd      	mov	sp, r7
  401d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d60:	4770      	bx	lr
	...

00401d64 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
  401d64:	b580      	push	{r7, lr}
  401d66:	b084      	sub	sp, #16
  401d68:	af00      	add	r7, sp, #0
  401d6a:	6078      	str	r0, [r7, #4]
  401d6c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
  401d6e:	687b      	ldr	r3, [r7, #4]
  401d70:	2b00      	cmp	r3, #0
  401d72:	d004      	beq.n	401d7e <dac_sync_init+0x1a>
  401d74:	683b      	ldr	r3, [r7, #0]
  401d76:	2b00      	cmp	r3, #0
  401d78:	d001      	beq.n	401d7e <dac_sync_init+0x1a>
  401d7a:	2301      	movs	r3, #1
  401d7c:	e000      	b.n	401d80 <dac_sync_init+0x1c>
  401d7e:	2300      	movs	r3, #0
  401d80:	f003 0301 	and.w	r3, r3, #1
  401d84:	b2db      	uxtb	r3, r3
  401d86:	2232      	movs	r2, #50	; 0x32
  401d88:	4914      	ldr	r1, [pc, #80]	; (401ddc <dac_sync_init+0x78>)
  401d8a:	4618      	mov	r0, r3
  401d8c:	4b14      	ldr	r3, [pc, #80]	; (401de0 <dac_sync_init+0x7c>)
  401d8e:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
  401d90:	687b      	ldr	r3, [r7, #4]
  401d92:	6839      	ldr	r1, [r7, #0]
  401d94:	4618      	mov	r0, r3
  401d96:	4b13      	ldr	r3, [pc, #76]	; (401de4 <dac_sync_init+0x80>)
  401d98:	4798      	blx	r3
  401d9a:	60b8      	str	r0, [r7, #8]
	if (rc) {
  401d9c:	68bb      	ldr	r3, [r7, #8]
  401d9e:	2b00      	cmp	r3, #0
  401da0:	d001      	beq.n	401da6 <dac_sync_init+0x42>
		return rc;
  401da2:	68bb      	ldr	r3, [r7, #8]
  401da4:	e015      	b.n	401dd2 <dac_sync_init+0x6e>
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
  401da6:	2300      	movs	r3, #0
  401da8:	73fb      	strb	r3, [r7, #15]
  401daa:	e00e      	b.n	401dca <dac_sync_init+0x66>
		descr->sel_ch[i].buffer = NULL;
  401dac:	7bfb      	ldrb	r3, [r7, #15]
  401dae:	687a      	ldr	r2, [r7, #4]
  401db0:	00db      	lsls	r3, r3, #3
  401db2:	4413      	add	r3, r2
  401db4:	2200      	movs	r2, #0
  401db6:	605a      	str	r2, [r3, #4]
		descr->sel_ch[i].length = 0;
  401db8:	7bfb      	ldrb	r3, [r7, #15]
  401dba:	687a      	ldr	r2, [r7, #4]
  401dbc:	00db      	lsls	r3, r3, #3
  401dbe:	4413      	add	r3, r2
  401dc0:	2200      	movs	r2, #0
  401dc2:	609a      	str	r2, [r3, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
  401dc4:	7bfb      	ldrb	r3, [r7, #15]
  401dc6:	3301      	adds	r3, #1
  401dc8:	73fb      	strb	r3, [r7, #15]
  401dca:	7bfb      	ldrb	r3, [r7, #15]
  401dcc:	2b01      	cmp	r3, #1
  401dce:	d9ed      	bls.n	401dac <dac_sync_init+0x48>
	}

	return ERR_NONE;
  401dd0:	2300      	movs	r3, #0
}
  401dd2:	4618      	mov	r0, r3
  401dd4:	3710      	adds	r7, #16
  401dd6:	46bd      	mov	sp, r7
  401dd8:	bd80      	pop	{r7, pc}
  401dda:	bf00      	nop
  401ddc:	00407b18 	.word	0x00407b18
  401de0:	00402d41 	.word	0x00402d41
  401de4:	00403405 	.word	0x00403405

00401de8 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  401de8:	b590      	push	{r4, r7, lr}
  401dea:	b083      	sub	sp, #12
  401dec:	af00      	add	r7, sp, #0
  401dee:	4603      	mov	r3, r0
  401df0:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
  401df2:	4b07      	ldr	r3, [pc, #28]	; (401e10 <delay_us+0x28>)
  401df4:	681c      	ldr	r4, [r3, #0]
  401df6:	88fb      	ldrh	r3, [r7, #6]
  401df8:	4618      	mov	r0, r3
  401dfa:	4b06      	ldr	r3, [pc, #24]	; (401e14 <delay_us+0x2c>)
  401dfc:	4798      	blx	r3
  401dfe:	4603      	mov	r3, r0
  401e00:	4619      	mov	r1, r3
  401e02:	4620      	mov	r0, r4
  401e04:	4b04      	ldr	r3, [pc, #16]	; (401e18 <delay_us+0x30>)
  401e06:	4798      	blx	r3
}
  401e08:	bf00      	nop
  401e0a:	370c      	adds	r7, #12
  401e0c:	46bd      	mov	sp, r7
  401e0e:	bd90      	pop	{r4, r7, pc}
  401e10:	2040112c 	.word	0x2040112c
  401e14:	00402ff5 	.word	0x00402ff5
  401e18:	0040312d 	.word	0x0040312d

00401e1c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  401e1c:	b590      	push	{r4, r7, lr}
  401e1e:	b083      	sub	sp, #12
  401e20:	af00      	add	r7, sp, #0
  401e22:	4603      	mov	r3, r0
  401e24:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  401e26:	4b07      	ldr	r3, [pc, #28]	; (401e44 <delay_ms+0x28>)
  401e28:	681c      	ldr	r4, [r3, #0]
  401e2a:	88fb      	ldrh	r3, [r7, #6]
  401e2c:	4618      	mov	r0, r3
  401e2e:	4b06      	ldr	r3, [pc, #24]	; (401e48 <delay_ms+0x2c>)
  401e30:	4798      	blx	r3
  401e32:	4603      	mov	r3, r0
  401e34:	4619      	mov	r1, r3
  401e36:	4620      	mov	r0, r4
  401e38:	4b04      	ldr	r3, [pc, #16]	; (401e4c <delay_ms+0x30>)
  401e3a:	4798      	blx	r3
}
  401e3c:	bf00      	nop
  401e3e:	370c      	adds	r7, #12
  401e40:	46bd      	mov	sp, r7
  401e42:	bd90      	pop	{r4, r7, pc}
  401e44:	2040112c 	.word	0x2040112c
  401e48:	00403105 	.word	0x00403105
  401e4c:	0040312d 	.word	0x0040312d

00401e50 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
  401e50:	b580      	push	{r7, lr}
  401e52:	b082      	sub	sp, #8
  401e54:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401e56:	2300      	movs	r3, #0
  401e58:	80fb      	strh	r3, [r7, #6]
  401e5a:	e00e      	b.n	401e7a <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
  401e5c:	88fb      	ldrh	r3, [r7, #6]
  401e5e:	4a0c      	ldr	r2, [pc, #48]	; (401e90 <ext_irq_init+0x40>)
  401e60:	00db      	lsls	r3, r3, #3
  401e62:	4413      	add	r3, r2
  401e64:	f04f 32ff 	mov.w	r2, #4294967295
  401e68:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
  401e6a:	88fb      	ldrh	r3, [r7, #6]
  401e6c:	4a08      	ldr	r2, [pc, #32]	; (401e90 <ext_irq_init+0x40>)
  401e6e:	2100      	movs	r1, #0
  401e70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401e74:	88fb      	ldrh	r3, [r7, #6]
  401e76:	3301      	adds	r3, #1
  401e78:	80fb      	strh	r3, [r7, #6]
  401e7a:	88fb      	ldrh	r3, [r7, #6]
  401e7c:	2b01      	cmp	r3, #1
  401e7e:	d9ed      	bls.n	401e5c <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
  401e80:	4804      	ldr	r0, [pc, #16]	; (401e94 <ext_irq_init+0x44>)
  401e82:	4b05      	ldr	r3, [pc, #20]	; (401e98 <ext_irq_init+0x48>)
  401e84:	4798      	blx	r3
  401e86:	4603      	mov	r3, r0
}
  401e88:	4618      	mov	r0, r3
  401e8a:	3708      	adds	r7, #8
  401e8c:	46bd      	mov	sp, r7
  401e8e:	bd80      	pop	{r7, pc}
  401e90:	20401130 	.word	0x20401130
  401e94:	00401ff5 	.word	0x00401ff5
  401e98:	00403ac5 	.word	0x00403ac5

00401e9c <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
  401e9c:	b580      	push	{r7, lr}
  401e9e:	b086      	sub	sp, #24
  401ea0:	af00      	add	r7, sp, #0
  401ea2:	6078      	str	r0, [r7, #4]
  401ea4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
  401ea6:	2300      	movs	r3, #0
  401ea8:	75fb      	strb	r3, [r7, #23]
  401eaa:	2300      	movs	r3, #0
  401eac:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
  401eae:	2300      	movs	r3, #0
  401eb0:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
  401eb2:	e012      	b.n	401eda <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
  401eb4:	7dfb      	ldrb	r3, [r7, #23]
  401eb6:	4a4d      	ldr	r2, [pc, #308]	; (401fec <ext_irq_register+0x150>)
  401eb8:	00db      	lsls	r3, r3, #3
  401eba:	4413      	add	r3, r2
  401ebc:	685a      	ldr	r2, [r3, #4]
  401ebe:	687b      	ldr	r3, [r7, #4]
  401ec0:	429a      	cmp	r2, r3
  401ec2:	d107      	bne.n	401ed4 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
  401ec4:	7dfb      	ldrb	r3, [r7, #23]
  401ec6:	4949      	ldr	r1, [pc, #292]	; (401fec <ext_irq_register+0x150>)
  401ec8:	683a      	ldr	r2, [r7, #0]
  401eca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
  401ece:	2301      	movs	r3, #1
  401ed0:	757b      	strb	r3, [r7, #21]
			break;
  401ed2:	e005      	b.n	401ee0 <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
  401ed4:	7dfb      	ldrb	r3, [r7, #23]
  401ed6:	3301      	adds	r3, #1
  401ed8:	75fb      	strb	r3, [r7, #23]
  401eda:	7dfb      	ldrb	r3, [r7, #23]
  401edc:	2b01      	cmp	r3, #1
  401ede:	d9e9      	bls.n	401eb4 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
  401ee0:	683b      	ldr	r3, [r7, #0]
  401ee2:	2b00      	cmp	r3, #0
  401ee4:	d10e      	bne.n	401f04 <ext_irq_register+0x68>
		if (!found) {
  401ee6:	7d7b      	ldrb	r3, [r7, #21]
  401ee8:	f083 0301 	eor.w	r3, r3, #1
  401eec:	b2db      	uxtb	r3, r3
  401eee:	2b00      	cmp	r3, #0
  401ef0:	d002      	beq.n	401ef8 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
  401ef2:	f06f 030c 	mvn.w	r3, #12
  401ef6:	e074      	b.n	401fe2 <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
  401ef8:	2100      	movs	r1, #0
  401efa:	6878      	ldr	r0, [r7, #4]
  401efc:	4b3c      	ldr	r3, [pc, #240]	; (401ff0 <ext_irq_register+0x154>)
  401efe:	4798      	blx	r3
  401f00:	4603      	mov	r3, r0
  401f02:	e06e      	b.n	401fe2 <ext_irq_register+0x146>
	}

	if (!found) {
  401f04:	7d7b      	ldrb	r3, [r7, #21]
  401f06:	f083 0301 	eor.w	r3, r3, #1
  401f0a:	b2db      	uxtb	r3, r3
  401f0c:	2b00      	cmp	r3, #0
  401f0e:	d05a      	beq.n	401fc6 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401f10:	2300      	movs	r3, #0
  401f12:	75fb      	strb	r3, [r7, #23]
  401f14:	e016      	b.n	401f44 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
  401f16:	7dfb      	ldrb	r3, [r7, #23]
  401f18:	4a34      	ldr	r2, [pc, #208]	; (401fec <ext_irq_register+0x150>)
  401f1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  401f1e:	2b00      	cmp	r3, #0
  401f20:	d10d      	bne.n	401f3e <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
  401f22:	7dfb      	ldrb	r3, [r7, #23]
  401f24:	4931      	ldr	r1, [pc, #196]	; (401fec <ext_irq_register+0x150>)
  401f26:	683a      	ldr	r2, [r7, #0]
  401f28:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
  401f2c:	7dfb      	ldrb	r3, [r7, #23]
  401f2e:	4a2f      	ldr	r2, [pc, #188]	; (401fec <ext_irq_register+0x150>)
  401f30:	00db      	lsls	r3, r3, #3
  401f32:	4413      	add	r3, r2
  401f34:	687a      	ldr	r2, [r7, #4]
  401f36:	605a      	str	r2, [r3, #4]
				found           = true;
  401f38:	2301      	movs	r3, #1
  401f3a:	757b      	strb	r3, [r7, #21]
				break;
  401f3c:	e005      	b.n	401f4a <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  401f3e:	7dfb      	ldrb	r3, [r7, #23]
  401f40:	3301      	adds	r3, #1
  401f42:	75fb      	strb	r3, [r7, #23]
  401f44:	7dfb      	ldrb	r3, [r7, #23]
  401f46:	2b01      	cmp	r3, #1
  401f48:	d9e5      	bls.n	401f16 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401f4a:	e036      	b.n	401fba <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
  401f4c:	7dfb      	ldrb	r3, [r7, #23]
  401f4e:	4a27      	ldr	r2, [pc, #156]	; (401fec <ext_irq_register+0x150>)
  401f50:	00db      	lsls	r3, r3, #3
  401f52:	4413      	add	r3, r2
  401f54:	685a      	ldr	r2, [r3, #4]
  401f56:	7dbb      	ldrb	r3, [r7, #22]
  401f58:	4924      	ldr	r1, [pc, #144]	; (401fec <ext_irq_register+0x150>)
  401f5a:	00db      	lsls	r3, r3, #3
  401f5c:	440b      	add	r3, r1
  401f5e:	685b      	ldr	r3, [r3, #4]
  401f60:	429a      	cmp	r2, r3
  401f62:	d227      	bcs.n	401fb4 <ext_irq_register+0x118>
  401f64:	7dbb      	ldrb	r3, [r7, #22]
  401f66:	4a21      	ldr	r2, [pc, #132]	; (401fec <ext_irq_register+0x150>)
  401f68:	00db      	lsls	r3, r3, #3
  401f6a:	4413      	add	r3, r2
  401f6c:	685b      	ldr	r3, [r3, #4]
  401f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f72:	d01f      	beq.n	401fb4 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
  401f74:	7dbb      	ldrb	r3, [r7, #22]
  401f76:	491d      	ldr	r1, [pc, #116]	; (401fec <ext_irq_register+0x150>)
  401f78:	f107 020c 	add.w	r2, r7, #12
  401f7c:	00db      	lsls	r3, r3, #3
  401f7e:	440b      	add	r3, r1
  401f80:	e893 0003 	ldmia.w	r3, {r0, r1}
  401f84:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
  401f88:	7dbb      	ldrb	r3, [r7, #22]
  401f8a:	7dfa      	ldrb	r2, [r7, #23]
  401f8c:	4817      	ldr	r0, [pc, #92]	; (401fec <ext_irq_register+0x150>)
  401f8e:	4917      	ldr	r1, [pc, #92]	; (401fec <ext_irq_register+0x150>)
  401f90:	00db      	lsls	r3, r3, #3
  401f92:	4403      	add	r3, r0
  401f94:	00d2      	lsls	r2, r2, #3
  401f96:	440a      	add	r2, r1
  401f98:	e892 0003 	ldmia.w	r2, {r0, r1}
  401f9c:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
  401fa0:	7dfb      	ldrb	r3, [r7, #23]
  401fa2:	4a12      	ldr	r2, [pc, #72]	; (401fec <ext_irq_register+0x150>)
  401fa4:	00db      	lsls	r3, r3, #3
  401fa6:	4413      	add	r3, r2
  401fa8:	f107 020c 	add.w	r2, r7, #12
  401fac:	e892 0003 	ldmia.w	r2, {r0, r1}
  401fb0:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
  401fb4:	7dbb      	ldrb	r3, [r7, #22]
  401fb6:	3301      	adds	r3, #1
  401fb8:	75bb      	strb	r3, [r7, #22]
  401fba:	7dbb      	ldrb	r3, [r7, #22]
  401fbc:	2b01      	cmp	r3, #1
  401fbe:	d802      	bhi.n	401fc6 <ext_irq_register+0x12a>
  401fc0:	7dfb      	ldrb	r3, [r7, #23]
  401fc2:	2b01      	cmp	r3, #1
  401fc4:	d9c2      	bls.n	401f4c <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
  401fc6:	7d7b      	ldrb	r3, [r7, #21]
  401fc8:	f083 0301 	eor.w	r3, r3, #1
  401fcc:	b2db      	uxtb	r3, r3
  401fce:	2b00      	cmp	r3, #0
  401fd0:	d002      	beq.n	401fd8 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
  401fd2:	f06f 030c 	mvn.w	r3, #12
  401fd6:	e004      	b.n	401fe2 <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
  401fd8:	2101      	movs	r1, #1
  401fda:	6878      	ldr	r0, [r7, #4]
  401fdc:	4b04      	ldr	r3, [pc, #16]	; (401ff0 <ext_irq_register+0x154>)
  401fde:	4798      	blx	r3
  401fe0:	4603      	mov	r3, r0
}
  401fe2:	4618      	mov	r0, r3
  401fe4:	3718      	adds	r7, #24
  401fe6:	46bd      	mov	sp, r7
  401fe8:	bd80      	pop	{r7, pc}
  401fea:	bf00      	nop
  401fec:	20401130 	.word	0x20401130
  401ff0:	00403af9 	.word	0x00403af9

00401ff4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  401ff4:	b580      	push	{r7, lr}
  401ff6:	b084      	sub	sp, #16
  401ff8:	af00      	add	r7, sp, #0
  401ffa:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  401ffc:	2300      	movs	r3, #0
  401ffe:	73fb      	strb	r3, [r7, #15]
  402000:	2302      	movs	r3, #2
  402002:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
  402004:	e02a      	b.n	40205c <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
  402006:	7bba      	ldrb	r2, [r7, #14]
  402008:	7bfb      	ldrb	r3, [r7, #15]
  40200a:	4413      	add	r3, r2
  40200c:	105b      	asrs	r3, r3, #1
  40200e:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
  402010:	7b7b      	ldrb	r3, [r7, #13]
  402012:	2b01      	cmp	r3, #1
  402014:	d827      	bhi.n	402066 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  402016:	7b7b      	ldrb	r3, [r7, #13]
  402018:	4a16      	ldr	r2, [pc, #88]	; (402074 <process_ext_irq+0x80>)
  40201a:	00db      	lsls	r3, r3, #3
  40201c:	4413      	add	r3, r2
  40201e:	685a      	ldr	r2, [r3, #4]
  402020:	687b      	ldr	r3, [r7, #4]
  402022:	429a      	cmp	r2, r3
  402024:	d10b      	bne.n	40203e <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
  402026:	7b7b      	ldrb	r3, [r7, #13]
  402028:	4a12      	ldr	r2, [pc, #72]	; (402074 <process_ext_irq+0x80>)
  40202a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40202e:	2b00      	cmp	r3, #0
  402030:	d01b      	beq.n	40206a <process_ext_irq+0x76>
				ext_irqs[middle].cb();
  402032:	7b7b      	ldrb	r3, [r7, #13]
  402034:	4a0f      	ldr	r2, [pc, #60]	; (402074 <process_ext_irq+0x80>)
  402036:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40203a:	4798      	blx	r3
			}
			return;
  40203c:	e015      	b.n	40206a <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
  40203e:	7b7b      	ldrb	r3, [r7, #13]
  402040:	4a0c      	ldr	r2, [pc, #48]	; (402074 <process_ext_irq+0x80>)
  402042:	00db      	lsls	r3, r3, #3
  402044:	4413      	add	r3, r2
  402046:	685a      	ldr	r2, [r3, #4]
  402048:	687b      	ldr	r3, [r7, #4]
  40204a:	429a      	cmp	r2, r3
  40204c:	d203      	bcs.n	402056 <process_ext_irq+0x62>
			lower = middle + 1;
  40204e:	7b7b      	ldrb	r3, [r7, #13]
  402050:	3301      	adds	r3, #1
  402052:	73fb      	strb	r3, [r7, #15]
  402054:	e002      	b.n	40205c <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
  402056:	7b7b      	ldrb	r3, [r7, #13]
  402058:	3b01      	subs	r3, #1
  40205a:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
  40205c:	7bba      	ldrb	r2, [r7, #14]
  40205e:	7bfb      	ldrb	r3, [r7, #15]
  402060:	429a      	cmp	r2, r3
  402062:	d2d0      	bcs.n	402006 <process_ext_irq+0x12>
  402064:	e002      	b.n	40206c <process_ext_irq+0x78>
			return;
  402066:	bf00      	nop
  402068:	e000      	b.n	40206c <process_ext_irq+0x78>
			return;
  40206a:	bf00      	nop
		}
	}
}
  40206c:	3710      	adds	r7, #16
  40206e:	46bd      	mov	sp, r7
  402070:	bd80      	pop	{r7, pc}
  402072:	bf00      	nop
  402074:	20401130 	.word	0x20401130

00402078 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
  402078:	b580      	push	{r7, lr}
  40207a:	b08a      	sub	sp, #40	; 0x28
  40207c:	af00      	add	r7, sp, #0
  40207e:	60f8      	str	r0, [r7, #12]
  402080:	60b9      	str	r1, [r7, #8]
  402082:	4613      	mov	r3, r2
  402084:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  402086:	68fb      	ldr	r3, [r7, #12]
  402088:	3b14      	subs	r3, #20
  40208a:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  40208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40208e:	8b9b      	ldrh	r3, [r3, #28]
  402090:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  402092:	88fb      	ldrh	r3, [r7, #6]
  402094:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  402096:	f248 0301 	movw	r3, #32769	; 0x8001
  40209a:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
  40209c:	68bb      	ldr	r3, [r7, #8]
  40209e:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020a2:	f107 0214 	add.w	r2, r7, #20
  4020a6:	4611      	mov	r1, r2
  4020a8:	4618      	mov	r0, r3
  4020aa:	4b06      	ldr	r3, [pc, #24]	; (4020c4 <i2c_m_sync_read+0x4c>)
  4020ac:	4798      	blx	r3
  4020ae:	6238      	str	r0, [r7, #32]

	if (ret) {
  4020b0:	6a3b      	ldr	r3, [r7, #32]
  4020b2:	2b00      	cmp	r3, #0
  4020b4:	d001      	beq.n	4020ba <i2c_m_sync_read+0x42>
		return ret;
  4020b6:	6a3b      	ldr	r3, [r7, #32]
  4020b8:	e000      	b.n	4020bc <i2c_m_sync_read+0x44>
	}

	return n;
  4020ba:	88fb      	ldrh	r3, [r7, #6]
}
  4020bc:	4618      	mov	r0, r3
  4020be:	3728      	adds	r7, #40	; 0x28
  4020c0:	46bd      	mov	sp, r7
  4020c2:	bd80      	pop	{r7, pc}
  4020c4:	00404a29 	.word	0x00404a29

004020c8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  4020c8:	b580      	push	{r7, lr}
  4020ca:	b08a      	sub	sp, #40	; 0x28
  4020cc:	af00      	add	r7, sp, #0
  4020ce:	60f8      	str	r0, [r7, #12]
  4020d0:	60b9      	str	r1, [r7, #8]
  4020d2:	4613      	mov	r3, r2
  4020d4:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  4020d6:	68fb      	ldr	r3, [r7, #12]
  4020d8:	3b14      	subs	r3, #20
  4020da:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  4020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020de:	8b9b      	ldrh	r3, [r3, #28]
  4020e0:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  4020e2:	88fb      	ldrh	r3, [r7, #6]
  4020e4:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
  4020e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020ea:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
  4020ec:	68bb      	ldr	r3, [r7, #8]
  4020ee:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4020f2:	f107 0214 	add.w	r2, r7, #20
  4020f6:	4611      	mov	r1, r2
  4020f8:	4618      	mov	r0, r3
  4020fa:	4b06      	ldr	r3, [pc, #24]	; (402114 <i2c_m_sync_write+0x4c>)
  4020fc:	4798      	blx	r3
  4020fe:	6238      	str	r0, [r7, #32]

	if (ret) {
  402100:	6a3b      	ldr	r3, [r7, #32]
  402102:	2b00      	cmp	r3, #0
  402104:	d001      	beq.n	40210a <i2c_m_sync_write+0x42>
		return ret;
  402106:	6a3b      	ldr	r3, [r7, #32]
  402108:	e000      	b.n	40210c <i2c_m_sync_write+0x44>
	}

	return n;
  40210a:	88fb      	ldrh	r3, [r7, #6]
}
  40210c:	4618      	mov	r0, r3
  40210e:	3728      	adds	r7, #40	; 0x28
  402110:	46bd      	mov	sp, r7
  402112:	bd80      	pop	{r7, pc}
  402114:	00404a29 	.word	0x00404a29

00402118 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  402118:	b580      	push	{r7, lr}
  40211a:	b084      	sub	sp, #16
  40211c:	af00      	add	r7, sp, #0
  40211e:	6078      	str	r0, [r7, #4]
  402120:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
  402122:	687b      	ldr	r3, [r7, #4]
  402124:	2b00      	cmp	r3, #0
  402126:	bf14      	ite	ne
  402128:	2301      	movne	r3, #1
  40212a:	2300      	moveq	r3, #0
  40212c:	b2db      	uxtb	r3, r3
  40212e:	225e      	movs	r2, #94	; 0x5e
  402130:	490c      	ldr	r1, [pc, #48]	; (402164 <i2c_m_sync_init+0x4c>)
  402132:	4618      	mov	r0, r3
  402134:	4b0c      	ldr	r3, [pc, #48]	; (402168 <i2c_m_sync_init+0x50>)
  402136:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  402138:	687b      	ldr	r3, [r7, #4]
  40213a:	6839      	ldr	r1, [r7, #0]
  40213c:	4618      	mov	r0, r3
  40213e:	4b0b      	ldr	r3, [pc, #44]	; (40216c <i2c_m_sync_init+0x54>)
  402140:	4798      	blx	r3
  402142:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  402144:	68fb      	ldr	r3, [r7, #12]
  402146:	2b00      	cmp	r3, #0
  402148:	d001      	beq.n	40214e <i2c_m_sync_init+0x36>
		return init_status;
  40214a:	68fb      	ldr	r3, [r7, #12]
  40214c:	e006      	b.n	40215c <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  40214e:	687b      	ldr	r3, [r7, #4]
  402150:	4a07      	ldr	r2, [pc, #28]	; (402170 <i2c_m_sync_init+0x58>)
  402152:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
  402154:	687b      	ldr	r3, [r7, #4]
  402156:	4a07      	ldr	r2, [pc, #28]	; (402174 <i2c_m_sync_init+0x5c>)
  402158:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  40215a:	2300      	movs	r3, #0
}
  40215c:	4618      	mov	r0, r3
  40215e:	3710      	adds	r7, #16
  402160:	46bd      	mov	sp, r7
  402162:	bd80      	pop	{r7, pc}
  402164:	00407b34 	.word	0x00407b34
  402168:	00402d41 	.word	0x00402d41
  40216c:	00404985 	.word	0x00404985
  402170:	00402079 	.word	0x00402079
  402174:	004020c9 	.word	0x004020c9

00402178 <spi_m_dma_init>:

static int32_t _spi_m_dma_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_dma_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_dma_init(struct spi_m_dma_descriptor *spi, void *const hw)
{
  402178:	b580      	push	{r7, lr}
  40217a:	b084      	sub	sp, #16
  40217c:	af00      	add	r7, sp, #0
  40217e:	6078      	str	r0, [r7, #4]
  402180:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
  402182:	2300      	movs	r3, #0
  402184:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
  402186:	687b      	ldr	r3, [r7, #4]
  402188:	2b00      	cmp	r3, #0
  40218a:	d004      	beq.n	402196 <spi_m_dma_init+0x1e>
  40218c:	683b      	ldr	r3, [r7, #0]
  40218e:	2b00      	cmp	r3, #0
  402190:	d001      	beq.n	402196 <spi_m_dma_init+0x1e>
  402192:	2301      	movs	r3, #1
  402194:	e000      	b.n	402198 <spi_m_dma_init+0x20>
  402196:	2300      	movs	r3, #0
  402198:	f003 0301 	and.w	r3, r3, #1
  40219c:	b2db      	uxtb	r3, r3
  40219e:	2233      	movs	r2, #51	; 0x33
  4021a0:	490e      	ldr	r1, [pc, #56]	; (4021dc <spi_m_dma_init+0x64>)
  4021a2:	4618      	mov	r0, r3
  4021a4:	4b0e      	ldr	r3, [pc, #56]	; (4021e0 <spi_m_dma_init+0x68>)
  4021a6:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	683a      	ldr	r2, [r7, #0]
  4021ac:	601a      	str	r2, [r3, #0]

	rc = _spi_m_dma_init(&spi->dev, hw);
  4021ae:	687b      	ldr	r3, [r7, #4]
  4021b0:	6839      	ldr	r1, [r7, #0]
  4021b2:	4618      	mov	r0, r3
  4021b4:	4b0b      	ldr	r3, [pc, #44]	; (4021e4 <spi_m_dma_init+0x6c>)
  4021b6:	4798      	blx	r3
  4021b8:	60f8      	str	r0, [r7, #12]
	if (rc) {
  4021ba:	68fb      	ldr	r3, [r7, #12]
  4021bc:	2b00      	cmp	r3, #0
  4021be:	d001      	beq.n	4021c4 <spi_m_dma_init+0x4c>
		return rc;
  4021c0:	68fb      	ldr	r3, [r7, #12]
  4021c2:	e006      	b.n	4021d2 <spi_m_dma_init+0x5a>
	}

	spi->io.read  = _spi_m_dma_io_read;
  4021c4:	687b      	ldr	r3, [r7, #4]
  4021c6:	4a08      	ldr	r2, [pc, #32]	; (4021e8 <spi_m_dma_init+0x70>)
  4021c8:	621a      	str	r2, [r3, #32]
	spi->io.write = _spi_m_dma_io_write;
  4021ca:	687b      	ldr	r3, [r7, #4]
  4021cc:	4a07      	ldr	r2, [pc, #28]	; (4021ec <spi_m_dma_init+0x74>)
  4021ce:	61da      	str	r2, [r3, #28]

	return ERR_NONE;
  4021d0:	2300      	movs	r3, #0
}
  4021d2:	4618      	mov	r0, r3
  4021d4:	3710      	adds	r7, #16
  4021d6:	46bd      	mov	sp, r7
  4021d8:	bd80      	pop	{r7, pc}
  4021da:	bf00      	nop
  4021dc:	00407b50 	.word	0x00407b50
  4021e0:	00402d41 	.word	0x00402d41
  4021e4:	00404371 	.word	0x00404371
  4021e8:	004022f5 	.word	0x004022f5
  4021ec:	00402341 	.word	0x00402341

004021f0 <spi_m_dma_enable>:

	_spi_m_dma_deinit(&spi->dev);
}

void spi_m_dma_enable(struct spi_m_dma_descriptor *spi)
{
  4021f0:	b580      	push	{r7, lr}
  4021f2:	b082      	sub	sp, #8
  4021f4:	af00      	add	r7, sp, #0
  4021f6:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
  4021f8:	687b      	ldr	r3, [r7, #4]
  4021fa:	2b00      	cmp	r3, #0
  4021fc:	bf14      	ite	ne
  4021fe:	2301      	movne	r3, #1
  402200:	2300      	moveq	r3, #0
  402202:	b2db      	uxtb	r3, r3
  402204:	224a      	movs	r2, #74	; 0x4a
  402206:	4906      	ldr	r1, [pc, #24]	; (402220 <spi_m_dma_enable+0x30>)
  402208:	4618      	mov	r0, r3
  40220a:	4b06      	ldr	r3, [pc, #24]	; (402224 <spi_m_dma_enable+0x34>)
  40220c:	4798      	blx	r3

	_spi_m_dma_enable(&spi->dev);
  40220e:	687b      	ldr	r3, [r7, #4]
  402210:	4618      	mov	r0, r3
  402212:	4b05      	ldr	r3, [pc, #20]	; (402228 <spi_m_dma_enable+0x38>)
  402214:	4798      	blx	r3
}
  402216:	bf00      	nop
  402218:	3708      	adds	r7, #8
  40221a:	46bd      	mov	sp, r7
  40221c:	bd80      	pop	{r7, pc}
  40221e:	bf00      	nop
  402220:	00407b50 	.word	0x00407b50
  402224:	00402d41 	.word	0x00402d41
  402228:	0040448d 	.word	0x0040448d

0040222c <spi_m_dma_set_baudrate>:

	_spi_m_dma_disable(&spi->dev);
}

int32_t spi_m_dma_set_baudrate(struct spi_m_dma_descriptor *spi, const uint32_t baud_val)
{
  40222c:	b580      	push	{r7, lr}
  40222e:	b082      	sub	sp, #8
  402230:	af00      	add	r7, sp, #0
  402232:	6078      	str	r0, [r7, #4]
  402234:	6039      	str	r1, [r7, #0]
	ASSERT(spi);
  402236:	687b      	ldr	r3, [r7, #4]
  402238:	2b00      	cmp	r3, #0
  40223a:	bf14      	ite	ne
  40223c:	2301      	movne	r3, #1
  40223e:	2300      	moveq	r3, #0
  402240:	b2db      	uxtb	r3, r3
  402242:	2258      	movs	r2, #88	; 0x58
  402244:	4906      	ldr	r1, [pc, #24]	; (402260 <spi_m_dma_set_baudrate+0x34>)
  402246:	4618      	mov	r0, r3
  402248:	4b06      	ldr	r3, [pc, #24]	; (402264 <spi_m_dma_set_baudrate+0x38>)
  40224a:	4798      	blx	r3

	return _spi_m_dma_set_baudrate(&spi->dev, baud_val);
  40224c:	687b      	ldr	r3, [r7, #4]
  40224e:	6839      	ldr	r1, [r7, #0]
  402250:	4618      	mov	r0, r3
  402252:	4b05      	ldr	r3, [pc, #20]	; (402268 <spi_m_dma_set_baudrate+0x3c>)
  402254:	4798      	blx	r3
  402256:	4603      	mov	r3, r0
}
  402258:	4618      	mov	r0, r3
  40225a:	3708      	adds	r7, #8
  40225c:	46bd      	mov	sp, r7
  40225e:	bd80      	pop	{r7, pc}
  402260:	00407b50 	.word	0x00407b50
  402264:	00402d41 	.word	0x00402d41
  402268:	00404535 	.word	0x00404535

0040226c <spi_m_dma_set_mode>:

int32_t spi_m_dma_set_mode(struct spi_m_dma_descriptor *spi, const enum spi_transfer_mode mode)
{
  40226c:	b580      	push	{r7, lr}
  40226e:	b082      	sub	sp, #8
  402270:	af00      	add	r7, sp, #0
  402272:	6078      	str	r0, [r7, #4]
  402274:	460b      	mov	r3, r1
  402276:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  402278:	687b      	ldr	r3, [r7, #4]
  40227a:	2b00      	cmp	r3, #0
  40227c:	bf14      	ite	ne
  40227e:	2301      	movne	r3, #1
  402280:	2300      	moveq	r3, #0
  402282:	b2db      	uxtb	r3, r3
  402284:	225f      	movs	r2, #95	; 0x5f
  402286:	4907      	ldr	r1, [pc, #28]	; (4022a4 <spi_m_dma_set_mode+0x38>)
  402288:	4618      	mov	r0, r3
  40228a:	4b07      	ldr	r3, [pc, #28]	; (4022a8 <spi_m_dma_set_mode+0x3c>)
  40228c:	4798      	blx	r3

	return _spi_m_dma_set_mode(&spi->dev, mode);
  40228e:	687b      	ldr	r3, [r7, #4]
  402290:	78fa      	ldrb	r2, [r7, #3]
  402292:	4611      	mov	r1, r2
  402294:	4618      	mov	r0, r3
  402296:	4b05      	ldr	r3, [pc, #20]	; (4022ac <spi_m_dma_set_mode+0x40>)
  402298:	4798      	blx	r3
  40229a:	4603      	mov	r3, r0
}
  40229c:	4618      	mov	r0, r3
  40229e:	3708      	adds	r7, #8
  4022a0:	46bd      	mov	sp, r7
  4022a2:	bd80      	pop	{r7, pc}
  4022a4:	00407b50 	.word	0x00407b50
  4022a8:	00402d41 	.word	0x00402d41
  4022ac:	004044dd 	.word	0x004044dd

004022b0 <spi_m_dma_set_char_size>:

int32_t spi_m_dma_set_char_size(struct spi_m_dma_descriptor *spi, const enum spi_char_size char_size)
{
  4022b0:	b580      	push	{r7, lr}
  4022b2:	b082      	sub	sp, #8
  4022b4:	af00      	add	r7, sp, #0
  4022b6:	6078      	str	r0, [r7, #4]
  4022b8:	460b      	mov	r3, r1
  4022ba:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  4022bc:	687b      	ldr	r3, [r7, #4]
  4022be:	2b00      	cmp	r3, #0
  4022c0:	bf14      	ite	ne
  4022c2:	2301      	movne	r3, #1
  4022c4:	2300      	moveq	r3, #0
  4022c6:	b2db      	uxtb	r3, r3
  4022c8:	2266      	movs	r2, #102	; 0x66
  4022ca:	4907      	ldr	r1, [pc, #28]	; (4022e8 <spi_m_dma_set_char_size+0x38>)
  4022cc:	4618      	mov	r0, r3
  4022ce:	4b07      	ldr	r3, [pc, #28]	; (4022ec <spi_m_dma_set_char_size+0x3c>)
  4022d0:	4798      	blx	r3

	return _spi_m_dma_set_char_size(&spi->dev, char_size);
  4022d2:	687b      	ldr	r3, [r7, #4]
  4022d4:	78fa      	ldrb	r2, [r7, #3]
  4022d6:	4611      	mov	r1, r2
  4022d8:	4618      	mov	r0, r3
  4022da:	4b05      	ldr	r3, [pc, #20]	; (4022f0 <spi_m_dma_set_char_size+0x40>)
  4022dc:	4798      	blx	r3
  4022de:	4603      	mov	r3, r0
}
  4022e0:	4618      	mov	r0, r3
  4022e2:	3708      	adds	r7, #8
  4022e4:	46bd      	mov	sp, r7
  4022e6:	bd80      	pop	{r7, pc}
  4022e8:	00407b50 	.word	0x00407b50
  4022ec:	00402d41 	.word	0x00402d41
  4022f0:	00404589 	.word	0x00404589

004022f4 <_spi_m_dma_io_read>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_read(struct io_descriptor *io, uint8_t *const buf, const uint16_t length)
{
  4022f4:	b590      	push	{r4, r7, lr}
  4022f6:	b087      	sub	sp, #28
  4022f8:	af00      	add	r7, sp, #0
  4022fa:	60f8      	str	r0, [r7, #12]
  4022fc:	60b9      	str	r1, [r7, #8]
  4022fe:	4613      	mov	r3, r2
  402300:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  402302:	68fb      	ldr	r3, [r7, #12]
  402304:	2b00      	cmp	r3, #0
  402306:	bf14      	ite	ne
  402308:	2301      	movne	r3, #1
  40230a:	2300      	moveq	r3, #0
  40230c:	b2db      	uxtb	r3, r3
  40230e:	2280      	movs	r2, #128	; 0x80
  402310:	4908      	ldr	r1, [pc, #32]	; (402334 <_spi_m_dma_io_read+0x40>)
  402312:	4618      	mov	r0, r3
  402314:	4b08      	ldr	r3, [pc, #32]	; (402338 <_spi_m_dma_io_read+0x44>)
  402316:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  402318:	68fb      	ldr	r3, [r7, #12]
  40231a:	3b1c      	subs	r3, #28
  40231c:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
  40231e:	6978      	ldr	r0, [r7, #20]
  402320:	88fb      	ldrh	r3, [r7, #6]
  402322:	68ba      	ldr	r2, [r7, #8]
  402324:	2100      	movs	r1, #0
  402326:	4c05      	ldr	r4, [pc, #20]	; (40233c <_spi_m_dma_io_read+0x48>)
  402328:	47a0      	blx	r4
  40232a:	4603      	mov	r3, r0
}
  40232c:	4618      	mov	r0, r3
  40232e:	371c      	adds	r7, #28
  402330:	46bd      	mov	sp, r7
  402332:	bd90      	pop	{r4, r7, pc}
  402334:	00407b50 	.word	0x00407b50
  402338:	00402d41 	.word	0x00402d41
  40233c:	004046cd 	.word	0x004046cd

00402340 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  402340:	b590      	push	{r4, r7, lr}
  402342:	b087      	sub	sp, #28
  402344:	af00      	add	r7, sp, #0
  402346:	60f8      	str	r0, [r7, #12]
  402348:	60b9      	str	r1, [r7, #8]
  40234a:	4613      	mov	r3, r2
  40234c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  40234e:	68fb      	ldr	r3, [r7, #12]
  402350:	2b00      	cmp	r3, #0
  402352:	bf14      	ite	ne
  402354:	2301      	movne	r3, #1
  402356:	2300      	moveq	r3, #0
  402358:	b2db      	uxtb	r3, r3
  40235a:	2298      	movs	r2, #152	; 0x98
  40235c:	4908      	ldr	r1, [pc, #32]	; (402380 <_spi_m_dma_io_write+0x40>)
  40235e:	4618      	mov	r0, r3
  402360:	4b08      	ldr	r3, [pc, #32]	; (402384 <_spi_m_dma_io_write+0x44>)
  402362:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
  402364:	68fb      	ldr	r3, [r7, #12]
  402366:	3b1c      	subs	r3, #28
  402368:	617b      	str	r3, [r7, #20]

	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
  40236a:	6978      	ldr	r0, [r7, #20]
  40236c:	88fb      	ldrh	r3, [r7, #6]
  40236e:	2200      	movs	r2, #0
  402370:	68b9      	ldr	r1, [r7, #8]
  402372:	4c05      	ldr	r4, [pc, #20]	; (402388 <_spi_m_dma_io_write+0x48>)
  402374:	47a0      	blx	r4
  402376:	4603      	mov	r3, r0
}
  402378:	4618      	mov	r0, r3
  40237a:	371c      	adds	r7, #28
  40237c:	46bd      	mov	sp, r7
  40237e:	bd90      	pop	{r4, r7, pc}
  402380:	00407b50 	.word	0x00407b50
  402384:	00402d41 	.word	0x00402d41
  402388:	004046cd 	.word	0x004046cd

0040238c <spi_m_dma_transfer>:

int32_t spi_m_dma_transfer(struct spi_m_dma_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                           const uint16_t length)
{
  40238c:	b590      	push	{r4, r7, lr}
  40238e:	b085      	sub	sp, #20
  402390:	af00      	add	r7, sp, #0
  402392:	60f8      	str	r0, [r7, #12]
  402394:	60b9      	str	r1, [r7, #8]
  402396:	607a      	str	r2, [r7, #4]
  402398:	807b      	strh	r3, [r7, #2]
	ASSERT(spi);
  40239a:	68fb      	ldr	r3, [r7, #12]
  40239c:	2b00      	cmp	r3, #0
  40239e:	bf14      	ite	ne
  4023a0:	2301      	movne	r3, #1
  4023a2:	2300      	moveq	r3, #0
  4023a4:	b2db      	uxtb	r3, r3
  4023a6:	22a2      	movs	r2, #162	; 0xa2
  4023a8:	4907      	ldr	r1, [pc, #28]	; (4023c8 <spi_m_dma_transfer+0x3c>)
  4023aa:	4618      	mov	r0, r3
  4023ac:	4b07      	ldr	r3, [pc, #28]	; (4023cc <spi_m_dma_transfer+0x40>)
  4023ae:	4798      	blx	r3

	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
  4023b0:	68f8      	ldr	r0, [r7, #12]
  4023b2:	887b      	ldrh	r3, [r7, #2]
  4023b4:	687a      	ldr	r2, [r7, #4]
  4023b6:	68b9      	ldr	r1, [r7, #8]
  4023b8:	4c05      	ldr	r4, [pc, #20]	; (4023d0 <spi_m_dma_transfer+0x44>)
  4023ba:	47a0      	blx	r4
  4023bc:	4603      	mov	r3, r0
}
  4023be:	4618      	mov	r0, r3
  4023c0:	3714      	adds	r7, #20
  4023c2:	46bd      	mov	sp, r7
  4023c4:	bd90      	pop	{r4, r7, pc}
  4023c6:	bf00      	nop
  4023c8:	00407b50 	.word	0x00407b50
  4023cc:	00402d41 	.word	0x00402d41
  4023d0:	004046cd 	.word	0x004046cd

004023d4 <spi_m_dma_register_callback>:

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
  4023d4:	b580      	push	{r7, lr}
  4023d6:	b084      	sub	sp, #16
  4023d8:	af00      	add	r7, sp, #0
  4023da:	60f8      	str	r0, [r7, #12]
  4023dc:	460b      	mov	r3, r1
  4023de:	607a      	str	r2, [r7, #4]
  4023e0:	72fb      	strb	r3, [r7, #11]
	ASSERT(spi);
  4023e2:	68fb      	ldr	r3, [r7, #12]
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	bf14      	ite	ne
  4023e8:	2301      	movne	r3, #1
  4023ea:	2300      	moveq	r3, #0
  4023ec:	b2db      	uxtb	r3, r3
  4023ee:	22aa      	movs	r2, #170	; 0xaa
  4023f0:	4906      	ldr	r1, [pc, #24]	; (40240c <spi_m_dma_register_callback+0x38>)
  4023f2:	4618      	mov	r0, r3
  4023f4:	4b06      	ldr	r3, [pc, #24]	; (402410 <spi_m_dma_register_callback+0x3c>)
  4023f6:	4798      	blx	r3

	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
  4023f8:	68fb      	ldr	r3, [r7, #12]
  4023fa:	7af9      	ldrb	r1, [r7, #11]
  4023fc:	687a      	ldr	r2, [r7, #4]
  4023fe:	4618      	mov	r0, r3
  402400:	4b04      	ldr	r3, [pc, #16]	; (402414 <spi_m_dma_register_callback+0x40>)
  402402:	4798      	blx	r3
}
  402404:	bf00      	nop
  402406:	3710      	adds	r7, #16
  402408:	46bd      	mov	sp, r7
  40240a:	bd80      	pop	{r7, pc}
  40240c:	00407b50 	.word	0x00407b50
  402410:	00402d41 	.word	0x00402d41
  402414:	004045e9 	.word	0x004045e9

00402418 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
  402418:	b580      	push	{r7, lr}
  40241a:	b086      	sub	sp, #24
  40241c:	af00      	add	r7, sp, #0
  40241e:	60f8      	str	r0, [r7, #12]
  402420:	60b9      	str	r1, [r7, #8]
  402422:	607a      	str	r2, [r7, #4]
  402424:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  402426:	68fb      	ldr	r3, [r7, #12]
  402428:	2b00      	cmp	r3, #0
  40242a:	d00a      	beq.n	402442 <usart_async_init+0x2a>
  40242c:	68bb      	ldr	r3, [r7, #8]
  40242e:	2b00      	cmp	r3, #0
  402430:	d007      	beq.n	402442 <usart_async_init+0x2a>
  402432:	687b      	ldr	r3, [r7, #4]
  402434:	2b00      	cmp	r3, #0
  402436:	d004      	beq.n	402442 <usart_async_init+0x2a>
  402438:	887b      	ldrh	r3, [r7, #2]
  40243a:	2b00      	cmp	r3, #0
  40243c:	d001      	beq.n	402442 <usart_async_init+0x2a>
  40243e:	2301      	movs	r3, #1
  402440:	e000      	b.n	402444 <usart_async_init+0x2c>
  402442:	2300      	movs	r3, #0
  402444:	f003 0301 	and.w	r3, r3, #1
  402448:	b2db      	uxtb	r3, r3
  40244a:	223a      	movs	r2, #58	; 0x3a
  40244c:	4919      	ldr	r1, [pc, #100]	; (4024b4 <usart_async_init+0x9c>)
  40244e:	4618      	mov	r0, r3
  402450:	4b19      	ldr	r3, [pc, #100]	; (4024b8 <usart_async_init+0xa0>)
  402452:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  402454:	68fb      	ldr	r3, [r7, #12]
  402456:	3334      	adds	r3, #52	; 0x34
  402458:	887a      	ldrh	r2, [r7, #2]
  40245a:	6879      	ldr	r1, [r7, #4]
  40245c:	4618      	mov	r0, r3
  40245e:	4b17      	ldr	r3, [pc, #92]	; (4024bc <usart_async_init+0xa4>)
  402460:	4798      	blx	r3
  402462:	4603      	mov	r3, r0
  402464:	2b00      	cmp	r3, #0
  402466:	d002      	beq.n	40246e <usart_async_init+0x56>
		return ERR_INVALID_ARG;
  402468:	f06f 030c 	mvn.w	r3, #12
  40246c:	e01e      	b.n	4024ac <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
  40246e:	68fb      	ldr	r3, [r7, #12]
  402470:	3308      	adds	r3, #8
  402472:	68b9      	ldr	r1, [r7, #8]
  402474:	4618      	mov	r0, r3
  402476:	4b12      	ldr	r3, [pc, #72]	; (4024c0 <usart_async_init+0xa8>)
  402478:	4798      	blx	r3
  40247a:	6178      	str	r0, [r7, #20]
	if (init_status) {
  40247c:	697b      	ldr	r3, [r7, #20]
  40247e:	2b00      	cmp	r3, #0
  402480:	d001      	beq.n	402486 <usart_async_init+0x6e>
		return init_status;
  402482:	697b      	ldr	r3, [r7, #20]
  402484:	e012      	b.n	4024ac <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
  402486:	68fb      	ldr	r3, [r7, #12]
  402488:	4a0e      	ldr	r2, [pc, #56]	; (4024c4 <usart_async_init+0xac>)
  40248a:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
  40248c:	68fb      	ldr	r3, [r7, #12]
  40248e:	4a0e      	ldr	r2, [pc, #56]	; (4024c8 <usart_async_init+0xb0>)
  402490:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  402492:	68fb      	ldr	r3, [r7, #12]
  402494:	4a0d      	ldr	r2, [pc, #52]	; (4024cc <usart_async_init+0xb4>)
  402496:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  402498:	68fb      	ldr	r3, [r7, #12]
  40249a:	4a0d      	ldr	r2, [pc, #52]	; (4024d0 <usart_async_init+0xb8>)
  40249c:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  40249e:	68fb      	ldr	r3, [r7, #12]
  4024a0:	4a0c      	ldr	r2, [pc, #48]	; (4024d4 <usart_async_init+0xbc>)
  4024a2:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  4024a4:	68fb      	ldr	r3, [r7, #12]
  4024a6:	4a0c      	ldr	r2, [pc, #48]	; (4024d8 <usart_async_init+0xc0>)
  4024a8:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  4024aa:	2300      	movs	r3, #0
}
  4024ac:	4618      	mov	r0, r3
  4024ae:	3718      	adds	r7, #24
  4024b0:	46bd      	mov	sp, r7
  4024b2:	bd80      	pop	{r7, pc}
  4024b4:	00407b6c 	.word	0x00407b6c
  4024b8:	00402d41 	.word	0x00402d41
  4024bc:	00402d69 	.word	0x00402d69
  4024c0:	004050fd 	.word	0x004050fd
  4024c4:	0040256d 	.word	0x0040256d
  4024c8:	004024dd 	.word	0x004024dd
  4024cc:	0040261d 	.word	0x0040261d
  4024d0:	004026b5 	.word	0x004026b5
  4024d4:	00402689 	.word	0x00402689
  4024d8:	004026f1 	.word	0x004026f1

004024dc <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4024dc:	b580      	push	{r7, lr}
  4024de:	b086      	sub	sp, #24
  4024e0:	af00      	add	r7, sp, #0
  4024e2:	60f8      	str	r0, [r7, #12]
  4024e4:	60b9      	str	r1, [r7, #8]
  4024e6:	4613      	mov	r3, r2
  4024e8:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  4024ea:	68fb      	ldr	r3, [r7, #12]
  4024ec:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
  4024ee:	697b      	ldr	r3, [r7, #20]
  4024f0:	2b00      	cmp	r3, #0
  4024f2:	d007      	beq.n	402504 <usart_async_write+0x28>
  4024f4:	68bb      	ldr	r3, [r7, #8]
  4024f6:	2b00      	cmp	r3, #0
  4024f8:	d004      	beq.n	402504 <usart_async_write+0x28>
  4024fa:	88fb      	ldrh	r3, [r7, #6]
  4024fc:	2b00      	cmp	r3, #0
  4024fe:	d001      	beq.n	402504 <usart_async_write+0x28>
  402500:	2301      	movs	r3, #1
  402502:	e000      	b.n	402506 <usart_async_write+0x2a>
  402504:	2300      	movs	r3, #0
  402506:	f003 0301 	and.w	r3, r3, #1
  40250a:	b2db      	uxtb	r3, r3
  40250c:	f240 123b 	movw	r2, #315	; 0x13b
  402510:	4913      	ldr	r1, [pc, #76]	; (402560 <usart_async_write+0x84>)
  402512:	4618      	mov	r0, r3
  402514:	4b13      	ldr	r3, [pc, #76]	; (402564 <usart_async_write+0x88>)
  402516:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
  402518:	697b      	ldr	r3, [r7, #20]
  40251a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  40251e:	697b      	ldr	r3, [r7, #20]
  402520:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  402524:	429a      	cmp	r2, r3
  402526:	d002      	beq.n	40252e <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
  402528:	f06f 031b 	mvn.w	r3, #27
  40252c:	e013      	b.n	402556 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
  40252e:	697b      	ldr	r3, [r7, #20]
  402530:	68ba      	ldr	r2, [r7, #8]
  402532:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
  402534:	697b      	ldr	r3, [r7, #20]
  402536:	88fa      	ldrh	r2, [r7, #6]
  402538:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
  40253c:	697b      	ldr	r3, [r7, #20]
  40253e:	2200      	movs	r2, #0
  402540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  402544:	697b      	ldr	r3, [r7, #20]
  402546:	2201      	movs	r2, #1
  402548:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  40254a:	697b      	ldr	r3, [r7, #20]
  40254c:	3308      	adds	r3, #8
  40254e:	4618      	mov	r0, r3
  402550:	4b05      	ldr	r3, [pc, #20]	; (402568 <usart_async_write+0x8c>)
  402552:	4798      	blx	r3

	return (int32_t)length;
  402554:	88fb      	ldrh	r3, [r7, #6]
}
  402556:	4618      	mov	r0, r3
  402558:	3718      	adds	r7, #24
  40255a:	46bd      	mov	sp, r7
  40255c:	bd80      	pop	{r7, pc}
  40255e:	bf00      	nop
  402560:	00407b6c 	.word	0x00407b6c
  402564:	00402d41 	.word	0x00402d41
  402568:	0040532d 	.word	0x0040532d

0040256c <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40256c:	b580      	push	{r7, lr}
  40256e:	b088      	sub	sp, #32
  402570:	af00      	add	r7, sp, #0
  402572:	60f8      	str	r0, [r7, #12]
  402574:	60b9      	str	r1, [r7, #8]
  402576:	4613      	mov	r3, r2
  402578:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
  40257a:	2300      	movs	r3, #0
  40257c:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  40257e:	68fb      	ldr	r3, [r7, #12]
  402580:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
  402582:	69bb      	ldr	r3, [r7, #24]
  402584:	2b00      	cmp	r3, #0
  402586:	d007      	beq.n	402598 <usart_async_read+0x2c>
  402588:	68bb      	ldr	r3, [r7, #8]
  40258a:	2b00      	cmp	r3, #0
  40258c:	d004      	beq.n	402598 <usart_async_read+0x2c>
  40258e:	88fb      	ldrh	r3, [r7, #6]
  402590:	2b00      	cmp	r3, #0
  402592:	d001      	beq.n	402598 <usart_async_read+0x2c>
  402594:	2301      	movs	r3, #1
  402596:	e000      	b.n	40259a <usart_async_read+0x2e>
  402598:	2300      	movs	r3, #0
  40259a:	f003 0301 	and.w	r3, r3, #1
  40259e:	b2db      	uxtb	r3, r3
  4025a0:	f44f 72ac 	mov.w	r2, #344	; 0x158
  4025a4:	4917      	ldr	r1, [pc, #92]	; (402604 <usart_async_read+0x98>)
  4025a6:	4618      	mov	r0, r3
  4025a8:	4b17      	ldr	r3, [pc, #92]	; (402608 <usart_async_read+0x9c>)
  4025aa:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
  4025ac:	f107 0310 	add.w	r3, r7, #16
  4025b0:	4618      	mov	r0, r3
  4025b2:	4b16      	ldr	r3, [pc, #88]	; (40260c <usart_async_read+0xa0>)
  4025b4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  4025b6:	69bb      	ldr	r3, [r7, #24]
  4025b8:	3334      	adds	r3, #52	; 0x34
  4025ba:	4618      	mov	r0, r3
  4025bc:	4b14      	ldr	r3, [pc, #80]	; (402610 <usart_async_read+0xa4>)
  4025be:	4798      	blx	r3
  4025c0:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
  4025c2:	f107 0310 	add.w	r3, r7, #16
  4025c6:	4618      	mov	r0, r3
  4025c8:	4b12      	ldr	r3, [pc, #72]	; (402614 <usart_async_read+0xa8>)
  4025ca:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
  4025cc:	e00c      	b.n	4025e8 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  4025ce:	69bb      	ldr	r3, [r7, #24]
  4025d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
  4025d4:	8bfb      	ldrh	r3, [r7, #30]
  4025d6:	1c59      	adds	r1, r3, #1
  4025d8:	83f9      	strh	r1, [r7, #30]
  4025da:	4619      	mov	r1, r3
  4025dc:	68bb      	ldr	r3, [r7, #8]
  4025de:	440b      	add	r3, r1
  4025e0:	4619      	mov	r1, r3
  4025e2:	4610      	mov	r0, r2
  4025e4:	4b0c      	ldr	r3, [pc, #48]	; (402618 <usart_async_read+0xac>)
  4025e6:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  4025e8:	8bfa      	ldrh	r2, [r7, #30]
  4025ea:	697b      	ldr	r3, [r7, #20]
  4025ec:	429a      	cmp	r2, r3
  4025ee:	d203      	bcs.n	4025f8 <usart_async_read+0x8c>
  4025f0:	8bfa      	ldrh	r2, [r7, #30]
  4025f2:	88fb      	ldrh	r3, [r7, #6]
  4025f4:	429a      	cmp	r2, r3
  4025f6:	d3ea      	bcc.n	4025ce <usart_async_read+0x62>
	}

	return (int32_t)was_read;
  4025f8:	8bfb      	ldrh	r3, [r7, #30]
}
  4025fa:	4618      	mov	r0, r3
  4025fc:	3720      	adds	r7, #32
  4025fe:	46bd      	mov	sp, r7
  402600:	bd80      	pop	{r7, pc}
  402602:	bf00      	nop
  402604:	00407b6c 	.word	0x00407b6c
  402608:	00402d41 	.word	0x00402d41
  40260c:	00401d19 	.word	0x00401d19
  402610:	00402ec1 	.word	0x00402ec1
  402614:	00401d3f 	.word	0x00401d3f
  402618:	00402ddd 	.word	0x00402ddd

0040261c <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
  40261c:	b590      	push	{r4, r7, lr}
  40261e:	b085      	sub	sp, #20
  402620:	af00      	add	r7, sp, #0
  402622:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  402624:	687b      	ldr	r3, [r7, #4]
  402626:	3b08      	subs	r3, #8
  402628:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
  40262a:	68fb      	ldr	r3, [r7, #12]
  40262c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  402630:	68fb      	ldr	r3, [r7, #12]
  402632:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  402636:	429a      	cmp	r2, r3
  402638:	d017      	beq.n	40266a <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  40263a:	68fb      	ldr	r3, [r7, #12]
  40263c:	f103 0008 	add.w	r0, r3, #8
  402640:	68fb      	ldr	r3, [r7, #12]
  402642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  402644:	68fb      	ldr	r3, [r7, #12]
  402646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  40264a:	1c59      	adds	r1, r3, #1
  40264c:	b28c      	uxth	r4, r1
  40264e:	68f9      	ldr	r1, [r7, #12]
  402650:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
  402654:	4413      	add	r3, r2
  402656:	781b      	ldrb	r3, [r3, #0]
  402658:	4619      	mov	r1, r3
  40265a:	4b08      	ldr	r3, [pc, #32]	; (40267c <usart_process_byte_sent+0x60>)
  40265c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  40265e:	68fb      	ldr	r3, [r7, #12]
  402660:	3308      	adds	r3, #8
  402662:	4618      	mov	r0, r3
  402664:	4b06      	ldr	r3, [pc, #24]	; (402680 <usart_process_byte_sent+0x64>)
  402666:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
  402668:	e004      	b.n	402674 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
  40266a:	68fb      	ldr	r3, [r7, #12]
  40266c:	3308      	adds	r3, #8
  40266e:	4618      	mov	r0, r3
  402670:	4b04      	ldr	r3, [pc, #16]	; (402684 <usart_process_byte_sent+0x68>)
  402672:	4798      	blx	r3
}
  402674:	bf00      	nop
  402676:	3714      	adds	r7, #20
  402678:	46bd      	mov	sp, r7
  40267a:	bd90      	pop	{r4, r7, pc}
  40267c:	004051e1 	.word	0x004051e1
  402680:	0040532d 	.word	0x0040532d
  402684:	0040536d 	.word	0x0040536d

00402688 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  402688:	b580      	push	{r7, lr}
  40268a:	b084      	sub	sp, #16
  40268c:	af00      	add	r7, sp, #0
  40268e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  402690:	687b      	ldr	r3, [r7, #4]
  402692:	3b08      	subs	r3, #8
  402694:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  402696:	68fb      	ldr	r3, [r7, #12]
  402698:	2200      	movs	r2, #0
  40269a:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
  40269c:	68fb      	ldr	r3, [r7, #12]
  40269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4026a0:	2b00      	cmp	r3, #0
  4026a2:	d003      	beq.n	4026ac <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
  4026a4:	68fb      	ldr	r3, [r7, #12]
  4026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4026a8:	68f8      	ldr	r0, [r7, #12]
  4026aa:	4798      	blx	r3
	}
}
  4026ac:	bf00      	nop
  4026ae:	3710      	adds	r7, #16
  4026b0:	46bd      	mov	sp, r7
  4026b2:	bd80      	pop	{r7, pc}

004026b4 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
  4026b4:	b580      	push	{r7, lr}
  4026b6:	b084      	sub	sp, #16
  4026b8:	af00      	add	r7, sp, #0
  4026ba:	6078      	str	r0, [r7, #4]
  4026bc:	460b      	mov	r3, r1
  4026be:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4026c0:	687b      	ldr	r3, [r7, #4]
  4026c2:	3b08      	subs	r3, #8
  4026c4:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
  4026c6:	68fb      	ldr	r3, [r7, #12]
  4026c8:	3334      	adds	r3, #52	; 0x34
  4026ca:	78fa      	ldrb	r2, [r7, #3]
  4026cc:	4611      	mov	r1, r2
  4026ce:	4618      	mov	r0, r3
  4026d0:	4b06      	ldr	r3, [pc, #24]	; (4026ec <usart_fill_rx_buffer+0x38>)
  4026d2:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
  4026d4:	68fb      	ldr	r3, [r7, #12]
  4026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4026d8:	2b00      	cmp	r3, #0
  4026da:	d003      	beq.n	4026e4 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
  4026dc:	68fb      	ldr	r3, [r7, #12]
  4026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4026e0:	68f8      	ldr	r0, [r7, #12]
  4026e2:	4798      	blx	r3
	}
}
  4026e4:	bf00      	nop
  4026e6:	3710      	adds	r7, #16
  4026e8:	46bd      	mov	sp, r7
  4026ea:	bd80      	pop	{r7, pc}
  4026ec:	00402e4d 	.word	0x00402e4d

004026f0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  4026f0:	b580      	push	{r7, lr}
  4026f2:	b084      	sub	sp, #16
  4026f4:	af00      	add	r7, sp, #0
  4026f6:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4026f8:	687b      	ldr	r3, [r7, #4]
  4026fa:	3b08      	subs	r3, #8
  4026fc:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  4026fe:	68fb      	ldr	r3, [r7, #12]
  402700:	2200      	movs	r2, #0
  402702:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
  402704:	68fb      	ldr	r3, [r7, #12]
  402706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402708:	2b00      	cmp	r3, #0
  40270a:	d003      	beq.n	402714 <usart_error+0x24>
		descr->usart_cb.error(descr);
  40270c:	68fb      	ldr	r3, [r7, #12]
  40270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402710:	68f8      	ldr	r0, [r7, #12]
  402712:	4798      	blx	r3
	}
}
  402714:	bf00      	nop
  402716:	3710      	adds	r7, #16
  402718:	46bd      	mov	sp, r7
  40271a:	bd80      	pop	{r7, pc}

0040271c <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
  40271c:	b580      	push	{r7, lr}
  40271e:	b086      	sub	sp, #24
  402720:	af00      	add	r7, sp, #0
  402722:	60f8      	str	r0, [r7, #12]
  402724:	60b9      	str	r1, [r7, #8]
  402726:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
  402728:	68fb      	ldr	r3, [r7, #12]
  40272a:	2b00      	cmp	r3, #0
  40272c:	d004      	beq.n	402738 <usart_sync_init+0x1c>
  40272e:	68bb      	ldr	r3, [r7, #8]
  402730:	2b00      	cmp	r3, #0
  402732:	d001      	beq.n	402738 <usart_sync_init+0x1c>
  402734:	2301      	movs	r3, #1
  402736:	e000      	b.n	40273a <usart_sync_init+0x1e>
  402738:	2300      	movs	r3, #0
  40273a:	f003 0301 	and.w	r3, r3, #1
  40273e:	b2db      	uxtb	r3, r3
  402740:	2234      	movs	r2, #52	; 0x34
  402742:	490d      	ldr	r1, [pc, #52]	; (402778 <usart_sync_init+0x5c>)
  402744:	4618      	mov	r0, r3
  402746:	4b0d      	ldr	r3, [pc, #52]	; (40277c <usart_sync_init+0x60>)
  402748:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40274a:	68fb      	ldr	r3, [r7, #12]
  40274c:	3308      	adds	r3, #8
  40274e:	68b9      	ldr	r1, [r7, #8]
  402750:	4618      	mov	r0, r3
  402752:	4b0b      	ldr	r3, [pc, #44]	; (402780 <usart_sync_init+0x64>)
  402754:	4798      	blx	r3
  402756:	6178      	str	r0, [r7, #20]
	if (init_status) {
  402758:	697b      	ldr	r3, [r7, #20]
  40275a:	2b00      	cmp	r3, #0
  40275c:	d001      	beq.n	402762 <usart_sync_init+0x46>
		return init_status;
  40275e:	697b      	ldr	r3, [r7, #20]
  402760:	e006      	b.n	402770 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
  402762:	68fb      	ldr	r3, [r7, #12]
  402764:	4a07      	ldr	r2, [pc, #28]	; (402784 <usart_sync_init+0x68>)
  402766:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
  402768:	68fb      	ldr	r3, [r7, #12]
  40276a:	4a07      	ldr	r2, [pc, #28]	; (402788 <usart_sync_init+0x6c>)
  40276c:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  40276e:	2300      	movs	r3, #0
}
  402770:	4618      	mov	r0, r3
  402772:	3718      	adds	r7, #24
  402774:	46bd      	mov	sp, r7
  402776:	bd80      	pop	{r7, pc}
  402778:	00407b8c 	.word	0x00407b8c
  40277c:	00402d41 	.word	0x00402d41
  402780:	004050a5 	.word	0x004050a5
  402784:	00402855 	.word	0x00402855
  402788:	0040278d 	.word	0x0040278d

0040278c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40278c:	b580      	push	{r7, lr}
  40278e:	b086      	sub	sp, #24
  402790:	af00      	add	r7, sp, #0
  402792:	60f8      	str	r0, [r7, #12]
  402794:	60b9      	str	r1, [r7, #8]
  402796:	4613      	mov	r3, r2
  402798:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  40279a:	2300      	movs	r3, #0
  40279c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  40279e:	68fb      	ldr	r3, [r7, #12]
  4027a0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  4027a2:	68fb      	ldr	r3, [r7, #12]
  4027a4:	2b00      	cmp	r3, #0
  4027a6:	d007      	beq.n	4027b8 <usart_sync_write+0x2c>
  4027a8:	68bb      	ldr	r3, [r7, #8]
  4027aa:	2b00      	cmp	r3, #0
  4027ac:	d004      	beq.n	4027b8 <usart_sync_write+0x2c>
  4027ae:	88fb      	ldrh	r3, [r7, #6]
  4027b0:	2b00      	cmp	r3, #0
  4027b2:	d001      	beq.n	4027b8 <usart_sync_write+0x2c>
  4027b4:	2301      	movs	r3, #1
  4027b6:	e000      	b.n	4027ba <usart_sync_write+0x2e>
  4027b8:	2300      	movs	r3, #0
  4027ba:	f003 0301 	and.w	r3, r3, #1
  4027be:	b2db      	uxtb	r3, r3
  4027c0:	22f1      	movs	r2, #241	; 0xf1
  4027c2:	491f      	ldr	r1, [pc, #124]	; (402840 <usart_sync_write+0xb4>)
  4027c4:	4618      	mov	r0, r3
  4027c6:	4b1f      	ldr	r3, [pc, #124]	; (402844 <usart_sync_write+0xb8>)
  4027c8:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4027ca:	bf00      	nop
  4027cc:	693b      	ldr	r3, [r7, #16]
  4027ce:	3308      	adds	r3, #8
  4027d0:	4618      	mov	r0, r3
  4027d2:	4b1d      	ldr	r3, [pc, #116]	; (402848 <usart_sync_write+0xbc>)
  4027d4:	4798      	blx	r3
  4027d6:	4603      	mov	r3, r0
  4027d8:	f083 0301 	eor.w	r3, r3, #1
  4027dc:	b2db      	uxtb	r3, r3
  4027de:	2b00      	cmp	r3, #0
  4027e0:	d1f4      	bne.n	4027cc <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4027e2:	693b      	ldr	r3, [r7, #16]
  4027e4:	f103 0008 	add.w	r0, r3, #8
  4027e8:	68ba      	ldr	r2, [r7, #8]
  4027ea:	697b      	ldr	r3, [r7, #20]
  4027ec:	4413      	add	r3, r2
  4027ee:	781b      	ldrb	r3, [r3, #0]
  4027f0:	4619      	mov	r1, r3
  4027f2:	4b16      	ldr	r3, [pc, #88]	; (40284c <usart_sync_write+0xc0>)
  4027f4:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  4027f6:	bf00      	nop
  4027f8:	693b      	ldr	r3, [r7, #16]
  4027fa:	3308      	adds	r3, #8
  4027fc:	4618      	mov	r0, r3
  4027fe:	4b12      	ldr	r3, [pc, #72]	; (402848 <usart_sync_write+0xbc>)
  402800:	4798      	blx	r3
  402802:	4603      	mov	r3, r0
  402804:	f083 0301 	eor.w	r3, r3, #1
  402808:	b2db      	uxtb	r3, r3
  40280a:	2b00      	cmp	r3, #0
  40280c:	d1f4      	bne.n	4027f8 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
  40280e:	697b      	ldr	r3, [r7, #20]
  402810:	3301      	adds	r3, #1
  402812:	617b      	str	r3, [r7, #20]
  402814:	88fb      	ldrh	r3, [r7, #6]
  402816:	697a      	ldr	r2, [r7, #20]
  402818:	429a      	cmp	r2, r3
  40281a:	d3e2      	bcc.n	4027e2 <usart_sync_write+0x56>
	while (!_usart_sync_is_transmit_done(&descr->device))
  40281c:	bf00      	nop
  40281e:	693b      	ldr	r3, [r7, #16]
  402820:	3308      	adds	r3, #8
  402822:	4618      	mov	r0, r3
  402824:	4b0a      	ldr	r3, [pc, #40]	; (402850 <usart_sync_write+0xc4>)
  402826:	4798      	blx	r3
  402828:	4603      	mov	r3, r0
  40282a:	f083 0301 	eor.w	r3, r3, #1
  40282e:	b2db      	uxtb	r3, r3
  402830:	2b00      	cmp	r3, #0
  402832:	d1f4      	bne.n	40281e <usart_sync_write+0x92>
		;
	return (int32_t)offset;
  402834:	697b      	ldr	r3, [r7, #20]
}
  402836:	4618      	mov	r0, r3
  402838:	3718      	adds	r7, #24
  40283a:	46bd      	mov	sp, r7
  40283c:	bd80      	pop	{r7, pc}
  40283e:	bf00      	nop
  402840:	00407b8c 	.word	0x00407b8c
  402844:	00402d41 	.word	0x00402d41
  402848:	0040526d 	.word	0x0040526d
  40284c:	00405199 	.word	0x00405199
  402850:	004052ad 	.word	0x004052ad

00402854 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  402854:	b590      	push	{r4, r7, lr}
  402856:	b087      	sub	sp, #28
  402858:	af00      	add	r7, sp, #0
  40285a:	60f8      	str	r0, [r7, #12]
  40285c:	60b9      	str	r1, [r7, #8]
  40285e:	4613      	mov	r3, r2
  402860:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  402862:	2300      	movs	r3, #0
  402864:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  402866:	68fb      	ldr	r3, [r7, #12]
  402868:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  40286a:	68fb      	ldr	r3, [r7, #12]
  40286c:	2b00      	cmp	r3, #0
  40286e:	d007      	beq.n	402880 <usart_sync_read+0x2c>
  402870:	68bb      	ldr	r3, [r7, #8]
  402872:	2b00      	cmp	r3, #0
  402874:	d004      	beq.n	402880 <usart_sync_read+0x2c>
  402876:	88fb      	ldrh	r3, [r7, #6]
  402878:	2b00      	cmp	r3, #0
  40287a:	d001      	beq.n	402880 <usart_sync_read+0x2c>
  40287c:	2301      	movs	r3, #1
  40287e:	e000      	b.n	402882 <usart_sync_read+0x2e>
  402880:	2300      	movs	r3, #0
  402882:	f003 0301 	and.w	r3, r3, #1
  402886:	b2db      	uxtb	r3, r3
  402888:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40288c:	4912      	ldr	r1, [pc, #72]	; (4028d8 <usart_sync_read+0x84>)
  40288e:	4618      	mov	r0, r3
  402890:	4b12      	ldr	r3, [pc, #72]	; (4028dc <usart_sync_read+0x88>)
  402892:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  402894:	bf00      	nop
  402896:	693b      	ldr	r3, [r7, #16]
  402898:	3308      	adds	r3, #8
  40289a:	4618      	mov	r0, r3
  40289c:	4b10      	ldr	r3, [pc, #64]	; (4028e0 <usart_sync_read+0x8c>)
  40289e:	4798      	blx	r3
  4028a0:	4603      	mov	r3, r0
  4028a2:	f083 0301 	eor.w	r3, r3, #1
  4028a6:	b2db      	uxtb	r3, r3
  4028a8:	2b00      	cmp	r3, #0
  4028aa:	d1f4      	bne.n	402896 <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  4028ac:	68ba      	ldr	r2, [r7, #8]
  4028ae:	697b      	ldr	r3, [r7, #20]
  4028b0:	18d4      	adds	r4, r2, r3
  4028b2:	693b      	ldr	r3, [r7, #16]
  4028b4:	3308      	adds	r3, #8
  4028b6:	4618      	mov	r0, r3
  4028b8:	4b0a      	ldr	r3, [pc, #40]	; (4028e4 <usart_sync_read+0x90>)
  4028ba:	4798      	blx	r3
  4028bc:	4603      	mov	r3, r0
  4028be:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
  4028c0:	697b      	ldr	r3, [r7, #20]
  4028c2:	3301      	adds	r3, #1
  4028c4:	617b      	str	r3, [r7, #20]
  4028c6:	88fb      	ldrh	r3, [r7, #6]
  4028c8:	697a      	ldr	r2, [r7, #20]
  4028ca:	429a      	cmp	r2, r3
  4028cc:	d3e2      	bcc.n	402894 <usart_sync_read+0x40>

	return (int32_t)offset;
  4028ce:	697b      	ldr	r3, [r7, #20]
}
  4028d0:	4618      	mov	r0, r3
  4028d2:	371c      	adds	r7, #28
  4028d4:	46bd      	mov	sp, r7
  4028d6:	bd90      	pop	{r4, r7, pc}
  4028d8:	00407b8c 	.word	0x00407b8c
  4028dc:	00402d41 	.word	0x00402d41
  4028e0:	004052ed 	.word	0x004052ed
  4028e4:	00405229 	.word	0x00405229

004028e8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
  4028e8:	b480      	push	{r7}
  4028ea:	b085      	sub	sp, #20
  4028ec:	af00      	add	r7, sp, #0
  4028ee:	4603      	mov	r3, r0
  4028f0:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4028f2:	2300      	movs	r3, #0
  4028f4:	73fb      	strb	r3, [r7, #15]
  4028f6:	e029      	b.n	40294c <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  4028f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4028fc:	4a19      	ldr	r2, [pc, #100]	; (402964 <_usb_d_find_ep+0x7c>)
  4028fe:	015b      	lsls	r3, r3, #5
  402900:	4413      	add	r3, r2
  402902:	3301      	adds	r3, #1
  402904:	781b      	ldrb	r3, [r3, #0]
  402906:	79fa      	ldrb	r2, [r7, #7]
  402908:	429a      	cmp	r2, r3
  40290a:	d102      	bne.n	402912 <_usb_d_find_ep+0x2a>
			return i;
  40290c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402910:	e022      	b.n	402958 <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  402912:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402916:	4a13      	ldr	r2, [pc, #76]	; (402964 <_usb_d_find_ep+0x7c>)
  402918:	015b      	lsls	r3, r3, #5
  40291a:	4413      	add	r3, r2
  40291c:	781b      	ldrb	r3, [r3, #0]
  40291e:	2b00      	cmp	r3, #0
  402920:	d10e      	bne.n	402940 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  402922:	79fb      	ldrb	r3, [r7, #7]
  402924:	f003 030f 	and.w	r3, r3, #15
  402928:	f997 200f 	ldrsb.w	r2, [r7, #15]
  40292c:	490d      	ldr	r1, [pc, #52]	; (402964 <_usb_d_find_ep+0x7c>)
  40292e:	0152      	lsls	r2, r2, #5
  402930:	440a      	add	r2, r1
  402932:	3201      	adds	r2, #1
  402934:	7812      	ldrb	r2, [r2, #0]
  402936:	4293      	cmp	r3, r2
  402938:	d102      	bne.n	402940 <_usb_d_find_ep+0x58>
			return i;
  40293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40293e:	e00b      	b.n	402958 <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402940:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402944:	b2db      	uxtb	r3, r3
  402946:	3301      	adds	r3, #1
  402948:	b2db      	uxtb	r3, r3
  40294a:	73fb      	strb	r3, [r7, #15]
  40294c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402950:	2b03      	cmp	r3, #3
  402952:	ddd1      	ble.n	4028f8 <_usb_d_find_ep+0x10>
		}
	}
	return -1;
  402954:	f04f 33ff 	mov.w	r3, #4294967295
}
  402958:	4618      	mov	r0, r3
  40295a:	3714      	adds	r7, #20
  40295c:	46bd      	mov	sp, r7
  40295e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402962:	4770      	bx	lr
  402964:	20401140 	.word	0x20401140

00402968 <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
  402968:	b580      	push	{r7, lr}
  40296a:	b088      	sub	sp, #32
  40296c:	af00      	add	r7, sp, #0
  40296e:	60ba      	str	r2, [r7, #8]
  402970:	607b      	str	r3, [r7, #4]
  402972:	4603      	mov	r3, r0
  402974:	73fb      	strb	r3, [r7, #15]
  402976:	460b      	mov	r3, r1
  402978:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
  40297a:	68bb      	ldr	r3, [r7, #8]
  40297c:	617b      	str	r3, [r7, #20]
  40297e:	687b      	ldr	r3, [r7, #4]
  402980:	61bb      	str	r3, [r7, #24]
  402982:	7bbb      	ldrb	r3, [r7, #14]
  402984:	2b00      	cmp	r3, #0
  402986:	d004      	beq.n	402992 <_usb_d_trans+0x2a>
  402988:	7bfb      	ldrb	r3, [r7, #15]
  40298a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40298e:	b2db      	uxtb	r3, r3
  402990:	e003      	b.n	40299a <_usb_d_trans+0x32>
  402992:	7bfb      	ldrb	r3, [r7, #15]
  402994:	f003 030f 	and.w	r3, r3, #15
  402998:	b2db      	uxtb	r3, r3
  40299a:	773b      	strb	r3, [r7, #28]
  40299c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4029a0:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
  4029a2:	f107 0314 	add.w	r3, r7, #20
  4029a6:	4618      	mov	r0, r3
  4029a8:	4b03      	ldr	r3, [pc, #12]	; (4029b8 <_usb_d_trans+0x50>)
  4029aa:	4798      	blx	r3
  4029ac:	4603      	mov	r3, r0
}
  4029ae:	4618      	mov	r0, r3
  4029b0:	3720      	adds	r7, #32
  4029b2:	46bd      	mov	sp, r7
  4029b4:	bd80      	pop	{r7, pc}
  4029b6:	bf00      	nop
  4029b8:	00406e7d 	.word	0x00406e7d

004029bc <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
  4029bc:	b480      	push	{r7}
  4029be:	b085      	sub	sp, #20
  4029c0:	af00      	add	r7, sp, #0
  4029c2:	60f8      	str	r0, [r7, #12]
  4029c4:	60b9      	str	r1, [r7, #8]
  4029c6:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
  4029c8:	2300      	movs	r3, #0
}
  4029ca:	4618      	mov	r0, r3
  4029cc:	3714      	adds	r7, #20
  4029ce:	46bd      	mov	sp, r7
  4029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029d4:	4770      	bx	lr
	...

004029d8 <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
  4029d8:	b580      	push	{r7, lr}
  4029da:	b086      	sub	sp, #24
  4029dc:	af00      	add	r7, sp, #0
  4029de:	4603      	mov	r3, r0
  4029e0:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  4029e2:	79fb      	ldrb	r3, [r7, #7]
  4029e4:	4618      	mov	r0, r3
  4029e6:	4b2a      	ldr	r3, [pc, #168]	; (402a90 <usb_d_cb_trans_setup+0xb8>)
  4029e8:	4798      	blx	r3
  4029ea:	4603      	mov	r3, r0
  4029ec:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4029ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4029f2:	015b      	lsls	r3, r3, #5
  4029f4:	4a27      	ldr	r2, [pc, #156]	; (402a94 <usb_d_cb_trans_setup+0xbc>)
  4029f6:	4413      	add	r3, r2
  4029f8:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
  4029fa:	693b      	ldr	r3, [r7, #16]
  4029fc:	330c      	adds	r3, #12
  4029fe:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  402a00:	79fb      	ldrb	r3, [r7, #7]
  402a02:	68f9      	ldr	r1, [r7, #12]
  402a04:	4618      	mov	r0, r3
  402a06:	4b24      	ldr	r3, [pc, #144]	; (402a98 <usb_d_cb_trans_setup+0xc0>)
  402a08:	4798      	blx	r3
  402a0a:	4603      	mov	r3, r0
  402a0c:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
  402a0e:	7afb      	ldrb	r3, [r7, #11]
  402a10:	2b08      	cmp	r3, #8
  402a12:	d00d      	beq.n	402a30 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  402a14:	79fb      	ldrb	r3, [r7, #7]
  402a16:	2101      	movs	r1, #1
  402a18:	4618      	mov	r0, r3
  402a1a:	4b20      	ldr	r3, [pc, #128]	; (402a9c <usb_d_cb_trans_setup+0xc4>)
  402a1c:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  402a1e:	79fb      	ldrb	r3, [r7, #7]
  402a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402a24:	b2db      	uxtb	r3, r3
  402a26:	2101      	movs	r1, #1
  402a28:	4618      	mov	r0, r3
  402a2a:	4b1c      	ldr	r3, [pc, #112]	; (402a9c <usb_d_cb_trans_setup+0xc4>)
  402a2c:	4798      	blx	r3
		return;
  402a2e:	e02b      	b.n	402a88 <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  402a30:	79fb      	ldrb	r3, [r7, #7]
  402a32:	2100      	movs	r1, #0
  402a34:	4618      	mov	r0, r3
  402a36:	4b19      	ldr	r3, [pc, #100]	; (402a9c <usb_d_cb_trans_setup+0xc4>)
  402a38:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  402a3a:	79fb      	ldrb	r3, [r7, #7]
  402a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402a40:	b2db      	uxtb	r3, r3
  402a42:	2100      	movs	r1, #0
  402a44:	4618      	mov	r0, r3
  402a46:	4b15      	ldr	r3, [pc, #84]	; (402a9c <usb_d_cb_trans_setup+0xc4>)
  402a48:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  402a4a:	693b      	ldr	r3, [r7, #16]
  402a4c:	2201      	movs	r2, #1
  402a4e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  402a50:	693b      	ldr	r3, [r7, #16]
  402a52:	695b      	ldr	r3, [r3, #20]
  402a54:	79fa      	ldrb	r2, [r7, #7]
  402a56:	68f9      	ldr	r1, [r7, #12]
  402a58:	4610      	mov	r0, r2
  402a5a:	4798      	blx	r3
  402a5c:	4603      	mov	r3, r0
  402a5e:	f083 0301 	eor.w	r3, r3, #1
  402a62:	b2db      	uxtb	r3, r3
  402a64:	2b00      	cmp	r3, #0
  402a66:	d00f      	beq.n	402a88 <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  402a68:	693b      	ldr	r3, [r7, #16]
  402a6a:	2205      	movs	r2, #5
  402a6c:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  402a6e:	79fb      	ldrb	r3, [r7, #7]
  402a70:	2101      	movs	r1, #1
  402a72:	4618      	mov	r0, r3
  402a74:	4b09      	ldr	r3, [pc, #36]	; (402a9c <usb_d_cb_trans_setup+0xc4>)
  402a76:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  402a78:	79fb      	ldrb	r3, [r7, #7]
  402a7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402a7e:	b2db      	uxtb	r3, r3
  402a80:	2101      	movs	r1, #1
  402a82:	4618      	mov	r0, r3
  402a84:	4b05      	ldr	r3, [pc, #20]	; (402a9c <usb_d_cb_trans_setup+0xc4>)
  402a86:	4798      	blx	r3
	}
}
  402a88:	3718      	adds	r7, #24
  402a8a:	46bd      	mov	sp, r7
  402a8c:	bd80      	pop	{r7, pc}
  402a8e:	bf00      	nop
  402a90:	004028e9 	.word	0x004028e9
  402a94:	20401140 	.word	0x20401140
  402a98:	00406dd9 	.word	0x00406dd9
  402a9c:	00406cad 	.word	0x00406cad

00402aa0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  402aa0:	b580      	push	{r7, lr}
  402aa2:	b084      	sub	sp, #16
  402aa4:	af00      	add	r7, sp, #0
  402aa6:	4603      	mov	r3, r0
  402aa8:	6039      	str	r1, [r7, #0]
  402aaa:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  402aac:	79fb      	ldrb	r3, [r7, #7]
  402aae:	4618      	mov	r0, r3
  402ab0:	4b0d      	ldr	r3, [pc, #52]	; (402ae8 <usb_d_cb_trans_more+0x48>)
  402ab2:	4798      	blx	r3
  402ab4:	4603      	mov	r3, r0
  402ab6:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402abc:	015b      	lsls	r3, r3, #5
  402abe:	4a0b      	ldr	r2, [pc, #44]	; (402aec <usb_d_cb_trans_more+0x4c>)
  402ac0:	4413      	add	r3, r2
  402ac2:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  402ac4:	68bb      	ldr	r3, [r7, #8]
  402ac6:	789b      	ldrb	r3, [r3, #2]
  402ac8:	2b03      	cmp	r3, #3
  402aca:	d107      	bne.n	402adc <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
  402acc:	68bb      	ldr	r3, [r7, #8]
  402ace:	699b      	ldr	r3, [r3, #24]
  402ad0:	79fa      	ldrb	r2, [r7, #7]
  402ad2:	6839      	ldr	r1, [r7, #0]
  402ad4:	4610      	mov	r0, r2
  402ad6:	4798      	blx	r3
  402ad8:	4603      	mov	r3, r0
  402ada:	e000      	b.n	402ade <usb_d_cb_trans_more+0x3e>
	}
	return false;
  402adc:	2300      	movs	r3, #0
}
  402ade:	4618      	mov	r0, r3
  402ae0:	3710      	adds	r7, #16
  402ae2:	46bd      	mov	sp, r7
  402ae4:	bd80      	pop	{r7, pc}
  402ae6:	bf00      	nop
  402ae8:	004028e9 	.word	0x004028e9
  402aec:	20401140 	.word	0x20401140

00402af0 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
  402af0:	b590      	push	{r4, r7, lr}
  402af2:	b087      	sub	sp, #28
  402af4:	af02      	add	r7, sp, #8
  402af6:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
  402af8:	687b      	ldr	r3, [r7, #4]
  402afa:	789b      	ldrb	r3, [r3, #2]
  402afc:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  402afe:	687b      	ldr	r3, [r7, #4]
  402b00:	7b1b      	ldrb	r3, [r3, #12]
  402b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402b06:	2b00      	cmp	r3, #0
  402b08:	bf14      	ite	ne
  402b0a:	2301      	movne	r3, #1
  402b0c:	2300      	moveq	r3, #0
  402b0e:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
  402b10:	7bfb      	ldrb	r3, [r7, #15]
  402b12:	2b03      	cmp	r3, #3
  402b14:	d13a      	bne.n	402b8c <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  402b16:	687b      	ldr	r3, [r7, #4]
  402b18:	69db      	ldr	r3, [r3, #28]
  402b1a:	687a      	ldr	r2, [r7, #4]
  402b1c:	7850      	ldrb	r0, [r2, #1]
  402b1e:	687a      	ldr	r2, [r7, #4]
  402b20:	320c      	adds	r2, #12
  402b22:	2101      	movs	r1, #1
  402b24:	4798      	blx	r3
  402b26:	4603      	mov	r3, r0
  402b28:	737b      	strb	r3, [r7, #13]
		if (err) {
  402b2a:	7b7b      	ldrb	r3, [r7, #13]
  402b2c:	2b00      	cmp	r3, #0
  402b2e:	d015      	beq.n	402b5c <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  402b30:	687b      	ldr	r3, [r7, #4]
  402b32:	2205      	movs	r2, #5
  402b34:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  402b36:	687b      	ldr	r3, [r7, #4]
  402b38:	2202      	movs	r2, #2
  402b3a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  402b3c:	7bbb      	ldrb	r3, [r7, #14]
  402b3e:	2b00      	cmp	r3, #0
  402b40:	d002      	beq.n	402b48 <usb_d_ctrl_trans_done+0x58>
  402b42:	687b      	ldr	r3, [r7, #4]
  402b44:	785b      	ldrb	r3, [r3, #1]
  402b46:	e004      	b.n	402b52 <usb_d_ctrl_trans_done+0x62>
  402b48:	687b      	ldr	r3, [r7, #4]
  402b4a:	785b      	ldrb	r3, [r3, #1]
  402b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  402b50:	b2db      	uxtb	r3, r3
  402b52:	2101      	movs	r1, #1
  402b54:	4618      	mov	r0, r3
  402b56:	4b15      	ldr	r3, [pc, #84]	; (402bac <usb_d_ctrl_trans_done+0xbc>)
  402b58:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
  402b5a:	e022      	b.n	402ba2 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  402b5c:	687b      	ldr	r3, [r7, #4]
  402b5e:	2204      	movs	r2, #4
  402b60:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  402b62:	687b      	ldr	r3, [r7, #4]
  402b64:	7858      	ldrb	r0, [r3, #1]
  402b66:	7bbb      	ldrb	r3, [r7, #14]
  402b68:	2b00      	cmp	r3, #0
  402b6a:	bf14      	ite	ne
  402b6c:	2301      	movne	r3, #1
  402b6e:	2300      	moveq	r3, #0
  402b70:	b2db      	uxtb	r3, r3
  402b72:	f083 0301 	eor.w	r3, r3, #1
  402b76:	b2db      	uxtb	r3, r3
  402b78:	f003 0301 	and.w	r3, r3, #1
  402b7c:	b2d9      	uxtb	r1, r3
  402b7e:	2301      	movs	r3, #1
  402b80:	9300      	str	r3, [sp, #0]
  402b82:	2300      	movs	r3, #0
  402b84:	2200      	movs	r2, #0
  402b86:	4c0a      	ldr	r4, [pc, #40]	; (402bb0 <usb_d_ctrl_trans_done+0xc0>)
  402b88:	47a0      	blx	r4
}
  402b8a:	e00a      	b.n	402ba2 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  402b8c:	687b      	ldr	r3, [r7, #4]
  402b8e:	69db      	ldr	r3, [r3, #28]
  402b90:	687a      	ldr	r2, [r7, #4]
  402b92:	7850      	ldrb	r0, [r2, #1]
  402b94:	687a      	ldr	r2, [r7, #4]
  402b96:	320c      	adds	r2, #12
  402b98:	2100      	movs	r1, #0
  402b9a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402b9c:	687b      	ldr	r3, [r7, #4]
  402b9e:	2202      	movs	r2, #2
  402ba0:	709a      	strb	r2, [r3, #2]
}
  402ba2:	bf00      	nop
  402ba4:	3714      	adds	r7, #20
  402ba6:	46bd      	mov	sp, r7
  402ba8:	bd90      	pop	{r4, r7, pc}
  402baa:	bf00      	nop
  402bac:	00406cad 	.word	0x00406cad
  402bb0:	00402969 	.word	0x00402969

00402bb4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  402bb4:	b580      	push	{r7, lr}
  402bb6:	b086      	sub	sp, #24
  402bb8:	af00      	add	r7, sp, #0
  402bba:	4603      	mov	r3, r0
  402bbc:	60b9      	str	r1, [r7, #8]
  402bbe:	607a      	str	r2, [r7, #4]
  402bc0:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
  402bc2:	7bfb      	ldrb	r3, [r7, #15]
  402bc4:	4618      	mov	r0, r3
  402bc6:	4b2f      	ldr	r3, [pc, #188]	; (402c84 <_usb_d_cb_trans_done+0xd0>)
  402bc8:	4798      	blx	r3
  402bca:	4603      	mov	r3, r0
  402bcc:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  402bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402bd2:	015b      	lsls	r3, r3, #5
  402bd4:	4a2c      	ldr	r2, [pc, #176]	; (402c88 <_usb_d_cb_trans_done+0xd4>)
  402bd6:	4413      	add	r3, r2
  402bd8:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
  402bda:	68bb      	ldr	r3, [r7, #8]
  402bdc:	2b00      	cmp	r3, #0
  402bde:	d10e      	bne.n	402bfe <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
  402be0:	693b      	ldr	r3, [r7, #16]
  402be2:	2200      	movs	r2, #0
  402be4:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  402be6:	693b      	ldr	r3, [r7, #16]
  402be8:	781b      	ldrb	r3, [r3, #0]
  402bea:	2b00      	cmp	r3, #0
  402bec:	d103      	bne.n	402bf6 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
  402bee:	6938      	ldr	r0, [r7, #16]
  402bf0:	4b26      	ldr	r3, [pc, #152]	; (402c8c <_usb_d_cb_trans_done+0xd8>)
  402bf2:	4798      	blx	r3
			return;
  402bf4:	e043      	b.n	402c7e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  402bf6:	693b      	ldr	r3, [r7, #16]
  402bf8:	2201      	movs	r2, #1
  402bfa:	709a      	strb	r2, [r3, #2]
  402bfc:	e038      	b.n	402c70 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
  402bfe:	68bb      	ldr	r3, [r7, #8]
  402c00:	2b01      	cmp	r3, #1
  402c02:	d113      	bne.n	402c2c <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
  402c04:	693b      	ldr	r3, [r7, #16]
  402c06:	2202      	movs	r2, #2
  402c08:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  402c0a:	693b      	ldr	r3, [r7, #16]
  402c0c:	781b      	ldrb	r3, [r3, #0]
  402c0e:	2b00      	cmp	r3, #0
  402c10:	d108      	bne.n	402c24 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402c12:	693b      	ldr	r3, [r7, #16]
  402c14:	2202      	movs	r2, #2
  402c16:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  402c18:	7bfb      	ldrb	r3, [r7, #15]
  402c1a:	2100      	movs	r1, #0
  402c1c:	4618      	mov	r0, r3
  402c1e:	4b1c      	ldr	r3, [pc, #112]	; (402c90 <_usb_d_cb_trans_done+0xdc>)
  402c20:	4798      	blx	r3
  402c22:	e025      	b.n	402c70 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  402c24:	693b      	ldr	r3, [r7, #16]
  402c26:	2205      	movs	r2, #5
  402c28:	709a      	strb	r2, [r3, #2]
  402c2a:	e021      	b.n	402c70 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
  402c2c:	68bb      	ldr	r3, [r7, #8]
  402c2e:	2b02      	cmp	r3, #2
  402c30:	d10e      	bne.n	402c50 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  402c32:	693b      	ldr	r3, [r7, #16]
  402c34:	2204      	movs	r2, #4
  402c36:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  402c38:	693b      	ldr	r3, [r7, #16]
  402c3a:	781b      	ldrb	r3, [r3, #0]
  402c3c:	2b00      	cmp	r3, #0
  402c3e:	d103      	bne.n	402c48 <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  402c40:	693b      	ldr	r3, [r7, #16]
  402c42:	2202      	movs	r2, #2
  402c44:	709a      	strb	r2, [r3, #2]
			return;
  402c46:	e01a      	b.n	402c7e <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  402c48:	693b      	ldr	r3, [r7, #16]
  402c4a:	2201      	movs	r2, #1
  402c4c:	709a      	strb	r2, [r3, #2]
  402c4e:	e00f      	b.n	402c70 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
  402c50:	68bb      	ldr	r3, [r7, #8]
  402c52:	2b03      	cmp	r3, #3
  402c54:	d106      	bne.n	402c64 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  402c56:	693b      	ldr	r3, [r7, #16]
  402c58:	2200      	movs	r2, #0
  402c5a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  402c5c:	693b      	ldr	r3, [r7, #16]
  402c5e:	2205      	movs	r2, #5
  402c60:	70da      	strb	r2, [r3, #3]
  402c62:	e005      	b.n	402c70 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  402c64:	693b      	ldr	r3, [r7, #16]
  402c66:	2206      	movs	r2, #6
  402c68:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  402c6a:	693b      	ldr	r3, [r7, #16]
  402c6c:	2206      	movs	r2, #6
  402c6e:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  402c70:	693b      	ldr	r3, [r7, #16]
  402c72:	69db      	ldr	r3, [r3, #28]
  402c74:	693a      	ldr	r2, [r7, #16]
  402c76:	78d1      	ldrb	r1, [r2, #3]
  402c78:	687a      	ldr	r2, [r7, #4]
  402c7a:	7bf8      	ldrb	r0, [r7, #15]
  402c7c:	4798      	blx	r3
}
  402c7e:	3718      	adds	r7, #24
  402c80:	46bd      	mov	sp, r7
  402c82:	bd80      	pop	{r7, pc}
  402c84:	004028e9 	.word	0x004028e9
  402c88:	20401140 	.word	0x20401140
  402c8c:	00402af1 	.word	0x00402af1
  402c90:	00406cad 	.word	0x00406cad

00402c94 <usb_d_init>:

int32_t usb_d_init(void)
{
  402c94:	b580      	push	{r7, lr}
  402c96:	b082      	sub	sp, #8
  402c98:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
  402c9a:	4b21      	ldr	r3, [pc, #132]	; (402d20 <usb_d_init+0x8c>)
  402c9c:	4798      	blx	r3
  402c9e:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
  402ca0:	683b      	ldr	r3, [r7, #0]
  402ca2:	2b00      	cmp	r3, #0
  402ca4:	da01      	bge.n	402caa <usb_d_init+0x16>
		return rc;
  402ca6:	683b      	ldr	r3, [r7, #0]
  402ca8:	e036      	b.n	402d18 <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  402caa:	2280      	movs	r2, #128	; 0x80
  402cac:	2100      	movs	r1, #0
  402cae:	481d      	ldr	r0, [pc, #116]	; (402d24 <usb_d_init+0x90>)
  402cb0:	4b1d      	ldr	r3, [pc, #116]	; (402d28 <usb_d_init+0x94>)
  402cb2:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402cb4:	2300      	movs	r3, #0
  402cb6:	71fb      	strb	r3, [r7, #7]
  402cb8:	e01e      	b.n	402cf8 <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  402cba:	79fb      	ldrb	r3, [r7, #7]
  402cbc:	4a19      	ldr	r2, [pc, #100]	; (402d24 <usb_d_init+0x90>)
  402cbe:	015b      	lsls	r3, r3, #5
  402cc0:	4413      	add	r3, r2
  402cc2:	3301      	adds	r3, #1
  402cc4:	22ff      	movs	r2, #255	; 0xff
  402cc6:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  402cc8:	79fb      	ldrb	r3, [r7, #7]
  402cca:	4a16      	ldr	r2, [pc, #88]	; (402d24 <usb_d_init+0x90>)
  402ccc:	015b      	lsls	r3, r3, #5
  402cce:	4413      	add	r3, r2
  402cd0:	3314      	adds	r3, #20
  402cd2:	4a16      	ldr	r2, [pc, #88]	; (402d2c <usb_d_init+0x98>)
  402cd4:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  402cd6:	79fb      	ldrb	r3, [r7, #7]
  402cd8:	4a12      	ldr	r2, [pc, #72]	; (402d24 <usb_d_init+0x90>)
  402cda:	015b      	lsls	r3, r3, #5
  402cdc:	4413      	add	r3, r2
  402cde:	3318      	adds	r3, #24
  402ce0:	4a12      	ldr	r2, [pc, #72]	; (402d2c <usb_d_init+0x98>)
  402ce2:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  402ce4:	79fb      	ldrb	r3, [r7, #7]
  402ce6:	4a0f      	ldr	r2, [pc, #60]	; (402d24 <usb_d_init+0x90>)
  402ce8:	015b      	lsls	r3, r3, #5
  402cea:	4413      	add	r3, r2
  402cec:	331c      	adds	r3, #28
  402cee:	4a0f      	ldr	r2, [pc, #60]	; (402d2c <usb_d_init+0x98>)
  402cf0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  402cf2:	79fb      	ldrb	r3, [r7, #7]
  402cf4:	3301      	adds	r3, #1
  402cf6:	71fb      	strb	r3, [r7, #7]
  402cf8:	79fb      	ldrb	r3, [r7, #7]
  402cfa:	2b03      	cmp	r3, #3
  402cfc:	d9dd      	bls.n	402cba <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  402cfe:	490c      	ldr	r1, [pc, #48]	; (402d30 <usb_d_init+0x9c>)
  402d00:	2000      	movs	r0, #0
  402d02:	4b0c      	ldr	r3, [pc, #48]	; (402d34 <usb_d_init+0xa0>)
  402d04:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  402d06:	490c      	ldr	r1, [pc, #48]	; (402d38 <usb_d_init+0xa4>)
  402d08:	2001      	movs	r0, #1
  402d0a:	4b0a      	ldr	r3, [pc, #40]	; (402d34 <usb_d_init+0xa0>)
  402d0c:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  402d0e:	490b      	ldr	r1, [pc, #44]	; (402d3c <usb_d_init+0xa8>)
  402d10:	2002      	movs	r0, #2
  402d12:	4b08      	ldr	r3, [pc, #32]	; (402d34 <usb_d_init+0xa0>)
  402d14:	4798      	blx	r3
	return ERR_NONE;
  402d16:	2300      	movs	r3, #0
}
  402d18:	4618      	mov	r0, r3
  402d1a:	3708      	adds	r7, #8
  402d1c:	46bd      	mov	sp, r7
  402d1e:	bd80      	pop	{r7, pc}
  402d20:	00406ad1 	.word	0x00406ad1
  402d24:	20401140 	.word	0x20401140
  402d28:	00407aeb 	.word	0x00407aeb
  402d2c:	004029bd 	.word	0x004029bd
  402d30:	004029d9 	.word	0x004029d9
  402d34:	0040703d 	.word	0x0040703d
  402d38:	00402aa1 	.word	0x00402aa1
  402d3c:	00402bb5 	.word	0x00402bb5

00402d40 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
  402d40:	b480      	push	{r7}
  402d42:	b085      	sub	sp, #20
  402d44:	af00      	add	r7, sp, #0
  402d46:	4603      	mov	r3, r0
  402d48:	60b9      	str	r1, [r7, #8]
  402d4a:	607a      	str	r2, [r7, #4]
  402d4c:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
  402d4e:	7bfb      	ldrb	r3, [r7, #15]
  402d50:	f083 0301 	eor.w	r3, r3, #1
  402d54:	b2db      	uxtb	r3, r3
  402d56:	2b00      	cmp	r3, #0
  402d58:	d000      	beq.n	402d5c <assert+0x1c>
		__asm("BKPT #0");
  402d5a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  402d5c:	bf00      	nop
  402d5e:	3714      	adds	r7, #20
  402d60:	46bd      	mov	sp, r7
  402d62:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d66:	4770      	bx	lr

00402d68 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  402d68:	b580      	push	{r7, lr}
  402d6a:	b084      	sub	sp, #16
  402d6c:	af00      	add	r7, sp, #0
  402d6e:	60f8      	str	r0, [r7, #12]
  402d70:	60b9      	str	r1, [r7, #8]
  402d72:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
  402d74:	68fb      	ldr	r3, [r7, #12]
  402d76:	2b00      	cmp	r3, #0
  402d78:	d007      	beq.n	402d8a <ringbuffer_init+0x22>
  402d7a:	68bb      	ldr	r3, [r7, #8]
  402d7c:	2b00      	cmp	r3, #0
  402d7e:	d004      	beq.n	402d8a <ringbuffer_init+0x22>
  402d80:	687b      	ldr	r3, [r7, #4]
  402d82:	2b00      	cmp	r3, #0
  402d84:	d001      	beq.n	402d8a <ringbuffer_init+0x22>
  402d86:	2301      	movs	r3, #1
  402d88:	e000      	b.n	402d8c <ringbuffer_init+0x24>
  402d8a:	2300      	movs	r3, #0
  402d8c:	f003 0301 	and.w	r3, r3, #1
  402d90:	b2db      	uxtb	r3, r3
  402d92:	2228      	movs	r2, #40	; 0x28
  402d94:	490f      	ldr	r1, [pc, #60]	; (402dd4 <ringbuffer_init+0x6c>)
  402d96:	4618      	mov	r0, r3
  402d98:	4b0f      	ldr	r3, [pc, #60]	; (402dd8 <ringbuffer_init+0x70>)
  402d9a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  402d9c:	687b      	ldr	r3, [r7, #4]
  402d9e:	1e5a      	subs	r2, r3, #1
  402da0:	687b      	ldr	r3, [r7, #4]
  402da2:	4013      	ands	r3, r2
  402da4:	2b00      	cmp	r3, #0
  402da6:	d002      	beq.n	402dae <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
  402da8:	f06f 030c 	mvn.w	r3, #12
  402dac:	e00e      	b.n	402dcc <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  402dae:	687b      	ldr	r3, [r7, #4]
  402db0:	1e5a      	subs	r2, r3, #1
  402db2:	68fb      	ldr	r3, [r7, #12]
  402db4:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
  402db6:	68fb      	ldr	r3, [r7, #12]
  402db8:	2200      	movs	r2, #0
  402dba:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
  402dbc:	68fb      	ldr	r3, [r7, #12]
  402dbe:	689a      	ldr	r2, [r3, #8]
  402dc0:	68fb      	ldr	r3, [r7, #12]
  402dc2:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
  402dc4:	68fb      	ldr	r3, [r7, #12]
  402dc6:	68ba      	ldr	r2, [r7, #8]
  402dc8:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  402dca:	2300      	movs	r3, #0
}
  402dcc:	4618      	mov	r0, r3
  402dce:	3710      	adds	r7, #16
  402dd0:	46bd      	mov	sp, r7
  402dd2:	bd80      	pop	{r7, pc}
  402dd4:	00407ba8 	.word	0x00407ba8
  402dd8:	00402d41 	.word	0x00402d41

00402ddc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  402ddc:	b580      	push	{r7, lr}
  402dde:	b082      	sub	sp, #8
  402de0:	af00      	add	r7, sp, #0
  402de2:	6078      	str	r0, [r7, #4]
  402de4:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
  402de6:	687b      	ldr	r3, [r7, #4]
  402de8:	2b00      	cmp	r3, #0
  402dea:	d004      	beq.n	402df6 <ringbuffer_get+0x1a>
  402dec:	683b      	ldr	r3, [r7, #0]
  402dee:	2b00      	cmp	r3, #0
  402df0:	d001      	beq.n	402df6 <ringbuffer_get+0x1a>
  402df2:	2301      	movs	r3, #1
  402df4:	e000      	b.n	402df8 <ringbuffer_get+0x1c>
  402df6:	2300      	movs	r3, #0
  402df8:	f003 0301 	and.w	r3, r3, #1
  402dfc:	b2db      	uxtb	r3, r3
  402dfe:	2240      	movs	r2, #64	; 0x40
  402e00:	4910      	ldr	r1, [pc, #64]	; (402e44 <ringbuffer_get+0x68>)
  402e02:	4618      	mov	r0, r3
  402e04:	4b10      	ldr	r3, [pc, #64]	; (402e48 <ringbuffer_get+0x6c>)
  402e06:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  402e08:	687b      	ldr	r3, [r7, #4]
  402e0a:	68da      	ldr	r2, [r3, #12]
  402e0c:	687b      	ldr	r3, [r7, #4]
  402e0e:	689b      	ldr	r3, [r3, #8]
  402e10:	429a      	cmp	r2, r3
  402e12:	d011      	beq.n	402e38 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
  402e14:	687b      	ldr	r3, [r7, #4]
  402e16:	681a      	ldr	r2, [r3, #0]
  402e18:	687b      	ldr	r3, [r7, #4]
  402e1a:	6899      	ldr	r1, [r3, #8]
  402e1c:	687b      	ldr	r3, [r7, #4]
  402e1e:	685b      	ldr	r3, [r3, #4]
  402e20:	400b      	ands	r3, r1
  402e22:	4413      	add	r3, r2
  402e24:	781a      	ldrb	r2, [r3, #0]
  402e26:	683b      	ldr	r3, [r7, #0]
  402e28:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
  402e2a:	687b      	ldr	r3, [r7, #4]
  402e2c:	689b      	ldr	r3, [r3, #8]
  402e2e:	1c5a      	adds	r2, r3, #1
  402e30:	687b      	ldr	r3, [r7, #4]
  402e32:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
  402e34:	2300      	movs	r3, #0
  402e36:	e001      	b.n	402e3c <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
  402e38:	f06f 0309 	mvn.w	r3, #9
}
  402e3c:	4618      	mov	r0, r3
  402e3e:	3708      	adds	r7, #8
  402e40:	46bd      	mov	sp, r7
  402e42:	bd80      	pop	{r7, pc}
  402e44:	00407ba8 	.word	0x00407ba8
  402e48:	00402d41 	.word	0x00402d41

00402e4c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  402e4c:	b580      	push	{r7, lr}
  402e4e:	b082      	sub	sp, #8
  402e50:	af00      	add	r7, sp, #0
  402e52:	6078      	str	r0, [r7, #4]
  402e54:	460b      	mov	r3, r1
  402e56:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
  402e58:	687b      	ldr	r3, [r7, #4]
  402e5a:	2b00      	cmp	r3, #0
  402e5c:	bf14      	ite	ne
  402e5e:	2301      	movne	r3, #1
  402e60:	2300      	moveq	r3, #0
  402e62:	b2db      	uxtb	r3, r3
  402e64:	2251      	movs	r2, #81	; 0x51
  402e66:	4914      	ldr	r1, [pc, #80]	; (402eb8 <ringbuffer_put+0x6c>)
  402e68:	4618      	mov	r0, r3
  402e6a:	4b14      	ldr	r3, [pc, #80]	; (402ebc <ringbuffer_put+0x70>)
  402e6c:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  402e6e:	687b      	ldr	r3, [r7, #4]
  402e70:	681a      	ldr	r2, [r3, #0]
  402e72:	687b      	ldr	r3, [r7, #4]
  402e74:	68d9      	ldr	r1, [r3, #12]
  402e76:	687b      	ldr	r3, [r7, #4]
  402e78:	685b      	ldr	r3, [r3, #4]
  402e7a:	400b      	ands	r3, r1
  402e7c:	4413      	add	r3, r2
  402e7e:	78fa      	ldrb	r2, [r7, #3]
  402e80:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  402e82:	687b      	ldr	r3, [r7, #4]
  402e84:	68da      	ldr	r2, [r3, #12]
  402e86:	687b      	ldr	r3, [r7, #4]
  402e88:	689b      	ldr	r3, [r3, #8]
  402e8a:	1ad2      	subs	r2, r2, r3
  402e8c:	687b      	ldr	r3, [r7, #4]
  402e8e:	685b      	ldr	r3, [r3, #4]
  402e90:	429a      	cmp	r2, r3
  402e92:	d906      	bls.n	402ea2 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
  402e94:	687b      	ldr	r3, [r7, #4]
  402e96:	68da      	ldr	r2, [r3, #12]
  402e98:	687b      	ldr	r3, [r7, #4]
  402e9a:	685b      	ldr	r3, [r3, #4]
  402e9c:	1ad2      	subs	r2, r2, r3
  402e9e:	687b      	ldr	r3, [r7, #4]
  402ea0:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
  402ea2:	687b      	ldr	r3, [r7, #4]
  402ea4:	68db      	ldr	r3, [r3, #12]
  402ea6:	1c5a      	adds	r2, r3, #1
  402ea8:	687b      	ldr	r3, [r7, #4]
  402eaa:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
  402eac:	2300      	movs	r3, #0
}
  402eae:	4618      	mov	r0, r3
  402eb0:	3708      	adds	r7, #8
  402eb2:	46bd      	mov	sp, r7
  402eb4:	bd80      	pop	{r7, pc}
  402eb6:	bf00      	nop
  402eb8:	00407ba8 	.word	0x00407ba8
  402ebc:	00402d41 	.word	0x00402d41

00402ec0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  402ec0:	b580      	push	{r7, lr}
  402ec2:	b082      	sub	sp, #8
  402ec4:	af00      	add	r7, sp, #0
  402ec6:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
  402ec8:	687b      	ldr	r3, [r7, #4]
  402eca:	2b00      	cmp	r3, #0
  402ecc:	bf14      	ite	ne
  402ece:	2301      	movne	r3, #1
  402ed0:	2300      	moveq	r3, #0
  402ed2:	b2db      	uxtb	r3, r3
  402ed4:	2267      	movs	r2, #103	; 0x67
  402ed6:	4906      	ldr	r1, [pc, #24]	; (402ef0 <ringbuffer_num+0x30>)
  402ed8:	4618      	mov	r0, r3
  402eda:	4b06      	ldr	r3, [pc, #24]	; (402ef4 <ringbuffer_num+0x34>)
  402edc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  402ede:	687b      	ldr	r3, [r7, #4]
  402ee0:	68da      	ldr	r2, [r3, #12]
  402ee2:	687b      	ldr	r3, [r7, #4]
  402ee4:	689b      	ldr	r3, [r3, #8]
  402ee6:	1ad3      	subs	r3, r2, r3
}
  402ee8:	4618      	mov	r0, r3
  402eea:	3708      	adds	r7, #8
  402eec:	46bd      	mov	sp, r7
  402eee:	bd80      	pop	{r7, pc}
  402ef0:	00407ba8 	.word	0x00407ba8
  402ef4:	00402d41 	.word	0x00402d41

00402ef8 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
  402ef8:	b480      	push	{r7}
  402efa:	b083      	sub	sp, #12
  402efc:	af00      	add	r7, sp, #0
  402efe:	4603      	mov	r3, r0
  402f00:	6039      	str	r1, [r7, #0]
  402f02:	80fb      	strh	r3, [r7, #6]
  402f04:	4613      	mov	r3, r2
  402f06:	717b      	strb	r3, [r7, #5]
	switch (power) {
  402f08:	797b      	ldrb	r3, [r7, #5]
  402f0a:	3b05      	subs	r3, #5
  402f0c:	2b04      	cmp	r3, #4
  402f0e:	d852      	bhi.n	402fb6 <_get_cycles_for_us_internal+0xbe>
  402f10:	a201      	add	r2, pc, #4	; (adr r2, 402f18 <_get_cycles_for_us_internal+0x20>)
  402f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f16:	bf00      	nop
  402f18:	00402f97 	.word	0x00402f97
  402f1c:	00402f79 	.word	0x00402f79
  402f20:	00402f5d 	.word	0x00402f5d
  402f24:	00402f3f 	.word	0x00402f3f
  402f28:	00402f2d 	.word	0x00402f2d
	case 9:
		return (us * (freq / 1000000));
  402f2c:	88fb      	ldrh	r3, [r7, #6]
  402f2e:	683a      	ldr	r2, [r7, #0]
  402f30:	4929      	ldr	r1, [pc, #164]	; (402fd8 <_get_cycles_for_us_internal+0xe0>)
  402f32:	fba1 1202 	umull	r1, r2, r1, r2
  402f36:	0c92      	lsrs	r2, r2, #18
  402f38:	fb02 f303 	mul.w	r3, r2, r3
  402f3c:	e045      	b.n	402fca <_get_cycles_for_us_internal+0xd2>
	case 8:
		return (us * (freq / 100000) + 9) / 10;
  402f3e:	88fb      	ldrh	r3, [r7, #6]
  402f40:	683a      	ldr	r2, [r7, #0]
  402f42:	0952      	lsrs	r2, r2, #5
  402f44:	4925      	ldr	r1, [pc, #148]	; (402fdc <_get_cycles_for_us_internal+0xe4>)
  402f46:	fba1 1202 	umull	r1, r2, r1, r2
  402f4a:	09d2      	lsrs	r2, r2, #7
  402f4c:	fb02 f303 	mul.w	r3, r2, r3
  402f50:	3309      	adds	r3, #9
  402f52:	4a23      	ldr	r2, [pc, #140]	; (402fe0 <_get_cycles_for_us_internal+0xe8>)
  402f54:	fba2 2303 	umull	r2, r3, r2, r3
  402f58:	08db      	lsrs	r3, r3, #3
  402f5a:	e036      	b.n	402fca <_get_cycles_for_us_internal+0xd2>
	case 7:
		return (us * (freq / 10000) + 99) / 100;
  402f5c:	88fb      	ldrh	r3, [r7, #6]
  402f5e:	683a      	ldr	r2, [r7, #0]
  402f60:	4920      	ldr	r1, [pc, #128]	; (402fe4 <_get_cycles_for_us_internal+0xec>)
  402f62:	fba1 1202 	umull	r1, r2, r1, r2
  402f66:	0b52      	lsrs	r2, r2, #13
  402f68:	fb02 f303 	mul.w	r3, r2, r3
  402f6c:	3363      	adds	r3, #99	; 0x63
  402f6e:	4a1e      	ldr	r2, [pc, #120]	; (402fe8 <_get_cycles_for_us_internal+0xf0>)
  402f70:	fba2 2303 	umull	r2, r3, r2, r3
  402f74:	095b      	lsrs	r3, r3, #5
  402f76:	e028      	b.n	402fca <_get_cycles_for_us_internal+0xd2>
	case 6:
		return (us * (freq / 1000) + 999) / 1000;
  402f78:	88fb      	ldrh	r3, [r7, #6]
  402f7a:	683a      	ldr	r2, [r7, #0]
  402f7c:	491b      	ldr	r1, [pc, #108]	; (402fec <_get_cycles_for_us_internal+0xf4>)
  402f7e:	fba1 1202 	umull	r1, r2, r1, r2
  402f82:	0992      	lsrs	r2, r2, #6
  402f84:	fb02 f303 	mul.w	r3, r2, r3
  402f88:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  402f8c:	4a17      	ldr	r2, [pc, #92]	; (402fec <_get_cycles_for_us_internal+0xf4>)
  402f8e:	fba2 2303 	umull	r2, r3, r2, r3
  402f92:	099b      	lsrs	r3, r3, #6
  402f94:	e019      	b.n	402fca <_get_cycles_for_us_internal+0xd2>
	case 5:
		return (us * (freq / 100) + 9999) / 10000;
  402f96:	88fb      	ldrh	r3, [r7, #6]
  402f98:	683a      	ldr	r2, [r7, #0]
  402f9a:	4913      	ldr	r1, [pc, #76]	; (402fe8 <_get_cycles_for_us_internal+0xf0>)
  402f9c:	fba1 1202 	umull	r1, r2, r1, r2
  402fa0:	0952      	lsrs	r2, r2, #5
  402fa2:	fb02 f203 	mul.w	r2, r2, r3
  402fa6:	f242 730f 	movw	r3, #9999	; 0x270f
  402faa:	4413      	add	r3, r2
  402fac:	4a0d      	ldr	r2, [pc, #52]	; (402fe4 <_get_cycles_for_us_internal+0xec>)
  402fae:	fba2 2303 	umull	r2, r3, r2, r3
  402fb2:	0b5b      	lsrs	r3, r3, #13
  402fb4:	e009      	b.n	402fca <_get_cycles_for_us_internal+0xd2>
	default:
		return (us * freq + 999999) / 1000000;
  402fb6:	88fb      	ldrh	r3, [r7, #6]
  402fb8:	683a      	ldr	r2, [r7, #0]
  402fba:	fb02 f203 	mul.w	r2, r2, r3
  402fbe:	4b0c      	ldr	r3, [pc, #48]	; (402ff0 <_get_cycles_for_us_internal+0xf8>)
  402fc0:	4413      	add	r3, r2
  402fc2:	4a05      	ldr	r2, [pc, #20]	; (402fd8 <_get_cycles_for_us_internal+0xe0>)
  402fc4:	fba2 2303 	umull	r2, r3, r2, r3
  402fc8:	0c9b      	lsrs	r3, r3, #18
	}
}
  402fca:	4618      	mov	r0, r3
  402fcc:	370c      	adds	r7, #12
  402fce:	46bd      	mov	sp, r7
  402fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fd4:	4770      	bx	lr
  402fd6:	bf00      	nop
  402fd8:	431bde83 	.word	0x431bde83
  402fdc:	0a7c5ac5 	.word	0x0a7c5ac5
  402fe0:	cccccccd 	.word	0xcccccccd
  402fe4:	d1b71759 	.word	0xd1b71759
  402fe8:	51eb851f 	.word	0x51eb851f
  402fec:	10624dd3 	.word	0x10624dd3
  402ff0:	000f423f 	.word	0x000f423f

00402ff4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
  402ff4:	b580      	push	{r7, lr}
  402ff6:	b082      	sub	sp, #8
  402ff8:	af00      	add	r7, sp, #0
  402ffa:	4603      	mov	r3, r0
  402ffc:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  402ffe:	88fb      	ldrh	r3, [r7, #6]
  403000:	2209      	movs	r2, #9
  403002:	4904      	ldr	r1, [pc, #16]	; (403014 <_get_cycles_for_us+0x20>)
  403004:	4618      	mov	r0, r3
  403006:	4b04      	ldr	r3, [pc, #16]	; (403018 <_get_cycles_for_us+0x24>)
  403008:	4798      	blx	r3
  40300a:	4603      	mov	r3, r0
}
  40300c:	4618      	mov	r0, r3
  40300e:	3708      	adds	r7, #8
  403010:	46bd      	mov	sp, r7
  403012:	bd80      	pop	{r7, pc}
  403014:	11e1a300 	.word	0x11e1a300
  403018:	00402ef9 	.word	0x00402ef9

0040301c <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
  40301c:	b480      	push	{r7}
  40301e:	b083      	sub	sp, #12
  403020:	af00      	add	r7, sp, #0
  403022:	4603      	mov	r3, r0
  403024:	6039      	str	r1, [r7, #0]
  403026:	80fb      	strh	r3, [r7, #6]
  403028:	4613      	mov	r3, r2
  40302a:	717b      	strb	r3, [r7, #5]
	switch (power) {
  40302c:	797b      	ldrb	r3, [r7, #5]
  40302e:	3b05      	subs	r3, #5
  403030:	2b04      	cmp	r3, #4
  403032:	d84b      	bhi.n	4030cc <_get_cycles_for_ms_internal+0xb0>
  403034:	a201      	add	r2, pc, #4	; (adr r2, 40303c <_get_cycles_for_ms_internal+0x20>)
  403036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40303a:	bf00      	nop
  40303c:	004030b1 	.word	0x004030b1
  403040:	0040309f 	.word	0x0040309f
  403044:	00403085 	.word	0x00403085
  403048:	0040306b 	.word	0x0040306b
  40304c:	00403051 	.word	0x00403051
	case 9:
		return (ms * (freq / 1000000) * 1000);
  403050:	88fb      	ldrh	r3, [r7, #6]
  403052:	683a      	ldr	r2, [r7, #0]
  403054:	4925      	ldr	r1, [pc, #148]	; (4030ec <_get_cycles_for_ms_internal+0xd0>)
  403056:	fba1 1202 	umull	r1, r2, r1, r2
  40305a:	0c92      	lsrs	r2, r2, #18
  40305c:	fb02 f303 	mul.w	r3, r2, r3
  403060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403064:	fb02 f303 	mul.w	r3, r2, r3
  403068:	e03a      	b.n	4030e0 <_get_cycles_for_ms_internal+0xc4>
	case 8:
		return (ms * (freq / 100000) * 100);
  40306a:	88fb      	ldrh	r3, [r7, #6]
  40306c:	683a      	ldr	r2, [r7, #0]
  40306e:	0952      	lsrs	r2, r2, #5
  403070:	491f      	ldr	r1, [pc, #124]	; (4030f0 <_get_cycles_for_ms_internal+0xd4>)
  403072:	fba1 1202 	umull	r1, r2, r1, r2
  403076:	09d2      	lsrs	r2, r2, #7
  403078:	fb02 f303 	mul.w	r3, r2, r3
  40307c:	2264      	movs	r2, #100	; 0x64
  40307e:	fb02 f303 	mul.w	r3, r2, r3
  403082:	e02d      	b.n	4030e0 <_get_cycles_for_ms_internal+0xc4>
	case 7:
		return (ms * (freq / 10000) * 10);
  403084:	88fb      	ldrh	r3, [r7, #6]
  403086:	683a      	ldr	r2, [r7, #0]
  403088:	491a      	ldr	r1, [pc, #104]	; (4030f4 <_get_cycles_for_ms_internal+0xd8>)
  40308a:	fba1 1202 	umull	r1, r2, r1, r2
  40308e:	0b52      	lsrs	r2, r2, #13
  403090:	fb02 f203 	mul.w	r2, r2, r3
  403094:	4613      	mov	r3, r2
  403096:	009b      	lsls	r3, r3, #2
  403098:	4413      	add	r3, r2
  40309a:	005b      	lsls	r3, r3, #1
  40309c:	e020      	b.n	4030e0 <_get_cycles_for_ms_internal+0xc4>
	case 6:
		return (ms * (freq / 1000));
  40309e:	88fb      	ldrh	r3, [r7, #6]
  4030a0:	683a      	ldr	r2, [r7, #0]
  4030a2:	4915      	ldr	r1, [pc, #84]	; (4030f8 <_get_cycles_for_ms_internal+0xdc>)
  4030a4:	fba1 1202 	umull	r1, r2, r1, r2
  4030a8:	0992      	lsrs	r2, r2, #6
  4030aa:	fb02 f303 	mul.w	r3, r2, r3
  4030ae:	e017      	b.n	4030e0 <_get_cycles_for_ms_internal+0xc4>
	case 5:
		return (ms * (freq / 100) + 9) / 10;
  4030b0:	88fb      	ldrh	r3, [r7, #6]
  4030b2:	683a      	ldr	r2, [r7, #0]
  4030b4:	4911      	ldr	r1, [pc, #68]	; (4030fc <_get_cycles_for_ms_internal+0xe0>)
  4030b6:	fba1 1202 	umull	r1, r2, r1, r2
  4030ba:	0952      	lsrs	r2, r2, #5
  4030bc:	fb02 f303 	mul.w	r3, r2, r3
  4030c0:	3309      	adds	r3, #9
  4030c2:	4a0f      	ldr	r2, [pc, #60]	; (403100 <_get_cycles_for_ms_internal+0xe4>)
  4030c4:	fba2 2303 	umull	r2, r3, r2, r3
  4030c8:	08db      	lsrs	r3, r3, #3
  4030ca:	e009      	b.n	4030e0 <_get_cycles_for_ms_internal+0xc4>
	default:
		return (ms * (freq / 1) + 999) / 1000;
  4030cc:	88fb      	ldrh	r3, [r7, #6]
  4030ce:	683a      	ldr	r2, [r7, #0]
  4030d0:	fb02 f303 	mul.w	r3, r2, r3
  4030d4:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  4030d8:	4a07      	ldr	r2, [pc, #28]	; (4030f8 <_get_cycles_for_ms_internal+0xdc>)
  4030da:	fba2 2303 	umull	r2, r3, r2, r3
  4030de:	099b      	lsrs	r3, r3, #6
	}
}
  4030e0:	4618      	mov	r0, r3
  4030e2:	370c      	adds	r7, #12
  4030e4:	46bd      	mov	sp, r7
  4030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ea:	4770      	bx	lr
  4030ec:	431bde83 	.word	0x431bde83
  4030f0:	0a7c5ac5 	.word	0x0a7c5ac5
  4030f4:	d1b71759 	.word	0xd1b71759
  4030f8:	10624dd3 	.word	0x10624dd3
  4030fc:	51eb851f 	.word	0x51eb851f
  403100:	cccccccd 	.word	0xcccccccd

00403104 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
  403104:	b580      	push	{r7, lr}
  403106:	b082      	sub	sp, #8
  403108:	af00      	add	r7, sp, #0
  40310a:	4603      	mov	r3, r0
  40310c:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  40310e:	88fb      	ldrh	r3, [r7, #6]
  403110:	2209      	movs	r2, #9
  403112:	4904      	ldr	r1, [pc, #16]	; (403124 <_get_cycles_for_ms+0x20>)
  403114:	4618      	mov	r0, r3
  403116:	4b04      	ldr	r3, [pc, #16]	; (403128 <_get_cycles_for_ms+0x24>)
  403118:	4798      	blx	r3
  40311a:	4603      	mov	r3, r0
}
  40311c:	4618      	mov	r0, r3
  40311e:	3708      	adds	r7, #8
  403120:	46bd      	mov	sp, r7
  403122:	bd80      	pop	{r7, pc}
  403124:	11e1a300 	.word	0x11e1a300
  403128:	0040301d 	.word	0x0040301d

0040312c <_delay_cycles>:
 * \note In theory, a single loop runs take 2 cycles or more. But we find it
 * really only needs 1 cycle through debugging.
 *
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
  40312c:	b480      	push	{r7}
  40312e:	b083      	sub	sp, #12
  403130:	af00      	add	r7, sp, #0
  403132:	6078      	str	r0, [r7, #4]
  403134:	6039      	str	r1, [r7, #0]

00403136 <__delay>:
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  403136:	3901      	subs	r1, #1
  403138:	d8fd      	bhi.n	403136 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
  40313a:	bf00      	nop
  40313c:	370c      	adds	r7, #12
  40313e:	46bd      	mov	sp, r7
  403140:	f85d 7b04 	ldr.w	r7, [sp], #4
  403144:	4770      	bx	lr

00403146 <hri_efc_write_EEFC_FMR_FWS_bf>:
	tmp = (tmp & EEFC_FMR_FWS(mask)) >> EEFC_FMR_FWS_Pos;
	return tmp;
}

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
  403146:	b480      	push	{r7}
  403148:	b085      	sub	sp, #20
  40314a:	af00      	add	r7, sp, #0
  40314c:	6078      	str	r0, [r7, #4]
  40314e:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  403150:	687b      	ldr	r3, [r7, #4]
  403152:	681b      	ldr	r3, [r3, #0]
  403154:	60fb      	str	r3, [r7, #12]
	tmp &= ~EEFC_FMR_FWS_Msk;
  403156:	68fb      	ldr	r3, [r7, #12]
  403158:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  40315c:	60fb      	str	r3, [r7, #12]
	tmp |= EEFC_FMR_FWS(data);
  40315e:	683b      	ldr	r3, [r7, #0]
  403160:	021b      	lsls	r3, r3, #8
  403162:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  403166:	68fa      	ldr	r2, [r7, #12]
  403168:	4313      	orrs	r3, r2
  40316a:	60fb      	str	r3, [r7, #12]
	((Efc *)hw)->EEFC_FMR = tmp;
  40316c:	687b      	ldr	r3, [r7, #4]
  40316e:	68fa      	ldr	r2, [r7, #12]
  403170:	601a      	str	r2, [r3, #0]
	EFC_CRITICAL_SECTION_LEAVE();
}
  403172:	bf00      	nop
  403174:	3714      	adds	r7, #20
  403176:	46bd      	mov	sp, r7
  403178:	f85d 7b04 	ldr.w	r7, [sp], #4
  40317c:	4770      	bx	lr

0040317e <hri_pmc_set_PCSR0_reg>:
{
  40317e:	b480      	push	{r7}
  403180:	b083      	sub	sp, #12
  403182:	af00      	add	r7, sp, #0
  403184:	6078      	str	r0, [r7, #4]
  403186:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  403188:	687b      	ldr	r3, [r7, #4]
  40318a:	683a      	ldr	r2, [r7, #0]
  40318c:	611a      	str	r2, [r3, #16]
}
  40318e:	bf00      	nop
  403190:	370c      	adds	r7, #12
  403192:	46bd      	mov	sp, r7
  403194:	f85d 7b04 	ldr.w	r7, [sp], #4
  403198:	4770      	bx	lr

0040319a <hri_pmc_get_PCSR0_reg>:
{
  40319a:	b480      	push	{r7}
  40319c:	b085      	sub	sp, #20
  40319e:	af00      	add	r7, sp, #0
  4031a0:	6078      	str	r0, [r7, #4]
  4031a2:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4031a4:	687b      	ldr	r3, [r7, #4]
  4031a6:	699b      	ldr	r3, [r3, #24]
  4031a8:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4031aa:	68fa      	ldr	r2, [r7, #12]
  4031ac:	683b      	ldr	r3, [r7, #0]
  4031ae:	4013      	ands	r3, r2
  4031b0:	60fb      	str	r3, [r7, #12]
	return tmp;
  4031b2:	68fb      	ldr	r3, [r7, #12]
}
  4031b4:	4618      	mov	r0, r3
  4031b6:	3714      	adds	r7, #20
  4031b8:	46bd      	mov	sp, r7
  4031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031be:	4770      	bx	lr

004031c0 <hri_pmc_set_PCSR1_reg>:
{
  4031c0:	b480      	push	{r7}
  4031c2:	b083      	sub	sp, #12
  4031c4:	af00      	add	r7, sp, #0
  4031c6:	6078      	str	r0, [r7, #4]
  4031c8:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  4031ca:	687b      	ldr	r3, [r7, #4]
  4031cc:	683a      	ldr	r2, [r7, #0]
  4031ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  4031d2:	bf00      	nop
  4031d4:	370c      	adds	r7, #12
  4031d6:	46bd      	mov	sp, r7
  4031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031dc:	4770      	bx	lr

004031de <hri_pmc_get_PCSR1_reg>:
{
  4031de:	b480      	push	{r7}
  4031e0:	b085      	sub	sp, #20
  4031e2:	af00      	add	r7, sp, #0
  4031e4:	6078      	str	r0, [r7, #4]
  4031e6:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4031e8:	687b      	ldr	r3, [r7, #4]
  4031ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4031ee:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4031f0:	68fa      	ldr	r2, [r7, #12]
  4031f2:	683b      	ldr	r3, [r7, #0]
  4031f4:	4013      	ands	r3, r2
  4031f6:	60fb      	str	r3, [r7, #12]
	return tmp;
  4031f8:	68fb      	ldr	r3, [r7, #12]
}
  4031fa:	4618      	mov	r0, r3
  4031fc:	3714      	adds	r7, #20
  4031fe:	46bd      	mov	sp, r7
  403200:	f85d 7b04 	ldr.w	r7, [sp], #4
  403204:	4770      	bx	lr

00403206 <hri_pmc_write_PCR_reg>:
{
  403206:	b480      	push	{r7}
  403208:	b083      	sub	sp, #12
  40320a:	af00      	add	r7, sp, #0
  40320c:	6078      	str	r0, [r7, #4]
  40320e:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCR = data;
  403210:	687b      	ldr	r3, [r7, #4]
  403212:	683a      	ldr	r2, [r7, #0]
  403214:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
  403218:	bf00      	nop
  40321a:	370c      	adds	r7, #12
  40321c:	46bd      	mov	sp, r7
  40321e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403222:	4770      	bx	lr

00403224 <hri_pmc_read_PCR_reg>:
{
  403224:	b480      	push	{r7}
  403226:	b083      	sub	sp, #12
  403228:	af00      	add	r7, sp, #0
  40322a:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  40322c:	687b      	ldr	r3, [r7, #4]
  40322e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  403232:	4618      	mov	r0, r3
  403234:	370c      	adds	r7, #12
  403236:	46bd      	mov	sp, r7
  403238:	f85d 7b04 	ldr.w	r7, [sp], #4
  40323c:	4770      	bx	lr
	...

00403240 <_pmc_enable_periph_clock>:
{
  403240:	b580      	push	{r7, lr}
  403242:	b084      	sub	sp, #16
  403244:	af00      	add	r7, sp, #0
  403246:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  403248:	687b      	ldr	r3, [r7, #4]
  40324a:	2b1f      	cmp	r3, #31
  40324c:	d813      	bhi.n	403276 <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40324e:	2201      	movs	r2, #1
  403250:	687b      	ldr	r3, [r7, #4]
  403252:	fa02 f303 	lsl.w	r3, r2, r3
  403256:	4619      	mov	r1, r3
  403258:	481f      	ldr	r0, [pc, #124]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  40325a:	4b20      	ldr	r3, [pc, #128]	; (4032dc <_pmc_enable_periph_clock+0x9c>)
  40325c:	4798      	blx	r3
  40325e:	4603      	mov	r3, r0
  403260:	2b00      	cmp	r3, #0
  403262:	d135      	bne.n	4032d0 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  403264:	2201      	movs	r2, #1
  403266:	687b      	ldr	r3, [r7, #4]
  403268:	fa02 f303 	lsl.w	r3, r2, r3
  40326c:	4619      	mov	r1, r3
  40326e:	481a      	ldr	r0, [pc, #104]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  403270:	4b1b      	ldr	r3, [pc, #108]	; (4032e0 <_pmc_enable_periph_clock+0xa0>)
  403272:	4798      	blx	r3
}
  403274:	e02c      	b.n	4032d0 <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  403276:	687b      	ldr	r3, [r7, #4]
  403278:	2b3f      	cmp	r3, #63	; 0x3f
  40327a:	d816      	bhi.n	4032aa <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  40327c:	687b      	ldr	r3, [r7, #4]
  40327e:	3b20      	subs	r3, #32
  403280:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  403282:	2201      	movs	r2, #1
  403284:	687b      	ldr	r3, [r7, #4]
  403286:	fa02 f303 	lsl.w	r3, r2, r3
  40328a:	4619      	mov	r1, r3
  40328c:	4812      	ldr	r0, [pc, #72]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  40328e:	4b15      	ldr	r3, [pc, #84]	; (4032e4 <_pmc_enable_periph_clock+0xa4>)
  403290:	4798      	blx	r3
  403292:	4603      	mov	r3, r0
  403294:	2b00      	cmp	r3, #0
  403296:	d11b      	bne.n	4032d0 <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  403298:	2201      	movs	r2, #1
  40329a:	687b      	ldr	r3, [r7, #4]
  40329c:	fa02 f303 	lsl.w	r3, r2, r3
  4032a0:	4619      	mov	r1, r3
  4032a2:	480d      	ldr	r0, [pc, #52]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  4032a4:	4b10      	ldr	r3, [pc, #64]	; (4032e8 <_pmc_enable_periph_clock+0xa8>)
  4032a6:	4798      	blx	r3
}
  4032a8:	e012      	b.n	4032d0 <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  4032aa:	687b      	ldr	r3, [r7, #4]
  4032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4032b0:	4619      	mov	r1, r3
  4032b2:	4809      	ldr	r0, [pc, #36]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  4032b4:	4b0d      	ldr	r3, [pc, #52]	; (4032ec <_pmc_enable_periph_clock+0xac>)
  4032b6:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  4032b8:	4807      	ldr	r0, [pc, #28]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  4032ba:	4b0d      	ldr	r3, [pc, #52]	; (4032f0 <_pmc_enable_periph_clock+0xb0>)
  4032bc:	4798      	blx	r3
  4032be:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  4032c0:	68fb      	ldr	r3, [r7, #12]
  4032c2:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  4032c6:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  4032c8:	68f9      	ldr	r1, [r7, #12]
  4032ca:	4803      	ldr	r0, [pc, #12]	; (4032d8 <_pmc_enable_periph_clock+0x98>)
  4032cc:	4b07      	ldr	r3, [pc, #28]	; (4032ec <_pmc_enable_periph_clock+0xac>)
  4032ce:	4798      	blx	r3
}
  4032d0:	bf00      	nop
  4032d2:	3710      	adds	r7, #16
  4032d4:	46bd      	mov	sp, r7
  4032d6:	bd80      	pop	{r7, pc}
  4032d8:	400e0600 	.word	0x400e0600
  4032dc:	0040319b 	.word	0x0040319b
  4032e0:	0040317f 	.word	0x0040317f
  4032e4:	004031df 	.word	0x004031df
  4032e8:	004031c1 	.word	0x004031c1
  4032ec:	00403207 	.word	0x00403207
  4032f0:	00403225 	.word	0x00403225

004032f4 <_fpu_enable>:

/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
  4032f4:	b580      	push	{r7, lr}
  4032f6:	b082      	sub	sp, #8
  4032f8:	af00      	add	r7, sp, #0
	CRITICAL_SECTION_ENTER()
  4032fa:	1d3b      	adds	r3, r7, #4
  4032fc:	4618      	mov	r0, r3
  4032fe:	4b0b      	ldr	r3, [pc, #44]	; (40332c <_fpu_enable+0x38>)
  403300:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  403302:	4a0b      	ldr	r2, [pc, #44]	; (403330 <_fpu_enable+0x3c>)
  403304:	4b0a      	ldr	r3, [pc, #40]	; (403330 <_fpu_enable+0x3c>)
  403306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  40330a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40330e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  403312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403316:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  40331a:	1d3b      	adds	r3, r7, #4
  40331c:	4618      	mov	r0, r3
  40331e:	4b05      	ldr	r3, [pc, #20]	; (403334 <_fpu_enable+0x40>)
  403320:	4798      	blx	r3
}
  403322:	bf00      	nop
  403324:	3708      	adds	r7, #8
  403326:	46bd      	mov	sp, r7
  403328:	bd80      	pop	{r7, pc}
  40332a:	bf00      	nop
  40332c:	00401d19 	.word	0x00401d19
  403330:	e000ed00 	.word	0xe000ed00
  403334:	00401d3f 	.word	0x00401d3f

00403338 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  403338:	b580      	push	{r7, lr}
  40333a:	af00      	add	r7, sp, #0
	_fpu_enable();
  40333c:	4b07      	ldr	r3, [pc, #28]	; (40335c <_init_chip+0x24>)
  40333e:	4798      	blx	r3
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);
  403340:	2105      	movs	r1, #5
  403342:	4807      	ldr	r0, [pc, #28]	; (403360 <_init_chip+0x28>)
  403344:	4b07      	ldr	r3, [pc, #28]	; (403364 <_init_chip+0x2c>)
  403346:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_XDMAC);
  403348:	203a      	movs	r0, #58	; 0x3a
  40334a:	4b07      	ldr	r3, [pc, #28]	; (403368 <_init_chip+0x30>)
  40334c:	4798      	blx	r3
	_dma_init();
  40334e:	4b07      	ldr	r3, [pc, #28]	; (40336c <_init_chip+0x34>)
  403350:	4798      	blx	r3

	_pmc_init();
  403352:	4b07      	ldr	r3, [pc, #28]	; (403370 <_init_chip+0x38>)
  403354:	4798      	blx	r3
}
  403356:	bf00      	nop
  403358:	bd80      	pop	{r7, pc}
  40335a:	bf00      	nop
  40335c:	004032f5 	.word	0x004032f5
  403360:	400e0c00 	.word	0x400e0c00
  403364:	00403147 	.word	0x00403147
  403368:	00403241 	.word	0x00403241
  40336c:	004074bd 	.word	0x004074bd
  403370:	00403f51 	.word	0x00403f51

00403374 <hri_dacc_write_CHDR_reg>:
{
	((Dacc *)hw)->DACC_CHDR = mask;
}

static inline void hri_dacc_write_CHDR_reg(const void *const hw, hri_dacc_chsr_reg_t data)
{
  403374:	b480      	push	{r7}
  403376:	b083      	sub	sp, #12
  403378:	af00      	add	r7, sp, #0
  40337a:	6078      	str	r0, [r7, #4]
  40337c:	6039      	str	r1, [r7, #0]
	((Dacc *)hw)->DACC_CHDR = data;
  40337e:	687b      	ldr	r3, [r7, #4]
  403380:	683a      	ldr	r2, [r7, #0]
  403382:	615a      	str	r2, [r3, #20]
}
  403384:	bf00      	nop
  403386:	370c      	adds	r7, #12
  403388:	46bd      	mov	sp, r7
  40338a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40338e:	4770      	bx	lr

00403390 <hri_dacc_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_MR_reg(const void *const hw, hri_dacc_mr_reg_t data)
{
  403390:	b480      	push	{r7}
  403392:	b083      	sub	sp, #12
  403394:	af00      	add	r7, sp, #0
  403396:	6078      	str	r0, [r7, #4]
  403398:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_MR = data;
  40339a:	687b      	ldr	r3, [r7, #4]
  40339c:	683a      	ldr	r2, [r7, #0]
  40339e:	605a      	str	r2, [r3, #4]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033a0:	bf00      	nop
  4033a2:	370c      	adds	r7, #12
  4033a4:	46bd      	mov	sp, r7
  4033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033aa:	4770      	bx	lr

004033ac <hri_dacc_write_TRIGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_TRIGR_reg(const void *const hw, hri_dacc_trigr_reg_t data)
{
  4033ac:	b480      	push	{r7}
  4033ae:	b083      	sub	sp, #12
  4033b0:	af00      	add	r7, sp, #0
  4033b2:	6078      	str	r0, [r7, #4]
  4033b4:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_TRIGR = data;
  4033b6:	687b      	ldr	r3, [r7, #4]
  4033b8:	683a      	ldr	r2, [r7, #0]
  4033ba:	609a      	str	r2, [r3, #8]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033bc:	bf00      	nop
  4033be:	370c      	adds	r7, #12
  4033c0:	46bd      	mov	sp, r7
  4033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033c6:	4770      	bx	lr

004033c8 <hri_dacc_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_WPMR_reg(const void *const hw, hri_dacc_wpmr_reg_t data)
{
  4033c8:	b480      	push	{r7}
  4033ca:	b083      	sub	sp, #12
  4033cc:	af00      	add	r7, sp, #0
  4033ce:	6078      	str	r0, [r7, #4]
  4033d0:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_WPMR = data;
  4033d2:	687b      	ldr	r3, [r7, #4]
  4033d4:	683a      	ldr	r2, [r7, #0]
  4033d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033da:	bf00      	nop
  4033dc:	370c      	adds	r7, #12
  4033de:	46bd      	mov	sp, r7
  4033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033e4:	4770      	bx	lr

004033e6 <hri_dacc_write_CR_reg>:
{
	return ((Dacc *)hw)->DACC_WPMR;
}

static inline void hri_dacc_write_CR_reg(const void *const hw, hri_dacc_cr_reg_t data)
{
  4033e6:	b480      	push	{r7}
  4033e8:	b083      	sub	sp, #12
  4033ea:	af00      	add	r7, sp, #0
  4033ec:	6078      	str	r0, [r7, #4]
  4033ee:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_CR = data;
  4033f0:	687b      	ldr	r3, [r7, #4]
  4033f2:	683a      	ldr	r2, [r7, #0]
  4033f4:	601a      	str	r2, [r3, #0]
	DACC_CRITICAL_SECTION_LEAVE();
}
  4033f6:	bf00      	nop
  4033f8:	370c      	adds	r7, #12
  4033fa:	46bd      	mov	sp, r7
  4033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  403400:	4770      	bx	lr
	...

00403404 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
  403404:	b580      	push	{r7, lr}
  403406:	b082      	sub	sp, #8
  403408:	af00      	add	r7, sp, #0
  40340a:	6078      	str	r0, [r7, #4]
  40340c:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  40340e:	687b      	ldr	r3, [r7, #4]
  403410:	2b00      	cmp	r3, #0
  403412:	bf14      	ite	ne
  403414:	2301      	movne	r3, #1
  403416:	2300      	moveq	r3, #0
  403418:	b2db      	uxtb	r3, r3
  40341a:	2251      	movs	r2, #81	; 0x51
  40341c:	4908      	ldr	r1, [pc, #32]	; (403440 <_dac_sync_init+0x3c>)
  40341e:	4618      	mov	r0, r3
  403420:	4b08      	ldr	r3, [pc, #32]	; (403444 <_dac_sync_init+0x40>)
  403422:	4798      	blx	r3

	device->hw = hw;
  403424:	687b      	ldr	r3, [r7, #4]
  403426:	683a      	ldr	r2, [r7, #0]
  403428:	601a      	str	r2, [r3, #0]

	return _dac_init(device->hw);
  40342a:	687b      	ldr	r3, [r7, #4]
  40342c:	681b      	ldr	r3, [r3, #0]
  40342e:	4618      	mov	r0, r3
  403430:	4b05      	ldr	r3, [pc, #20]	; (403448 <_dac_sync_init+0x44>)
  403432:	4798      	blx	r3
  403434:	4603      	mov	r3, r0
}
  403436:	4618      	mov	r0, r3
  403438:	3708      	adds	r7, #8
  40343a:	46bd      	mov	sp, r7
  40343c:	bd80      	pop	{r7, pc}
  40343e:	bf00      	nop
  403440:	00407bcc 	.word	0x00407bcc
  403444:	00402d41 	.word	0x00402d41
  403448:	0040344d 	.word	0x0040344d

0040344c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
  40344c:	b580      	push	{r7, lr}
  40344e:	b082      	sub	sp, #8
  403450:	af00      	add	r7, sp, #0
  403452:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403454:	687b      	ldr	r3, [r7, #4]
  403456:	2b00      	cmp	r3, #0
  403458:	bf14      	ite	ne
  40345a:	2301      	movne	r3, #1
  40345c:	2300      	moveq	r3, #0
  40345e:	b2db      	uxtb	r3, r3
  403460:	22f5      	movs	r2, #245	; 0xf5
  403462:	4910      	ldr	r1, [pc, #64]	; (4034a4 <_dac_init+0x58>)
  403464:	4618      	mov	r0, r3
  403466:	4b10      	ldr	r3, [pc, #64]	; (4034a8 <_dac_init+0x5c>)
  403468:	4798      	blx	r3

	hri_dacc_write_CR_reg(hw, DACC_CR_SWRST);
  40346a:	2101      	movs	r1, #1
  40346c:	6878      	ldr	r0, [r7, #4]
  40346e:	4b0f      	ldr	r3, [pc, #60]	; (4034ac <_dac_init+0x60>)
  403470:	4798      	blx	r3
	hri_dacc_write_CHDR_reg(hw, DACC_CHDR_Msk);
  403472:	2103      	movs	r1, #3
  403474:	6878      	ldr	r0, [r7, #4]
  403476:	4b0e      	ldr	r3, [pc, #56]	; (4034b0 <_dac_init+0x64>)
  403478:	4798      	blx	r3
	_dac_write_protection_disable(hw);
  40347a:	6878      	ldr	r0, [r7, #4]
  40347c:	4b0d      	ldr	r3, [pc, #52]	; (4034b4 <_dac_init+0x68>)
  40347e:	4798      	blx	r3
	hri_dacc_write_MR_reg(hw, _dac.mr);
  403480:	4b0d      	ldr	r3, [pc, #52]	; (4034b8 <_dac_init+0x6c>)
  403482:	681b      	ldr	r3, [r3, #0]
  403484:	4619      	mov	r1, r3
  403486:	6878      	ldr	r0, [r7, #4]
  403488:	4b0c      	ldr	r3, [pc, #48]	; (4034bc <_dac_init+0x70>)
  40348a:	4798      	blx	r3
	hri_dacc_write_TRIGR_reg(hw, _dac.trigr);
  40348c:	4b0a      	ldr	r3, [pc, #40]	; (4034b8 <_dac_init+0x6c>)
  40348e:	685b      	ldr	r3, [r3, #4]
  403490:	4619      	mov	r1, r3
  403492:	6878      	ldr	r0, [r7, #4]
  403494:	4b0a      	ldr	r3, [pc, #40]	; (4034c0 <_dac_init+0x74>)
  403496:	4798      	blx	r3

	return ERR_NONE;
  403498:	2300      	movs	r3, #0
}
  40349a:	4618      	mov	r0, r3
  40349c:	3708      	adds	r7, #8
  40349e:	46bd      	mov	sp, r7
  4034a0:	bd80      	pop	{r7, pc}
  4034a2:	bf00      	nop
  4034a4:	00407bcc 	.word	0x00407bcc
  4034a8:	00402d41 	.word	0x00402d41
  4034ac:	004033e7 	.word	0x004033e7
  4034b0:	00403375 	.word	0x00403375
  4034b4:	004034c5 	.word	0x004034c5
  4034b8:	20400000 	.word	0x20400000
  4034bc:	00403391 	.word	0x00403391
  4034c0:	004033ad 	.word	0x004033ad

004034c4 <_dac_write_protection_disable>:
 * \internal Disable DAC write protection
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _dac_write_protection_disable(void *const hw)
{
  4034c4:	b580      	push	{r7, lr}
  4034c6:	b082      	sub	sp, #8
  4034c8:	af00      	add	r7, sp, #0
  4034ca:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4034cc:	687b      	ldr	r3, [r7, #4]
  4034ce:	2b00      	cmp	r3, #0
  4034d0:	bf14      	ite	ne
  4034d2:	2301      	movne	r3, #1
  4034d4:	2300      	moveq	r3, #0
  4034d6:	b2db      	uxtb	r3, r3
  4034d8:	f44f 72a7 	mov.w	r2, #334	; 0x14e
  4034dc:	4905      	ldr	r1, [pc, #20]	; (4034f4 <_dac_write_protection_disable+0x30>)
  4034de:	4618      	mov	r0, r3
  4034e0:	4b05      	ldr	r3, [pc, #20]	; (4034f8 <_dac_write_protection_disable+0x34>)
  4034e2:	4798      	blx	r3
	hri_dacc_write_WPMR_reg(hw, (hri_dacc_wpmr_reg_t)DACC_WPMR_WPKEY_PASSWD);
  4034e4:	4905      	ldr	r1, [pc, #20]	; (4034fc <_dac_write_protection_disable+0x38>)
  4034e6:	6878      	ldr	r0, [r7, #4]
  4034e8:	4b05      	ldr	r3, [pc, #20]	; (403500 <_dac_write_protection_disable+0x3c>)
  4034ea:	4798      	blx	r3
}
  4034ec:	bf00      	nop
  4034ee:	3708      	adds	r7, #8
  4034f0:	46bd      	mov	sp, r7
  4034f2:	bd80      	pop	{r7, pc}
  4034f4:	00407bcc 	.word	0x00407bcc
  4034f8:	00402d41 	.word	0x00402d41
  4034fc:	44414300 	.word	0x44414300
  403500:	004033c9 	.word	0x004033c9

00403504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  403504:	b480      	push	{r7}
  403506:	b083      	sub	sp, #12
  403508:	af00      	add	r7, sp, #0
  40350a:	4603      	mov	r3, r0
  40350c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403512:	2b00      	cmp	r3, #0
  403514:	db0b      	blt.n	40352e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403516:	4909      	ldr	r1, [pc, #36]	; (40353c <__NVIC_EnableIRQ+0x38>)
  403518:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40351c:	095b      	lsrs	r3, r3, #5
  40351e:	79fa      	ldrb	r2, [r7, #7]
  403520:	f002 021f 	and.w	r2, r2, #31
  403524:	2001      	movs	r0, #1
  403526:	fa00 f202 	lsl.w	r2, r0, r2
  40352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40352e:	bf00      	nop
  403530:	370c      	adds	r7, #12
  403532:	46bd      	mov	sp, r7
  403534:	f85d 7b04 	ldr.w	r7, [sp], #4
  403538:	4770      	bx	lr
  40353a:	bf00      	nop
  40353c:	e000e100 	.word	0xe000e100

00403540 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  403540:	b480      	push	{r7}
  403542:	b083      	sub	sp, #12
  403544:	af00      	add	r7, sp, #0
  403546:	4603      	mov	r3, r0
  403548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40354e:	2b00      	cmp	r3, #0
  403550:	db10      	blt.n	403574 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403552:	490b      	ldr	r1, [pc, #44]	; (403580 <__NVIC_DisableIRQ+0x40>)
  403554:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403558:	095b      	lsrs	r3, r3, #5
  40355a:	79fa      	ldrb	r2, [r7, #7]
  40355c:	f002 021f 	and.w	r2, r2, #31
  403560:	2001      	movs	r0, #1
  403562:	fa00 f202 	lsl.w	r2, r0, r2
  403566:	3320      	adds	r3, #32
  403568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  40356c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  403570:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  403574:	bf00      	nop
  403576:	370c      	adds	r7, #12
  403578:	46bd      	mov	sp, r7
  40357a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40357e:	4770      	bx	lr
  403580:	e000e100 	.word	0xe000e100

00403584 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  403584:	b480      	push	{r7}
  403586:	b083      	sub	sp, #12
  403588:	af00      	add	r7, sp, #0
  40358a:	4603      	mov	r3, r0
  40358c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403592:	2b00      	cmp	r3, #0
  403594:	db0c      	blt.n	4035b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403596:	4909      	ldr	r1, [pc, #36]	; (4035bc <__NVIC_ClearPendingIRQ+0x38>)
  403598:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40359c:	095b      	lsrs	r3, r3, #5
  40359e:	79fa      	ldrb	r2, [r7, #7]
  4035a0:	f002 021f 	and.w	r2, r2, #31
  4035a4:	2001      	movs	r0, #1
  4035a6:	fa00 f202 	lsl.w	r2, r0, r2
  4035aa:	3360      	adds	r3, #96	; 0x60
  4035ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  4035b0:	bf00      	nop
  4035b2:	370c      	adds	r7, #12
  4035b4:	46bd      	mov	sp, r7
  4035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035ba:	4770      	bx	lr
  4035bc:	e000e100 	.word	0xe000e100

004035c0 <hri_pio_read_ISR_reg>:
{
  4035c0:	b480      	push	{r7}
  4035c2:	b083      	sub	sp, #12
  4035c4:	af00      	add	r7, sp, #0
  4035c6:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_ISR;
  4035c8:	687b      	ldr	r3, [r7, #4]
  4035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4035cc:	4618      	mov	r0, r3
  4035ce:	370c      	adds	r7, #12
  4035d0:	46bd      	mov	sp, r7
  4035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035d6:	4770      	bx	lr

004035d8 <hri_pio_set_IMR_reg>:
{
  4035d8:	b480      	push	{r7}
  4035da:	b083      	sub	sp, #12
  4035dc:	af00      	add	r7, sp, #0
  4035de:	6078      	str	r0, [r7, #4]
  4035e0:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IER = mask;
  4035e2:	687b      	ldr	r3, [r7, #4]
  4035e4:	683a      	ldr	r2, [r7, #0]
  4035e6:	641a      	str	r2, [r3, #64]	; 0x40
}
  4035e8:	bf00      	nop
  4035ea:	370c      	adds	r7, #12
  4035ec:	46bd      	mov	sp, r7
  4035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035f2:	4770      	bx	lr

004035f4 <hri_pio_read_IMR_reg>:
{
  4035f4:	b480      	push	{r7}
  4035f6:	b083      	sub	sp, #12
  4035f8:	af00      	add	r7, sp, #0
  4035fa:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_IMR;
  4035fc:	687b      	ldr	r3, [r7, #4]
  4035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  403600:	4618      	mov	r0, r3
  403602:	370c      	adds	r7, #12
  403604:	46bd      	mov	sp, r7
  403606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40360a:	4770      	bx	lr

0040360c <hri_pio_clear_IMR_reg>:
{
  40360c:	b480      	push	{r7}
  40360e:	b083      	sub	sp, #12
  403610:	af00      	add	r7, sp, #0
  403612:	6078      	str	r0, [r7, #4]
  403614:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_IDR = mask;
  403616:	687b      	ldr	r3, [r7, #4]
  403618:	683a      	ldr	r2, [r7, #0]
  40361a:	645a      	str	r2, [r3, #68]	; 0x44
}
  40361c:	bf00      	nop
  40361e:	370c      	adds	r7, #12
  403620:	46bd      	mov	sp, r7
  403622:	f85d 7b04 	ldr.w	r7, [sp], #4
  403626:	4770      	bx	lr

00403628 <hri_pio_set_AIMMR_reg>:
{
  403628:	b480      	push	{r7}
  40362a:	b083      	sub	sp, #12
  40362c:	af00      	add	r7, sp, #0
  40362e:	6078      	str	r0, [r7, #4]
  403630:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_AIMER = mask;
  403632:	687b      	ldr	r3, [r7, #4]
  403634:	683a      	ldr	r2, [r7, #0]
  403636:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
  40363a:	bf00      	nop
  40363c:	370c      	adds	r7, #12
  40363e:	46bd      	mov	sp, r7
  403640:	f85d 7b04 	ldr.w	r7, [sp], #4
  403644:	4770      	bx	lr

00403646 <hri_pio_set_ELSR_reg>:
{
  403646:	b480      	push	{r7}
  403648:	b083      	sub	sp, #12
  40364a:	af00      	add	r7, sp, #0
  40364c:	6078      	str	r0, [r7, #4]
  40364e:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_LSR = mask;
  403650:	687b      	ldr	r3, [r7, #4]
  403652:	683a      	ldr	r2, [r7, #0]
  403654:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  403658:	bf00      	nop
  40365a:	370c      	adds	r7, #12
  40365c:	46bd      	mov	sp, r7
  40365e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403662:	4770      	bx	lr

00403664 <hri_pio_clear_ELSR_reg>:
{
  403664:	b480      	push	{r7}
  403666:	b083      	sub	sp, #12
  403668:	af00      	add	r7, sp, #0
  40366a:	6078      	str	r0, [r7, #4]
  40366c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ESR = mask;
  40366e:	687b      	ldr	r3, [r7, #4]
  403670:	683a      	ldr	r2, [r7, #0]
  403672:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
  403676:	bf00      	nop
  403678:	370c      	adds	r7, #12
  40367a:	46bd      	mov	sp, r7
  40367c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403680:	4770      	bx	lr

00403682 <hri_pio_set_FRLHSR_reg>:
{
  403682:	b480      	push	{r7}
  403684:	b083      	sub	sp, #12
  403686:	af00      	add	r7, sp, #0
  403688:	6078      	str	r0, [r7, #4]
  40368a:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_REHLSR = mask;
  40368c:	687b      	ldr	r3, [r7, #4]
  40368e:	683a      	ldr	r2, [r7, #0]
  403690:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
  403694:	bf00      	nop
  403696:	370c      	adds	r7, #12
  403698:	46bd      	mov	sp, r7
  40369a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40369e:	4770      	bx	lr

004036a0 <hri_pio_clear_FRLHSR_reg>:
{
  4036a0:	b480      	push	{r7}
  4036a2:	b083      	sub	sp, #12
  4036a4:	af00      	add	r7, sp, #0
  4036a6:	6078      	str	r0, [r7, #4]
  4036a8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_FELLSR = mask;
  4036aa:	687b      	ldr	r3, [r7, #4]
  4036ac:	683a      	ldr	r2, [r7, #0]
  4036ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
  4036b2:	bf00      	nop
  4036b4:	370c      	adds	r7, #12
  4036b6:	46bd      	mov	sp, r7
  4036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036bc:	4770      	bx	lr

004036be <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  4036be:	b480      	push	{r7}
  4036c0:	b087      	sub	sp, #28
  4036c2:	af00      	add	r7, sp, #0
  4036c4:	6078      	str	r0, [r7, #4]
  4036c6:	460b      	mov	r3, r1
  4036c8:	70fb      	strb	r3, [r7, #3]
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  4036ca:	2300      	movs	r3, #0
  4036cc:	617b      	str	r3, [r7, #20]
  4036ce:	e01e      	b.n	40370e <_ffs+0x50>
		bit = 1;
  4036d0:	2301      	movs	r3, #1
  4036d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4036d4:	2300      	movs	r3, #0
  4036d6:	613b      	str	r3, [r7, #16]
  4036d8:	e013      	b.n	403702 <_ffs+0x44>
			if (v[i] & bit) {
  4036da:	697b      	ldr	r3, [r7, #20]
  4036dc:	009b      	lsls	r3, r3, #2
  4036de:	687a      	ldr	r2, [r7, #4]
  4036e0:	4413      	add	r3, r2
  4036e2:	681a      	ldr	r2, [r3, #0]
  4036e4:	68fb      	ldr	r3, [r7, #12]
  4036e6:	4013      	ands	r3, r2
  4036e8:	2b00      	cmp	r3, #0
  4036ea:	d004      	beq.n	4036f6 <_ffs+0x38>
				return i * 32 + j;
  4036ec:	697b      	ldr	r3, [r7, #20]
  4036ee:	015a      	lsls	r2, r3, #5
  4036f0:	693b      	ldr	r3, [r7, #16]
  4036f2:	4413      	add	r3, r2
  4036f4:	e011      	b.n	40371a <_ffs+0x5c>
			}
			bit <<= 1;
  4036f6:	68fb      	ldr	r3, [r7, #12]
  4036f8:	005b      	lsls	r3, r3, #1
  4036fa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  4036fc:	693b      	ldr	r3, [r7, #16]
  4036fe:	3301      	adds	r3, #1
  403700:	613b      	str	r3, [r7, #16]
  403702:	693b      	ldr	r3, [r7, #16]
  403704:	2b1f      	cmp	r3, #31
  403706:	d9e8      	bls.n	4036da <_ffs+0x1c>
	for (i = 0; i < len; i++) {
  403708:	697b      	ldr	r3, [r7, #20]
  40370a:	3301      	adds	r3, #1
  40370c:	617b      	str	r3, [r7, #20]
  40370e:	78fa      	ldrb	r2, [r7, #3]
  403710:	697b      	ldr	r3, [r7, #20]
  403712:	429a      	cmp	r2, r3
  403714:	d8dc      	bhi.n	4036d0 <_ffs+0x12>
		}
	}

	return -1;
  403716:	f04f 33ff 	mov.w	r3, #4294967295
}
  40371a:	4618      	mov	r0, r3
  40371c:	371c      	adds	r7, #28
  40371e:	46bd      	mov	sp, r7
  403720:	f85d 7b04 	ldr.w	r7, [sp], #4
  403724:	4770      	bx	lr
	...

00403728 <_get_hardware_instance>:
 * \param[in] pin The PIO pin
 *
 * \return The instance of PIO hardware
 */
static inline void *_get_hardware_instance(const uint8_t pin)
{
  403728:	b580      	push	{r7, lr}
  40372a:	b082      	sub	sp, #8
  40372c:	af00      	add	r7, sp, #0
  40372e:	4603      	mov	r3, r0
  403730:	71fb      	strb	r3, [r7, #7]
	ASSERT(pin < 160);
  403732:	79fb      	ldrb	r3, [r7, #7]
  403734:	2b9f      	cmp	r3, #159	; 0x9f
  403736:	bf94      	ite	ls
  403738:	2301      	movls	r3, #1
  40373a:	2300      	movhi	r3, #0
  40373c:	b2db      	uxtb	r3, r3
  40373e:	22c3      	movs	r2, #195	; 0xc3
  403740:	4907      	ldr	r1, [pc, #28]	; (403760 <_get_hardware_instance+0x38>)
  403742:	4618      	mov	r0, r3
  403744:	4b07      	ldr	r3, [pc, #28]	; (403764 <_get_hardware_instance+0x3c>)
  403746:	4798      	blx	r3

	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + (pin >> 5) * 0x200);
  403748:	79fb      	ldrb	r3, [r7, #7]
  40374a:	095b      	lsrs	r3, r3, #5
  40374c:	b2db      	uxtb	r3, r3
  40374e:	025b      	lsls	r3, r3, #9
  403750:	461a      	mov	r2, r3
  403752:	4b05      	ldr	r3, [pc, #20]	; (403768 <_get_hardware_instance+0x40>)
  403754:	4413      	add	r3, r2
}
  403756:	4618      	mov	r0, r3
  403758:	3708      	adds	r7, #8
  40375a:	46bd      	mov	sp, r7
  40375c:	bd80      	pop	{r7, pc}
  40375e:	bf00      	nop
  403760:	00407c24 	.word	0x00407c24
  403764:	00402d41 	.word	0x00402d41
  403768:	400e0e00 	.word	0x400e0e00

0040376c <_pio_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of hardware instance
 */
static uint8_t _pio_get_hardware_index(const void *const hw)
{
  40376c:	b580      	push	{r7, lr}
  40376e:	b082      	sub	sp, #8
  403770:	af00      	add	r7, sp, #0
  403772:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403774:	687b      	ldr	r3, [r7, #4]
  403776:	2b00      	cmp	r3, #0
  403778:	bf14      	ite	ne
  40377a:	2301      	movne	r3, #1
  40377c:	2300      	moveq	r3, #0
  40377e:	b2db      	uxtb	r3, r3
  403780:	22d2      	movs	r2, #210	; 0xd2
  403782:	4906      	ldr	r1, [pc, #24]	; (40379c <_pio_get_hardware_index+0x30>)
  403784:	4618      	mov	r0, r3
  403786:	4b06      	ldr	r3, [pc, #24]	; (4037a0 <_pio_get_hardware_index+0x34>)
  403788:	4798      	blx	r3

	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  40378a:	687a      	ldr	r2, [r7, #4]
  40378c:	4b05      	ldr	r3, [pc, #20]	; (4037a4 <_pio_get_hardware_index+0x38>)
  40378e:	4413      	add	r3, r2
  403790:	0a5b      	lsrs	r3, r3, #9
  403792:	b2db      	uxtb	r3, r3
}
  403794:	4618      	mov	r0, r3
  403796:	3708      	adds	r7, #8
  403798:	46bd      	mov	sp, r7
  40379a:	bd80      	pop	{r7, pc}
  40379c:	00407c24 	.word	0x00407c24
  4037a0:	00402d41 	.word	0x00402d41
  4037a4:	bff1f200 	.word	0xbff1f200

004037a8 <_pio_get_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given PIO hardware instance
 */
static int8_t _pio_get_index(const void *const hw)
{
  4037a8:	b580      	push	{r7, lr}
  4037aa:	b084      	sub	sp, #16
  4037ac:	af00      	add	r7, sp, #0
  4037ae:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4037b0:	687b      	ldr	r3, [r7, #4]
  4037b2:	2b00      	cmp	r3, #0
  4037b4:	bf14      	ite	ne
  4037b6:	2301      	movne	r3, #1
  4037b8:	2300      	moveq	r3, #0
  4037ba:	b2db      	uxtb	r3, r3
  4037bc:	22e0      	movs	r2, #224	; 0xe0
  4037be:	4913      	ldr	r1, [pc, #76]	; (40380c <_pio_get_index+0x64>)
  4037c0:	4618      	mov	r0, r3
  4037c2:	4b13      	ldr	r3, [pc, #76]	; (403810 <_pio_get_index+0x68>)
  4037c4:	4798      	blx	r3

	uint8_t offset = _pio_get_hardware_index(hw);
  4037c6:	6878      	ldr	r0, [r7, #4]
  4037c8:	4b12      	ldr	r3, [pc, #72]	; (403814 <_pio_get_index+0x6c>)
  4037ca:	4798      	blx	r3
  4037cc:	4603      	mov	r3, r0
  4037ce:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4037d0:	2300      	movs	r3, #0
  4037d2:	73fb      	strb	r3, [r7, #15]
  4037d4:	e010      	b.n	4037f8 <_pio_get_index+0x50>
		if (_ext_irq[i].number == offset) {
  4037d6:	7bfa      	ldrb	r2, [r7, #15]
  4037d8:	490f      	ldr	r1, [pc, #60]	; (403818 <_pio_get_index+0x70>)
  4037da:	4613      	mov	r3, r2
  4037dc:	00db      	lsls	r3, r3, #3
  4037de:	1a9b      	subs	r3, r3, r2
  4037e0:	009b      	lsls	r3, r3, #2
  4037e2:	440b      	add	r3, r1
  4037e4:	781b      	ldrb	r3, [r3, #0]
  4037e6:	7bba      	ldrb	r2, [r7, #14]
  4037e8:	429a      	cmp	r2, r3
  4037ea:	d102      	bne.n	4037f2 <_pio_get_index+0x4a>
			return i;
  4037ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4037f0:	e007      	b.n	403802 <_pio_get_index+0x5a>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  4037f2:	7bfb      	ldrb	r3, [r7, #15]
  4037f4:	3301      	adds	r3, #1
  4037f6:	73fb      	strb	r3, [r7, #15]
  4037f8:	7bfb      	ldrb	r3, [r7, #15]
  4037fa:	2b01      	cmp	r3, #1
  4037fc:	d9eb      	bls.n	4037d6 <_pio_get_index+0x2e>
		}
	}

	return ERR_INVALID_DATA;
  4037fe:	f04f 33ff 	mov.w	r3, #4294967295
}
  403802:	4618      	mov	r0, r3
  403804:	3710      	adds	r7, #16
  403806:	46bd      	mov	sp, r7
  403808:	bd80      	pop	{r7, pc}
  40380a:	bf00      	nop
  40380c:	00407c24 	.word	0x00407c24
  403810:	00402d41 	.word	0x00402d41
  403814:	0040376d 	.word	0x0040376d
  403818:	00407bec 	.word	0x00407bec

0040381c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  40381c:	b580      	push	{r7, lr}
  40381e:	b088      	sub	sp, #32
  403820:	af00      	add	r7, sp, #0
	uint32_t flag_total = 0, flags[5] = {
  403822:	2300      	movs	r3, #0
  403824:	61fb      	str	r3, [r7, #28]
  403826:	1d3b      	adds	r3, r7, #4
  403828:	2200      	movs	r2, #0
  40382a:	601a      	str	r2, [r3, #0]
  40382c:	605a      	str	r2, [r3, #4]
  40382e:	609a      	str	r2, [r3, #8]
  403830:	60da      	str	r2, [r3, #12]
  403832:	611a      	str	r2, [r3, #16]
	                             0,
	                         };
	int8_t pos;

	ASSERT(callback);
  403834:	4b46      	ldr	r3, [pc, #280]	; (403950 <_ext_irq_handler+0x134>)
  403836:	681b      	ldr	r3, [r3, #0]
  403838:	2b00      	cmp	r3, #0
  40383a:	bf14      	ite	ne
  40383c:	2301      	movne	r3, #1
  40383e:	2300      	moveq	r3, #0
  403840:	b2db      	uxtb	r3, r3
  403842:	22f8      	movs	r2, #248	; 0xf8
  403844:	4943      	ldr	r1, [pc, #268]	; (403954 <_ext_irq_handler+0x138>)
  403846:	4618      	mov	r0, r3
  403848:	4b43      	ldr	r3, [pc, #268]	; (403958 <_ext_irq_handler+0x13c>)
  40384a:	4798      	blx	r3
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
  40384c:	4843      	ldr	r0, [pc, #268]	; (40395c <_ext_irq_handler+0x140>)
  40384e:	4b44      	ldr	r3, [pc, #272]	; (403960 <_ext_irq_handler+0x144>)
  403850:	4798      	blx	r3
  403852:	4603      	mov	r3, r0
  403854:	60bb      	str	r3, [r7, #8]
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  403856:	4841      	ldr	r0, [pc, #260]	; (40395c <_ext_irq_handler+0x140>)
  403858:	4b42      	ldr	r3, [pc, #264]	; (403964 <_ext_irq_handler+0x148>)
  40385a:	4798      	blx	r3
  40385c:	4602      	mov	r2, r0
  40385e:	68bb      	ldr	r3, [r7, #8]
  403860:	4013      	ands	r3, r2
  403862:	60bb      	str	r3, [r7, #8]
	flag_total |= flags[1];
  403864:	68bb      	ldr	r3, [r7, #8]
  403866:	69fa      	ldr	r2, [r7, #28]
  403868:	4313      	orrs	r3, r2
  40386a:	61fb      	str	r3, [r7, #28]
	flags[2] &= hri_pio_read_IMR_reg(PIOC);
	flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	flags[3] = hri_pio_read_ISR_reg(PIOD);
  40386c:	483e      	ldr	r0, [pc, #248]	; (403968 <_ext_irq_handler+0x14c>)
  40386e:	4b3c      	ldr	r3, [pc, #240]	; (403960 <_ext_irq_handler+0x144>)
  403870:	4798      	blx	r3
  403872:	4603      	mov	r3, r0
  403874:	613b      	str	r3, [r7, #16]
	flags[3] &= hri_pio_read_IMR_reg(PIOD);
  403876:	483c      	ldr	r0, [pc, #240]	; (403968 <_ext_irq_handler+0x14c>)
  403878:	4b3a      	ldr	r3, [pc, #232]	; (403964 <_ext_irq_handler+0x148>)
  40387a:	4798      	blx	r3
  40387c:	4602      	mov	r2, r0
  40387e:	693b      	ldr	r3, [r7, #16]
  403880:	4013      	ands	r3, r2
  403882:	613b      	str	r3, [r7, #16]
	flag_total |= flags[3];
  403884:	693b      	ldr	r3, [r7, #16]
  403886:	69fa      	ldr	r2, [r7, #28]
  403888:	4313      	orrs	r3, r2
  40388a:	61fb      	str	r3, [r7, #28]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  40388c:	e058      	b.n	403940 <_ext_irq_handler+0x124>
		pos = _ffs(flags, 5);
  40388e:	1d3b      	adds	r3, r7, #4
  403890:	2105      	movs	r1, #5
  403892:	4618      	mov	r0, r3
  403894:	4b35      	ldr	r3, [pc, #212]	; (40396c <_ext_irq_handler+0x150>)
  403896:	4798      	blx	r3
  403898:	4603      	mov	r3, r0
  40389a:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  40389c:	e029      	b.n	4038f2 <_ext_irq_handler+0xd6>
			callback(pos);
  40389e:	4b2c      	ldr	r3, [pc, #176]	; (403950 <_ext_irq_handler+0x134>)
  4038a0:	681b      	ldr	r3, [r3, #0]
  4038a2:	f997 201b 	ldrsb.w	r2, [r7, #27]
  4038a6:	4610      	mov	r0, r2
  4038a8:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  4038aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
  4038ae:	115b      	asrs	r3, r3, #5
  4038b0:	b25b      	sxtb	r3, r3
  4038b2:	4618      	mov	r0, r3
  4038b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
  4038b8:	115b      	asrs	r3, r3, #5
  4038ba:	b25b      	sxtb	r3, r3
  4038bc:	009b      	lsls	r3, r3, #2
  4038be:	f107 0220 	add.w	r2, r7, #32
  4038c2:	4413      	add	r3, r2
  4038c4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  4038c8:	7efa      	ldrb	r2, [r7, #27]
  4038ca:	f002 021f 	and.w	r2, r2, #31
  4038ce:	2101      	movs	r1, #1
  4038d0:	fa01 f202 	lsl.w	r2, r1, r2
  4038d4:	43d2      	mvns	r2, r2
  4038d6:	401a      	ands	r2, r3
  4038d8:	0083      	lsls	r3, r0, #2
  4038da:	f107 0120 	add.w	r1, r7, #32
  4038de:	440b      	add	r3, r1
  4038e0:	f843 2c1c 	str.w	r2, [r3, #-28]
			pos = _ffs(flags, 5);
  4038e4:	1d3b      	adds	r3, r7, #4
  4038e6:	2105      	movs	r1, #5
  4038e8:	4618      	mov	r0, r3
  4038ea:	4b20      	ldr	r3, [pc, #128]	; (40396c <_ext_irq_handler+0x150>)
  4038ec:	4798      	blx	r3
  4038ee:	4603      	mov	r3, r0
  4038f0:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  4038f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
  4038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4038fa:	d1d0      	bne.n	40389e <_ext_irq_handler+0x82>
		}
		flag_total = 0;
  4038fc:	2300      	movs	r3, #0
  4038fe:	61fb      	str	r3, [r7, #28]
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
  403900:	4816      	ldr	r0, [pc, #88]	; (40395c <_ext_irq_handler+0x140>)
  403902:	4b17      	ldr	r3, [pc, #92]	; (403960 <_ext_irq_handler+0x144>)
  403904:	4798      	blx	r3
  403906:	4603      	mov	r3, r0
  403908:	60bb      	str	r3, [r7, #8]
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  40390a:	4814      	ldr	r0, [pc, #80]	; (40395c <_ext_irq_handler+0x140>)
  40390c:	4b15      	ldr	r3, [pc, #84]	; (403964 <_ext_irq_handler+0x148>)
  40390e:	4798      	blx	r3
  403910:	4602      	mov	r2, r0
  403912:	68bb      	ldr	r3, [r7, #8]
  403914:	4013      	ands	r3, r2
  403916:	60bb      	str	r3, [r7, #8]
		flag_total |= flags[1];
  403918:	68bb      	ldr	r3, [r7, #8]
  40391a:	69fa      	ldr	r2, [r7, #28]
  40391c:	4313      	orrs	r3, r2
  40391e:	61fb      	str	r3, [r7, #28]
		flags[2] &= hri_pio_read_IMR_reg(PIOC);
		flag_total |= flags[2];
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
		flags[3] = hri_pio_read_ISR_reg(PIOD);
  403920:	4811      	ldr	r0, [pc, #68]	; (403968 <_ext_irq_handler+0x14c>)
  403922:	4b0f      	ldr	r3, [pc, #60]	; (403960 <_ext_irq_handler+0x144>)
  403924:	4798      	blx	r3
  403926:	4603      	mov	r3, r0
  403928:	613b      	str	r3, [r7, #16]
		flags[3] &= hri_pio_read_IMR_reg(PIOD);
  40392a:	480f      	ldr	r0, [pc, #60]	; (403968 <_ext_irq_handler+0x14c>)
  40392c:	4b0d      	ldr	r3, [pc, #52]	; (403964 <_ext_irq_handler+0x148>)
  40392e:	4798      	blx	r3
  403930:	4602      	mov	r2, r0
  403932:	693b      	ldr	r3, [r7, #16]
  403934:	4013      	ands	r3, r2
  403936:	613b      	str	r3, [r7, #16]
		flag_total |= flags[3];
  403938:	693b      	ldr	r3, [r7, #16]
  40393a:	69fa      	ldr	r2, [r7, #28]
  40393c:	4313      	orrs	r3, r2
  40393e:	61fb      	str	r3, [r7, #28]
	while (flag_total) {
  403940:	69fb      	ldr	r3, [r7, #28]
  403942:	2b00      	cmp	r3, #0
  403944:	d1a3      	bne.n	40388e <_ext_irq_handler+0x72>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  403946:	bf00      	nop
  403948:	3720      	adds	r7, #32
  40394a:	46bd      	mov	sp, r7
  40394c:	bd80      	pop	{r7, pc}
  40394e:	bf00      	nop
  403950:	204011c0 	.word	0x204011c0
  403954:	00407c24 	.word	0x00407c24
  403958:	00402d41 	.word	0x00402d41
  40395c:	400e1000 	.word	0x400e1000
  403960:	004035c1 	.word	0x004035c1
  403964:	004035f5 	.word	0x004035f5
  403968:	400e1400 	.word	0x400e1400
  40396c:	004036bf 	.word	0x004036bf

00403970 <PIOB_Handler>:

void PIOB_Handler(void)
{
  403970:	b580      	push	{r7, lr}
  403972:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  403974:	4b01      	ldr	r3, [pc, #4]	; (40397c <PIOB_Handler+0xc>)
  403976:	4798      	blx	r3
}
  403978:	bf00      	nop
  40397a:	bd80      	pop	{r7, pc}
  40397c:	0040381d 	.word	0x0040381d

00403980 <PIOD_Handler>:

void PIOD_Handler(void)
{
  403980:	b580      	push	{r7, lr}
  403982:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  403984:	4b01      	ldr	r3, [pc, #4]	; (40398c <PIOD_Handler+0xc>)
  403986:	4798      	blx	r3
}
  403988:	bf00      	nop
  40398a:	bd80      	pop	{r7, pc}
  40398c:	0040381d 	.word	0x0040381d

00403990 <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  403990:	b580      	push	{r7, lr}
  403992:	b084      	sub	sp, #16
  403994:	af00      	add	r7, sp, #0
  403996:	6078      	str	r0, [r7, #4]
	int8_t i;

	ASSERT(hw);
  403998:	687b      	ldr	r3, [r7, #4]
  40399a:	2b00      	cmp	r3, #0
  40399c:	bf14      	ite	ne
  40399e:	2301      	movne	r3, #1
  4039a0:	2300      	moveq	r3, #0
  4039a2:	b2db      	uxtb	r3, r3
  4039a4:	f240 1259 	movw	r2, #345	; 0x159
  4039a8:	4938      	ldr	r1, [pc, #224]	; (403a8c <_pio_init+0xfc>)
  4039aa:	4618      	mov	r0, r3
  4039ac:	4b38      	ldr	r3, [pc, #224]	; (403a90 <_pio_init+0x100>)
  4039ae:	4798      	blx	r3

	i = _pio_get_index(hw);
  4039b0:	6878      	ldr	r0, [r7, #4]
  4039b2:	4b38      	ldr	r3, [pc, #224]	; (403a94 <_pio_init+0x104>)
  4039b4:	4798      	blx	r3
  4039b6:	4603      	mov	r3, r0
  4039b8:	73fb      	strb	r3, [r7, #15]
	if (i < 0) {
  4039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4039be:	2b00      	cmp	r3, #0
  4039c0:	da02      	bge.n	4039c8 <_pio_init+0x38>
		return ERR_DENIED;
  4039c2:	f06f 0310 	mvn.w	r3, #16
  4039c6:	e05d      	b.n	403a84 <_pio_init+0xf4>
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4039c8:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4039cc:	4932      	ldr	r1, [pc, #200]	; (403a98 <_pio_init+0x108>)
  4039ce:	4613      	mov	r3, r2
  4039d0:	00db      	lsls	r3, r3, #3
  4039d2:	1a9b      	subs	r3, r3, r2
  4039d4:	009b      	lsls	r3, r3, #2
  4039d6:	440b      	add	r3, r1
  4039d8:	3308      	adds	r3, #8
  4039da:	681b      	ldr	r3, [r3, #0]
  4039dc:	4619      	mov	r1, r3
  4039de:	6878      	ldr	r0, [r7, #4]
  4039e0:	4b2e      	ldr	r3, [pc, #184]	; (403a9c <_pio_init+0x10c>)
  4039e2:	4798      	blx	r3
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4039e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4039e8:	492b      	ldr	r1, [pc, #172]	; (403a98 <_pio_init+0x108>)
  4039ea:	4613      	mov	r3, r2
  4039ec:	00db      	lsls	r3, r3, #3
  4039ee:	1a9b      	subs	r3, r3, r2
  4039f0:	009b      	lsls	r3, r3, #2
  4039f2:	440b      	add	r3, r1
  4039f4:	330c      	adds	r3, #12
  4039f6:	681b      	ldr	r3, [r3, #0]
  4039f8:	4619      	mov	r1, r3
  4039fa:	6878      	ldr	r0, [r7, #4]
  4039fc:	4b28      	ldr	r3, [pc, #160]	; (403aa0 <_pio_init+0x110>)
  4039fe:	4798      	blx	r3
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  403a00:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403a04:	4924      	ldr	r1, [pc, #144]	; (403a98 <_pio_init+0x108>)
  403a06:	4613      	mov	r3, r2
  403a08:	00db      	lsls	r3, r3, #3
  403a0a:	1a9b      	subs	r3, r3, r2
  403a0c:	009b      	lsls	r3, r3, #2
  403a0e:	440b      	add	r3, r1
  403a10:	3310      	adds	r3, #16
  403a12:	681b      	ldr	r3, [r3, #0]
  403a14:	4619      	mov	r1, r3
  403a16:	6878      	ldr	r0, [r7, #4]
  403a18:	4b22      	ldr	r3, [pc, #136]	; (403aa4 <_pio_init+0x114>)
  403a1a:	4798      	blx	r3
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  403a1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403a20:	491d      	ldr	r1, [pc, #116]	; (403a98 <_pio_init+0x108>)
  403a22:	4613      	mov	r3, r2
  403a24:	00db      	lsls	r3, r3, #3
  403a26:	1a9b      	subs	r3, r3, r2
  403a28:	009b      	lsls	r3, r3, #2
  403a2a:	440b      	add	r3, r1
  403a2c:	3318      	adds	r3, #24
  403a2e:	681b      	ldr	r3, [r3, #0]
  403a30:	4619      	mov	r1, r3
  403a32:	6878      	ldr	r0, [r7, #4]
  403a34:	4b1c      	ldr	r3, [pc, #112]	; (403aa8 <_pio_init+0x118>)
  403a36:	4798      	blx	r3
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  403a38:	f997 200f 	ldrsb.w	r2, [r7, #15]
  403a3c:	4916      	ldr	r1, [pc, #88]	; (403a98 <_pio_init+0x108>)
  403a3e:	4613      	mov	r3, r2
  403a40:	00db      	lsls	r3, r3, #3
  403a42:	1a9b      	subs	r3, r3, r2
  403a44:	009b      	lsls	r3, r3, #2
  403a46:	440b      	add	r3, r1
  403a48:	3314      	adds	r3, #20
  403a4a:	681b      	ldr	r3, [r3, #0]
  403a4c:	4619      	mov	r1, r3
  403a4e:	6878      	ldr	r0, [r7, #4]
  403a50:	4b16      	ldr	r3, [pc, #88]	; (403aac <_pio_init+0x11c>)
  403a52:	4798      	blx	r3

	i = _pio_irq_n[_pio_get_hardware_index(hw)];
  403a54:	6878      	ldr	r0, [r7, #4]
  403a56:	4b16      	ldr	r3, [pc, #88]	; (403ab0 <_pio_init+0x120>)
  403a58:	4798      	blx	r3
  403a5a:	4603      	mov	r3, r0
  403a5c:	461a      	mov	r2, r3
  403a5e:	4b15      	ldr	r3, [pc, #84]	; (403ab4 <_pio_init+0x124>)
  403a60:	5c9b      	ldrb	r3, [r3, r2]
  403a62:	73fb      	strb	r3, [r7, #15]
	NVIC_DisableIRQ((IRQn_Type)i);
  403a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403a68:	4618      	mov	r0, r3
  403a6a:	4b13      	ldr	r3, [pc, #76]	; (403ab8 <_pio_init+0x128>)
  403a6c:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)i);
  403a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403a72:	4618      	mov	r0, r3
  403a74:	4b11      	ldr	r3, [pc, #68]	; (403abc <_pio_init+0x12c>)
  403a76:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)i);
  403a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
  403a7c:	4618      	mov	r0, r3
  403a7e:	4b10      	ldr	r3, [pc, #64]	; (403ac0 <_pio_init+0x130>)
  403a80:	4798      	blx	r3

	return ERR_NONE;
  403a82:	2300      	movs	r3, #0
}
  403a84:	4618      	mov	r0, r3
  403a86:	3710      	adds	r7, #16
  403a88:	46bd      	mov	sp, r7
  403a8a:	bd80      	pop	{r7, pc}
  403a8c:	00407c24 	.word	0x00407c24
  403a90:	00402d41 	.word	0x00402d41
  403a94:	004037a9 	.word	0x004037a9
  403a98:	00407bec 	.word	0x00407bec
  403a9c:	00403629 	.word	0x00403629
  403aa0:	00403665 	.word	0x00403665
  403aa4:	00403647 	.word	0x00403647
  403aa8:	004036a1 	.word	0x004036a1
  403aac:	00403683 	.word	0x00403683
  403ab0:	0040376d 	.word	0x0040376d
  403ab4:	00407be4 	.word	0x00407be4
  403ab8:	00403541 	.word	0x00403541
  403abc:	00403585 	.word	0x00403585
  403ac0:	00403505 	.word	0x00403505

00403ac4 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  403ac4:	b580      	push	{r7, lr}
  403ac6:	b082      	sub	sp, #8
  403ac8:	af00      	add	r7, sp, #0
  403aca:	6078      	str	r0, [r7, #4]
#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  403acc:	4806      	ldr	r0, [pc, #24]	; (403ae8 <_ext_irq_init+0x24>)
  403ace:	4b07      	ldr	r3, [pc, #28]	; (403aec <_ext_irq_init+0x28>)
  403ad0:	4798      	blx	r3
#if CONF_EXTIRQ_2_ENABLE == 1 && defined(PIOC)
	_pio_init(PIOC);
#endif

#if CONF_EXTIRQ_3_ENABLE == 1 && defined(PIOD)
	_pio_init(PIOD);
  403ad2:	4807      	ldr	r0, [pc, #28]	; (403af0 <_ext_irq_init+0x2c>)
  403ad4:	4b05      	ldr	r3, [pc, #20]	; (403aec <_ext_irq_init+0x28>)
  403ad6:	4798      	blx	r3

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  403ad8:	4a06      	ldr	r2, [pc, #24]	; (403af4 <_ext_irq_init+0x30>)
  403ada:	687b      	ldr	r3, [r7, #4]
  403adc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
  403ade:	2300      	movs	r3, #0
}
  403ae0:	4618      	mov	r0, r3
  403ae2:	3708      	adds	r7, #8
  403ae4:	46bd      	mov	sp, r7
  403ae6:	bd80      	pop	{r7, pc}
  403ae8:	400e1000 	.word	0x400e1000
  403aec:	00403991 	.word	0x00403991
  403af0:	400e1400 	.word	0x400e1400
  403af4:	204011c0 	.word	0x204011c0

00403af8 <_ext_irq_enable>:

	return ERR_NONE;
}

int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
  403af8:	b580      	push	{r7, lr}
  403afa:	b084      	sub	sp, #16
  403afc:	af00      	add	r7, sp, #0
  403afe:	6078      	str	r0, [r7, #4]
  403b00:	460b      	mov	r3, r1
  403b02:	70fb      	strb	r3, [r7, #3]
	void *   hw   = PIOA;
  403b04:	4b19      	ldr	r3, [pc, #100]	; (403b6c <_ext_irq_enable+0x74>)
  403b06:	60fb      	str	r3, [r7, #12]
	uint32_t temp = 0;
  403b08:	2300      	movs	r3, #0
  403b0a:	60bb      	str	r3, [r7, #8]

	ASSERT(pin < 160);
  403b0c:	687b      	ldr	r3, [r7, #4]
  403b0e:	2b9f      	cmp	r3, #159	; 0x9f
  403b10:	bf94      	ite	ls
  403b12:	2301      	movls	r3, #1
  403b14:	2300      	movhi	r3, #0
  403b16:	b2db      	uxtb	r3, r3
  403b18:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
  403b1c:	4914      	ldr	r1, [pc, #80]	; (403b70 <_ext_irq_enable+0x78>)
  403b1e:	4618      	mov	r0, r3
  403b20:	4b14      	ldr	r3, [pc, #80]	; (403b74 <_ext_irq_enable+0x7c>)
  403b22:	4798      	blx	r3

	hw   = _get_hardware_instance(pin);
  403b24:	687b      	ldr	r3, [r7, #4]
  403b26:	b2db      	uxtb	r3, r3
  403b28:	4618      	mov	r0, r3
  403b2a:	4b13      	ldr	r3, [pc, #76]	; (403b78 <_ext_irq_enable+0x80>)
  403b2c:	4798      	blx	r3
  403b2e:	60f8      	str	r0, [r7, #12]
	temp = pin & 31;
  403b30:	687b      	ldr	r3, [r7, #4]
  403b32:	f003 031f 	and.w	r3, r3, #31
  403b36:	60bb      	str	r3, [r7, #8]

	if (enable) {
  403b38:	78fb      	ldrb	r3, [r7, #3]
  403b3a:	2b00      	cmp	r3, #0
  403b3c:	d008      	beq.n	403b50 <_ext_irq_enable+0x58>
		hri_pio_set_IMR_reg(hw, 1ul << temp);
  403b3e:	2201      	movs	r2, #1
  403b40:	68bb      	ldr	r3, [r7, #8]
  403b42:	fa02 f303 	lsl.w	r3, r2, r3
  403b46:	4619      	mov	r1, r3
  403b48:	68f8      	ldr	r0, [r7, #12]
  403b4a:	4b0c      	ldr	r3, [pc, #48]	; (403b7c <_ext_irq_enable+0x84>)
  403b4c:	4798      	blx	r3
  403b4e:	e007      	b.n	403b60 <_ext_irq_enable+0x68>
	} else {
		hri_pio_clear_IMR_reg(hw, 1ul << temp);
  403b50:	2201      	movs	r2, #1
  403b52:	68bb      	ldr	r3, [r7, #8]
  403b54:	fa02 f303 	lsl.w	r3, r2, r3
  403b58:	4619      	mov	r1, r3
  403b5a:	68f8      	ldr	r0, [r7, #12]
  403b5c:	4b08      	ldr	r3, [pc, #32]	; (403b80 <_ext_irq_enable+0x88>)
  403b5e:	4798      	blx	r3
	}

	return ERR_NONE;
  403b60:	2300      	movs	r3, #0
}
  403b62:	4618      	mov	r0, r3
  403b64:	3710      	adds	r7, #16
  403b66:	46bd      	mov	sp, r7
  403b68:	bd80      	pop	{r7, pc}
  403b6a:	bf00      	nop
  403b6c:	400e0e00 	.word	0x400e0e00
  403b70:	00407c24 	.word	0x00407c24
  403b74:	00402d41 	.word	0x00402d41
  403b78:	00403729 	.word	0x00403729
  403b7c:	004035d9 	.word	0x004035d9
  403b80:	0040360d 	.word	0x0040360d

00403b84 <hri_pmc_get_SR_MOSCXTS_bit>:
{
  403b84:	b480      	push	{r7}
  403b86:	b083      	sub	sp, #12
  403b88:	af00      	add	r7, sp, #0
  403b8a:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  403b8c:	687b      	ldr	r3, [r7, #4]
  403b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403b90:	f003 0301 	and.w	r3, r3, #1
  403b94:	2b00      	cmp	r3, #0
  403b96:	bf14      	ite	ne
  403b98:	2301      	movne	r3, #1
  403b9a:	2300      	moveq	r3, #0
  403b9c:	b2db      	uxtb	r3, r3
}
  403b9e:	4618      	mov	r0, r3
  403ba0:	370c      	adds	r7, #12
  403ba2:	46bd      	mov	sp, r7
  403ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ba8:	4770      	bx	lr

00403baa <hri_pmc_get_SR_LOCKA_bit>:
{
  403baa:	b480      	push	{r7}
  403bac:	b083      	sub	sp, #12
  403bae:	af00      	add	r7, sp, #0
  403bb0:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  403bb2:	687b      	ldr	r3, [r7, #4]
  403bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403bb6:	f003 0302 	and.w	r3, r3, #2
  403bba:	2b00      	cmp	r3, #0
  403bbc:	bf14      	ite	ne
  403bbe:	2301      	movne	r3, #1
  403bc0:	2300      	moveq	r3, #0
  403bc2:	b2db      	uxtb	r3, r3
}
  403bc4:	4618      	mov	r0, r3
  403bc6:	370c      	adds	r7, #12
  403bc8:	46bd      	mov	sp, r7
  403bca:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bce:	4770      	bx	lr

00403bd0 <hri_pmc_get_SR_MCKRDY_bit>:
{
  403bd0:	b480      	push	{r7}
  403bd2:	b083      	sub	sp, #12
  403bd4:	af00      	add	r7, sp, #0
  403bd6:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  403bd8:	687b      	ldr	r3, [r7, #4]
  403bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403bdc:	f003 0308 	and.w	r3, r3, #8
  403be0:	2b00      	cmp	r3, #0
  403be2:	bf14      	ite	ne
  403be4:	2301      	movne	r3, #1
  403be6:	2300      	moveq	r3, #0
  403be8:	b2db      	uxtb	r3, r3
}
  403bea:	4618      	mov	r0, r3
  403bec:	370c      	adds	r7, #12
  403bee:	46bd      	mov	sp, r7
  403bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bf4:	4770      	bx	lr

00403bf6 <hri_pmc_get_SR_LOCKU_bit>:
{
  403bf6:	b480      	push	{r7}
  403bf8:	b083      	sub	sp, #12
  403bfa:	af00      	add	r7, sp, #0
  403bfc:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  403bfe:	687b      	ldr	r3, [r7, #4]
  403c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
  403c06:	2b00      	cmp	r3, #0
  403c08:	bf14      	ite	ne
  403c0a:	2301      	movne	r3, #1
  403c0c:	2300      	moveq	r3, #0
  403c0e:	b2db      	uxtb	r3, r3
}
  403c10:	4618      	mov	r0, r3
  403c12:	370c      	adds	r7, #12
  403c14:	46bd      	mov	sp, r7
  403c16:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c1a:	4770      	bx	lr

00403c1c <hri_pmc_write_CKGR_UCKR_reg>:
{
  403c1c:	b480      	push	{r7}
  403c1e:	b083      	sub	sp, #12
  403c20:	af00      	add	r7, sp, #0
  403c22:	6078      	str	r0, [r7, #4]
  403c24:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_UCKR = data;
  403c26:	687b      	ldr	r3, [r7, #4]
  403c28:	683a      	ldr	r2, [r7, #0]
  403c2a:	61da      	str	r2, [r3, #28]
}
  403c2c:	bf00      	nop
  403c2e:	370c      	adds	r7, #12
  403c30:	46bd      	mov	sp, r7
  403c32:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c36:	4770      	bx	lr

00403c38 <hri_pmc_set_CKGR_MOR_reg>:
{
  403c38:	b480      	push	{r7}
  403c3a:	b083      	sub	sp, #12
  403c3c:	af00      	add	r7, sp, #0
  403c3e:	6078      	str	r0, [r7, #4]
  403c40:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR |= mask;
  403c42:	687b      	ldr	r3, [r7, #4]
  403c44:	6a1a      	ldr	r2, [r3, #32]
  403c46:	683b      	ldr	r3, [r7, #0]
  403c48:	431a      	orrs	r2, r3
  403c4a:	687b      	ldr	r3, [r7, #4]
  403c4c:	621a      	str	r2, [r3, #32]
}
  403c4e:	bf00      	nop
  403c50:	370c      	adds	r7, #12
  403c52:	46bd      	mov	sp, r7
  403c54:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c58:	4770      	bx	lr

00403c5a <hri_pmc_write_CKGR_MOR_reg>:
{
  403c5a:	b480      	push	{r7}
  403c5c:	b083      	sub	sp, #12
  403c5e:	af00      	add	r7, sp, #0
  403c60:	6078      	str	r0, [r7, #4]
  403c62:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR = data;
  403c64:	687b      	ldr	r3, [r7, #4]
  403c66:	683a      	ldr	r2, [r7, #0]
  403c68:	621a      	str	r2, [r3, #32]
}
  403c6a:	bf00      	nop
  403c6c:	370c      	adds	r7, #12
  403c6e:	46bd      	mov	sp, r7
  403c70:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c74:	4770      	bx	lr

00403c76 <hri_pmc_read_CKGR_MOR_reg>:
{
  403c76:	b480      	push	{r7}
  403c78:	b083      	sub	sp, #12
  403c7a:	af00      	add	r7, sp, #0
  403c7c:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->CKGR_MOR;
  403c7e:	687b      	ldr	r3, [r7, #4]
  403c80:	6a1b      	ldr	r3, [r3, #32]
}
  403c82:	4618      	mov	r0, r3
  403c84:	370c      	adds	r7, #12
  403c86:	46bd      	mov	sp, r7
  403c88:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c8c:	4770      	bx	lr
	...

00403c90 <hri_pmc_write_CKGR_PLLAR_MULA_bf>:
{
  403c90:	b480      	push	{r7}
  403c92:	b085      	sub	sp, #20
  403c94:	af00      	add	r7, sp, #0
  403c96:	6078      	str	r0, [r7, #4]
  403c98:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  403c9a:	687b      	ldr	r3, [r7, #4]
  403c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  403c9e:	60fb      	str	r3, [r7, #12]
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  403ca0:	68fa      	ldr	r2, [r7, #12]
  403ca2:	4b09      	ldr	r3, [pc, #36]	; (403cc8 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x38>)
  403ca4:	4013      	ands	r3, r2
  403ca6:	60fb      	str	r3, [r7, #12]
	tmp |= CKGR_PLLAR_MULA(data);
  403ca8:	683b      	ldr	r3, [r7, #0]
  403caa:	041a      	lsls	r2, r3, #16
  403cac:	4b07      	ldr	r3, [pc, #28]	; (403ccc <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x3c>)
  403cae:	4013      	ands	r3, r2
  403cb0:	68fa      	ldr	r2, [r7, #12]
  403cb2:	4313      	orrs	r3, r2
  403cb4:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  403cb6:	687b      	ldr	r3, [r7, #4]
  403cb8:	68fa      	ldr	r2, [r7, #12]
  403cba:	629a      	str	r2, [r3, #40]	; 0x28
}
  403cbc:	bf00      	nop
  403cbe:	3714      	adds	r7, #20
  403cc0:	46bd      	mov	sp, r7
  403cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cc6:	4770      	bx	lr
  403cc8:	f800ffff 	.word	0xf800ffff
  403ccc:	07ff0000 	.word	0x07ff0000

00403cd0 <hri_pmc_write_CKGR_PLLAR_reg>:
{
  403cd0:	b480      	push	{r7}
  403cd2:	b083      	sub	sp, #12
  403cd4:	af00      	add	r7, sp, #0
  403cd6:	6078      	str	r0, [r7, #4]
  403cd8:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_PLLAR = data;
  403cda:	687b      	ldr	r3, [r7, #4]
  403cdc:	683a      	ldr	r2, [r7, #0]
  403cde:	629a      	str	r2, [r3, #40]	; 0x28
}
  403ce0:	bf00      	nop
  403ce2:	370c      	adds	r7, #12
  403ce4:	46bd      	mov	sp, r7
  403ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cea:	4770      	bx	lr

00403cec <hri_pmc_write_MCKR_UPLLDIV2_bit>:
{
  403cec:	b480      	push	{r7}
  403cee:	b085      	sub	sp, #20
  403cf0:	af00      	add	r7, sp, #0
  403cf2:	6078      	str	r0, [r7, #4]
  403cf4:	460b      	mov	r3, r1
  403cf6:	70fb      	strb	r3, [r7, #3]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403cf8:	687b      	ldr	r3, [r7, #4]
  403cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403cfc:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_UPLLDIV2;
  403cfe:	68fb      	ldr	r3, [r7, #12]
  403d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403d04:	60fb      	str	r3, [r7, #12]
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  403d06:	78fb      	ldrb	r3, [r7, #3]
  403d08:	035b      	lsls	r3, r3, #13
  403d0a:	461a      	mov	r2, r3
  403d0c:	68fb      	ldr	r3, [r7, #12]
  403d0e:	4313      	orrs	r3, r2
  403d10:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403d12:	687b      	ldr	r3, [r7, #4]
  403d14:	68fa      	ldr	r2, [r7, #12]
  403d16:	631a      	str	r2, [r3, #48]	; 0x30
}
  403d18:	bf00      	nop
  403d1a:	3714      	adds	r7, #20
  403d1c:	46bd      	mov	sp, r7
  403d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d22:	4770      	bx	lr

00403d24 <hri_pmc_write_MCKR_CSS_bf>:
{
  403d24:	b480      	push	{r7}
  403d26:	b085      	sub	sp, #20
  403d28:	af00      	add	r7, sp, #0
  403d2a:	6078      	str	r0, [r7, #4]
  403d2c:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403d2e:	687b      	ldr	r3, [r7, #4]
  403d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d32:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_CSS_Msk;
  403d34:	68fb      	ldr	r3, [r7, #12]
  403d36:	f023 0303 	bic.w	r3, r3, #3
  403d3a:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_CSS(data);
  403d3c:	683b      	ldr	r3, [r7, #0]
  403d3e:	f003 0303 	and.w	r3, r3, #3
  403d42:	68fa      	ldr	r2, [r7, #12]
  403d44:	4313      	orrs	r3, r2
  403d46:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403d48:	687b      	ldr	r3, [r7, #4]
  403d4a:	68fa      	ldr	r2, [r7, #12]
  403d4c:	631a      	str	r2, [r3, #48]	; 0x30
}
  403d4e:	bf00      	nop
  403d50:	3714      	adds	r7, #20
  403d52:	46bd      	mov	sp, r7
  403d54:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d58:	4770      	bx	lr

00403d5a <hri_pmc_write_MCKR_PRES_bf>:
{
  403d5a:	b480      	push	{r7}
  403d5c:	b085      	sub	sp, #20
  403d5e:	af00      	add	r7, sp, #0
  403d60:	6078      	str	r0, [r7, #4]
  403d62:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403d64:	687b      	ldr	r3, [r7, #4]
  403d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d68:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_PRES_Msk;
  403d6a:	68fb      	ldr	r3, [r7, #12]
  403d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403d70:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_PRES(data);
  403d72:	683b      	ldr	r3, [r7, #0]
  403d74:	011b      	lsls	r3, r3, #4
  403d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403d7a:	68fa      	ldr	r2, [r7, #12]
  403d7c:	4313      	orrs	r3, r2
  403d7e:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403d80:	687b      	ldr	r3, [r7, #4]
  403d82:	68fa      	ldr	r2, [r7, #12]
  403d84:	631a      	str	r2, [r3, #48]	; 0x30
}
  403d86:	bf00      	nop
  403d88:	3714      	adds	r7, #20
  403d8a:	46bd      	mov	sp, r7
  403d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d90:	4770      	bx	lr

00403d92 <hri_pmc_write_MCKR_MDIV_bf>:
{
  403d92:	b480      	push	{r7}
  403d94:	b085      	sub	sp, #20
  403d96:	af00      	add	r7, sp, #0
  403d98:	6078      	str	r0, [r7, #4]
  403d9a:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  403d9c:	687b      	ldr	r3, [r7, #4]
  403d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403da0:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_MDIV_Msk;
  403da2:	68fb      	ldr	r3, [r7, #12]
  403da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  403da8:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_MDIV(data);
  403daa:	683b      	ldr	r3, [r7, #0]
  403dac:	021b      	lsls	r3, r3, #8
  403dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403db2:	68fa      	ldr	r2, [r7, #12]
  403db4:	4313      	orrs	r3, r2
  403db6:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  403db8:	687b      	ldr	r3, [r7, #4]
  403dba:	68fa      	ldr	r2, [r7, #12]
  403dbc:	631a      	str	r2, [r3, #48]	; 0x30
}
  403dbe:	bf00      	nop
  403dc0:	3714      	adds	r7, #20
  403dc2:	46bd      	mov	sp, r7
  403dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dc8:	4770      	bx	lr
	...

00403dcc <_pmc_init_sources>:
 * \brief Initializes clock generators
 *
 * All clock sources are running when this function returns.
 */
static void _pmc_init_sources(void)
{
  403dcc:	b580      	push	{r7, lr}
  403dce:	b082      	sub	sp, #8
  403dd0:	af00      	add	r7, sp, #0
	uint32_t data = 0;
  403dd2:	2300      	movs	r3, #0
  403dd4:	607b      	str	r3, [r7, #4]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  403dd6:	4826      	ldr	r0, [pc, #152]	; (403e70 <_pmc_init_sources+0xa4>)
  403dd8:	4b26      	ldr	r3, [pc, #152]	; (403e74 <_pmc_init_sources+0xa8>)
  403dda:	4798      	blx	r3
  403ddc:	4603      	mov	r3, r0
  403dde:	f023 0302 	bic.w	r3, r3, #2
  403de2:	607b      	str	r3, [r7, #4]
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  403de4:	687a      	ldr	r2, [r7, #4]
  403de6:	4b24      	ldr	r3, [pc, #144]	; (403e78 <_pmc_init_sources+0xac>)
  403de8:	4313      	orrs	r3, r2
  403dea:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
  403dec:	6879      	ldr	r1, [r7, #4]
  403dee:	4820      	ldr	r0, [pc, #128]	; (403e70 <_pmc_init_sources+0xa4>)
  403df0:	4b22      	ldr	r3, [pc, #136]	; (403e7c <_pmc_init_sources+0xb0>)
  403df2:	4798      	blx	r3
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  403df4:	bf00      	nop
  403df6:	481e      	ldr	r0, [pc, #120]	; (403e70 <_pmc_init_sources+0xa4>)
  403df8:	4b21      	ldr	r3, [pc, #132]	; (403e80 <_pmc_init_sources+0xb4>)
  403dfa:	4798      	blx	r3
  403dfc:	4603      	mov	r3, r0
  403dfe:	f083 0301 	eor.w	r3, r3, #1
  403e02:	b2db      	uxtb	r3, r3
  403e04:	2b00      	cmp	r3, #0
  403e06:	d1f6      	bne.n	403df6 <_pmc_init_sources+0x2a>
		/* Wait until the XTAL to stabilize */
	}
	hri_pmc_set_CKGR_MOR_reg(PMC, CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL);
  403e08:	491e      	ldr	r1, [pc, #120]	; (403e84 <_pmc_init_sources+0xb8>)
  403e0a:	4819      	ldr	r0, [pc, #100]	; (403e70 <_pmc_init_sources+0xa4>)
  403e0c:	4b1e      	ldr	r3, [pc, #120]	; (403e88 <_pmc_init_sources+0xbc>)
  403e0e:	4798      	blx	r3
#endif
#endif
#endif

#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  403e10:	4b1e      	ldr	r3, [pc, #120]	; (403e8c <_pmc_init_sources+0xc0>)
  403e12:	607b      	str	r3, [r7, #4]
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
  403e14:	2100      	movs	r1, #0
  403e16:	4816      	ldr	r0, [pc, #88]	; (403e70 <_pmc_init_sources+0xa4>)
  403e18:	4b1d      	ldr	r3, [pc, #116]	; (403e90 <_pmc_init_sources+0xc4>)
  403e1a:	4798      	blx	r3
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
  403e1c:	687b      	ldr	r3, [r7, #4]
  403e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403e22:	4619      	mov	r1, r3
  403e24:	4812      	ldr	r0, [pc, #72]	; (403e70 <_pmc_init_sources+0xa4>)
  403e26:	4b1b      	ldr	r3, [pc, #108]	; (403e94 <_pmc_init_sources+0xc8>)
  403e28:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  403e2a:	bf00      	nop
  403e2c:	4810      	ldr	r0, [pc, #64]	; (403e70 <_pmc_init_sources+0xa4>)
  403e2e:	4b1a      	ldr	r3, [pc, #104]	; (403e98 <_pmc_init_sources+0xcc>)
  403e30:	4798      	blx	r3
  403e32:	4603      	mov	r3, r0
  403e34:	f083 0301 	eor.w	r3, r3, #1
  403e38:	b2db      	uxtb	r3, r3
  403e3a:	2b00      	cmp	r3, #0
  403e3c:	d1f6      	bne.n	403e2c <_pmc_init_sources+0x60>
		/* Wait until PLLACK stabilize */
	}
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  403e3e:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  403e42:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
  403e44:	687b      	ldr	r3, [r7, #4]
  403e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403e4a:	4619      	mov	r1, r3
  403e4c:	4808      	ldr	r0, [pc, #32]	; (403e70 <_pmc_init_sources+0xa4>)
  403e4e:	4b13      	ldr	r3, [pc, #76]	; (403e9c <_pmc_init_sources+0xd0>)
  403e50:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  403e52:	bf00      	nop
  403e54:	4806      	ldr	r0, [pc, #24]	; (403e70 <_pmc_init_sources+0xa4>)
  403e56:	4b12      	ldr	r3, [pc, #72]	; (403ea0 <_pmc_init_sources+0xd4>)
  403e58:	4798      	blx	r3
  403e5a:	4603      	mov	r3, r0
  403e5c:	f083 0301 	eor.w	r3, r3, #1
  403e60:	b2db      	uxtb	r3, r3
  403e62:	2b00      	cmp	r3, #0
  403e64:	d1f6      	bne.n	403e54 <_pmc_init_sources+0x88>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  403e66:	bf00      	nop
  403e68:	3708      	adds	r7, #8
  403e6a:	46bd      	mov	sp, r7
  403e6c:	bd80      	pop	{r7, pc}
  403e6e:	bf00      	nop
  403e70:	400e0600 	.word	0x400e0600
  403e74:	00403c77 	.word	0x00403c77
  403e78:	00373e01 	.word	0x00373e01
  403e7c:	00403c5b 	.word	0x00403c5b
  403e80:	00403b85 	.word	0x00403b85
  403e84:	01370000 	.word	0x01370000
  403e88:	00403c39 	.word	0x00403c39
  403e8c:	00183f01 	.word	0x00183f01
  403e90:	00403c91 	.word	0x00403c91
  403e94:	00403cd1 	.word	0x00403cd1
  403e98:	00403bab 	.word	0x00403bab
  403e9c:	00403c1d 	.word	0x00403c1d
  403ea0:	00403bf7 	.word	0x00403bf7

00403ea4 <_pmc_init_master_clock>:
 * \brief Initializes master clock generators
 *
 * Master clock are running when this function returns.
 */
static void _pmc_init_master_clock(void)
{
  403ea4:	b580      	push	{r7, lr}
  403ea6:	af00      	add	r7, sp, #0
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
  403ea8:	2101      	movs	r1, #1
  403eaa:	481c      	ldr	r0, [pc, #112]	; (403f1c <_pmc_init_master_clock+0x78>)
  403eac:	4b1c      	ldr	r3, [pc, #112]	; (403f20 <_pmc_init_master_clock+0x7c>)
  403eae:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403eb0:	bf00      	nop
  403eb2:	481a      	ldr	r0, [pc, #104]	; (403f1c <_pmc_init_master_clock+0x78>)
  403eb4:	4b1b      	ldr	r3, [pc, #108]	; (403f24 <_pmc_init_master_clock+0x80>)
  403eb6:	4798      	blx	r3
  403eb8:	4603      	mov	r3, r0
  403eba:	f083 0301 	eor.w	r3, r3, #1
  403ebe:	b2db      	uxtb	r3, r3
  403ec0:	2b00      	cmp	r3, #0
  403ec2:	d1f6      	bne.n	403eb2 <_pmc_init_master_clock+0xe>
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
  403ec4:	2100      	movs	r1, #0
  403ec6:	4815      	ldr	r0, [pc, #84]	; (403f1c <_pmc_init_master_clock+0x78>)
  403ec8:	4b17      	ldr	r3, [pc, #92]	; (403f28 <_pmc_init_master_clock+0x84>)
  403eca:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403ecc:	bf00      	nop
  403ece:	4813      	ldr	r0, [pc, #76]	; (403f1c <_pmc_init_master_clock+0x78>)
  403ed0:	4b14      	ldr	r3, [pc, #80]	; (403f24 <_pmc_init_master_clock+0x80>)
  403ed2:	4798      	blx	r3
  403ed4:	4603      	mov	r3, r0
  403ed6:	f083 0301 	eor.w	r3, r3, #1
  403eda:	b2db      	uxtb	r3, r3
  403edc:	2b00      	cmp	r3, #0
  403ede:	d1f6      	bne.n	403ece <_pmc_init_master_clock+0x2a>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
  403ee0:	2101      	movs	r1, #1
  403ee2:	480e      	ldr	r0, [pc, #56]	; (403f1c <_pmc_init_master_clock+0x78>)
  403ee4:	4b11      	ldr	r3, [pc, #68]	; (403f2c <_pmc_init_master_clock+0x88>)
  403ee6:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403ee8:	bf00      	nop
  403eea:	480c      	ldr	r0, [pc, #48]	; (403f1c <_pmc_init_master_clock+0x78>)
  403eec:	4b0d      	ldr	r3, [pc, #52]	; (403f24 <_pmc_init_master_clock+0x80>)
  403eee:	4798      	blx	r3
  403ef0:	4603      	mov	r3, r0
  403ef2:	f083 0301 	eor.w	r3, r3, #1
  403ef6:	b2db      	uxtb	r3, r3
  403ef8:	2b00      	cmp	r3, #0
  403efa:	d1f6      	bne.n	403eea <_pmc_init_master_clock+0x46>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
  403efc:	2102      	movs	r1, #2
  403efe:	4807      	ldr	r0, [pc, #28]	; (403f1c <_pmc_init_master_clock+0x78>)
  403f00:	4b0b      	ldr	r3, [pc, #44]	; (403f30 <_pmc_init_master_clock+0x8c>)
  403f02:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  403f04:	bf00      	nop
  403f06:	4805      	ldr	r0, [pc, #20]	; (403f1c <_pmc_init_master_clock+0x78>)
  403f08:	4b06      	ldr	r3, [pc, #24]	; (403f24 <_pmc_init_master_clock+0x80>)
  403f0a:	4798      	blx	r3
  403f0c:	4603      	mov	r3, r0
  403f0e:	f083 0301 	eor.w	r3, r3, #1
  403f12:	b2db      	uxtb	r3, r3
  403f14:	2b00      	cmp	r3, #0
  403f16:	d1f6      	bne.n	403f06 <_pmc_init_master_clock+0x62>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  403f18:	bf00      	nop
  403f1a:	bd80      	pop	{r7, pc}
  403f1c:	400e0600 	.word	0x400e0600
  403f20:	00403ced 	.word	0x00403ced
  403f24:	00403bd1 	.word	0x00403bd1
  403f28:	00403d5b 	.word	0x00403d5b
  403f2c:	00403d93 	.word	0x00403d93
  403f30:	00403d25 	.word	0x00403d25

00403f34 <_pmc_init_program_clock>:
 * \brief Initializes programmable clock generators
 *
 * Programmable clock are running when this function returns.
 */
static void _pmc_init_program_clock(void)
{
  403f34:	b480      	push	{r7}
  403f36:	af00      	add	r7, sp, #0
	while (!hri_pmc_get_SR_PCKRDY0_bit(PMC)) {
		/* Wait until PCK6 clock is ready */
	}
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK6);
#endif
}
  403f38:	bf00      	nop
  403f3a:	46bd      	mov	sp, r7
  403f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f40:	4770      	bx	lr

00403f42 <_pmc_init_fs_clock>:
 * \brief Initializes USB FS clock generators
 *
 * USB FS clock are running when this function returns.
 */
static void _pmc_init_fs_clock(void)
{
  403f42:	b480      	push	{r7}
  403f44:	af00      	add	r7, sp, #0
	}
	data |= PMC_USB_USBDIV(CONF_USB_48M_DIV - 1);
	hri_pmc_write_USB_reg(PMC, data);
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_USBCLK);
#endif
}
  403f46:	bf00      	nop
  403f48:	46bd      	mov	sp, r7
  403f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f4e:	4770      	bx	lr

00403f50 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  403f50:	b580      	push	{r7, lr}
  403f52:	af00      	add	r7, sp, #0
	_pmc_init_sources();
  403f54:	4b04      	ldr	r3, [pc, #16]	; (403f68 <_pmc_init+0x18>)
  403f56:	4798      	blx	r3
	_pmc_init_master_clock();
  403f58:	4b04      	ldr	r3, [pc, #16]	; (403f6c <_pmc_init+0x1c>)
  403f5a:	4798      	blx	r3
	_pmc_init_program_clock();
  403f5c:	4b04      	ldr	r3, [pc, #16]	; (403f70 <_pmc_init+0x20>)
  403f5e:	4798      	blx	r3
	_pmc_init_fs_clock();
  403f60:	4b04      	ldr	r3, [pc, #16]	; (403f74 <_pmc_init+0x24>)
  403f62:	4798      	blx	r3
}
  403f64:	bf00      	nop
  403f66:	bd80      	pop	{r7, pc}
  403f68:	00403dcd 	.word	0x00403dcd
  403f6c:	00403ea5 	.word	0x00403ea5
  403f70:	00403f35 	.word	0x00403f35
  403f74:	00403f43 	.word	0x00403f43

00403f78 <__NVIC_EnableIRQ>:
{
  403f78:	b480      	push	{r7}
  403f7a:	b083      	sub	sp, #12
  403f7c:	af00      	add	r7, sp, #0
  403f7e:	4603      	mov	r3, r0
  403f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f86:	2b00      	cmp	r3, #0
  403f88:	db0b      	blt.n	403fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  403f8a:	4909      	ldr	r1, [pc, #36]	; (403fb0 <__NVIC_EnableIRQ+0x38>)
  403f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403f90:	095b      	lsrs	r3, r3, #5
  403f92:	79fa      	ldrb	r2, [r7, #7]
  403f94:	f002 021f 	and.w	r2, r2, #31
  403f98:	2001      	movs	r0, #1
  403f9a:	fa00 f202 	lsl.w	r2, r0, r2
  403f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403fa2:	bf00      	nop
  403fa4:	370c      	adds	r7, #12
  403fa6:	46bd      	mov	sp, r7
  403fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fac:	4770      	bx	lr
  403fae:	bf00      	nop
  403fb0:	e000e100 	.word	0xe000e100

00403fb4 <hri_spi_get_SR_SPIENS_bit>:
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
  403fb4:	b480      	push	{r7}
  403fb6:	b083      	sub	sp, #12
  403fb8:	af00      	add	r7, sp, #0
  403fba:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  403fbc:	687b      	ldr	r3, [r7, #4]
  403fbe:	691b      	ldr	r3, [r3, #16]
  403fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403fc4:	2b00      	cmp	r3, #0
  403fc6:	bf14      	ite	ne
  403fc8:	2301      	movne	r3, #1
  403fca:	2300      	moveq	r3, #0
  403fcc:	b2db      	uxtb	r3, r3
}
  403fce:	4618      	mov	r0, r3
  403fd0:	370c      	adds	r7, #12
  403fd2:	46bd      	mov	sp, r7
  403fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fd8:	4770      	bx	lr

00403fda <hri_spi_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_MR_reg(const void *const hw, hri_spi_mr_reg_t data)
{
  403fda:	b480      	push	{r7}
  403fdc:	b083      	sub	sp, #12
  403fde:	af00      	add	r7, sp, #0
  403fe0:	6078      	str	r0, [r7, #4]
  403fe2:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MR = data;
  403fe4:	687b      	ldr	r3, [r7, #4]
  403fe6:	683a      	ldr	r2, [r7, #0]
  403fe8:	605a      	str	r2, [r3, #4]
	SPI_CRITICAL_SECTION_LEAVE();
}
  403fea:	bf00      	nop
  403fec:	370c      	adds	r7, #12
  403fee:	46bd      	mov	sp, r7
  403ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ff4:	4770      	bx	lr

00403ff6 <hri_spi_write_CSR_BITS_bf>:
	tmp = (tmp & SPI_CSR_BITS(mask)) >> SPI_CSR_BITS_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_BITS_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  403ff6:	b480      	push	{r7}
  403ff8:	b087      	sub	sp, #28
  403ffa:	af00      	add	r7, sp, #0
  403ffc:	60f8      	str	r0, [r7, #12]
  403ffe:	460b      	mov	r3, r1
  404000:	607a      	str	r2, [r7, #4]
  404002:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  404004:	7afa      	ldrb	r2, [r7, #11]
  404006:	68fb      	ldr	r3, [r7, #12]
  404008:	320c      	adds	r2, #12
  40400a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40400e:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_BITS_Msk;
  404010:	697b      	ldr	r3, [r7, #20]
  404012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  404016:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_BITS(data);
  404018:	687b      	ldr	r3, [r7, #4]
  40401a:	011b      	lsls	r3, r3, #4
  40401c:	b2db      	uxtb	r3, r3
  40401e:	697a      	ldr	r2, [r7, #20]
  404020:	4313      	orrs	r3, r2
  404022:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  404024:	7afa      	ldrb	r2, [r7, #11]
  404026:	68fb      	ldr	r3, [r7, #12]
  404028:	320c      	adds	r2, #12
  40402a:	6979      	ldr	r1, [r7, #20]
  40402c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  404030:	bf00      	nop
  404032:	371c      	adds	r7, #28
  404034:	46bd      	mov	sp, r7
  404036:	f85d 7b04 	ldr.w	r7, [sp], #4
  40403a:	4770      	bx	lr

0040403c <hri_spi_write_CSR_SCBR_bf>:
	tmp = (tmp & SPI_CSR_SCBR(mask)) >> SPI_CSR_SCBR_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_SCBR_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  40403c:	b480      	push	{r7}
  40403e:	b087      	sub	sp, #28
  404040:	af00      	add	r7, sp, #0
  404042:	60f8      	str	r0, [r7, #12]
  404044:	460b      	mov	r3, r1
  404046:	607a      	str	r2, [r7, #4]
  404048:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  40404a:	7afa      	ldrb	r2, [r7, #11]
  40404c:	68fb      	ldr	r3, [r7, #12]
  40404e:	320c      	adds	r2, #12
  404050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404054:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_SCBR_Msk;
  404056:	697b      	ldr	r3, [r7, #20]
  404058:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40405c:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_SCBR(data);
  40405e:	687b      	ldr	r3, [r7, #4]
  404060:	021b      	lsls	r3, r3, #8
  404062:	b29b      	uxth	r3, r3
  404064:	697a      	ldr	r2, [r7, #20]
  404066:	4313      	orrs	r3, r2
  404068:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  40406a:	7afa      	ldrb	r2, [r7, #11]
  40406c:	68fb      	ldr	r3, [r7, #12]
  40406e:	320c      	adds	r2, #12
  404070:	6979      	ldr	r1, [r7, #20]
  404072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  404076:	bf00      	nop
  404078:	371c      	adds	r7, #28
  40407a:	46bd      	mov	sp, r7
  40407c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404080:	4770      	bx	lr

00404082 <hri_spi_write_CSR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CSR_reg(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  404082:	b480      	push	{r7}
  404084:	b085      	sub	sp, #20
  404086:	af00      	add	r7, sp, #0
  404088:	60f8      	str	r0, [r7, #12]
  40408a:	460b      	mov	r3, r1
  40408c:	607a      	str	r2, [r7, #4]
  40408e:	72fb      	strb	r3, [r7, #11]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CSR[index] = data;
  404090:	7afa      	ldrb	r2, [r7, #11]
  404092:	68fb      	ldr	r3, [r7, #12]
  404094:	320c      	adds	r2, #12
  404096:	6879      	ldr	r1, [r7, #4]
  404098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  40409c:	bf00      	nop
  40409e:	3714      	adds	r7, #20
  4040a0:	46bd      	mov	sp, r7
  4040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040a6:	4770      	bx	lr

004040a8 <hri_spi_read_CSR_reg>:
	((Spi *)hw)->SPI_CSR[index] ^= mask;
	SPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_spi_csr_reg_t hri_spi_read_CSR_reg(const void *const hw, uint8_t index)
{
  4040a8:	b480      	push	{r7}
  4040aa:	b083      	sub	sp, #12
  4040ac:	af00      	add	r7, sp, #0
  4040ae:	6078      	str	r0, [r7, #4]
  4040b0:	460b      	mov	r3, r1
  4040b2:	70fb      	strb	r3, [r7, #3]
	return ((Spi *)hw)->SPI_CSR[index];
  4040b4:	78fa      	ldrb	r2, [r7, #3]
  4040b6:	687b      	ldr	r3, [r7, #4]
  4040b8:	320c      	adds	r2, #12
  4040ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  4040be:	4618      	mov	r0, r3
  4040c0:	370c      	adds	r7, #12
  4040c2:	46bd      	mov	sp, r7
  4040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040c8:	4770      	bx	lr

004040ca <hri_spi_write_CR_reg>:
{
	return ((Spi *)hw)->SPI_WPMR;
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
  4040ca:	b480      	push	{r7}
  4040cc:	b083      	sub	sp, #12
  4040ce:	af00      	add	r7, sp, #0
  4040d0:	6078      	str	r0, [r7, #4]
  4040d2:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4040d4:	687b      	ldr	r3, [r7, #4]
  4040d6:	683a      	ldr	r2, [r7, #0]
  4040d8:	601a      	str	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4040da:	bf00      	nop
  4040dc:	370c      	adds	r7, #12
  4040de:	46bd      	mov	sp, r7
  4040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040e4:	4770      	bx	lr
	...

004040e8 <_spi_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static IRQn_Type _spi_get_irq_num(const void *const hw)
{
  4040e8:	b480      	push	{r7}
  4040ea:	b083      	sub	sp, #12
  4040ec:	af00      	add	r7, sp, #0
  4040ee:	6078      	str	r0, [r7, #4]

	if (hw == SPI0) {
  4040f0:	687b      	ldr	r3, [r7, #4]
  4040f2:	4a06      	ldr	r2, [pc, #24]	; (40410c <_spi_get_irq_num+0x24>)
  4040f4:	4293      	cmp	r3, r2
  4040f6:	d101      	bne.n	4040fc <_spi_get_irq_num+0x14>
		return SPI0_IRQn;
  4040f8:	2315      	movs	r3, #21
  4040fa:	e000      	b.n	4040fe <_spi_get_irq_num+0x16>
	} else {
		return SPI1_IRQn;
  4040fc:	232a      	movs	r3, #42	; 0x2a
	}
}
  4040fe:	4618      	mov	r0, r3
  404100:	370c      	adds	r7, #12
  404102:	46bd      	mov	sp, r7
  404104:	f85d 7b04 	ldr.w	r7, [sp], #4
  404108:	4770      	bx	lr
  40410a:	bf00      	nop
  40410c:	40008000 	.word	0x40008000

00404110 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
  404110:	b580      	push	{r7, lr}
  404112:	b082      	sub	sp, #8
  404114:	af00      	add	r7, sp, #0
  404116:	6078      	str	r0, [r7, #4]
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);
  404118:	2101      	movs	r1, #1
  40411a:	6878      	ldr	r0, [r7, #4]
  40411c:	4b03      	ldr	r3, [pc, #12]	; (40412c <_spi_sync_enable+0x1c>)
  40411e:	4798      	blx	r3

	return ERR_NONE;
  404120:	2300      	movs	r3, #0
}
  404122:	4618      	mov	r0, r3
  404124:	3708      	adds	r7, #8
  404126:	46bd      	mov	sp, r7
  404128:	bd80      	pop	{r7, pc}
  40412a:	bf00      	nop
  40412c:	004040cb 	.word	0x004040cb

00404130 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
  404130:	b580      	push	{r7, lr}
  404132:	b082      	sub	sp, #8
  404134:	af00      	add	r7, sp, #0
  404136:	6078      	str	r0, [r7, #4]
	_spi_sync_enable(hw);
  404138:	6878      	ldr	r0, [r7, #4]
  40413a:	4b07      	ldr	r3, [pc, #28]	; (404158 <_spi_async_enable+0x28>)
  40413c:	4798      	blx	r3
	NVIC_EnableIRQ(_spi_get_irq_num(hw));
  40413e:	6878      	ldr	r0, [r7, #4]
  404140:	4b06      	ldr	r3, [pc, #24]	; (40415c <_spi_async_enable+0x2c>)
  404142:	4798      	blx	r3
  404144:	4603      	mov	r3, r0
  404146:	4618      	mov	r0, r3
  404148:	4b05      	ldr	r3, [pc, #20]	; (404160 <_spi_async_enable+0x30>)
  40414a:	4798      	blx	r3

	return ERR_NONE;
  40414c:	2300      	movs	r3, #0
}
  40414e:	4618      	mov	r0, r3
  404150:	3708      	adds	r7, #8
  404152:	46bd      	mov	sp, r7
  404154:	bd80      	pop	{r7, pc}
  404156:	bf00      	nop
  404158:	00404111 	.word	0x00404111
  40415c:	004040e9 	.word	0x004040e9
  404160:	00403f79 	.word	0x00403f79

00404164 <_spi_set_mode>:
 * \param[in] mode The mode to set
 *
 * \return Setting mode status
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
  404164:	b580      	push	{r7, lr}
  404166:	b084      	sub	sp, #16
  404168:	af00      	add	r7, sp, #0
  40416a:	6078      	str	r0, [r7, #4]
  40416c:	460b      	mov	r3, r1
  40416e:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;

	temp = hri_spi_read_CSR_reg(hw, 0);
  404170:	2100      	movs	r1, #0
  404172:	6878      	ldr	r0, [r7, #4]
  404174:	4b11      	ldr	r3, [pc, #68]	; (4041bc <_spi_set_mode+0x58>)
  404176:	4798      	blx	r3
  404178:	60f8      	str	r0, [r7, #12]
	temp &= ~(SPI_CSR_CPOL | SPI_CSR_NCPHA);
  40417a:	68fb      	ldr	r3, [r7, #12]
  40417c:	f023 0303 	bic.w	r3, r3, #3
  404180:	60fb      	str	r3, [r7, #12]
	temp |= (~(mode & 0x01u)) & 0x01u;
  404182:	78fb      	ldrb	r3, [r7, #3]
  404184:	f003 0301 	and.w	r3, r3, #1
  404188:	2b00      	cmp	r3, #0
  40418a:	bf0c      	ite	eq
  40418c:	2301      	moveq	r3, #1
  40418e:	2300      	movne	r3, #0
  404190:	b2db      	uxtb	r3, r3
  404192:	461a      	mov	r2, r3
  404194:	68fb      	ldr	r3, [r7, #12]
  404196:	4313      	orrs	r3, r2
  404198:	60fb      	str	r3, [r7, #12]
	temp |= (mode & 0x02u) << 0;
  40419a:	78fb      	ldrb	r3, [r7, #3]
  40419c:	f003 0302 	and.w	r3, r3, #2
  4041a0:	68fa      	ldr	r2, [r7, #12]
  4041a2:	4313      	orrs	r3, r2
  4041a4:	60fb      	str	r3, [r7, #12]
	hri_spi_write_CSR_reg(hw, 0, temp);
  4041a6:	68fa      	ldr	r2, [r7, #12]
  4041a8:	2100      	movs	r1, #0
  4041aa:	6878      	ldr	r0, [r7, #4]
  4041ac:	4b04      	ldr	r3, [pc, #16]	; (4041c0 <_spi_set_mode+0x5c>)
  4041ae:	4798      	blx	r3

	return ERR_NONE;
  4041b0:	2300      	movs	r3, #0
}
  4041b2:	4618      	mov	r0, r3
  4041b4:	3710      	adds	r7, #16
  4041b6:	46bd      	mov	sp, r7
  4041b8:	bd80      	pop	{r7, pc}
  4041ba:	bf00      	nop
  4041bc:	004040a9 	.word	0x004040a9
  4041c0:	00404083 	.word	0x00404083

004041c4 <_spi_set_baudrate>:
 * \param[in] baud_val The baudrate to set
 *
 * \return Setting baudrate status
 */
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
  4041c4:	b580      	push	{r7, lr}
  4041c6:	b082      	sub	sp, #8
  4041c8:	af00      	add	r7, sp, #0
  4041ca:	6078      	str	r0, [r7, #4]
  4041cc:	6039      	str	r1, [r7, #0]
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);
  4041ce:	683b      	ldr	r3, [r7, #0]
  4041d0:	b2db      	uxtb	r3, r3
  4041d2:	461a      	mov	r2, r3
  4041d4:	2100      	movs	r1, #0
  4041d6:	6878      	ldr	r0, [r7, #4]
  4041d8:	4b03      	ldr	r3, [pc, #12]	; (4041e8 <_spi_set_baudrate+0x24>)
  4041da:	4798      	blx	r3

	return ERR_NONE;
  4041dc:	2300      	movs	r3, #0
}
  4041de:	4618      	mov	r0, r3
  4041e0:	3708      	adds	r7, #8
  4041e2:	46bd      	mov	sp, r7
  4041e4:	bd80      	pop	{r7, pc}
  4041e6:	bf00      	nop
  4041e8:	0040403d 	.word	0x0040403d

004041ec <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
  4041ec:	b480      	push	{r7}
  4041ee:	b085      	sub	sp, #20
  4041f0:	af00      	add	r7, sp, #0
  4041f2:	6078      	str	r0, [r7, #4]

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4041f4:	687a      	ldr	r2, [r7, #4]
  4041f6:	4b08      	ldr	r3, [pc, #32]	; (404218 <_spi_get_hardware_index+0x2c>)
  4041f8:	4413      	add	r3, r2
  4041fa:	0c1b      	lsrs	r3, r3, #16
  4041fc:	73fb      	strb	r3, [r7, #15]

	if (index == 5) {
  4041fe:	7bfb      	ldrb	r3, [r7, #15]
  404200:	2b05      	cmp	r3, #5
  404202:	d101      	bne.n	404208 <_spi_get_hardware_index+0x1c>
		return 1;
  404204:	2301      	movs	r3, #1
  404206:	e000      	b.n	40420a <_spi_get_hardware_index+0x1e>
	} else {
		return 0;
  404208:	2300      	movs	r3, #0
	}
}
  40420a:	4618      	mov	r0, r3
  40420c:	3714      	adds	r7, #20
  40420e:	46bd      	mov	sp, r7
  404210:	f85d 7b04 	ldr.w	r7, [sp], #4
  404214:	4770      	bx	lr
  404216:	bf00      	nop
  404218:	bfff8000 	.word	0xbfff8000

0040421c <_spi_get_tx_dma_channel>:
/** \brief Return the SPI TX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
  40421c:	b580      	push	{r7, lr}
  40421e:	b082      	sub	sp, #8
  404220:	af00      	add	r7, sp, #0
  404222:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  404224:	6878      	ldr	r0, [r7, #4]
  404226:	4b06      	ldr	r3, [pc, #24]	; (404240 <_spi_get_tx_dma_channel+0x24>)
  404228:	4798      	blx	r3
  40422a:	4603      	mov	r3, r0
  40422c:	2b00      	cmp	r3, #0
  40422e:	d101      	bne.n	404234 <_spi_get_tx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_TX_CHANNEL;
  404230:	2302      	movs	r3, #2
  404232:	e000      	b.n	404236 <_spi_get_tx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_TX_CHANNEL;
  404234:	2300      	movs	r3, #0
	}
}
  404236:	4618      	mov	r0, r3
  404238:	3708      	adds	r7, #8
  40423a:	46bd      	mov	sp, r7
  40423c:	bd80      	pop	{r7, pc}
  40423e:	bf00      	nop
  404240:	004041ed 	.word	0x004041ed

00404244 <_spi_get_rx_dma_channel>:
/** \brief Return the SPI RX DMA channel index
 *  \param[in] hw_addr The hardware register base address.
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
  404244:	b580      	push	{r7, lr}
  404246:	b082      	sub	sp, #8
  404248:	af00      	add	r7, sp, #0
  40424a:	6078      	str	r0, [r7, #4]
	if (_spi_get_hardware_index(hw) == 0) {
  40424c:	6878      	ldr	r0, [r7, #4]
  40424e:	4b06      	ldr	r3, [pc, #24]	; (404268 <_spi_get_rx_dma_channel+0x24>)
  404250:	4798      	blx	r3
  404252:	4603      	mov	r3, r0
  404254:	2b00      	cmp	r3, #0
  404256:	d101      	bne.n	40425c <_spi_get_rx_dma_channel+0x18>
		return CONF_SPI_0_M_DMA_RX_CHANNEL;
  404258:	2303      	movs	r3, #3
  40425a:	e000      	b.n	40425e <_spi_get_rx_dma_channel+0x1a>
	} else {
		return CONF_SPI_1_M_DMA_RX_CHANNEL;
  40425c:	2301      	movs	r3, #1
	}
}
  40425e:	4618      	mov	r0, r3
  404260:	3708      	adds	r7, #8
  404262:	46bd      	mov	sp, r7
  404264:	bd80      	pop	{r7, pc}
  404266:	bf00      	nop
  404268:	004041ed 	.word	0x004041ed

0040426c <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
  40426c:	b580      	push	{r7, lr}
  40426e:	b084      	sub	sp, #16
  404270:	af00      	add	r7, sp, #0
  404272:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  404274:	687b      	ldr	r3, [r7, #4]
  404276:	4618      	mov	r0, r3
  404278:	4b12      	ldr	r3, [pc, #72]	; (4042c4 <_spi_get_regs+0x58>)
  40427a:	4798      	blx	r3
  40427c:	4603      	mov	r3, r0
  40427e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  404280:	2300      	movs	r3, #0
  404282:	73fb      	strb	r3, [r7, #15]
  404284:	e015      	b.n	4042b2 <_spi_get_regs+0x46>
		if (spi_regs[i].number == n) {
  404286:	7bfa      	ldrb	r2, [r7, #15]
  404288:	490f      	ldr	r1, [pc, #60]	; (4042c8 <_spi_get_regs+0x5c>)
  40428a:	4613      	mov	r3, r2
  40428c:	009b      	lsls	r3, r3, #2
  40428e:	4413      	add	r3, r2
  404290:	009b      	lsls	r3, r3, #2
  404292:	440b      	add	r3, r1
  404294:	781b      	ldrb	r3, [r3, #0]
  404296:	7bba      	ldrb	r2, [r7, #14]
  404298:	429a      	cmp	r2, r3
  40429a:	d107      	bne.n	4042ac <_spi_get_regs+0x40>
			return &spi_regs[i];
  40429c:	7bfa      	ldrb	r2, [r7, #15]
  40429e:	4613      	mov	r3, r2
  4042a0:	009b      	lsls	r3, r3, #2
  4042a2:	4413      	add	r3, r2
  4042a4:	009b      	lsls	r3, r3, #2
  4042a6:	4a08      	ldr	r2, [pc, #32]	; (4042c8 <_spi_get_regs+0x5c>)
  4042a8:	4413      	add	r3, r2
  4042aa:	e006      	b.n	4042ba <_spi_get_regs+0x4e>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4042ac:	7bfb      	ldrb	r3, [r7, #15]
  4042ae:	3301      	adds	r3, #1
  4042b0:	73fb      	strb	r3, [r7, #15]
  4042b2:	7bfb      	ldrb	r3, [r7, #15]
  4042b4:	2b01      	cmp	r3, #1
  4042b6:	d9e6      	bls.n	404286 <_spi_get_regs+0x1a>
		}
	}

	return NULL;
  4042b8:	2300      	movs	r3, #0
}
  4042ba:	4618      	mov	r0, r3
  4042bc:	3710      	adds	r7, #16
  4042be:	46bd      	mov	sp, r7
  4042c0:	bd80      	pop	{r7, pc}
  4042c2:	bf00      	nop
  4042c4:	004041ed 	.word	0x004041ed
  4042c8:	00407c40 	.word	0x00407c40

004042cc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
  4042cc:	b580      	push	{r7, lr}
  4042ce:	b084      	sub	sp, #16
  4042d0:	af00      	add	r7, sp, #0
  4042d2:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  4042d4:	687b      	ldr	r3, [r7, #4]
  4042d6:	689b      	ldr	r3, [r3, #8]
  4042d8:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.rx) {
  4042da:	68fb      	ldr	r3, [r7, #12]
  4042dc:	689b      	ldr	r3, [r3, #8]
  4042de:	2b00      	cmp	r3, #0
  4042e0:	d003      	beq.n	4042ea <_spi_dma_rx_complete+0x1e>
		dev->callbacks.rx(resource);
  4042e2:	68fb      	ldr	r3, [r7, #12]
  4042e4:	689b      	ldr	r3, [r3, #8]
  4042e6:	6878      	ldr	r0, [r7, #4]
  4042e8:	4798      	blx	r3
	}
}
  4042ea:	bf00      	nop
  4042ec:	3710      	adds	r7, #16
  4042ee:	46bd      	mov	sp, r7
  4042f0:	bd80      	pop	{r7, pc}

004042f2 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
  4042f2:	b580      	push	{r7, lr}
  4042f4:	b084      	sub	sp, #16
  4042f6:	af00      	add	r7, sp, #0
  4042f8:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  4042fa:	687b      	ldr	r3, [r7, #4]
  4042fc:	689b      	ldr	r3, [r3, #8]
  4042fe:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.tx) {
  404300:	68fb      	ldr	r3, [r7, #12]
  404302:	685b      	ldr	r3, [r3, #4]
  404304:	2b00      	cmp	r3, #0
  404306:	d003      	beq.n	404310 <_spi_dma_tx_complete+0x1e>
		dev->callbacks.tx(resource);
  404308:	68fb      	ldr	r3, [r7, #12]
  40430a:	685b      	ldr	r3, [r3, #4]
  40430c:	6878      	ldr	r0, [r7, #4]
  40430e:	4798      	blx	r3
	}
}
  404310:	bf00      	nop
  404312:	3710      	adds	r7, #16
  404314:	46bd      	mov	sp, r7
  404316:	bd80      	pop	{r7, pc}

00404318 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
  404318:	b580      	push	{r7, lr}
  40431a:	b084      	sub	sp, #16
  40431c:	af00      	add	r7, sp, #0
  40431e:	6078      	str	r0, [r7, #4]
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;
  404320:	687b      	ldr	r3, [r7, #4]
  404322:	689b      	ldr	r3, [r3, #8]
  404324:	60fb      	str	r3, [r7, #12]

	if (dev->callbacks.error) {
  404326:	68fb      	ldr	r3, [r7, #12]
  404328:	68db      	ldr	r3, [r3, #12]
  40432a:	2b00      	cmp	r3, #0
  40432c:	d003      	beq.n	404336 <_spi_dma_error_occured+0x1e>
		dev->callbacks.error(resource);
  40432e:	68fb      	ldr	r3, [r7, #12]
  404330:	68db      	ldr	r3, [r3, #12]
  404332:	6878      	ldr	r0, [r7, #4]
  404334:	4798      	blx	r3
	}
}
  404336:	bf00      	nop
  404338:	3710      	adds	r7, #16
  40433a:	46bd      	mov	sp, r7
  40433c:	bd80      	pop	{r7, pc}

0040433e <_spi_m_get_source_for_dma>:

static uint32_t _spi_m_get_source_for_dma(void *const hw)
{
  40433e:	b480      	push	{r7}
  404340:	b083      	sub	sp, #12
  404342:	af00      	add	r7, sp, #0
  404344:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_RDR);
  404346:	687b      	ldr	r3, [r7, #4]
  404348:	3308      	adds	r3, #8
}
  40434a:	4618      	mov	r0, r3
  40434c:	370c      	adds	r7, #12
  40434e:	46bd      	mov	sp, r7
  404350:	f85d 7b04 	ldr.w	r7, [sp], #4
  404354:	4770      	bx	lr

00404356 <_spi_m_get_destination_for_dma>:

static uint32_t _spi_m_get_destination_for_dma(void *const hw)
{
  404356:	b480      	push	{r7}
  404358:	b083      	sub	sp, #12
  40435a:	af00      	add	r7, sp, #0
  40435c:	6078      	str	r0, [r7, #4]
	return (uint32_t) & (((Spi *)hw)->SPI_TDR);
  40435e:	687b      	ldr	r3, [r7, #4]
  404360:	330c      	adds	r3, #12
}
  404362:	4618      	mov	r0, r3
  404364:	370c      	adds	r7, #12
  404366:	46bd      	mov	sp, r7
  404368:	f85d 7b04 	ldr.w	r7, [sp], #4
  40436c:	4770      	bx	lr
	...

00404370 <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
  404370:	b590      	push	{r4, r7, lr}
  404372:	b085      	sub	sp, #20
  404374:	af00      	add	r7, sp, #0
  404376:	6078      	str	r0, [r7, #4]
  404378:	6039      	str	r1, [r7, #0]
	struct _spi_m_dma_dev *    spid = dev;
  40437a:	687b      	ldr	r3, [r7, #4]
  40437c:	60fb      	str	r3, [r7, #12]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
  40437e:	683b      	ldr	r3, [r7, #0]
  404380:	4618      	mov	r0, r3
  404382:	4b34      	ldr	r3, [pc, #208]	; (404454 <_spi_m_dma_init+0xe4>)
  404384:	4798      	blx	r3
  404386:	60b8      	str	r0, [r7, #8]

	/* Do hardware initialize. */
	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  404388:	6838      	ldr	r0, [r7, #0]
  40438a:	4b33      	ldr	r3, [pc, #204]	; (404458 <_spi_m_dma_init+0xe8>)
  40438c:	4798      	blx	r3
  40438e:	4603      	mov	r3, r0
  404390:	2b00      	cmp	r3, #0
  404392:	d002      	beq.n	40439a <_spi_m_dma_init+0x2a>
		return ERR_DENIED;
  404394:	f06f 0310 	mvn.w	r3, #16
  404398:	e057      	b.n	40444a <_spi_m_dma_init+0xda>
	}

	spid->prvt = hw;
  40439a:	68fb      	ldr	r3, [r7, #12]
  40439c:	683a      	ldr	r2, [r7, #0]
  40439e:	601a      	str	r2, [r3, #0]
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
  4043a0:	2180      	movs	r1, #128	; 0x80
  4043a2:	6838      	ldr	r0, [r7, #0]
  4043a4:	4b2d      	ldr	r3, [pc, #180]	; (40445c <_spi_m_dma_init+0xec>)
  4043a6:	4798      	blx	r3
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4043a8:	68bb      	ldr	r3, [r7, #8]
  4043aa:	685a      	ldr	r2, [r3, #4]
  4043ac:	4b2c      	ldr	r3, [pc, #176]	; (404460 <_spi_m_dma_init+0xf0>)
  4043ae:	4013      	ands	r3, r2
  4043b0:	4619      	mov	r1, r3
  4043b2:	6838      	ldr	r0, [r7, #0]
  4043b4:	4b29      	ldr	r3, [pc, #164]	; (40445c <_spi_m_dma_init+0xec>)
  4043b6:	4798      	blx	r3
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4043b8:	68bb      	ldr	r3, [r7, #8]
  4043ba:	689a      	ldr	r2, [r3, #8]
  4043bc:	4b29      	ldr	r3, [pc, #164]	; (404464 <_spi_m_dma_init+0xf4>)
  4043be:	4013      	ands	r3, r2
  4043c0:	4a29      	ldr	r2, [pc, #164]	; (404468 <_spi_m_dma_init+0xf8>)
  4043c2:	431a      	orrs	r2, r3
  4043c4:	4611      	mov	r1, r2
  4043c6:	6838      	ldr	r0, [r7, #0]
  4043c8:	4b28      	ldr	r3, [pc, #160]	; (40446c <_spi_m_dma_init+0xfc>)
  4043ca:	4798      	blx	r3
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4043cc:	68bb      	ldr	r3, [r7, #8]
  4043ce:	68db      	ldr	r3, [r3, #12]
  4043d0:	461a      	mov	r2, r3
  4043d2:	2100      	movs	r1, #0
  4043d4:	6838      	ldr	r0, [r7, #0]
  4043d6:	4b26      	ldr	r3, [pc, #152]	; (404470 <_spi_m_dma_init+0x100>)
  4043d8:	4798      	blx	r3

	/* Initialize callbacks: must use them */
	spid->callbacks.error = NULL;
  4043da:	68fb      	ldr	r3, [r7, #12]
  4043dc:	2200      	movs	r2, #0
  4043de:	60da      	str	r2, [r3, #12]
	spid->callbacks.rx    = NULL;
  4043e0:	68fb      	ldr	r3, [r7, #12]
  4043e2:	2200      	movs	r2, #0
  4043e4:	609a      	str	r2, [r3, #8]
	spid->callbacks.tx    = NULL;
  4043e6:	68fb      	ldr	r3, [r7, #12]
  4043e8:	2200      	movs	r2, #0
  4043ea:	605a      	str	r2, [r3, #4]

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
  4043ec:	687b      	ldr	r3, [r7, #4]
  4043ee:	f103 0418 	add.w	r4, r3, #24
  4043f2:	6838      	ldr	r0, [r7, #0]
  4043f4:	4b1f      	ldr	r3, [pc, #124]	; (404474 <_spi_m_dma_init+0x104>)
  4043f6:	4798      	blx	r3
  4043f8:	4603      	mov	r3, r0
  4043fa:	4619      	mov	r1, r3
  4043fc:	4620      	mov	r0, r4
  4043fe:	4b1e      	ldr	r3, [pc, #120]	; (404478 <_spi_m_dma_init+0x108>)
  404400:	4798      	blx	r3
	dev->resource->back                 = dev;
  404402:	687b      	ldr	r3, [r7, #4]
  404404:	699b      	ldr	r3, [r3, #24]
  404406:	687a      	ldr	r2, [r7, #4]
  404408:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
  40440a:	687b      	ldr	r3, [r7, #4]
  40440c:	699b      	ldr	r3, [r3, #24]
  40440e:	4a1b      	ldr	r2, [pc, #108]	; (40447c <_spi_m_dma_init+0x10c>)
  404410:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  404412:	687b      	ldr	r3, [r7, #4]
  404414:	699b      	ldr	r3, [r3, #24]
  404416:	4a1a      	ldr	r2, [pc, #104]	; (404480 <_spi_m_dma_init+0x110>)
  404418:	605a      	str	r2, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
  40441a:	687b      	ldr	r3, [r7, #4]
  40441c:	f103 0418 	add.w	r4, r3, #24
  404420:	6838      	ldr	r0, [r7, #0]
  404422:	4b18      	ldr	r3, [pc, #96]	; (404484 <_spi_m_dma_init+0x114>)
  404424:	4798      	blx	r3
  404426:	4603      	mov	r3, r0
  404428:	4619      	mov	r1, r3
  40442a:	4620      	mov	r0, r4
  40442c:	4b12      	ldr	r3, [pc, #72]	; (404478 <_spi_m_dma_init+0x108>)
  40442e:	4798      	blx	r3
	dev->resource->back                 = dev;
  404430:	687b      	ldr	r3, [r7, #4]
  404432:	699b      	ldr	r3, [r3, #24]
  404434:	687a      	ldr	r2, [r7, #4]
  404436:	609a      	str	r2, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
  404438:	687b      	ldr	r3, [r7, #4]
  40443a:	699b      	ldr	r3, [r3, #24]
  40443c:	4a12      	ldr	r2, [pc, #72]	; (404488 <_spi_m_dma_init+0x118>)
  40443e:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  404440:	687b      	ldr	r3, [r7, #4]
  404442:	699b      	ldr	r3, [r3, #24]
  404444:	4a0e      	ldr	r2, [pc, #56]	; (404480 <_spi_m_dma_init+0x110>)
  404446:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
  404448:	2300      	movs	r3, #0
}
  40444a:	4618      	mov	r0, r3
  40444c:	3714      	adds	r7, #20
  40444e:	46bd      	mov	sp, r7
  404450:	bd90      	pop	{r4, r7, pc}
  404452:	bf00      	nop
  404454:	0040426d 	.word	0x0040426d
  404458:	00403fb5 	.word	0x00403fb5
  40445c:	004040cb 	.word	0x004040cb
  404460:	feffff7c 	.word	0xfeffff7c
  404464:	fff1ff6f 	.word	0xfff1ff6f
  404468:	000e0010 	.word	0x000e0010
  40446c:	00403fdb 	.word	0x00403fdb
  404470:	00404083 	.word	0x00404083
  404474:	00404245 	.word	0x00404245
  404478:	004076ed 	.word	0x004076ed
  40447c:	004042cd 	.word	0x004042cd
  404480:	00404319 	.word	0x00404319
  404484:	0040421d 	.word	0x0040421d
  404488:	004042f3 	.word	0x004042f3

0040448c <_spi_m_dma_enable>:
	ASSERT(dev && dev->prvt);

	return _spi_async_enable(dev->prvt);
}
int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
  40448c:	b580      	push	{r7, lr}
  40448e:	b082      	sub	sp, #8
  404490:	af00      	add	r7, sp, #0
  404492:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
  404494:	687b      	ldr	r3, [r7, #4]
  404496:	2b00      	cmp	r3, #0
  404498:	d005      	beq.n	4044a6 <_spi_m_dma_enable+0x1a>
  40449a:	687b      	ldr	r3, [r7, #4]
  40449c:	681b      	ldr	r3, [r3, #0]
  40449e:	2b00      	cmp	r3, #0
  4044a0:	d001      	beq.n	4044a6 <_spi_m_dma_enable+0x1a>
  4044a2:	2301      	movs	r3, #1
  4044a4:	e000      	b.n	4044a8 <_spi_m_dma_enable+0x1c>
  4044a6:	2300      	movs	r3, #0
  4044a8:	f003 0301 	and.w	r3, r3, #1
  4044ac:	b2db      	uxtb	r3, r3
  4044ae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
  4044b2:	4907      	ldr	r1, [pc, #28]	; (4044d0 <_spi_m_dma_enable+0x44>)
  4044b4:	4618      	mov	r0, r3
  4044b6:	4b07      	ldr	r3, [pc, #28]	; (4044d4 <_spi_m_dma_enable+0x48>)
  4044b8:	4798      	blx	r3

	return _spi_async_enable(dev->prvt);
  4044ba:	687b      	ldr	r3, [r7, #4]
  4044bc:	681b      	ldr	r3, [r3, #0]
  4044be:	4618      	mov	r0, r3
  4044c0:	4b05      	ldr	r3, [pc, #20]	; (4044d8 <_spi_m_dma_enable+0x4c>)
  4044c2:	4798      	blx	r3
  4044c4:	4603      	mov	r3, r0
}
  4044c6:	4618      	mov	r0, r3
  4044c8:	3708      	adds	r7, #8
  4044ca:	46bd      	mov	sp, r7
  4044cc:	bd80      	pop	{r7, pc}
  4044ce:	bf00      	nop
  4044d0:	00407c68 	.word	0x00407c68
  4044d4:	00402d41 	.word	0x00402d41
  4044d8:	00404131 	.word	0x00404131

004044dc <_spi_m_dma_set_mode>:
	ASSERT(dev && dev->prvt);

	return _spi_set_mode(dev->prvt, mode);
}
int32_t _spi_m_dma_set_mode(struct _spi_m_dma_dev *dev, const enum spi_transfer_mode mode)
{
  4044dc:	b580      	push	{r7, lr}
  4044de:	b082      	sub	sp, #8
  4044e0:	af00      	add	r7, sp, #0
  4044e2:	6078      	str	r0, [r7, #4]
  4044e4:	460b      	mov	r3, r1
  4044e6:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  4044e8:	687b      	ldr	r3, [r7, #4]
  4044ea:	2b00      	cmp	r3, #0
  4044ec:	d005      	beq.n	4044fa <_spi_m_dma_set_mode+0x1e>
  4044ee:	687b      	ldr	r3, [r7, #4]
  4044f0:	681b      	ldr	r3, [r3, #0]
  4044f2:	2b00      	cmp	r3, #0
  4044f4:	d001      	beq.n	4044fa <_spi_m_dma_set_mode+0x1e>
  4044f6:	2301      	movs	r3, #1
  4044f8:	e000      	b.n	4044fc <_spi_m_dma_set_mode+0x20>
  4044fa:	2300      	movs	r3, #0
  4044fc:	f003 0301 	and.w	r3, r3, #1
  404500:	b2db      	uxtb	r3, r3
  404502:	f44f 7208 	mov.w	r2, #544	; 0x220
  404506:	4908      	ldr	r1, [pc, #32]	; (404528 <_spi_m_dma_set_mode+0x4c>)
  404508:	4618      	mov	r0, r3
  40450a:	4b08      	ldr	r3, [pc, #32]	; (40452c <_spi_m_dma_set_mode+0x50>)
  40450c:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
  40450e:	687b      	ldr	r3, [r7, #4]
  404510:	681b      	ldr	r3, [r3, #0]
  404512:	78fa      	ldrb	r2, [r7, #3]
  404514:	4611      	mov	r1, r2
  404516:	4618      	mov	r0, r3
  404518:	4b05      	ldr	r3, [pc, #20]	; (404530 <_spi_m_dma_set_mode+0x54>)
  40451a:	4798      	blx	r3
  40451c:	4603      	mov	r3, r0
}
  40451e:	4618      	mov	r0, r3
  404520:	3708      	adds	r7, #8
  404522:	46bd      	mov	sp, r7
  404524:	bd80      	pop	{r7, pc}
  404526:	bf00      	nop
  404528:	00407c68 	.word	0x00407c68
  40452c:	00402d41 	.word	0x00402d41
  404530:	00404165 	.word	0x00404165

00404534 <_spi_m_dma_set_baudrate>:
	ASSERT(dev && dev->prvt);

	return _spi_set_baudrate(dev->prvt, baud_val);
}
int32_t _spi_m_dma_set_baudrate(struct _spi_m_dma_dev *dev, const uint32_t baud_val)
{
  404534:	b580      	push	{r7, lr}
  404536:	b082      	sub	sp, #8
  404538:	af00      	add	r7, sp, #0
  40453a:	6078      	str	r0, [r7, #4]
  40453c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->prvt);
  40453e:	687b      	ldr	r3, [r7, #4]
  404540:	2b00      	cmp	r3, #0
  404542:	d005      	beq.n	404550 <_spi_m_dma_set_baudrate+0x1c>
  404544:	687b      	ldr	r3, [r7, #4]
  404546:	681b      	ldr	r3, [r3, #0]
  404548:	2b00      	cmp	r3, #0
  40454a:	d001      	beq.n	404550 <_spi_m_dma_set_baudrate+0x1c>
  40454c:	2301      	movs	r3, #1
  40454e:	e000      	b.n	404552 <_spi_m_dma_set_baudrate+0x1e>
  404550:	2300      	movs	r3, #0
  404552:	f003 0301 	and.w	r3, r3, #1
  404556:	b2db      	uxtb	r3, r3
  404558:	f240 2247 	movw	r2, #583	; 0x247
  40455c:	4907      	ldr	r1, [pc, #28]	; (40457c <_spi_m_dma_set_baudrate+0x48>)
  40455e:	4618      	mov	r0, r3
  404560:	4b07      	ldr	r3, [pc, #28]	; (404580 <_spi_m_dma_set_baudrate+0x4c>)
  404562:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  404564:	687b      	ldr	r3, [r7, #4]
  404566:	681b      	ldr	r3, [r3, #0]
  404568:	6839      	ldr	r1, [r7, #0]
  40456a:	4618      	mov	r0, r3
  40456c:	4b05      	ldr	r3, [pc, #20]	; (404584 <_spi_m_dma_set_baudrate+0x50>)
  40456e:	4798      	blx	r3
  404570:	4603      	mov	r3, r0
}
  404572:	4618      	mov	r0, r3
  404574:	3708      	adds	r7, #8
  404576:	46bd      	mov	sp, r7
  404578:	bd80      	pop	{r7, pc}
  40457a:	bf00      	nop
  40457c:	00407c68 	.word	0x00407c68
  404580:	00402d41 	.word	0x00402d41
  404584:	004041c5 	.word	0x004041c5

00404588 <_spi_m_dma_set_char_size>:
	ASSERT(dev && dev->prvt);

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}
int32_t _spi_m_dma_set_char_size(struct _spi_m_dma_dev *dev, const enum spi_char_size char_size)
{
  404588:	b580      	push	{r7, lr}
  40458a:	b082      	sub	sp, #8
  40458c:	af00      	add	r7, sp, #0
  40458e:	6078      	str	r0, [r7, #4]
  404590:	460b      	mov	r3, r1
  404592:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  404594:	687b      	ldr	r3, [r7, #4]
  404596:	2b00      	cmp	r3, #0
  404598:	d005      	beq.n	4045a6 <_spi_m_dma_set_char_size+0x1e>
  40459a:	687b      	ldr	r3, [r7, #4]
  40459c:	681b      	ldr	r3, [r3, #0]
  40459e:	2b00      	cmp	r3, #0
  4045a0:	d001      	beq.n	4045a6 <_spi_m_dma_set_char_size+0x1e>
  4045a2:	2301      	movs	r3, #1
  4045a4:	e000      	b.n	4045a8 <_spi_m_dma_set_char_size+0x20>
  4045a6:	2300      	movs	r3, #0
  4045a8:	f003 0301 	and.w	r3, r3, #1
  4045ac:	b2db      	uxtb	r3, r3
  4045ae:	f240 2272 	movw	r2, #626	; 0x272
  4045b2:	490a      	ldr	r1, [pc, #40]	; (4045dc <_spi_m_dma_set_char_size+0x54>)
  4045b4:	4618      	mov	r0, r3
  4045b6:	4b0a      	ldr	r3, [pc, #40]	; (4045e0 <_spi_m_dma_set_char_size+0x58>)
  4045b8:	4798      	blx	r3

	hri_spi_write_CSR_BITS_bf(dev->prvt, 0, char_size);
  4045ba:	687b      	ldr	r3, [r7, #4]
  4045bc:	681b      	ldr	r3, [r3, #0]
  4045be:	78fa      	ldrb	r2, [r7, #3]
  4045c0:	2100      	movs	r1, #0
  4045c2:	4618      	mov	r0, r3
  4045c4:	4b07      	ldr	r3, [pc, #28]	; (4045e4 <_spi_m_dma_set_char_size+0x5c>)
  4045c6:	4798      	blx	r3

	return (char_size == SPI_CHAR_SIZE_8) ? 1 : 2;
  4045c8:	78fb      	ldrb	r3, [r7, #3]
  4045ca:	2b00      	cmp	r3, #0
  4045cc:	d101      	bne.n	4045d2 <_spi_m_dma_set_char_size+0x4a>
  4045ce:	2301      	movs	r3, #1
  4045d0:	e000      	b.n	4045d4 <_spi_m_dma_set_char_size+0x4c>
  4045d2:	2302      	movs	r3, #2
}
  4045d4:	4618      	mov	r0, r3
  4045d6:	3708      	adds	r7, #8
  4045d8:	46bd      	mov	sp, r7
  4045da:	bd80      	pop	{r7, pc}
  4045dc:	00407c68 	.word	0x00407c68
  4045e0:	00402d41 	.word	0x00402d41
  4045e4:	00403ff7 	.word	0x00403ff7

004045e8 <_spi_m_dma_register_callback>:
                                const bool state)
{
	_spi_m_async_set_irq_state(device, type, state);
}
void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
  4045e8:	b580      	push	{r7, lr}
  4045ea:	b084      	sub	sp, #16
  4045ec:	af00      	add	r7, sp, #0
  4045ee:	60f8      	str	r0, [r7, #12]
  4045f0:	460b      	mov	r3, r1
  4045f2:	607a      	str	r2, [r7, #4]
  4045f4:	72fb      	strb	r3, [r7, #11]
	switch (type) {
  4045f6:	7afb      	ldrb	r3, [r7, #11]
  4045f8:	2b03      	cmp	r3, #3
  4045fa:	d85c      	bhi.n	4046b6 <_spi_m_dma_register_callback+0xce>
  4045fc:	a201      	add	r2, pc, #4	; (adr r2, 404604 <_spi_m_dma_register_callback+0x1c>)
  4045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404602:	bf00      	nop
  404604:	00404615 	.word	0x00404615
  404608:	0040463f 	.word	0x0040463f
  40460c:	00404669 	.word	0x00404669
  404610:	004046b5 	.word	0x004046b5
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
  404614:	68fb      	ldr	r3, [r7, #12]
  404616:	687a      	ldr	r2, [r7, #4]
  404618:	605a      	str	r2, [r3, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  40461a:	68fb      	ldr	r3, [r7, #12]
  40461c:	681b      	ldr	r3, [r3, #0]
  40461e:	4618      	mov	r0, r3
  404620:	4b27      	ldr	r3, [pc, #156]	; (4046c0 <_spi_m_dma_register_callback+0xd8>)
  404622:	4798      	blx	r3
  404624:	4603      	mov	r3, r0
  404626:	4618      	mov	r0, r3
  404628:	687b      	ldr	r3, [r7, #4]
  40462a:	2b00      	cmp	r3, #0
  40462c:	bf14      	ite	ne
  40462e:	2301      	movne	r3, #1
  404630:	2300      	moveq	r3, #0
  404632:	b2db      	uxtb	r3, r3
  404634:	461a      	mov	r2, r3
  404636:	2100      	movs	r1, #0
  404638:	4b22      	ldr	r3, [pc, #136]	; (4046c4 <_spi_m_dma_register_callback+0xdc>)
  40463a:	4798      	blx	r3
		break;
  40463c:	e03b      	b.n	4046b6 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
  40463e:	68fb      	ldr	r3, [r7, #12]
  404640:	687a      	ldr	r2, [r7, #4]
  404642:	609a      	str	r2, [r3, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
  404644:	68fb      	ldr	r3, [r7, #12]
  404646:	681b      	ldr	r3, [r3, #0]
  404648:	4618      	mov	r0, r3
  40464a:	4b1f      	ldr	r3, [pc, #124]	; (4046c8 <_spi_m_dma_register_callback+0xe0>)
  40464c:	4798      	blx	r3
  40464e:	4603      	mov	r3, r0
  404650:	4618      	mov	r0, r3
  404652:	687b      	ldr	r3, [r7, #4]
  404654:	2b00      	cmp	r3, #0
  404656:	bf14      	ite	ne
  404658:	2301      	movne	r3, #1
  40465a:	2300      	moveq	r3, #0
  40465c:	b2db      	uxtb	r3, r3
  40465e:	461a      	mov	r2, r3
  404660:	2100      	movs	r1, #0
  404662:	4b18      	ldr	r3, [pc, #96]	; (4046c4 <_spi_m_dma_register_callback+0xdc>)
  404664:	4798      	blx	r3
		break;
  404666:	e026      	b.n	4046b6 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
  404668:	68fb      	ldr	r3, [r7, #12]
  40466a:	687a      	ldr	r2, [r7, #4]
  40466c:	60da      	str	r2, [r3, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  40466e:	68fb      	ldr	r3, [r7, #12]
  404670:	681b      	ldr	r3, [r3, #0]
  404672:	4618      	mov	r0, r3
  404674:	4b14      	ldr	r3, [pc, #80]	; (4046c8 <_spi_m_dma_register_callback+0xe0>)
  404676:	4798      	blx	r3
  404678:	4603      	mov	r3, r0
  40467a:	4618      	mov	r0, r3
  40467c:	687b      	ldr	r3, [r7, #4]
  40467e:	2b00      	cmp	r3, #0
  404680:	bf14      	ite	ne
  404682:	2301      	movne	r3, #1
  404684:	2300      	moveq	r3, #0
  404686:	b2db      	uxtb	r3, r3
  404688:	461a      	mov	r2, r3
  40468a:	2101      	movs	r1, #1
  40468c:	4b0d      	ldr	r3, [pc, #52]	; (4046c4 <_spi_m_dma_register_callback+0xdc>)
  40468e:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
  404690:	68fb      	ldr	r3, [r7, #12]
  404692:	681b      	ldr	r3, [r3, #0]
  404694:	4618      	mov	r0, r3
  404696:	4b0a      	ldr	r3, [pc, #40]	; (4046c0 <_spi_m_dma_register_callback+0xd8>)
  404698:	4798      	blx	r3
  40469a:	4603      	mov	r3, r0
  40469c:	4618      	mov	r0, r3
  40469e:	687b      	ldr	r3, [r7, #4]
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	bf14      	ite	ne
  4046a4:	2301      	movne	r3, #1
  4046a6:	2300      	moveq	r3, #0
  4046a8:	b2db      	uxtb	r3, r3
  4046aa:	461a      	mov	r2, r3
  4046ac:	2101      	movs	r1, #1
  4046ae:	4b05      	ldr	r3, [pc, #20]	; (4046c4 <_spi_m_dma_register_callback+0xdc>)
  4046b0:	4798      	blx	r3
		break;
  4046b2:	e000      	b.n	4046b6 <_spi_m_dma_register_callback+0xce>
	case SPI_DEV_CB_DMA_N:
		break;
  4046b4:	bf00      	nop
	}
}
  4046b6:	bf00      	nop
  4046b8:	3710      	adds	r7, #16
  4046ba:	46bd      	mov	sp, r7
  4046bc:	bd80      	pop	{r7, pc}
  4046be:	bf00      	nop
  4046c0:	0040421d 	.word	0x0040421d
  4046c4:	0040771d 	.word	0x0040771d
  4046c8:	00404245 	.word	0x00404245

004046cc <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
  4046cc:	b580      	push	{r7, lr}
  4046ce:	b086      	sub	sp, #24
  4046d0:	af00      	add	r7, sp, #0
  4046d2:	60f8      	str	r0, [r7, #12]
  4046d4:	60b9      	str	r1, [r7, #8]
  4046d6:	607a      	str	r2, [r7, #4]
  4046d8:	807b      	strh	r3, [r7, #2]
	const struct spi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
  4046da:	68fb      	ldr	r3, [r7, #12]
  4046dc:	681b      	ldr	r3, [r3, #0]
  4046de:	4618      	mov	r0, r3
  4046e0:	4b39      	ldr	r3, [pc, #228]	; (4047c8 <_spi_m_dma_transfer+0xfc>)
  4046e2:	4798      	blx	r3
  4046e4:	6178      	str	r0, [r7, #20]
	uint8_t                    rx_ch = _spi_get_rx_dma_channel(dev->prvt);
  4046e6:	68fb      	ldr	r3, [r7, #12]
  4046e8:	681b      	ldr	r3, [r3, #0]
  4046ea:	4618      	mov	r0, r3
  4046ec:	4b37      	ldr	r3, [pc, #220]	; (4047cc <_spi_m_dma_transfer+0x100>)
  4046ee:	4798      	blx	r3
  4046f0:	4603      	mov	r3, r0
  4046f2:	74fb      	strb	r3, [r7, #19]
	uint8_t                    tx_ch = _spi_get_tx_dma_channel(dev->prvt);
  4046f4:	68fb      	ldr	r3, [r7, #12]
  4046f6:	681b      	ldr	r3, [r3, #0]
  4046f8:	4618      	mov	r0, r3
  4046fa:	4b35      	ldr	r3, [pc, #212]	; (4047d0 <_spi_m_dma_transfer+0x104>)
  4046fc:	4798      	blx	r3
  4046fe:	4603      	mov	r3, r0
  404700:	74bb      	strb	r3, [r7, #18]

	if (rxbuf) {
  404702:	687b      	ldr	r3, [r7, #4]
  404704:	2b00      	cmp	r3, #0
  404706:	d01b      	beq.n	404740 <_spi_m_dma_transfer+0x74>
		/* Enable spi rx */
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
  404708:	68fb      	ldr	r3, [r7, #12]
  40470a:	681b      	ldr	r3, [r3, #0]
  40470c:	4618      	mov	r0, r3
  40470e:	4b31      	ldr	r3, [pc, #196]	; (4047d4 <_spi_m_dma_transfer+0x108>)
  404710:	4798      	blx	r3
  404712:	4603      	mov	r3, r0
  404714:	461a      	mov	r2, r3
  404716:	7cfb      	ldrb	r3, [r7, #19]
  404718:	4611      	mov	r1, r2
  40471a:	4618      	mov	r0, r3
  40471c:	4b2e      	ldr	r3, [pc, #184]	; (4047d8 <_spi_m_dma_transfer+0x10c>)
  40471e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
  404720:	7cfb      	ldrb	r3, [r7, #19]
  404722:	6879      	ldr	r1, [r7, #4]
  404724:	4618      	mov	r0, r3
  404726:	4b2d      	ldr	r3, [pc, #180]	; (4047dc <_spi_m_dma_transfer+0x110>)
  404728:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
  40472a:	887a      	ldrh	r2, [r7, #2]
  40472c:	7cfb      	ldrb	r3, [r7, #19]
  40472e:	4611      	mov	r1, r2
  404730:	4618      	mov	r0, r3
  404732:	4b2b      	ldr	r3, [pc, #172]	; (4047e0 <_spi_m_dma_transfer+0x114>)
  404734:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
  404736:	7cfb      	ldrb	r3, [r7, #19]
  404738:	2100      	movs	r1, #0
  40473a:	4618      	mov	r0, r3
  40473c:	4b29      	ldr	r3, [pc, #164]	; (4047e4 <_spi_m_dma_transfer+0x118>)
  40473e:	4798      	blx	r3
	}

	if (txbuf) {
  404740:	68bb      	ldr	r3, [r7, #8]
  404742:	2b00      	cmp	r3, #0
  404744:	d017      	beq.n	404776 <_spi_m_dma_transfer+0xaa>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
  404746:	7cbb      	ldrb	r3, [r7, #18]
  404748:	68b9      	ldr	r1, [r7, #8]
  40474a:	4618      	mov	r0, r3
  40474c:	4b22      	ldr	r3, [pc, #136]	; (4047d8 <_spi_m_dma_transfer+0x10c>)
  40474e:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  404750:	68fb      	ldr	r3, [r7, #12]
  404752:	681b      	ldr	r3, [r3, #0]
  404754:	4618      	mov	r0, r3
  404756:	4b24      	ldr	r3, [pc, #144]	; (4047e8 <_spi_m_dma_transfer+0x11c>)
  404758:	4798      	blx	r3
  40475a:	4603      	mov	r3, r0
  40475c:	461a      	mov	r2, r3
  40475e:	7cbb      	ldrb	r3, [r7, #18]
  404760:	4611      	mov	r1, r2
  404762:	4618      	mov	r0, r3
  404764:	4b1d      	ldr	r3, [pc, #116]	; (4047dc <_spi_m_dma_transfer+0x110>)
  404766:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  404768:	887a      	ldrh	r2, [r7, #2]
  40476a:	7cbb      	ldrb	r3, [r7, #18]
  40476c:	4611      	mov	r1, r2
  40476e:	4618      	mov	r0, r3
  404770:	4b1b      	ldr	r3, [pc, #108]	; (4047e0 <_spi_m_dma_transfer+0x114>)
  404772:	4798      	blx	r3
  404774:	e01e      	b.n	4047b4 <_spi_m_dma_transfer+0xe8>
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
  404776:	697b      	ldr	r3, [r7, #20]
  404778:	f103 0210 	add.w	r2, r3, #16
  40477c:	7cbb      	ldrb	r3, [r7, #18]
  40477e:	4611      	mov	r1, r2
  404780:	4618      	mov	r0, r3
  404782:	4b15      	ldr	r3, [pc, #84]	; (4047d8 <_spi_m_dma_transfer+0x10c>)
  404784:	4798      	blx	r3
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  404786:	68fb      	ldr	r3, [r7, #12]
  404788:	681b      	ldr	r3, [r3, #0]
  40478a:	4618      	mov	r0, r3
  40478c:	4b16      	ldr	r3, [pc, #88]	; (4047e8 <_spi_m_dma_transfer+0x11c>)
  40478e:	4798      	blx	r3
  404790:	4603      	mov	r3, r0
  404792:	461a      	mov	r2, r3
  404794:	7cbb      	ldrb	r3, [r7, #18]
  404796:	4611      	mov	r1, r2
  404798:	4618      	mov	r0, r3
  40479a:	4b10      	ldr	r3, [pc, #64]	; (4047dc <_spi_m_dma_transfer+0x110>)
  40479c:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
  40479e:	7cbb      	ldrb	r3, [r7, #18]
  4047a0:	2100      	movs	r1, #0
  4047a2:	4618      	mov	r0, r3
  4047a4:	4b11      	ldr	r3, [pc, #68]	; (4047ec <_spi_m_dma_transfer+0x120>)
  4047a6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  4047a8:	887a      	ldrh	r2, [r7, #2]
  4047aa:	7cbb      	ldrb	r3, [r7, #18]
  4047ac:	4611      	mov	r1, r2
  4047ae:	4618      	mov	r0, r3
  4047b0:	4b0b      	ldr	r3, [pc, #44]	; (4047e0 <_spi_m_dma_transfer+0x114>)
  4047b2:	4798      	blx	r3
	}
	_dma_enable_transaction(tx_ch, false);
  4047b4:	7cbb      	ldrb	r3, [r7, #18]
  4047b6:	2100      	movs	r1, #0
  4047b8:	4618      	mov	r0, r3
  4047ba:	4b0a      	ldr	r3, [pc, #40]	; (4047e4 <_spi_m_dma_transfer+0x118>)
  4047bc:	4798      	blx	r3

	return ERR_NONE;
  4047be:	2300      	movs	r3, #0
}
  4047c0:	4618      	mov	r0, r3
  4047c2:	3718      	adds	r7, #24
  4047c4:	46bd      	mov	sp, r7
  4047c6:	bd80      	pop	{r7, pc}
  4047c8:	0040426d 	.word	0x0040426d
  4047cc:	00404245 	.word	0x00404245
  4047d0:	0040421d 	.word	0x0040421d
  4047d4:	0040433f 	.word	0x0040433f
  4047d8:	004075c1 	.word	0x004075c1
  4047dc:	00407595 	.word	0x00407595
  4047e0:	0040765d 	.word	0x0040765d
  4047e4:	004076a1 	.word	0x004076a1
  4047e8:	00404357 	.word	0x00404357
  4047ec:	004075ed 	.word	0x004075ed

004047f0 <hri_twihs_get_SR_TXCOMP_bit>:
{
	((Twihs *)hw)->TWIHS_IDR = mask;
}

static inline bool hri_twihs_get_SR_TXCOMP_bit(const void *const hw)
{
  4047f0:	b480      	push	{r7}
  4047f2:	b083      	sub	sp, #12
  4047f4:	af00      	add	r7, sp, #0
  4047f6:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  4047f8:	687b      	ldr	r3, [r7, #4]
  4047fa:	6a1b      	ldr	r3, [r3, #32]
  4047fc:	f003 0301 	and.w	r3, r3, #1
  404800:	2b00      	cmp	r3, #0
  404802:	bf14      	ite	ne
  404804:	2301      	movne	r3, #1
  404806:	2300      	moveq	r3, #0
  404808:	b2db      	uxtb	r3, r3
}
  40480a:	4618      	mov	r0, r3
  40480c:	370c      	adds	r7, #12
  40480e:	46bd      	mov	sp, r7
  404810:	f85d 7b04 	ldr.w	r7, [sp], #4
  404814:	4770      	bx	lr

00404816 <hri_twihs_get_SR_RXRDY_bit>:

static inline bool hri_twihs_get_SR_RXRDY_bit(const void *const hw)
{
  404816:	b480      	push	{r7}
  404818:	b083      	sub	sp, #12
  40481a:	af00      	add	r7, sp, #0
  40481c:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  40481e:	687b      	ldr	r3, [r7, #4]
  404820:	6a1b      	ldr	r3, [r3, #32]
  404822:	f003 0302 	and.w	r3, r3, #2
  404826:	2b00      	cmp	r3, #0
  404828:	bf14      	ite	ne
  40482a:	2301      	movne	r3, #1
  40482c:	2300      	moveq	r3, #0
  40482e:	b2db      	uxtb	r3, r3
}
  404830:	4618      	mov	r0, r3
  404832:	370c      	adds	r7, #12
  404834:	46bd      	mov	sp, r7
  404836:	f85d 7b04 	ldr.w	r7, [sp], #4
  40483a:	4770      	bx	lr

0040483c <hri_twihs_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_sr_reg_t hri_twihs_read_SR_reg(const void *const hw)
{
  40483c:	b480      	push	{r7}
  40483e:	b083      	sub	sp, #12
  404840:	af00      	add	r7, sp, #0
  404842:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_SR;
  404844:	687b      	ldr	r3, [r7, #4]
  404846:	6a1b      	ldr	r3, [r3, #32]
}
  404848:	4618      	mov	r0, r3
  40484a:	370c      	adds	r7, #12
  40484c:	46bd      	mov	sp, r7
  40484e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404852:	4770      	bx	lr

00404854 <hri_twihs_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_rhr_reg_t hri_twihs_read_RHR_reg(const void *const hw)
{
  404854:	b480      	push	{r7}
  404856:	b083      	sub	sp, #12
  404858:	af00      	add	r7, sp, #0
  40485a:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_RHR;
  40485c:	687b      	ldr	r3, [r7, #4]
  40485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  404860:	4618      	mov	r0, r3
  404862:	370c      	adds	r7, #12
  404864:	46bd      	mov	sp, r7
  404866:	f85d 7b04 	ldr.w	r7, [sp], #4
  40486a:	4770      	bx	lr

0040486c <hri_twihs_write_MMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_MMR_reg(const void *const hw, hri_twihs_mmr_reg_t data)
{
  40486c:	b480      	push	{r7}
  40486e:	b083      	sub	sp, #12
  404870:	af00      	add	r7, sp, #0
  404872:	6078      	str	r0, [r7, #4]
  404874:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_MMR = data;
  404876:	687b      	ldr	r3, [r7, #4]
  404878:	683a      	ldr	r2, [r7, #0]
  40487a:	605a      	str	r2, [r3, #4]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  40487c:	bf00      	nop
  40487e:	370c      	adds	r7, #12
  404880:	46bd      	mov	sp, r7
  404882:	f85d 7b04 	ldr.w	r7, [sp], #4
  404886:	4770      	bx	lr

00404888 <hri_twihs_write_IADR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_IADR_reg(const void *const hw, hri_twihs_iadr_reg_t data)
{
  404888:	b480      	push	{r7}
  40488a:	b083      	sub	sp, #12
  40488c:	af00      	add	r7, sp, #0
  40488e:	6078      	str	r0, [r7, #4]
  404890:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_IADR = data;
  404892:	687b      	ldr	r3, [r7, #4]
  404894:	683a      	ldr	r2, [r7, #0]
  404896:	60da      	str	r2, [r3, #12]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404898:	bf00      	nop
  40489a:	370c      	adds	r7, #12
  40489c:	46bd      	mov	sp, r7
  40489e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048a2:	4770      	bx	lr

004048a4 <hri_twihs_write_CWGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_CWGR_reg(const void *const hw, hri_twihs_cwgr_reg_t data)
{
  4048a4:	b480      	push	{r7}
  4048a6:	b083      	sub	sp, #12
  4048a8:	af00      	add	r7, sp, #0
  4048aa:	6078      	str	r0, [r7, #4]
  4048ac:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CWGR = data;
  4048ae:	687b      	ldr	r3, [r7, #4]
  4048b0:	683a      	ldr	r2, [r7, #0]
  4048b2:	611a      	str	r2, [r3, #16]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4048b4:	bf00      	nop
  4048b6:	370c      	adds	r7, #12
  4048b8:	46bd      	mov	sp, r7
  4048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048be:	4770      	bx	lr

004048c0 <hri_twihs_write_SMBTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_SMBTR_reg(const void *const hw, hri_twihs_smbtr_reg_t data)
{
  4048c0:	b480      	push	{r7}
  4048c2:	b083      	sub	sp, #12
  4048c4:	af00      	add	r7, sp, #0
  4048c6:	6078      	str	r0, [r7, #4]
  4048c8:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_SMBTR = data;
  4048ca:	687b      	ldr	r3, [r7, #4]
  4048cc:	683a      	ldr	r2, [r7, #0]
  4048ce:	639a      	str	r2, [r3, #56]	; 0x38
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4048d0:	bf00      	nop
  4048d2:	370c      	adds	r7, #12
  4048d4:	46bd      	mov	sp, r7
  4048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048da:	4770      	bx	lr

004048dc <hri_twihs_write_FILTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_FILTR_reg(const void *const hw, hri_twihs_filtr_reg_t data)
{
  4048dc:	b480      	push	{r7}
  4048de:	b083      	sub	sp, #12
  4048e0:	af00      	add	r7, sp, #0
  4048e2:	6078      	str	r0, [r7, #4]
  4048e4:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_FILTR = data;
  4048e6:	687b      	ldr	r3, [r7, #4]
  4048e8:	683a      	ldr	r2, [r7, #0]
  4048ea:	645a      	str	r2, [r3, #68]	; 0x44
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  4048ec:	bf00      	nop
  4048ee:	370c      	adds	r7, #12
  4048f0:	46bd      	mov	sp, r7
  4048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048f6:	4770      	bx	lr

004048f8 <hri_twihs_write_CR_reg>:
{
	return ((Twihs *)hw)->TWIHS_WPMR;
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
  4048f8:	b480      	push	{r7}
  4048fa:	b083      	sub	sp, #12
  4048fc:	af00      	add	r7, sp, #0
  4048fe:	6078      	str	r0, [r7, #4]
  404900:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  404902:	687b      	ldr	r3, [r7, #4]
  404904:	683a      	ldr	r2, [r7, #0]
  404906:	601a      	str	r2, [r3, #0]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404908:	bf00      	nop
  40490a:	370c      	adds	r7, #12
  40490c:	46bd      	mov	sp, r7
  40490e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404912:	4770      	bx	lr

00404914 <hri_twihs_write_THR_reg>:

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
  404914:	b480      	push	{r7}
  404916:	b083      	sub	sp, #12
  404918:	af00      	add	r7, sp, #0
  40491a:	6078      	str	r0, [r7, #4]
  40491c:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  40491e:	687b      	ldr	r3, [r7, #4]
  404920:	683a      	ldr	r2, [r7, #0]
  404922:	635a      	str	r2, [r3, #52]	; 0x34
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  404924:	bf00      	nop
  404926:	370c      	adds	r7, #12
  404928:	46bd      	mov	sp, r7
  40492a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40492e:	4770      	bx	lr

00404930 <_get_i2cm_sync_cfg>:

/**
 * \berif Retrieve I2C Master Sync configuration instance
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
  404930:	b480      	push	{r7}
  404932:	b085      	sub	sp, #20
  404934:	af00      	add	r7, sp, #0
  404936:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  404938:	2300      	movs	r3, #0
  40493a:	73fb      	strb	r3, [r7, #15]
  40493c:	e015      	b.n	40496a <_get_i2cm_sync_cfg+0x3a>
		if (_i2cm_sync_cfgs[i].hw == hw) {
  40493e:	7bfa      	ldrb	r2, [r7, #15]
  404940:	490f      	ldr	r1, [pc, #60]	; (404980 <_get_i2cm_sync_cfg+0x50>)
  404942:	4613      	mov	r3, r2
  404944:	005b      	lsls	r3, r3, #1
  404946:	4413      	add	r3, r2
  404948:	00db      	lsls	r3, r3, #3
  40494a:	440b      	add	r3, r1
  40494c:	681a      	ldr	r2, [r3, #0]
  40494e:	687b      	ldr	r3, [r7, #4]
  404950:	429a      	cmp	r2, r3
  404952:	d107      	bne.n	404964 <_get_i2cm_sync_cfg+0x34>
			return &(_i2cm_sync_cfgs[i]);
  404954:	7bfa      	ldrb	r2, [r7, #15]
  404956:	4613      	mov	r3, r2
  404958:	005b      	lsls	r3, r3, #1
  40495a:	4413      	add	r3, r2
  40495c:	00db      	lsls	r3, r3, #3
  40495e:	4a08      	ldr	r2, [pc, #32]	; (404980 <_get_i2cm_sync_cfg+0x50>)
  404960:	4413      	add	r3, r2
  404962:	e006      	b.n	404972 <_get_i2cm_sync_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  404964:	7bfb      	ldrb	r3, [r7, #15]
  404966:	3301      	adds	r3, #1
  404968:	73fb      	strb	r3, [r7, #15]
  40496a:	7bfb      	ldrb	r3, [r7, #15]
  40496c:	2b01      	cmp	r3, #1
  40496e:	d9e6      	bls.n	40493e <_get_i2cm_sync_cfg+0xe>
		}
	}
	return NULL;
  404970:	2300      	movs	r3, #0
}
  404972:	4618      	mov	r0, r3
  404974:	3714      	adds	r7, #20
  404976:	46bd      	mov	sp, r7
  404978:	f85d 7b04 	ldr.w	r7, [sp], #4
  40497c:	4770      	bx	lr
  40497e:	bf00      	nop
  404980:	00407c80 	.word	0x00407c80

00404984 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  404984:	b580      	push	{r7, lr}
  404986:	b084      	sub	sp, #16
  404988:	af00      	add	r7, sp, #0
  40498a:	6078      	str	r0, [r7, #4]
  40498c:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
  40498e:	687b      	ldr	r3, [r7, #4]
  404990:	2b00      	cmp	r3, #0
  404992:	d004      	beq.n	40499e <_i2c_m_sync_init+0x1a>
  404994:	683b      	ldr	r3, [r7, #0]
  404996:	2b00      	cmp	r3, #0
  404998:	d001      	beq.n	40499e <_i2c_m_sync_init+0x1a>
  40499a:	2301      	movs	r3, #1
  40499c:	e000      	b.n	4049a0 <_i2c_m_sync_init+0x1c>
  40499e:	2300      	movs	r3, #0
  4049a0:	f003 0301 	and.w	r3, r3, #1
  4049a4:	b2db      	uxtb	r3, r3
  4049a6:	227e      	movs	r2, #126	; 0x7e
  4049a8:	4918      	ldr	r1, [pc, #96]	; (404a0c <_i2c_m_sync_init+0x88>)
  4049aa:	4618      	mov	r0, r3
  4049ac:	4b18      	ldr	r3, [pc, #96]	; (404a10 <_i2c_m_sync_init+0x8c>)
  4049ae:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  4049b0:	687b      	ldr	r3, [r7, #4]
  4049b2:	683a      	ldr	r2, [r7, #0]
  4049b4:	611a      	str	r2, [r3, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  4049b6:	687b      	ldr	r3, [r7, #4]
  4049b8:	691b      	ldr	r3, [r3, #16]
  4049ba:	4618      	mov	r0, r3
  4049bc:	4b15      	ldr	r3, [pc, #84]	; (404a14 <_i2c_m_sync_init+0x90>)
  4049be:	4798      	blx	r3
  4049c0:	60f8      	str	r0, [r7, #12]

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  4049c2:	687b      	ldr	r3, [r7, #4]
  4049c4:	691a      	ldr	r2, [r3, #16]
  4049c6:	68fb      	ldr	r3, [r7, #12]
  4049c8:	685b      	ldr	r3, [r3, #4]
  4049ca:	4619      	mov	r1, r3
  4049cc:	4610      	mov	r0, r2
  4049ce:	4b12      	ldr	r3, [pc, #72]	; (404a18 <_i2c_m_sync_init+0x94>)
  4049d0:	4798      	blx	r3
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  4049d2:	687b      	ldr	r3, [r7, #4]
  4049d4:	691a      	ldr	r2, [r3, #16]
  4049d6:	68fb      	ldr	r3, [r7, #12]
  4049d8:	689b      	ldr	r3, [r3, #8]
  4049da:	4619      	mov	r1, r3
  4049dc:	4610      	mov	r0, r2
  4049de:	4b0f      	ldr	r3, [pc, #60]	; (404a1c <_i2c_m_sync_init+0x98>)
  4049e0:	4798      	blx	r3
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  4049e2:	687b      	ldr	r3, [r7, #4]
  4049e4:	691a      	ldr	r2, [r3, #16]
  4049e6:	68fb      	ldr	r3, [r7, #12]
  4049e8:	68db      	ldr	r3, [r3, #12]
  4049ea:	4619      	mov	r1, r3
  4049ec:	4610      	mov	r0, r2
  4049ee:	4b0c      	ldr	r3, [pc, #48]	; (404a20 <_i2c_m_sync_init+0x9c>)
  4049f0:	4798      	blx	r3
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  4049f2:	687b      	ldr	r3, [r7, #4]
  4049f4:	691a      	ldr	r2, [r3, #16]
  4049f6:	68fb      	ldr	r3, [r7, #12]
  4049f8:	691b      	ldr	r3, [r3, #16]
  4049fa:	4619      	mov	r1, r3
  4049fc:	4610      	mov	r0, r2
  4049fe:	4b09      	ldr	r3, [pc, #36]	; (404a24 <_i2c_m_sync_init+0xa0>)
  404a00:	4798      	blx	r3

	return ERR_NONE;
  404a02:	2300      	movs	r3, #0
}
  404a04:	4618      	mov	r0, r3
  404a06:	3710      	adds	r7, #16
  404a08:	46bd      	mov	sp, r7
  404a0a:	bd80      	pop	{r7, pc}
  404a0c:	00407cb0 	.word	0x00407cb0
  404a10:	00402d41 	.word	0x00402d41
  404a14:	00404931 	.word	0x00404931
  404a18:	004048f9 	.word	0x004048f9
  404a1c:	004048c1 	.word	0x004048c1
  404a20:	004048dd 	.word	0x004048dd
  404a24:	004048a5 	.word	0x004048a5

00404a28 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404a28:	b580      	push	{r7, lr}
  404a2a:	b082      	sub	sp, #8
  404a2c:	af00      	add	r7, sp, #0
  404a2e:	6078      	str	r0, [r7, #4]
  404a30:	6039      	str	r1, [r7, #0]
	ASSERT(dev && msg);
  404a32:	687b      	ldr	r3, [r7, #4]
  404a34:	2b00      	cmp	r3, #0
  404a36:	d004      	beq.n	404a42 <_i2c_m_sync_transfer+0x1a>
  404a38:	683b      	ldr	r3, [r7, #0]
  404a3a:	2b00      	cmp	r3, #0
  404a3c:	d001      	beq.n	404a42 <_i2c_m_sync_transfer+0x1a>
  404a3e:	2301      	movs	r3, #1
  404a40:	e000      	b.n	404a44 <_i2c_m_sync_transfer+0x1c>
  404a42:	2300      	movs	r3, #0
  404a44:	f003 0301 	and.w	r3, r3, #1
  404a48:	b2db      	uxtb	r3, r3
  404a4a:	22c0      	movs	r2, #192	; 0xc0
  404a4c:	4911      	ldr	r1, [pc, #68]	; (404a94 <_i2c_m_sync_transfer+0x6c>)
  404a4e:	4618      	mov	r0, r3
  404a50:	4b11      	ldr	r3, [pc, #68]	; (404a98 <_i2c_m_sync_transfer+0x70>)
  404a52:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  404a54:	687b      	ldr	r3, [r7, #4]
  404a56:	885b      	ldrh	r3, [r3, #2]
  404a58:	b29b      	uxth	r3, r3
  404a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404a5e:	2b00      	cmp	r3, #0
  404a60:	d002      	beq.n	404a68 <_i2c_m_sync_transfer+0x40>
		return I2C_ERR_BUSY;
  404a62:	f06f 0305 	mvn.w	r3, #5
  404a66:	e011      	b.n	404a8c <_i2c_m_sync_transfer+0x64>
	}

	if (msg->flags & I2C_M_RD) {
  404a68:	683b      	ldr	r3, [r7, #0]
  404a6a:	885b      	ldrh	r3, [r3, #2]
  404a6c:	b29b      	uxth	r3, r3
  404a6e:	f003 0301 	and.w	r3, r3, #1
  404a72:	2b00      	cmp	r3, #0
  404a74:	d005      	beq.n	404a82 <_i2c_m_sync_transfer+0x5a>
		return _i2c_m_sync_read(dev, msg);
  404a76:	6839      	ldr	r1, [r7, #0]
  404a78:	6878      	ldr	r0, [r7, #4]
  404a7a:	4b08      	ldr	r3, [pc, #32]	; (404a9c <_i2c_m_sync_transfer+0x74>)
  404a7c:	4798      	blx	r3
  404a7e:	4603      	mov	r3, r0
  404a80:	e004      	b.n	404a8c <_i2c_m_sync_transfer+0x64>
	} else {
		return _i2c_m_sync_write(dev, msg);
  404a82:	6839      	ldr	r1, [r7, #0]
  404a84:	6878      	ldr	r0, [r7, #4]
  404a86:	4b06      	ldr	r3, [pc, #24]	; (404aa0 <_i2c_m_sync_transfer+0x78>)
  404a88:	4798      	blx	r3
  404a8a:	4603      	mov	r3, r0
	}
}
  404a8c:	4618      	mov	r0, r3
  404a8e:	3708      	adds	r7, #8
  404a90:	46bd      	mov	sp, r7
  404a92:	bd80      	pop	{r7, pc}
  404a94:	00407cb0 	.word	0x00407cb0
  404a98:	00402d41 	.word	0x00402d41
  404a9c:	00404bd5 	.word	0x00404bd5
  404aa0:	00404aa5 	.word	0x00404aa5

00404aa4 <_i2c_m_sync_write>:

static inline int32_t _i2c_m_sync_write(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404aa4:	b580      	push	{r7, lr}
  404aa6:	b086      	sub	sp, #24
  404aa8:	af00      	add	r7, sp, #0
  404aaa:	6078      	str	r0, [r7, #4]
  404aac:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;
  404aae:	2300      	movs	r3, #0
  404ab0:	613b      	str	r3, [r7, #16]

	msg->flags |= I2C_M_BUSY;
  404ab2:	683b      	ldr	r3, [r7, #0]
  404ab4:	885b      	ldrh	r3, [r3, #2]
  404ab6:	b29b      	uxth	r3, r3
  404ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404abc:	b29a      	uxth	r2, r3
  404abe:	683b      	ldr	r3, [r7, #0]
  404ac0:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  404ac2:	683b      	ldr	r3, [r7, #0]
  404ac4:	881b      	ldrh	r3, [r3, #0]
  404ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  404aca:	2b00      	cmp	r3, #0
  404acc:	d01b      	beq.n	404b06 <_i2c_m_sync_write+0x62>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  404ace:	687b      	ldr	r3, [r7, #4]
  404ad0:	691a      	ldr	r2, [r3, #16]
  404ad2:	683b      	ldr	r3, [r7, #0]
  404ad4:	881b      	ldrh	r3, [r3, #0]
  404ad6:	0a1b      	lsrs	r3, r3, #8
  404ad8:	b29b      	uxth	r3, r3
  404ada:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  404ade:	b29b      	uxth	r3, r3
  404ae0:	041b      	lsls	r3, r3, #16
  404ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404aea:	4619      	mov	r1, r3
  404aec:	4610      	mov	r0, r2
  404aee:	4b33      	ldr	r3, [pc, #204]	; (404bbc <_i2c_m_sync_write+0x118>)
  404af0:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  404af2:	687b      	ldr	r3, [r7, #4]
  404af4:	691a      	ldr	r2, [r3, #16]
  404af6:	683b      	ldr	r3, [r7, #0]
  404af8:	881b      	ldrh	r3, [r3, #0]
  404afa:	b2db      	uxtb	r3, r3
  404afc:	4619      	mov	r1, r3
  404afe:	4610      	mov	r0, r2
  404b00:	4b2f      	ldr	r3, [pc, #188]	; (404bc0 <_i2c_m_sync_write+0x11c>)
  404b02:	4798      	blx	r3
  404b04:	e00a      	b.n	404b1c <_i2c_m_sync_write+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  404b06:	687b      	ldr	r3, [r7, #4]
  404b08:	691a      	ldr	r2, [r3, #16]
  404b0a:	683b      	ldr	r3, [r7, #0]
  404b0c:	881b      	ldrh	r3, [r3, #0]
  404b0e:	041b      	lsls	r3, r3, #16
  404b10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404b14:	4619      	mov	r1, r3
  404b16:	4610      	mov	r0, r2
  404b18:	4b28      	ldr	r3, [pc, #160]	; (404bbc <_i2c_m_sync_write+0x118>)
  404b1a:	4798      	blx	r3
	}

	for (i = 0; i < msg->len; i++) {
  404b1c:	2300      	movs	r3, #0
  404b1e:	617b      	str	r3, [r7, #20]
  404b20:	e020      	b.n	404b64 <_i2c_m_sync_write+0xc0>
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
  404b22:	687b      	ldr	r3, [r7, #4]
  404b24:	691b      	ldr	r3, [r3, #16]
  404b26:	4618      	mov	r0, r3
  404b28:	4b26      	ldr	r3, [pc, #152]	; (404bc4 <_i2c_m_sync_write+0x120>)
  404b2a:	4798      	blx	r3
  404b2c:	60f8      	str	r0, [r7, #12]
			if (sr & TWIHS_SR_NACK) {
  404b2e:	68fb      	ldr	r3, [r7, #12]
  404b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404b34:	2b00      	cmp	r3, #0
  404b36:	d003      	beq.n	404b40 <_i2c_m_sync_write+0x9c>
				ret = I2C_NACK;
  404b38:	f06f 0301 	mvn.w	r3, #1
  404b3c:	613b      	str	r3, [r7, #16]
				break;
  404b3e:	e004      	b.n	404b4a <_i2c_m_sync_write+0xa6>
			}
		} while (!(sr & TWIHS_SR_TXRDY));
  404b40:	68fb      	ldr	r3, [r7, #12]
  404b42:	f003 0304 	and.w	r3, r3, #4
  404b46:	2b00      	cmp	r3, #0
  404b48:	d0eb      	beq.n	404b22 <_i2c_m_sync_write+0x7e>

		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  404b4a:	687b      	ldr	r3, [r7, #4]
  404b4c:	6918      	ldr	r0, [r3, #16]
  404b4e:	683b      	ldr	r3, [r7, #0]
  404b50:	689a      	ldr	r2, [r3, #8]
  404b52:	697b      	ldr	r3, [r7, #20]
  404b54:	4413      	add	r3, r2
  404b56:	781b      	ldrb	r3, [r3, #0]
  404b58:	4619      	mov	r1, r3
  404b5a:	4b1b      	ldr	r3, [pc, #108]	; (404bc8 <_i2c_m_sync_write+0x124>)
  404b5c:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  404b5e:	697b      	ldr	r3, [r7, #20]
  404b60:	3301      	adds	r3, #1
  404b62:	617b      	str	r3, [r7, #20]
  404b64:	683b      	ldr	r3, [r7, #0]
  404b66:	685b      	ldr	r3, [r3, #4]
  404b68:	461a      	mov	r2, r3
  404b6a:	697b      	ldr	r3, [r7, #20]
  404b6c:	429a      	cmp	r2, r3
  404b6e:	d8d8      	bhi.n	404b22 <_i2c_m_sync_write+0x7e>
	}

	if (msg->flags & I2C_M_STOP) {
  404b70:	683b      	ldr	r3, [r7, #0]
  404b72:	885b      	ldrh	r3, [r3, #2]
  404b74:	b29b      	uxth	r3, r3
  404b76:	b21b      	sxth	r3, r3
  404b78:	2b00      	cmp	r3, #0
  404b7a:	da11      	bge.n	404ba0 <_i2c_m_sync_write+0xfc>
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  404b7c:	687b      	ldr	r3, [r7, #4]
  404b7e:	691b      	ldr	r3, [r3, #16]
  404b80:	2102      	movs	r1, #2
  404b82:	4618      	mov	r0, r3
  404b84:	4b11      	ldr	r3, [pc, #68]	; (404bcc <_i2c_m_sync_write+0x128>)
  404b86:	4798      	blx	r3
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  404b88:	bf00      	nop
  404b8a:	687b      	ldr	r3, [r7, #4]
  404b8c:	691b      	ldr	r3, [r3, #16]
  404b8e:	4618      	mov	r0, r3
  404b90:	4b0f      	ldr	r3, [pc, #60]	; (404bd0 <_i2c_m_sync_write+0x12c>)
  404b92:	4798      	blx	r3
  404b94:	4603      	mov	r3, r0
  404b96:	f083 0301 	eor.w	r3, r3, #1
  404b9a:	b2db      	uxtb	r3, r3
  404b9c:	2b00      	cmp	r3, #0
  404b9e:	d1f4      	bne.n	404b8a <_i2c_m_sync_write+0xe6>
		};
	}

	dev->service.msg.flags &= ~I2C_M_BUSY;
  404ba0:	687b      	ldr	r3, [r7, #4]
  404ba2:	885b      	ldrh	r3, [r3, #2]
  404ba4:	b29b      	uxth	r3, r3
  404ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404baa:	b29a      	uxth	r2, r3
  404bac:	687b      	ldr	r3, [r7, #4]
  404bae:	805a      	strh	r2, [r3, #2]

	return ret;
  404bb0:	693b      	ldr	r3, [r7, #16]
}
  404bb2:	4618      	mov	r0, r3
  404bb4:	3718      	adds	r7, #24
  404bb6:	46bd      	mov	sp, r7
  404bb8:	bd80      	pop	{r7, pc}
  404bba:	bf00      	nop
  404bbc:	0040486d 	.word	0x0040486d
  404bc0:	00404889 	.word	0x00404889
  404bc4:	0040483d 	.word	0x0040483d
  404bc8:	00404915 	.word	0x00404915
  404bcc:	004048f9 	.word	0x004048f9
  404bd0:	004047f1 	.word	0x004047f1

00404bd4 <_i2c_m_sync_read>:

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  404bd4:	b590      	push	{r4, r7, lr}
  404bd6:	b085      	sub	sp, #20
  404bd8:	af00      	add	r7, sp, #0
  404bda:	6078      	str	r0, [r7, #4]
  404bdc:	6039      	str	r1, [r7, #0]
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  404bde:	683b      	ldr	r3, [r7, #0]
  404be0:	885b      	ldrh	r3, [r3, #2]
  404be2:	b29b      	uxth	r3, r3
  404be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404be8:	b29a      	uxth	r2, r3
  404bea:	683b      	ldr	r3, [r7, #0]
  404bec:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  404bee:	683b      	ldr	r3, [r7, #0]
  404bf0:	881b      	ldrh	r3, [r3, #0]
  404bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  404bf6:	2b00      	cmp	r3, #0
  404bf8:	d01b      	beq.n	404c32 <_i2c_m_sync_read+0x5e>
		hri_twihs_write_MMR_reg(dev->hw,
  404bfa:	687b      	ldr	r3, [r7, #4]
  404bfc:	691a      	ldr	r2, [r3, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  404bfe:	683b      	ldr	r3, [r7, #0]
  404c00:	881b      	ldrh	r3, [r3, #0]
  404c02:	0a1b      	lsrs	r3, r3, #8
  404c04:	b29b      	uxth	r3, r3
  404c06:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  404c0a:	b29b      	uxth	r3, r3
  404c0c:	041b      	lsls	r3, r3, #16
  404c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404c12:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
		hri_twihs_write_MMR_reg(dev->hw,
  404c16:	4619      	mov	r1, r3
  404c18:	4610      	mov	r0, r2
  404c1a:	4b38      	ldr	r3, [pc, #224]	; (404cfc <_i2c_m_sync_read+0x128>)
  404c1c:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  404c1e:	687b      	ldr	r3, [r7, #4]
  404c20:	691a      	ldr	r2, [r3, #16]
  404c22:	683b      	ldr	r3, [r7, #0]
  404c24:	881b      	ldrh	r3, [r3, #0]
  404c26:	b2db      	uxtb	r3, r3
  404c28:	4619      	mov	r1, r3
  404c2a:	4610      	mov	r0, r2
  404c2c:	4b34      	ldr	r3, [pc, #208]	; (404d00 <_i2c_m_sync_read+0x12c>)
  404c2e:	4798      	blx	r3
  404c30:	e00c      	b.n	404c4c <_i2c_m_sync_read+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  404c32:	687b      	ldr	r3, [r7, #4]
  404c34:	691a      	ldr	r2, [r3, #16]
  404c36:	683b      	ldr	r3, [r7, #0]
  404c38:	881b      	ldrh	r3, [r3, #0]
  404c3a:	041b      	lsls	r3, r3, #16
  404c3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  404c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404c44:	4619      	mov	r1, r3
  404c46:	4610      	mov	r0, r2
  404c48:	4b2c      	ldr	r3, [pc, #176]	; (404cfc <_i2c_m_sync_read+0x128>)
  404c4a:	4798      	blx	r3
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  404c4c:	687b      	ldr	r3, [r7, #4]
  404c4e:	691a      	ldr	r2, [r3, #16]
  404c50:	683b      	ldr	r3, [r7, #0]
  404c52:	685b      	ldr	r3, [r3, #4]
  404c54:	2b01      	cmp	r3, #1
  404c56:	d101      	bne.n	404c5c <_i2c_m_sync_read+0x88>
  404c58:	2303      	movs	r3, #3
  404c5a:	e000      	b.n	404c5e <_i2c_m_sync_read+0x8a>
  404c5c:	2301      	movs	r3, #1
  404c5e:	4619      	mov	r1, r3
  404c60:	4610      	mov	r0, r2
  404c62:	4b28      	ldr	r3, [pc, #160]	; (404d04 <_i2c_m_sync_read+0x130>)
  404c64:	4798      	blx	r3

	for (i = 0; i < msg->len; i++) {
  404c66:	2300      	movs	r3, #0
  404c68:	60fb      	str	r3, [r7, #12]
  404c6a:	e027      	b.n	404cbc <_i2c_m_sync_read+0xe8>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  404c6c:	bf00      	nop
  404c6e:	687b      	ldr	r3, [r7, #4]
  404c70:	691b      	ldr	r3, [r3, #16]
  404c72:	4618      	mov	r0, r3
  404c74:	4b24      	ldr	r3, [pc, #144]	; (404d08 <_i2c_m_sync_read+0x134>)
  404c76:	4798      	blx	r3
  404c78:	4603      	mov	r3, r0
  404c7a:	f083 0301 	eor.w	r3, r3, #1
  404c7e:	b2db      	uxtb	r3, r3
  404c80:	2b00      	cmp	r3, #0
  404c82:	d1f4      	bne.n	404c6e <_i2c_m_sync_read+0x9a>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  404c84:	683b      	ldr	r3, [r7, #0]
  404c86:	689a      	ldr	r2, [r3, #8]
  404c88:	68fb      	ldr	r3, [r7, #12]
  404c8a:	18d4      	adds	r4, r2, r3
  404c8c:	687b      	ldr	r3, [r7, #4]
  404c8e:	691b      	ldr	r3, [r3, #16]
  404c90:	4618      	mov	r0, r3
  404c92:	4b1e      	ldr	r3, [pc, #120]	; (404d0c <_i2c_m_sync_read+0x138>)
  404c94:	4798      	blx	r3
  404c96:	4603      	mov	r3, r0
  404c98:	b2db      	uxtb	r3, r3
  404c9a:	7023      	strb	r3, [r4, #0]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  404c9c:	683b      	ldr	r3, [r7, #0]
  404c9e:	685b      	ldr	r3, [r3, #4]
  404ca0:	3b02      	subs	r3, #2
  404ca2:	461a      	mov	r2, r3
  404ca4:	68fb      	ldr	r3, [r7, #12]
  404ca6:	429a      	cmp	r2, r3
  404ca8:	d105      	bne.n	404cb6 <_i2c_m_sync_read+0xe2>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  404caa:	687b      	ldr	r3, [r7, #4]
  404cac:	691b      	ldr	r3, [r3, #16]
  404cae:	2102      	movs	r1, #2
  404cb0:	4618      	mov	r0, r3
  404cb2:	4b14      	ldr	r3, [pc, #80]	; (404d04 <_i2c_m_sync_read+0x130>)
  404cb4:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  404cb6:	68fb      	ldr	r3, [r7, #12]
  404cb8:	3301      	adds	r3, #1
  404cba:	60fb      	str	r3, [r7, #12]
  404cbc:	683b      	ldr	r3, [r7, #0]
  404cbe:	685b      	ldr	r3, [r3, #4]
  404cc0:	461a      	mov	r2, r3
  404cc2:	68fb      	ldr	r3, [r7, #12]
  404cc4:	429a      	cmp	r2, r3
  404cc6:	d8d1      	bhi.n	404c6c <_i2c_m_sync_read+0x98>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  404cc8:	bf00      	nop
  404cca:	687b      	ldr	r3, [r7, #4]
  404ccc:	691b      	ldr	r3, [r3, #16]
  404cce:	4618      	mov	r0, r3
  404cd0:	4b0f      	ldr	r3, [pc, #60]	; (404d10 <_i2c_m_sync_read+0x13c>)
  404cd2:	4798      	blx	r3
  404cd4:	4603      	mov	r3, r0
  404cd6:	f083 0301 	eor.w	r3, r3, #1
  404cda:	b2db      	uxtb	r3, r3
  404cdc:	2b00      	cmp	r3, #0
  404cde:	d1f4      	bne.n	404cca <_i2c_m_sync_read+0xf6>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  404ce0:	687b      	ldr	r3, [r7, #4]
  404ce2:	885b      	ldrh	r3, [r3, #2]
  404ce4:	b29b      	uxth	r3, r3
  404ce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404cea:	b29a      	uxth	r2, r3
  404cec:	687b      	ldr	r3, [r7, #4]
  404cee:	805a      	strh	r2, [r3, #2]

	return ERR_NONE;
  404cf0:	2300      	movs	r3, #0
}
  404cf2:	4618      	mov	r0, r3
  404cf4:	3714      	adds	r7, #20
  404cf6:	46bd      	mov	sp, r7
  404cf8:	bd90      	pop	{r4, r7, pc}
  404cfa:	bf00      	nop
  404cfc:	0040486d 	.word	0x0040486d
  404d00:	00404889 	.word	0x00404889
  404d04:	004048f9 	.word	0x004048f9
  404d08:	00404817 	.word	0x00404817
  404d0c:	00404855 	.word	0x00404855
  404d10:	004047f1 	.word	0x004047f1

00404d14 <__NVIC_EnableIRQ>:
{
  404d14:	b480      	push	{r7}
  404d16:	b083      	sub	sp, #12
  404d18:	af00      	add	r7, sp, #0
  404d1a:	4603      	mov	r3, r0
  404d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d22:	2b00      	cmp	r3, #0
  404d24:	db0b      	blt.n	404d3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404d26:	4909      	ldr	r1, [pc, #36]	; (404d4c <__NVIC_EnableIRQ+0x38>)
  404d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d2c:	095b      	lsrs	r3, r3, #5
  404d2e:	79fa      	ldrb	r2, [r7, #7]
  404d30:	f002 021f 	and.w	r2, r2, #31
  404d34:	2001      	movs	r0, #1
  404d36:	fa00 f202 	lsl.w	r2, r0, r2
  404d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404d3e:	bf00      	nop
  404d40:	370c      	adds	r7, #12
  404d42:	46bd      	mov	sp, r7
  404d44:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d48:	4770      	bx	lr
  404d4a:	bf00      	nop
  404d4c:	e000e100 	.word	0xe000e100

00404d50 <__NVIC_DisableIRQ>:
{
  404d50:	b480      	push	{r7}
  404d52:	b083      	sub	sp, #12
  404d54:	af00      	add	r7, sp, #0
  404d56:	4603      	mov	r3, r0
  404d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d5e:	2b00      	cmp	r3, #0
  404d60:	db10      	blt.n	404d84 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404d62:	490b      	ldr	r1, [pc, #44]	; (404d90 <__NVIC_DisableIRQ+0x40>)
  404d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404d68:	095b      	lsrs	r3, r3, #5
  404d6a:	79fa      	ldrb	r2, [r7, #7]
  404d6c:	f002 021f 	and.w	r2, r2, #31
  404d70:	2001      	movs	r0, #1
  404d72:	fa00 f202 	lsl.w	r2, r0, r2
  404d76:	3320      	adds	r3, #32
  404d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  404d7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  404d80:	f3bf 8f6f 	isb	sy
}
  404d84:	bf00      	nop
  404d86:	370c      	adds	r7, #12
  404d88:	46bd      	mov	sp, r7
  404d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d8e:	4770      	bx	lr
  404d90:	e000e100 	.word	0xe000e100

00404d94 <__NVIC_ClearPendingIRQ>:
{
  404d94:	b480      	push	{r7}
  404d96:	b083      	sub	sp, #12
  404d98:	af00      	add	r7, sp, #0
  404d9a:	4603      	mov	r3, r0
  404d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404da2:	2b00      	cmp	r3, #0
  404da4:	db0c      	blt.n	404dc0 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  404da6:	4909      	ldr	r1, [pc, #36]	; (404dcc <__NVIC_ClearPendingIRQ+0x38>)
  404da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404dac:	095b      	lsrs	r3, r3, #5
  404dae:	79fa      	ldrb	r2, [r7, #7]
  404db0:	f002 021f 	and.w	r2, r2, #31
  404db4:	2001      	movs	r0, #1
  404db6:	fa00 f202 	lsl.w	r2, r0, r2
  404dba:	3360      	adds	r3, #96	; 0x60
  404dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404dc0:	bf00      	nop
  404dc2:	370c      	adds	r7, #12
  404dc4:	46bd      	mov	sp, r7
  404dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dca:	4770      	bx	lr
  404dcc:	e000e100 	.word	0xe000e100

00404dd0 <hri_uart_get_IMR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IER = UART_IMR_RXRDY;
}

static inline bool hri_uart_get_IMR_RXRDY_bit(const void *const hw)
{
  404dd0:	b480      	push	{r7}
  404dd2:	b083      	sub	sp, #12
  404dd4:	af00      	add	r7, sp, #0
  404dd6:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_RXRDY) >> UART_IMR_RXRDY_Pos;
  404dd8:	687b      	ldr	r3, [r7, #4]
  404dda:	691b      	ldr	r3, [r3, #16]
  404ddc:	f003 0301 	and.w	r3, r3, #1
  404de0:	2b00      	cmp	r3, #0
  404de2:	bf14      	ite	ne
  404de4:	2301      	movne	r3, #1
  404de6:	2300      	moveq	r3, #0
  404de8:	b2db      	uxtb	r3, r3
}
  404dea:	4618      	mov	r0, r3
  404dec:	370c      	adds	r7, #12
  404dee:	46bd      	mov	sp, r7
  404df0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404df4:	4770      	bx	lr

00404df6 <hri_uart_set_IMR_TXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_RXRDY;
}

static inline void hri_uart_set_IMR_TXRDY_bit(const void *const hw)
{
  404df6:	b480      	push	{r7}
  404df8:	b083      	sub	sp, #12
  404dfa:	af00      	add	r7, sp, #0
  404dfc:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
  404dfe:	687b      	ldr	r3, [r7, #4]
  404e00:	2202      	movs	r2, #2
  404e02:	609a      	str	r2, [r3, #8]
}
  404e04:	bf00      	nop
  404e06:	370c      	adds	r7, #12
  404e08:	46bd      	mov	sp, r7
  404e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e0e:	4770      	bx	lr

00404e10 <hri_uart_get_IMR_TXRDY_bit>:

static inline bool hri_uart_get_IMR_TXRDY_bit(const void *const hw)
{
  404e10:	b480      	push	{r7}
  404e12:	b083      	sub	sp, #12
  404e14:	af00      	add	r7, sp, #0
  404e16:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXRDY) >> UART_IMR_TXRDY_Pos;
  404e18:	687b      	ldr	r3, [r7, #4]
  404e1a:	691b      	ldr	r3, [r3, #16]
  404e1c:	085b      	lsrs	r3, r3, #1
  404e1e:	f003 0301 	and.w	r3, r3, #1
  404e22:	2b00      	cmp	r3, #0
  404e24:	bf14      	ite	ne
  404e26:	2301      	movne	r3, #1
  404e28:	2300      	moveq	r3, #0
  404e2a:	b2db      	uxtb	r3, r3
}
  404e2c:	4618      	mov	r0, r3
  404e2e:	370c      	adds	r7, #12
  404e30:	46bd      	mov	sp, r7
  404e32:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e36:	4770      	bx	lr

00404e38 <hri_uart_clear_IMR_TXRDY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
	}
}

static inline void hri_uart_clear_IMR_TXRDY_bit(const void *const hw)
{
  404e38:	b480      	push	{r7}
  404e3a:	b083      	sub	sp, #12
  404e3c:	af00      	add	r7, sp, #0
  404e3e:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXRDY;
  404e40:	687b      	ldr	r3, [r7, #4]
  404e42:	2202      	movs	r2, #2
  404e44:	60da      	str	r2, [r3, #12]
}
  404e46:	bf00      	nop
  404e48:	370c      	adds	r7, #12
  404e4a:	46bd      	mov	sp, r7
  404e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e50:	4770      	bx	lr

00404e52 <hri_uart_set_IMR_TXEMPTY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_PARE;
}

static inline void hri_uart_set_IMR_TXEMPTY_bit(const void *const hw)
{
  404e52:	b480      	push	{r7}
  404e54:	b083      	sub	sp, #12
  404e56:	af00      	add	r7, sp, #0
  404e58:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
  404e5a:	687b      	ldr	r3, [r7, #4]
  404e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
  404e60:	609a      	str	r2, [r3, #8]
}
  404e62:	bf00      	nop
  404e64:	370c      	adds	r7, #12
  404e66:	46bd      	mov	sp, r7
  404e68:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e6c:	4770      	bx	lr

00404e6e <hri_uart_get_IMR_TXEMPTY_bit>:

static inline bool hri_uart_get_IMR_TXEMPTY_bit(const void *const hw)
{
  404e6e:	b480      	push	{r7}
  404e70:	b083      	sub	sp, #12
  404e72:	af00      	add	r7, sp, #0
  404e74:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXEMPTY) >> UART_IMR_TXEMPTY_Pos;
  404e76:	687b      	ldr	r3, [r7, #4]
  404e78:	691b      	ldr	r3, [r3, #16]
  404e7a:	0a5b      	lsrs	r3, r3, #9
  404e7c:	f003 0301 	and.w	r3, r3, #1
  404e80:	2b00      	cmp	r3, #0
  404e82:	bf14      	ite	ne
  404e84:	2301      	movne	r3, #1
  404e86:	2300      	moveq	r3, #0
  404e88:	b2db      	uxtb	r3, r3
}
  404e8a:	4618      	mov	r0, r3
  404e8c:	370c      	adds	r7, #12
  404e8e:	46bd      	mov	sp, r7
  404e90:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e94:	4770      	bx	lr

00404e96 <hri_uart_clear_IMR_TXEMPTY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
	}
}

static inline void hri_uart_clear_IMR_TXEMPTY_bit(const void *const hw)
{
  404e96:	b480      	push	{r7}
  404e98:	b083      	sub	sp, #12
  404e9a:	af00      	add	r7, sp, #0
  404e9c:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXEMPTY;
  404e9e:	687b      	ldr	r3, [r7, #4]
  404ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
  404ea4:	60da      	str	r2, [r3, #12]
}
  404ea6:	bf00      	nop
  404ea8:	370c      	adds	r7, #12
  404eaa:	46bd      	mov	sp, r7
  404eac:	f85d 7b04 	ldr.w	r7, [sp], #4
  404eb0:	4770      	bx	lr

00404eb2 <hri_uart_get_SR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = mask;
}

static inline bool hri_uart_get_SR_RXRDY_bit(const void *const hw)
{
  404eb2:	b480      	push	{r7}
  404eb4:	b083      	sub	sp, #12
  404eb6:	af00      	add	r7, sp, #0
  404eb8:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  404eba:	687b      	ldr	r3, [r7, #4]
  404ebc:	695b      	ldr	r3, [r3, #20]
  404ebe:	f003 0301 	and.w	r3, r3, #1
  404ec2:	2b00      	cmp	r3, #0
  404ec4:	bf14      	ite	ne
  404ec6:	2301      	movne	r3, #1
  404ec8:	2300      	moveq	r3, #0
  404eca:	b2db      	uxtb	r3, r3
}
  404ecc:	4618      	mov	r0, r3
  404ece:	370c      	adds	r7, #12
  404ed0:	46bd      	mov	sp, r7
  404ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ed6:	4770      	bx	lr

00404ed8 <hri_uart_get_SR_TXRDY_bit>:

static inline bool hri_uart_get_SR_TXRDY_bit(const void *const hw)
{
  404ed8:	b480      	push	{r7}
  404eda:	b083      	sub	sp, #12
  404edc:	af00      	add	r7, sp, #0
  404ede:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  404ee0:	687b      	ldr	r3, [r7, #4]
  404ee2:	695b      	ldr	r3, [r3, #20]
  404ee4:	f003 0302 	and.w	r3, r3, #2
  404ee8:	2b00      	cmp	r3, #0
  404eea:	bf14      	ite	ne
  404eec:	2301      	movne	r3, #1
  404eee:	2300      	moveq	r3, #0
  404ef0:	b2db      	uxtb	r3, r3
}
  404ef2:	4618      	mov	r0, r3
  404ef4:	370c      	adds	r7, #12
  404ef6:	46bd      	mov	sp, r7
  404ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404efc:	4770      	bx	lr

00404efe <hri_uart_get_SR_TXEMPTY_bit>:
{
	return (((Uart *)hw)->UART_SR & UART_SR_PARE) > 0;
}

static inline bool hri_uart_get_SR_TXEMPTY_bit(const void *const hw)
{
  404efe:	b480      	push	{r7}
  404f00:	b083      	sub	sp, #12
  404f02:	af00      	add	r7, sp, #0
  404f04:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  404f06:	687b      	ldr	r3, [r7, #4]
  404f08:	695b      	ldr	r3, [r3, #20]
  404f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
  404f0e:	2b00      	cmp	r3, #0
  404f10:	bf14      	ite	ne
  404f12:	2301      	movne	r3, #1
  404f14:	2300      	moveq	r3, #0
  404f16:	b2db      	uxtb	r3, r3
}
  404f18:	4618      	mov	r0, r3
  404f1a:	370c      	adds	r7, #12
  404f1c:	46bd      	mov	sp, r7
  404f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f22:	4770      	bx	lr

00404f24 <hri_uart_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_sr_reg_t hri_uart_read_SR_reg(const void *const hw)
{
  404f24:	b480      	push	{r7}
  404f26:	b083      	sub	sp, #12
  404f28:	af00      	add	r7, sp, #0
  404f2a:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_SR;
  404f2c:	687b      	ldr	r3, [r7, #4]
  404f2e:	695b      	ldr	r3, [r3, #20]
}
  404f30:	4618      	mov	r0, r3
  404f32:	370c      	adds	r7, #12
  404f34:	46bd      	mov	sp, r7
  404f36:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f3a:	4770      	bx	lr

00404f3c <hri_uart_read_RHR_RXCHR_bf>:
{
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR(mask)) >> UART_RHR_RXCHR_Pos;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_RXCHR_bf(const void *const hw)
{
  404f3c:	b480      	push	{r7}
  404f3e:	b083      	sub	sp, #12
  404f40:	af00      	add	r7, sp, #0
  404f42:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  404f44:	687b      	ldr	r3, [r7, #4]
  404f46:	699b      	ldr	r3, [r3, #24]
  404f48:	b2db      	uxtb	r3, r3
}
  404f4a:	4618      	mov	r0, r3
  404f4c:	370c      	adds	r7, #12
  404f4e:	46bd      	mov	sp, r7
  404f50:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f54:	4770      	bx	lr

00404f56 <hri_uart_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_reg(const void *const hw)
{
  404f56:	b480      	push	{r7}
  404f58:	b083      	sub	sp, #12
  404f5a:	af00      	add	r7, sp, #0
  404f5c:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_RHR;
  404f5e:	687b      	ldr	r3, [r7, #4]
  404f60:	699b      	ldr	r3, [r3, #24]
}
  404f62:	4618      	mov	r0, r3
  404f64:	370c      	adds	r7, #12
  404f66:	46bd      	mov	sp, r7
  404f68:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f6c:	4770      	bx	lr

00404f6e <hri_uart_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_MR_reg(const void *const hw, hri_uart_mr_reg_t data)
{
  404f6e:	b480      	push	{r7}
  404f70:	b083      	sub	sp, #12
  404f72:	af00      	add	r7, sp, #0
  404f74:	6078      	str	r0, [r7, #4]
  404f76:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_MR = data;
  404f78:	687b      	ldr	r3, [r7, #4]
  404f7a:	683a      	ldr	r2, [r7, #0]
  404f7c:	605a      	str	r2, [r3, #4]
	UART_CRITICAL_SECTION_LEAVE();
}
  404f7e:	bf00      	nop
  404f80:	370c      	adds	r7, #12
  404f82:	46bd      	mov	sp, r7
  404f84:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f88:	4770      	bx	lr

00404f8a <hri_uart_write_BRGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_BRGR_reg(const void *const hw, hri_uart_brgr_reg_t data)
{
  404f8a:	b480      	push	{r7}
  404f8c:	b083      	sub	sp, #12
  404f8e:	af00      	add	r7, sp, #0
  404f90:	6078      	str	r0, [r7, #4]
  404f92:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_BRGR = data;
  404f94:	687b      	ldr	r3, [r7, #4]
  404f96:	683a      	ldr	r2, [r7, #0]
  404f98:	621a      	str	r2, [r3, #32]
	UART_CRITICAL_SECTION_LEAVE();
}
  404f9a:	bf00      	nop
  404f9c:	370c      	adds	r7, #12
  404f9e:	46bd      	mov	sp, r7
  404fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fa4:	4770      	bx	lr

00404fa6 <hri_uart_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
  404fa6:	b480      	push	{r7}
  404fa8:	b083      	sub	sp, #12
  404faa:	af00      	add	r7, sp, #0
  404fac:	6078      	str	r0, [r7, #4]
  404fae:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  404fb0:	687b      	ldr	r3, [r7, #4]
  404fb2:	683a      	ldr	r2, [r7, #0]
  404fb4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	UART_CRITICAL_SECTION_LEAVE();
}
  404fb8:	bf00      	nop
  404fba:	370c      	adds	r7, #12
  404fbc:	46bd      	mov	sp, r7
  404fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fc2:	4770      	bx	lr

00404fc4 <hri_uart_write_CR_reg>:
{
	return ((Uart *)hw)->UART_WPMR;
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
  404fc4:	b480      	push	{r7}
  404fc6:	b083      	sub	sp, #12
  404fc8:	af00      	add	r7, sp, #0
  404fca:	6078      	str	r0, [r7, #4]
  404fcc:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  404fce:	687b      	ldr	r3, [r7, #4]
  404fd0:	683a      	ldr	r2, [r7, #0]
  404fd2:	601a      	str	r2, [r3, #0]
	UART_CRITICAL_SECTION_LEAVE();
}
  404fd4:	bf00      	nop
  404fd6:	370c      	adds	r7, #12
  404fd8:	46bd      	mov	sp, r7
  404fda:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fde:	4770      	bx	lr

00404fe0 <hri_uart_write_THR_reg>:

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
  404fe0:	b480      	push	{r7}
  404fe2:	b083      	sub	sp, #12
  404fe4:	af00      	add	r7, sp, #0
  404fe6:	6078      	str	r0, [r7, #4]
  404fe8:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  404fea:	687b      	ldr	r3, [r7, #4]
  404fec:	683a      	ldr	r2, [r7, #0]
  404fee:	61da      	str	r2, [r3, #28]
	UART_CRITICAL_SECTION_LEAVE();
}
  404ff0:	bf00      	nop
  404ff2:	370c      	adds	r7, #12
  404ff4:	46bd      	mov	sp, r7
  404ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ffa:	4770      	bx	lr

00404ffc <_uart_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_irq_num(const void *const hw)
{
  404ffc:	b580      	push	{r7, lr}
  404ffe:	b084      	sub	sp, #16
  405000:	af00      	add	r7, sp, #0
  405002:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  405004:	687b      	ldr	r3, [r7, #4]
  405006:	2b00      	cmp	r3, #0
  405008:	bf14      	ite	ne
  40500a:	2301      	movne	r3, #1
  40500c:	2300      	moveq	r3, #0
  40500e:	b2db      	uxtb	r3, r3
  405010:	2288      	movs	r2, #136	; 0x88
  405012:	4916      	ldr	r1, [pc, #88]	; (40506c <_uart_get_irq_num+0x70>)
  405014:	4618      	mov	r0, r3
  405016:	4b16      	ldr	r3, [pc, #88]	; (405070 <_uart_get_irq_num+0x74>)
  405018:	4798      	blx	r3
	uint8_t i;
	i = _uart_get_hardware_index(hw);
  40501a:	6878      	ldr	r0, [r7, #4]
  40501c:	4b15      	ldr	r3, [pc, #84]	; (405074 <_uart_get_irq_num+0x78>)
  40501e:	4798      	blx	r3
  405020:	4603      	mov	r3, r0
  405022:	73fb      	strb	r3, [r7, #15]
	switch (i) {
  405024:	7bfb      	ldrb	r3, [r7, #15]
  405026:	2b04      	cmp	r3, #4
  405028:	d816      	bhi.n	405058 <_uart_get_irq_num+0x5c>
  40502a:	a201      	add	r2, pc, #4	; (adr r2, 405030 <_uart_get_irq_num+0x34>)
  40502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405030:	00405045 	.word	0x00405045
  405034:	00405049 	.word	0x00405049
  405038:	0040504d 	.word	0x0040504d
  40503c:	00405051 	.word	0x00405051
  405040:	00405055 	.word	0x00405055
	case 0:
		return UART0_IRQn;
  405044:	2307      	movs	r3, #7
  405046:	e00d      	b.n	405064 <_uart_get_irq_num+0x68>

	case 1:
		return UART1_IRQn;
  405048:	2308      	movs	r3, #8
  40504a:	e00b      	b.n	405064 <_uart_get_irq_num+0x68>
	case 2:
		return UART2_IRQn;
  40504c:	232c      	movs	r3, #44	; 0x2c
  40504e:	e009      	b.n	405064 <_uart_get_irq_num+0x68>

	case 3:
		return UART3_IRQn;
  405050:	232d      	movs	r3, #45	; 0x2d
  405052:	e007      	b.n	405064 <_uart_get_irq_num+0x68>

	case 4:
		return UART4_IRQn;
  405054:	232e      	movs	r3, #46	; 0x2e
  405056:	e005      	b.n	405064 <_uart_get_irq_num+0x68>
	default:
		ASSERT(false);
  405058:	229a      	movs	r2, #154	; 0x9a
  40505a:	4904      	ldr	r1, [pc, #16]	; (40506c <_uart_get_irq_num+0x70>)
  40505c:	2000      	movs	r0, #0
  40505e:	4b04      	ldr	r3, [pc, #16]	; (405070 <_uart_get_irq_num+0x74>)
  405060:	4798      	blx	r3
		return ERR_INVALID_DATA;
  405062:	23ff      	movs	r3, #255	; 0xff
	}
}
  405064:	4618      	mov	r0, r3
  405066:	3710      	adds	r7, #16
  405068:	46bd      	mov	sp, r7
  40506a:	bd80      	pop	{r7, pc}
  40506c:	00407ccc 	.word	0x00407ccc
  405070:	00402d41 	.word	0x00402d41
  405074:	004053ad 	.word	0x004053ad

00405078 <_uart_init_irq_param>:

/**
 * \brief Init irq param with the given twi hardware instance
 */
static void _uart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
  405078:	b480      	push	{r7}
  40507a:	b083      	sub	sp, #12
  40507c:	af00      	add	r7, sp, #0
  40507e:	6078      	str	r0, [r7, #4]
  405080:	6039      	str	r1, [r7, #0]
	if (hw == UART4) {
  405082:	687b      	ldr	r3, [r7, #4]
  405084:	4a05      	ldr	r2, [pc, #20]	; (40509c <_uart_init_irq_param+0x24>)
  405086:	4293      	cmp	r3, r2
  405088:	d102      	bne.n	405090 <_uart_init_irq_param+0x18>
		_uart4_dev = dev;
  40508a:	4a05      	ldr	r2, [pc, #20]	; (4050a0 <_uart_init_irq_param+0x28>)
  40508c:	683b      	ldr	r3, [r7, #0]
  40508e:	6013      	str	r3, [r2, #0]
	}
}
  405090:	bf00      	nop
  405092:	370c      	adds	r7, #12
  405094:	46bd      	mov	sp, r7
  405096:	f85d 7b04 	ldr.w	r7, [sp], #4
  40509a:	4770      	bx	lr
  40509c:	400e1e00 	.word	0x400e1e00
  4050a0:	204011c4 	.word	0x204011c4

004050a4 <_usart_sync_init>:

/**
 * \brief Initialize synchronous UART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
  4050a4:	b580      	push	{r7, lr}
  4050a6:	b082      	sub	sp, #8
  4050a8:	af00      	add	r7, sp, #0
  4050aa:	6078      	str	r0, [r7, #4]
  4050ac:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  4050ae:	687b      	ldr	r3, [r7, #4]
  4050b0:	2b00      	cmp	r3, #0
  4050b2:	bf14      	ite	ne
  4050b4:	2301      	movne	r3, #1
  4050b6:	2300      	moveq	r3, #0
  4050b8:	b2db      	uxtb	r3, r3
  4050ba:	22ae      	movs	r2, #174	; 0xae
  4050bc:	490c      	ldr	r1, [pc, #48]	; (4050f0 <_usart_sync_init+0x4c>)
  4050be:	4618      	mov	r0, r3
  4050c0:	4b0c      	ldr	r3, [pc, #48]	; (4050f4 <_usart_sync_init+0x50>)
  4050c2:	4798      	blx	r3
	ASSERT(hw);
  4050c4:	683b      	ldr	r3, [r7, #0]
  4050c6:	2b00      	cmp	r3, #0
  4050c8:	bf14      	ite	ne
  4050ca:	2301      	movne	r3, #1
  4050cc:	2300      	moveq	r3, #0
  4050ce:	b2db      	uxtb	r3, r3
  4050d0:	22af      	movs	r2, #175	; 0xaf
  4050d2:	4907      	ldr	r1, [pc, #28]	; (4050f0 <_usart_sync_init+0x4c>)
  4050d4:	4618      	mov	r0, r3
  4050d6:	4b07      	ldr	r3, [pc, #28]	; (4050f4 <_usart_sync_init+0x50>)
  4050d8:	4798      	blx	r3

	device->hw = hw;
  4050da:	687b      	ldr	r3, [r7, #4]
  4050dc:	683a      	ldr	r2, [r7, #0]
  4050de:	601a      	str	r2, [r3, #0]

	return _uart_init(hw);
  4050e0:	6838      	ldr	r0, [r7, #0]
  4050e2:	4b05      	ldr	r3, [pc, #20]	; (4050f8 <_usart_sync_init+0x54>)
  4050e4:	4798      	blx	r3
  4050e6:	4603      	mov	r3, r0
}
  4050e8:	4618      	mov	r0, r3
  4050ea:	3708      	adds	r7, #8
  4050ec:	46bd      	mov	sp, r7
  4050ee:	bd80      	pop	{r7, pc}
  4050f0:	00407ccc 	.word	0x00407ccc
  4050f4:	00402d41 	.word	0x00402d41
  4050f8:	00405611 	.word	0x00405611

004050fc <_usart_async_init>:

/**
 * \brief Initialize asynchronous UART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
  4050fc:	b580      	push	{r7, lr}
  4050fe:	b084      	sub	sp, #16
  405100:	af00      	add	r7, sp, #0
  405102:	6078      	str	r0, [r7, #4]
  405104:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
  405106:	687b      	ldr	r3, [r7, #4]
  405108:	2b00      	cmp	r3, #0
  40510a:	bf14      	ite	ne
  40510c:	2301      	movne	r3, #1
  40510e:	2300      	moveq	r3, #0
  405110:	b2db      	uxtb	r3, r3
  405112:	22bd      	movs	r2, #189	; 0xbd
  405114:	4918      	ldr	r1, [pc, #96]	; (405178 <_usart_async_init+0x7c>)
  405116:	4618      	mov	r0, r3
  405118:	4b18      	ldr	r3, [pc, #96]	; (40517c <_usart_async_init+0x80>)
  40511a:	4798      	blx	r3

	init_status = _uart_init(hw);
  40511c:	6838      	ldr	r0, [r7, #0]
  40511e:	4b18      	ldr	r3, [pc, #96]	; (405180 <_usart_async_init+0x84>)
  405120:	4798      	blx	r3
  405122:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  405124:	68fb      	ldr	r3, [r7, #12]
  405126:	2b00      	cmp	r3, #0
  405128:	d001      	beq.n	40512e <_usart_async_init+0x32>
		return init_status;
  40512a:	68fb      	ldr	r3, [r7, #12]
  40512c:	e01f      	b.n	40516e <_usart_async_init+0x72>
	}
	device->hw = hw;
  40512e:	687b      	ldr	r3, [r7, #4]
  405130:	683a      	ldr	r2, [r7, #0]
  405132:	619a      	str	r2, [r3, #24]

	_uart_init_irq_param(hw, device);
  405134:	6879      	ldr	r1, [r7, #4]
  405136:	6838      	ldr	r0, [r7, #0]
  405138:	4b12      	ldr	r3, [pc, #72]	; (405184 <_usart_async_init+0x88>)
  40513a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  40513c:	6838      	ldr	r0, [r7, #0]
  40513e:	4b12      	ldr	r3, [pc, #72]	; (405188 <_usart_async_init+0x8c>)
  405140:	4798      	blx	r3
  405142:	4603      	mov	r3, r0
  405144:	b25b      	sxtb	r3, r3
  405146:	4618      	mov	r0, r3
  405148:	4b10      	ldr	r3, [pc, #64]	; (40518c <_usart_async_init+0x90>)
  40514a:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_uart_get_irq_num(hw));
  40514c:	6838      	ldr	r0, [r7, #0]
  40514e:	4b0e      	ldr	r3, [pc, #56]	; (405188 <_usart_async_init+0x8c>)
  405150:	4798      	blx	r3
  405152:	4603      	mov	r3, r0
  405154:	b25b      	sxtb	r3, r3
  405156:	4618      	mov	r0, r3
  405158:	4b0d      	ldr	r3, [pc, #52]	; (405190 <_usart_async_init+0x94>)
  40515a:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  40515c:	6838      	ldr	r0, [r7, #0]
  40515e:	4b0a      	ldr	r3, [pc, #40]	; (405188 <_usart_async_init+0x8c>)
  405160:	4798      	blx	r3
  405162:	4603      	mov	r3, r0
  405164:	b25b      	sxtb	r3, r3
  405166:	4618      	mov	r0, r3
  405168:	4b0a      	ldr	r3, [pc, #40]	; (405194 <_usart_async_init+0x98>)
  40516a:	4798      	blx	r3

	return ERR_NONE;
  40516c:	2300      	movs	r3, #0
}
  40516e:	4618      	mov	r0, r3
  405170:	3710      	adds	r7, #16
  405172:	46bd      	mov	sp, r7
  405174:	bd80      	pop	{r7, pc}
  405176:	bf00      	nop
  405178:	00407ccc 	.word	0x00407ccc
  40517c:	00402d41 	.word	0x00402d41
  405180:	00405611 	.word	0x00405611
  405184:	00405079 	.word	0x00405079
  405188:	00404ffd 	.word	0x00404ffd
  40518c:	00404d51 	.word	0x00404d51
  405190:	00404d95 	.word	0x00404d95
  405194:	00404d15 	.word	0x00404d15

00405198 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
  405198:	b580      	push	{r7, lr}
  40519a:	b082      	sub	sp, #8
  40519c:	af00      	add	r7, sp, #0
  40519e:	6078      	str	r0, [r7, #4]
  4051a0:	460b      	mov	r3, r1
  4051a2:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  4051a4:	687b      	ldr	r3, [r7, #4]
  4051a6:	2b00      	cmp	r3, #0
  4051a8:	bf14      	ite	ne
  4051aa:	2301      	movne	r3, #1
  4051ac:	2300      	moveq	r3, #0
  4051ae:	b2db      	uxtb	r3, r3
  4051b0:	f240 1299 	movw	r2, #409	; 0x199
  4051b4:	4907      	ldr	r1, [pc, #28]	; (4051d4 <_usart_sync_write_byte+0x3c>)
  4051b6:	4618      	mov	r0, r3
  4051b8:	4b07      	ldr	r3, [pc, #28]	; (4051d8 <_usart_sync_write_byte+0x40>)
  4051ba:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  4051bc:	687b      	ldr	r3, [r7, #4]
  4051be:	681b      	ldr	r3, [r3, #0]
  4051c0:	78fa      	ldrb	r2, [r7, #3]
  4051c2:	4611      	mov	r1, r2
  4051c4:	4618      	mov	r0, r3
  4051c6:	4b05      	ldr	r3, [pc, #20]	; (4051dc <_usart_sync_write_byte+0x44>)
  4051c8:	4798      	blx	r3
}
  4051ca:	bf00      	nop
  4051cc:	3708      	adds	r7, #8
  4051ce:	46bd      	mov	sp, r7
  4051d0:	bd80      	pop	{r7, pc}
  4051d2:	bf00      	nop
  4051d4:	00407ccc 	.word	0x00407ccc
  4051d8:	00402d41 	.word	0x00402d41
  4051dc:	00404fe1 	.word	0x00404fe1

004051e0 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
  4051e0:	b580      	push	{r7, lr}
  4051e2:	b082      	sub	sp, #8
  4051e4:	af00      	add	r7, sp, #0
  4051e6:	6078      	str	r0, [r7, #4]
  4051e8:	460b      	mov	r3, r1
  4051ea:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  4051ec:	687b      	ldr	r3, [r7, #4]
  4051ee:	2b00      	cmp	r3, #0
  4051f0:	bf14      	ite	ne
  4051f2:	2301      	movne	r3, #1
  4051f4:	2300      	moveq	r3, #0
  4051f6:	b2db      	uxtb	r3, r3
  4051f8:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
  4051fc:	4907      	ldr	r1, [pc, #28]	; (40521c <_usart_async_write_byte+0x3c>)
  4051fe:	4618      	mov	r0, r3
  405200:	4b07      	ldr	r3, [pc, #28]	; (405220 <_usart_async_write_byte+0x40>)
  405202:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  405204:	687b      	ldr	r3, [r7, #4]
  405206:	699b      	ldr	r3, [r3, #24]
  405208:	78fa      	ldrb	r2, [r7, #3]
  40520a:	4611      	mov	r1, r2
  40520c:	4618      	mov	r0, r3
  40520e:	4b05      	ldr	r3, [pc, #20]	; (405224 <_usart_async_write_byte+0x44>)
  405210:	4798      	blx	r3
}
  405212:	bf00      	nop
  405214:	3708      	adds	r7, #8
  405216:	46bd      	mov	sp, r7
  405218:	bd80      	pop	{r7, pc}
  40521a:	bf00      	nop
  40521c:	00407ccc 	.word	0x00407ccc
  405220:	00402d41 	.word	0x00402d41
  405224:	00404fe1 	.word	0x00404fe1

00405228 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given UART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
  405228:	b580      	push	{r7, lr}
  40522a:	b082      	sub	sp, #8
  40522c:	af00      	add	r7, sp, #0
  40522e:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405230:	687b      	ldr	r3, [r7, #4]
  405232:	2b00      	cmp	r3, #0
  405234:	bf14      	ite	ne
  405236:	2301      	movne	r3, #1
  405238:	2300      	moveq	r3, #0
  40523a:	b2db      	uxtb	r3, r3
  40523c:	f240 12ab 	movw	r2, #427	; 0x1ab
  405240:	4907      	ldr	r1, [pc, #28]	; (405260 <_usart_sync_read_byte+0x38>)
  405242:	4618      	mov	r0, r3
  405244:	4b07      	ldr	r3, [pc, #28]	; (405264 <_usart_sync_read_byte+0x3c>)
  405246:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  405248:	687b      	ldr	r3, [r7, #4]
  40524a:	681b      	ldr	r3, [r3, #0]
  40524c:	4618      	mov	r0, r3
  40524e:	4b06      	ldr	r3, [pc, #24]	; (405268 <_usart_sync_read_byte+0x40>)
  405250:	4798      	blx	r3
  405252:	4603      	mov	r3, r0
  405254:	b2db      	uxtb	r3, r3
}
  405256:	4618      	mov	r0, r3
  405258:	3708      	adds	r7, #8
  40525a:	46bd      	mov	sp, r7
  40525c:	bd80      	pop	{r7, pc}
  40525e:	bf00      	nop
  405260:	00407ccc 	.word	0x00407ccc
  405264:	00402d41 	.word	0x00402d41
  405268:	00404f3d 	.word	0x00404f3d

0040526c <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if UART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
  40526c:	b580      	push	{r7, lr}
  40526e:	b082      	sub	sp, #8
  405270:	af00      	add	r7, sp, #0
  405272:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405274:	687b      	ldr	r3, [r7, #4]
  405276:	2b00      	cmp	r3, #0
  405278:	bf14      	ite	ne
  40527a:	2301      	movne	r3, #1
  40527c:	2300      	moveq	r3, #0
  40527e:	b2db      	uxtb	r3, r3
  405280:	f44f 72da 	mov.w	r2, #436	; 0x1b4
  405284:	4906      	ldr	r1, [pc, #24]	; (4052a0 <_usart_sync_is_ready_to_send+0x34>)
  405286:	4618      	mov	r0, r3
  405288:	4b06      	ldr	r3, [pc, #24]	; (4052a4 <_usart_sync_is_ready_to_send+0x38>)
  40528a:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  40528c:	687b      	ldr	r3, [r7, #4]
  40528e:	681b      	ldr	r3, [r3, #0]
  405290:	4618      	mov	r0, r3
  405292:	4b05      	ldr	r3, [pc, #20]	; (4052a8 <_usart_sync_is_ready_to_send+0x3c>)
  405294:	4798      	blx	r3
  405296:	4603      	mov	r3, r0
}
  405298:	4618      	mov	r0, r3
  40529a:	3708      	adds	r7, #8
  40529c:	46bd      	mov	sp, r7
  40529e:	bd80      	pop	{r7, pc}
  4052a0:	00407ccc 	.word	0x00407ccc
  4052a4:	00402d41 	.word	0x00402d41
  4052a8:	00404ed9 	.word	0x00404ed9

004052ac <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
  4052ac:	b580      	push	{r7, lr}
  4052ae:	b082      	sub	sp, #8
  4052b0:	af00      	add	r7, sp, #0
  4052b2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4052b4:	687b      	ldr	r3, [r7, #4]
  4052b6:	2b00      	cmp	r3, #0
  4052b8:	bf14      	ite	ne
  4052ba:	2301      	movne	r3, #1
  4052bc:	2300      	moveq	r3, #0
  4052be:	b2db      	uxtb	r3, r3
  4052c0:	f240 12bd 	movw	r2, #445	; 0x1bd
  4052c4:	4906      	ldr	r1, [pc, #24]	; (4052e0 <_usart_sync_is_transmit_done+0x34>)
  4052c6:	4618      	mov	r0, r3
  4052c8:	4b06      	ldr	r3, [pc, #24]	; (4052e4 <_usart_sync_is_transmit_done+0x38>)
  4052ca:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  4052cc:	687b      	ldr	r3, [r7, #4]
  4052ce:	681b      	ldr	r3, [r3, #0]
  4052d0:	4618      	mov	r0, r3
  4052d2:	4b05      	ldr	r3, [pc, #20]	; (4052e8 <_usart_sync_is_transmit_done+0x3c>)
  4052d4:	4798      	blx	r3
  4052d6:	4603      	mov	r3, r0
}
  4052d8:	4618      	mov	r0, r3
  4052da:	3708      	adds	r7, #8
  4052dc:	46bd      	mov	sp, r7
  4052de:	bd80      	pop	{r7, pc}
  4052e0:	00407ccc 	.word	0x00407ccc
  4052e4:	00402d41 	.word	0x00402d41
  4052e8:	00404eff 	.word	0x00404eff

004052ec <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by UART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
  4052ec:	b580      	push	{r7, lr}
  4052ee:	b082      	sub	sp, #8
  4052f0:	af00      	add	r7, sp, #0
  4052f2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4052f4:	687b      	ldr	r3, [r7, #4]
  4052f6:	2b00      	cmp	r3, #0
  4052f8:	bf14      	ite	ne
  4052fa:	2301      	movne	r3, #1
  4052fc:	2300      	moveq	r3, #0
  4052fe:	b2db      	uxtb	r3, r3
  405300:	f240 12cf 	movw	r2, #463	; 0x1cf
  405304:	4906      	ldr	r1, [pc, #24]	; (405320 <_usart_sync_is_byte_received+0x34>)
  405306:	4618      	mov	r0, r3
  405308:	4b06      	ldr	r3, [pc, #24]	; (405324 <_usart_sync_is_byte_received+0x38>)
  40530a:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  40530c:	687b      	ldr	r3, [r7, #4]
  40530e:	681b      	ldr	r3, [r3, #0]
  405310:	4618      	mov	r0, r3
  405312:	4b05      	ldr	r3, [pc, #20]	; (405328 <_usart_sync_is_byte_received+0x3c>)
  405314:	4798      	blx	r3
  405316:	4603      	mov	r3, r0
}
  405318:	4618      	mov	r0, r3
  40531a:	3708      	adds	r7, #8
  40531c:	46bd      	mov	sp, r7
  40531e:	bd80      	pop	{r7, pc}
  405320:	00407ccc 	.word	0x00407ccc
  405324:	00402d41 	.word	0x00402d41
  405328:	00404eb3 	.word	0x00404eb3

0040532c <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
  40532c:	b580      	push	{r7, lr}
  40532e:	b082      	sub	sp, #8
  405330:	af00      	add	r7, sp, #0
  405332:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405334:	687b      	ldr	r3, [r7, #4]
  405336:	2b00      	cmp	r3, #0
  405338:	bf14      	ite	ne
  40533a:	2301      	movne	r3, #1
  40533c:	2300      	moveq	r3, #0
  40533e:	b2db      	uxtb	r3, r3
  405340:	f240 220a 	movw	r2, #522	; 0x20a
  405344:	4906      	ldr	r1, [pc, #24]	; (405360 <_usart_async_enable_byte_sent_irq+0x34>)
  405346:	4618      	mov	r0, r3
  405348:	4b06      	ldr	r3, [pc, #24]	; (405364 <_usart_async_enable_byte_sent_irq+0x38>)
  40534a:	4798      	blx	r3
	hri_uart_set_IMR_TXRDY_bit(device->hw);
  40534c:	687b      	ldr	r3, [r7, #4]
  40534e:	699b      	ldr	r3, [r3, #24]
  405350:	4618      	mov	r0, r3
  405352:	4b05      	ldr	r3, [pc, #20]	; (405368 <_usart_async_enable_byte_sent_irq+0x3c>)
  405354:	4798      	blx	r3
}
  405356:	bf00      	nop
  405358:	3708      	adds	r7, #8
  40535a:	46bd      	mov	sp, r7
  40535c:	bd80      	pop	{r7, pc}
  40535e:	bf00      	nop
  405360:	00407ccc 	.word	0x00407ccc
  405364:	00402d41 	.word	0x00402d41
  405368:	00404df7 	.word	0x00404df7

0040536c <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
  40536c:	b580      	push	{r7, lr}
  40536e:	b082      	sub	sp, #8
  405370:	af00      	add	r7, sp, #0
  405372:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405374:	687b      	ldr	r3, [r7, #4]
  405376:	2b00      	cmp	r3, #0
  405378:	bf14      	ite	ne
  40537a:	2301      	movne	r3, #1
  40537c:	2300      	moveq	r3, #0
  40537e:	b2db      	uxtb	r3, r3
  405380:	f240 2213 	movw	r2, #531	; 0x213
  405384:	4906      	ldr	r1, [pc, #24]	; (4053a0 <_usart_async_enable_tx_done_irq+0x34>)
  405386:	4618      	mov	r0, r3
  405388:	4b06      	ldr	r3, [pc, #24]	; (4053a4 <_usart_async_enable_tx_done_irq+0x38>)
  40538a:	4798      	blx	r3
	hri_uart_set_IMR_TXEMPTY_bit(device->hw);
  40538c:	687b      	ldr	r3, [r7, #4]
  40538e:	699b      	ldr	r3, [r3, #24]
  405390:	4618      	mov	r0, r3
  405392:	4b05      	ldr	r3, [pc, #20]	; (4053a8 <_usart_async_enable_tx_done_irq+0x3c>)
  405394:	4798      	blx	r3
}
  405396:	bf00      	nop
  405398:	3708      	adds	r7, #8
  40539a:	46bd      	mov	sp, r7
  40539c:	bd80      	pop	{r7, pc}
  40539e:	bf00      	nop
  4053a0:	00407ccc 	.word	0x00407ccc
  4053a4:	00402d41 	.word	0x00402d41
  4053a8:	00404e53 	.word	0x00404e53

004053ac <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4053ac:	b580      	push	{r7, lr}
  4053ae:	b082      	sub	sp, #8
  4053b0:	af00      	add	r7, sp, #0
  4053b2:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4053b4:	687b      	ldr	r3, [r7, #4]
  4053b6:	2b00      	cmp	r3, #0
  4053b8:	bf14      	ite	ne
  4053ba:	2301      	movne	r3, #1
  4053bc:	2300      	moveq	r3, #0
  4053be:	b2db      	uxtb	r3, r3
  4053c0:	f240 221d 	movw	r2, #541	; 0x21d
  4053c4:	4913      	ldr	r1, [pc, #76]	; (405414 <_uart_get_hardware_index+0x68>)
  4053c6:	4618      	mov	r0, r3
  4053c8:	4b13      	ldr	r3, [pc, #76]	; (405418 <_uart_get_hardware_index+0x6c>)
  4053ca:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4053cc:	687b      	ldr	r3, [r7, #4]
  4053ce:	4a13      	ldr	r2, [pc, #76]	; (40541c <_uart_get_hardware_index+0x70>)
  4053d0:	4293      	cmp	r3, r2
  4053d2:	d101      	bne.n	4053d8 <_uart_get_hardware_index+0x2c>
		return 0;
  4053d4:	2300      	movs	r3, #0
  4053d6:	e018      	b.n	40540a <_uart_get_hardware_index+0x5e>
	} else if (UART1 == hw) {
  4053d8:	687b      	ldr	r3, [r7, #4]
  4053da:	4a11      	ldr	r2, [pc, #68]	; (405420 <_uart_get_hardware_index+0x74>)
  4053dc:	4293      	cmp	r3, r2
  4053de:	d101      	bne.n	4053e4 <_uart_get_hardware_index+0x38>
		return 1;
  4053e0:	2301      	movs	r3, #1
  4053e2:	e012      	b.n	40540a <_uart_get_hardware_index+0x5e>
	} else if (UART2 == hw) {
  4053e4:	687b      	ldr	r3, [r7, #4]
  4053e6:	4a0f      	ldr	r2, [pc, #60]	; (405424 <_uart_get_hardware_index+0x78>)
  4053e8:	4293      	cmp	r3, r2
  4053ea:	d101      	bne.n	4053f0 <_uart_get_hardware_index+0x44>
		return 2;
  4053ec:	2302      	movs	r3, #2
  4053ee:	e00c      	b.n	40540a <_uart_get_hardware_index+0x5e>
	} else if (UART3 == hw) {
  4053f0:	687b      	ldr	r3, [r7, #4]
  4053f2:	4a0d      	ldr	r2, [pc, #52]	; (405428 <_uart_get_hardware_index+0x7c>)
  4053f4:	4293      	cmp	r3, r2
  4053f6:	d101      	bne.n	4053fc <_uart_get_hardware_index+0x50>
		return 3;
  4053f8:	2303      	movs	r3, #3
  4053fa:	e006      	b.n	40540a <_uart_get_hardware_index+0x5e>
	} else if (UART4 == hw) {
  4053fc:	687b      	ldr	r3, [r7, #4]
  4053fe:	4a0b      	ldr	r2, [pc, #44]	; (40542c <_uart_get_hardware_index+0x80>)
  405400:	4293      	cmp	r3, r2
  405402:	d101      	bne.n	405408 <_uart_get_hardware_index+0x5c>
		return 4;
  405404:	2304      	movs	r3, #4
  405406:	e000      	b.n	40540a <_uart_get_hardware_index+0x5e>
	} else {
		return ERR_INVALID_DATA;
  405408:	23ff      	movs	r3, #255	; 0xff
	}
}
  40540a:	4618      	mov	r0, r3
  40540c:	3708      	adds	r7, #8
  40540e:	46bd      	mov	sp, r7
  405410:	bd80      	pop	{r7, pc}
  405412:	bf00      	nop
  405414:	00407ccc 	.word	0x00407ccc
  405418:	00402d41 	.word	0x00402d41
  40541c:	400e0800 	.word	0x400e0800
  405420:	400e0a00 	.word	0x400e0a00
  405424:	400e1a00 	.word	0x400e1a00
  405428:	400e1c00 	.word	0x400e1c00
  40542c:	400e1e00 	.word	0x400e1e00

00405430 <_uart_get_usart_sync>:

/**
 * \brief Retrieve usart sync helper functions
 */
void *_uart_get_usart_sync(void)
{
  405430:	b480      	push	{r7}
  405432:	af00      	add	r7, sp, #0
	return (void *)NULL;
  405434:	2300      	movs	r3, #0
}
  405436:	4618      	mov	r0, r3
  405438:	46bd      	mov	sp, r7
  40543a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40543e:	4770      	bx	lr

00405440 <_uart_get_usart_async>:

/**
 * \brief Retrieve usart async helper functions
 */
void *_uart_get_usart_async(void)
{
  405440:	b480      	push	{r7}
  405442:	af00      	add	r7, sp, #0
	return (void *)NULL;
  405444:	2300      	movs	r3, #0
}
  405446:	4618      	mov	r0, r3
  405448:	46bd      	mov	sp, r7
  40544a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40544e:	4770      	bx	lr

00405450 <_uart_interrupt_handler>:
 * \internal Uart interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _uart_interrupt_handler(struct _usart_async_device *device)
{
  405450:	b590      	push	{r4, r7, lr}
  405452:	b085      	sub	sp, #20
  405454:	af00      	add	r7, sp, #0
  405456:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  405458:	687b      	ldr	r3, [r7, #4]
  40545a:	2b00      	cmp	r3, #0
  40545c:	bf14      	ite	ne
  40545e:	2301      	movne	r3, #1
  405460:	2300      	moveq	r3, #0
  405462:	b2db      	uxtb	r3, r3
  405464:	f240 2281 	movw	r2, #641	; 0x281
  405468:	4935      	ldr	r1, [pc, #212]	; (405540 <_uart_interrupt_handler+0xf0>)
  40546a:	4618      	mov	r0, r3
  40546c:	4b35      	ldr	r3, [pc, #212]	; (405544 <_uart_interrupt_handler+0xf4>)
  40546e:	4798      	blx	r3
	void *hw = device->hw;
  405470:	687b      	ldr	r3, [r7, #4]
  405472:	699b      	ldr	r3, [r3, #24]
  405474:	60fb      	str	r3, [r7, #12]

	if (hri_uart_get_SR_TXRDY_bit(hw) && hri_uart_get_IMR_TXRDY_bit(hw)) {
  405476:	68f8      	ldr	r0, [r7, #12]
  405478:	4b33      	ldr	r3, [pc, #204]	; (405548 <_uart_interrupt_handler+0xf8>)
  40547a:	4798      	blx	r3
  40547c:	4603      	mov	r3, r0
  40547e:	2b00      	cmp	r3, #0
  405480:	d00d      	beq.n	40549e <_uart_interrupt_handler+0x4e>
  405482:	68f8      	ldr	r0, [r7, #12]
  405484:	4b31      	ldr	r3, [pc, #196]	; (40554c <_uart_interrupt_handler+0xfc>)
  405486:	4798      	blx	r3
  405488:	4603      	mov	r3, r0
  40548a:	2b00      	cmp	r3, #0
  40548c:	d007      	beq.n	40549e <_uart_interrupt_handler+0x4e>
		hri_uart_clear_IMR_TXRDY_bit(hw);
  40548e:	68f8      	ldr	r0, [r7, #12]
  405490:	4b2f      	ldr	r3, [pc, #188]	; (405550 <_uart_interrupt_handler+0x100>)
  405492:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
  405494:	687b      	ldr	r3, [r7, #4]
  405496:	681b      	ldr	r3, [r3, #0]
  405498:	6878      	ldr	r0, [r7, #4]
  40549a:	4798      	blx	r3
  40549c:	e04c      	b.n	405538 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_TXEMPTY_bit(hw) && hri_uart_get_IMR_TXEMPTY_bit(hw)) {
  40549e:	68f8      	ldr	r0, [r7, #12]
  4054a0:	4b2c      	ldr	r3, [pc, #176]	; (405554 <_uart_interrupt_handler+0x104>)
  4054a2:	4798      	blx	r3
  4054a4:	4603      	mov	r3, r0
  4054a6:	2b00      	cmp	r3, #0
  4054a8:	d00d      	beq.n	4054c6 <_uart_interrupt_handler+0x76>
  4054aa:	68f8      	ldr	r0, [r7, #12]
  4054ac:	4b2a      	ldr	r3, [pc, #168]	; (405558 <_uart_interrupt_handler+0x108>)
  4054ae:	4798      	blx	r3
  4054b0:	4603      	mov	r3, r0
  4054b2:	2b00      	cmp	r3, #0
  4054b4:	d007      	beq.n	4054c6 <_uart_interrupt_handler+0x76>
		hri_uart_clear_IMR_TXEMPTY_bit(hw);
  4054b6:	68f8      	ldr	r0, [r7, #12]
  4054b8:	4b28      	ldr	r3, [pc, #160]	; (40555c <_uart_interrupt_handler+0x10c>)
  4054ba:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
  4054bc:	687b      	ldr	r3, [r7, #4]
  4054be:	689b      	ldr	r3, [r3, #8]
  4054c0:	6878      	ldr	r0, [r7, #4]
  4054c2:	4798      	blx	r3
  4054c4:	e038      	b.n	405538 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_RXRDY_bit(hw) && hri_uart_get_IMR_RXRDY_bit(hw)) {
  4054c6:	68f8      	ldr	r0, [r7, #12]
  4054c8:	4b25      	ldr	r3, [pc, #148]	; (405560 <_uart_interrupt_handler+0x110>)
  4054ca:	4798      	blx	r3
  4054cc:	4603      	mov	r3, r0
  4054ce:	2b00      	cmp	r3, #0
  4054d0:	d021      	beq.n	405516 <_uart_interrupt_handler+0xc6>
  4054d2:	68f8      	ldr	r0, [r7, #12]
  4054d4:	4b23      	ldr	r3, [pc, #140]	; (405564 <_uart_interrupt_handler+0x114>)
  4054d6:	4798      	blx	r3
  4054d8:	4603      	mov	r3, r0
  4054da:	2b00      	cmp	r3, #0
  4054dc:	d01b      	beq.n	405516 <_uart_interrupt_handler+0xc6>
		if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  4054de:	68f8      	ldr	r0, [r7, #12]
  4054e0:	4b21      	ldr	r3, [pc, #132]	; (405568 <_uart_interrupt_handler+0x118>)
  4054e2:	4798      	blx	r3
  4054e4:	4603      	mov	r3, r0
  4054e6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  4054ea:	2b00      	cmp	r3, #0
  4054ec:	d008      	beq.n	405500 <_uart_interrupt_handler+0xb0>
			hri_uart_read_RHR_reg(hw);
  4054ee:	68f8      	ldr	r0, [r7, #12]
  4054f0:	4b1e      	ldr	r3, [pc, #120]	; (40556c <_uart_interrupt_handler+0x11c>)
  4054f2:	4798      	blx	r3
			hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  4054f4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4054f8:	68f8      	ldr	r0, [r7, #12]
  4054fa:	4b1d      	ldr	r3, [pc, #116]	; (405570 <_uart_interrupt_handler+0x120>)
  4054fc:	4798      	blx	r3
			return;
  4054fe:	e01b      	b.n	405538 <_uart_interrupt_handler+0xe8>
		}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_uart_read_RHR_RXCHR_bf(hw));
  405500:	687b      	ldr	r3, [r7, #4]
  405502:	685c      	ldr	r4, [r3, #4]
  405504:	68f8      	ldr	r0, [r7, #12]
  405506:	4b1b      	ldr	r3, [pc, #108]	; (405574 <_uart_interrupt_handler+0x124>)
  405508:	4798      	blx	r3
  40550a:	4603      	mov	r3, r0
  40550c:	b2db      	uxtb	r3, r3
  40550e:	4619      	mov	r1, r3
  405510:	6878      	ldr	r0, [r7, #4]
  405512:	47a0      	blx	r4
  405514:	e010      	b.n	405538 <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  405516:	68f8      	ldr	r0, [r7, #12]
  405518:	4b13      	ldr	r3, [pc, #76]	; (405568 <_uart_interrupt_handler+0x118>)
  40551a:	4798      	blx	r3
  40551c:	4603      	mov	r3, r0
  40551e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  405522:	2b00      	cmp	r3, #0
  405524:	d008      	beq.n	405538 <_uart_interrupt_handler+0xe8>
		hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  405526:	f44f 7180 	mov.w	r1, #256	; 0x100
  40552a:	68f8      	ldr	r0, [r7, #12]
  40552c:	4b10      	ldr	r3, [pc, #64]	; (405570 <_uart_interrupt_handler+0x120>)
  40552e:	4798      	blx	r3
		device->usart_cb.error_cb(device);
  405530:	687b      	ldr	r3, [r7, #4]
  405532:	68db      	ldr	r3, [r3, #12]
  405534:	6878      	ldr	r0, [r7, #4]
  405536:	4798      	blx	r3
	}
}
  405538:	3714      	adds	r7, #20
  40553a:	46bd      	mov	sp, r7
  40553c:	bd90      	pop	{r4, r7, pc}
  40553e:	bf00      	nop
  405540:	00407ccc 	.word	0x00407ccc
  405544:	00402d41 	.word	0x00402d41
  405548:	00404ed9 	.word	0x00404ed9
  40554c:	00404e11 	.word	0x00404e11
  405550:	00404e39 	.word	0x00404e39
  405554:	00404eff 	.word	0x00404eff
  405558:	00404e6f 	.word	0x00404e6f
  40555c:	00404e97 	.word	0x00404e97
  405560:	00404eb3 	.word	0x00404eb3
  405564:	00404dd1 	.word	0x00404dd1
  405568:	00404f25 	.word	0x00404f25
  40556c:	00404f57 	.word	0x00404f57
  405570:	00404fc5 	.word	0x00404fc5
  405574:	00404f3d 	.word	0x00404f3d

00405578 <UART4_Handler>:

/**
 * \internal UART interrupt handler
 */
void UART4_Handler(void)
{
  405578:	b580      	push	{r7, lr}
  40557a:	af00      	add	r7, sp, #0
	_uart_interrupt_handler(_uart4_dev);
  40557c:	4b03      	ldr	r3, [pc, #12]	; (40558c <UART4_Handler+0x14>)
  40557e:	681b      	ldr	r3, [r3, #0]
  405580:	4618      	mov	r0, r3
  405582:	4b03      	ldr	r3, [pc, #12]	; (405590 <UART4_Handler+0x18>)
  405584:	4798      	blx	r3
}
  405586:	bf00      	nop
  405588:	bd80      	pop	{r7, pc}
  40558a:	bf00      	nop
  40558c:	204011c4 	.word	0x204011c4
  405590:	00405451 	.word	0x00405451

00405594 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  405594:	b580      	push	{r7, lr}
  405596:	b084      	sub	sp, #16
  405598:	af00      	add	r7, sp, #0
  40559a:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  40559c:	687b      	ldr	r3, [r7, #4]
  40559e:	2b00      	cmp	r3, #0
  4055a0:	bf14      	ite	ne
  4055a2:	2301      	movne	r3, #1
  4055a4:	2300      	moveq	r3, #0
  4055a6:	b2db      	uxtb	r3, r3
  4055a8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  4055ac:	4914      	ldr	r1, [pc, #80]	; (405600 <_get_uart_index+0x6c>)
  4055ae:	4618      	mov	r0, r3
  4055b0:	4b14      	ldr	r3, [pc, #80]	; (405604 <_get_uart_index+0x70>)
  4055b2:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  4055b4:	6878      	ldr	r0, [r7, #4]
  4055b6:	4b14      	ldr	r3, [pc, #80]	; (405608 <_get_uart_index+0x74>)
  4055b8:	4798      	blx	r3
  4055ba:	4603      	mov	r3, r0
  4055bc:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4055be:	2300      	movs	r3, #0
  4055c0:	73fb      	strb	r3, [r7, #15]
  4055c2:	e00f      	b.n	4055e4 <_get_uart_index+0x50>
		if (_uarts[i].number == uart_offset) {
  4055c4:	7bfa      	ldrb	r2, [r7, #15]
  4055c6:	4911      	ldr	r1, [pc, #68]	; (40560c <_get_uart_index+0x78>)
  4055c8:	4613      	mov	r3, r2
  4055ca:	005b      	lsls	r3, r3, #1
  4055cc:	4413      	add	r3, r2
  4055ce:	009b      	lsls	r3, r3, #2
  4055d0:	440b      	add	r3, r1
  4055d2:	781b      	ldrb	r3, [r3, #0]
  4055d4:	7bba      	ldrb	r2, [r7, #14]
  4055d6:	429a      	cmp	r2, r3
  4055d8:	d101      	bne.n	4055de <_get_uart_index+0x4a>
			return i;
  4055da:	7bfb      	ldrb	r3, [r7, #15]
  4055dc:	e00c      	b.n	4055f8 <_get_uart_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4055de:	7bfb      	ldrb	r3, [r7, #15]
  4055e0:	3301      	adds	r3, #1
  4055e2:	73fb      	strb	r3, [r7, #15]
  4055e4:	7bfb      	ldrb	r3, [r7, #15]
  4055e6:	2b01      	cmp	r3, #1
  4055e8:	d9ec      	bls.n	4055c4 <_get_uart_index+0x30>
		}
	}

	ASSERT(false);
  4055ea:	f240 22b2 	movw	r2, #690	; 0x2b2
  4055ee:	4904      	ldr	r1, [pc, #16]	; (405600 <_get_uart_index+0x6c>)
  4055f0:	2000      	movs	r0, #0
  4055f2:	4b04      	ldr	r3, [pc, #16]	; (405604 <_get_uart_index+0x70>)
  4055f4:	4798      	blx	r3
	return 0;
  4055f6:	2300      	movs	r3, #0
}
  4055f8:	4618      	mov	r0, r3
  4055fa:	3710      	adds	r7, #16
  4055fc:	46bd      	mov	sp, r7
  4055fe:	bd80      	pop	{r7, pc}
  405600:	00407ccc 	.word	0x00407ccc
  405604:	00402d41 	.word	0x00402d41
  405608:	004053ad 	.word	0x004053ad
  40560c:	20400008 	.word	0x20400008

00405610 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  405610:	b580      	push	{r7, lr}
  405612:	b084      	sub	sp, #16
  405614:	af00      	add	r7, sp, #0
  405616:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  405618:	687b      	ldr	r3, [r7, #4]
  40561a:	2b00      	cmp	r3, #0
  40561c:	bf14      	ite	ne
  40561e:	2301      	movne	r3, #1
  405620:	2300      	moveq	r3, #0
  405622:	b2db      	uxtb	r3, r3
  405624:	f240 22bf 	movw	r2, #703	; 0x2bf
  405628:	491a      	ldr	r1, [pc, #104]	; (405694 <_uart_init+0x84>)
  40562a:	4618      	mov	r0, r3
  40562c:	4b1a      	ldr	r3, [pc, #104]	; (405698 <_uart_init+0x88>)
  40562e:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  405630:	6878      	ldr	r0, [r7, #4]
  405632:	4b1a      	ldr	r3, [pc, #104]	; (40569c <_uart_init+0x8c>)
  405634:	4798      	blx	r3
  405636:	4603      	mov	r3, r0
  405638:	73fb      	strb	r3, [r7, #15]
	/* Disable the Write Protect. */
	hri_uart_write_WPMR_reg(hw, UART_WPMR_WPKEY_PASSWD);
  40563a:	4919      	ldr	r1, [pc, #100]	; (4056a0 <_uart_init+0x90>)
  40563c:	6878      	ldr	r0, [r7, #4]
  40563e:	4b19      	ldr	r3, [pc, #100]	; (4056a4 <_uart_init+0x94>)
  405640:	4798      	blx	r3

	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
  405642:	21ac      	movs	r1, #172	; 0xac
  405644:	6878      	ldr	r0, [r7, #4]
  405646:	4b18      	ldr	r3, [pc, #96]	; (4056a8 <_uart_init+0x98>)
  405648:	4798      	blx	r3
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  40564a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40564e:	6878      	ldr	r0, [r7, #4]
  405650:	4b15      	ldr	r3, [pc, #84]	; (4056a8 <_uart_init+0x98>)
  405652:	4798      	blx	r3

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  405654:	7bfa      	ldrb	r2, [r7, #15]
  405656:	4915      	ldr	r1, [pc, #84]	; (4056ac <_uart_init+0x9c>)
  405658:	4613      	mov	r3, r2
  40565a:	005b      	lsls	r3, r3, #1
  40565c:	4413      	add	r3, r2
  40565e:	009b      	lsls	r3, r3, #2
  405660:	440b      	add	r3, r1
  405662:	3304      	adds	r3, #4
  405664:	681b      	ldr	r3, [r3, #0]
  405666:	4619      	mov	r1, r3
  405668:	6878      	ldr	r0, [r7, #4]
  40566a:	4b11      	ldr	r3, [pc, #68]	; (4056b0 <_uart_init+0xa0>)
  40566c:	4798      	blx	r3
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);
  40566e:	7bfa      	ldrb	r2, [r7, #15]
  405670:	490e      	ldr	r1, [pc, #56]	; (4056ac <_uart_init+0x9c>)
  405672:	4613      	mov	r3, r2
  405674:	005b      	lsls	r3, r3, #1
  405676:	4413      	add	r3, r2
  405678:	009b      	lsls	r3, r3, #2
  40567a:	440b      	add	r3, r1
  40567c:	3308      	adds	r3, #8
  40567e:	681b      	ldr	r3, [r3, #0]
  405680:	4619      	mov	r1, r3
  405682:	6878      	ldr	r0, [r7, #4]
  405684:	4b0b      	ldr	r3, [pc, #44]	; (4056b4 <_uart_init+0xa4>)
  405686:	4798      	blx	r3

	return ERR_NONE;
  405688:	2300      	movs	r3, #0
}
  40568a:	4618      	mov	r0, r3
  40568c:	3710      	adds	r7, #16
  40568e:	46bd      	mov	sp, r7
  405690:	bd80      	pop	{r7, pc}
  405692:	bf00      	nop
  405694:	00407ccc 	.word	0x00407ccc
  405698:	00402d41 	.word	0x00402d41
  40569c:	00405595 	.word	0x00405595
  4056a0:	55415200 	.word	0x55415200
  4056a4:	00404fa7 	.word	0x00404fa7
  4056a8:	00404fc5 	.word	0x00404fc5
  4056ac:	20400008 	.word	0x20400008
  4056b0:	00404f6f 	.word	0x00404f6f
  4056b4:	00404f8b 	.word	0x00404f8b

004056b8 <hri_usbhs_get_DEVEPTISR_RXSTPI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_RXOUTI;
}

static inline bool hri_usbhs_get_DEVEPTISR_RXSTPI_bit(const void *const hw, uint8_t index)
{
  4056b8:	b480      	push	{r7}
  4056ba:	b083      	sub	sp, #12
  4056bc:	af00      	add	r7, sp, #0
  4056be:	6078      	str	r0, [r7, #4]
  4056c0:	460b      	mov	r3, r1
  4056c2:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  4056c4:	78fa      	ldrb	r2, [r7, #3]
  4056c6:	687b      	ldr	r3, [r7, #4]
  4056c8:	324c      	adds	r2, #76	; 0x4c
  4056ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4056ce:	089b      	lsrs	r3, r3, #2
  4056d0:	f003 0301 	and.w	r3, r3, #1
  4056d4:	2b00      	cmp	r3, #0
  4056d6:	bf14      	ite	ne
  4056d8:	2301      	movne	r3, #1
  4056da:	2300      	moveq	r3, #0
  4056dc:	b2db      	uxtb	r3, r3
}
  4056de:	4618      	mov	r0, r3
  4056e0:	370c      	adds	r7, #12
  4056e2:	46bd      	mov	sp, r7
  4056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056e8:	4770      	bx	lr

004056ea <hri_usbhs_get_DEVEPTISR_STALLEDI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_OVERFI;
}

static inline bool hri_usbhs_get_DEVEPTISR_STALLEDI_bit(const void *const hw, uint8_t index)
{
  4056ea:	b480      	push	{r7}
  4056ec:	b083      	sub	sp, #12
  4056ee:	af00      	add	r7, sp, #0
  4056f0:	6078      	str	r0, [r7, #4]
  4056f2:	460b      	mov	r3, r1
  4056f4:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  4056f6:	78fa      	ldrb	r2, [r7, #3]
  4056f8:	687b      	ldr	r3, [r7, #4]
  4056fa:	324c      	adds	r2, #76	; 0x4c
  4056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405700:	099b      	lsrs	r3, r3, #6
  405702:	f003 0301 	and.w	r3, r3, #1
  405706:	2b00      	cmp	r3, #0
  405708:	bf14      	ite	ne
  40570a:	2301      	movne	r3, #1
  40570c:	2300      	moveq	r3, #0
  40570e:	b2db      	uxtb	r3, r3
}
  405710:	4618      	mov	r0, r3
  405712:	370c      	adds	r7, #12
  405714:	46bd      	mov	sp, r7
  405716:	f85d 7b04 	ldr.w	r7, [sp], #4
  40571a:	4770      	bx	lr

0040571c <hri_usbhs_get_DEVEPTISR_RWALL_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_SHORTPACKET;
}

static inline bool hri_usbhs_get_DEVEPTISR_RWALL_bit(const void *const hw, uint8_t index)
{
  40571c:	b480      	push	{r7}
  40571e:	b083      	sub	sp, #12
  405720:	af00      	add	r7, sp, #0
  405722:	6078      	str	r0, [r7, #4]
  405724:	460b      	mov	r3, r1
  405726:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  405728:	78fa      	ldrb	r2, [r7, #3]
  40572a:	687b      	ldr	r3, [r7, #4]
  40572c:	324c      	adds	r2, #76	; 0x4c
  40572e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405732:	0c1b      	lsrs	r3, r3, #16
  405734:	f003 0301 	and.w	r3, r3, #1
  405738:	2b00      	cmp	r3, #0
  40573a:	bf14      	ite	ne
  40573c:	2301      	movne	r3, #1
  40573e:	2300      	moveq	r3, #0
  405740:	b2db      	uxtb	r3, r3
}
  405742:	4618      	mov	r0, r3
  405744:	370c      	adds	r7, #12
  405746:	46bd      	mov	sp, r7
  405748:	f85d 7b04 	ldr.w	r7, [sp], #4
  40574c:	4770      	bx	lr

0040574e <hri_usbhs_get_DEVEPTISR_reg>:
	return tmp;
}

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_get_DEVEPTISR_reg(const void *const hw, uint8_t index,
                                                                    hri_usbhs_deveptisr_reg_t mask)
{
  40574e:	b480      	push	{r7}
  405750:	b087      	sub	sp, #28
  405752:	af00      	add	r7, sp, #0
  405754:	60f8      	str	r0, [r7, #12]
  405756:	460b      	mov	r3, r1
  405758:	607a      	str	r2, [r7, #4]
  40575a:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  40575c:	7afa      	ldrb	r2, [r7, #11]
  40575e:	68fb      	ldr	r3, [r7, #12]
  405760:	324c      	adds	r2, #76	; 0x4c
  405762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405766:	617b      	str	r3, [r7, #20]
	tmp &= mask;
  405768:	697a      	ldr	r2, [r7, #20]
  40576a:	687b      	ldr	r3, [r7, #4]
  40576c:	4013      	ands	r3, r2
  40576e:	617b      	str	r3, [r7, #20]
	return tmp;
  405770:	697b      	ldr	r3, [r7, #20]
}
  405772:	4618      	mov	r0, r3
  405774:	371c      	adds	r7, #28
  405776:	46bd      	mov	sp, r7
  405778:	f85d 7b04 	ldr.w	r7, [sp], #4
  40577c:	4770      	bx	lr

0040577e <hri_usbhs_read_DEVEPTISR_reg>:

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_read_DEVEPTISR_reg(const void *const hw, uint8_t index)
{
  40577e:	b480      	push	{r7}
  405780:	b083      	sub	sp, #12
  405782:	af00      	add	r7, sp, #0
  405784:	6078      	str	r0, [r7, #4]
  405786:	460b      	mov	r3, r1
  405788:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  40578a:	78fa      	ldrb	r2, [r7, #3]
  40578c:	687b      	ldr	r3, [r7, #4]
  40578e:	324c      	adds	r2, #76	; 0x4c
  405790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  405794:	4618      	mov	r0, r3
  405796:	370c      	adds	r7, #12
  405798:	46bd      	mov	sp, r7
  40579a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40579e:	4770      	bx	lr

004057a0 <hri_usbhs_write_DEVEPTICR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
  4057a0:	b480      	push	{r7}
  4057a2:	b085      	sub	sp, #20
  4057a4:	af00      	add	r7, sp, #0
  4057a6:	60f8      	str	r0, [r7, #12]
  4057a8:	460b      	mov	r3, r1
  4057aa:	607a      	str	r2, [r7, #4]
  4057ac:	72fb      	strb	r3, [r7, #11]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4057ae:	7afa      	ldrb	r2, [r7, #11]
  4057b0:	68fb      	ldr	r3, [r7, #12]
  4057b2:	3258      	adds	r2, #88	; 0x58
  4057b4:	6879      	ldr	r1, [r7, #4]
  4057b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4057ba:	bf00      	nop
  4057bc:	3714      	adds	r7, #20
  4057be:	46bd      	mov	sp, r7
  4057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057c4:	4770      	bx	lr

004057c6 <hri_usbhs_set_DEVIMR_SUSPE_bit>:
{
	((Usbhs *)hw)->USBHS_SCR = data;
}

static inline void hri_usbhs_set_DEVIMR_SUSPE_bit(const void *const hw)
{
  4057c6:	b480      	push	{r7}
  4057c8:	b083      	sub	sp, #12
  4057ca:	af00      	add	r7, sp, #0
  4057cc:	6078      	str	r0, [r7, #4]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  4057ce:	687b      	ldr	r3, [r7, #4]
  4057d0:	2201      	movs	r2, #1
  4057d2:	619a      	str	r2, [r3, #24]
}
  4057d4:	bf00      	nop
  4057d6:	370c      	adds	r7, #12
  4057d8:	46bd      	mov	sp, r7
  4057da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057de:	4770      	bx	lr

004057e0 <hri_usbhs_set_DEVIMR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_DMA_7;
}

static inline void hri_usbhs_set_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  4057e0:	b480      	push	{r7}
  4057e2:	b083      	sub	sp, #12
  4057e4:	af00      	add	r7, sp, #0
  4057e6:	6078      	str	r0, [r7, #4]
  4057e8:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  4057ea:	687b      	ldr	r3, [r7, #4]
  4057ec:	683a      	ldr	r2, [r7, #0]
  4057ee:	619a      	str	r2, [r3, #24]
}
  4057f0:	bf00      	nop
  4057f2:	370c      	adds	r7, #12
  4057f4:	46bd      	mov	sp, r7
  4057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057fa:	4770      	bx	lr

004057fc <hri_usbhs_read_DEVIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devimr_reg_t hri_usbhs_read_DEVIMR_reg(const void *const hw)
{
  4057fc:	b480      	push	{r7}
  4057fe:	b083      	sub	sp, #12
  405800:	af00      	add	r7, sp, #0
  405802:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  405804:	687b      	ldr	r3, [r7, #4]
  405806:	691b      	ldr	r3, [r3, #16]
}
  405808:	4618      	mov	r0, r3
  40580a:	370c      	adds	r7, #12
  40580c:	46bd      	mov	sp, r7
  40580e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405812:	4770      	bx	lr

00405814 <hri_usbhs_clear_DEVIMR_reg>:
	((Usbhs *)hw)->USBHS_DEVIER = data;
	((Usbhs *)hw)->USBHS_DEVIDR = ~data;
}

static inline void hri_usbhs_clear_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  405814:	b480      	push	{r7}
  405816:	b083      	sub	sp, #12
  405818:	af00      	add	r7, sp, #0
  40581a:	6078      	str	r0, [r7, #4]
  40581c:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  40581e:	687b      	ldr	r3, [r7, #4]
  405820:	683a      	ldr	r2, [r7, #0]
  405822:	615a      	str	r2, [r3, #20]
}
  405824:	bf00      	nop
  405826:	370c      	adds	r7, #12
  405828:	46bd      	mov	sp, r7
  40582a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40582e:	4770      	bx	lr

00405830 <hri_usbhs_read_DEVISR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devisr_reg_t hri_usbhs_read_DEVISR_reg(const void *const hw)
{
  405830:	b480      	push	{r7}
  405832:	b083      	sub	sp, #12
  405834:	af00      	add	r7, sp, #0
  405836:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVISR;
  405838:	687b      	ldr	r3, [r7, #4]
  40583a:	685b      	ldr	r3, [r3, #4]
}
  40583c:	4618      	mov	r0, r3
  40583e:	370c      	adds	r7, #12
  405840:	46bd      	mov	sp, r7
  405842:	f85d 7b04 	ldr.w	r7, [sp], #4
  405846:	4770      	bx	lr

00405848 <hri_usbhs_read_DEVEPTIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_deveptimr_reg_t hri_usbhs_read_DEVEPTIMR_reg(const void *const hw, uint8_t index)
{
  405848:	b480      	push	{r7}
  40584a:	b083      	sub	sp, #12
  40584c:	af00      	add	r7, sp, #0
  40584e:	6078      	str	r0, [r7, #4]
  405850:	460b      	mov	r3, r1
  405852:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  405854:	78fa      	ldrb	r2, [r7, #3]
  405856:	687b      	ldr	r3, [r7, #4]
  405858:	3270      	adds	r2, #112	; 0x70
  40585a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  40585e:	4618      	mov	r0, r3
  405860:	370c      	adds	r7, #12
  405862:	46bd      	mov	sp, r7
  405864:	f85d 7b04 	ldr.w	r7, [sp], #4
  405868:	4770      	bx	lr

0040586a <hri_usbhs_set_DEVCTRL_ADDEN_bit>:
{
	return ((Usbhs *)hw)->USBHS_HSTPIPIMR[index];
}

static inline void hri_usbhs_set_DEVCTRL_ADDEN_bit(const void *const hw)
{
  40586a:	b480      	push	{r7}
  40586c:	b083      	sub	sp, #12
  40586e:	af00      	add	r7, sp, #0
  405870:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  405872:	687b      	ldr	r3, [r7, #4]
  405874:	681b      	ldr	r3, [r3, #0]
  405876:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  40587a:	687b      	ldr	r3, [r7, #4]
  40587c:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40587e:	bf00      	nop
  405880:	370c      	adds	r7, #12
  405882:	46bd      	mov	sp, r7
  405884:	f85d 7b04 	ldr.w	r7, [sp], #4
  405888:	4770      	bx	lr

0040588a <hri_usbhs_clear_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
  40588a:	b480      	push	{r7}
  40588c:	b083      	sub	sp, #12
  40588e:	af00      	add	r7, sp, #0
  405890:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  405892:	687b      	ldr	r3, [r7, #4]
  405894:	681b      	ldr	r3, [r3, #0]
  405896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40589a:	687b      	ldr	r3, [r7, #4]
  40589c:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  40589e:	bf00      	nop
  4058a0:	370c      	adds	r7, #12
  4058a2:	46bd      	mov	sp, r7
  4058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058a8:	4770      	bx	lr

004058aa <hri_usbhs_write_DEVCTRL_UADD_bf>:
	tmp = (tmp & USBHS_DEVCTRL_UADD(mask)) >> USBHS_DEVCTRL_UADD_Pos;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  4058aa:	b480      	push	{r7}
  4058ac:	b085      	sub	sp, #20
  4058ae:	af00      	add	r7, sp, #0
  4058b0:	6078      	str	r0, [r7, #4]
  4058b2:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  4058b4:	687b      	ldr	r3, [r7, #4]
  4058b6:	681b      	ldr	r3, [r3, #0]
  4058b8:	60fb      	str	r3, [r7, #12]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  4058ba:	68fb      	ldr	r3, [r7, #12]
  4058bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4058c0:	60fb      	str	r3, [r7, #12]
	tmp |= USBHS_DEVCTRL_UADD(data);
  4058c2:	683b      	ldr	r3, [r7, #0]
  4058c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4058c8:	68fa      	ldr	r2, [r7, #12]
  4058ca:	4313      	orrs	r3, r2
  4058cc:	60fb      	str	r3, [r7, #12]
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  4058ce:	687b      	ldr	r3, [r7, #4]
  4058d0:	68fa      	ldr	r2, [r7, #12]
  4058d2:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4058d4:	bf00      	nop
  4058d6:	3714      	adds	r7, #20
  4058d8:	46bd      	mov	sp, r7
  4058da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058de:	4770      	bx	lr

004058e0 <hri_usbhs_write_DEVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_reg(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  4058e0:	b480      	push	{r7}
  4058e2:	b083      	sub	sp, #12
  4058e4:	af00      	add	r7, sp, #0
  4058e6:	6078      	str	r0, [r7, #4]
  4058e8:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  4058ea:	687b      	ldr	r3, [r7, #4]
  4058ec:	683a      	ldr	r2, [r7, #0]
  4058ee:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  4058f0:	bf00      	nop
  4058f2:	370c      	adds	r7, #12
  4058f4:	46bd      	mov	sp, r7
  4058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4058fa:	4770      	bx	lr

004058fc <hri_usbhs_set_DEVEPT_reg>:
	((Usbhs *)hw)->USBHS_DEVEPT ^= USBHS_DEVEPT_EPRST9;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t mask)
{
  4058fc:	b480      	push	{r7}
  4058fe:	b083      	sub	sp, #12
  405900:	af00      	add	r7, sp, #0
  405902:	6078      	str	r0, [r7, #4]
  405904:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT |= mask;
  405906:	687b      	ldr	r3, [r7, #4]
  405908:	69da      	ldr	r2, [r3, #28]
  40590a:	683b      	ldr	r3, [r7, #0]
  40590c:	431a      	orrs	r2, r3
  40590e:	687b      	ldr	r3, [r7, #4]
  405910:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405912:	bf00      	nop
  405914:	370c      	adds	r7, #12
  405916:	46bd      	mov	sp, r7
  405918:	f85d 7b04 	ldr.w	r7, [sp], #4
  40591c:	4770      	bx	lr

0040591e <hri_usbhs_clear_DEVEPT_reg>:
	((Usbhs *)hw)->USBHS_DEVEPT = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPT_reg(const void *const hw, hri_usbhs_devept_reg_t mask)
{
  40591e:	b480      	push	{r7}
  405920:	b083      	sub	sp, #12
  405922:	af00      	add	r7, sp, #0
  405924:	6078      	str	r0, [r7, #4]
  405926:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPT &= ~mask;
  405928:	687b      	ldr	r3, [r7, #4]
  40592a:	69da      	ldr	r2, [r3, #28]
  40592c:	683b      	ldr	r3, [r7, #0]
  40592e:	43db      	mvns	r3, r3
  405930:	401a      	ands	r2, r3
  405932:	687b      	ldr	r3, [r7, #4]
  405934:	61da      	str	r2, [r3, #28]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405936:	bf00      	nop
  405938:	370c      	adds	r7, #12
  40593a:	46bd      	mov	sp, r7
  40593c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405940:	4770      	bx	lr

00405942 <hri_usbhs_set_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPDIR;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  405942:	b480      	push	{r7}
  405944:	b083      	sub	sp, #12
  405946:	af00      	add	r7, sp, #0
  405948:	6078      	str	r0, [r7, #4]
  40594a:	460b      	mov	r3, r1
  40594c:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  40594e:	78fa      	ldrb	r2, [r7, #3]
  405950:	78f9      	ldrb	r1, [r7, #3]
  405952:	687b      	ldr	r3, [r7, #4]
  405954:	3140      	adds	r1, #64	; 0x40
  405956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40595a:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  40595e:	687b      	ldr	r3, [r7, #4]
  405960:	3240      	adds	r2, #64	; 0x40
  405962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405966:	bf00      	nop
  405968:	370c      	adds	r7, #12
  40596a:	46bd      	mov	sp, r7
  40596c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405970:	4770      	bx	lr

00405972 <hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  405972:	b480      	push	{r7}
  405974:	b083      	sub	sp, #12
  405976:	af00      	add	r7, sp, #0
  405978:	6078      	str	r0, [r7, #4]
  40597a:	460b      	mov	r3, r1
  40597c:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  40597e:	78fa      	ldrb	r2, [r7, #3]
  405980:	78f9      	ldrb	r1, [r7, #3]
  405982:	687b      	ldr	r3, [r7, #4]
  405984:	3140      	adds	r1, #64	; 0x40
  405986:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  40598a:	f423 7100 	bic.w	r1, r3, #512	; 0x200
  40598e:	687b      	ldr	r3, [r7, #4]
  405990:	3240      	adds	r2, #64	; 0x40
  405992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405996:	bf00      	nop
  405998:	370c      	adds	r7, #12
  40599a:	46bd      	mov	sp, r7
  40599c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059a0:	4770      	bx	lr

004059a2 <hri_usbhs_read_DEVEPTCFG_EPTYPE_bf>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPTYPE(mask);
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_deveptcfg_reg_t hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(const void *const hw, uint8_t index)
{
  4059a2:	b480      	push	{r7}
  4059a4:	b085      	sub	sp, #20
  4059a6:	af00      	add	r7, sp, #0
  4059a8:	6078      	str	r0, [r7, #4]
  4059aa:	460b      	mov	r3, r1
  4059ac:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  4059ae:	78fa      	ldrb	r2, [r7, #3]
  4059b0:	687b      	ldr	r3, [r7, #4]
  4059b2:	3240      	adds	r2, #64	; 0x40
  4059b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4059b8:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_DEVEPTCFG_EPTYPE_Msk) >> USBHS_DEVEPTCFG_EPTYPE_Pos;
  4059ba:	68fb      	ldr	r3, [r7, #12]
  4059bc:	0adb      	lsrs	r3, r3, #11
  4059be:	f003 0303 	and.w	r3, r3, #3
  4059c2:	60fb      	str	r3, [r7, #12]
	return tmp;
  4059c4:	68fb      	ldr	r3, [r7, #12]
}
  4059c6:	4618      	mov	r0, r3
  4059c8:	3714      	adds	r7, #20
  4059ca:	46bd      	mov	sp, r7
  4059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059d0:	4770      	bx	lr

004059d2 <hri_usbhs_get_CTRL_USBE_bit>:
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_CTRL_USBE_bit(const void *const hw)
{
  4059d2:	b480      	push	{r7}
  4059d4:	b085      	sub	sp, #20
  4059d6:	af00      	add	r7, sp, #0
  4059d8:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  4059da:	687b      	ldr	r3, [r7, #4]
  4059dc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  4059e0:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_CTRL_USBE) >> USBHS_CTRL_USBE_Pos;
  4059e2:	68fb      	ldr	r3, [r7, #12]
  4059e4:	0bdb      	lsrs	r3, r3, #15
  4059e6:	f003 0301 	and.w	r3, r3, #1
  4059ea:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
  4059ec:	68fb      	ldr	r3, [r7, #12]
  4059ee:	2b00      	cmp	r3, #0
  4059f0:	bf14      	ite	ne
  4059f2:	2301      	movne	r3, #1
  4059f4:	2300      	moveq	r3, #0
  4059f6:	b2db      	uxtb	r3, r3
}
  4059f8:	4618      	mov	r0, r3
  4059fa:	3714      	adds	r7, #20
  4059fc:	46bd      	mov	sp, r7
  4059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a02:	4770      	bx	lr

00405a04 <hri_usbhs_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_CTRL_reg(const void *const hw, hri_usbhs_ctrl_reg_t data)
{
  405a04:	b480      	push	{r7}
  405a06:	b083      	sub	sp, #12
  405a08:	af00      	add	r7, sp, #0
  405a0a:	6078      	str	r0, [r7, #4]
  405a0c:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL = data;
  405a0e:	687b      	ldr	r3, [r7, #4]
  405a10:	683a      	ldr	r2, [r7, #0]
  405a12:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405a16:	bf00      	nop
  405a18:	370c      	adds	r7, #12
  405a1a:	46bd      	mov	sp, r7
  405a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a20:	4770      	bx	lr

00405a22 <hri_usbhs_write_DEVICR_reg>:
{
	return ((Usbhs *)hw)->USBHS_CTRL;
}

static inline void hri_usbhs_write_DEVICR_reg(const void *const hw, hri_usbhs_devicr_reg_t data)
{
  405a22:	b480      	push	{r7}
  405a24:	b083      	sub	sp, #12
  405a26:	af00      	add	r7, sp, #0
  405a28:	6078      	str	r0, [r7, #4]
  405a2a:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVICR = data;
  405a2c:	687b      	ldr	r3, [r7, #4]
  405a2e:	683a      	ldr	r2, [r7, #0]
  405a30:	609a      	str	r2, [r3, #8]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405a32:	bf00      	nop
  405a34:	370c      	adds	r7, #12
  405a36:	46bd      	mov	sp, r7
  405a38:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a3c:	4770      	bx	lr

00405a3e <hri_usbhs_write_DEVEPTIFR_reg>:
	((Usbhs *)hw)->USBHS_DEVIFR = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_write_DEVEPTIFR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptifr_reg_t data)
{
  405a3e:	b480      	push	{r7}
  405a40:	b085      	sub	sp, #20
  405a42:	af00      	add	r7, sp, #0
  405a44:	60f8      	str	r0, [r7, #12]
  405a46:	460b      	mov	r3, r1
  405a48:	607a      	str	r2, [r7, #4]
  405a4a:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  405a4c:	7afa      	ldrb	r2, [r7, #11]
  405a4e:	68fb      	ldr	r3, [r7, #12]
  405a50:	3264      	adds	r2, #100	; 0x64
  405a52:	6879      	ldr	r1, [r7, #4]
  405a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405a58:	bf00      	nop
  405a5a:	3714      	adds	r7, #20
  405a5c:	46bd      	mov	sp, r7
  405a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a62:	4770      	bx	lr

00405a64 <hri_usbhs_write_DEVEPTIER_reg>:

static inline void hri_usbhs_write_DEVEPTIER_reg(const void *const hw, uint8_t index, hri_usbhs_deveptier_reg_t data)
{
  405a64:	b480      	push	{r7}
  405a66:	b085      	sub	sp, #20
  405a68:	af00      	add	r7, sp, #0
  405a6a:	60f8      	str	r0, [r7, #12]
  405a6c:	460b      	mov	r3, r1
  405a6e:	607a      	str	r2, [r7, #4]
  405a70:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  405a72:	7afa      	ldrb	r2, [r7, #11]
  405a74:	68fb      	ldr	r3, [r7, #12]
  405a76:	327c      	adds	r2, #124	; 0x7c
  405a78:	6879      	ldr	r1, [r7, #4]
  405a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405a7e:	bf00      	nop
  405a80:	3714      	adds	r7, #20
  405a82:	46bd      	mov	sp, r7
  405a84:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a88:	4770      	bx	lr

00405a8a <hri_usbhs_write_DEVEPTIDR_reg>:

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
  405a8a:	b480      	push	{r7}
  405a8c:	b085      	sub	sp, #20
  405a8e:	af00      	add	r7, sp, #0
  405a90:	60f8      	str	r0, [r7, #12]
  405a92:	460b      	mov	r3, r1
  405a94:	607a      	str	r2, [r7, #4]
  405a96:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  405a98:	7afa      	ldrb	r2, [r7, #11]
  405a9a:	68fb      	ldr	r3, [r7, #12]
  405a9c:	3288      	adds	r2, #136	; 0x88
  405a9e:	6879      	ldr	r1, [r7, #4]
  405aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405aa4:	bf00      	nop
  405aa6:	3714      	adds	r7, #20
  405aa8:	46bd      	mov	sp, r7
  405aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  405aae:	4770      	bx	lr

00405ab0 <hri_usbhs_write_DEVDMAADDRESS_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
  405ab0:	b480      	push	{r7}
  405ab2:	b085      	sub	sp, #20
  405ab4:	af00      	add	r7, sp, #0
  405ab6:	60f8      	str	r0, [r7, #12]
  405ab8:	460b      	mov	r3, r1
  405aba:	607a      	str	r2, [r7, #4]
  405abc:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMAADDRESS = data;
  405abe:	7afb      	ldrb	r3, [r7, #11]
  405ac0:	68fa      	ldr	r2, [r7, #12]
  405ac2:	3331      	adds	r3, #49	; 0x31
  405ac4:	011b      	lsls	r3, r3, #4
  405ac6:	4413      	add	r3, r2
  405ac8:	3304      	adds	r3, #4
  405aca:	687a      	ldr	r2, [r7, #4]
  405acc:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405ace:	bf00      	nop
  405ad0:	3714      	adds	r7, #20
  405ad2:	46bd      	mov	sp, r7
  405ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ad8:	4770      	bx	lr

00405ada <hri_usbhs_write_DEVDMACONTROL_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMACONTROL_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmacontrol_reg_t data)
{
  405ada:	b480      	push	{r7}
  405adc:	b085      	sub	sp, #20
  405ade:	af00      	add	r7, sp, #0
  405ae0:	60f8      	str	r0, [r7, #12]
  405ae2:	460b      	mov	r3, r1
  405ae4:	607a      	str	r2, [r7, #4]
  405ae6:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL = data;
  405ae8:	7afb      	ldrb	r3, [r7, #11]
  405aea:	68fa      	ldr	r2, [r7, #12]
  405aec:	011b      	lsls	r3, r3, #4
  405aee:	4413      	add	r3, r2
  405af0:	f503 7346 	add.w	r3, r3, #792	; 0x318
  405af4:	687a      	ldr	r2, [r7, #4]
  405af6:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  405af8:	bf00      	nop
  405afa:	3714      	adds	r7, #20
  405afc:	46bd      	mov	sp, r7
  405afe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b02:	4770      	bx	lr

00405b04 <hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit>:
{
	return ((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL;
}

static inline bool hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(const void *const hw, uint8_t submodule_index)
{
  405b04:	b480      	push	{r7}
  405b06:	b083      	sub	sp, #12
  405b08:	af00      	add	r7, sp, #0
  405b0a:	6078      	str	r0, [r7, #4]
  405b0c:	460b      	mov	r3, r1
  405b0e:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  405b10:	78fb      	ldrb	r3, [r7, #3]
  405b12:	687a      	ldr	r2, [r7, #4]
  405b14:	011b      	lsls	r3, r3, #4
  405b16:	4413      	add	r3, r2
  405b18:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  405b1c:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_CHANN_ENB_Pos;
  405b1e:	f003 0301 	and.w	r3, r3, #1
  405b22:	2b00      	cmp	r3, #0
  405b24:	bf14      	ite	ne
  405b26:	2301      	movne	r3, #1
  405b28:	2300      	moveq	r3, #0
  405b2a:	b2db      	uxtb	r3, r3
}
  405b2c:	4618      	mov	r0, r3
  405b2e:	370c      	adds	r7, #12
  405b30:	46bd      	mov	sp, r7
  405b32:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b36:	4770      	bx	lr

00405b38 <hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit>:
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS = USBHS_DEVDMASTATUS_CHANN_ACT;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
  405b38:	b480      	push	{r7}
  405b3a:	b083      	sub	sp, #12
  405b3c:	af00      	add	r7, sp, #0
  405b3e:	6078      	str	r0, [r7, #4]
  405b40:	460b      	mov	r3, r1
  405b42:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  405b44:	78fb      	ldrb	r3, [r7, #3]
  405b46:	687a      	ldr	r2, [r7, #4]
  405b48:	011b      	lsls	r3, r3, #4
  405b4a:	4413      	add	r3, r2
  405b4c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  405b50:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_END_TR_ST_Pos;
  405b52:	091b      	lsrs	r3, r3, #4
  405b54:	f003 0301 	and.w	r3, r3, #1
  405b58:	2b00      	cmp	r3, #0
  405b5a:	bf14      	ite	ne
  405b5c:	2301      	movne	r3, #1
  405b5e:	2300      	moveq	r3, #0
  405b60:	b2db      	uxtb	r3, r3
}
  405b62:	4618      	mov	r0, r3
  405b64:	370c      	adds	r7, #12
  405b66:	46bd      	mov	sp, r7
  405b68:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b6c:	4770      	bx	lr

00405b6e <hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf>:
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
  405b6e:	b480      	push	{r7}
  405b70:	b083      	sub	sp, #12
  405b72:	af00      	add	r7, sp, #0
  405b74:	6078      	str	r0, [r7, #4]
  405b76:	460b      	mov	r3, r1
  405b78:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  405b7a:	78fb      	ldrb	r3, [r7, #3]
  405b7c:	687a      	ldr	r2, [r7, #4]
  405b7e:	011b      	lsls	r3, r3, #4
  405b80:	4413      	add	r3, r2
  405b82:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  405b86:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_BUFF_COUNT_Pos;
  405b88:	0c1b      	lsrs	r3, r3, #16
  405b8a:	b29b      	uxth	r3, r3
}
  405b8c:	4618      	mov	r0, r3
  405b8e:	370c      	adds	r7, #12
  405b90:	46bd      	mov	sp, r7
  405b92:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b96:	4770      	bx	lr

00405b98 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  405b98:	b480      	push	{r7}
  405b9a:	b083      	sub	sp, #12
  405b9c:	af00      	add	r7, sp, #0
  405b9e:	6078      	str	r0, [r7, #4]
  405ba0:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
}
  405ba2:	bf00      	nop
  405ba4:	370c      	adds	r7, #12
  405ba6:	46bd      	mov	sp, r7
  405ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bac:	4770      	bx	lr

00405bae <_dummy_func_return_false>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
  405bae:	b480      	push	{r7}
  405bb0:	b083      	sub	sp, #12
  405bb2:	af00      	add	r7, sp, #0
  405bb4:	6078      	str	r0, [r7, #4]
  405bb6:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
  405bb8:	2300      	movs	r3, #0
}
  405bba:	4618      	mov	r0, r3
  405bbc:	370c      	adds	r7, #12
  405bbe:	46bd      	mov	sp, r7
  405bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  405bc4:	4770      	bx	lr
	...

00405bc8 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
  405bc8:	b580      	push	{r7, lr}
  405bca:	b082      	sub	sp, #8
  405bcc:	af00      	add	r7, sp, #0
  405bce:	4603      	mov	r3, r0
  405bd0:	6039      	str	r1, [r7, #0]
  405bd2:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTICR_reg(USBHS, epn, flags);
  405bd4:	79fb      	ldrb	r3, [r7, #7]
  405bd6:	683a      	ldr	r2, [r7, #0]
  405bd8:	4619      	mov	r1, r3
  405bda:	4803      	ldr	r0, [pc, #12]	; (405be8 <_usbd_ep_int_ack+0x20>)
  405bdc:	4b03      	ldr	r3, [pc, #12]	; (405bec <_usbd_ep_int_ack+0x24>)
  405bde:	4798      	blx	r3
}
  405be0:	bf00      	nop
  405be2:	3708      	adds	r7, #8
  405be4:	46bd      	mov	sp, r7
  405be6:	bd80      	pop	{r7, pc}
  405be8:	40038000 	.word	0x40038000
  405bec:	004057a1 	.word	0x004057a1

00405bf0 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
  405bf0:	b580      	push	{r7, lr}
  405bf2:	b082      	sub	sp, #8
  405bf4:	af00      	add	r7, sp, #0
  405bf6:	4603      	mov	r3, r0
  405bf8:	6039      	str	r1, [r7, #0]
  405bfa:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIER_reg(USBHS, epn, flags);
  405bfc:	79fb      	ldrb	r3, [r7, #7]
  405bfe:	683a      	ldr	r2, [r7, #0]
  405c00:	4619      	mov	r1, r3
  405c02:	4808      	ldr	r0, [pc, #32]	; (405c24 <_usbd_ep_int_en+0x34>)
  405c04:	4b08      	ldr	r3, [pc, #32]	; (405c28 <_usbd_ep_int_en+0x38>)
  405c06:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  405c08:	79fb      	ldrb	r3, [r7, #7]
  405c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405c0e:	fa02 f303 	lsl.w	r3, r2, r3
  405c12:	4619      	mov	r1, r3
  405c14:	4803      	ldr	r0, [pc, #12]	; (405c24 <_usbd_ep_int_en+0x34>)
  405c16:	4b05      	ldr	r3, [pc, #20]	; (405c2c <_usbd_ep_int_en+0x3c>)
  405c18:	4798      	blx	r3
}
  405c1a:	bf00      	nop
  405c1c:	3708      	adds	r7, #8
  405c1e:	46bd      	mov	sp, r7
  405c20:	bd80      	pop	{r7, pc}
  405c22:	bf00      	nop
  405c24:	40038000 	.word	0x40038000
  405c28:	00405a65 	.word	0x00405a65
  405c2c:	004057e1 	.word	0x004057e1

00405c30 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
  405c30:	b580      	push	{r7, lr}
  405c32:	b082      	sub	sp, #8
  405c34:	af00      	add	r7, sp, #0
  405c36:	4603      	mov	r3, r0
  405c38:	6039      	str	r1, [r7, #0]
  405c3a:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, flags);
  405c3c:	79fb      	ldrb	r3, [r7, #7]
  405c3e:	683a      	ldr	r2, [r7, #0]
  405c40:	4619      	mov	r1, r3
  405c42:	4803      	ldr	r0, [pc, #12]	; (405c50 <_usbd_ep_int_dis+0x20>)
  405c44:	4b03      	ldr	r3, [pc, #12]	; (405c54 <_usbd_ep_int_dis+0x24>)
  405c46:	4798      	blx	r3
}
  405c48:	bf00      	nop
  405c4a:	3708      	adds	r7, #8
  405c4c:	46bd      	mov	sp, r7
  405c4e:	bd80      	pop	{r7, pc}
  405c50:	40038000 	.word	0x40038000
  405c54:	00405a8b 	.word	0x00405a8b

00405c58 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
  405c58:	b580      	push	{r7, lr}
  405c5a:	b082      	sub	sp, #8
  405c5c:	af00      	add	r7, sp, #0
  405c5e:	4603      	mov	r3, r0
  405c60:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(USBHS, epn) == USB_D_EPCFG_CTRL);
  405c62:	79fb      	ldrb	r3, [r7, #7]
  405c64:	4619      	mov	r1, r3
  405c66:	4806      	ldr	r0, [pc, #24]	; (405c80 <_usbd_ep_is_ctrl+0x28>)
  405c68:	4b06      	ldr	r3, [pc, #24]	; (405c84 <_usbd_ep_is_ctrl+0x2c>)
  405c6a:	4798      	blx	r3
  405c6c:	4603      	mov	r3, r0
  405c6e:	2b00      	cmp	r3, #0
  405c70:	bf0c      	ite	eq
  405c72:	2301      	moveq	r3, #1
  405c74:	2300      	movne	r3, #0
  405c76:	b2db      	uxtb	r3, r3
}
  405c78:	4618      	mov	r0, r3
  405c7a:	3708      	adds	r7, #8
  405c7c:	46bd      	mov	sp, r7
  405c7e:	bd80      	pop	{r7, pc}
  405c80:	40038000 	.word	0x40038000
  405c84:	004059a3 	.word	0x004059a3

00405c88 <_usbd_ep_set_stall>:
/** \brief Set endpoint stall
 * \param[in] epn Endpoint number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, bool st)
{
  405c88:	b580      	push	{r7, lr}
  405c8a:	b084      	sub	sp, #16
  405c8c:	af00      	add	r7, sp, #0
  405c8e:	4603      	mov	r3, r0
  405c90:	460a      	mov	r2, r1
  405c92:	71fb      	strb	r3, [r7, #7]
  405c94:	4613      	mov	r3, r2
  405c96:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405c98:	4b0b      	ldr	r3, [pc, #44]	; (405cc8 <_usbd_ep_set_stall+0x40>)
  405c9a:	60fb      	str	r3, [r7, #12]

	if (st) {
  405c9c:	79bb      	ldrb	r3, [r7, #6]
  405c9e:	2b00      	cmp	r3, #0
  405ca0:	d007      	beq.n	405cb2 <_usbd_ep_set_stall+0x2a>
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_STALLRQS);
  405ca2:	79fb      	ldrb	r3, [r7, #7]
  405ca4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405ca8:	4619      	mov	r1, r3
  405caa:	68f8      	ldr	r0, [r7, #12]
  405cac:	4b07      	ldr	r3, [pc, #28]	; (405ccc <_usbd_ep_set_stall+0x44>)
  405cae:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
	}
}
  405cb0:	e006      	b.n	405cc0 <_usbd_ep_set_stall+0x38>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
  405cb2:	79fb      	ldrb	r3, [r7, #7]
  405cb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405cb8:	4619      	mov	r1, r3
  405cba:	68f8      	ldr	r0, [r7, #12]
  405cbc:	4b04      	ldr	r3, [pc, #16]	; (405cd0 <_usbd_ep_set_stall+0x48>)
  405cbe:	4798      	blx	r3
}
  405cc0:	bf00      	nop
  405cc2:	3710      	adds	r7, #16
  405cc4:	46bd      	mov	sp, r7
  405cc6:	bd80      	pop	{r7, pc}
  405cc8:	40038000 	.word	0x40038000
  405ccc:	00405a65 	.word	0x00405a65
  405cd0:	00405a8b 	.word	0x00405a8b

00405cd4 <_usbd_ep_is_stall_sent>:
/** \brief Check if stall has been sent from the endpoint
 * \param[in] epn Endpoint number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn)
{
  405cd4:	b580      	push	{r7, lr}
  405cd6:	b082      	sub	sp, #8
  405cd8:	af00      	add	r7, sp, #0
  405cda:	4603      	mov	r3, r0
  405cdc:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_STALLEDI_bit(USBHS, epn));
  405cde:	79fb      	ldrb	r3, [r7, #7]
  405ce0:	4619      	mov	r1, r3
  405ce2:	4804      	ldr	r0, [pc, #16]	; (405cf4 <_usbd_ep_is_stall_sent+0x20>)
  405ce4:	4b04      	ldr	r3, [pc, #16]	; (405cf8 <_usbd_ep_is_stall_sent+0x24>)
  405ce6:	4798      	blx	r3
  405ce8:	4603      	mov	r3, r0
}
  405cea:	4618      	mov	r0, r3
  405cec:	3708      	adds	r7, #8
  405cee:	46bd      	mov	sp, r7
  405cf0:	bd80      	pop	{r7, pc}
  405cf2:	bf00      	nop
  405cf4:	40038000 	.word	0x40038000
  405cf8:	004056eb 	.word	0x004056eb

00405cfc <_usbd_ep_ack_stall>:

/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn)
{
  405cfc:	b580      	push	{r7, lr}
  405cfe:	b082      	sub	sp, #8
  405d00:	af00      	add	r7, sp, #0
  405d02:	4603      	mov	r3, r0
  405d04:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_STALLEDI);
  405d06:	79fb      	ldrb	r3, [r7, #7]
  405d08:	2140      	movs	r1, #64	; 0x40
  405d0a:	4618      	mov	r0, r3
  405d0c:	4b02      	ldr	r3, [pc, #8]	; (405d18 <_usbd_ep_ack_stall+0x1c>)
  405d0e:	4798      	blx	r3
}
  405d10:	bf00      	nop
  405d12:	3708      	adds	r7, #8
  405d14:	46bd      	mov	sp, r7
  405d16:	bd80      	pop	{r7, pc}
  405d18:	00405bc9 	.word	0x00405bc9

00405d1c <_usbd_ep_int_stall_en>:
/** \brief Enable/disable endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, const bool en)
{
  405d1c:	b580      	push	{r7, lr}
  405d1e:	b082      	sub	sp, #8
  405d20:	af00      	add	r7, sp, #0
  405d22:	4603      	mov	r3, r0
  405d24:	460a      	mov	r2, r1
  405d26:	71fb      	strb	r3, [r7, #7]
  405d28:	4613      	mov	r3, r2
  405d2a:	71bb      	strb	r3, [r7, #6]
	if (en) {
  405d2c:	79bb      	ldrb	r3, [r7, #6]
  405d2e:	2b00      	cmp	r3, #0
  405d30:	d005      	beq.n	405d3e <_usbd_ep_int_stall_en+0x22>
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  405d32:	79fb      	ldrb	r3, [r7, #7]
  405d34:	2140      	movs	r1, #64	; 0x40
  405d36:	4618      	mov	r0, r3
  405d38:	4b05      	ldr	r3, [pc, #20]	; (405d50 <_usbd_ep_int_stall_en+0x34>)
  405d3a:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
	}
}
  405d3c:	e004      	b.n	405d48 <_usbd_ep_int_stall_en+0x2c>
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  405d3e:	79fb      	ldrb	r3, [r7, #7]
  405d40:	2140      	movs	r1, #64	; 0x40
  405d42:	4618      	mov	r0, r3
  405d44:	4b03      	ldr	r3, [pc, #12]	; (405d54 <_usbd_ep_int_stall_en+0x38>)
  405d46:	4798      	blx	r3
}
  405d48:	bf00      	nop
  405d4a:	3708      	adds	r7, #8
  405d4c:	46bd      	mov	sp, r7
  405d4e:	bd80      	pop	{r7, pc}
  405d50:	00405bf1 	.word	0x00405bf1
  405d54:	00405c31 	.word	0x00405c31

00405d58 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
  405d58:	b580      	push	{r7, lr}
  405d5a:	b082      	sub	sp, #8
  405d5c:	af00      	add	r7, sp, #0
  405d5e:	4603      	mov	r3, r0
  405d60:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, USBHS_DEVEPTIDR_RXSTPEC);
  405d62:	79fb      	ldrb	r3, [r7, #7]
  405d64:	2204      	movs	r2, #4
  405d66:	4619      	mov	r1, r3
  405d68:	4803      	ldr	r0, [pc, #12]	; (405d78 <_usbd_ep_stop_setup+0x20>)
  405d6a:	4b04      	ldr	r3, [pc, #16]	; (405d7c <_usbd_ep_stop_setup+0x24>)
  405d6c:	4798      	blx	r3
}
  405d6e:	bf00      	nop
  405d70:	3708      	adds	r7, #8
  405d72:	46bd      	mov	sp, r7
  405d74:	bd80      	pop	{r7, pc}
  405d76:	bf00      	nop
  405d78:	40038000 	.word	0x40038000
  405d7c:	00405a8b 	.word	0x00405a8b

00405d80 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
  405d80:	b580      	push	{r7, lr}
  405d82:	b082      	sub	sp, #8
  405d84:	af00      	add	r7, sp, #0
  405d86:	4603      	mov	r3, r0
  405d88:	71fb      	strb	r3, [r7, #7]
	return hri_usbhs_get_DEVEPTISR_RXSTPI_bit(USBHS, epn);
  405d8a:	79fb      	ldrb	r3, [r7, #7]
  405d8c:	4619      	mov	r1, r3
  405d8e:	4804      	ldr	r0, [pc, #16]	; (405da0 <_usbd_ep_is_setup+0x20>)
  405d90:	4b04      	ldr	r3, [pc, #16]	; (405da4 <_usbd_ep_is_setup+0x24>)
  405d92:	4798      	blx	r3
  405d94:	4603      	mov	r3, r0
}
  405d96:	4618      	mov	r0, r3
  405d98:	3708      	adds	r7, #8
  405d9a:	46bd      	mov	sp, r7
  405d9c:	bd80      	pop	{r7, pc}
  405d9e:	bf00      	nop
  405da0:	40038000 	.word	0x40038000
  405da4:	004056b9 	.word	0x004056b9

00405da8 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
  405da8:	b580      	push	{r7, lr}
  405daa:	b082      	sub	sp, #8
  405dac:	af00      	add	r7, sp, #0
  405dae:	4603      	mov	r3, r0
  405db0:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_RXSTPI);
  405db2:	79fb      	ldrb	r3, [r7, #7]
  405db4:	2104      	movs	r1, #4
  405db6:	4618      	mov	r0, r3
  405db8:	4b02      	ldr	r3, [pc, #8]	; (405dc4 <_usbd_ep_ack_setup+0x1c>)
  405dba:	4798      	blx	r3
}
  405dbc:	bf00      	nop
  405dbe:	3708      	adds	r7, #8
  405dc0:	46bd      	mov	sp, r7
  405dc2:	bd80      	pop	{r7, pc}
  405dc4:	00405bc9 	.word	0x00405bc9

00405dc8 <_usbd_ep_reset>:

/** \brief Reset endpoint without configurations
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset(uint8_t epn)
{
  405dc8:	b580      	push	{r7, lr}
  405dca:	b084      	sub	sp, #16
  405dcc:	af00      	add	r7, sp, #0
  405dce:	4603      	mov	r3, r0
  405dd0:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405dd2:	4b0c      	ldr	r3, [pc, #48]	; (405e04 <_usbd_ep_reset+0x3c>)
  405dd4:	60fb      	str	r3, [r7, #12]
	hri_usbhs_set_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  405dd6:	79fb      	ldrb	r3, [r7, #7]
  405dd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405ddc:	fa02 f303 	lsl.w	r3, r2, r3
  405de0:	4619      	mov	r1, r3
  405de2:	68f8      	ldr	r0, [r7, #12]
  405de4:	4b08      	ldr	r3, [pc, #32]	; (405e08 <_usbd_ep_reset+0x40>)
  405de6:	4798      	blx	r3
	hri_usbhs_clear_DEVEPT_reg(hw, USBHS_DEVEPT_EPRST0 << epn);
  405de8:	79fb      	ldrb	r3, [r7, #7]
  405dea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  405dee:	fa02 f303 	lsl.w	r3, r2, r3
  405df2:	4619      	mov	r1, r3
  405df4:	68f8      	ldr	r0, [r7, #12]
  405df6:	4b05      	ldr	r3, [pc, #20]	; (405e0c <_usbd_ep_reset+0x44>)
  405df8:	4798      	blx	r3
}
  405dfa:	bf00      	nop
  405dfc:	3710      	adds	r7, #16
  405dfe:	46bd      	mov	sp, r7
  405e00:	bd80      	pop	{r7, pc}
  405e02:	bf00      	nop
  405e04:	40038000 	.word	0x40038000
  405e08:	004058fd 	.word	0x004058fd
  405e0c:	0040591f 	.word	0x0040591f

00405e10 <_usbd_ep_reset_toggle>:

/** \brief Reset endpoint toggle value
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset_toggle(uint8_t epn)
{
  405e10:	b580      	push	{r7, lr}
  405e12:	b084      	sub	sp, #16
  405e14:	af00      	add	r7, sp, #0
  405e16:	4603      	mov	r3, r0
  405e18:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405e1a:	4b06      	ldr	r3, [pc, #24]	; (405e34 <_usbd_ep_reset_toggle+0x24>)
  405e1c:	60fb      	str	r3, [r7, #12]
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RSTDTS);
  405e1e:	79fb      	ldrb	r3, [r7, #7]
  405e20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  405e24:	4619      	mov	r1, r3
  405e26:	68f8      	ldr	r0, [r7, #12]
  405e28:	4b03      	ldr	r3, [pc, #12]	; (405e38 <_usbd_ep_reset_toggle+0x28>)
  405e2a:	4798      	blx	r3
}
  405e2c:	bf00      	nop
  405e2e:	3710      	adds	r7, #16
  405e30:	46bd      	mov	sp, r7
  405e32:	bd80      	pop	{r7, pc}
  405e34:	40038000 	.word	0x40038000
  405e38:	00405a65 	.word	0x00405a65

00405e3c <_usbd_ep_get_trans_count>:

/** \brief Get byte count for transactions
 * \param[in] epn Endpoint number.
 */
static inline uint16_t _usbd_ep_get_trans_count(uint8_t epn)
{
  405e3c:	b580      	push	{r7, lr}
  405e3e:	b082      	sub	sp, #8
  405e40:	af00      	add	r7, sp, #0
  405e42:	4603      	mov	r3, r0
  405e44:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  405e46:	79fb      	ldrb	r3, [r7, #7]
  405e48:	4a05      	ldr	r2, [pc, #20]	; (405e60 <_usbd_ep_get_trans_count+0x24>)
  405e4a:	4619      	mov	r1, r3
  405e4c:	4805      	ldr	r0, [pc, #20]	; (405e64 <_usbd_ep_get_trans_count+0x28>)
  405e4e:	4b06      	ldr	r3, [pc, #24]	; (405e68 <_usbd_ep_get_trans_count+0x2c>)
  405e50:	4798      	blx	r3
  405e52:	4603      	mov	r3, r0
  405e54:	0d1b      	lsrs	r3, r3, #20
  405e56:	b29b      	uxth	r3, r3
}
  405e58:	4618      	mov	r0, r3
  405e5a:	3708      	adds	r7, #8
  405e5c:	46bd      	mov	sp, r7
  405e5e:	bd80      	pop	{r7, pc}
  405e60:	7ff00000 	.word	0x7ff00000
  405e64:	40038000 	.word	0x40038000
  405e68:	0040574f 	.word	0x0040574f

00405e6c <_usbd_ep_send_zlp_in>:

/** \brief Send a ZLP IN on control endpoint
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_send_zlp_in(uint8_t epn)
{
  405e6c:	b580      	push	{r7, lr}
  405e6e:	b084      	sub	sp, #16
  405e70:	af00      	add	r7, sp, #0
  405e72:	4603      	mov	r3, r0
  405e74:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  405e76:	4b0c      	ldr	r3, [pc, #48]	; (405ea8 <_usbd_ep_send_zlp_in+0x3c>)
  405e78:	60fb      	str	r3, [r7, #12]

	/* Send ZLP on IN endpoint. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  405e7a:	79fb      	ldrb	r3, [r7, #7]
  405e7c:	2201      	movs	r2, #1
  405e7e:	4619      	mov	r1, r3
  405e80:	68f8      	ldr	r0, [r7, #12]
  405e82:	4b0a      	ldr	r3, [pc, #40]	; (405eac <_usbd_ep_send_zlp_in+0x40>)
  405e84:	4798      	blx	r3

	/* To detect a protocol error, enable nak interrupt on data OUT phase. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_NAKOUTIC);
  405e86:	79fb      	ldrb	r3, [r7, #7]
  405e88:	2208      	movs	r2, #8
  405e8a:	4619      	mov	r1, r3
  405e8c:	68f8      	ldr	r0, [r7, #12]
  405e8e:	4b07      	ldr	r3, [pc, #28]	; (405eac <_usbd_ep_send_zlp_in+0x40>)
  405e90:	4798      	blx	r3
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_NAKOUTES);
  405e92:	79fb      	ldrb	r3, [r7, #7]
  405e94:	2208      	movs	r2, #8
  405e96:	4619      	mov	r1, r3
  405e98:	68f8      	ldr	r0, [r7, #12]
  405e9a:	4b05      	ldr	r3, [pc, #20]	; (405eb0 <_usbd_ep_send_zlp_in+0x44>)
  405e9c:	4798      	blx	r3
}
  405e9e:	bf00      	nop
  405ea0:	3710      	adds	r7, #16
  405ea2:	46bd      	mov	sp, r7
  405ea4:	bd80      	pop	{r7, pc}
  405ea6:	bf00      	nop
  405ea8:	40038000 	.word	0x40038000
  405eac:	004057a1 	.word	0x004057a1
  405eb0:	00405a65 	.word	0x00405a65

00405eb4 <_usbd_ep_set_in_rdy>:
/** Set IN ready for IN transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, const bool rdy)
{
  405eb4:	b580      	push	{r7, lr}
  405eb6:	b084      	sub	sp, #16
  405eb8:	af00      	add	r7, sp, #0
  405eba:	4603      	mov	r3, r0
  405ebc:	460a      	mov	r2, r1
  405ebe:	71fb      	strb	r3, [r7, #7]
  405ec0:	4613      	mov	r3, r2
  405ec2:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405ec4:	4b0a      	ldr	r3, [pc, #40]	; (405ef0 <_usbd_ep_set_in_rdy+0x3c>)
  405ec6:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  405ec8:	79bb      	ldrb	r3, [r7, #6]
  405eca:	2b00      	cmp	r3, #0
  405ecc:	d006      	beq.n	405edc <_usbd_ep_set_in_rdy+0x28>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  405ece:	79fb      	ldrb	r3, [r7, #7]
  405ed0:	2201      	movs	r2, #1
  405ed2:	4619      	mov	r1, r3
  405ed4:	68f8      	ldr	r0, [r7, #12]
  405ed6:	4b07      	ldr	r3, [pc, #28]	; (405ef4 <_usbd_ep_set_in_rdy+0x40>)
  405ed8:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
	}
}
  405eda:	e005      	b.n	405ee8 <_usbd_ep_set_in_rdy+0x34>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  405edc:	79fb      	ldrb	r3, [r7, #7]
  405ede:	2201      	movs	r2, #1
  405ee0:	4619      	mov	r1, r3
  405ee2:	68f8      	ldr	r0, [r7, #12]
  405ee4:	4b04      	ldr	r3, [pc, #16]	; (405ef8 <_usbd_ep_set_in_rdy+0x44>)
  405ee6:	4798      	blx	r3
}
  405ee8:	bf00      	nop
  405eea:	3710      	adds	r7, #16
  405eec:	46bd      	mov	sp, r7
  405eee:	bd80      	pop	{r7, pc}
  405ef0:	40038000 	.word	0x40038000
  405ef4:	004057a1 	.word	0x004057a1
  405ef8:	00405a3f 	.word	0x00405a3f

00405efc <_usbd_ep_set_out_rdy>:
/** \brief Set ready for OUT transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, const bool rdy)
{
  405efc:	b580      	push	{r7, lr}
  405efe:	b084      	sub	sp, #16
  405f00:	af00      	add	r7, sp, #0
  405f02:	4603      	mov	r3, r0
  405f04:	460a      	mov	r2, r1
  405f06:	71fb      	strb	r3, [r7, #7]
  405f08:	4613      	mov	r3, r2
  405f0a:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  405f0c:	4b0a      	ldr	r3, [pc, #40]	; (405f38 <_usbd_ep_set_out_rdy+0x3c>)
  405f0e:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  405f10:	79bb      	ldrb	r3, [r7, #6]
  405f12:	2b00      	cmp	r3, #0
  405f14:	d006      	beq.n	405f24 <_usbd_ep_set_out_rdy+0x28>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_RXOUTIS);
  405f16:	79fb      	ldrb	r3, [r7, #7]
  405f18:	2202      	movs	r2, #2
  405f1a:	4619      	mov	r1, r3
  405f1c:	68f8      	ldr	r0, [r7, #12]
  405f1e:	4b07      	ldr	r3, [pc, #28]	; (405f3c <_usbd_ep_set_out_rdy+0x40>)
  405f20:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
	}
}
  405f22:	e005      	b.n	405f30 <_usbd_ep_set_out_rdy+0x34>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  405f24:	79fb      	ldrb	r3, [r7, #7]
  405f26:	2202      	movs	r2, #2
  405f28:	4619      	mov	r1, r3
  405f2a:	68f8      	ldr	r0, [r7, #12]
  405f2c:	4b04      	ldr	r3, [pc, #16]	; (405f40 <_usbd_ep_set_out_rdy+0x44>)
  405f2e:	4798      	blx	r3
}
  405f30:	bf00      	nop
  405f32:	3710      	adds	r7, #16
  405f34:	46bd      	mov	sp, r7
  405f36:	bd80      	pop	{r7, pc}
  405f38:	40038000 	.word	0x40038000
  405f3c:	00405a3f 	.word	0x00405a3f
  405f40:	004057a1 	.word	0x004057a1

00405f44 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
  405f44:	b580      	push	{r7, lr}
  405f46:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_SOFC);
  405f48:	2104      	movs	r1, #4
  405f4a:	4804      	ldr	r0, [pc, #16]	; (405f5c <_usb_d_dev_sof+0x18>)
  405f4c:	4b04      	ldr	r3, [pc, #16]	; (405f60 <_usb_d_dev_sof+0x1c>)
  405f4e:	4798      	blx	r3
	dev_inst.callbacks.sof();
  405f50:	4b04      	ldr	r3, [pc, #16]	; (405f64 <_usb_d_dev_sof+0x20>)
  405f52:	681b      	ldr	r3, [r3, #0]
  405f54:	4798      	blx	r3
}
  405f56:	bf00      	nop
  405f58:	bd80      	pop	{r7, pc}
  405f5a:	bf00      	nop
  405f5c:	40038000 	.word	0x40038000
  405f60:	00405a23 	.word	0x00405a23
  405f64:	204011c8 	.word	0x204011c8

00405f68 <_usb_d_dev_msof>:

/**
 * \brief Handles USB MSOF interrupt
 */
static inline void _usb_d_dev_msof(void)
{
  405f68:	b580      	push	{r7, lr}
  405f6a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_MSOFC);
  405f6c:	2102      	movs	r1, #2
  405f6e:	4804      	ldr	r0, [pc, #16]	; (405f80 <_usb_d_dev_msof+0x18>)
  405f70:	4b04      	ldr	r3, [pc, #16]	; (405f84 <_usb_d_dev_msof+0x1c>)
  405f72:	4798      	blx	r3
	dev_inst.callbacks.sof();
  405f74:	4b04      	ldr	r3, [pc, #16]	; (405f88 <_usb_d_dev_msof+0x20>)
  405f76:	681b      	ldr	r3, [r3, #0]
  405f78:	4798      	blx	r3
}
  405f7a:	bf00      	nop
  405f7c:	bd80      	pop	{r7, pc}
  405f7e:	bf00      	nop
  405f80:	40038000 	.word	0x40038000
  405f84:	00405a23 	.word	0x00405a23
  405f88:	204011c8 	.word	0x204011c8

00405f8c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
  405f8c:	b580      	push	{r7, lr}
  405f8e:	b082      	sub	sp, #8
  405f90:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405f92:	4b0b      	ldr	r3, [pc, #44]	; (405fc0 <_usb_d_dev_wakeup+0x34>)
  405f94:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405f96:	2170      	movs	r1, #112	; 0x70
  405f98:	6878      	ldr	r0, [r7, #4]
  405f9a:	4b0a      	ldr	r3, [pc, #40]	; (405fc4 <_usb_d_dev_wakeup+0x38>)
  405f9c:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405f9e:	2170      	movs	r1, #112	; 0x70
  405fa0:	6878      	ldr	r0, [r7, #4]
  405fa2:	4b09      	ldr	r3, [pc, #36]	; (405fc8 <_usb_d_dev_wakeup+0x3c>)
  405fa4:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_SUSPE_bit(hw);
  405fa6:	6878      	ldr	r0, [r7, #4]
  405fa8:	4b08      	ldr	r3, [pc, #32]	; (405fcc <_usb_d_dev_wakeup+0x40>)
  405faa:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  405fac:	4b08      	ldr	r3, [pc, #32]	; (405fd0 <_usb_d_dev_wakeup+0x44>)
  405fae:	685b      	ldr	r3, [r3, #4]
  405fb0:	2100      	movs	r1, #0
  405fb2:	2002      	movs	r0, #2
  405fb4:	4798      	blx	r3
}
  405fb6:	bf00      	nop
  405fb8:	3708      	adds	r7, #8
  405fba:	46bd      	mov	sp, r7
  405fbc:	bd80      	pop	{r7, pc}
  405fbe:	bf00      	nop
  405fc0:	40038000 	.word	0x40038000
  405fc4:	00405a23 	.word	0x00405a23
  405fc8:	00405815 	.word	0x00405815
  405fcc:	004057c7 	.word	0x004057c7
  405fd0:	204011c8 	.word	0x204011c8

00405fd4 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
  405fd4:	b580      	push	{r7, lr}
  405fd6:	b082      	sub	sp, #8
  405fd8:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  405fda:	4b0c      	ldr	r3, [pc, #48]	; (40600c <_usb_d_dev_reset+0x38>)
  405fdc:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USBHS_DEVICR_EORSTC);
  405fde:	2108      	movs	r1, #8
  405fe0:	6878      	ldr	r0, [r7, #4]
  405fe2:	4b0b      	ldr	r3, [pc, #44]	; (406010 <_usb_d_dev_reset+0x3c>)
  405fe4:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  405fe6:	2170      	movs	r1, #112	; 0x70
  405fe8:	6878      	ldr	r0, [r7, #4]
  405fea:	4b0a      	ldr	r3, [pc, #40]	; (406014 <_usb_d_dev_reset+0x40>)
  405fec:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  405fee:	2101      	movs	r1, #1
  405ff0:	6878      	ldr	r0, [r7, #4]
  405ff2:	4b09      	ldr	r3, [pc, #36]	; (406018 <_usb_d_dev_reset+0x44>)
  405ff4:	4798      	blx	r3

	_usb_d_dev_reset_epts();
  405ff6:	4b09      	ldr	r3, [pc, #36]	; (40601c <_usb_d_dev_reset+0x48>)
  405ff8:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  405ffa:	4b09      	ldr	r3, [pc, #36]	; (406020 <_usb_d_dev_reset+0x4c>)
  405ffc:	685b      	ldr	r3, [r3, #4]
  405ffe:	2100      	movs	r1, #0
  406000:	2001      	movs	r0, #1
  406002:	4798      	blx	r3
}
  406004:	bf00      	nop
  406006:	3708      	adds	r7, #8
  406008:	46bd      	mov	sp, r7
  40600a:	bd80      	pop	{r7, pc}
  40600c:	40038000 	.word	0x40038000
  406010:	00405a23 	.word	0x00405a23
  406014:	00405815 	.word	0x00405815
  406018:	004057e1 	.word	0x004057e1
  40601c:	00406a41 	.word	0x00406a41
  406020:	204011c8 	.word	0x204011c8

00406024 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
  406024:	b580      	push	{r7, lr}
  406026:	b082      	sub	sp, #8
  406028:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  40602a:	4b0b      	ldr	r3, [pc, #44]	; (406058 <_usb_d_dev_suspend+0x34>)
  40602c:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  40602e:	2101      	movs	r1, #1
  406030:	6878      	ldr	r0, [r7, #4]
  406032:	4b0a      	ldr	r3, [pc, #40]	; (40605c <_usb_d_dev_suspend+0x38>)
  406034:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(USBHS, USB_D_SUSPEND_INT_FLAGS);
  406036:	2101      	movs	r1, #1
  406038:	4807      	ldr	r0, [pc, #28]	; (406058 <_usb_d_dev_suspend+0x34>)
  40603a:	4b09      	ldr	r3, [pc, #36]	; (406060 <_usb_d_dev_suspend+0x3c>)
  40603c:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USB_D_WAKEUP_INT_FLAGS);
  40603e:	2170      	movs	r1, #112	; 0x70
  406040:	4805      	ldr	r0, [pc, #20]	; (406058 <_usb_d_dev_suspend+0x34>)
  406042:	4b08      	ldr	r3, [pc, #32]	; (406064 <_usb_d_dev_suspend+0x40>)
  406044:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  406046:	4b08      	ldr	r3, [pc, #32]	; (406068 <_usb_d_dev_suspend+0x44>)
  406048:	685b      	ldr	r3, [r3, #4]
  40604a:	2100      	movs	r1, #0
  40604c:	2004      	movs	r0, #4
  40604e:	4798      	blx	r3
}
  406050:	bf00      	nop
  406052:	3708      	adds	r7, #8
  406054:	46bd      	mov	sp, r7
  406056:	bd80      	pop	{r7, pc}
  406058:	40038000 	.word	0x40038000
  40605c:	00405a23 	.word	0x00405a23
  406060:	00405815 	.word	0x00405815
  406064:	004057e1 	.word	0x004057e1
  406068:	204011c8 	.word	0x204011c8

0040606c <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
  40606c:	b580      	push	{r7, lr}
  40606e:	b082      	sub	sp, #8
  406070:	af00      	add	r7, sp, #0
	bool     rc    = true;
  406072:	2301      	movs	r3, #1
  406074:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  406076:	481f      	ldr	r0, [pc, #124]	; (4060f4 <_usb_d_dev_handle_nep+0x88>)
  406078:	4b1f      	ldr	r3, [pc, #124]	; (4060f8 <_usb_d_dev_handle_nep+0x8c>)
  40607a:	4798      	blx	r3
  40607c:	4603      	mov	r3, r0
  40607e:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  406080:	481c      	ldr	r0, [pc, #112]	; (4060f4 <_usb_d_dev_handle_nep+0x88>)
  406082:	4b1e      	ldr	r3, [pc, #120]	; (4060fc <_usb_d_dev_handle_nep+0x90>)
  406084:	4798      	blx	r3
  406086:	4603      	mov	r3, r0
  406088:	b29a      	uxth	r2, r3
  40608a:	88bb      	ldrh	r3, [r7, #4]
  40608c:	4013      	ands	r3, r2
  40608e:	80bb      	strh	r3, [r7, #4]

	if (flags & USBHS_DEVISR_SOF) {
  406090:	88bb      	ldrh	r3, [r7, #4]
  406092:	f003 0304 	and.w	r3, r3, #4
  406096:	2b00      	cmp	r3, #0
  406098:	d003      	beq.n	4060a2 <_usb_d_dev_handle_nep+0x36>
		_usb_d_dev_sof();
  40609a:	4b19      	ldr	r3, [pc, #100]	; (406100 <_usb_d_dev_handle_nep+0x94>)
  40609c:	4798      	blx	r3
		return true;
  40609e:	2301      	movs	r3, #1
  4060a0:	e023      	b.n	4060ea <_usb_d_dev_handle_nep+0x7e>
	} else if (flags & USBHS_DEVISR_MSOF) {
  4060a2:	88bb      	ldrh	r3, [r7, #4]
  4060a4:	f003 0302 	and.w	r3, r3, #2
  4060a8:	2b00      	cmp	r3, #0
  4060aa:	d003      	beq.n	4060b4 <_usb_d_dev_handle_nep+0x48>
		_usb_d_dev_msof();
  4060ac:	4b15      	ldr	r3, [pc, #84]	; (406104 <_usb_d_dev_handle_nep+0x98>)
  4060ae:	4798      	blx	r3
		return true;
  4060b0:	2301      	movs	r3, #1
  4060b2:	e01a      	b.n	4060ea <_usb_d_dev_handle_nep+0x7e>
	}

	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  4060b4:	88bb      	ldrh	r3, [r7, #4]
  4060b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4060ba:	2b00      	cmp	r3, #0
  4060bc:	d002      	beq.n	4060c4 <_usb_d_dev_handle_nep+0x58>
		_usb_d_dev_wakeup();
  4060be:	4b12      	ldr	r3, [pc, #72]	; (406108 <_usb_d_dev_handle_nep+0x9c>)
  4060c0:	4798      	blx	r3
  4060c2:	e011      	b.n	4060e8 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_EORST) {
  4060c4:	88bb      	ldrh	r3, [r7, #4]
  4060c6:	f003 0308 	and.w	r3, r3, #8
  4060ca:	2b00      	cmp	r3, #0
  4060cc:	d002      	beq.n	4060d4 <_usb_d_dev_handle_nep+0x68>
		_usb_d_dev_reset();
  4060ce:	4b0f      	ldr	r3, [pc, #60]	; (40610c <_usb_d_dev_handle_nep+0xa0>)
  4060d0:	4798      	blx	r3
  4060d2:	e009      	b.n	4060e8 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_SUSP) {
  4060d4:	88bb      	ldrh	r3, [r7, #4]
  4060d6:	f003 0301 	and.w	r3, r3, #1
  4060da:	2b00      	cmp	r3, #0
  4060dc:	d002      	beq.n	4060e4 <_usb_d_dev_handle_nep+0x78>
		_usb_d_dev_suspend();
  4060de:	4b0c      	ldr	r3, [pc, #48]	; (406110 <_usb_d_dev_handle_nep+0xa4>)
  4060e0:	4798      	blx	r3
  4060e2:	e001      	b.n	4060e8 <_usb_d_dev_handle_nep+0x7c>
	} else {
		rc = false;
  4060e4:	2300      	movs	r3, #0
  4060e6:	71fb      	strb	r3, [r7, #7]
	}

	return rc;
  4060e8:	79fb      	ldrb	r3, [r7, #7]
}
  4060ea:	4618      	mov	r0, r3
  4060ec:	3708      	adds	r7, #8
  4060ee:	46bd      	mov	sp, r7
  4060f0:	bd80      	pop	{r7, pc}
  4060f2:	bf00      	nop
  4060f4:	40038000 	.word	0x40038000
  4060f8:	00405831 	.word	0x00405831
  4060fc:	004057fd 	.word	0x004057fd
  406100:	00405f45 	.word	0x00405f45
  406104:	00405f69 	.word	0x00405f69
  406108:	00405f8d 	.word	0x00405f8d
  40610c:	00405fd5 	.word	0x00405fd5
  406110:	00406025 	.word	0x00406025

00406114 <_usb_d_dev_in_next>:
/**
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept)
{
  406114:	b580      	push	{r7, lr}
  406116:	b08a      	sub	sp, #40	; 0x28
  406118:	af00      	add	r7, sp, #0
  40611a:	6078      	str	r0, [r7, #4]
	Usbhs *  hw       = USBHS;
  40611c:	4b65      	ldr	r3, [pc, #404]	; (4062b4 <_usb_d_dev_in_next+0x1a0>)
  40611e:	623b      	str	r3, [r7, #32]
	uint8_t  epn      = USB_EP_GET_N(ept->ep);
  406120:	687b      	ldr	r3, [r7, #4]
  406122:	7c9b      	ldrb	r3, [r3, #18]
  406124:	f003 030f 	and.w	r3, r3, #15
  406128:	77fb      	strb	r3, [r7, #31]
	uint8_t *ptr_dest = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  40612a:	7ffb      	ldrb	r3, [r7, #31]
  40612c:	03da      	lsls	r2, r3, #15
  40612e:	4b62      	ldr	r3, [pc, #392]	; (4062b8 <_usb_d_dev_in_next+0x1a4>)
  406130:	4413      	add	r3, r2
  406132:	61bb      	str	r3, [r7, #24]
	uint8_t *ptr_src;

	uint16_t trans_count = ept->trans_load;
  406134:	687b      	ldr	r3, [r7, #4]
  406136:	68db      	ldr	r3, [r3, #12]
  406138:	82fb      	strh	r3, [r7, #22]
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  40613a:	687b      	ldr	r3, [r7, #4]
  40613c:	8a1b      	ldrh	r3, [r3, #16]
  40613e:	f240 32ff 	movw	r2, #1023	; 0x3ff
  406142:	4293      	cmp	r3, r2
  406144:	d103      	bne.n	40614e <_usb_d_dev_in_next+0x3a>
  406146:	687b      	ldr	r3, [r7, #4]
  406148:	8a1b      	ldrh	r3, [r3, #16]
  40614a:	b21b      	sxth	r3, r3
  40614c:	e004      	b.n	406158 <_usb_d_dev_in_next+0x44>
  40614e:	687b      	ldr	r3, [r7, #4]
  406150:	8a1b      	ldrh	r3, [r3, #16]
  406152:	3b01      	subs	r3, #1
  406154:	b29b      	uxth	r3, r3
  406156:	b21b      	sxth	r3, r3
  406158:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
  40615c:	4013      	ands	r3, r2
  40615e:	b21b      	sxth	r3, r3
  406160:	82bb      	strh	r3, [r7, #20]
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  406162:	687b      	ldr	r3, [r7, #4]
  406164:	7cdb      	ldrb	r3, [r3, #19]
  406166:	f003 0307 	and.w	r3, r3, #7
  40616a:	b2db      	uxtb	r3, r3
  40616c:	2b01      	cmp	r3, #1
  40616e:	bf0c      	ite	eq
  406170:	2301      	moveq	r3, #1
  406172:	2300      	movne	r3, #0
  406174:	74fb      	strb	r3, [r7, #19]

	if (ept->trans_count >= ept->trans_size) {
  406176:	687b      	ldr	r3, [r7, #4]
  406178:	689a      	ldr	r2, [r3, #8]
  40617a:	687b      	ldr	r3, [r7, #4]
  40617c:	685b      	ldr	r3, [r3, #4]
  40617e:	429a      	cmp	r2, r3
  406180:	d358      	bcc.n	406234 <_usb_d_dev_in_next+0x120>
		if (ept->flags.bits.need_zlp) {
  406182:	687b      	ldr	r3, [r7, #4]
  406184:	7cdb      	ldrb	r3, [r3, #19]
  406186:	f003 0310 	and.w	r3, r3, #16
  40618a:	b2db      	uxtb	r3, r3
  40618c:	2b00      	cmp	r3, #0
  40618e:	d019      	beq.n	4061c4 <_usb_d_dev_in_next+0xb0>
			ept->trans_load          = 0;
  406190:	687b      	ldr	r3, [r7, #4]
  406192:	2200      	movs	r2, #0
  406194:	60da      	str	r2, [r3, #12]
			ept->flags.bits.need_zlp = 0;
  406196:	687a      	ldr	r2, [r7, #4]
  406198:	7cd3      	ldrb	r3, [r2, #19]
  40619a:	f36f 1304 	bfc	r3, #4, #1
  40619e:	74d3      	strb	r3, [r2, #19]
			_usbd_ep_send_zlp_in(epn);
  4061a0:	7ffb      	ldrb	r3, [r7, #31]
  4061a2:	4618      	mov	r0, r3
  4061a4:	4b45      	ldr	r3, [pc, #276]	; (4062bc <_usb_d_dev_in_next+0x1a8>)
  4061a6:	4798      	blx	r3
			if (!is_ctrl) {
  4061a8:	7cfb      	ldrb	r3, [r7, #19]
  4061aa:	f083 0301 	eor.w	r3, r3, #1
  4061ae:	b2db      	uxtb	r3, r3
  4061b0:	2b00      	cmp	r3, #0
  4061b2:	d078      	beq.n	4062a6 <_usb_d_dev_in_next+0x192>
				/** Switch to next bank. */
				hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  4061b4:	7ffb      	ldrb	r3, [r7, #31]
  4061b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4061ba:	4619      	mov	r1, r3
  4061bc:	6a38      	ldr	r0, [r7, #32]
  4061be:	4b40      	ldr	r3, [pc, #256]	; (4062c0 <_usb_d_dev_in_next+0x1ac>)
  4061c0:	4798      	blx	r3
			}
			return;
  4061c2:	e070      	b.n	4062a6 <_usb_d_dev_in_next+0x192>
		}

		/* Complete. */
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_TXINEC);
  4061c4:	7ffb      	ldrb	r3, [r7, #31]
  4061c6:	2201      	movs	r2, #1
  4061c8:	4619      	mov	r1, r3
  4061ca:	6a38      	ldr	r0, [r7, #32]
  4061cc:	4b3c      	ldr	r3, [pc, #240]	; (4062c0 <_usb_d_dev_in_next+0x1ac>)
  4061ce:	4798      	blx	r3
		if (!is_ctrl) {
  4061d0:	7cfb      	ldrb	r3, [r7, #19]
  4061d2:	f083 0301 	eor.w	r3, r3, #1
  4061d6:	b2db      	uxtb	r3, r3
  4061d8:	2b00      	cmp	r3, #0
  4061da:	d008      	beq.n	4061ee <_usb_d_dev_in_next+0xda>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4061dc:	7ffb      	ldrb	r3, [r7, #31]
  4061de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4061e2:	fa02 f303 	lsl.w	r3, r2, r3
  4061e6:	4619      	mov	r1, r3
  4061e8:	6a38      	ldr	r0, [r7, #32]
  4061ea:	4b36      	ldr	r3, [pc, #216]	; (4062c4 <_usb_d_dev_in_next+0x1b0>)
  4061ec:	4798      	blx	r3
		}

		ept->trans_size = ept->trans_count;
  4061ee:	687b      	ldr	r3, [r7, #4]
  4061f0:	689a      	ldr	r2, [r3, #8]
  4061f2:	687b      	ldr	r3, [r7, #4]
  4061f4:	605a      	str	r2, [r3, #4]

		/* No ping-pong, so ask more data without background transfer. */
		if (last_pkt == ept->size) {
  4061f6:	687b      	ldr	r3, [r7, #4]
  4061f8:	8a1b      	ldrh	r3, [r3, #16]
  4061fa:	8aba      	ldrh	r2, [r7, #20]
  4061fc:	429a      	cmp	r2, r3
  4061fe:	d114      	bne.n	40622a <_usb_d_dev_in_next+0x116>
			ept->flags.bits.is_busy = 0;
  406200:	687a      	ldr	r2, [r7, #4]
  406202:	7cd3      	ldrb	r3, [r2, #19]
  406204:	f36f 1386 	bfc	r3, #6, #1
  406208:	74d3      	strb	r3, [r2, #19]
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  40620a:	4b2f      	ldr	r3, [pc, #188]	; (4062c8 <_usb_d_dev_in_next+0x1b4>)
  40620c:	68db      	ldr	r3, [r3, #12]
  40620e:	687a      	ldr	r2, [r7, #4]
  406210:	7c90      	ldrb	r0, [r2, #18]
  406212:	687a      	ldr	r2, [r7, #4]
  406214:	6892      	ldr	r2, [r2, #8]
  406216:	4611      	mov	r1, r2
  406218:	4798      	blx	r3
  40621a:	4603      	mov	r3, r0
  40621c:	2b00      	cmp	r3, #0
  40621e:	d144      	bne.n	4062aa <_usb_d_dev_in_next+0x196>
				/* More data added. */
				return;
			}
			ept->flags.bits.is_busy = 1;
  406220:	687a      	ldr	r2, [r7, #4]
  406222:	7cd3      	ldrb	r3, [r2, #19]
  406224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406228:	74d3      	strb	r3, [r2, #19]
		}
		/* Finish normally. */
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  40622a:	2100      	movs	r1, #0
  40622c:	6878      	ldr	r0, [r7, #4]
  40622e:	4b27      	ldr	r3, [pc, #156]	; (4062cc <_usb_d_dev_in_next+0x1b8>)
  406230:	4798      	blx	r3
		return;
  406232:	e03b      	b.n	4062ac <_usb_d_dev_in_next+0x198>
	} else {
		trans_next = ept->trans_size - ept->trans_count;
  406234:	687b      	ldr	r3, [r7, #4]
  406236:	685b      	ldr	r3, [r3, #4]
  406238:	b29a      	uxth	r2, r3
  40623a:	687b      	ldr	r3, [r7, #4]
  40623c:	689b      	ldr	r3, [r3, #8]
  40623e:	b29b      	uxth	r3, r3
  406240:	1ad3      	subs	r3, r2, r3
  406242:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (trans_next > ept->size) {
  406244:	687b      	ldr	r3, [r7, #4]
  406246:	8a1b      	ldrh	r3, [r3, #16]
  406248:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  40624a:	429a      	cmp	r2, r3
  40624c:	d902      	bls.n	406254 <_usb_d_dev_in_next+0x140>
			trans_next = ept->size;
  40624e:	687b      	ldr	r3, [r7, #4]
  406250:	8a1b      	ldrh	r3, [r3, #16]
  406252:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		ptr_src = &ept->trans_buf[ept->trans_count];
  406254:	687b      	ldr	r3, [r7, #4]
  406256:	681a      	ldr	r2, [r3, #0]
  406258:	687b      	ldr	r3, [r7, #4]
  40625a:	689b      	ldr	r3, [r3, #8]
  40625c:	4413      	add	r3, r2
  40625e:	60fb      	str	r3, [r7, #12]
		memcpy(ptr_dest, ptr_src, trans_next);
  406260:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  406262:	461a      	mov	r2, r3
  406264:	68f9      	ldr	r1, [r7, #12]
  406266:	69b8      	ldr	r0, [r7, #24]
  406268:	4b19      	ldr	r3, [pc, #100]	; (4062d0 <_usb_d_dev_in_next+0x1bc>)
  40626a:	4798      	blx	r3
		ept->trans_load = trans_next;
  40626c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  40626e:	687b      	ldr	r3, [r7, #4]
  406270:	60da      	str	r2, [r3, #12]
		ept->trans_count += trans_next;
  406272:	687b      	ldr	r3, [r7, #4]
  406274:	689a      	ldr	r2, [r3, #8]
  406276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  406278:	441a      	add	r2, r3
  40627a:	687b      	ldr	r3, [r7, #4]
  40627c:	609a      	str	r2, [r3, #8]
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  40627e:	7ffb      	ldrb	r3, [r7, #31]
  406280:	2201      	movs	r2, #1
  406282:	4619      	mov	r1, r3
  406284:	6a38      	ldr	r0, [r7, #32]
  406286:	4b13      	ldr	r3, [pc, #76]	; (4062d4 <_usb_d_dev_in_next+0x1c0>)
  406288:	4798      	blx	r3
		if (!is_ctrl) {
  40628a:	7cfb      	ldrb	r3, [r7, #19]
  40628c:	f083 0301 	eor.w	r3, r3, #1
  406290:	b2db      	uxtb	r3, r3
  406292:	2b00      	cmp	r3, #0
  406294:	d00a      	beq.n	4062ac <_usb_d_dev_in_next+0x198>
			/** Switch to next bank. */
			hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  406296:	7ffb      	ldrb	r3, [r7, #31]
  406298:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40629c:	4619      	mov	r1, r3
  40629e:	6a38      	ldr	r0, [r7, #32]
  4062a0:	4b07      	ldr	r3, [pc, #28]	; (4062c0 <_usb_d_dev_in_next+0x1ac>)
  4062a2:	4798      	blx	r3
  4062a4:	e002      	b.n	4062ac <_usb_d_dev_in_next+0x198>
			return;
  4062a6:	bf00      	nop
  4062a8:	e000      	b.n	4062ac <_usb_d_dev_in_next+0x198>
				return;
  4062aa:	bf00      	nop
		}
	}
}
  4062ac:	3728      	adds	r7, #40	; 0x28
  4062ae:	46bd      	mov	sp, r7
  4062b0:	bd80      	pop	{r7, pc}
  4062b2:	bf00      	nop
  4062b4:	40038000 	.word	0x40038000
  4062b8:	a0100000 	.word	0xa0100000
  4062bc:	00405e6d 	.word	0x00405e6d
  4062c0:	00405a8b 	.word	0x00405a8b
  4062c4:	00405815 	.word	0x00405815
  4062c8:	204011c8 	.word	0x204011c8
  4062cc:	00406d29 	.word	0x00406d29
  4062d0:	00407ad5 	.word	0x00407ad5
  4062d4:	004057a1 	.word	0x004057a1

004062d8 <_usb_d_dev_out_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept)
{
  4062d8:	b580      	push	{r7, lr}
  4062da:	b088      	sub	sp, #32
  4062dc:	af00      	add	r7, sp, #0
  4062de:	6078      	str	r0, [r7, #4]
	Usbhs *  hw          = USBHS;
  4062e0:	4b47      	ldr	r3, [pc, #284]	; (406400 <_usb_d_dev_out_next+0x128>)
  4062e2:	61bb      	str	r3, [r7, #24]
	uint8_t  epn         = USB_EP_GET_N(ept->ep);
  4062e4:	687b      	ldr	r3, [r7, #4]
  4062e6:	7c9b      	ldrb	r3, [r3, #18]
  4062e8:	f003 030f 	and.w	r3, r3, #15
  4062ec:	75fb      	strb	r3, [r7, #23]
	uint16_t last_trans  = _usbd_ep_get_trans_count(epn);
  4062ee:	7dfb      	ldrb	r3, [r7, #23]
  4062f0:	4618      	mov	r0, r3
  4062f2:	4b44      	ldr	r3, [pc, #272]	; (406404 <_usb_d_dev_out_next+0x12c>)
  4062f4:	4798      	blx	r3
  4062f6:	4603      	mov	r3, r0
  4062f8:	83fb      	strh	r3, [r7, #30]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  4062fa:	687b      	ldr	r3, [r7, #4]
  4062fc:	685b      	ldr	r3, [r3, #4]
  4062fe:	b29a      	uxth	r2, r3
  406300:	687b      	ldr	r3, [r7, #4]
  406302:	689b      	ldr	r3, [r3, #8]
  406304:	b29b      	uxth	r3, r3
  406306:	1ad3      	subs	r3, r2, r3
  406308:	82bb      	strh	r3, [r7, #20]
	uint8_t *ptr         = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  40630a:	7dfb      	ldrb	r3, [r7, #23]
  40630c:	03da      	lsls	r2, r3, #15
  40630e:	4b3e      	ldr	r3, [pc, #248]	; (406408 <_usb_d_dev_out_next+0x130>)
  406310:	4413      	add	r3, r2
  406312:	613b      	str	r3, [r7, #16]
	bool     is_full = false, is_short = false;
  406314:	2300      	movs	r3, #0
  406316:	777b      	strb	r3, [r7, #29]
  406318:	2300      	movs	r3, #0
  40631a:	773b      	strb	r3, [r7, #28]
	bool     is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  40631c:	687b      	ldr	r3, [r7, #4]
  40631e:	7cdb      	ldrb	r3, [r3, #19]
  406320:	f003 0307 	and.w	r3, r3, #7
  406324:	b2db      	uxtb	r3, r3
  406326:	2b01      	cmp	r3, #1
  406328:	bf0c      	ite	eq
  40632a:	2301      	moveq	r3, #1
  40632c:	2300      	movne	r3, #0
  40632e:	73fb      	strb	r3, [r7, #15]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  406330:	7dfb      	ldrb	r3, [r7, #23]
  406332:	2202      	movs	r2, #2
  406334:	4619      	mov	r1, r3
  406336:	69b8      	ldr	r0, [r7, #24]
  406338:	4b34      	ldr	r3, [pc, #208]	; (40640c <_usb_d_dev_out_next+0x134>)
  40633a:	4798      	blx	r3

	if (last_trans > 0) {
  40633c:	8bfb      	ldrh	r3, [r7, #30]
  40633e:	2b00      	cmp	r3, #0
  406340:	d021      	beq.n	406386 <_usb_d_dev_out_next+0xae>
		if (last_trans > last_remain) {
  406342:	8bfa      	ldrh	r2, [r7, #30]
  406344:	8abb      	ldrh	r3, [r7, #20]
  406346:	429a      	cmp	r2, r3
  406348:	d903      	bls.n	406352 <_usb_d_dev_out_next+0x7a>
			last_trans = last_remain;
  40634a:	8abb      	ldrh	r3, [r7, #20]
  40634c:	83fb      	strh	r3, [r7, #30]
			is_full    = true;
  40634e:	2301      	movs	r3, #1
  406350:	777b      	strb	r3, [r7, #29]
		}
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  406352:	687b      	ldr	r3, [r7, #4]
  406354:	681a      	ldr	r2, [r3, #0]
  406356:	687b      	ldr	r3, [r7, #4]
  406358:	689b      	ldr	r3, [r3, #8]
  40635a:	4413      	add	r3, r2
  40635c:	8bfa      	ldrh	r2, [r7, #30]
  40635e:	6939      	ldr	r1, [r7, #16]
  406360:	4618      	mov	r0, r3
  406362:	4b2b      	ldr	r3, [pc, #172]	; (406410 <_usb_d_dev_out_next+0x138>)
  406364:	4798      	blx	r3
		ept->trans_count += last_trans;
  406366:	687b      	ldr	r3, [r7, #4]
  406368:	689a      	ldr	r2, [r3, #8]
  40636a:	8bfb      	ldrh	r3, [r7, #30]
  40636c:	441a      	add	r2, r3
  40636e:	687b      	ldr	r3, [r7, #4]
  406370:	609a      	str	r2, [r3, #8]
		ept->trans_load = last_trans;
  406372:	8bfa      	ldrh	r2, [r7, #30]
  406374:	687b      	ldr	r3, [r7, #4]
  406376:	60da      	str	r2, [r3, #12]
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  406378:	7dfb      	ldrb	r3, [r7, #23]
  40637a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40637e:	4619      	mov	r1, r3
  406380:	69b8      	ldr	r0, [r7, #24]
  406382:	4b24      	ldr	r3, [pc, #144]	; (406414 <_usb_d_dev_out_next+0x13c>)
  406384:	4798      	blx	r3
	}

	if (last_trans < ept->size) {
  406386:	687b      	ldr	r3, [r7, #4]
  406388:	8a1b      	ldrh	r3, [r3, #16]
  40638a:	8bfa      	ldrh	r2, [r7, #30]
  40638c:	429a      	cmp	r2, r3
  40638e:	d207      	bcs.n	4063a0 <_usb_d_dev_out_next+0xc8>
		ept->flags.bits.need_zlp = 0;
  406390:	687a      	ldr	r2, [r7, #4]
  406392:	7cd3      	ldrb	r3, [r2, #19]
  406394:	f36f 1304 	bfc	r3, #4, #1
  406398:	74d3      	strb	r3, [r2, #19]
		is_short                 = true;
  40639a:	2301      	movs	r3, #1
  40639c:	773b      	strb	r3, [r7, #28]
  40639e:	e007      	b.n	4063b0 <_usb_d_dev_out_next+0xd8>
	} else if (ept->trans_count >= ept->trans_size) {
  4063a0:	687b      	ldr	r3, [r7, #4]
  4063a2:	689a      	ldr	r2, [r3, #8]
  4063a4:	687b      	ldr	r3, [r7, #4]
  4063a6:	685b      	ldr	r3, [r3, #4]
  4063a8:	429a      	cmp	r2, r3
  4063aa:	d301      	bcc.n	4063b0 <_usb_d_dev_out_next+0xd8>
		is_full = true;
  4063ac:	2301      	movs	r3, #1
  4063ae:	777b      	strb	r3, [r7, #29]
	}

	/* Complete. */
	if (is_full || is_short) {
  4063b0:	7f7b      	ldrb	r3, [r7, #29]
  4063b2:	2b00      	cmp	r3, #0
  4063b4:	d102      	bne.n	4063bc <_usb_d_dev_out_next+0xe4>
  4063b6:	7f3b      	ldrb	r3, [r7, #28]
  4063b8:	2b00      	cmp	r3, #0
  4063ba:	d01c      	beq.n	4063f6 <_usb_d_dev_out_next+0x11e>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_RXOUTEC);
  4063bc:	7dfb      	ldrb	r3, [r7, #23]
  4063be:	2202      	movs	r2, #2
  4063c0:	4619      	mov	r1, r3
  4063c2:	69b8      	ldr	r0, [r7, #24]
  4063c4:	4b13      	ldr	r3, [pc, #76]	; (406414 <_usb_d_dev_out_next+0x13c>)
  4063c6:	4798      	blx	r3
		if (!is_ctrl) {
  4063c8:	7bfb      	ldrb	r3, [r7, #15]
  4063ca:	f083 0301 	eor.w	r3, r3, #1
  4063ce:	b2db      	uxtb	r3, r3
  4063d0:	2b00      	cmp	r3, #0
  4063d2:	d008      	beq.n	4063e6 <_usb_d_dev_out_next+0x10e>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  4063d4:	7dfb      	ldrb	r3, [r7, #23]
  4063d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4063da:	fa02 f303 	lsl.w	r3, r2, r3
  4063de:	4619      	mov	r1, r3
  4063e0:	69b8      	ldr	r0, [r7, #24]
  4063e2:	4b0d      	ldr	r3, [pc, #52]	; (406418 <_usb_d_dev_out_next+0x140>)
  4063e4:	4798      	blx	r3
		}
		ept->trans_size = ept->trans_count;
  4063e6:	687b      	ldr	r3, [r7, #4]
  4063e8:	689a      	ldr	r2, [r3, #8]
  4063ea:	687b      	ldr	r3, [r7, #4]
  4063ec:	605a      	str	r2, [r3, #4]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4063ee:	2100      	movs	r1, #0
  4063f0:	6878      	ldr	r0, [r7, #4]
  4063f2:	4b0a      	ldr	r3, [pc, #40]	; (40641c <_usb_d_dev_out_next+0x144>)
  4063f4:	4798      	blx	r3
	}
}
  4063f6:	bf00      	nop
  4063f8:	3720      	adds	r7, #32
  4063fa:	46bd      	mov	sp, r7
  4063fc:	bd80      	pop	{r7, pc}
  4063fe:	bf00      	nop
  406400:	40038000 	.word	0x40038000
  406404:	00405e3d 	.word	0x00405e3d
  406408:	a0100000 	.word	0xa0100000
  40640c:	004057a1 	.word	0x004057a1
  406410:	00407ad5 	.word	0x00407ad5
  406414:	00405a8b 	.word	0x00405a8b
  406418:	00405815 	.word	0x00405815
  40641c:	00406d29 	.word	0x00406d29

00406420 <_usb_d_dev_dma_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_dma_next(struct _usb_d_dev_ep *ept)
{
  406420:	b580      	push	{r7, lr}
  406422:	b086      	sub	sp, #24
  406424:	af00      	add	r7, sp, #0
  406426:	6078      	str	r0, [r7, #4]
	Usbhs *  hw  = USBHS;
  406428:	4b61      	ldr	r3, [pc, #388]	; (4065b0 <_usb_d_dev_dma_next+0x190>)
  40642a:	60fb      	str	r3, [r7, #12]
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  40642c:	687b      	ldr	r3, [r7, #4]
  40642e:	7c9b      	ldrb	r3, [r3, #18]
  406430:	f003 030f 	and.w	r3, r3, #15
  406434:	72fb      	strb	r3, [r7, #11]
	uint32_t trans_next;
	uint32_t dma_ctrl;

	if (!ept->flags.bits.is_busy) {
  406436:	687b      	ldr	r3, [r7, #4]
  406438:	7cdb      	ldrb	r3, [r3, #19]
  40643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  40643e:	b2db      	uxtb	r3, r3
  406440:	2b00      	cmp	r3, #0
  406442:	f000 80b0 	beq.w	4065a6 <_usb_d_dev_dma_next+0x186>
		/* No job is running, then ignore it (system error) */
		return;
	}

	if (ept->trans_count != ept->trans_size) {
  406446:	687b      	ldr	r3, [r7, #4]
  406448:	689a      	ldr	r2, [r3, #8]
  40644a:	687b      	ldr	r3, [r7, #4]
  40644c:	685b      	ldr	r3, [r3, #4]
  40644e:	429a      	cmp	r2, r3
  406450:	d073      	beq.n	40653a <_usb_d_dev_dma_next+0x11a>
		trans_next = ept->trans_size - ept->trans_count;
  406452:	687b      	ldr	r3, [r7, #4]
  406454:	685a      	ldr	r2, [r3, #4]
  406456:	687b      	ldr	r3, [r7, #4]
  406458:	689b      	ldr	r3, [r3, #8]
  40645a:	1ad3      	subs	r3, r2, r3
  40645c:	617b      	str	r3, [r7, #20]
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  40645e:	697b      	ldr	r3, [r7, #20]
  406460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  406464:	d905      	bls.n	406472 <_usb_d_dev_dma_next+0x52>
			trans_next = USB_D_DEV_TRANS_MAX;
  406466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40646a:	617b      	str	r3, [r7, #20]
			/* Set 0 to transfer the maximum */
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  40646c:	2300      	movs	r3, #0
  40646e:	613b      	str	r3, [r7, #16]
  406470:	e002      	b.n	406478 <_usb_d_dev_dma_next+0x58>
		} else {
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  406472:	697b      	ldr	r3, [r7, #20]
  406474:	041b      	lsls	r3, r3, #16
  406476:	613b      	str	r3, [r7, #16]
		}
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  406478:	687b      	ldr	r3, [r7, #4]
  40647a:	7cdb      	ldrb	r3, [r3, #19]
  40647c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406480:	b2db      	uxtb	r3, r3
  406482:	2b00      	cmp	r3, #0
  406484:	d00b      	beq.n	40649e <_usb_d_dev_dma_next+0x7e>
  406486:	687b      	ldr	r3, [r7, #4]
  406488:	7cdb      	ldrb	r3, [r3, #19]
  40648a:	f003 0310 	and.w	r3, r3, #16
  40648e:	b2db      	uxtb	r3, r3
  406490:	2b00      	cmp	r3, #0
  406492:	d104      	bne.n	40649e <_usb_d_dev_dma_next+0x7e>
			/* Enable short packet option, else the DMA transfer is accepted
			    and interrupt DMA valid but nothing is sent. */
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  406494:	693b      	ldr	r3, [r7, #16]
  406496:	f043 0308 	orr.w	r3, r3, #8
  40649a:	613b      	str	r3, [r7, #16]
  40649c:	e010      	b.n	4064c0 <_usb_d_dev_dma_next+0xa0>
		} else {
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  40649e:	687b      	ldr	r3, [r7, #4]
  4064a0:	7cdb      	ldrb	r3, [r3, #19]
  4064a2:	f003 0307 	and.w	r3, r3, #7
  4064a6:	b2db      	uxtb	r3, r3
  4064a8:	2b02      	cmp	r3, #2
  4064aa:	d105      	bne.n	4064b8 <_usb_d_dev_dma_next+0x98>
  4064ac:	687b      	ldr	r3, [r7, #4]
  4064ae:	8a1b      	ldrh	r3, [r3, #16]
  4064b0:	461a      	mov	r2, r3
  4064b2:	697b      	ldr	r3, [r7, #20]
  4064b4:	429a      	cmp	r2, r3
  4064b6:	d303      	bcc.n	4064c0 <_usb_d_dev_dma_next+0xa0>
				/* Enable short packet reception */
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  4064b8:	693b      	ldr	r3, [r7, #16]
  4064ba:	f043 0314 	orr.w	r3, r3, #20
  4064be:	613b      	str	r3, [r7, #16]
			}
		}

		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  4064c0:	7afb      	ldrb	r3, [r7, #11]
  4064c2:	3b01      	subs	r3, #1
  4064c4:	b2d9      	uxtb	r1, r3
  4064c6:	687b      	ldr	r3, [r7, #4]
  4064c8:	681a      	ldr	r2, [r3, #0]
  4064ca:	687b      	ldr	r3, [r7, #4]
  4064cc:	689b      	ldr	r3, [r3, #8]
  4064ce:	4413      	add	r3, r2
  4064d0:	461a      	mov	r2, r3
  4064d2:	68f8      	ldr	r0, [r7, #12]
  4064d4:	4b37      	ldr	r3, [pc, #220]	; (4065b4 <_usb_d_dev_dma_next+0x194>)
  4064d6:	4798      	blx	r3
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  4064d8:	693b      	ldr	r3, [r7, #16]
  4064da:	f043 0321 	orr.w	r3, r3, #33	; 0x21
  4064de:	613b      	str	r3, [r7, #16]

		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  4064e0:	7afb      	ldrb	r3, [r7, #11]
  4064e2:	3b01      	subs	r3, #1
  4064e4:	b2db      	uxtb	r3, r3
  4064e6:	4619      	mov	r1, r3
  4064e8:	68f8      	ldr	r0, [r7, #12]
  4064ea:	4b33      	ldr	r3, [pc, #204]	; (4065b8 <_usb_d_dev_dma_next+0x198>)
  4064ec:	4798      	blx	r3
  4064ee:	4603      	mov	r3, r0
  4064f0:	f083 0301 	eor.w	r3, r3, #1
  4064f4:	b2db      	uxtb	r3, r3
  4064f6:	2b00      	cmp	r3, #0
  4064f8:	d01b      	beq.n	406532 <_usb_d_dev_dma_next+0x112>
			hri_usbhs_write_DEVDMACONTROL_reg(hw, (epn - 1), dma_ctrl);
  4064fa:	7afb      	ldrb	r3, [r7, #11]
  4064fc:	3b01      	subs	r3, #1
  4064fe:	b2db      	uxtb	r3, r3
  406500:	693a      	ldr	r2, [r7, #16]
  406502:	4619      	mov	r1, r3
  406504:	68f8      	ldr	r0, [r7, #12]
  406506:	4b2d      	ldr	r3, [pc, #180]	; (4065bc <_usb_d_dev_dma_next+0x19c>)
  406508:	4798      	blx	r3
			ept->trans_count += trans_next;
  40650a:	687b      	ldr	r3, [r7, #4]
  40650c:	689a      	ldr	r2, [r3, #8]
  40650e:	697b      	ldr	r3, [r7, #20]
  406510:	441a      	add	r2, r3
  406512:	687b      	ldr	r3, [r7, #4]
  406514:	609a      	str	r2, [r3, #8]
			ept->trans_load = trans_next;
  406516:	687b      	ldr	r3, [r7, #4]
  406518:	697a      	ldr	r2, [r7, #20]
  40651a:	60da      	str	r2, [r3, #12]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  40651c:	7afb      	ldrb	r3, [r7, #11]
  40651e:	3b01      	subs	r3, #1
  406520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  406524:	fa02 f303 	lsl.w	r3, r2, r3
  406528:	4619      	mov	r1, r3
  40652a:	68f8      	ldr	r0, [r7, #12]
  40652c:	4b24      	ldr	r3, [pc, #144]	; (4065c0 <_usb_d_dev_dma_next+0x1a0>)
  40652e:	4798      	blx	r3
			return;
  406530:	e03a      	b.n	4065a8 <_usb_d_dev_dma_next+0x188>
		}

		/* Here a ZLP has been received and the DMA transfer must be not started.
		   It is the end of transfer. */
		ept->trans_size = ept->trans_count;
  406532:	687b      	ldr	r3, [r7, #4]
  406534:	689a      	ldr	r2, [r3, #8]
  406536:	687b      	ldr	r3, [r7, #4]
  406538:	605a      	str	r2, [r3, #4]
	}

	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  40653a:	687b      	ldr	r3, [r7, #4]
  40653c:	7cdb      	ldrb	r3, [r3, #19]
  40653e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406542:	b2db      	uxtb	r3, r3
  406544:	2b00      	cmp	r3, #0
  406546:	d029      	beq.n	40659c <_usb_d_dev_dma_next+0x17c>
  406548:	687b      	ldr	r3, [r7, #4]
  40654a:	7cdb      	ldrb	r3, [r3, #19]
  40654c:	f003 0310 	and.w	r3, r3, #16
  406550:	b2db      	uxtb	r3, r3
  406552:	2b00      	cmp	r3, #0
  406554:	d022      	beq.n	40659c <_usb_d_dev_dma_next+0x17c>
		/* Need to send a ZLP (No possible with USB DMA) enable interrupt to
		   wait a free bank to sent ZLP. */
		_usbd_ep_int_ack(epn, USBHS_DEVEPTICR_TXINIC);
  406556:	7afb      	ldrb	r3, [r7, #11]
  406558:	2101      	movs	r1, #1
  40655a:	4618      	mov	r0, r3
  40655c:	4b19      	ldr	r3, [pc, #100]	; (4065c4 <_usb_d_dev_dma_next+0x1a4>)
  40655e:	4798      	blx	r3
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  406560:	7afb      	ldrb	r3, [r7, #11]
  406562:	4619      	mov	r1, r3
  406564:	68f8      	ldr	r0, [r7, #12]
  406566:	4b18      	ldr	r3, [pc, #96]	; (4065c8 <_usb_d_dev_dma_next+0x1a8>)
  406568:	4798      	blx	r3
  40656a:	4603      	mov	r3, r0
  40656c:	2b00      	cmp	r3, #0
  40656e:	d005      	beq.n	40657c <_usb_d_dev_dma_next+0x15c>
			hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  406570:	7afb      	ldrb	r3, [r7, #11]
  406572:	2201      	movs	r2, #1
  406574:	4619      	mov	r1, r3
  406576:	68f8      	ldr	r0, [r7, #12]
  406578:	4b14      	ldr	r3, [pc, #80]	; (4065cc <_usb_d_dev_dma_next+0x1ac>)
  40657a:	4798      	blx	r3
		}
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  40657c:	7afb      	ldrb	r3, [r7, #11]
  40657e:	2201      	movs	r2, #1
  406580:	4619      	mov	r1, r3
  406582:	68f8      	ldr	r0, [r7, #12]
  406584:	4b12      	ldr	r3, [pc, #72]	; (4065d0 <_usb_d_dev_dma_next+0x1b0>)
  406586:	4798      	blx	r3
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406588:	7afb      	ldrb	r3, [r7, #11]
  40658a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40658e:	fa02 f303 	lsl.w	r3, r2, r3
  406592:	4619      	mov	r1, r3
  406594:	68f8      	ldr	r0, [r7, #12]
  406596:	4b0a      	ldr	r3, [pc, #40]	; (4065c0 <_usb_d_dev_dma_next+0x1a0>)
  406598:	4798      	blx	r3
		return;
  40659a:	e005      	b.n	4065a8 <_usb_d_dev_dma_next+0x188>
	}

	/* Complete */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  40659c:	2100      	movs	r1, #0
  40659e:	6878      	ldr	r0, [r7, #4]
  4065a0:	4b0c      	ldr	r3, [pc, #48]	; (4065d4 <_usb_d_dev_dma_next+0x1b4>)
  4065a2:	4798      	blx	r3
  4065a4:	e000      	b.n	4065a8 <_usb_d_dev_dma_next+0x188>
		return;
  4065a6:	bf00      	nop
}
  4065a8:	3718      	adds	r7, #24
  4065aa:	46bd      	mov	sp, r7
  4065ac:	bd80      	pop	{r7, pc}
  4065ae:	bf00      	nop
  4065b0:	40038000 	.word	0x40038000
  4065b4:	00405ab1 	.word	0x00405ab1
  4065b8:	00405b39 	.word	0x00405b39
  4065bc:	00405adb 	.word	0x00405adb
  4065c0:	004057e1 	.word	0x004057e1
  4065c4:	00405bc9 	.word	0x00405bc9
  4065c8:	0040571d 	.word	0x0040571d
  4065cc:	00405a3f 	.word	0x00405a3f
  4065d0:	00405a65 	.word	0x00405a65
  4065d4:	00406d29 	.word	0x00406d29

004065d8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  4065d8:	b580      	push	{r7, lr}
  4065da:	b084      	sub	sp, #16
  4065dc:	af00      	add	r7, sp, #0
  4065de:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  4065e0:	687b      	ldr	r3, [r7, #4]
  4065e2:	7c9b      	ldrb	r3, [r3, #18]
  4065e4:	f003 030f 	and.w	r3, r3, #15
  4065e8:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4065ea:	687b      	ldr	r3, [r7, #4]
  4065ec:	7cdb      	ldrb	r3, [r3, #19]
  4065ee:	f003 0307 	and.w	r3, r3, #7
  4065f2:	b2db      	uxtb	r3, r3
  4065f4:	2b01      	cmp	r3, #1
  4065f6:	bf0c      	ite	eq
  4065f8:	2301      	moveq	r3, #1
  4065fa:	2300      	movne	r3, #0
  4065fc:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
  4065fe:	7bbb      	ldrb	r3, [r7, #14]
  406600:	f083 0301 	eor.w	r3, r3, #1
  406604:	b2db      	uxtb	r3, r3
  406606:	2b00      	cmp	r3, #0
  406608:	d008      	beq.n	40661c <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
  40660a:	7bfb      	ldrb	r3, [r7, #15]
  40660c:	4618      	mov	r0, r3
  40660e:	4b1a      	ldr	r3, [pc, #104]	; (406678 <_usb_d_dev_handle_setup+0xa0>)
  406610:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
  406612:	7bfb      	ldrb	r3, [r7, #15]
  406614:	4618      	mov	r0, r3
  406616:	4b19      	ldr	r3, [pc, #100]	; (40667c <_usb_d_dev_handle_setup+0xa4>)
  406618:	4798      	blx	r3
		return;
  40661a:	e02a      	b.n	406672 <_usb_d_dev_handle_setup+0x9a>

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  40661c:	687b      	ldr	r3, [r7, #4]
  40661e:	7cdb      	ldrb	r3, [r3, #19]
  406620:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406624:	b2db      	uxtb	r3, r3
  406626:	2b00      	cmp	r3, #0
  406628:	d00e      	beq.n	406648 <_usb_d_dev_handle_setup+0x70>
		ept->flags.bits.is_busy = 0;
  40662a:	687a      	ldr	r2, [r7, #4]
  40662c:	7cd3      	ldrb	r3, [r2, #19]
  40662e:	f36f 1386 	bfc	r3, #6, #1
  406632:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
  406634:	7bfb      	ldrb	r3, [r7, #15]
  406636:	2100      	movs	r1, #0
  406638:	4618      	mov	r0, r3
  40663a:	4b11      	ldr	r3, [pc, #68]	; (406680 <_usb_d_dev_handle_setup+0xa8>)
  40663c:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, false);
  40663e:	7bfb      	ldrb	r3, [r7, #15]
  406640:	2100      	movs	r1, #0
  406642:	4618      	mov	r0, r3
  406644:	4b0f      	ldr	r3, [pc, #60]	; (406684 <_usb_d_dev_handle_setup+0xac>)
  406646:	4798      	blx	r3
	}

	ept->flags.bits.is_stalled = 0;
  406648:	687a      	ldr	r2, [r7, #4]
  40664a:	7cd3      	ldrb	r3, [r2, #19]
  40664c:	f36f 03c3 	bfc	r3, #3, #1
  406650:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
  406652:	7bfb      	ldrb	r3, [r7, #15]
  406654:	2118      	movs	r1, #24
  406656:	4618      	mov	r0, r3
  406658:	4b0b      	ldr	r3, [pc, #44]	; (406688 <_usb_d_dev_handle_setup+0xb0>)
  40665a:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
  40665c:	7bfb      	ldrb	r3, [r7, #15]
  40665e:	2118      	movs	r1, #24
  406660:	4618      	mov	r0, r3
  406662:	4b0a      	ldr	r3, [pc, #40]	; (40668c <_usb_d_dev_handle_setup+0xb4>)
  406664:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  406666:	4b0a      	ldr	r3, [pc, #40]	; (406690 <_usb_d_dev_handle_setup+0xb8>)
  406668:	689b      	ldr	r3, [r3, #8]
  40666a:	687a      	ldr	r2, [r7, #4]
  40666c:	7c92      	ldrb	r2, [r2, #18]
  40666e:	4610      	mov	r0, r2
  406670:	4798      	blx	r3
}
  406672:	3710      	adds	r7, #16
  406674:	46bd      	mov	sp, r7
  406676:	bd80      	pop	{r7, pc}
  406678:	00405da9 	.word	0x00405da9
  40667c:	00405d59 	.word	0x00405d59
  406680:	00405eb5 	.word	0x00405eb5
  406684:	00405efd 	.word	0x00405efd
  406688:	00405bc9 	.word	0x00405bc9
  40668c:	00405c31 	.word	0x00405c31
  406690:	204011c8 	.word	0x204011c8

00406694 <_usb_d_dev_handle_stall>:
/**
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept)
{
  406694:	b580      	push	{r7, lr}
  406696:	b084      	sub	sp, #16
  406698:	af00      	add	r7, sp, #0
  40669a:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40669c:	687b      	ldr	r3, [r7, #4]
  40669e:	7c9b      	ldrb	r3, [r3, #18]
  4066a0:	f003 030f 	and.w	r3, r3, #15
  4066a4:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, false);
  4066a6:	7bfb      	ldrb	r3, [r7, #15]
  4066a8:	2100      	movs	r1, #0
  4066aa:	4618      	mov	r0, r3
  4066ac:	4b04      	ldr	r3, [pc, #16]	; (4066c0 <_usb_d_dev_handle_stall+0x2c>)
  4066ae:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  4066b0:	2101      	movs	r1, #1
  4066b2:	6878      	ldr	r0, [r7, #4]
  4066b4:	4b03      	ldr	r3, [pc, #12]	; (4066c4 <_usb_d_dev_handle_stall+0x30>)
  4066b6:	4798      	blx	r3
}
  4066b8:	bf00      	nop
  4066ba:	3710      	adds	r7, #16
  4066bc:	46bd      	mov	sp, r7
  4066be:	bd80      	pop	{r7, pc}
  4066c0:	00405d1d 	.word	0x00405d1d
  4066c4:	00406d29 	.word	0x00406d29

004066c8 <_usb_d_dev_handle_overflow>:
/**
 * \brief Handles transaction overflow interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_overflow(struct _usb_d_dev_ep *ept)
{
  4066c8:	b580      	push	{r7, lr}
  4066ca:	b084      	sub	sp, #16
  4066cc:	af00      	add	r7, sp, #0
  4066ce:	6078      	str	r0, [r7, #4]
	Usbhs * hw  = USBHS;
  4066d0:	4b0f      	ldr	r3, [pc, #60]	; (406710 <_usb_d_dev_handle_overflow+0x48>)
  4066d2:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4066d4:	687b      	ldr	r3, [r7, #4]
  4066d6:	7c9b      	ldrb	r3, [r3, #18]
  4066d8:	f003 030f 	and.w	r3, r3, #15
  4066dc:	72fb      	strb	r3, [r7, #11]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_OVERFIC);
  4066de:	7afb      	ldrb	r3, [r7, #11]
  4066e0:	2220      	movs	r2, #32
  4066e2:	4619      	mov	r1, r3
  4066e4:	68f8      	ldr	r0, [r7, #12]
  4066e6:	4b0b      	ldr	r3, [pc, #44]	; (406714 <_usb_d_dev_handle_overflow+0x4c>)
  4066e8:	4798      	blx	r3
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  4066ea:	687b      	ldr	r3, [r7, #4]
  4066ec:	7cdb      	ldrb	r3, [r3, #19]
  4066ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4066f2:	b2db      	uxtb	r3, r3
  4066f4:	2b00      	cmp	r3, #0
  4066f6:	bf14      	ite	ne
  4066f8:	2301      	movne	r3, #1
  4066fa:	2300      	moveq	r3, #0
  4066fc:	b2db      	uxtb	r3, r3
  4066fe:	2204      	movs	r2, #4
  406700:	4619      	mov	r1, r3
  406702:	6878      	ldr	r0, [r7, #4]
  406704:	4b04      	ldr	r3, [pc, #16]	; (406718 <_usb_d_dev_handle_overflow+0x50>)
  406706:	4798      	blx	r3
}
  406708:	bf00      	nop
  40670a:	3710      	adds	r7, #16
  40670c:	46bd      	mov	sp, r7
  40670e:	bd80      	pop	{r7, pc}
  406710:	40038000 	.word	0x40038000
  406714:	004057a1 	.word	0x004057a1
  406718:	00406d71 	.word	0x00406d71

0040671c <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  40671c:	b580      	push	{r7, lr}
  40671e:	b082      	sub	sp, #8
  406720:	af00      	add	r7, sp, #0
  406722:	6078      	str	r0, [r7, #4]
  406724:	460b      	mov	r3, r1
  406726:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  406728:	78fb      	ldrb	r3, [r7, #3]
  40672a:	f003 0304 	and.w	r3, r3, #4
  40672e:	2b00      	cmp	r3, #0
  406730:	d003      	beq.n	40673a <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
  406732:	6878      	ldr	r0, [r7, #4]
  406734:	4b07      	ldr	r3, [pc, #28]	; (406754 <_usb_d_dev_trans_setup_isr+0x38>)
  406736:	4798      	blx	r3
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
		_usb_d_dev_handle_stall(ept);
	}
}
  406738:	e007      	b.n	40674a <_usb_d_dev_trans_setup_isr+0x2e>
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
  40673a:	78fb      	ldrb	r3, [r7, #3]
  40673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406740:	2b00      	cmp	r3, #0
  406742:	d002      	beq.n	40674a <_usb_d_dev_trans_setup_isr+0x2e>
		_usb_d_dev_handle_stall(ept);
  406744:	6878      	ldr	r0, [r7, #4]
  406746:	4b04      	ldr	r3, [pc, #16]	; (406758 <_usb_d_dev_trans_setup_isr+0x3c>)
  406748:	4798      	blx	r3
}
  40674a:	bf00      	nop
  40674c:	3708      	adds	r7, #8
  40674e:	46bd      	mov	sp, r7
  406750:	bd80      	pop	{r7, pc}
  406752:	bf00      	nop
  406754:	004065d9 	.word	0x004065d9
  406758:	00406695 	.word	0x00406695

0040675c <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  40675c:	b580      	push	{r7, lr}
  40675e:	b082      	sub	sp, #8
  406760:	af00      	add	r7, sp, #0
  406762:	6078      	str	r0, [r7, #4]
  406764:	460b      	mov	r3, r1
  406766:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_TXINI) {
  406768:	78fb      	ldrb	r3, [r7, #3]
  40676a:	f003 0301 	and.w	r3, r3, #1
  40676e:	2b00      	cmp	r3, #0
  406770:	d003      	beq.n	40677a <_usb_d_dev_trans_in_isr+0x1e>
		_usb_d_dev_in_next(ept);
  406772:	6878      	ldr	r0, [r7, #4]
  406774:	4b0a      	ldr	r3, [pc, #40]	; (4067a0 <_usb_d_dev_trans_in_isr+0x44>)
  406776:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  406778:	e00e      	b.n	406798 <_usb_d_dev_trans_in_isr+0x3c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  40677a:	687b      	ldr	r3, [r7, #4]
  40677c:	7cdb      	ldrb	r3, [r3, #19]
  40677e:	f003 0307 	and.w	r3, r3, #7
  406782:	b2db      	uxtb	r3, r3
  406784:	2b01      	cmp	r3, #1
  406786:	d107      	bne.n	406798 <_usb_d_dev_trans_in_isr+0x3c>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  406788:	78fb      	ldrb	r3, [r7, #3]
  40678a:	f003 0304 	and.w	r3, r3, #4
  40678e:	2b00      	cmp	r3, #0
  406790:	d002      	beq.n	406798 <_usb_d_dev_trans_in_isr+0x3c>
			_usb_d_dev_handle_setup(ept);
  406792:	6878      	ldr	r0, [r7, #4]
  406794:	4b03      	ldr	r3, [pc, #12]	; (4067a4 <_usb_d_dev_trans_in_isr+0x48>)
  406796:	4798      	blx	r3
}
  406798:	bf00      	nop
  40679a:	3708      	adds	r7, #8
  40679c:	46bd      	mov	sp, r7
  40679e:	bd80      	pop	{r7, pc}
  4067a0:	00406115 	.word	0x00406115
  4067a4:	004065d9 	.word	0x004065d9

004067a8 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  4067a8:	b580      	push	{r7, lr}
  4067aa:	b082      	sub	sp, #8
  4067ac:	af00      	add	r7, sp, #0
  4067ae:	6078      	str	r0, [r7, #4]
  4067b0:	460b      	mov	r3, r1
  4067b2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  4067b4:	78fb      	ldrb	r3, [r7, #3]
  4067b6:	f003 0320 	and.w	r3, r3, #32
  4067ba:	2b00      	cmp	r3, #0
  4067bc:	d003      	beq.n	4067c6 <_usb_d_dev_trans_out_isr+0x1e>
		_usb_d_dev_handle_overflow(ept);
  4067be:	6878      	ldr	r0, [r7, #4]
  4067c0:	4b0f      	ldr	r3, [pc, #60]	; (406800 <_usb_d_dev_trans_out_isr+0x58>)
  4067c2:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  4067c4:	e017      	b.n	4067f6 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  4067c6:	78fb      	ldrb	r3, [r7, #3]
  4067c8:	f003 0302 	and.w	r3, r3, #2
  4067cc:	2b00      	cmp	r3, #0
  4067ce:	d003      	beq.n	4067d8 <_usb_d_dev_trans_out_isr+0x30>
		_usb_d_dev_out_next(ept);
  4067d0:	6878      	ldr	r0, [r7, #4]
  4067d2:	4b0c      	ldr	r3, [pc, #48]	; (406804 <_usb_d_dev_trans_out_isr+0x5c>)
  4067d4:	4798      	blx	r3
}
  4067d6:	e00e      	b.n	4067f6 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  4067d8:	687b      	ldr	r3, [r7, #4]
  4067da:	7cdb      	ldrb	r3, [r3, #19]
  4067dc:	f003 0307 	and.w	r3, r3, #7
  4067e0:	b2db      	uxtb	r3, r3
  4067e2:	2b01      	cmp	r3, #1
  4067e4:	d107      	bne.n	4067f6 <_usb_d_dev_trans_out_isr+0x4e>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4067e6:	78fb      	ldrb	r3, [r7, #3]
  4067e8:	f003 0304 	and.w	r3, r3, #4
  4067ec:	2b00      	cmp	r3, #0
  4067ee:	d002      	beq.n	4067f6 <_usb_d_dev_trans_out_isr+0x4e>
			_usb_d_dev_handle_setup(ept);
  4067f0:	6878      	ldr	r0, [r7, #4]
  4067f2:	4b05      	ldr	r3, [pc, #20]	; (406808 <_usb_d_dev_trans_out_isr+0x60>)
  4067f4:	4798      	blx	r3
}
  4067f6:	bf00      	nop
  4067f8:	3708      	adds	r7, #8
  4067fa:	46bd      	mov	sp, r7
  4067fc:	bd80      	pop	{r7, pc}
  4067fe:	bf00      	nop
  406800:	004066c9 	.word	0x004066c9
  406804:	004062d9 	.word	0x004062d9
  406808:	004065d9 	.word	0x004065d9

0040680c <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  40680c:	b580      	push	{r7, lr}
  40680e:	b084      	sub	sp, #16
  406810:	af00      	add	r7, sp, #0
  406812:	6078      	str	r0, [r7, #4]
  406814:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  406816:	4b28      	ldr	r3, [pc, #160]	; (4068b8 <_usb_d_dev_handle_eps+0xac>)
  406818:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
  40681a:	683b      	ldr	r3, [r7, #0]
  40681c:	7c9b      	ldrb	r3, [r3, #18]
  40681e:	f003 030f 	and.w	r3, r3, #15
  406822:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
  406824:	7afb      	ldrb	r3, [r7, #11]
  406826:	2201      	movs	r2, #1
  406828:	409a      	lsls	r2, r3
  40682a:	687b      	ldr	r3, [r7, #4]
  40682c:	4013      	ands	r3, r2
  40682e:	2b00      	cmp	r3, #0
  406830:	d03d      	beq.n	4068ae <_usb_d_dev_handle_eps+0xa2>
		return;
	}

	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  406832:	7afb      	ldrb	r3, [r7, #11]
  406834:	4619      	mov	r1, r3
  406836:	68f8      	ldr	r0, [r7, #12]
  406838:	4b20      	ldr	r3, [pc, #128]	; (4068bc <_usb_d_dev_handle_eps+0xb0>)
  40683a:	4798      	blx	r3
  40683c:	4603      	mov	r3, r0
  40683e:	72bb      	strb	r3, [r7, #10]
	mask  = hri_usbhs_read_DEVEPTIMR_reg(hw, epn);
  406840:	7afb      	ldrb	r3, [r7, #11]
  406842:	4619      	mov	r1, r3
  406844:	68f8      	ldr	r0, [r7, #12]
  406846:	4b1e      	ldr	r3, [pc, #120]	; (4068c0 <_usb_d_dev_handle_eps+0xb4>)
  406848:	4798      	blx	r3
  40684a:	4603      	mov	r3, r0
  40684c:	727b      	strb	r3, [r7, #9]
	flags &= mask;
  40684e:	7aba      	ldrb	r2, [r7, #10]
  406850:	7a7b      	ldrb	r3, [r7, #9]
  406852:	4013      	ands	r3, r2
  406854:	72bb      	strb	r3, [r7, #10]

	if (flags) {
  406856:	7abb      	ldrb	r3, [r7, #10]
  406858:	2b00      	cmp	r3, #0
  40685a:	d029      	beq.n	4068b0 <_usb_d_dev_handle_eps+0xa4>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  40685c:	7abb      	ldrb	r3, [r7, #10]
  40685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406862:	2b00      	cmp	r3, #0
  406864:	d003      	beq.n	40686e <_usb_d_dev_handle_eps+0x62>
			_usb_d_dev_handle_stall(ept);
  406866:	6838      	ldr	r0, [r7, #0]
  406868:	4b16      	ldr	r3, [pc, #88]	; (4068c4 <_usb_d_dev_handle_eps+0xb8>)
  40686a:	4798      	blx	r3
  40686c:	e020      	b.n	4068b0 <_usb_d_dev_handle_eps+0xa4>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  40686e:	683b      	ldr	r3, [r7, #0]
  406870:	7cdb      	ldrb	r3, [r3, #19]
  406872:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406876:	b2db      	uxtb	r3, r3
  406878:	2b00      	cmp	r3, #0
  40687a:	d105      	bne.n	406888 <_usb_d_dev_handle_eps+0x7c>
			_usb_d_dev_trans_setup_isr(ept, flags);
  40687c:	7abb      	ldrb	r3, [r7, #10]
  40687e:	4619      	mov	r1, r3
  406880:	6838      	ldr	r0, [r7, #0]
  406882:	4b11      	ldr	r3, [pc, #68]	; (4068c8 <_usb_d_dev_handle_eps+0xbc>)
  406884:	4798      	blx	r3
  406886:	e013      	b.n	4068b0 <_usb_d_dev_handle_eps+0xa4>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  406888:	683b      	ldr	r3, [r7, #0]
  40688a:	7cdb      	ldrb	r3, [r3, #19]
  40688c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406890:	b2db      	uxtb	r3, r3
  406892:	2b00      	cmp	r3, #0
  406894:	d005      	beq.n	4068a2 <_usb_d_dev_handle_eps+0x96>
			_usb_d_dev_trans_in_isr(ept, flags);
  406896:	7abb      	ldrb	r3, [r7, #10]
  406898:	4619      	mov	r1, r3
  40689a:	6838      	ldr	r0, [r7, #0]
  40689c:	4b0b      	ldr	r3, [pc, #44]	; (4068cc <_usb_d_dev_handle_eps+0xc0>)
  40689e:	4798      	blx	r3
  4068a0:	e006      	b.n	4068b0 <_usb_d_dev_handle_eps+0xa4>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
  4068a2:	7abb      	ldrb	r3, [r7, #10]
  4068a4:	4619      	mov	r1, r3
  4068a6:	6838      	ldr	r0, [r7, #0]
  4068a8:	4b09      	ldr	r3, [pc, #36]	; (4068d0 <_usb_d_dev_handle_eps+0xc4>)
  4068aa:	4798      	blx	r3
  4068ac:	e000      	b.n	4068b0 <_usb_d_dev_handle_eps+0xa4>
		return;
  4068ae:	bf00      	nop
		}
	}
}
  4068b0:	3710      	adds	r7, #16
  4068b2:	46bd      	mov	sp, r7
  4068b4:	bd80      	pop	{r7, pc}
  4068b6:	bf00      	nop
  4068b8:	40038000 	.word	0x40038000
  4068bc:	0040577f 	.word	0x0040577f
  4068c0:	00405849 	.word	0x00405849
  4068c4:	00406695 	.word	0x00406695
  4068c8:	0040671d 	.word	0x0040671d
  4068cc:	0040675d 	.word	0x0040675d
  4068d0:	004067a9 	.word	0x004067a9

004068d4 <_usb_d_dev_handle_dma>:
 * \brief Handles the endpoint DMA interrupts.
 * \param[in] epint Endpoint DMA interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_dma(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  4068d4:	b580      	push	{r7, lr}
  4068d6:	b086      	sub	sp, #24
  4068d8:	af00      	add	r7, sp, #0
  4068da:	6078      	str	r0, [r7, #4]
  4068dc:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  4068de:	4b21      	ldr	r3, [pc, #132]	; (406964 <_usb_d_dev_handle_dma+0x90>)
  4068e0:	617b      	str	r3, [r7, #20]

	uint8_t  epn = USB_EP_GET_N(ept->ep);
  4068e2:	683b      	ldr	r3, [r7, #0]
  4068e4:	7c9b      	ldrb	r3, [r3, #18]
  4068e6:	f003 030f 	and.w	r3, r3, #15
  4068ea:	74fb      	strb	r3, [r7, #19]
	uint32_t trans_next;

	if (!(epint & (1u << (epn - 1)))) {
  4068ec:	7cfb      	ldrb	r3, [r7, #19]
  4068ee:	3b01      	subs	r3, #1
  4068f0:	2201      	movs	r2, #1
  4068f2:	409a      	lsls	r2, r3
  4068f4:	687b      	ldr	r3, [r7, #4]
  4068f6:	4013      	ands	r3, r2
  4068f8:	2b00      	cmp	r3, #0
  4068fa:	d02c      	beq.n	406956 <_usb_d_dev_handle_dma+0x82>
		return;
	}

	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  4068fc:	7cfb      	ldrb	r3, [r7, #19]
  4068fe:	3b01      	subs	r3, #1
  406900:	b2db      	uxtb	r3, r3
  406902:	4619      	mov	r1, r3
  406904:	6978      	ldr	r0, [r7, #20]
  406906:	4b18      	ldr	r3, [pc, #96]	; (406968 <_usb_d_dev_handle_dma+0x94>)
  406908:	4798      	blx	r3
  40690a:	4603      	mov	r3, r0
  40690c:	2b00      	cmp	r3, #0
  40690e:	d124      	bne.n	40695a <_usb_d_dev_handle_dma+0x86>
		/* Ignore EOT_STA interrupt */
		return;
	}
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  406910:	7cfb      	ldrb	r3, [r7, #19]
  406912:	3b01      	subs	r3, #1
  406914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  406918:	fa02 f303 	lsl.w	r3, r2, r3
  40691c:	4619      	mov	r1, r3
  40691e:	6978      	ldr	r0, [r7, #20]
  406920:	4b12      	ldr	r3, [pc, #72]	; (40696c <_usb_d_dev_handle_dma+0x98>)
  406922:	4798      	blx	r3
	trans_next = hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(hw, (epn - 1));
  406924:	7cfb      	ldrb	r3, [r7, #19]
  406926:	3b01      	subs	r3, #1
  406928:	b2db      	uxtb	r3, r3
  40692a:	4619      	mov	r1, r3
  40692c:	6978      	ldr	r0, [r7, #20]
  40692e:	4b10      	ldr	r3, [pc, #64]	; (406970 <_usb_d_dev_handle_dma+0x9c>)
  406930:	4798      	blx	r3
  406932:	60f8      	str	r0, [r7, #12]
	if (trans_next) {
  406934:	68fb      	ldr	r3, [r7, #12]
  406936:	2b00      	cmp	r3, #0
  406938:	d009      	beq.n	40694e <_usb_d_dev_handle_dma+0x7a>
		/* Transfer no complete (short packet or ZLP) then: Update number of
		   data transfered */
		ept->trans_count -= trans_next;
  40693a:	683b      	ldr	r3, [r7, #0]
  40693c:	689a      	ldr	r2, [r3, #8]
  40693e:	68fb      	ldr	r3, [r7, #12]
  406940:	1ad2      	subs	r2, r2, r3
  406942:	683b      	ldr	r3, [r7, #0]
  406944:	609a      	str	r2, [r3, #8]
		/* Set transfer complete to stop the transfer */
		ept->trans_size = ept->trans_count;
  406946:	683b      	ldr	r3, [r7, #0]
  406948:	689a      	ldr	r2, [r3, #8]
  40694a:	683b      	ldr	r3, [r7, #0]
  40694c:	605a      	str	r2, [r3, #4]
	}
	_usb_d_dev_dma_next(ept);
  40694e:	6838      	ldr	r0, [r7, #0]
  406950:	4b08      	ldr	r3, [pc, #32]	; (406974 <_usb_d_dev_handle_dma+0xa0>)
  406952:	4798      	blx	r3
  406954:	e002      	b.n	40695c <_usb_d_dev_handle_dma+0x88>
		return;
  406956:	bf00      	nop
  406958:	e000      	b.n	40695c <_usb_d_dev_handle_dma+0x88>
		return;
  40695a:	bf00      	nop
}
  40695c:	3718      	adds	r7, #24
  40695e:	46bd      	mov	sp, r7
  406960:	bd80      	pop	{r7, pc}
  406962:	bf00      	nop
  406964:	40038000 	.word	0x40038000
  406968:	00405b05 	.word	0x00405b05
  40696c:	00405815 	.word	0x00405815
  406970:	00405b6f 	.word	0x00405b6f
  406974:	00406421 	.word	0x00406421

00406978 <USBHS_Handler>:

/**
 * \brief USB device interrupt handler
 */
void USBHS_Handler(void)
{
  406978:	b590      	push	{r4, r7, lr}
  40697a:	b087      	sub	sp, #28
  40697c:	af00      	add	r7, sp, #0
	Usbhs *  hw = USBHS;
  40697e:	4b29      	ldr	r3, [pc, #164]	; (406a24 <USBHS_Handler+0xac>)
  406980:	613b      	str	r3, [r7, #16]
	uint8_t  i;
	uint32_t flags, ep_int, dma_int;

	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  406982:	6938      	ldr	r0, [r7, #16]
  406984:	4b28      	ldr	r3, [pc, #160]	; (406a28 <USBHS_Handler+0xb0>)
  406986:	4798      	blx	r3
  406988:	4604      	mov	r4, r0
  40698a:	6938      	ldr	r0, [r7, #16]
  40698c:	4b27      	ldr	r3, [pc, #156]	; (406a2c <USBHS_Handler+0xb4>)
  40698e:	4798      	blx	r3
  406990:	4603      	mov	r3, r0
  406992:	4023      	ands	r3, r4
  406994:	60fb      	str	r3, [r7, #12]

	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  406996:	68fb      	ldr	r3, [r7, #12]
  406998:	0b1b      	lsrs	r3, r3, #12
  40699a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40699e:	60bb      	str	r3, [r7, #8]
#if (CONF_USB_D_DMA_ENABLE == 1)
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  4069a0:	68fb      	ldr	r3, [r7, #12]
  4069a2:	0e5b      	lsrs	r3, r3, #25
  4069a4:	607b      	str	r3, [r7, #4]
#endif

#if (CONF_USB_D_DMA_ENABLE == 1)
	if ((ep_int == 0) && (dma_int == 0)) {
  4069a6:	68bb      	ldr	r3, [r7, #8]
  4069a8:	2b00      	cmp	r3, #0
  4069aa:	d107      	bne.n	4069bc <USBHS_Handler+0x44>
  4069ac:	687b      	ldr	r3, [r7, #4]
  4069ae:	2b00      	cmp	r3, #0
  4069b0:	d104      	bne.n	4069bc <USBHS_Handler+0x44>
#else
	if (ep_int == 0) {
#endif
		if (_usb_d_dev_handle_nep()) {
  4069b2:	4b1f      	ldr	r3, [pc, #124]	; (406a30 <USBHS_Handler+0xb8>)
  4069b4:	4798      	blx	r3
  4069b6:	4603      	mov	r3, r0
  4069b8:	2b00      	cmp	r3, #0
  4069ba:	d12e      	bne.n	406a1a <USBHS_Handler+0xa2>
			return;
		}
	}

	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
  4069bc:	2300      	movs	r3, #0
  4069be:	75fb      	strb	r3, [r7, #23]
  4069c0:	e027      	b.n	406a12 <USBHS_Handler+0x9a>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  4069c2:	7dfa      	ldrb	r2, [r7, #23]
  4069c4:	4613      	mov	r3, r2
  4069c6:	009b      	lsls	r3, r3, #2
  4069c8:	4413      	add	r3, r2
  4069ca:	009b      	lsls	r3, r3, #2
  4069cc:	3310      	adds	r3, #16
  4069ce:	4a19      	ldr	r2, [pc, #100]	; (406a34 <USBHS_Handler+0xbc>)
  4069d0:	4413      	add	r3, r2
  4069d2:	3304      	adds	r3, #4
  4069d4:	603b      	str	r3, [r7, #0]

		if (ept->ep == 0xFF) {
  4069d6:	683b      	ldr	r3, [r7, #0]
  4069d8:	7c9b      	ldrb	r3, [r3, #18]
  4069da:	2bff      	cmp	r3, #255	; 0xff
  4069dc:	d015      	beq.n	406a0a <USBHS_Handler+0x92>
			continue;
		}
		if (ep_int) {
  4069de:	68bb      	ldr	r3, [r7, #8]
  4069e0:	2b00      	cmp	r3, #0
  4069e2:	d004      	beq.n	4069ee <USBHS_Handler+0x76>
			_usb_d_dev_handle_eps(ep_int, ept);
  4069e4:	6839      	ldr	r1, [r7, #0]
  4069e6:	68b8      	ldr	r0, [r7, #8]
  4069e8:	4b13      	ldr	r3, [pc, #76]	; (406a38 <USBHS_Handler+0xc0>)
  4069ea:	4798      	blx	r3
  4069ec:	e00e      	b.n	406a0c <USBHS_Handler+0x94>
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  4069ee:	687b      	ldr	r3, [r7, #4]
  4069f0:	2b00      	cmp	r3, #0
  4069f2:	d00b      	beq.n	406a0c <USBHS_Handler+0x94>
  4069f4:	7dfb      	ldrb	r3, [r7, #23]
  4069f6:	2b00      	cmp	r3, #0
  4069f8:	d008      	beq.n	406a0c <USBHS_Handler+0x94>
  4069fa:	7dfb      	ldrb	r3, [r7, #23]
  4069fc:	2b06      	cmp	r3, #6
  4069fe:	d805      	bhi.n	406a0c <USBHS_Handler+0x94>
			_usb_d_dev_handle_dma(dma_int, ept);
  406a00:	6839      	ldr	r1, [r7, #0]
  406a02:	6878      	ldr	r0, [r7, #4]
  406a04:	4b0d      	ldr	r3, [pc, #52]	; (406a3c <USBHS_Handler+0xc4>)
  406a06:	4798      	blx	r3
  406a08:	e000      	b.n	406a0c <USBHS_Handler+0x94>
			continue;
  406a0a:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
  406a0c:	7dfb      	ldrb	r3, [r7, #23]
  406a0e:	3301      	adds	r3, #1
  406a10:	75fb      	strb	r3, [r7, #23]
  406a12:	7dfb      	ldrb	r3, [r7, #23]
  406a14:	2b03      	cmp	r3, #3
  406a16:	d9d4      	bls.n	4069c2 <USBHS_Handler+0x4a>
  406a18:	e000      	b.n	406a1c <USBHS_Handler+0xa4>
			return;
  406a1a:	bf00      	nop
		}
#endif
	}
}
  406a1c:	371c      	adds	r7, #28
  406a1e:	46bd      	mov	sp, r7
  406a20:	bd90      	pop	{r4, r7, pc}
  406a22:	bf00      	nop
  406a24:	40038000 	.word	0x40038000
  406a28:	00405831 	.word	0x00405831
  406a2c:	004057fd 	.word	0x004057fd
  406a30:	0040606d 	.word	0x0040606d
  406a34:	204011c8 	.word	0x204011c8
  406a38:	0040680d 	.word	0x0040680d
  406a3c:	004068d5 	.word	0x004068d5

00406a40 <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
  406a40:	b580      	push	{r7, lr}
  406a42:	b082      	sub	sp, #8
  406a44:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Reset USB address to 0 */
	hri_usbhs_clear_DEVCTRL_ADDEN_bit(USBHS);
  406a46:	481c      	ldr	r0, [pc, #112]	; (406ab8 <_usb_d_dev_reset_epts+0x78>)
  406a48:	4b1c      	ldr	r3, [pc, #112]	; (406abc <_usb_d_dev_reset_epts+0x7c>)
  406a4a:	4798      	blx	r3
	hri_usbhs_write_DEVCTRL_UADD_bf(USBHS, 0);
  406a4c:	2100      	movs	r1, #0
  406a4e:	481a      	ldr	r0, [pc, #104]	; (406ab8 <_usb_d_dev_reset_epts+0x78>)
  406a50:	4b1b      	ldr	r3, [pc, #108]	; (406ac0 <_usb_d_dev_reset_epts+0x80>)
  406a52:	4798      	blx	r3
	hri_usbhs_set_DEVCTRL_ADDEN_bit(USBHS);
  406a54:	4818      	ldr	r0, [pc, #96]	; (406ab8 <_usb_d_dev_reset_epts+0x78>)
  406a56:	4b1b      	ldr	r3, [pc, #108]	; (406ac4 <_usb_d_dev_reset_epts+0x84>)
  406a58:	4798      	blx	r3

	for (i = 0; i < USB_D_N_EP; i++) {
  406a5a:	2300      	movs	r3, #0
  406a5c:	71fb      	strb	r3, [r7, #7]
  406a5e:	e023      	b.n	406aa8 <_usb_d_dev_reset_epts+0x68>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  406a60:	79fa      	ldrb	r2, [r7, #7]
  406a62:	4613      	mov	r3, r2
  406a64:	009b      	lsls	r3, r3, #2
  406a66:	4413      	add	r3, r2
  406a68:	009b      	lsls	r3, r3, #2
  406a6a:	3310      	adds	r3, #16
  406a6c:	4a16      	ldr	r2, [pc, #88]	; (406ac8 <_usb_d_dev_reset_epts+0x88>)
  406a6e:	4413      	add	r3, r2
  406a70:	3304      	adds	r3, #4
  406a72:	2103      	movs	r1, #3
  406a74:	4618      	mov	r0, r3
  406a76:	4b15      	ldr	r3, [pc, #84]	; (406acc <_usb_d_dev_reset_epts+0x8c>)
  406a78:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
  406a7a:	79fa      	ldrb	r2, [r7, #7]
  406a7c:	4912      	ldr	r1, [pc, #72]	; (406ac8 <_usb_d_dev_reset_epts+0x88>)
  406a7e:	4613      	mov	r3, r2
  406a80:	009b      	lsls	r3, r3, #2
  406a82:	4413      	add	r3, r2
  406a84:	009b      	lsls	r3, r3, #2
  406a86:	440b      	add	r3, r1
  406a88:	3326      	adds	r3, #38	; 0x26
  406a8a:	22ff      	movs	r2, #255	; 0xff
  406a8c:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
  406a8e:	79fa      	ldrb	r2, [r7, #7]
  406a90:	490d      	ldr	r1, [pc, #52]	; (406ac8 <_usb_d_dev_reset_epts+0x88>)
  406a92:	4613      	mov	r3, r2
  406a94:	009b      	lsls	r3, r3, #2
  406a96:	4413      	add	r3, r2
  406a98:	009b      	lsls	r3, r3, #2
  406a9a:	440b      	add	r3, r1
  406a9c:	3327      	adds	r3, #39	; 0x27
  406a9e:	2200      	movs	r2, #0
  406aa0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
  406aa2:	79fb      	ldrb	r3, [r7, #7]
  406aa4:	3301      	adds	r3, #1
  406aa6:	71fb      	strb	r3, [r7, #7]
  406aa8:	79fb      	ldrb	r3, [r7, #7]
  406aaa:	2b03      	cmp	r3, #3
  406aac:	d9d8      	bls.n	406a60 <_usb_d_dev_reset_epts+0x20>
	}
}
  406aae:	bf00      	nop
  406ab0:	3708      	adds	r7, #8
  406ab2:	46bd      	mov	sp, r7
  406ab4:	bd80      	pop	{r7, pc}
  406ab6:	bf00      	nop
  406ab8:	40038000 	.word	0x40038000
  406abc:	0040588b 	.word	0x0040588b
  406ac0:	004058ab 	.word	0x004058ab
  406ac4:	0040586b 	.word	0x0040586b
  406ac8:	204011c8 	.word	0x204011c8
  406acc:	00406d29 	.word	0x00406d29

00406ad0 <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
  406ad0:	b590      	push	{r4, r7, lr}
  406ad2:	b089      	sub	sp, #36	; 0x24
  406ad4:	af00      	add	r7, sp, #0
	Usbhs *        hw = USBHS;
  406ad6:	4b1d      	ldr	r3, [pc, #116]	; (406b4c <_usb_d_dev_init+0x7c>)
  406ad8:	61fb      	str	r3, [r7, #28]
	uint32_t       data;
	uint8_t        speed      = CONF_USB_D_SPEED;
  406ada:	2302      	movs	r3, #2
  406adc:	76fb      	strb	r3, [r7, #27]
	const uint32_t spdconf[4] = {
  406ade:	4b1c      	ldr	r3, [pc, #112]	; (406b50 <_usb_d_dev_init+0x80>)
  406ae0:	1d3c      	adds	r4, r7, #4
  406ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  406ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0,                                             /* HS */
		0                                              /* Reserved */
	};
#endif

	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  406ae8:	69f8      	ldr	r0, [r7, #28]
  406aea:	4b1a      	ldr	r3, [pc, #104]	; (406b54 <_usb_d_dev_init+0x84>)
  406aec:	4798      	blx	r3
  406aee:	4603      	mov	r3, r0
  406af0:	2b00      	cmp	r3, #0
  406af2:	d002      	beq.n	406afa <_usb_d_dev_init+0x2a>
		return ERR_DENIED;
  406af4:	f06f 0310 	mvn.w	r3, #16
  406af8:	e024      	b.n	406b44 <_usb_d_dev_init+0x74>
	}

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  406afa:	4b17      	ldr	r3, [pc, #92]	; (406b58 <_usb_d_dev_init+0x88>)
  406afc:	4a17      	ldr	r2, [pc, #92]	; (406b5c <_usb_d_dev_init+0x8c>)
  406afe:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  406b00:	4b15      	ldr	r3, [pc, #84]	; (406b58 <_usb_d_dev_init+0x88>)
  406b02:	4a16      	ldr	r2, [pc, #88]	; (406b5c <_usb_d_dev_init+0x8c>)
  406b04:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  406b06:	4b14      	ldr	r3, [pc, #80]	; (406b58 <_usb_d_dev_init+0x88>)
  406b08:	4a14      	ldr	r2, [pc, #80]	; (406b5c <_usb_d_dev_init+0x8c>)
  406b0a:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  406b0c:	4b12      	ldr	r3, [pc, #72]	; (406b58 <_usb_d_dev_init+0x88>)
  406b0e:	4a14      	ldr	r2, [pc, #80]	; (406b60 <_usb_d_dev_init+0x90>)
  406b10:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  406b12:	4b11      	ldr	r3, [pc, #68]	; (406b58 <_usb_d_dev_init+0x88>)
  406b14:	4a11      	ldr	r2, [pc, #68]	; (406b5c <_usb_d_dev_init+0x8c>)
  406b16:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
  406b18:	4b12      	ldr	r3, [pc, #72]	; (406b64 <_usb_d_dev_init+0x94>)
  406b1a:	4798      	blx	r3
	hri_usbhs_write_CTRL_reg(hw, USBHS_CTRL_UIMOD);
  406b1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  406b20:	69f8      	ldr	r0, [r7, #28]
  406b22:	4b11      	ldr	r3, [pc, #68]	; (406b68 <_usb_d_dev_init+0x98>)
  406b24:	4798      	blx	r3

	data = spdconf[speed] | USBHS_DEVCTRL_DETACH;
  406b26:	7efb      	ldrb	r3, [r7, #27]
  406b28:	009b      	lsls	r3, r3, #2
  406b2a:	f107 0220 	add.w	r2, r7, #32
  406b2e:	4413      	add	r3, r2
  406b30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  406b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  406b38:	617b      	str	r3, [r7, #20]
	hri_usbhs_write_DEVCTRL_reg(hw, data);
  406b3a:	6979      	ldr	r1, [r7, #20]
  406b3c:	69f8      	ldr	r0, [r7, #28]
  406b3e:	4b0b      	ldr	r3, [pc, #44]	; (406b6c <_usb_d_dev_init+0x9c>)
  406b40:	4798      	blx	r3

	return ERR_NONE;
  406b42:	2300      	movs	r3, #0
}
  406b44:	4618      	mov	r0, r3
  406b46:	3724      	adds	r7, #36	; 0x24
  406b48:	46bd      	mov	sp, r7
  406b4a:	bd90      	pop	{r4, r7, pc}
  406b4c:	40038000 	.word	0x40038000
  406b50:	00407ce4 	.word	0x00407ce4
  406b54:	004059d3 	.word	0x004059d3
  406b58:	204011c8 	.word	0x204011c8
  406b5c:	00405b99 	.word	0x00405b99
  406b60:	00405baf 	.word	0x00405baf
  406b64:	00406a41 	.word	0x00406a41
  406b68:	00405a05 	.word	0x00405a05
  406b6c:	004058e1 	.word	0x004058e1

00406b70 <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept)
{
  406b70:	b480      	push	{r7}
  406b72:	b083      	sub	sp, #12
  406b74:	af00      	add	r7, sp, #0
  406b76:	6078      	str	r0, [r7, #4]
	return ept->flags.bits.is_stalled;
  406b78:	687b      	ldr	r3, [r7, #4]
  406b7a:	7cdb      	ldrb	r3, [r3, #19]
  406b7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  406b80:	b2db      	uxtb	r3, r3
}
  406b82:	4618      	mov	r0, r3
  406b84:	370c      	adds	r7, #12
  406b86:	46bd      	mov	sp, r7
  406b88:	f85d 7b04 	ldr.w	r7, [sp], #4
  406b8c:	4770      	bx	lr
	...

00406b90 <_usb_d_dev_ep_stall_set>:
 * \brief Set endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept)
{
  406b90:	b580      	push	{r7, lr}
  406b92:	b084      	sub	sp, #16
  406b94:	af00      	add	r7, sp, #0
  406b96:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406b98:	687b      	ldr	r3, [r7, #4]
  406b9a:	7c9b      	ldrb	r3, [r3, #18]
  406b9c:	f003 030f 	and.w	r3, r3, #15
  406ba0:	73fb      	strb	r3, [r7, #15]
	if (epn > CONF_USB_D_MAX_EP_N) {
  406ba2:	7bfb      	ldrb	r3, [r7, #15]
  406ba4:	2b03      	cmp	r3, #3
  406ba6:	d902      	bls.n	406bae <_usb_d_dev_ep_stall_set+0x1e>
		return ERR_NOT_FOUND;
  406ba8:	f06f 0309 	mvn.w	r3, #9
  406bac:	e016      	b.n	406bdc <_usb_d_dev_ep_stall_set+0x4c>
	}
	if (!ept->flags.bits.is_stalled) {
  406bae:	687b      	ldr	r3, [r7, #4]
  406bb0:	7cdb      	ldrb	r3, [r3, #19]
  406bb2:	f003 0308 	and.w	r3, r3, #8
  406bb6:	b2db      	uxtb	r3, r3
  406bb8:	2b00      	cmp	r3, #0
  406bba:	d10e      	bne.n	406bda <_usb_d_dev_ep_stall_set+0x4a>
		ept->flags.bits.is_stalled = 1;
  406bbc:	687a      	ldr	r2, [r7, #4]
  406bbe:	7cd3      	ldrb	r3, [r2, #19]
  406bc0:	f043 0308 	orr.w	r3, r3, #8
  406bc4:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  406bc6:	7bfb      	ldrb	r3, [r7, #15]
  406bc8:	2140      	movs	r1, #64	; 0x40
  406bca:	4618      	mov	r0, r3
  406bcc:	4b05      	ldr	r3, [pc, #20]	; (406be4 <_usb_d_dev_ep_stall_set+0x54>)
  406bce:	4798      	blx	r3
		_usbd_ep_set_stall(epn, true);
  406bd0:	7bfb      	ldrb	r3, [r7, #15]
  406bd2:	2101      	movs	r1, #1
  406bd4:	4618      	mov	r0, r3
  406bd6:	4b04      	ldr	r3, [pc, #16]	; (406be8 <_usb_d_dev_ep_stall_set+0x58>)
  406bd8:	4798      	blx	r3
	}

	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
  406bda:	2300      	movs	r3, #0
}
  406bdc:	4618      	mov	r0, r3
  406bde:	3710      	adds	r7, #16
  406be0:	46bd      	mov	sp, r7
  406be2:	bd80      	pop	{r7, pc}
  406be4:	00405bf1 	.word	0x00405bf1
  406be8:	00405c89 	.word	0x00405c89

00406bec <_usb_d_dev_ep_stall_clr>:
 * \brief Clear endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept)
{
  406bec:	b580      	push	{r7, lr}
  406bee:	b084      	sub	sp, #16
  406bf0:	af00      	add	r7, sp, #0
  406bf2:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406bf4:	687b      	ldr	r3, [r7, #4]
  406bf6:	7c9b      	ldrb	r3, [r3, #18]
  406bf8:	f003 030f 	and.w	r3, r3, #15
  406bfc:	73fb      	strb	r3, [r7, #15]

	if (!ept->flags.bits.is_stalled) {
  406bfe:	687b      	ldr	r3, [r7, #4]
  406c00:	7cdb      	ldrb	r3, [r3, #19]
  406c02:	f003 0308 	and.w	r3, r3, #8
  406c06:	b2db      	uxtb	r3, r3
  406c08:	2b00      	cmp	r3, #0
  406c0a:	d101      	bne.n	406c10 <_usb_d_dev_ep_stall_clr+0x24>
		return ERR_NONE;
  406c0c:	2300      	movs	r3, #0
  406c0e:	e039      	b.n	406c84 <_usb_d_dev_ep_stall_clr+0x98>
	}
	_usbd_ep_set_stall(epn, false);
  406c10:	7bfb      	ldrb	r3, [r7, #15]
  406c12:	2100      	movs	r1, #0
  406c14:	4618      	mov	r0, r3
  406c16:	4b1d      	ldr	r3, [pc, #116]	; (406c8c <_usb_d_dev_ep_stall_clr+0xa0>)
  406c18:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  406c1a:	7bfb      	ldrb	r3, [r7, #15]
  406c1c:	2140      	movs	r1, #64	; 0x40
  406c1e:	4618      	mov	r0, r3
  406c20:	4b1b      	ldr	r3, [pc, #108]	; (406c90 <_usb_d_dev_ep_stall_clr+0xa4>)
  406c22:	4798      	blx	r3

	if (_usbd_ep_is_stall_sent(epn)) {
  406c24:	7bfb      	ldrb	r3, [r7, #15]
  406c26:	4618      	mov	r0, r3
  406c28:	4b1a      	ldr	r3, [pc, #104]	; (406c94 <_usb_d_dev_ep_stall_clr+0xa8>)
  406c2a:	4798      	blx	r3
  406c2c:	4603      	mov	r3, r0
  406c2e:	2b00      	cmp	r3, #0
  406c30:	d00b      	beq.n	406c4a <_usb_d_dev_ep_stall_clr+0x5e>
		_usbd_ep_ack_stall(epn);
  406c32:	7bfb      	ldrb	r3, [r7, #15]
  406c34:	4618      	mov	r0, r3
  406c36:	4b18      	ldr	r3, [pc, #96]	; (406c98 <_usb_d_dev_ep_stall_clr+0xac>)
  406c38:	4798      	blx	r3
		_usbd_ep_reset(epn);
  406c3a:	7bfb      	ldrb	r3, [r7, #15]
  406c3c:	4618      	mov	r0, r3
  406c3e:	4b17      	ldr	r3, [pc, #92]	; (406c9c <_usb_d_dev_ep_stall_clr+0xb0>)
  406c40:	4798      	blx	r3
		_usbd_ep_reset_toggle(epn);
  406c42:	7bfb      	ldrb	r3, [r7, #15]
  406c44:	4618      	mov	r0, r3
  406c46:	4b16      	ldr	r3, [pc, #88]	; (406ca0 <_usb_d_dev_ep_stall_clr+0xb4>)
  406c48:	4798      	blx	r3
	}

	if (_usb_d_dev_ep_is_ctrl(ept)) {
  406c4a:	687b      	ldr	r3, [r7, #4]
  406c4c:	7cdb      	ldrb	r3, [r3, #19]
  406c4e:	f003 0307 	and.w	r3, r3, #7
  406c52:	b2db      	uxtb	r3, r3
  406c54:	2b01      	cmp	r3, #1
  406c56:	d10f      	bne.n	406c78 <_usb_d_dev_ep_stall_clr+0x8c>
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  406c58:	7bfb      	ldrb	r3, [r7, #15]
  406c5a:	4619      	mov	r1, r3
  406c5c:	4811      	ldr	r0, [pc, #68]	; (406ca4 <_usb_d_dev_ep_stall_clr+0xb8>)
  406c5e:	4b12      	ldr	r3, [pc, #72]	; (406ca8 <_usb_d_dev_ep_stall_clr+0xbc>)
  406c60:	4798      	blx	r3
  406c62:	4603      	mov	r3, r0
  406c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406c68:	2b00      	cmp	r3, #0
  406c6a:	d10a      	bne.n	406c82 <_usb_d_dev_ep_stall_clr+0x96>
			ept->flags.bits.is_stalled = 0;
  406c6c:	687a      	ldr	r2, [r7, #4]
  406c6e:	7cd3      	ldrb	r3, [r2, #19]
  406c70:	f36f 03c3 	bfc	r3, #3, #1
  406c74:	74d3      	strb	r3, [r2, #19]
  406c76:	e004      	b.n	406c82 <_usb_d_dev_ep_stall_clr+0x96>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
  406c78:	687a      	ldr	r2, [r7, #4]
  406c7a:	7cd3      	ldrb	r3, [r2, #19]
  406c7c:	f36f 03c3 	bfc	r3, #3, #1
  406c80:	74d3      	strb	r3, [r2, #19]
	}

	return ERR_NONE;
  406c82:	2300      	movs	r3, #0
}
  406c84:	4618      	mov	r0, r3
  406c86:	3710      	adds	r7, #16
  406c88:	46bd      	mov	sp, r7
  406c8a:	bd80      	pop	{r7, pc}
  406c8c:	00405c89 	.word	0x00405c89
  406c90:	00405c31 	.word	0x00405c31
  406c94:	00405cd5 	.word	0x00405cd5
  406c98:	00405cfd 	.word	0x00405cfd
  406c9c:	00405dc9 	.word	0x00405dc9
  406ca0:	00405e11 	.word	0x00405e11
  406ca4:	40038000 	.word	0x40038000
  406ca8:	0040577f 	.word	0x0040577f

00406cac <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
  406cac:	b580      	push	{r7, lr}
  406cae:	b086      	sub	sp, #24
  406cb0:	af00      	add	r7, sp, #0
  406cb2:	4603      	mov	r3, r0
  406cb4:	460a      	mov	r2, r1
  406cb6:	71fb      	strb	r3, [r7, #7]
  406cb8:	4613      	mov	r3, r2
  406cba:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
  406cbc:	79fb      	ldrb	r3, [r7, #7]
  406cbe:	f003 030f 	and.w	r3, r3, #15
  406cc2:	74fb      	strb	r3, [r7, #19]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  406cc4:	7cfa      	ldrb	r2, [r7, #19]
  406cc6:	4613      	mov	r3, r2
  406cc8:	009b      	lsls	r3, r3, #2
  406cca:	4413      	add	r3, r2
  406ccc:	009b      	lsls	r3, r3, #2
  406cce:	3310      	adds	r3, #16
  406cd0:	4a11      	ldr	r2, [pc, #68]	; (406d18 <_usb_d_dev_ep_stall+0x6c>)
  406cd2:	4413      	add	r3, r2
  406cd4:	3304      	adds	r3, #4
  406cd6:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
  406cd8:	7cfb      	ldrb	r3, [r7, #19]
  406cda:	2b03      	cmp	r3, #3
  406cdc:	d902      	bls.n	406ce4 <_usb_d_dev_ep_stall+0x38>
		return -USB_ERR_PARAM;
  406cde:	f06f 0311 	mvn.w	r3, #17
  406ce2:	e014      	b.n	406d0e <_usb_d_dev_ep_stall+0x62>
	}

	if (USB_EP_STALL_SET == ctrl) {
  406ce4:	79bb      	ldrb	r3, [r7, #6]
  406ce6:	2b01      	cmp	r3, #1
  406ce8:	d104      	bne.n	406cf4 <_usb_d_dev_ep_stall+0x48>
		rc = _usb_d_dev_ep_stall_set(ept);
  406cea:	68f8      	ldr	r0, [r7, #12]
  406cec:	4b0b      	ldr	r3, [pc, #44]	; (406d1c <_usb_d_dev_ep_stall+0x70>)
  406cee:	4798      	blx	r3
  406cf0:	6178      	str	r0, [r7, #20]
  406cf2:	e00b      	b.n	406d0c <_usb_d_dev_ep_stall+0x60>
	} else if (USB_EP_STALL_CLR == ctrl) {
  406cf4:	79bb      	ldrb	r3, [r7, #6]
  406cf6:	2b00      	cmp	r3, #0
  406cf8:	d104      	bne.n	406d04 <_usb_d_dev_ep_stall+0x58>
		rc = _usb_d_dev_ep_stall_clr(ept);
  406cfa:	68f8      	ldr	r0, [r7, #12]
  406cfc:	4b08      	ldr	r3, [pc, #32]	; (406d20 <_usb_d_dev_ep_stall+0x74>)
  406cfe:	4798      	blx	r3
  406d00:	6178      	str	r0, [r7, #20]
  406d02:	e003      	b.n	406d0c <_usb_d_dev_ep_stall+0x60>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept);
  406d04:	68f8      	ldr	r0, [r7, #12]
  406d06:	4b07      	ldr	r3, [pc, #28]	; (406d24 <_usb_d_dev_ep_stall+0x78>)
  406d08:	4798      	blx	r3
  406d0a:	6178      	str	r0, [r7, #20]
	}

	return rc;
  406d0c:	697b      	ldr	r3, [r7, #20]
}
  406d0e:	4618      	mov	r0, r3
  406d10:	3718      	adds	r7, #24
  406d12:	46bd      	mov	sp, r7
  406d14:	bd80      	pop	{r7, pc}
  406d16:	bf00      	nop
  406d18:	204011c8 	.word	0x204011c8
  406d1c:	00406b91 	.word	0x00406b91
  406d20:	00406bed 	.word	0x00406bed
  406d24:	00406b71 	.word	0x00406b71

00406d28 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  406d28:	b580      	push	{r7, lr}
  406d2a:	b082      	sub	sp, #8
  406d2c:	af00      	add	r7, sp, #0
  406d2e:	6078      	str	r0, [r7, #4]
  406d30:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  406d32:	687b      	ldr	r3, [r7, #4]
  406d34:	7c9b      	ldrb	r3, [r3, #18]
  406d36:	2bff      	cmp	r3, #255	; 0xff
  406d38:	d014      	beq.n	406d64 <_usb_d_dev_trans_done+0x3c>
  406d3a:	687b      	ldr	r3, [r7, #4]
  406d3c:	7cdb      	ldrb	r3, [r3, #19]
  406d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406d42:	b2db      	uxtb	r3, r3
  406d44:	2b00      	cmp	r3, #0
  406d46:	d00d      	beq.n	406d64 <_usb_d_dev_trans_done+0x3c>
		return;
	}

	ept->flags.bits.is_busy = 0;
  406d48:	687a      	ldr	r2, [r7, #4]
  406d4a:	7cd3      	ldrb	r3, [r2, #19]
  406d4c:	f36f 1386 	bfc	r3, #6, #1
  406d50:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  406d52:	4b06      	ldr	r3, [pc, #24]	; (406d6c <_usb_d_dev_trans_done+0x44>)
  406d54:	691b      	ldr	r3, [r3, #16]
  406d56:	687a      	ldr	r2, [r7, #4]
  406d58:	7c90      	ldrb	r0, [r2, #18]
  406d5a:	687a      	ldr	r2, [r7, #4]
  406d5c:	6892      	ldr	r2, [r2, #8]
  406d5e:	6839      	ldr	r1, [r7, #0]
  406d60:	4798      	blx	r3
  406d62:	e000      	b.n	406d66 <_usb_d_dev_trans_done+0x3e>
		return;
  406d64:	bf00      	nop
}
  406d66:	3708      	adds	r7, #8
  406d68:	46bd      	mov	sp, r7
  406d6a:	bd80      	pop	{r7, pc}
  406d6c:	204011c8 	.word	0x204011c8

00406d70 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
  406d70:	b580      	push	{r7, lr}
  406d72:	b086      	sub	sp, #24
  406d74:	af00      	add	r7, sp, #0
  406d76:	60f8      	str	r0, [r7, #12]
  406d78:	460b      	mov	r3, r1
  406d7a:	607a      	str	r2, [r7, #4]
  406d7c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  406d7e:	68fb      	ldr	r3, [r7, #12]
  406d80:	7c9b      	ldrb	r3, [r3, #18]
  406d82:	f003 030f 	and.w	r3, r3, #15
  406d86:	75fb      	strb	r3, [r7, #23]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  406d88:	68fb      	ldr	r3, [r7, #12]
  406d8a:	7c9b      	ldrb	r3, [r3, #18]
  406d8c:	2bff      	cmp	r3, #255	; 0xff
  406d8e:	d019      	beq.n	406dc4 <_usb_d_dev_trans_stop+0x54>
  406d90:	68fb      	ldr	r3, [r7, #12]
  406d92:	7cdb      	ldrb	r3, [r3, #19]
  406d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406d98:	b2db      	uxtb	r3, r3
  406d9a:	2b00      	cmp	r3, #0
  406d9c:	d012      	beq.n	406dc4 <_usb_d_dev_trans_stop+0x54>
		return;
	}

	/* Stop transfer */
	if (dir) {
  406d9e:	7afb      	ldrb	r3, [r7, #11]
  406da0:	2b00      	cmp	r3, #0
  406da2:	d005      	beq.n	406db0 <_usb_d_dev_trans_stop+0x40>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, false);
  406da4:	7dfb      	ldrb	r3, [r7, #23]
  406da6:	2100      	movs	r1, #0
  406da8:	4618      	mov	r0, r3
  406daa:	4b08      	ldr	r3, [pc, #32]	; (406dcc <_usb_d_dev_trans_stop+0x5c>)
  406dac:	4798      	blx	r3
  406dae:	e004      	b.n	406dba <_usb_d_dev_trans_stop+0x4a>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
  406db0:	7dfb      	ldrb	r3, [r7, #23]
  406db2:	2100      	movs	r1, #0
  406db4:	4618      	mov	r0, r3
  406db6:	4b06      	ldr	r3, [pc, #24]	; (406dd0 <_usb_d_dev_trans_stop+0x60>)
  406db8:	4798      	blx	r3
	}

	_usb_d_dev_trans_done(ept, code);
  406dba:	6879      	ldr	r1, [r7, #4]
  406dbc:	68f8      	ldr	r0, [r7, #12]
  406dbe:	4b05      	ldr	r3, [pc, #20]	; (406dd4 <_usb_d_dev_trans_stop+0x64>)
  406dc0:	4798      	blx	r3
  406dc2:	e000      	b.n	406dc6 <_usb_d_dev_trans_stop+0x56>
		return;
  406dc4:	bf00      	nop
}
  406dc6:	3718      	adds	r7, #24
  406dc8:	46bd      	mov	sp, r7
  406dca:	bd80      	pop	{r7, pc}
  406dcc:	00405eb5 	.word	0x00405eb5
  406dd0:	00405efd 	.word	0x00405efd
  406dd4:	00406d29 	.word	0x00406d29

00406dd8 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
  406dd8:	b580      	push	{r7, lr}
  406dda:	b084      	sub	sp, #16
  406ddc:	af00      	add	r7, sp, #0
  406dde:	4603      	mov	r3, r0
  406de0:	6039      	str	r1, [r7, #0]
  406de2:	71fb      	strb	r3, [r7, #7]
	uint8_t epn = USB_EP_GET_N(ep);
  406de4:	79fb      	ldrb	r3, [r7, #7]
  406de6:	f003 030f 	and.w	r3, r3, #15
  406dea:	73fb      	strb	r3, [r7, #15]

	uint16_t bytes = _usbd_ep_get_trans_count(epn);
  406dec:	7bfb      	ldrb	r3, [r7, #15]
  406dee:	4618      	mov	r0, r3
  406df0:	4b1c      	ldr	r3, [pc, #112]	; (406e64 <_usb_d_dev_ep_read_req+0x8c>)
  406df2:	4798      	blx	r3
  406df4:	4603      	mov	r3, r0
  406df6:	81bb      	strh	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  406df8:	7bfb      	ldrb	r3, [r7, #15]
  406dfa:	2b03      	cmp	r3, #3
  406dfc:	d802      	bhi.n	406e04 <_usb_d_dev_ep_read_req+0x2c>
  406dfe:	683b      	ldr	r3, [r7, #0]
  406e00:	2b00      	cmp	r3, #0
  406e02:	d102      	bne.n	406e0a <_usb_d_dev_ep_read_req+0x32>
		return -USB_ERR_PARAM;
  406e04:	f06f 0311 	mvn.w	r3, #17
  406e08:	e027      	b.n	406e5a <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  406e0a:	7bfb      	ldrb	r3, [r7, #15]
  406e0c:	4618      	mov	r0, r3
  406e0e:	4b16      	ldr	r3, [pc, #88]	; (406e68 <_usb_d_dev_ep_read_req+0x90>)
  406e10:	4798      	blx	r3
  406e12:	4603      	mov	r3, r0
  406e14:	f083 0301 	eor.w	r3, r3, #1
  406e18:	b2db      	uxtb	r3, r3
  406e1a:	2b00      	cmp	r3, #0
  406e1c:	d002      	beq.n	406e24 <_usb_d_dev_ep_read_req+0x4c>
		return -USB_ERR_FUNC;
  406e1e:	f06f 0312 	mvn.w	r3, #18
  406e22:	e01a      	b.n	406e5a <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_setup(epn)) {
  406e24:	7bfb      	ldrb	r3, [r7, #15]
  406e26:	4618      	mov	r0, r3
  406e28:	4b10      	ldr	r3, [pc, #64]	; (406e6c <_usb_d_dev_ep_read_req+0x94>)
  406e2a:	4798      	blx	r3
  406e2c:	4603      	mov	r3, r0
  406e2e:	f083 0301 	eor.w	r3, r3, #1
  406e32:	b2db      	uxtb	r3, r3
  406e34:	2b00      	cmp	r3, #0
  406e36:	d001      	beq.n	406e3c <_usb_d_dev_ep_read_req+0x64>
		return ERR_NONE;
  406e38:	2300      	movs	r3, #0
  406e3a:	e00e      	b.n	406e5a <_usb_d_dev_ep_read_req+0x82>
	}

	uint8_t *ptr = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  406e3c:	7bfb      	ldrb	r3, [r7, #15]
  406e3e:	03da      	lsls	r2, r3, #15
  406e40:	4b0b      	ldr	r3, [pc, #44]	; (406e70 <_usb_d_dev_ep_read_req+0x98>)
  406e42:	4413      	add	r3, r2
  406e44:	60bb      	str	r3, [r7, #8]
	memcpy(req_buf, (void *)ptr, 8);
  406e46:	2208      	movs	r2, #8
  406e48:	68b9      	ldr	r1, [r7, #8]
  406e4a:	6838      	ldr	r0, [r7, #0]
  406e4c:	4b09      	ldr	r3, [pc, #36]	; (406e74 <_usb_d_dev_ep_read_req+0x9c>)
  406e4e:	4798      	blx	r3

	_usbd_ep_ack_setup(epn);
  406e50:	7bfb      	ldrb	r3, [r7, #15]
  406e52:	4618      	mov	r0, r3
  406e54:	4b08      	ldr	r3, [pc, #32]	; (406e78 <_usb_d_dev_ep_read_req+0xa0>)
  406e56:	4798      	blx	r3

	return bytes;
  406e58:	89bb      	ldrh	r3, [r7, #12]
}
  406e5a:	4618      	mov	r0, r3
  406e5c:	3710      	adds	r7, #16
  406e5e:	46bd      	mov	sp, r7
  406e60:	bd80      	pop	{r7, pc}
  406e62:	bf00      	nop
  406e64:	00405e3d 	.word	0x00405e3d
  406e68:	00405c59 	.word	0x00405c59
  406e6c:	00405d81 	.word	0x00405d81
  406e70:	a0100000 	.word	0xa0100000
  406e74:	00407ad5 	.word	0x00407ad5
  406e78:	00405da9 	.word	0x00405da9

00406e7c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  406e7c:	b580      	push	{r7, lr}
  406e7e:	b088      	sub	sp, #32
  406e80:	af00      	add	r7, sp, #0
  406e82:	6078      	str	r0, [r7, #4]
	Usbhs *               hw  = USBHS;
  406e84:	4b64      	ldr	r3, [pc, #400]	; (407018 <_usb_d_dev_ep_trans+0x19c>)
  406e86:	61fb      	str	r3, [r7, #28]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  406e88:	687b      	ldr	r3, [r7, #4]
  406e8a:	7a1b      	ldrb	r3, [r3, #8]
  406e8c:	f003 030f 	and.w	r3, r3, #15
  406e90:	76fb      	strb	r3, [r7, #27]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  406e92:	687b      	ldr	r3, [r7, #4]
  406e94:	7a1b      	ldrb	r3, [r3, #8]
  406e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
  406e9a:	2b00      	cmp	r3, #0
  406e9c:	bf14      	ite	ne
  406e9e:	2301      	movne	r3, #1
  406ea0:	2300      	moveq	r3, #0
  406ea2:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  406ea4:	7efa      	ldrb	r2, [r7, #27]
  406ea6:	4613      	mov	r3, r2
  406ea8:	009b      	lsls	r3, r3, #2
  406eaa:	4413      	add	r3, r2
  406eac:	009b      	lsls	r3, r3, #2
  406eae:	3310      	adds	r3, #16
  406eb0:	4a5a      	ldr	r2, [pc, #360]	; (40701c <_usb_d_dev_ep_trans+0x1a0>)
  406eb2:	4413      	add	r3, r2
  406eb4:	3304      	adds	r3, #4
  406eb6:	617b      	str	r3, [r7, #20]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  406eb8:	697b      	ldr	r3, [r7, #20]
  406eba:	8a1b      	ldrh	r3, [r3, #16]
  406ebc:	f240 32ff 	movw	r2, #1023	; 0x3ff
  406ec0:	4293      	cmp	r3, r2
  406ec2:	d004      	beq.n	406ece <_usb_d_dev_ep_trans+0x52>
  406ec4:	697b      	ldr	r3, [r7, #20]
  406ec6:	8a1b      	ldrh	r3, [r3, #16]
  406ec8:	3b01      	subs	r3, #1
  406eca:	b29b      	uxth	r3, r3
  406ecc:	e001      	b.n	406ed2 <_usb_d_dev_ep_trans+0x56>
  406ece:	f240 33ff 	movw	r3, #1023	; 0x3ff
  406ed2:	827b      	strh	r3, [r7, #18]
	bool     size_n_aligned = (trans->size & size_mask);
  406ed4:	687b      	ldr	r3, [r7, #4]
  406ed6:	685a      	ldr	r2, [r3, #4]
  406ed8:	8a7b      	ldrh	r3, [r7, #18]
  406eda:	4013      	ands	r3, r2
  406edc:	2b00      	cmp	r3, #0
  406ede:	bf14      	ite	ne
  406ee0:	2301      	movne	r3, #1
  406ee2:	2300      	moveq	r3, #0
  406ee4:	747b      	strb	r3, [r7, #17]
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  406ee6:	697b      	ldr	r3, [r7, #20]
  406ee8:	7cdb      	ldrb	r3, [r3, #19]
  406eea:	f003 0307 	and.w	r3, r3, #7
  406eee:	b2db      	uxtb	r3, r3
  406ef0:	2b01      	cmp	r3, #1
  406ef2:	bf0c      	ite	eq
  406ef4:	2301      	moveq	r3, #1
  406ef6:	2300      	movne	r3, #0
  406ef8:	743b      	strb	r3, [r7, #16]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  406efa:	7efb      	ldrb	r3, [r7, #27]
  406efc:	2b03      	cmp	r3, #3
  406efe:	d902      	bls.n	406f06 <_usb_d_dev_ep_trans+0x8a>
		return -USB_ERR_PARAM;
  406f00:	f06f 0311 	mvn.w	r3, #17
  406f04:	e083      	b.n	40700e <_usb_d_dev_ep_trans+0x192>
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  406f06:	697b      	ldr	r3, [r7, #20]
  406f08:	7cdb      	ldrb	r3, [r3, #19]
  406f0a:	f003 0308 	and.w	r3, r3, #8
  406f0e:	b2db      	uxtb	r3, r3
  406f10:	2b00      	cmp	r3, #0
  406f12:	d001      	beq.n	406f18 <_usb_d_dev_ep_trans+0x9c>
		return USB_HALTED;
  406f14:	2302      	movs	r3, #2
  406f16:	e07a      	b.n	40700e <_usb_d_dev_ep_trans+0x192>
	}

	/* Try to start transactions. */
	atomic_enter_critical(&flags);
  406f18:	f107 030c 	add.w	r3, r7, #12
  406f1c:	4618      	mov	r0, r3
  406f1e:	4b40      	ldr	r3, [pc, #256]	; (407020 <_usb_d_dev_ep_trans+0x1a4>)
  406f20:	4798      	blx	r3

	if (_usb_d_dev_ep_is_busy(ept)) {
  406f22:	697b      	ldr	r3, [r7, #20]
  406f24:	7cdb      	ldrb	r3, [r3, #19]
  406f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
  406f2a:	b2db      	uxtb	r3, r3
  406f2c:	2b00      	cmp	r3, #0
  406f2e:	d006      	beq.n	406f3e <_usb_d_dev_ep_trans+0xc2>
		atomic_leave_critical(&flags);
  406f30:	f107 030c 	add.w	r3, r7, #12
  406f34:	4618      	mov	r0, r3
  406f36:	4b3b      	ldr	r3, [pc, #236]	; (407024 <_usb_d_dev_ep_trans+0x1a8>)
  406f38:	4798      	blx	r3
		return USB_BUSY;
  406f3a:	2301      	movs	r3, #1
  406f3c:	e067      	b.n	40700e <_usb_d_dev_ep_trans+0x192>
	}

	ept->flags.bits.is_busy = 1;
  406f3e:	697a      	ldr	r2, [r7, #20]
  406f40:	7cd3      	ldrb	r3, [r2, #19]
  406f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f46:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
  406f48:	f107 030c 	add.w	r3, r7, #12
  406f4c:	4618      	mov	r0, r3
  406f4e:	4b35      	ldr	r3, [pc, #212]	; (407024 <_usb_d_dev_ep_trans+0x1a8>)
  406f50:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
  406f52:	687b      	ldr	r3, [r7, #4]
  406f54:	681a      	ldr	r2, [r3, #0]
  406f56:	697b      	ldr	r3, [r7, #20]
  406f58:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
  406f5a:	687b      	ldr	r3, [r7, #4]
  406f5c:	685a      	ldr	r2, [r3, #4]
  406f5e:	697b      	ldr	r3, [r7, #20]
  406f60:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
  406f62:	697b      	ldr	r3, [r7, #20]
  406f64:	2200      	movs	r2, #0
  406f66:	609a      	str	r2, [r3, #8]
	ept->trans_load  = 0;
  406f68:	697b      	ldr	r3, [r7, #20]
  406f6a:	2200      	movs	r2, #0
  406f6c:	60da      	str	r2, [r3, #12]

	ept->flags.bits.dir      = dir;
  406f6e:	697a      	ldr	r2, [r7, #20]
  406f70:	7cd3      	ldrb	r3, [r2, #19]
  406f72:	7eb9      	ldrb	r1, [r7, #26]
  406f74:	f361 13c7 	bfi	r3, r1, #7, #1
  406f78:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  406f7a:	687b      	ldr	r3, [r7, #4]
  406f7c:	7a5b      	ldrb	r3, [r3, #9]
  406f7e:	2b00      	cmp	r3, #0
  406f80:	d007      	beq.n	406f92 <_usb_d_dev_ep_trans+0x116>
  406f82:	7c7b      	ldrb	r3, [r7, #17]
  406f84:	f083 0301 	eor.w	r3, r3, #1
  406f88:	b2db      	uxtb	r3, r3
  406f8a:	2b00      	cmp	r3, #0
  406f8c:	d001      	beq.n	406f92 <_usb_d_dev_ep_trans+0x116>
  406f8e:	2301      	movs	r3, #1
  406f90:	e000      	b.n	406f94 <_usb_d_dev_ep_trans+0x118>
  406f92:	2300      	movs	r3, #0
  406f94:	b2db      	uxtb	r3, r3
  406f96:	f003 0301 	and.w	r3, r3, #1
  406f9a:	b2d9      	uxtb	r1, r3
  406f9c:	697a      	ldr	r2, [r7, #20]
  406f9e:	7cd3      	ldrb	r3, [r2, #19]
  406fa0:	f361 1304 	bfi	r3, r1, #4, #1
  406fa4:	74d3      	strb	r3, [r2, #19]

#if (CONF_USB_D_DMA_ENABLE == 1)
	if (_usb_d_dev_ep_is_dma(epn)) {
  406fa6:	7efb      	ldrb	r3, [r7, #27]
  406fa8:	2b00      	cmp	r3, #0
  406faa:	d00b      	beq.n	406fc4 <_usb_d_dev_ep_trans+0x148>
  406fac:	7efb      	ldrb	r3, [r7, #27]
  406fae:	2b06      	cmp	r3, #6
  406fb0:	d808      	bhi.n	406fc4 <_usb_d_dev_ep_trans+0x148>
		hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(hw, epn);
  406fb2:	7efb      	ldrb	r3, [r7, #27]
  406fb4:	4619      	mov	r1, r3
  406fb6:	69f8      	ldr	r0, [r7, #28]
  406fb8:	4b1b      	ldr	r3, [pc, #108]	; (407028 <_usb_d_dev_ep_trans+0x1ac>)
  406fba:	4798      	blx	r3
		_usb_d_dev_dma_next(ept);
  406fbc:	6978      	ldr	r0, [r7, #20]
  406fbe:	4b1b      	ldr	r3, [pc, #108]	; (40702c <_usb_d_dev_ep_trans+0x1b0>)
  406fc0:	4798      	blx	r3
  406fc2:	e023      	b.n	40700c <_usb_d_dev_ep_trans+0x190>
	} else {
#endif
		if (!is_ctrl) {
  406fc4:	7c3b      	ldrb	r3, [r7, #16]
  406fc6:	f083 0301 	eor.w	r3, r3, #1
  406fca:	b2db      	uxtb	r3, r3
  406fcc:	2b00      	cmp	r3, #0
  406fce:	d008      	beq.n	406fe2 <_usb_d_dev_ep_trans+0x166>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  406fd0:	7efb      	ldrb	r3, [r7, #27]
  406fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  406fd6:	fa02 f303 	lsl.w	r3, r2, r3
  406fda:	4619      	mov	r1, r3
  406fdc:	69f8      	ldr	r0, [r7, #28]
  406fde:	4b14      	ldr	r3, [pc, #80]	; (407030 <_usb_d_dev_ep_trans+0x1b4>)
  406fe0:	4798      	blx	r3
		}
		hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(hw, epn);
  406fe2:	7efb      	ldrb	r3, [r7, #27]
  406fe4:	4619      	mov	r1, r3
  406fe6:	69f8      	ldr	r0, [r7, #28]
  406fe8:	4b12      	ldr	r3, [pc, #72]	; (407034 <_usb_d_dev_ep_trans+0x1b8>)
  406fea:	4798      	blx	r3
		if (dir) {
  406fec:	7ebb      	ldrb	r3, [r7, #26]
  406fee:	2b00      	cmp	r3, #0
  406ff0:	d006      	beq.n	407000 <_usb_d_dev_ep_trans+0x184>
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  406ff2:	7efb      	ldrb	r3, [r7, #27]
  406ff4:	2201      	movs	r2, #1
  406ff6:	4619      	mov	r1, r3
  406ff8:	69f8      	ldr	r0, [r7, #28]
  406ffa:	4b0f      	ldr	r3, [pc, #60]	; (407038 <_usb_d_dev_ep_trans+0x1bc>)
  406ffc:	4798      	blx	r3
  406ffe:	e005      	b.n	40700c <_usb_d_dev_ep_trans+0x190>
		} else {
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RXOUTES);
  407000:	7efb      	ldrb	r3, [r7, #27]
  407002:	2202      	movs	r2, #2
  407004:	4619      	mov	r1, r3
  407006:	69f8      	ldr	r0, [r7, #28]
  407008:	4b0b      	ldr	r3, [pc, #44]	; (407038 <_usb_d_dev_ep_trans+0x1bc>)
  40700a:	4798      	blx	r3
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
  40700c:	2300      	movs	r3, #0
}
  40700e:	4618      	mov	r0, r3
  407010:	3720      	adds	r7, #32
  407012:	46bd      	mov	sp, r7
  407014:	bd80      	pop	{r7, pc}
  407016:	bf00      	nop
  407018:	40038000 	.word	0x40038000
  40701c:	204011c8 	.word	0x204011c8
  407020:	00401d19 	.word	0x00401d19
  407024:	00401d3f 	.word	0x00401d3f
  407028:	00405943 	.word	0x00405943
  40702c:	00406421 	.word	0x00406421
  407030:	004057e1 	.word	0x004057e1
  407034:	00405973 	.word	0x00405973
  407038:	00405a65 	.word	0x00405a65

0040703c <_usb_d_dev_register_ep_callback>:
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
  40703c:	b480      	push	{r7}
  40703e:	b085      	sub	sp, #20
  407040:	af00      	add	r7, sp, #0
  407042:	4603      	mov	r3, r0
  407044:	6039      	str	r1, [r7, #0]
  407046:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  407048:	683b      	ldr	r3, [r7, #0]
  40704a:	2b00      	cmp	r3, #0
  40704c:	d001      	beq.n	407052 <_usb_d_dev_register_ep_callback+0x16>
  40704e:	683b      	ldr	r3, [r7, #0]
  407050:	e000      	b.n	407054 <_usb_d_dev_register_ep_callback+0x18>
  407052:	4b0e      	ldr	r3, [pc, #56]	; (40708c <_usb_d_dev_register_ep_callback+0x50>)
  407054:	60fb      	str	r3, [r7, #12]

	if (type == USB_D_DEV_EP_CB_SETUP) {
  407056:	79fb      	ldrb	r3, [r7, #7]
  407058:	2b00      	cmp	r3, #0
  40705a:	d103      	bne.n	407064 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  40705c:	4a0c      	ldr	r2, [pc, #48]	; (407090 <_usb_d_dev_register_ep_callback+0x54>)
  40705e:	68fb      	ldr	r3, [r7, #12]
  407060:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
  407062:	e00c      	b.n	40707e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  407064:	79fb      	ldrb	r3, [r7, #7]
  407066:	2b01      	cmp	r3, #1
  407068:	d103      	bne.n	407072 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  40706a:	4a09      	ldr	r2, [pc, #36]	; (407090 <_usb_d_dev_register_ep_callback+0x54>)
  40706c:	68fb      	ldr	r3, [r7, #12]
  40706e:	60d3      	str	r3, [r2, #12]
}
  407070:	e005      	b.n	40707e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  407072:	79fb      	ldrb	r3, [r7, #7]
  407074:	2b02      	cmp	r3, #2
  407076:	d102      	bne.n	40707e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  407078:	4a05      	ldr	r2, [pc, #20]	; (407090 <_usb_d_dev_register_ep_callback+0x54>)
  40707a:	68fb      	ldr	r3, [r7, #12]
  40707c:	6113      	str	r3, [r2, #16]
}
  40707e:	bf00      	nop
  407080:	3714      	adds	r7, #20
  407082:	46bd      	mov	sp, r7
  407084:	f85d 7b04 	ldr.w	r7, [sp], #4
  407088:	4770      	bx	lr
  40708a:	bf00      	nop
  40708c:	00405b99 	.word	0x00405b99
  407090:	204011c8 	.word	0x204011c8

00407094 <__NVIC_EnableIRQ>:
{
  407094:	b480      	push	{r7}
  407096:	b083      	sub	sp, #12
  407098:	af00      	add	r7, sp, #0
  40709a:	4603      	mov	r3, r0
  40709c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40709e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4070a2:	2b00      	cmp	r3, #0
  4070a4:	db0b      	blt.n	4070be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4070a6:	4909      	ldr	r1, [pc, #36]	; (4070cc <__NVIC_EnableIRQ+0x38>)
  4070a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4070ac:	095b      	lsrs	r3, r3, #5
  4070ae:	79fa      	ldrb	r2, [r7, #7]
  4070b0:	f002 021f 	and.w	r2, r2, #31
  4070b4:	2001      	movs	r0, #1
  4070b6:	fa00 f202 	lsl.w	r2, r0, r2
  4070ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4070be:	bf00      	nop
  4070c0:	370c      	adds	r7, #12
  4070c2:	46bd      	mov	sp, r7
  4070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4070c8:	4770      	bx	lr
  4070ca:	bf00      	nop
  4070cc:	e000e100 	.word	0xe000e100

004070d0 <__NVIC_DisableIRQ>:
{
  4070d0:	b480      	push	{r7}
  4070d2:	b083      	sub	sp, #12
  4070d4:	af00      	add	r7, sp, #0
  4070d6:	4603      	mov	r3, r0
  4070d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4070da:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4070de:	2b00      	cmp	r3, #0
  4070e0:	db10      	blt.n	407104 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  4070e2:	490b      	ldr	r1, [pc, #44]	; (407110 <__NVIC_DisableIRQ+0x40>)
  4070e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4070e8:	095b      	lsrs	r3, r3, #5
  4070ea:	79fa      	ldrb	r2, [r7, #7]
  4070ec:	f002 021f 	and.w	r2, r2, #31
  4070f0:	2001      	movs	r0, #1
  4070f2:	fa00 f202 	lsl.w	r2, r0, r2
  4070f6:	3320      	adds	r3, #32
  4070f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4070fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407100:	f3bf 8f6f 	isb	sy
}
  407104:	bf00      	nop
  407106:	370c      	adds	r7, #12
  407108:	46bd      	mov	sp, r7
  40710a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40710e:	4770      	bx	lr
  407110:	e000e100 	.word	0xe000e100

00407114 <__NVIC_ClearPendingIRQ>:
{
  407114:	b480      	push	{r7}
  407116:	b083      	sub	sp, #12
  407118:	af00      	add	r7, sp, #0
  40711a:	4603      	mov	r3, r0
  40711c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  407122:	2b00      	cmp	r3, #0
  407124:	db0c      	blt.n	407140 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  407126:	4909      	ldr	r1, [pc, #36]	; (40714c <__NVIC_ClearPendingIRQ+0x38>)
  407128:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40712c:	095b      	lsrs	r3, r3, #5
  40712e:	79fa      	ldrb	r2, [r7, #7]
  407130:	f002 021f 	and.w	r2, r2, #31
  407134:	2001      	movs	r0, #1
  407136:	fa00 f202 	lsl.w	r2, r0, r2
  40713a:	3360      	adds	r3, #96	; 0x60
  40713c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  407140:	bf00      	nop
  407142:	370c      	adds	r7, #12
  407144:	46bd      	mov	sp, r7
  407146:	f85d 7b04 	ldr.w	r7, [sp], #4
  40714a:	4770      	bx	lr
  40714c:	e000e100 	.word	0xe000e100

00407150 <hri_xdmac_set_CIM_reg>:
{
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = XDMAC_CIM_ROIM;
}

static inline void hri_xdmac_set_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  407150:	b480      	push	{r7}
  407152:	b085      	sub	sp, #20
  407154:	af00      	add	r7, sp, #0
  407156:	60f8      	str	r0, [r7, #12]
  407158:	460b      	mov	r3, r1
  40715a:	607a      	str	r2, [r7, #4]
  40715c:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = mask;
  40715e:	7afb      	ldrb	r3, [r7, #11]
  407160:	68fa      	ldr	r2, [r7, #12]
  407162:	019b      	lsls	r3, r3, #6
  407164:	4413      	add	r3, r2
  407166:	3350      	adds	r3, #80	; 0x50
  407168:	687a      	ldr	r2, [r7, #4]
  40716a:	601a      	str	r2, [r3, #0]
}
  40716c:	bf00      	nop
  40716e:	3714      	adds	r7, #20
  407170:	46bd      	mov	sp, r7
  407172:	f85d 7b04 	ldr.w	r7, [sp], #4
  407176:	4770      	bx	lr

00407178 <hri_xdmac_clear_CIM_reg>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIE = data;
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = ~data;
}

static inline void hri_xdmac_clear_CIM_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cim_reg_t mask)
{
  407178:	b480      	push	{r7}
  40717a:	b085      	sub	sp, #20
  40717c:	af00      	add	r7, sp, #0
  40717e:	60f8      	str	r0, [r7, #12]
  407180:	460b      	mov	r3, r1
  407182:	607a      	str	r2, [r7, #4]
  407184:	72fb      	strb	r3, [r7, #11]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CID = mask;
  407186:	7afb      	ldrb	r3, [r7, #11]
  407188:	68fa      	ldr	r2, [r7, #12]
  40718a:	019b      	lsls	r3, r3, #6
  40718c:	4413      	add	r3, r2
  40718e:	3354      	adds	r3, #84	; 0x54
  407190:	687a      	ldr	r2, [r7, #4]
  407192:	601a      	str	r2, [r3, #0]
}
  407194:	bf00      	nop
  407196:	3714      	adds	r7, #20
  407198:	46bd      	mov	sp, r7
  40719a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40719e:	4770      	bx	lr

004071a0 <hri_xdmac_read_CIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_cis_reg_t hri_xdmac_read_CIS_reg(const void *const hw, uint8_t submodule_index)
{
  4071a0:	b480      	push	{r7}
  4071a2:	b083      	sub	sp, #12
  4071a4:	af00      	add	r7, sp, #0
  4071a6:	6078      	str	r0, [r7, #4]
  4071a8:	460b      	mov	r3, r1
  4071aa:	70fb      	strb	r3, [r7, #3]
	return ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIS;
  4071ac:	78fb      	ldrb	r3, [r7, #3]
  4071ae:	687a      	ldr	r2, [r7, #4]
  4071b0:	019b      	lsls	r3, r3, #6
  4071b2:	4413      	add	r3, r2
  4071b4:	335c      	adds	r3, #92	; 0x5c
  4071b6:	681b      	ldr	r3, [r3, #0]
}
  4071b8:	4618      	mov	r0, r3
  4071ba:	370c      	adds	r7, #12
  4071bc:	46bd      	mov	sp, r7
  4071be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071c2:	4770      	bx	lr

004071c4 <hri_xdmac_write_CSA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csa_reg_t data)
{
  4071c4:	b480      	push	{r7}
  4071c6:	b085      	sub	sp, #20
  4071c8:	af00      	add	r7, sp, #0
  4071ca:	60f8      	str	r0, [r7, #12]
  4071cc:	460b      	mov	r3, r1
  4071ce:	607a      	str	r2, [r7, #4]
  4071d0:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSA = data;
  4071d2:	7afb      	ldrb	r3, [r7, #11]
  4071d4:	68fa      	ldr	r2, [r7, #12]
  4071d6:	019b      	lsls	r3, r3, #6
  4071d8:	4413      	add	r3, r2
  4071da:	3360      	adds	r3, #96	; 0x60
  4071dc:	687a      	ldr	r2, [r7, #4]
  4071de:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4071e0:	bf00      	nop
  4071e2:	3714      	adds	r7, #20
  4071e4:	46bd      	mov	sp, r7
  4071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071ea:	4770      	bx	lr

004071ec <hri_xdmac_write_CDA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cda_reg_t data)
{
  4071ec:	b480      	push	{r7}
  4071ee:	b085      	sub	sp, #20
  4071f0:	af00      	add	r7, sp, #0
  4071f2:	60f8      	str	r0, [r7, #12]
  4071f4:	460b      	mov	r3, r1
  4071f6:	607a      	str	r2, [r7, #4]
  4071f8:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDA = data;
  4071fa:	7afb      	ldrb	r3, [r7, #11]
  4071fc:	68fa      	ldr	r2, [r7, #12]
  4071fe:	019b      	lsls	r3, r3, #6
  407200:	4413      	add	r3, r2
  407202:	3364      	adds	r3, #100	; 0x64
  407204:	687a      	ldr	r2, [r7, #4]
  407206:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407208:	bf00      	nop
  40720a:	3714      	adds	r7, #20
  40720c:	46bd      	mov	sp, r7
  40720e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407212:	4770      	bx	lr

00407214 <hri_xdmac_write_CNDC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CNDC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cndc_reg_t data)
{
  407214:	b480      	push	{r7}
  407216:	b085      	sub	sp, #20
  407218:	af00      	add	r7, sp, #0
  40721a:	60f8      	str	r0, [r7, #12]
  40721c:	460b      	mov	r3, r1
  40721e:	607a      	str	r2, [r7, #4]
  407220:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CNDC = data;
  407222:	7afb      	ldrb	r3, [r7, #11]
  407224:	68fa      	ldr	r2, [r7, #12]
  407226:	019b      	lsls	r3, r3, #6
  407228:	4413      	add	r3, r2
  40722a:	336c      	adds	r3, #108	; 0x6c
  40722c:	687a      	ldr	r2, [r7, #4]
  40722e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407230:	bf00      	nop
  407232:	3714      	adds	r7, #20
  407234:	46bd      	mov	sp, r7
  407236:	f85d 7b04 	ldr.w	r7, [sp], #4
  40723a:	4770      	bx	lr

0040723c <hri_xdmac_write_CUBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CUBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cubc_reg_t data)
{
  40723c:	b480      	push	{r7}
  40723e:	b085      	sub	sp, #20
  407240:	af00      	add	r7, sp, #0
  407242:	60f8      	str	r0, [r7, #12]
  407244:	460b      	mov	r3, r1
  407246:	607a      	str	r2, [r7, #4]
  407248:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CUBC = data;
  40724a:	7afb      	ldrb	r3, [r7, #11]
  40724c:	68fa      	ldr	r2, [r7, #12]
  40724e:	019b      	lsls	r3, r3, #6
  407250:	4413      	add	r3, r2
  407252:	3370      	adds	r3, #112	; 0x70
  407254:	687a      	ldr	r2, [r7, #4]
  407256:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407258:	bf00      	nop
  40725a:	3714      	adds	r7, #20
  40725c:	46bd      	mov	sp, r7
  40725e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407262:	4770      	bx	lr

00407264 <hri_xdmac_write_CBC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CBC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cbc_reg_t data)
{
  407264:	b480      	push	{r7}
  407266:	b085      	sub	sp, #20
  407268:	af00      	add	r7, sp, #0
  40726a:	60f8      	str	r0, [r7, #12]
  40726c:	460b      	mov	r3, r1
  40726e:	607a      	str	r2, [r7, #4]
  407270:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CBC = data;
  407272:	7afb      	ldrb	r3, [r7, #11]
  407274:	68fa      	ldr	r2, [r7, #12]
  407276:	019b      	lsls	r3, r3, #6
  407278:	4413      	add	r3, r2
  40727a:	3374      	adds	r3, #116	; 0x74
  40727c:	687a      	ldr	r2, [r7, #4]
  40727e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407280:	bf00      	nop
  407282:	3714      	adds	r7, #20
  407284:	46bd      	mov	sp, r7
  407286:	f85d 7b04 	ldr.w	r7, [sp], #4
  40728a:	4770      	bx	lr

0040728c <hri_xdmac_get_CC_DWIDTH_bf>:
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_get_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index,
                                                            hri_xdmac_cc_reg_t mask)
{
  40728c:	b480      	push	{r7}
  40728e:	b087      	sub	sp, #28
  407290:	af00      	add	r7, sp, #0
  407292:	60f8      	str	r0, [r7, #12]
  407294:	460b      	mov	r3, r1
  407296:	607a      	str	r2, [r7, #4]
  407298:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  40729a:	7afb      	ldrb	r3, [r7, #11]
  40729c:	68fa      	ldr	r2, [r7, #12]
  40729e:	019b      	lsls	r3, r3, #6
  4072a0:	4413      	add	r3, r2
  4072a2:	3378      	adds	r3, #120	; 0x78
  4072a4:	681b      	ldr	r3, [r3, #0]
  4072a6:	617b      	str	r3, [r7, #20]
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  4072a8:	687b      	ldr	r3, [r7, #4]
  4072aa:	02da      	lsls	r2, r3, #11
  4072ac:	697b      	ldr	r3, [r7, #20]
  4072ae:	4013      	ands	r3, r2
  4072b0:	0adb      	lsrs	r3, r3, #11
  4072b2:	f003 0303 	and.w	r3, r3, #3
  4072b6:	617b      	str	r3, [r7, #20]
	return tmp;
  4072b8:	697b      	ldr	r3, [r7, #20]
}
  4072ba:	4618      	mov	r0, r3
  4072bc:	371c      	adds	r7, #28
  4072be:	46bd      	mov	sp, r7
  4072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072c4:	4770      	bx	lr

004072c6 <hri_xdmac_read_CC_DWIDTH_bf>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC ^= XDMAC_CC_DWIDTH(mask);
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_xdmac_cc_reg_t hri_xdmac_read_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index)
{
  4072c6:	b480      	push	{r7}
  4072c8:	b085      	sub	sp, #20
  4072ca:	af00      	add	r7, sp, #0
  4072cc:	6078      	str	r0, [r7, #4]
  4072ce:	460b      	mov	r3, r1
  4072d0:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  4072d2:	78fb      	ldrb	r3, [r7, #3]
  4072d4:	687a      	ldr	r2, [r7, #4]
  4072d6:	019b      	lsls	r3, r3, #6
  4072d8:	4413      	add	r3, r2
  4072da:	3378      	adds	r3, #120	; 0x78
  4072dc:	681b      	ldr	r3, [r3, #0]
  4072de:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & XDMAC_CC_DWIDTH_Msk) >> XDMAC_CC_DWIDTH_Pos;
  4072e0:	68fb      	ldr	r3, [r7, #12]
  4072e2:	0adb      	lsrs	r3, r3, #11
  4072e4:	f003 0303 	and.w	r3, r3, #3
  4072e8:	60fb      	str	r3, [r7, #12]
	return tmp;
  4072ea:	68fb      	ldr	r3, [r7, #12]
}
  4072ec:	4618      	mov	r0, r3
  4072ee:	3714      	adds	r7, #20
  4072f0:	46bd      	mov	sp, r7
  4072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4072f6:	4770      	bx	lr

004072f8 <hri_xdmac_write_CC_SAM_bf>:
	tmp = (tmp & XDMAC_CC_SAM(mask)) >> XDMAC_CC_SAM_Pos;
	return tmp;
}

static inline void hri_xdmac_write_CC_SAM_bf(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  4072f8:	b480      	push	{r7}
  4072fa:	b087      	sub	sp, #28
  4072fc:	af00      	add	r7, sp, #0
  4072fe:	60f8      	str	r0, [r7, #12]
  407300:	460b      	mov	r3, r1
  407302:	607a      	str	r2, [r7, #4]
  407304:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  407306:	7afb      	ldrb	r3, [r7, #11]
  407308:	68fa      	ldr	r2, [r7, #12]
  40730a:	019b      	lsls	r3, r3, #6
  40730c:	4413      	add	r3, r2
  40730e:	3378      	adds	r3, #120	; 0x78
  407310:	681b      	ldr	r3, [r3, #0]
  407312:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CC_SAM_Msk;
  407314:	697b      	ldr	r3, [r7, #20]
  407316:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40731a:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CC_SAM(data);
  40731c:	687b      	ldr	r3, [r7, #4]
  40731e:	041b      	lsls	r3, r3, #16
  407320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  407324:	697a      	ldr	r2, [r7, #20]
  407326:	4313      	orrs	r3, r2
  407328:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = tmp;
  40732a:	7afb      	ldrb	r3, [r7, #11]
  40732c:	68fa      	ldr	r2, [r7, #12]
  40732e:	019b      	lsls	r3, r3, #6
  407330:	4413      	add	r3, r2
  407332:	3378      	adds	r3, #120	; 0x78
  407334:	697a      	ldr	r2, [r7, #20]
  407336:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407338:	bf00      	nop
  40733a:	371c      	adds	r7, #28
  40733c:	46bd      	mov	sp, r7
  40733e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407342:	4770      	bx	lr

00407344 <hri_xdmac_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CC_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
  407344:	b480      	push	{r7}
  407346:	b085      	sub	sp, #20
  407348:	af00      	add	r7, sp, #0
  40734a:	60f8      	str	r0, [r7, #12]
  40734c:	460b      	mov	r3, r1
  40734e:	607a      	str	r2, [r7, #4]
  407350:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = data;
  407352:	7afb      	ldrb	r3, [r7, #11]
  407354:	68fa      	ldr	r2, [r7, #12]
  407356:	019b      	lsls	r3, r3, #6
  407358:	4413      	add	r3, r2
  40735a:	3378      	adds	r3, #120	; 0x78
  40735c:	687a      	ldr	r2, [r7, #4]
  40735e:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407360:	bf00      	nop
  407362:	3714      	adds	r7, #20
  407364:	46bd      	mov	sp, r7
  407366:	f85d 7b04 	ldr.w	r7, [sp], #4
  40736a:	4770      	bx	lr

0040736c <hri_xdmac_write_CDS_MSP_SDS_MSP_bf>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_SDS_MSP_bf(const void *const hw, uint8_t submodule_index,
                                                      hri_xdmac_cds_msp_reg_t data)
{
  40736c:	b480      	push	{r7}
  40736e:	b087      	sub	sp, #28
  407370:	af00      	add	r7, sp, #0
  407372:	60f8      	str	r0, [r7, #12]
  407374:	460b      	mov	r3, r1
  407376:	607a      	str	r2, [r7, #4]
  407378:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP;
  40737a:	7afb      	ldrb	r3, [r7, #11]
  40737c:	68fa      	ldr	r2, [r7, #12]
  40737e:	019b      	lsls	r3, r3, #6
  407380:	4413      	add	r3, r2
  407382:	337c      	adds	r3, #124	; 0x7c
  407384:	681b      	ldr	r3, [r3, #0]
  407386:	617b      	str	r3, [r7, #20]
	tmp &= ~XDMAC_CDS_MSP_SDS_MSP_Msk;
  407388:	697a      	ldr	r2, [r7, #20]
  40738a:	4b0a      	ldr	r3, [pc, #40]	; (4073b4 <hri_xdmac_write_CDS_MSP_SDS_MSP_bf+0x48>)
  40738c:	4013      	ands	r3, r2
  40738e:	617b      	str	r3, [r7, #20]
	tmp |= XDMAC_CDS_MSP_SDS_MSP(data);
  407390:	687b      	ldr	r3, [r7, #4]
  407392:	b29b      	uxth	r3, r3
  407394:	697a      	ldr	r2, [r7, #20]
  407396:	4313      	orrs	r3, r2
  407398:	617b      	str	r3, [r7, #20]
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = tmp;
  40739a:	7afb      	ldrb	r3, [r7, #11]
  40739c:	68fa      	ldr	r2, [r7, #12]
  40739e:	019b      	lsls	r3, r3, #6
  4073a0:	4413      	add	r3, r2
  4073a2:	337c      	adds	r3, #124	; 0x7c
  4073a4:	697a      	ldr	r2, [r7, #20]
  4073a6:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4073a8:	bf00      	nop
  4073aa:	371c      	adds	r7, #28
  4073ac:	46bd      	mov	sp, r7
  4073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4073b2:	4770      	bx	lr
  4073b4:	ffff0000 	.word	0xffff0000

004073b8 <hri_xdmac_write_CDS_MSP_reg>:
	return tmp;
}

static inline void hri_xdmac_write_CDS_MSP_reg(const void *const hw, uint8_t submodule_index,
                                               hri_xdmac_cds_msp_reg_t data)
{
  4073b8:	b480      	push	{r7}
  4073ba:	b085      	sub	sp, #20
  4073bc:	af00      	add	r7, sp, #0
  4073be:	60f8      	str	r0, [r7, #12]
  4073c0:	460b      	mov	r3, r1
  4073c2:	607a      	str	r2, [r7, #4]
  4073c4:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = data;
  4073c6:	7afb      	ldrb	r3, [r7, #11]
  4073c8:	68fa      	ldr	r2, [r7, #12]
  4073ca:	019b      	lsls	r3, r3, #6
  4073cc:	4413      	add	r3, r2
  4073ce:	337c      	adds	r3, #124	; 0x7c
  4073d0:	687a      	ldr	r2, [r7, #4]
  4073d2:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4073d4:	bf00      	nop
  4073d6:	3714      	adds	r7, #20
  4073d8:	46bd      	mov	sp, r7
  4073da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4073de:	4770      	bx	lr

004073e0 <hri_xdmac_write_CSUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CSUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_csus_reg_t data)
{
  4073e0:	b480      	push	{r7}
  4073e2:	b085      	sub	sp, #20
  4073e4:	af00      	add	r7, sp, #0
  4073e6:	60f8      	str	r0, [r7, #12]
  4073e8:	460b      	mov	r3, r1
  4073ea:	607a      	str	r2, [r7, #4]
  4073ec:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSUS = data;
  4073ee:	7afb      	ldrb	r3, [r7, #11]
  4073f0:	68fa      	ldr	r2, [r7, #12]
  4073f2:	3302      	adds	r3, #2
  4073f4:	019b      	lsls	r3, r3, #6
  4073f6:	4413      	add	r3, r2
  4073f8:	687a      	ldr	r2, [r7, #4]
  4073fa:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4073fc:	bf00      	nop
  4073fe:	3714      	adds	r7, #20
  407400:	46bd      	mov	sp, r7
  407402:	f85d 7b04 	ldr.w	r7, [sp], #4
  407406:	4770      	bx	lr

00407408 <hri_xdmac_write_CDUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_xdmac_write_CDUS_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cdus_reg_t data)
{
  407408:	b480      	push	{r7}
  40740a:	b085      	sub	sp, #20
  40740c:	af00      	add	r7, sp, #0
  40740e:	60f8      	str	r0, [r7, #12]
  407410:	460b      	mov	r3, r1
  407412:	607a      	str	r2, [r7, #4]
  407414:	72fb      	strb	r3, [r7, #11]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDUS = data;
  407416:	7afb      	ldrb	r3, [r7, #11]
  407418:	68fa      	ldr	r2, [r7, #12]
  40741a:	3302      	adds	r3, #2
  40741c:	019b      	lsls	r3, r3, #6
  40741e:	4413      	add	r3, r2
  407420:	3304      	adds	r3, #4
  407422:	687a      	ldr	r2, [r7, #4]
  407424:	601a      	str	r2, [r3, #0]
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  407426:	bf00      	nop
  407428:	3714      	adds	r7, #20
  40742a:	46bd      	mov	sp, r7
  40742c:	f85d 7b04 	ldr.w	r7, [sp], #4
  407430:	4770      	bx	lr

00407432 <hri_xdmac_set_GIM_reg>:
{
	((Xdmac *)hw)->XDMAC_GID = XDMAC_GIM_IM23;
}

static inline void hri_xdmac_set_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  407432:	b480      	push	{r7}
  407434:	b083      	sub	sp, #12
  407436:	af00      	add	r7, sp, #0
  407438:	6078      	str	r0, [r7, #4]
  40743a:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GIE = mask;
  40743c:	687b      	ldr	r3, [r7, #4]
  40743e:	683a      	ldr	r2, [r7, #0]
  407440:	60da      	str	r2, [r3, #12]
}
  407442:	bf00      	nop
  407444:	370c      	adds	r7, #12
  407446:	46bd      	mov	sp, r7
  407448:	f85d 7b04 	ldr.w	r7, [sp], #4
  40744c:	4770      	bx	lr

0040744e <hri_xdmac_clear_GIM_reg>:
	((Xdmac *)hw)->XDMAC_GIE = data;
	((Xdmac *)hw)->XDMAC_GID = ~data;
}

static inline void hri_xdmac_clear_GIM_reg(const void *const hw, hri_xdmac_gim_reg_t mask)
{
  40744e:	b480      	push	{r7}
  407450:	b083      	sub	sp, #12
  407452:	af00      	add	r7, sp, #0
  407454:	6078      	str	r0, [r7, #4]
  407456:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GID = mask;
  407458:	687b      	ldr	r3, [r7, #4]
  40745a:	683a      	ldr	r2, [r7, #0]
  40745c:	611a      	str	r2, [r3, #16]
}
  40745e:	bf00      	nop
  407460:	370c      	adds	r7, #12
  407462:	46bd      	mov	sp, r7
  407464:	f85d 7b04 	ldr.w	r7, [sp], #4
  407468:	4770      	bx	lr

0040746a <hri_xdmac_set_GS_reg>:
{
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
  40746a:	b480      	push	{r7}
  40746c:	b083      	sub	sp, #12
  40746e:	af00      	add	r7, sp, #0
  407470:	6078      	str	r0, [r7, #4]
  407472:	6039      	str	r1, [r7, #0]
	((Xdmac *)hw)->XDMAC_GE = mask;
  407474:	687b      	ldr	r3, [r7, #4]
  407476:	683a      	ldr	r2, [r7, #0]
  407478:	61da      	str	r2, [r3, #28]
}
  40747a:	bf00      	nop
  40747c:	370c      	adds	r7, #12
  40747e:	46bd      	mov	sp, r7
  407480:	f85d 7b04 	ldr.w	r7, [sp], #4
  407484:	4770      	bx	lr

00407486 <hri_xdmac_read_GIS_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_xdmac_gis_reg_t hri_xdmac_read_GIS_reg(const void *const hw)
{
  407486:	b480      	push	{r7}
  407488:	b083      	sub	sp, #12
  40748a:	af00      	add	r7, sp, #0
  40748c:	6078      	str	r0, [r7, #4]
	return ((Xdmac *)hw)->XDMAC_GIS;
  40748e:	687b      	ldr	r3, [r7, #4]
  407490:	699b      	ldr	r3, [r3, #24]
}
  407492:	4618      	mov	r0, r3
  407494:	370c      	adds	r7, #12
  407496:	46bd      	mov	sp, r7
  407498:	f85d 7b04 	ldr.w	r7, [sp], #4
  40749c:	4770      	bx	lr

0040749e <hri_xdmac_write_GSWR_reg>:
	((Xdmac *)hw)->XDMAC_GRWR = data;
	XDMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
  40749e:	b480      	push	{r7}
  4074a0:	b083      	sub	sp, #12
  4074a2:	af00      	add	r7, sp, #0
  4074a4:	6078      	str	r0, [r7, #4]
  4074a6:	6039      	str	r1, [r7, #0]
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  4074a8:	687b      	ldr	r3, [r7, #4]
  4074aa:	683a      	ldr	r2, [r7, #0]
  4074ac:	639a      	str	r2, [r3, #56]	; 0x38
	XDMAC_CRITICAL_SECTION_LEAVE();
}
  4074ae:	bf00      	nop
  4074b0:	370c      	adds	r7, #12
  4074b2:	46bd      	mov	sp, r7
  4074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4074b8:	4770      	bx	lr
	...

004074bc <_dma_init>:

/* DMAC channel configurations */
const static struct dmac_channel_cfg _cfgs[] = {REPEAT_MACRO(DMAC_CHANNEL_CFG, i, DMAC_CH_NUM)};

int32_t _dma_init(void)
{
  4074bc:	b580      	push	{r7, lr}
  4074be:	b082      	sub	sp, #8
  4074c0:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Clear the pending Interrupt Status bit */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4074c2:	2300      	movs	r3, #0
  4074c4:	71fb      	strb	r3, [r7, #7]
  4074c6:	e007      	b.n	4074d8 <_dma_init+0x1c>
		hri_xdmac_read_CIS_reg(XDMAC, i);
  4074c8:	79fb      	ldrb	r3, [r7, #7]
  4074ca:	4619      	mov	r1, r3
  4074cc:	4825      	ldr	r0, [pc, #148]	; (407564 <_dma_init+0xa8>)
  4074ce:	4b26      	ldr	r3, [pc, #152]	; (407568 <_dma_init+0xac>)
  4074d0:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4074d2:	79fb      	ldrb	r3, [r7, #7]
  4074d4:	3301      	adds	r3, #1
  4074d6:	71fb      	strb	r3, [r7, #7]
  4074d8:	79fb      	ldrb	r3, [r7, #7]
  4074da:	2b17      	cmp	r3, #23
  4074dc:	d9f4      	bls.n	4074c8 <_dma_init+0xc>
	}
	/* Configuration Registers */
	for (i = 0; i < DMAC_CH_NUM; i++) {
  4074de:	2300      	movs	r3, #0
  4074e0:	71fb      	strb	r3, [r7, #7]
  4074e2:	e02d      	b.n	407540 <_dma_init+0x84>
		hri_xdmac_write_CNDC_reg(XDMAC, i, 0x0);
  4074e4:	79fb      	ldrb	r3, [r7, #7]
  4074e6:	2200      	movs	r2, #0
  4074e8:	4619      	mov	r1, r3
  4074ea:	481e      	ldr	r0, [pc, #120]	; (407564 <_dma_init+0xa8>)
  4074ec:	4b1f      	ldr	r3, [pc, #124]	; (40756c <_dma_init+0xb0>)
  4074ee:	4798      	blx	r3
		hri_xdmac_write_CBC_reg(XDMAC, i, 0x0);
  4074f0:	79fb      	ldrb	r3, [r7, #7]
  4074f2:	2200      	movs	r2, #0
  4074f4:	4619      	mov	r1, r3
  4074f6:	481b      	ldr	r0, [pc, #108]	; (407564 <_dma_init+0xa8>)
  4074f8:	4b1d      	ldr	r3, [pc, #116]	; (407570 <_dma_init+0xb4>)
  4074fa:	4798      	blx	r3
		hri_xdmac_write_CSUS_reg(XDMAC, i, 0x0);
  4074fc:	79fb      	ldrb	r3, [r7, #7]
  4074fe:	2200      	movs	r2, #0
  407500:	4619      	mov	r1, r3
  407502:	4818      	ldr	r0, [pc, #96]	; (407564 <_dma_init+0xa8>)
  407504:	4b1b      	ldr	r3, [pc, #108]	; (407574 <_dma_init+0xb8>)
  407506:	4798      	blx	r3
		hri_xdmac_write_CDUS_reg(XDMAC, i, 0x0);
  407508:	79fb      	ldrb	r3, [r7, #7]
  40750a:	2200      	movs	r2, #0
  40750c:	4619      	mov	r1, r3
  40750e:	4815      	ldr	r0, [pc, #84]	; (407564 <_dma_init+0xa8>)
  407510:	4b19      	ldr	r3, [pc, #100]	; (407578 <_dma_init+0xbc>)
  407512:	4798      	blx	r3
		hri_xdmac_write_CC_reg(XDMAC, i, _cfgs[i].config_reg);
  407514:	79fb      	ldrb	r3, [r7, #7]
  407516:	4a19      	ldr	r2, [pc, #100]	; (40757c <_dma_init+0xc0>)
  407518:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40751c:	79fb      	ldrb	r3, [r7, #7]
  40751e:	4619      	mov	r1, r3
  407520:	4810      	ldr	r0, [pc, #64]	; (407564 <_dma_init+0xa8>)
  407522:	4b17      	ldr	r3, [pc, #92]	; (407580 <_dma_init+0xc4>)
  407524:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_reg(XDMAC, i, _cfgs[i].cds_msp);
  407526:	79fb      	ldrb	r3, [r7, #7]
  407528:	4a14      	ldr	r2, [pc, #80]	; (40757c <_dma_init+0xc0>)
  40752a:	00db      	lsls	r3, r3, #3
  40752c:	4413      	add	r3, r2
  40752e:	685a      	ldr	r2, [r3, #4]
  407530:	79fb      	ldrb	r3, [r7, #7]
  407532:	4619      	mov	r1, r3
  407534:	480b      	ldr	r0, [pc, #44]	; (407564 <_dma_init+0xa8>)
  407536:	4b13      	ldr	r3, [pc, #76]	; (407584 <_dma_init+0xc8>)
  407538:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
  40753a:	79fb      	ldrb	r3, [r7, #7]
  40753c:	3301      	adds	r3, #1
  40753e:	71fb      	strb	r3, [r7, #7]
  407540:	79fb      	ldrb	r3, [r7, #7]
  407542:	2b17      	cmp	r3, #23
  407544:	d9ce      	bls.n	4074e4 <_dma_init+0x28>
	}

	NVIC_DisableIRQ(XDMAC_IRQn);
  407546:	203a      	movs	r0, #58	; 0x3a
  407548:	4b0f      	ldr	r3, [pc, #60]	; (407588 <_dma_init+0xcc>)
  40754a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(XDMAC_IRQn);
  40754c:	203a      	movs	r0, #58	; 0x3a
  40754e:	4b0f      	ldr	r3, [pc, #60]	; (40758c <_dma_init+0xd0>)
  407550:	4798      	blx	r3
	NVIC_EnableIRQ(XDMAC_IRQn);
  407552:	203a      	movs	r0, #58	; 0x3a
  407554:	4b0e      	ldr	r3, [pc, #56]	; (407590 <_dma_init+0xd4>)
  407556:	4798      	blx	r3

	return ERR_NONE;
  407558:	2300      	movs	r3, #0
}
  40755a:	4618      	mov	r0, r3
  40755c:	3708      	adds	r7, #8
  40755e:	46bd      	mov	sp, r7
  407560:	bd80      	pop	{r7, pc}
  407562:	bf00      	nop
  407564:	40078000 	.word	0x40078000
  407568:	004071a1 	.word	0x004071a1
  40756c:	00407215 	.word	0x00407215
  407570:	00407265 	.word	0x00407265
  407574:	004073e1 	.word	0x004073e1
  407578:	00407409 	.word	0x00407409
  40757c:	00407d14 	.word	0x00407d14
  407580:	00407345 	.word	0x00407345
  407584:	004073b9 	.word	0x004073b9
  407588:	004070d1 	.word	0x004070d1
  40758c:	00407115 	.word	0x00407115
  407590:	00407095 	.word	0x00407095

00407594 <_dma_set_destination_address>:

int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
  407594:	b580      	push	{r7, lr}
  407596:	b082      	sub	sp, #8
  407598:	af00      	add	r7, sp, #0
  40759a:	4603      	mov	r3, r0
  40759c:	6039      	str	r1, [r7, #0]
  40759e:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);
  4075a0:	683a      	ldr	r2, [r7, #0]
  4075a2:	79fb      	ldrb	r3, [r7, #7]
  4075a4:	4619      	mov	r1, r3
  4075a6:	4804      	ldr	r0, [pc, #16]	; (4075b8 <_dma_set_destination_address+0x24>)
  4075a8:	4b04      	ldr	r3, [pc, #16]	; (4075bc <_dma_set_destination_address+0x28>)
  4075aa:	4798      	blx	r3

	return ERR_NONE;
  4075ac:	2300      	movs	r3, #0
}
  4075ae:	4618      	mov	r0, r3
  4075b0:	3708      	adds	r7, #8
  4075b2:	46bd      	mov	sp, r7
  4075b4:	bd80      	pop	{r7, pc}
  4075b6:	bf00      	nop
  4075b8:	40078000 	.word	0x40078000
  4075bc:	004071ed 	.word	0x004071ed

004075c0 <_dma_set_source_address>:

int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
  4075c0:	b580      	push	{r7, lr}
  4075c2:	b082      	sub	sp, #8
  4075c4:	af00      	add	r7, sp, #0
  4075c6:	4603      	mov	r3, r0
  4075c8:	6039      	str	r1, [r7, #0]
  4075ca:	71fb      	strb	r3, [r7, #7]
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);
  4075cc:	683a      	ldr	r2, [r7, #0]
  4075ce:	79fb      	ldrb	r3, [r7, #7]
  4075d0:	4619      	mov	r1, r3
  4075d2:	4804      	ldr	r0, [pc, #16]	; (4075e4 <_dma_set_source_address+0x24>)
  4075d4:	4b04      	ldr	r3, [pc, #16]	; (4075e8 <_dma_set_source_address+0x28>)
  4075d6:	4798      	blx	r3

	return ERR_NONE;
  4075d8:	2300      	movs	r3, #0
}
  4075da:	4618      	mov	r0, r3
  4075dc:	3708      	adds	r7, #8
  4075de:	46bd      	mov	sp, r7
  4075e0:	bd80      	pop	{r7, pc}
  4075e2:	bf00      	nop
  4075e4:	40078000 	.word	0x40078000
  4075e8:	004071c5 	.word	0x004071c5

004075ec <_dma_srcinc_enable>:

int32_t _dma_srcinc_enable(const uint8_t channel, const bool enable)
{
  4075ec:	b580      	push	{r7, lr}
  4075ee:	b082      	sub	sp, #8
  4075f0:	af00      	add	r7, sp, #0
  4075f2:	4603      	mov	r3, r0
  4075f4:	460a      	mov	r2, r1
  4075f6:	71fb      	strb	r3, [r7, #7]
  4075f8:	4613      	mov	r3, r2
  4075fa:	71bb      	strb	r3, [r7, #6]
	if (!enable && (hri_xdmac_read_CC_DWIDTH_bf(XDMAC, channel) != XDMAC_CC_DWIDTH_WORD_Val)) {
  4075fc:	79bb      	ldrb	r3, [r7, #6]
  4075fe:	f083 0301 	eor.w	r3, r3, #1
  407602:	b2db      	uxtb	r3, r3
  407604:	2b00      	cmp	r3, #0
  407606:	d015      	beq.n	407634 <_dma_srcinc_enable+0x48>
  407608:	79fb      	ldrb	r3, [r7, #7]
  40760a:	4619      	mov	r1, r3
  40760c:	480f      	ldr	r0, [pc, #60]	; (40764c <_dma_srcinc_enable+0x60>)
  40760e:	4b10      	ldr	r3, [pc, #64]	; (407650 <_dma_srcinc_enable+0x64>)
  407610:	4798      	blx	r3
  407612:	4603      	mov	r3, r0
  407614:	2b02      	cmp	r3, #2
  407616:	d00d      	beq.n	407634 <_dma_srcinc_enable+0x48>
		 * are incremented by 8-bit or 16-bit.
		 * Workaround: The user can fix the problem by setting the source addressing
		 * mode to use micro block and data striding with micro block stride set to 0 and
		 * data stride set to -1.
		 */
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, XDMAC_CC_SAM_UBS_DS_AM_Val);
  407618:	79fb      	ldrb	r3, [r7, #7]
  40761a:	2203      	movs	r2, #3
  40761c:	4619      	mov	r1, r3
  40761e:	480b      	ldr	r0, [pc, #44]	; (40764c <_dma_srcinc_enable+0x60>)
  407620:	4b0c      	ldr	r3, [pc, #48]	; (407654 <_dma_srcinc_enable+0x68>)
  407622:	4798      	blx	r3
		hri_xdmac_write_CDS_MSP_SDS_MSP_bf(XDMAC, channel, (int16_t)(-1));
  407624:	79fb      	ldrb	r3, [r7, #7]
  407626:	f04f 32ff 	mov.w	r2, #4294967295
  40762a:	4619      	mov	r1, r3
  40762c:	4807      	ldr	r0, [pc, #28]	; (40764c <_dma_srcinc_enable+0x60>)
  40762e:	4b0a      	ldr	r3, [pc, #40]	; (407658 <_dma_srcinc_enable+0x6c>)
  407630:	4798      	blx	r3
  407632:	e005      	b.n	407640 <_dma_srcinc_enable+0x54>
	} else {
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, enable);
  407634:	79ba      	ldrb	r2, [r7, #6]
  407636:	79fb      	ldrb	r3, [r7, #7]
  407638:	4619      	mov	r1, r3
  40763a:	4804      	ldr	r0, [pc, #16]	; (40764c <_dma_srcinc_enable+0x60>)
  40763c:	4b05      	ldr	r3, [pc, #20]	; (407654 <_dma_srcinc_enable+0x68>)
  40763e:	4798      	blx	r3
	}

	return ERR_NONE;
  407640:	2300      	movs	r3, #0
}
  407642:	4618      	mov	r0, r3
  407644:	3708      	adds	r7, #8
  407646:	46bd      	mov	sp, r7
  407648:	bd80      	pop	{r7, pc}
  40764a:	bf00      	nop
  40764c:	40078000 	.word	0x40078000
  407650:	004072c7 	.word	0x004072c7
  407654:	004072f9 	.word	0x004072f9
  407658:	0040736d 	.word	0x0040736d

0040765c <_dma_set_data_amount>:

	return ERR_NONE;
}

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
  40765c:	b580      	push	{r7, lr}
  40765e:	b084      	sub	sp, #16
  407660:	af00      	add	r7, sp, #0
  407662:	4603      	mov	r3, r0
  407664:	6039      	str	r1, [r7, #0]
  407666:	71fb      	strb	r3, [r7, #7]
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
  407668:	79fb      	ldrb	r3, [r7, #7]
  40766a:	2203      	movs	r2, #3
  40766c:	4619      	mov	r1, r3
  40766e:	4809      	ldr	r0, [pc, #36]	; (407694 <_dma_set_data_amount+0x38>)
  407670:	4b09      	ldr	r3, [pc, #36]	; (407698 <_dma_set_data_amount+0x3c>)
  407672:	4798      	blx	r3
  407674:	4603      	mov	r3, r0
  407676:	73fb      	strb	r3, [r7, #15]
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  407678:	7bfb      	ldrb	r3, [r7, #15]
  40767a:	683a      	ldr	r2, [r7, #0]
  40767c:	40da      	lsrs	r2, r3
  40767e:	79fb      	ldrb	r3, [r7, #7]
  407680:	4619      	mov	r1, r3
  407682:	4804      	ldr	r0, [pc, #16]	; (407694 <_dma_set_data_amount+0x38>)
  407684:	4b05      	ldr	r3, [pc, #20]	; (40769c <_dma_set_data_amount+0x40>)
  407686:	4798      	blx	r3

	return ERR_NONE;
  407688:	2300      	movs	r3, #0
}
  40768a:	4618      	mov	r0, r3
  40768c:	3710      	adds	r7, #16
  40768e:	46bd      	mov	sp, r7
  407690:	bd80      	pop	{r7, pc}
  407692:	bf00      	nop
  407694:	40078000 	.word	0x40078000
  407698:	0040728d 	.word	0x0040728d
  40769c:	0040723d 	.word	0x0040723d

004076a0 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
  4076a0:	b580      	push	{r7, lr}
  4076a2:	b082      	sub	sp, #8
  4076a4:	af00      	add	r7, sp, #0
  4076a6:	4603      	mov	r3, r0
  4076a8:	460a      	mov	r2, r1
  4076aa:	71fb      	strb	r3, [r7, #7]
  4076ac:	4613      	mov	r3, r2
  4076ae:	71bb      	strb	r3, [r7, #6]
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  4076b0:	79fb      	ldrb	r3, [r7, #7]
  4076b2:	2201      	movs	r2, #1
  4076b4:	fa02 f303 	lsl.w	r3, r2, r3
  4076b8:	4619      	mov	r1, r3
  4076ba:	4809      	ldr	r0, [pc, #36]	; (4076e0 <_dma_enable_transaction+0x40>)
  4076bc:	4b09      	ldr	r3, [pc, #36]	; (4076e4 <_dma_enable_transaction+0x44>)
  4076be:	4798      	blx	r3

	if (software_trigger) {
  4076c0:	79bb      	ldrb	r3, [r7, #6]
  4076c2:	2b00      	cmp	r3, #0
  4076c4:	d007      	beq.n	4076d6 <_dma_enable_transaction+0x36>
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
  4076c6:	79fb      	ldrb	r3, [r7, #7]
  4076c8:	2201      	movs	r2, #1
  4076ca:	fa02 f303 	lsl.w	r3, r2, r3
  4076ce:	4619      	mov	r1, r3
  4076d0:	4803      	ldr	r0, [pc, #12]	; (4076e0 <_dma_enable_transaction+0x40>)
  4076d2:	4b05      	ldr	r3, [pc, #20]	; (4076e8 <_dma_enable_transaction+0x48>)
  4076d4:	4798      	blx	r3
	}

	return ERR_NONE;
  4076d6:	2300      	movs	r3, #0
}
  4076d8:	4618      	mov	r0, r3
  4076da:	3708      	adds	r7, #8
  4076dc:	46bd      	mov	sp, r7
  4076de:	bd80      	pop	{r7, pc}
  4076e0:	40078000 	.word	0x40078000
  4076e4:	0040746b 	.word	0x0040746b
  4076e8:	0040749f 	.word	0x0040749f

004076ec <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
  4076ec:	b480      	push	{r7}
  4076ee:	b083      	sub	sp, #12
  4076f0:	af00      	add	r7, sp, #0
  4076f2:	6078      	str	r0, [r7, #4]
  4076f4:	460b      	mov	r3, r1
  4076f6:	70fb      	strb	r3, [r7, #3]
	*resource = &_resources[channel];
  4076f8:	78fa      	ldrb	r2, [r7, #3]
  4076fa:	4613      	mov	r3, r2
  4076fc:	005b      	lsls	r3, r3, #1
  4076fe:	4413      	add	r3, r2
  407700:	009b      	lsls	r3, r3, #2
  407702:	4a05      	ldr	r2, [pc, #20]	; (407718 <_dma_get_channel_resource+0x2c>)
  407704:	441a      	add	r2, r3
  407706:	687b      	ldr	r3, [r7, #4]
  407708:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  40770a:	2300      	movs	r3, #0
}
  40770c:	4618      	mov	r0, r3
  40770e:	370c      	adds	r7, #12
  407710:	46bd      	mov	sp, r7
  407712:	f85d 7b04 	ldr.w	r7, [sp], #4
  407716:	4770      	bx	lr
  407718:	2040122c 	.word	0x2040122c

0040771c <_dma_set_irq_state>:

void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
  40771c:	b580      	push	{r7, lr}
  40771e:	b082      	sub	sp, #8
  407720:	af00      	add	r7, sp, #0
  407722:	4603      	mov	r3, r0
  407724:	71fb      	strb	r3, [r7, #7]
  407726:	460b      	mov	r3, r1
  407728:	71bb      	strb	r3, [r7, #6]
  40772a:	4613      	mov	r3, r2
  40772c:	717b      	strb	r3, [r7, #5]
	if (state) {
  40772e:	797b      	ldrb	r3, [r7, #5]
  407730:	2b00      	cmp	r3, #0
  407732:	d01b      	beq.n	40776c <_dma_set_irq_state+0x50>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  407734:	79bb      	ldrb	r3, [r7, #6]
  407736:	2b00      	cmp	r3, #0
  407738:	d106      	bne.n	407748 <_dma_set_irq_state+0x2c>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_BIE);
  40773a:	79fb      	ldrb	r3, [r7, #7]
  40773c:	2201      	movs	r2, #1
  40773e:	4619      	mov	r1, r3
  407740:	481a      	ldr	r0, [pc, #104]	; (4077ac <_dma_set_irq_state+0x90>)
  407742:	4b1b      	ldr	r3, [pc, #108]	; (4077b0 <_dma_set_irq_state+0x94>)
  407744:	4798      	blx	r3
  407746:	e008      	b.n	40775a <_dma_set_irq_state+0x3e>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  407748:	79bb      	ldrb	r3, [r7, #6]
  40774a:	2b01      	cmp	r3, #1
  40774c:	d105      	bne.n	40775a <_dma_set_irq_state+0x3e>
			hri_xdmac_set_CIM_reg(XDMAC, channel, XDMAC_CIE_RBIE | XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
  40774e:	79fb      	ldrb	r3, [r7, #7]
  407750:	2270      	movs	r2, #112	; 0x70
  407752:	4619      	mov	r1, r3
  407754:	4815      	ldr	r0, [pc, #84]	; (4077ac <_dma_set_irq_state+0x90>)
  407756:	4b16      	ldr	r3, [pc, #88]	; (4077b0 <_dma_set_irq_state+0x94>)
  407758:	4798      	blx	r3
		}
		hri_xdmac_set_GIM_reg(XDMAC, (1 << channel));
  40775a:	79fb      	ldrb	r3, [r7, #7]
  40775c:	2201      	movs	r2, #1
  40775e:	fa02 f303 	lsl.w	r3, r2, r3
  407762:	4619      	mov	r1, r3
  407764:	4811      	ldr	r0, [pc, #68]	; (4077ac <_dma_set_irq_state+0x90>)
  407766:	4b13      	ldr	r3, [pc, #76]	; (4077b4 <_dma_set_irq_state+0x98>)
  407768:	4798      	blx	r3
		} else if (type == DMA_TRANSFER_ERROR_CB) {
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
		}
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
	}
}
  40776a:	e01a      	b.n	4077a2 <_dma_set_irq_state+0x86>
		if (type == DMA_TRANSFER_COMPLETE_CB) {
  40776c:	79bb      	ldrb	r3, [r7, #6]
  40776e:	2b00      	cmp	r3, #0
  407770:	d106      	bne.n	407780 <_dma_set_irq_state+0x64>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_BID);
  407772:	79fb      	ldrb	r3, [r7, #7]
  407774:	2201      	movs	r2, #1
  407776:	4619      	mov	r1, r3
  407778:	480c      	ldr	r0, [pc, #48]	; (4077ac <_dma_set_irq_state+0x90>)
  40777a:	4b0f      	ldr	r3, [pc, #60]	; (4077b8 <_dma_set_irq_state+0x9c>)
  40777c:	4798      	blx	r3
  40777e:	e008      	b.n	407792 <_dma_set_irq_state+0x76>
		} else if (type == DMA_TRANSFER_ERROR_CB) {
  407780:	79bb      	ldrb	r3, [r7, #6]
  407782:	2b01      	cmp	r3, #1
  407784:	d105      	bne.n	407792 <_dma_set_irq_state+0x76>
			hri_xdmac_clear_CIM_reg(XDMAC, channel, XDMAC_CID_RBEID | XDMAC_CID_WBEID | XDMAC_CID_ROID);
  407786:	79fb      	ldrb	r3, [r7, #7]
  407788:	2270      	movs	r2, #112	; 0x70
  40778a:	4619      	mov	r1, r3
  40778c:	4807      	ldr	r0, [pc, #28]	; (4077ac <_dma_set_irq_state+0x90>)
  40778e:	4b0a      	ldr	r3, [pc, #40]	; (4077b8 <_dma_set_irq_state+0x9c>)
  407790:	4798      	blx	r3
		hri_xdmac_clear_GIM_reg(XDMAC, (1 << channel));
  407792:	79fb      	ldrb	r3, [r7, #7]
  407794:	2201      	movs	r2, #1
  407796:	fa02 f303 	lsl.w	r3, r2, r3
  40779a:	4619      	mov	r1, r3
  40779c:	4803      	ldr	r0, [pc, #12]	; (4077ac <_dma_set_irq_state+0x90>)
  40779e:	4b07      	ldr	r3, [pc, #28]	; (4077bc <_dma_set_irq_state+0xa0>)
  4077a0:	4798      	blx	r3
}
  4077a2:	bf00      	nop
  4077a4:	3708      	adds	r7, #8
  4077a6:	46bd      	mov	sp, r7
  4077a8:	bd80      	pop	{r7, pc}
  4077aa:	bf00      	nop
  4077ac:	40078000 	.word	0x40078000
  4077b0:	00407151 	.word	0x00407151
  4077b4:	00407433 	.word	0x00407433
  4077b8:	00407179 	.word	0x00407179
  4077bc:	0040744f 	.word	0x0040744f

004077c0 <XDMAC_Handler>:

/**
 * \internal XDMAC interrupt handler
 */
void XDMAC_Handler(void)
{
  4077c0:	b580      	push	{r7, lr}
  4077c2:	b084      	sub	sp, #16
  4077c4:	af00      	add	r7, sp, #0
	uint32_t              status;
	struct _dma_resource *tmp_resource;
	int8_t                channel = -1;
  4077c6:	23ff      	movs	r3, #255	; 0xff
  4077c8:	73fb      	strb	r3, [r7, #15]
	uint32_t              pend;

	pend = hri_xdmac_read_GIS_reg(XDMAC);
  4077ca:	4821      	ldr	r0, [pc, #132]	; (407850 <XDMAC_Handler+0x90>)
  4077cc:	4b21      	ldr	r3, [pc, #132]	; (407854 <XDMAC_Handler+0x94>)
  4077ce:	4798      	blx	r3
  4077d0:	60b8      	str	r0, [r7, #8]

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4077d2:	2300      	movs	r3, #0
  4077d4:	73bb      	strb	r3, [r7, #14]
  4077d6:	e00d      	b.n	4077f4 <XDMAC_Handler+0x34>
		if ((pend >> i) & 1) {
  4077d8:	7bbb      	ldrb	r3, [r7, #14]
  4077da:	68ba      	ldr	r2, [r7, #8]
  4077dc:	fa22 f303 	lsr.w	r3, r2, r3
  4077e0:	f003 0301 	and.w	r3, r3, #1
  4077e4:	2b00      	cmp	r3, #0
  4077e6:	d002      	beq.n	4077ee <XDMAC_Handler+0x2e>
			channel = i;
  4077e8:	7bbb      	ldrb	r3, [r7, #14]
  4077ea:	73fb      	strb	r3, [r7, #15]
			break;
  4077ec:	e005      	b.n	4077fa <XDMAC_Handler+0x3a>
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4077ee:	7bbb      	ldrb	r3, [r7, #14]
  4077f0:	3301      	adds	r3, #1
  4077f2:	73bb      	strb	r3, [r7, #14]
  4077f4:	7bbb      	ldrb	r3, [r7, #14]
  4077f6:	2b17      	cmp	r3, #23
  4077f8:	d9ee      	bls.n	4077d8 <XDMAC_Handler+0x18>
		}
	}

	if (channel < 0) {
  4077fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4077fe:	2b00      	cmp	r3, #0
  407800:	db22      	blt.n	407848 <XDMAC_Handler+0x88>
		return;
	}

	tmp_resource = &_resources[channel];
  407802:	f997 200f 	ldrsb.w	r2, [r7, #15]
  407806:	4613      	mov	r3, r2
  407808:	005b      	lsls	r3, r3, #1
  40780a:	4413      	add	r3, r2
  40780c:	009b      	lsls	r3, r3, #2
  40780e:	4a12      	ldr	r2, [pc, #72]	; (407858 <XDMAC_Handler+0x98>)
  407810:	4413      	add	r3, r2
  407812:	607b      	str	r3, [r7, #4]
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);
  407814:	7bfb      	ldrb	r3, [r7, #15]
  407816:	4619      	mov	r1, r3
  407818:	480d      	ldr	r0, [pc, #52]	; (407850 <XDMAC_Handler+0x90>)
  40781a:	4b10      	ldr	r3, [pc, #64]	; (40785c <XDMAC_Handler+0x9c>)
  40781c:	4798      	blx	r3
  40781e:	6038      	str	r0, [r7, #0]

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  407820:	683b      	ldr	r3, [r7, #0]
  407822:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407826:	2b00      	cmp	r3, #0
  407828:	d004      	beq.n	407834 <XDMAC_Handler+0x74>
		tmp_resource->dma_cb.error(tmp_resource);
  40782a:	687b      	ldr	r3, [r7, #4]
  40782c:	685b      	ldr	r3, [r3, #4]
  40782e:	6878      	ldr	r0, [r7, #4]
  407830:	4798      	blx	r3
  407832:	e00a      	b.n	40784a <XDMAC_Handler+0x8a>
	} else if (status & XDMAC_CIS_BIS) {
  407834:	683b      	ldr	r3, [r7, #0]
  407836:	f003 0301 	and.w	r3, r3, #1
  40783a:	2b00      	cmp	r3, #0
  40783c:	d005      	beq.n	40784a <XDMAC_Handler+0x8a>
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  40783e:	687b      	ldr	r3, [r7, #4]
  407840:	681b      	ldr	r3, [r3, #0]
  407842:	6878      	ldr	r0, [r7, #4]
  407844:	4798      	blx	r3
  407846:	e000      	b.n	40784a <XDMAC_Handler+0x8a>
		return;
  407848:	bf00      	nop
	}
}
  40784a:	3710      	adds	r7, #16
  40784c:	46bd      	mov	sp, r7
  40784e:	bd80      	pop	{r7, pc}
  407850:	40078000 	.word	0x40078000
  407854:	00407487 	.word	0x00407487
  407858:	2040122c 	.word	0x2040122c
  40785c:	004071a1 	.word	0x004071a1

00407860 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
  407860:	b480      	push	{r7}
  407862:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
  407864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407868:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  40786c:	4b0b      	ldr	r3, [pc, #44]	; (40789c <SCB_EnableICache+0x3c>)
  40786e:	2200      	movs	r2, #0
  407870:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  407874:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  407878:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  40787c:	4a07      	ldr	r2, [pc, #28]	; (40789c <SCB_EnableICache+0x3c>)
  40787e:	4b07      	ldr	r3, [pc, #28]	; (40789c <SCB_EnableICache+0x3c>)
  407880:	695b      	ldr	r3, [r3, #20]
  407882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  407886:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  407888:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40788c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  407890:	bf00      	nop
  407892:	46bd      	mov	sp, r7
  407894:	f85d 7b04 	ldr.w	r7, [sp], #4
  407898:	4770      	bx	lr
  40789a:	bf00      	nop
  40789c:	e000ed00 	.word	0xe000ed00

004078a0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
  4078a0:	b480      	push	{r7}
  4078a2:	b085      	sub	sp, #20
  4078a4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  4078a6:	4b1d      	ldr	r3, [pc, #116]	; (40791c <SCB_EnableDCache+0x7c>)
  4078a8:	2200      	movs	r2, #0
  4078aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  4078ae:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  4078b2:	4b1a      	ldr	r3, [pc, #104]	; (40791c <SCB_EnableDCache+0x7c>)
  4078b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4078b8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4078ba:	687b      	ldr	r3, [r7, #4]
  4078bc:	0b5b      	lsrs	r3, r3, #13
  4078be:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4078c2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4078c4:	687b      	ldr	r3, [r7, #4]
  4078c6:	08db      	lsrs	r3, r3, #3
  4078c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4078cc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4078ce:	4913      	ldr	r1, [pc, #76]	; (40791c <SCB_EnableDCache+0x7c>)
  4078d0:	68fb      	ldr	r3, [r7, #12]
  4078d2:	015a      	lsls	r2, r3, #5
  4078d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  4078d8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
  4078da:	68ba      	ldr	r2, [r7, #8]
  4078dc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4078de:	4313      	orrs	r3, r2
  4078e0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4078e4:	68bb      	ldr	r3, [r7, #8]
  4078e6:	1e5a      	subs	r2, r3, #1
  4078e8:	60ba      	str	r2, [r7, #8]
  4078ea:	2b00      	cmp	r3, #0
  4078ec:	d1ef      	bne.n	4078ce <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
  4078ee:	68fb      	ldr	r3, [r7, #12]
  4078f0:	1e5a      	subs	r2, r3, #1
  4078f2:	60fa      	str	r2, [r7, #12]
  4078f4:	2b00      	cmp	r3, #0
  4078f6:	d1e5      	bne.n	4078c4 <SCB_EnableDCache+0x24>
  4078f8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4078fc:	4a07      	ldr	r2, [pc, #28]	; (40791c <SCB_EnableDCache+0x7c>)
  4078fe:	4b07      	ldr	r3, [pc, #28]	; (40791c <SCB_EnableDCache+0x7c>)
  407900:	695b      	ldr	r3, [r3, #20]
  407902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  407906:	6153      	str	r3, [r2, #20]
  407908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40790c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  407910:	bf00      	nop
  407912:	3714      	adds	r7, #20
  407914:	46bd      	mov	sp, r7
  407916:	f85d 7b04 	ldr.w	r7, [sp], #4
  40791a:	4770      	bx	lr
  40791c:	e000ed00 	.word	0xe000ed00

00407920 <hri_pio_set_ODSR_reg>:
{
  407920:	b480      	push	{r7}
  407922:	b083      	sub	sp, #12
  407924:	af00      	add	r7, sp, #0
  407926:	6078      	str	r0, [r7, #4]
  407928:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40792a:	687b      	ldr	r3, [r7, #4]
  40792c:	683a      	ldr	r2, [r7, #0]
  40792e:	631a      	str	r2, [r3, #48]	; 0x30
}
  407930:	bf00      	nop
  407932:	370c      	adds	r7, #12
  407934:	46bd      	mov	sp, r7
  407936:	f85d 7b04 	ldr.w	r7, [sp], #4
  40793a:	4770      	bx	lr

0040793c <hri_pio_clear_ODSR_reg>:
{
  40793c:	b480      	push	{r7}
  40793e:	b083      	sub	sp, #12
  407940:	af00      	add	r7, sp, #0
  407942:	6078      	str	r0, [r7, #4]
  407944:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  407946:	687b      	ldr	r3, [r7, #4]
  407948:	683a      	ldr	r2, [r7, #0]
  40794a:	635a      	str	r2, [r3, #52]	; 0x34
}
  40794c:	bf00      	nop
  40794e:	370c      	adds	r7, #12
  407950:	46bd      	mov	sp, r7
  407952:	f85d 7b04 	ldr.w	r7, [sp], #4
  407956:	4770      	bx	lr

00407958 <port_to_reg>:
{
  407958:	b480      	push	{r7}
  40795a:	b083      	sub	sp, #12
  40795c:	af00      	add	r7, sp, #0
  40795e:	4603      	mov	r3, r0
  407960:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  407962:	79fb      	ldrb	r3, [r7, #7]
  407964:	025b      	lsls	r3, r3, #9
  407966:	461a      	mov	r2, r3
  407968:	4b03      	ldr	r3, [pc, #12]	; (407978 <port_to_reg+0x20>)
  40796a:	4413      	add	r3, r2
}
  40796c:	4618      	mov	r0, r3
  40796e:	370c      	adds	r7, #12
  407970:	46bd      	mov	sp, r7
  407972:	f85d 7b04 	ldr.w	r7, [sp], #4
  407976:	4770      	bx	lr
  407978:	400e0e00 	.word	0x400e0e00

0040797c <_gpio_set_level>:
{
  40797c:	b580      	push	{r7, lr}
  40797e:	b084      	sub	sp, #16
  407980:	af00      	add	r7, sp, #0
  407982:	4603      	mov	r3, r0
  407984:	6039      	str	r1, [r7, #0]
  407986:	71fb      	strb	r3, [r7, #7]
  407988:	4613      	mov	r3, r2
  40798a:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  40798c:	79fb      	ldrb	r3, [r7, #7]
  40798e:	4618      	mov	r0, r3
  407990:	4b09      	ldr	r3, [pc, #36]	; (4079b8 <_gpio_set_level+0x3c>)
  407992:	4798      	blx	r3
  407994:	60f8      	str	r0, [r7, #12]
	if (level) {
  407996:	79bb      	ldrb	r3, [r7, #6]
  407998:	2b00      	cmp	r3, #0
  40799a:	d004      	beq.n	4079a6 <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  40799c:	6839      	ldr	r1, [r7, #0]
  40799e:	68f8      	ldr	r0, [r7, #12]
  4079a0:	4b06      	ldr	r3, [pc, #24]	; (4079bc <_gpio_set_level+0x40>)
  4079a2:	4798      	blx	r3
}
  4079a4:	e003      	b.n	4079ae <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  4079a6:	6839      	ldr	r1, [r7, #0]
  4079a8:	68f8      	ldr	r0, [r7, #12]
  4079aa:	4b05      	ldr	r3, [pc, #20]	; (4079c0 <_gpio_set_level+0x44>)
  4079ac:	4798      	blx	r3
}
  4079ae:	bf00      	nop
  4079b0:	3710      	adds	r7, #16
  4079b2:	46bd      	mov	sp, r7
  4079b4:	bd80      	pop	{r7, pc}
  4079b6:	bf00      	nop
  4079b8:	00407959 	.word	0x00407959
  4079bc:	00407921 	.word	0x00407921
  4079c0:	0040793d 	.word	0x0040793d

004079c4 <gpio_set_pin_level>:
{
  4079c4:	b580      	push	{r7, lr}
  4079c6:	b082      	sub	sp, #8
  4079c8:	af00      	add	r7, sp, #0
  4079ca:	4603      	mov	r3, r0
  4079cc:	460a      	mov	r2, r1
  4079ce:	71fb      	strb	r3, [r7, #7]
  4079d0:	4613      	mov	r3, r2
  4079d2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4079d4:	79fb      	ldrb	r3, [r7, #7]
  4079d6:	095b      	lsrs	r3, r3, #5
  4079d8:	b2d8      	uxtb	r0, r3
  4079da:	79fb      	ldrb	r3, [r7, #7]
  4079dc:	f003 031f 	and.w	r3, r3, #31
  4079e0:	2201      	movs	r2, #1
  4079e2:	fa02 f303 	lsl.w	r3, r2, r3
  4079e6:	79ba      	ldrb	r2, [r7, #6]
  4079e8:	4619      	mov	r1, r3
  4079ea:	4b03      	ldr	r3, [pc, #12]	; (4079f8 <gpio_set_pin_level+0x34>)
  4079ec:	4798      	blx	r3
}
  4079ee:	bf00      	nop
  4079f0:	3708      	adds	r7, #8
  4079f2:	46bd      	mov	sp, r7
  4079f4:	bd80      	pop	{r7, pc}
  4079f6:	bf00      	nop
  4079f8:	0040797d 	.word	0x0040797d

004079fc <main>:
#include <atmel_start.h>
#include "Glue.h"
#include "AT86_Impl.h"

int main(void)
{
  4079fc:	b580      	push	{r7, lr}
  4079fe:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  407a00:	4b18      	ldr	r3, [pc, #96]	; (407a64 <main+0x68>)
  407a02:	4798      	blx	r3
	SCB_EnableICache();
  407a04:	4b18      	ldr	r3, [pc, #96]	; (407a68 <main+0x6c>)
  407a06:	4798      	blx	r3
	SCB_EnableDCache();
  407a08:	4b18      	ldr	r3, [pc, #96]	; (407a6c <main+0x70>)
  407a0a:	4798      	blx	r3
	
	glue_set_peripherals_inited();
  407a0c:	4b18      	ldr	r3, [pc, #96]	; (407a70 <main+0x74>)
  407a0e:	4798      	blx	r3
	
	glue_enforce_driver_init();
  407a10:	4b18      	ldr	r3, [pc, #96]	; (407a74 <main+0x78>)
  407a12:	4798      	blx	r3
	
    gpio_set_pin_level(AT86_1_RST, false);	
  407a14:	2100      	movs	r1, #0
  407a16:	2021      	movs	r0, #33	; 0x21
  407a18:	4b17      	ldr	r3, [pc, #92]	; (407a78 <main+0x7c>)
  407a1a:	4798      	blx	r3
	delay_us(100000);
  407a1c:	f248 60a0 	movw	r0, #34464	; 0x86a0
  407a20:	4b16      	ldr	r3, [pc, #88]	; (407a7c <main+0x80>)
  407a22:	4798      	blx	r3
	gpio_set_pin_level(AT86_1_RST, true);
  407a24:	2101      	movs	r1, #1
  407a26:	2021      	movs	r0, #33	; 0x21
  407a28:	4b13      	ldr	r3, [pc, #76]	; (407a78 <main+0x7c>)
  407a2a:	4798      	blx	r3
	
	gpio_set_pin_level(AT86_2_RST, false);
  407a2c:	2100      	movs	r1, #0
  407a2e:	2078      	movs	r0, #120	; 0x78
  407a30:	4b11      	ldr	r3, [pc, #68]	; (407a78 <main+0x7c>)
  407a32:	4798      	blx	r3
	delay_us(100000);
  407a34:	f248 60a0 	movw	r0, #34464	; 0x86a0
  407a38:	4b10      	ldr	r3, [pc, #64]	; (407a7c <main+0x80>)
  407a3a:	4798      	blx	r3
	gpio_set_pin_level(AT86_2_RST, true);
  407a3c:	2101      	movs	r1, #1
  407a3e:	2078      	movs	r0, #120	; 0x78
  407a40:	4b0d      	ldr	r3, [pc, #52]	; (407a78 <main+0x7c>)
  407a42:	4798      	blx	r3
	
	delay_us(500000);
  407a44:	f24a 1020 	movw	r0, #41248	; 0xa120
  407a48:	4b0c      	ldr	r3, [pc, #48]	; (407a7c <main+0x80>)
  407a4a:	4798      	blx	r3
	
	glue_init();	
  407a4c:	4b0c      	ldr	r3, [pc, #48]	; (407a80 <main+0x84>)
  407a4e:	4798      	blx	r3
	
	/* Replace with your application code */
	while (1)
	{
		AT86_Tick(AT86_INSTANCE0);
  407a50:	2000      	movs	r0, #0
  407a52:	4b0c      	ldr	r3, [pc, #48]	; (407a84 <main+0x88>)
  407a54:	4798      	blx	r3
		AT86_Tick(AT86_INSTANCE1);
  407a56:	2001      	movs	r0, #1
  407a58:	4b0a      	ldr	r3, [pc, #40]	; (407a84 <main+0x88>)
  407a5a:	4798      	blx	r3

		//gpio_set_pin_pull_mode(PB0, GPIO_PULL_UP);
		delay_ms(10);
  407a5c:	200a      	movs	r0, #10
  407a5e:	4b0a      	ldr	r3, [pc, #40]	; (407a88 <main+0x8c>)
  407a60:	4798      	blx	r3
		AT86_Tick(AT86_INSTANCE0);
  407a62:	e7f5      	b.n	407a50 <main+0x54>
  407a64:	00400b15 	.word	0x00400b15
  407a68:	00407861 	.word	0x00407861
  407a6c:	004078a1 	.word	0x004078a1
  407a70:	00401995 	.word	0x00401995
  407a74:	004019ad 	.word	0x004019ad
  407a78:	004079c5 	.word	0x004079c5
  407a7c:	00401de9 	.word	0x00401de9
  407a80:	00401875 	.word	0x00401875
  407a84:	004002e5 	.word	0x004002e5
  407a88:	00401e1d 	.word	0x00401e1d

00407a8c <__libc_init_array>:
  407a8c:	b570      	push	{r4, r5, r6, lr}
  407a8e:	4e0d      	ldr	r6, [pc, #52]	; (407ac4 <__libc_init_array+0x38>)
  407a90:	4c0d      	ldr	r4, [pc, #52]	; (407ac8 <__libc_init_array+0x3c>)
  407a92:	1ba4      	subs	r4, r4, r6
  407a94:	10a4      	asrs	r4, r4, #2
  407a96:	2500      	movs	r5, #0
  407a98:	42a5      	cmp	r5, r4
  407a9a:	d109      	bne.n	407ab0 <__libc_init_array+0x24>
  407a9c:	4e0b      	ldr	r6, [pc, #44]	; (407acc <__libc_init_array+0x40>)
  407a9e:	4c0c      	ldr	r4, [pc, #48]	; (407ad0 <__libc_init_array+0x44>)
  407aa0:	f000 f998 	bl	407dd4 <_init>
  407aa4:	1ba4      	subs	r4, r4, r6
  407aa6:	10a4      	asrs	r4, r4, #2
  407aa8:	2500      	movs	r5, #0
  407aaa:	42a5      	cmp	r5, r4
  407aac:	d105      	bne.n	407aba <__libc_init_array+0x2e>
  407aae:	bd70      	pop	{r4, r5, r6, pc}
  407ab0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  407ab4:	4798      	blx	r3
  407ab6:	3501      	adds	r5, #1
  407ab8:	e7ee      	b.n	407a98 <__libc_init_array+0xc>
  407aba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  407abe:	4798      	blx	r3
  407ac0:	3501      	adds	r5, #1
  407ac2:	e7f2      	b.n	407aaa <__libc_init_array+0x1e>
  407ac4:	00407de0 	.word	0x00407de0
  407ac8:	00407de0 	.word	0x00407de0
  407acc:	00407de0 	.word	0x00407de0
  407ad0:	00407de4 	.word	0x00407de4

00407ad4 <memcpy>:
  407ad4:	b510      	push	{r4, lr}
  407ad6:	1e43      	subs	r3, r0, #1
  407ad8:	440a      	add	r2, r1
  407ada:	4291      	cmp	r1, r2
  407adc:	d100      	bne.n	407ae0 <memcpy+0xc>
  407ade:	bd10      	pop	{r4, pc}
  407ae0:	f811 4b01 	ldrb.w	r4, [r1], #1
  407ae4:	f803 4f01 	strb.w	r4, [r3, #1]!
  407ae8:	e7f7      	b.n	407ada <memcpy+0x6>

00407aea <memset>:
  407aea:	4402      	add	r2, r0
  407aec:	4603      	mov	r3, r0
  407aee:	4293      	cmp	r3, r2
  407af0:	d100      	bne.n	407af4 <memset+0xa>
  407af2:	4770      	bx	lr
  407af4:	f803 1b01 	strb.w	r1, [r3], #1
  407af8:	e7f9      	b.n	407aee <memset+0x4>
  407afa:	0000      	movs	r0, r0
  407afc:	682f2e2e 	.word	0x682f2e2e
  407b00:	702f6c70 	.word	0x702f6c70
  407b04:	682f6f69 	.word	0x682f6f69
  407b08:	675f6c70 	.word	0x675f6c70
  407b0c:	5f6f6970 	.word	0x5f6f6970
  407b10:	65736162 	.word	0x65736162
  407b14:	0000682e 	.word	0x0000682e
  407b18:	682f2e2e 	.word	0x682f2e2e
  407b1c:	732f6c61 	.word	0x732f6c61
  407b20:	682f6372 	.word	0x682f6372
  407b24:	645f6c61 	.word	0x645f6c61
  407b28:	735f6361 	.word	0x735f6361
  407b2c:	2e636e79 	.word	0x2e636e79
  407b30:	00000063 	.word	0x00000063
  407b34:	682f2e2e 	.word	0x682f2e2e
  407b38:	732f6c61 	.word	0x732f6c61
  407b3c:	682f6372 	.word	0x682f6372
  407b40:	695f6c61 	.word	0x695f6c61
  407b44:	6d5f6332 	.word	0x6d5f6332
  407b48:	6e79735f 	.word	0x6e79735f
  407b4c:	00632e63 	.word	0x00632e63
  407b50:	682f2e2e 	.word	0x682f2e2e
  407b54:	732f6c61 	.word	0x732f6c61
  407b58:	682f6372 	.word	0x682f6372
  407b5c:	735f6c61 	.word	0x735f6c61
  407b60:	6d5f6970 	.word	0x6d5f6970
  407b64:	616d645f 	.word	0x616d645f
  407b68:	0000632e 	.word	0x0000632e
  407b6c:	682f2e2e 	.word	0x682f2e2e
  407b70:	732f6c61 	.word	0x732f6c61
  407b74:	682f6372 	.word	0x682f6372
  407b78:	755f6c61 	.word	0x755f6c61
  407b7c:	74726173 	.word	0x74726173
  407b80:	7973615f 	.word	0x7973615f
  407b84:	632e636e 	.word	0x632e636e
  407b88:	00000000 	.word	0x00000000
  407b8c:	682f2e2e 	.word	0x682f2e2e
  407b90:	732f6c61 	.word	0x732f6c61
  407b94:	682f6372 	.word	0x682f6372
  407b98:	755f6c61 	.word	0x755f6c61
  407b9c:	74726173 	.word	0x74726173
  407ba0:	6e79735f 	.word	0x6e79735f
  407ba4:	00632e63 	.word	0x00632e63
  407ba8:	682f2e2e 	.word	0x682f2e2e
  407bac:	752f6c61 	.word	0x752f6c61
  407bb0:	736c6974 	.word	0x736c6974
  407bb4:	6372732f 	.word	0x6372732f
  407bb8:	6974752f 	.word	0x6974752f
  407bbc:	725f736c 	.word	0x725f736c
  407bc0:	62676e69 	.word	0x62676e69
  407bc4:	65666675 	.word	0x65666675
  407bc8:	00632e72 	.word	0x00632e72
  407bcc:	682f2e2e 	.word	0x682f2e2e
  407bd0:	642f6c70 	.word	0x642f6c70
  407bd4:	682f6361 	.word	0x682f6361
  407bd8:	645f6c70 	.word	0x645f6c70
  407bdc:	632e6361 	.word	0x632e6361
  407be0:	00000000 	.word	0x00000000

00407be4 <_pio_irq_n>:
  407be4:	100c0b0a 00000011                       ........

00407bec <_ext_irq>:
  407bec:	00000001 00000001 00000001 00000001     ................
  407bfc:	00000000 00000001 00000000 00000003     ................
  407c0c:	00800000 00800000 00800000 00000000     ................
  407c1c:	00800000 00000000 682f2e2e 702f6c70     ........../hpl/p
  407c2c:	682f6f69 705f6c70 655f6f69 632e7478     io/hpl_pio_ext.c
  407c3c:	00000000                                ....

00407c40 <spi_regs>:
  407c40:	00000000 80000000 00000001 04960c02     ................
  407c50:	0000ffff 00000001 80000000 00000001     ................
  407c60:	04960c82 0000ffff 682f2e2e 732f6c70     ........../hpl/s
  407c70:	682f6970 735f6c70 632e6970 00000000     pi/hpl_spi.c....

00407c80 <_i2cm_sync_cfgs>:
  407c80:	40018000 00000020 00000000 00000000     ...@ ...........
  407c90:	0002baba 000249f0 4001c000 00000020     .....I.....@ ...
	...
  407ca8:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  407cb8:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  407cc8:	00000000 682f2e2e 752f6c70 2f747261     ....../hpl/uart/
  407cd8:	5f6c7068 74726175 0000632e 00001000     hpl_uart.c......
  407ce8:	00000c00 00000000 00000000 00000201     ................
  407cf8:	682f2e2e 752f6c70 73686273 6c70682f     ../hpl/usbhs/hpl
  407d08:	6273755f 632e7368 00000000              _usbhs.c....

00407d14 <_cfgs>:
  407d14:	030d4011 ffff0000 03072001 0000ffff     .@....... ......
  407d24:	010d4011 ffff0000 02072001 0000ffff     .@....... ......
  407d34:	00000040 00000000 00000040 00000000     @.......@.......
  407d44:	00000040 00000000 00000040 00000000     @.......@.......
  407d54:	00000040 00000000 00000040 00000000     @.......@.......
  407d64:	00000040 00000000 00000040 00000000     @.......@.......
  407d74:	00000040 00000000 00000040 00000000     @.......@.......
  407d84:	00000040 00000000 00000040 00000000     @.......@.......
  407d94:	00000040 00000000 00000040 00000000     @.......@.......
  407da4:	00000040 00000000 00000040 00000000     @.......@.......
  407db4:	00000040 00000000 00000040 00000000     @.......@.......
  407dc4:	00000040 00000000 00000040 00000000     @.......@.......

00407dd4 <_init>:
  407dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407dd6:	bf00      	nop
  407dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dda:	bc08      	pop	{r3}
  407ddc:	469e      	mov	lr, r3
  407dde:	4770      	bx	lr

00407de0 <__init_array_start>:
  407de0:	00400179 	.word	0x00400179

00407de4 <_fini>:
  407de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407de6:	bf00      	nop
  407de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407dea:	bc08      	pop	{r3}
  407dec:	469e      	mov	lr, r3
  407dee:	4770      	bx	lr

00407df0 <__fini_array_start>:
  407df0:	00400155 	.word	0x00400155
