
BBRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054c8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20400000  004054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001cc  20400020  004054e8  00020020  2**2
                  ALLOC
  3 .heap         00000204  204001ec  004056b4  00020020  2**0
                  ALLOC
  4 .stack        00000400  204003f0  004058b8  00020020  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014668  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002853  00000000  00000000  0003470f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000b8e9  00000000  00000000  00036f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001448  00000000  00000000  0004284b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001300  00000000  00000000  00043c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00033c7a  00000000  00000000  00044f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013c4d  00000000  00000000  00078c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000f6012  00000000  00000000  0008c85a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005594  00000000  00000000  0018286c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 07 40 20 bd 01 40 00 41 02 40 00 41 02 40 00     ..@ ..@.A.@.A.@.
  400010:	41 02 40 00 41 02 40 00 41 02 40 00 00 00 00 00     A.@.A.@.A.@.....
	...
  40002c:	41 02 40 00 41 02 40 00 00 00 00 00 41 02 40 00     A.@.A.@.....A.@.
  40003c:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  40004c:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  40005c:	41 02 40 00 41 02 40 00 00 00 00 00 41 02 40 00     A.@.A.@.....A.@.
  40006c:	6d 20 40 00 41 02 40 00 41 02 40 00 41 02 40 00     m @.A.@.A.@.A.@.
  40007c:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  40008c:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  40009c:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  4000ac:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  4000bc:	41 02 40 00 41 02 40 00 41 02 40 00 35 4b 40 00     A.@.A.@.A.@.5K@.
	...
  4000e0:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  4000f0:	41 02 40 00 41 02 40 00 ad 37 40 00 41 02 40 00     A.@.A.@..7@.A.@.
  400100:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  400110:	41 02 40 00 00 00 00 00 00 00 00 00 00 00 00 00     A.@.............
  400120:	41 02 40 00 41 02 40 00 41 02 40 00 41 02 40 00     A.@.A.@.A.@.A.@.
  400130:	41 02 40 00 00 00 00 00 41 02 40 00 41 02 40 00     A.@.....A.@.A.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400020 	.word	0x20400020
  40015c:	00000000 	.word	0x00000000
  400160:	004054c8 	.word	0x004054c8

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004054c8 	.word	0x004054c8
  4001a0:	20400024 	.word	0x20400024
  4001a4:	004054c8 	.word	0x004054c8
  4001a8:	00000000 	.word	0x00000000

004001ac <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
  4001ac:	b580      	push	{r7, lr}
  4001ae:	af00      	add	r7, sp, #0
	system_init();
  4001b0:	4b01      	ldr	r3, [pc, #4]	; (4001b8 <atmel_start_init+0xc>)
  4001b2:	4798      	blx	r3
}
  4001b4:	bf00      	nop
  4001b6:	bd80      	pop	{r7, pc}
  4001b8:	00400afd 	.word	0x00400afd

004001bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4001bc:	b580      	push	{r7, lr}
  4001be:	b082      	sub	sp, #8
  4001c0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4001c2:	4b16      	ldr	r3, [pc, #88]	; (40021c <Reset_Handler+0x60>)
  4001c4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  4001c6:	4b16      	ldr	r3, [pc, #88]	; (400220 <Reset_Handler+0x64>)
  4001c8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  4001ca:	687a      	ldr	r2, [r7, #4]
  4001cc:	683b      	ldr	r3, [r7, #0]
  4001ce:	429a      	cmp	r2, r3
  4001d0:	d00c      	beq.n	4001ec <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4001d2:	e007      	b.n	4001e4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4001d4:	683b      	ldr	r3, [r7, #0]
  4001d6:	1d1a      	adds	r2, r3, #4
  4001d8:	603a      	str	r2, [r7, #0]
  4001da:	687a      	ldr	r2, [r7, #4]
  4001dc:	1d11      	adds	r1, r2, #4
  4001de:	6079      	str	r1, [r7, #4]
  4001e0:	6812      	ldr	r2, [r2, #0]
  4001e2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4001e4:	683b      	ldr	r3, [r7, #0]
  4001e6:	4a0f      	ldr	r2, [pc, #60]	; (400224 <Reset_Handler+0x68>)
  4001e8:	4293      	cmp	r3, r2
  4001ea:	d3f3      	bcc.n	4001d4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x6c>)
  4001ee:	603b      	str	r3, [r7, #0]
  4001f0:	e004      	b.n	4001fc <Reset_Handler+0x40>
                *pDest++ = 0;
  4001f2:	683b      	ldr	r3, [r7, #0]
  4001f4:	1d1a      	adds	r2, r3, #4
  4001f6:	603a      	str	r2, [r7, #0]
  4001f8:	2200      	movs	r2, #0
  4001fa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4001fc:	683b      	ldr	r3, [r7, #0]
  4001fe:	4a0b      	ldr	r2, [pc, #44]	; (40022c <Reset_Handler+0x70>)
  400200:	4293      	cmp	r3, r2
  400202:	d3f6      	bcc.n	4001f2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  400204:	4b0a      	ldr	r3, [pc, #40]	; (400230 <Reset_Handler+0x74>)
  400206:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400208:	4a0a      	ldr	r2, [pc, #40]	; (400234 <Reset_Handler+0x78>)
  40020a:	687b      	ldr	r3, [r7, #4]
  40020c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400210:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  400212:	4b09      	ldr	r3, [pc, #36]	; (400238 <Reset_Handler+0x7c>)
  400214:	4798      	blx	r3

        /* Branch to main function */
        main();
  400216:	4b09      	ldr	r3, [pc, #36]	; (40023c <Reset_Handler+0x80>)
  400218:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40021a:	e7fe      	b.n	40021a <Reset_Handler+0x5e>
  40021c:	004054c8 	.word	0x004054c8
  400220:	20400000 	.word	0x20400000
  400224:	20400020 	.word	0x20400020
  400228:	20400020 	.word	0x20400020
  40022c:	204001ec 	.word	0x204001ec
  400230:	00400000 	.word	0x00400000
  400234:	e000ed00 	.word	0xe000ed00
  400238:	00405271 	.word	0x00405271
  40023c:	00405245 	.word	0x00405245

00400240 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400240:	b480      	push	{r7}
  400242:	af00      	add	r7, sp, #0
        while (1) {
  400244:	e7fe      	b.n	400244 <Dummy_Handler+0x4>

00400246 <hri_matrix_set_CCFG_SYSIO_reg>:
	((Matrix *)hw)->CCFG_SYSIO ^= CCFG_SYSIO_SYSIO12;
	MATRIX_CRITICAL_SECTION_LEAVE();
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
  400246:	b480      	push	{r7}
  400248:	b083      	sub	sp, #12
  40024a:	af00      	add	r7, sp, #0
  40024c:	6078      	str	r0, [r7, #4]
  40024e:	6039      	str	r1, [r7, #0]
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400256:	683b      	ldr	r3, [r7, #0]
  400258:	431a      	orrs	r2, r3
  40025a:	687b      	ldr	r3, [r7, #4]
  40025c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	MATRIX_CRITICAL_SECTION_LEAVE();
}
  400260:	bf00      	nop
  400262:	370c      	adds	r7, #12
  400264:	46bd      	mov	sp, r7
  400266:	f85d 7b04 	ldr.w	r7, [sp], #4
  40026a:	4770      	bx	lr

0040026c <hri_pio_set_PSR_reg>:
{
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  40026c:	b480      	push	{r7}
  40026e:	b083      	sub	sp, #12
  400270:	af00      	add	r7, sp, #0
  400272:	6078      	str	r0, [r7, #4]
  400274:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  400276:	687b      	ldr	r3, [r7, #4]
  400278:	683a      	ldr	r2, [r7, #0]
  40027a:	601a      	str	r2, [r3, #0]
}
  40027c:	bf00      	nop
  40027e:	370c      	adds	r7, #12
  400280:	46bd      	mov	sp, r7
  400282:	f85d 7b04 	ldr.w	r7, [sp], #4
  400286:	4770      	bx	lr

00400288 <hri_pio_clear_PSR_reg>:
	((Pio *)hw)->PIO_PER = data;
	((Pio *)hw)->PIO_PDR = ~data;
}

static inline void hri_pio_clear_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400288:	b480      	push	{r7}
  40028a:	b083      	sub	sp, #12
  40028c:	af00      	add	r7, sp, #0
  40028e:	6078      	str	r0, [r7, #4]
  400290:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  400292:	687b      	ldr	r3, [r7, #4]
  400294:	683a      	ldr	r2, [r7, #0]
  400296:	605a      	str	r2, [r3, #4]
}
  400298:	bf00      	nop
  40029a:	370c      	adds	r7, #12
  40029c:	46bd      	mov	sp, r7
  40029e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002a2:	4770      	bx	lr

004002a4 <hri_pio_set_OSR_reg>:
{
	((Pio *)hw)->PIO_ODR = PIO_OSR_P31;
}

static inline void hri_pio_set_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  4002a4:	b480      	push	{r7}
  4002a6:	b083      	sub	sp, #12
  4002a8:	af00      	add	r7, sp, #0
  4002aa:	6078      	str	r0, [r7, #4]
  4002ac:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  4002ae:	687b      	ldr	r3, [r7, #4]
  4002b0:	683a      	ldr	r2, [r7, #0]
  4002b2:	611a      	str	r2, [r3, #16]
}
  4002b4:	bf00      	nop
  4002b6:	370c      	adds	r7, #12
  4002b8:	46bd      	mov	sp, r7
  4002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002be:	4770      	bx	lr

004002c0 <hri_pio_clear_OSR_reg>:
	((Pio *)hw)->PIO_OER = data;
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  4002c0:	b480      	push	{r7}
  4002c2:	b083      	sub	sp, #12
  4002c4:	af00      	add	r7, sp, #0
  4002c6:	6078      	str	r0, [r7, #4]
  4002c8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	683a      	ldr	r2, [r7, #0]
  4002ce:	615a      	str	r2, [r3, #20]
}
  4002d0:	bf00      	nop
  4002d2:	370c      	adds	r7, #12
  4002d4:	46bd      	mov	sp, r7
  4002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002da:	4770      	bx	lr

004002dc <hri_pio_set_ODSR_reg>:
{
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  4002dc:	b480      	push	{r7}
  4002de:	b083      	sub	sp, #12
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	6078      	str	r0, [r7, #4]
  4002e4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  4002e6:	687b      	ldr	r3, [r7, #4]
  4002e8:	683a      	ldr	r2, [r7, #0]
  4002ea:	631a      	str	r2, [r3, #48]	; 0x30
}
  4002ec:	bf00      	nop
  4002ee:	370c      	adds	r7, #12
  4002f0:	46bd      	mov	sp, r7
  4002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002f6:	4770      	bx	lr

004002f8 <hri_pio_clear_ODSR_reg>:
	((Pio *)hw)->PIO_SODR = data;
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  4002f8:	b480      	push	{r7}
  4002fa:	b083      	sub	sp, #12
  4002fc:	af00      	add	r7, sp, #0
  4002fe:	6078      	str	r0, [r7, #4]
  400300:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  400302:	687b      	ldr	r3, [r7, #4]
  400304:	683a      	ldr	r2, [r7, #0]
  400306:	635a      	str	r2, [r3, #52]	; 0x34
}
  400308:	bf00      	nop
  40030a:	370c      	adds	r7, #12
  40030c:	46bd      	mov	sp, r7
  40030e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400312:	4770      	bx	lr

00400314 <hri_pio_set_PUSR_reg>:
{
	((Pio *)hw)->PIO_PUDR = PIO_PUSR_P31;
}

static inline void hri_pio_set_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400314:	b480      	push	{r7}
  400316:	b083      	sub	sp, #12
  400318:	af00      	add	r7, sp, #0
  40031a:	6078      	str	r0, [r7, #4]
  40031c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUER = mask;
  40031e:	687b      	ldr	r3, [r7, #4]
  400320:	683a      	ldr	r2, [r7, #0]
  400322:	665a      	str	r2, [r3, #100]	; 0x64
}
  400324:	bf00      	nop
  400326:	370c      	adds	r7, #12
  400328:	46bd      	mov	sp, r7
  40032a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40032e:	4770      	bx	lr

00400330 <hri_pio_clear_PUSR_reg>:
	((Pio *)hw)->PIO_PUER = data;
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
  400330:	b480      	push	{r7}
  400332:	b083      	sub	sp, #12
  400334:	af00      	add	r7, sp, #0
  400336:	6078      	str	r0, [r7, #4]
  400338:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUDR = mask;
  40033a:	687b      	ldr	r3, [r7, #4]
  40033c:	683a      	ldr	r2, [r7, #0]
  40033e:	661a      	str	r2, [r3, #96]	; 0x60
}
  400340:	bf00      	nop
  400342:	370c      	adds	r7, #12
  400344:	46bd      	mov	sp, r7
  400346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40034a:	4770      	bx	lr

0040034c <hri_pio_set_PPDSR_reg>:
{
	((Pio *)hw)->PIO_PPDDR = PIO_PPDSR_P31;
}

static inline void hri_pio_set_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  40034c:	b480      	push	{r7}
  40034e:	b083      	sub	sp, #12
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
  400354:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDER = mask;
  400356:	687b      	ldr	r3, [r7, #4]
  400358:	683a      	ldr	r2, [r7, #0]
  40035a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
  40035e:	bf00      	nop
  400360:	370c      	adds	r7, #12
  400362:	46bd      	mov	sp, r7
  400364:	f85d 7b04 	ldr.w	r7, [sp], #4
  400368:	4770      	bx	lr

0040036a <hri_pio_clear_PPDSR_reg>:
	((Pio *)hw)->PIO_PPDER = data;
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
  40036a:	b480      	push	{r7}
  40036c:	b083      	sub	sp, #12
  40036e:	af00      	add	r7, sp, #0
  400370:	6078      	str	r0, [r7, #4]
  400372:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDDR = mask;
  400374:	687b      	ldr	r3, [r7, #4]
  400376:	683a      	ldr	r2, [r7, #0]
  400378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  40037c:	bf00      	nop
  40037e:	370c      	adds	r7, #12
  400380:	46bd      	mov	sp, r7
  400382:	f85d 7b04 	ldr.w	r7, [sp], #4
  400386:	4770      	bx	lr

00400388 <hri_pio_set_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] ^= PIO_ABCDSR_P31;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  400388:	b480      	push	{r7}
  40038a:	b085      	sub	sp, #20
  40038c:	af00      	add	r7, sp, #0
  40038e:	60f8      	str	r0, [r7, #12]
  400390:	460b      	mov	r3, r1
  400392:	607a      	str	r2, [r7, #4]
  400394:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400396:	7afa      	ldrb	r2, [r7, #11]
  400398:	7af9      	ldrb	r1, [r7, #11]
  40039a:	68fb      	ldr	r3, [r7, #12]
  40039c:	311c      	adds	r1, #28
  40039e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  4003a2:	687b      	ldr	r3, [r7, #4]
  4003a4:	4319      	orrs	r1, r3
  4003a6:	68fb      	ldr	r3, [r7, #12]
  4003a8:	321c      	adds	r2, #28
  4003aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  4003ae:	bf00      	nop
  4003b0:	3714      	adds	r7, #20
  4003b2:	46bd      	mov	sp, r7
  4003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003b8:	4770      	bx	lr

004003ba <hri_pio_clear_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] = data;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  4003ba:	b480      	push	{r7}
  4003bc:	b085      	sub	sp, #20
  4003be:	af00      	add	r7, sp, #0
  4003c0:	60f8      	str	r0, [r7, #12]
  4003c2:	460b      	mov	r3, r1
  4003c4:	607a      	str	r2, [r7, #4]
  4003c6:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003c8:	7afa      	ldrb	r2, [r7, #11]
  4003ca:	7af9      	ldrb	r1, [r7, #11]
  4003cc:	68fb      	ldr	r3, [r7, #12]
  4003ce:	311c      	adds	r1, #28
  4003d0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  4003d4:	687b      	ldr	r3, [r7, #4]
  4003d6:	43db      	mvns	r3, r3
  4003d8:	4019      	ands	r1, r3
  4003da:	68fb      	ldr	r3, [r7, #12]
  4003dc:	321c      	adds	r2, #28
  4003de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  4003e2:	bf00      	nop
  4003e4:	3714      	adds	r7, #20
  4003e6:	46bd      	mov	sp, r7
  4003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ec:	4770      	bx	lr

004003ee <hri_pmc_set_PCSR0_reg>:
{
	((Pmc *)hw)->PMC_PCDR0 = PMC_PCSR0_PID31;
}

static inline void hri_pmc_set_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  4003ee:	b480      	push	{r7}
  4003f0:	b083      	sub	sp, #12
  4003f2:	af00      	add	r7, sp, #0
  4003f4:	6078      	str	r0, [r7, #4]
  4003f6:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003f8:	687b      	ldr	r3, [r7, #4]
  4003fa:	683a      	ldr	r2, [r7, #0]
  4003fc:	611a      	str	r2, [r3, #16]
}
  4003fe:	bf00      	nop
  400400:	370c      	adds	r7, #12
  400402:	46bd      	mov	sp, r7
  400404:	f85d 7b04 	ldr.w	r7, [sp], #4
  400408:	4770      	bx	lr

0040040a <hri_pmc_get_PCSR0_reg>:

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  40040a:	b480      	push	{r7}
  40040c:	b085      	sub	sp, #20
  40040e:	af00      	add	r7, sp, #0
  400410:	6078      	str	r0, [r7, #4]
  400412:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400414:	687b      	ldr	r3, [r7, #4]
  400416:	699b      	ldr	r3, [r3, #24]
  400418:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  40041a:	68fa      	ldr	r2, [r7, #12]
  40041c:	683b      	ldr	r3, [r7, #0]
  40041e:	4013      	ands	r3, r2
  400420:	60fb      	str	r3, [r7, #12]
	return tmp;
  400422:	68fb      	ldr	r3, [r7, #12]
}
  400424:	4618      	mov	r0, r3
  400426:	3714      	adds	r7, #20
  400428:	46bd      	mov	sp, r7
  40042a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40042e:	4770      	bx	lr

00400430 <hri_pmc_set_PCSR1_reg>:
{
	((Pmc *)hw)->PMC_PCDR1 = PMC_PCSR1_PID60;
}

static inline void hri_pmc_set_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  400430:	b480      	push	{r7}
  400432:	b083      	sub	sp, #12
  400434:	af00      	add	r7, sp, #0
  400436:	6078      	str	r0, [r7, #4]
  400438:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  40043a:	687b      	ldr	r3, [r7, #4]
  40043c:	683a      	ldr	r2, [r7, #0]
  40043e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  400442:	bf00      	nop
  400444:	370c      	adds	r7, #12
  400446:	46bd      	mov	sp, r7
  400448:	f85d 7b04 	ldr.w	r7, [sp], #4
  40044c:	4770      	bx	lr

0040044e <hri_pmc_get_PCSR1_reg>:

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  40044e:	b480      	push	{r7}
  400450:	b085      	sub	sp, #20
  400452:	af00      	add	r7, sp, #0
  400454:	6078      	str	r0, [r7, #4]
  400456:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400458:	687b      	ldr	r3, [r7, #4]
  40045a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  40045e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400460:	68fa      	ldr	r2, [r7, #12]
  400462:	683b      	ldr	r3, [r7, #0]
  400464:	4013      	ands	r3, r2
  400466:	60fb      	str	r3, [r7, #12]
	return tmp;
  400468:	68fb      	ldr	r3, [r7, #12]
}
  40046a:	4618      	mov	r0, r3
  40046c:	3714      	adds	r7, #20
  40046e:	46bd      	mov	sp, r7
  400470:	f85d 7b04 	ldr.w	r7, [sp], #4
  400474:	4770      	bx	lr

00400476 <hri_wdt_set_MR_WDDIS_bit>:
	((Wdt *)hw)->WDT_MR ^= WDT_MR_WDRSTEN;
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
  400476:	b480      	push	{r7}
  400478:	b083      	sub	sp, #12
  40047a:	af00      	add	r7, sp, #0
  40047c:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40047e:	687b      	ldr	r3, [r7, #4]
  400480:	685b      	ldr	r3, [r3, #4]
  400482:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  400486:	687b      	ldr	r3, [r7, #4]
  400488:	605a      	str	r2, [r3, #4]
	WDT_CRITICAL_SECTION_LEAVE();
}
  40048a:	bf00      	nop
  40048c:	370c      	adds	r7, #12
  40048e:	46bd      	mov	sp, r7
  400490:	f85d 7b04 	ldr.w	r7, [sp], #4
  400494:	4770      	bx	lr
	...

00400498 <port_to_reg>:

/**
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
  400498:	b480      	push	{r7}
  40049a:	b083      	sub	sp, #12
  40049c:	af00      	add	r7, sp, #0
  40049e:	4603      	mov	r3, r0
  4004a0:	71fb      	strb	r3, [r7, #7]
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  4004a2:	79fb      	ldrb	r3, [r7, #7]
  4004a4:	025b      	lsls	r3, r3, #9
  4004a6:	461a      	mov	r2, r3
  4004a8:	4b03      	ldr	r3, [pc, #12]	; (4004b8 <port_to_reg+0x20>)
  4004aa:	4413      	add	r3, r2
}
  4004ac:	4618      	mov	r0, r3
  4004ae:	370c      	adds	r7, #12
  4004b0:	46bd      	mov	sp, r7
  4004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004b6:	4770      	bx	lr
  4004b8:	400e0e00 	.word	0x400e0e00

004004bc <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
  4004bc:	b580      	push	{r7, lr}
  4004be:	b084      	sub	sp, #16
  4004c0:	af00      	add	r7, sp, #0
  4004c2:	4603      	mov	r3, r0
  4004c4:	6039      	str	r1, [r7, #0]
  4004c6:	71fb      	strb	r3, [r7, #7]
  4004c8:	4613      	mov	r3, r2
  4004ca:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  4004cc:	79fb      	ldrb	r3, [r7, #7]
  4004ce:	4618      	mov	r0, r3
  4004d0:	4b0e      	ldr	r3, [pc, #56]	; (40050c <_gpio_set_direction+0x50>)
  4004d2:	4798      	blx	r3
  4004d4:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  4004d6:	79bb      	ldrb	r3, [r7, #6]
  4004d8:	2b00      	cmp	r3, #0
  4004da:	db0e      	blt.n	4004fa <_gpio_set_direction+0x3e>
  4004dc:	2b01      	cmp	r3, #1
  4004de:	dd02      	ble.n	4004e6 <_gpio_set_direction+0x2a>
  4004e0:	2b02      	cmp	r3, #2
  4004e2:	d005      	beq.n	4004f0 <_gpio_set_direction+0x34>
  4004e4:	e009      	b.n	4004fa <_gpio_set_direction+0x3e>
	case GPIO_DIRECTION_OFF:
	case GPIO_DIRECTION_IN:
		hri_pio_clear_OSR_reg(hw, mask);
  4004e6:	6839      	ldr	r1, [r7, #0]
  4004e8:	68f8      	ldr	r0, [r7, #12]
  4004ea:	4b09      	ldr	r3, [pc, #36]	; (400510 <_gpio_set_direction+0x54>)
  4004ec:	4798      	blx	r3
		break;
  4004ee:	e009      	b.n	400504 <_gpio_set_direction+0x48>

	case GPIO_DIRECTION_OUT:
		hri_pio_set_OSR_reg(hw, mask);
  4004f0:	6839      	ldr	r1, [r7, #0]
  4004f2:	68f8      	ldr	r0, [r7, #12]
  4004f4:	4b07      	ldr	r3, [pc, #28]	; (400514 <_gpio_set_direction+0x58>)
  4004f6:	4798      	blx	r3
		break;
  4004f8:	e004      	b.n	400504 <_gpio_set_direction+0x48>

	default:
		ASSERT(false);
  4004fa:	224b      	movs	r2, #75	; 0x4b
  4004fc:	4906      	ldr	r1, [pc, #24]	; (400518 <_gpio_set_direction+0x5c>)
  4004fe:	2000      	movs	r0, #0
  400500:	4b06      	ldr	r3, [pc, #24]	; (40051c <_gpio_set_direction+0x60>)
  400502:	4798      	blx	r3
	}
}
  400504:	bf00      	nop
  400506:	3710      	adds	r7, #16
  400508:	46bd      	mov	sp, r7
  40050a:	bd80      	pop	{r7, pc}
  40050c:	00400499 	.word	0x00400499
  400510:	004002c1 	.word	0x004002c1
  400514:	004002a5 	.word	0x004002a5
  400518:	004052e0 	.word	0x004052e0
  40051c:	004018f5 	.word	0x004018f5

00400520 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
  400520:	b580      	push	{r7, lr}
  400522:	b084      	sub	sp, #16
  400524:	af00      	add	r7, sp, #0
  400526:	4603      	mov	r3, r0
  400528:	6039      	str	r1, [r7, #0]
  40052a:	71fb      	strb	r3, [r7, #7]
  40052c:	4613      	mov	r3, r2
  40052e:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  400530:	79fb      	ldrb	r3, [r7, #7]
  400532:	4618      	mov	r0, r3
  400534:	4b09      	ldr	r3, [pc, #36]	; (40055c <_gpio_set_level+0x3c>)
  400536:	4798      	blx	r3
  400538:	60f8      	str	r0, [r7, #12]
	if (level) {
  40053a:	79bb      	ldrb	r3, [r7, #6]
  40053c:	2b00      	cmp	r3, #0
  40053e:	d004      	beq.n	40054a <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  400540:	6839      	ldr	r1, [r7, #0]
  400542:	68f8      	ldr	r0, [r7, #12]
  400544:	4b06      	ldr	r3, [pc, #24]	; (400560 <_gpio_set_level+0x40>)
  400546:	4798      	blx	r3
	} else {
		hri_pio_clear_ODSR_reg(hw, mask);
	}
}
  400548:	e003      	b.n	400552 <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  40054a:	6839      	ldr	r1, [r7, #0]
  40054c:	68f8      	ldr	r0, [r7, #12]
  40054e:	4b05      	ldr	r3, [pc, #20]	; (400564 <_gpio_set_level+0x44>)
  400550:	4798      	blx	r3
}
  400552:	bf00      	nop
  400554:	3710      	adds	r7, #16
  400556:	46bd      	mov	sp, r7
  400558:	bd80      	pop	{r7, pc}
  40055a:	bf00      	nop
  40055c:	00400499 	.word	0x00400499
  400560:	004002dd 	.word	0x004002dd
  400564:	004002f9 	.word	0x004002f9

00400568 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
  400568:	b580      	push	{r7, lr}
  40056a:	b084      	sub	sp, #16
  40056c:	af00      	add	r7, sp, #0
  40056e:	4603      	mov	r3, r0
  400570:	71fb      	strb	r3, [r7, #7]
  400572:	460b      	mov	r3, r1
  400574:	71bb      	strb	r3, [r7, #6]
  400576:	4613      	mov	r3, r2
  400578:	717b      	strb	r3, [r7, #5]
	void *const hw = port_to_reg(port);
  40057a:	79fb      	ldrb	r3, [r7, #7]
  40057c:	4618      	mov	r0, r3
  40057e:	4b23      	ldr	r3, [pc, #140]	; (40060c <_gpio_set_pin_pull_mode+0xa4>)
  400580:	4798      	blx	r3
  400582:	60f8      	str	r0, [r7, #12]
	switch (pull_mode) {
  400584:	797b      	ldrb	r3, [r7, #5]
  400586:	2b01      	cmp	r3, #1
  400588:	d014      	beq.n	4005b4 <_gpio_set_pin_pull_mode+0x4c>
  40058a:	2b02      	cmp	r3, #2
  40058c:	d023      	beq.n	4005d6 <_gpio_set_pin_pull_mode+0x6e>
  40058e:	2b00      	cmp	r3, #0
  400590:	d132      	bne.n	4005f8 <_gpio_set_pin_pull_mode+0x90>
	case GPIO_PULL_OFF:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  400592:	79bb      	ldrb	r3, [r7, #6]
  400594:	2201      	movs	r2, #1
  400596:	fa02 f303 	lsl.w	r3, r2, r3
  40059a:	4619      	mov	r1, r3
  40059c:	68f8      	ldr	r0, [r7, #12]
  40059e:	4b1c      	ldr	r3, [pc, #112]	; (400610 <_gpio_set_pin_pull_mode+0xa8>)
  4005a0:	4798      	blx	r3
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  4005a2:	79bb      	ldrb	r3, [r7, #6]
  4005a4:	2201      	movs	r2, #1
  4005a6:	fa02 f303 	lsl.w	r3, r2, r3
  4005aa:	4619      	mov	r1, r3
  4005ac:	68f8      	ldr	r0, [r7, #12]
  4005ae:	4b19      	ldr	r3, [pc, #100]	; (400614 <_gpio_set_pin_pull_mode+0xac>)
  4005b0:	4798      	blx	r3
		break;
  4005b2:	e027      	b.n	400604 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_UP:
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  4005b4:	79bb      	ldrb	r3, [r7, #6]
  4005b6:	2201      	movs	r2, #1
  4005b8:	fa02 f303 	lsl.w	r3, r2, r3
  4005bc:	4619      	mov	r1, r3
  4005be:	68f8      	ldr	r0, [r7, #12]
  4005c0:	4b14      	ldr	r3, [pc, #80]	; (400614 <_gpio_set_pin_pull_mode+0xac>)
  4005c2:	4798      	blx	r3
		hri_pio_set_PUSR_reg(hw, 1U << pin);
  4005c4:	79bb      	ldrb	r3, [r7, #6]
  4005c6:	2201      	movs	r2, #1
  4005c8:	fa02 f303 	lsl.w	r3, r2, r3
  4005cc:	4619      	mov	r1, r3
  4005ce:	68f8      	ldr	r0, [r7, #12]
  4005d0:	4b11      	ldr	r3, [pc, #68]	; (400618 <_gpio_set_pin_pull_mode+0xb0>)
  4005d2:	4798      	blx	r3
		break;
  4005d4:	e016      	b.n	400604 <_gpio_set_pin_pull_mode+0x9c>

	case GPIO_PULL_DOWN:
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  4005d6:	79bb      	ldrb	r3, [r7, #6]
  4005d8:	2201      	movs	r2, #1
  4005da:	fa02 f303 	lsl.w	r3, r2, r3
  4005de:	4619      	mov	r1, r3
  4005e0:	68f8      	ldr	r0, [r7, #12]
  4005e2:	4b0b      	ldr	r3, [pc, #44]	; (400610 <_gpio_set_pin_pull_mode+0xa8>)
  4005e4:	4798      	blx	r3
		hri_pio_set_PPDSR_reg(hw, 1U << pin);
  4005e6:	79bb      	ldrb	r3, [r7, #6]
  4005e8:	2201      	movs	r2, #1
  4005ea:	fa02 f303 	lsl.w	r3, r2, r3
  4005ee:	4619      	mov	r1, r3
  4005f0:	68f8      	ldr	r0, [r7, #12]
  4005f2:	4b0a      	ldr	r3, [pc, #40]	; (40061c <_gpio_set_pin_pull_mode+0xb4>)
  4005f4:	4798      	blx	r3
		break;
  4005f6:	e005      	b.n	400604 <_gpio_set_pin_pull_mode+0x9c>

	default:
		ASSERT(false);
  4005f8:	228d      	movs	r2, #141	; 0x8d
  4005fa:	4909      	ldr	r1, [pc, #36]	; (400620 <_gpio_set_pin_pull_mode+0xb8>)
  4005fc:	2000      	movs	r0, #0
  4005fe:	4b09      	ldr	r3, [pc, #36]	; (400624 <_gpio_set_pin_pull_mode+0xbc>)
  400600:	4798      	blx	r3
		break;
  400602:	bf00      	nop
	}
}
  400604:	bf00      	nop
  400606:	3710      	adds	r7, #16
  400608:	46bd      	mov	sp, r7
  40060a:	bd80      	pop	{r7, pc}
  40060c:	00400499 	.word	0x00400499
  400610:	00400331 	.word	0x00400331
  400614:	0040036b 	.word	0x0040036b
  400618:	00400315 	.word	0x00400315
  40061c:	0040034d 	.word	0x0040034d
  400620:	004052e0 	.word	0x004052e0
  400624:	004018f5 	.word	0x004018f5

00400628 <_gpio_set_pin_function>:

/**
 * \brief Set pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
  400628:	b580      	push	{r7, lr}
  40062a:	b084      	sub	sp, #16
  40062c:	af00      	add	r7, sp, #0
  40062e:	6078      	str	r0, [r7, #4]
  400630:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  400632:	687b      	ldr	r3, [r7, #4]
  400634:	095b      	lsrs	r3, r3, #5
  400636:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  400638:	687b      	ldr	r3, [r7, #4]
  40063a:	b2db      	uxtb	r3, r3
  40063c:	f003 031f 	and.w	r3, r3, #31
  400640:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  400642:	7bfb      	ldrb	r3, [r7, #15]
  400644:	4618      	mov	r0, r3
  400646:	4b33      	ldr	r3, [pc, #204]	; (400714 <_gpio_set_pin_function+0xec>)
  400648:	4798      	blx	r3
  40064a:	60b8      	str	r0, [r7, #8]

	if ((enum gpio_port)port == GPIO_PORTB) {
  40064c:	7bfb      	ldrb	r3, [r7, #15]
  40064e:	2b01      	cmp	r3, #1
  400650:	d116      	bne.n	400680 <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  400652:	7bbb      	ldrb	r3, [r7, #14]
  400654:	2b04      	cmp	r3, #4
  400656:	d00b      	beq.n	400670 <_gpio_set_pin_function+0x48>
  400658:	7bbb      	ldrb	r3, [r7, #14]
  40065a:	2b05      	cmp	r3, #5
  40065c:	d008      	beq.n	400670 <_gpio_set_pin_function+0x48>
  40065e:	7bbb      	ldrb	r3, [r7, #14]
  400660:	2b06      	cmp	r3, #6
  400662:	d005      	beq.n	400670 <_gpio_set_pin_function+0x48>
  400664:	7bbb      	ldrb	r3, [r7, #14]
  400666:	2b07      	cmp	r3, #7
  400668:	d002      	beq.n	400670 <_gpio_set_pin_function+0x48>
  40066a:	7bbb      	ldrb	r3, [r7, #14]
  40066c:	2b0c      	cmp	r3, #12
  40066e:	d107      	bne.n	400680 <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  400670:	7bbb      	ldrb	r3, [r7, #14]
  400672:	2201      	movs	r2, #1
  400674:	fa02 f303 	lsl.w	r3, r2, r3
  400678:	4619      	mov	r1, r3
  40067a:	4827      	ldr	r0, [pc, #156]	; (400718 <_gpio_set_pin_function+0xf0>)
  40067c:	4b27      	ldr	r3, [pc, #156]	; (40071c <_gpio_set_pin_function+0xf4>)
  40067e:	4798      	blx	r3
		}
	}

	if (function == GPIO_PIN_FUNCTION_OFF) {
  400680:	683b      	ldr	r3, [r7, #0]
  400682:	f1b3 3fff 	cmp.w	r3, #4294967295
  400686:	d108      	bne.n	40069a <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  400688:	7bbb      	ldrb	r3, [r7, #14]
  40068a:	2201      	movs	r2, #1
  40068c:	fa02 f303 	lsl.w	r3, r2, r3
  400690:	4619      	mov	r1, r3
  400692:	68b8      	ldr	r0, [r7, #8]
  400694:	4b22      	ldr	r3, [pc, #136]	; (400720 <_gpio_set_pin_function+0xf8>)
  400696:	4798      	blx	r3
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
		}

		hri_pio_clear_PSR_reg(hw, 1U << pin);
	}
}
  400698:	e037      	b.n	40070a <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  40069a:	683b      	ldr	r3, [r7, #0]
  40069c:	f003 0301 	and.w	r3, r3, #1
  4006a0:	2b00      	cmp	r3, #0
  4006a2:	d009      	beq.n	4006b8 <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  4006a4:	7bbb      	ldrb	r3, [r7, #14]
  4006a6:	2201      	movs	r2, #1
  4006a8:	fa02 f303 	lsl.w	r3, r2, r3
  4006ac:	461a      	mov	r2, r3
  4006ae:	2100      	movs	r1, #0
  4006b0:	68b8      	ldr	r0, [r7, #8]
  4006b2:	4b1c      	ldr	r3, [pc, #112]	; (400724 <_gpio_set_pin_function+0xfc>)
  4006b4:	4798      	blx	r3
  4006b6:	e008      	b.n	4006ca <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  4006b8:	7bbb      	ldrb	r3, [r7, #14]
  4006ba:	2201      	movs	r2, #1
  4006bc:	fa02 f303 	lsl.w	r3, r2, r3
  4006c0:	461a      	mov	r2, r3
  4006c2:	2100      	movs	r1, #0
  4006c4:	68b8      	ldr	r0, [r7, #8]
  4006c6:	4b18      	ldr	r3, [pc, #96]	; (400728 <_gpio_set_pin_function+0x100>)
  4006c8:	4798      	blx	r3
		if (function & 0x2) {
  4006ca:	683b      	ldr	r3, [r7, #0]
  4006cc:	f003 0302 	and.w	r3, r3, #2
  4006d0:	2b00      	cmp	r3, #0
  4006d2:	d009      	beq.n	4006e8 <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  4006d4:	7bbb      	ldrb	r3, [r7, #14]
  4006d6:	2201      	movs	r2, #1
  4006d8:	fa02 f303 	lsl.w	r3, r2, r3
  4006dc:	461a      	mov	r2, r3
  4006de:	2101      	movs	r1, #1
  4006e0:	68b8      	ldr	r0, [r7, #8]
  4006e2:	4b10      	ldr	r3, [pc, #64]	; (400724 <_gpio_set_pin_function+0xfc>)
  4006e4:	4798      	blx	r3
  4006e6:	e008      	b.n	4006fa <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  4006e8:	7bbb      	ldrb	r3, [r7, #14]
  4006ea:	2201      	movs	r2, #1
  4006ec:	fa02 f303 	lsl.w	r3, r2, r3
  4006f0:	461a      	mov	r2, r3
  4006f2:	2101      	movs	r1, #1
  4006f4:	68b8      	ldr	r0, [r7, #8]
  4006f6:	4b0c      	ldr	r3, [pc, #48]	; (400728 <_gpio_set_pin_function+0x100>)
  4006f8:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  4006fa:	7bbb      	ldrb	r3, [r7, #14]
  4006fc:	2201      	movs	r2, #1
  4006fe:	fa02 f303 	lsl.w	r3, r2, r3
  400702:	4619      	mov	r1, r3
  400704:	68b8      	ldr	r0, [r7, #8]
  400706:	4b09      	ldr	r3, [pc, #36]	; (40072c <_gpio_set_pin_function+0x104>)
  400708:	4798      	blx	r3
}
  40070a:	bf00      	nop
  40070c:	3710      	adds	r7, #16
  40070e:	46bd      	mov	sp, r7
  400710:	bd80      	pop	{r7, pc}
  400712:	bf00      	nop
  400714:	00400499 	.word	0x00400499
  400718:	40088000 	.word	0x40088000
  40071c:	00400247 	.word	0x00400247
  400720:	0040026d 	.word	0x0040026d
  400724:	00400389 	.word	0x00400389
  400728:	004003bb 	.word	0x004003bb
  40072c:	00400289 	.word	0x00400289

00400730 <gpio_set_pin_pull_mode>:
 *                      resistor
 *                      GPIO_PULL_UP   = Pull pin low with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
  400730:	b580      	push	{r7, lr}
  400732:	b082      	sub	sp, #8
  400734:	af00      	add	r7, sp, #0
  400736:	4603      	mov	r3, r0
  400738:	460a      	mov	r2, r1
  40073a:	71fb      	strb	r3, [r7, #7]
  40073c:	4613      	mov	r3, r2
  40073e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
  400740:	79fb      	ldrb	r3, [r7, #7]
  400742:	095b      	lsrs	r3, r3, #5
  400744:	b2d8      	uxtb	r0, r3
  400746:	79fb      	ldrb	r3, [r7, #7]
  400748:	f003 031f 	and.w	r3, r3, #31
  40074c:	b2db      	uxtb	r3, r3
  40074e:	79ba      	ldrb	r2, [r7, #6]
  400750:	4619      	mov	r1, r3
  400752:	4b03      	ldr	r3, [pc, #12]	; (400760 <gpio_set_pin_pull_mode+0x30>)
  400754:	4798      	blx	r3
}
  400756:	bf00      	nop
  400758:	3708      	adds	r7, #8
  40075a:	46bd      	mov	sp, r7
  40075c:	bd80      	pop	{r7, pc}
  40075e:	bf00      	nop
  400760:	00400569 	.word	0x00400569

00400764 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
  400764:	b580      	push	{r7, lr}
  400766:	b082      	sub	sp, #8
  400768:	af00      	add	r7, sp, #0
  40076a:	6078      	str	r0, [r7, #4]
  40076c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  40076e:	6839      	ldr	r1, [r7, #0]
  400770:	6878      	ldr	r0, [r7, #4]
  400772:	4b03      	ldr	r3, [pc, #12]	; (400780 <gpio_set_pin_function+0x1c>)
  400774:	4798      	blx	r3
}
  400776:	bf00      	nop
  400778:	3708      	adds	r7, #8
  40077a:	46bd      	mov	sp, r7
  40077c:	bd80      	pop	{r7, pc}
  40077e:	bf00      	nop
  400780:	00400629 	.word	0x00400629

00400784 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
  400784:	b580      	push	{r7, lr}
  400786:	b082      	sub	sp, #8
  400788:	af00      	add	r7, sp, #0
  40078a:	4603      	mov	r3, r0
  40078c:	460a      	mov	r2, r1
  40078e:	71fb      	strb	r3, [r7, #7]
  400790:	4613      	mov	r3, r2
  400792:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  400794:	79fb      	ldrb	r3, [r7, #7]
  400796:	095b      	lsrs	r3, r3, #5
  400798:	b2d8      	uxtb	r0, r3
  40079a:	79fb      	ldrb	r3, [r7, #7]
  40079c:	f003 031f 	and.w	r3, r3, #31
  4007a0:	2201      	movs	r2, #1
  4007a2:	fa02 f303 	lsl.w	r3, r2, r3
  4007a6:	79ba      	ldrb	r2, [r7, #6]
  4007a8:	4619      	mov	r1, r3
  4007aa:	4b03      	ldr	r3, [pc, #12]	; (4007b8 <gpio_set_pin_direction+0x34>)
  4007ac:	4798      	blx	r3
}
  4007ae:	bf00      	nop
  4007b0:	3708      	adds	r7, #8
  4007b2:	46bd      	mov	sp, r7
  4007b4:	bd80      	pop	{r7, pc}
  4007b6:	bf00      	nop
  4007b8:	004004bd 	.word	0x004004bd

004007bc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
  4007bc:	b580      	push	{r7, lr}
  4007be:	b082      	sub	sp, #8
  4007c0:	af00      	add	r7, sp, #0
  4007c2:	4603      	mov	r3, r0
  4007c4:	460a      	mov	r2, r1
  4007c6:	71fb      	strb	r3, [r7, #7]
  4007c8:	4613      	mov	r3, r2
  4007ca:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4007cc:	79fb      	ldrb	r3, [r7, #7]
  4007ce:	095b      	lsrs	r3, r3, #5
  4007d0:	b2d8      	uxtb	r0, r3
  4007d2:	79fb      	ldrb	r3, [r7, #7]
  4007d4:	f003 031f 	and.w	r3, r3, #31
  4007d8:	2201      	movs	r2, #1
  4007da:	fa02 f303 	lsl.w	r3, r2, r3
  4007de:	79ba      	ldrb	r2, [r7, #6]
  4007e0:	4619      	mov	r1, r3
  4007e2:	4b03      	ldr	r3, [pc, #12]	; (4007f0 <gpio_set_pin_level+0x34>)
  4007e4:	4798      	blx	r3
}
  4007e6:	bf00      	nop
  4007e8:	3708      	adds	r7, #8
  4007ea:	46bd      	mov	sp, r7
  4007ec:	bd80      	pop	{r7, pc}
  4007ee:	bf00      	nop
  4007f0:	00400521 	.word	0x00400521

004007f4 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
  4007f4:	b580      	push	{r7, lr}
  4007f6:	af00      	add	r7, sp, #0
	_init_chip();
  4007f8:	4b01      	ldr	r3, [pc, #4]	; (400800 <init_mcu+0xc>)
  4007fa:	4798      	blx	r3
}
  4007fc:	bf00      	nop
  4007fe:	bd80      	pop	{r7, pc}
  400800:	00401b29 	.word	0x00401b29

00400804 <_pmc_enable_periph_clock>:
 *
 * \param periph_id Peripheral ID
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
  400804:	b580      	push	{r7, lr}
  400806:	b082      	sub	sp, #8
  400808:	af00      	add	r7, sp, #0
  40080a:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	2b1f      	cmp	r3, #31
  400810:	d813      	bhi.n	40083a <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400812:	2201      	movs	r2, #1
  400814:	687b      	ldr	r3, [r7, #4]
  400816:	fa02 f303 	lsl.w	r3, r2, r3
  40081a:	4619      	mov	r1, r3
  40081c:	4814      	ldr	r0, [pc, #80]	; (400870 <_pmc_enable_periph_clock+0x6c>)
  40081e:	4b15      	ldr	r3, [pc, #84]	; (400874 <_pmc_enable_periph_clock+0x70>)
  400820:	4798      	blx	r3
  400822:	4603      	mov	r3, r0
  400824:	2b00      	cmp	r3, #0
  400826:	d11e      	bne.n	400866 <_pmc_enable_periph_clock+0x62>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  400828:	2201      	movs	r2, #1
  40082a:	687b      	ldr	r3, [r7, #4]
  40082c:	fa02 f303 	lsl.w	r3, r2, r3
  400830:	4619      	mov	r1, r3
  400832:	480f      	ldr	r0, [pc, #60]	; (400870 <_pmc_enable_periph_clock+0x6c>)
  400834:	4b10      	ldr	r3, [pc, #64]	; (400878 <_pmc_enable_periph_clock+0x74>)
  400836:	4798      	blx	r3
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
		}
	}
}
  400838:	e015      	b.n	400866 <_pmc_enable_periph_clock+0x62>
		periph_id -= 32;
  40083a:	687b      	ldr	r3, [r7, #4]
  40083c:	3b20      	subs	r3, #32
  40083e:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400840:	2201      	movs	r2, #1
  400842:	687b      	ldr	r3, [r7, #4]
  400844:	fa02 f303 	lsl.w	r3, r2, r3
  400848:	4619      	mov	r1, r3
  40084a:	4809      	ldr	r0, [pc, #36]	; (400870 <_pmc_enable_periph_clock+0x6c>)
  40084c:	4b0b      	ldr	r3, [pc, #44]	; (40087c <_pmc_enable_periph_clock+0x78>)
  40084e:	4798      	blx	r3
  400850:	4603      	mov	r3, r0
  400852:	2b00      	cmp	r3, #0
  400854:	d107      	bne.n	400866 <_pmc_enable_periph_clock+0x62>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  400856:	2201      	movs	r2, #1
  400858:	687b      	ldr	r3, [r7, #4]
  40085a:	fa02 f303 	lsl.w	r3, r2, r3
  40085e:	4619      	mov	r1, r3
  400860:	4803      	ldr	r0, [pc, #12]	; (400870 <_pmc_enable_periph_clock+0x6c>)
  400862:	4b07      	ldr	r3, [pc, #28]	; (400880 <_pmc_enable_periph_clock+0x7c>)
  400864:	4798      	blx	r3
}
  400866:	bf00      	nop
  400868:	3708      	adds	r7, #8
  40086a:	46bd      	mov	sp, r7
  40086c:	bd80      	pop	{r7, pc}
  40086e:	bf00      	nop
  400870:	400e0600 	.word	0x400e0600
  400874:	0040040b 	.word	0x0040040b
  400878:	004003ef 	.word	0x004003ef
  40087c:	0040044f 	.word	0x0040044f
  400880:	00400431 	.word	0x00400431

00400884 <DAC_0_PORT_init>:
struct i2c_m_sync_desc I2C_0;

struct usart_sync_descriptor USART_0;

void DAC_0_PORT_init(void)
{
  400884:	b580      	push	{r7, lr}
  400886:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB13, GPIO_PIN_FUNCTION_OFF);
  400888:	f04f 31ff 	mov.w	r1, #4294967295
  40088c:	202d      	movs	r0, #45	; 0x2d
  40088e:	4b04      	ldr	r3, [pc, #16]	; (4008a0 <DAC_0_PORT_init+0x1c>)
  400890:	4798      	blx	r3

	gpio_set_pin_function(PD0, GPIO_PIN_FUNCTION_OFF);
  400892:	f04f 31ff 	mov.w	r1, #4294967295
  400896:	2060      	movs	r0, #96	; 0x60
  400898:	4b01      	ldr	r3, [pc, #4]	; (4008a0 <DAC_0_PORT_init+0x1c>)
  40089a:	4798      	blx	r3
}
  40089c:	bf00      	nop
  40089e:	bd80      	pop	{r7, pc}
  4008a0:	00400765 	.word	0x00400765

004008a4 <DAC_0_CLOCK_init>:

void DAC_0_CLOCK_init(void)
{
  4008a4:	b580      	push	{r7, lr}
  4008a6:	af00      	add	r7, sp, #0

	_pmc_enable_periph_clock(ID_DACC);
  4008a8:	201e      	movs	r0, #30
  4008aa:	4b02      	ldr	r3, [pc, #8]	; (4008b4 <DAC_0_CLOCK_init+0x10>)
  4008ac:	4798      	blx	r3
}
  4008ae:	bf00      	nop
  4008b0:	bd80      	pop	{r7, pc}
  4008b2:	bf00      	nop
  4008b4:	00400805 	.word	0x00400805

004008b8 <DAC_0_init>:

void DAC_0_init(void)
{
  4008b8:	b580      	push	{r7, lr}
  4008ba:	af00      	add	r7, sp, #0
	DAC_0_CLOCK_init();
  4008bc:	4b04      	ldr	r3, [pc, #16]	; (4008d0 <DAC_0_init+0x18>)
  4008be:	4798      	blx	r3
	dac_sync_init(&DAC_0, DACC);
  4008c0:	4904      	ldr	r1, [pc, #16]	; (4008d4 <DAC_0_init+0x1c>)
  4008c2:	4805      	ldr	r0, [pc, #20]	; (4008d8 <DAC_0_init+0x20>)
  4008c4:	4b05      	ldr	r3, [pc, #20]	; (4008dc <DAC_0_init+0x24>)
  4008c6:	4798      	blx	r3
	DAC_0_PORT_init();
  4008c8:	4b05      	ldr	r3, [pc, #20]	; (4008e0 <DAC_0_init+0x28>)
  4008ca:	4798      	blx	r3
}
  4008cc:	bf00      	nop
  4008ce:	bd80      	pop	{r7, pc}
  4008d0:	004008a5 	.word	0x004008a5
  4008d4:	40040000 	.word	0x40040000
  4008d8:	20400140 	.word	0x20400140
  4008dc:	00400c01 	.word	0x00400c01
  4008e0:	00400885 	.word	0x00400885

004008e4 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
  4008e4:	b580      	push	{r7, lr}
  4008e6:	af00      	add	r7, sp, #0

	// Set pin direction to input
	gpio_set_pin_direction(PB0, GPIO_DIRECTION_IN);
  4008e8:	2101      	movs	r1, #1
  4008ea:	2020      	movs	r0, #32
  4008ec:	4b06      	ldr	r3, [pc, #24]	; (400908 <EXTERNAL_IRQ_0_init+0x24>)
  4008ee:	4798      	blx	r3

	gpio_set_pin_pull_mode(PB0,
  4008f0:	2100      	movs	r1, #0
  4008f2:	2020      	movs	r0, #32
  4008f4:	4b05      	ldr	r3, [pc, #20]	; (40090c <EXTERNAL_IRQ_0_init+0x28>)
  4008f6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB0, GPIO_PIN_FUNCTION_OFF);
  4008f8:	f04f 31ff 	mov.w	r1, #4294967295
  4008fc:	2020      	movs	r0, #32
  4008fe:	4b04      	ldr	r3, [pc, #16]	; (400910 <EXTERNAL_IRQ_0_init+0x2c>)
  400900:	4798      	blx	r3
}
  400902:	bf00      	nop
  400904:	bd80      	pop	{r7, pc}
  400906:	bf00      	nop
  400908:	00400785 	.word	0x00400785
  40090c:	00400731 	.word	0x00400731
  400910:	00400765 	.word	0x00400765

00400914 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
  400914:	b580      	push	{r7, lr}
  400916:	af00      	add	r7, sp, #0

	gpio_set_pin_function(MISO, PINMUX_PC26C_SPI1_MISO);
  400918:	4906      	ldr	r1, [pc, #24]	; (400934 <SPI_0_PORT_init+0x20>)
  40091a:	205a      	movs	r0, #90	; 0x5a
  40091c:	4b06      	ldr	r3, [pc, #24]	; (400938 <SPI_0_PORT_init+0x24>)
  40091e:	4798      	blx	r3

	gpio_set_pin_function(MOSI, PINMUX_PC27C_SPI1_MOSI);
  400920:	4906      	ldr	r1, [pc, #24]	; (40093c <SPI_0_PORT_init+0x28>)
  400922:	205b      	movs	r0, #91	; 0x5b
  400924:	4b04      	ldr	r3, [pc, #16]	; (400938 <SPI_0_PORT_init+0x24>)
  400926:	4798      	blx	r3

	gpio_set_pin_function(SCLK, PINMUX_PC24C_SPI1_SPCK);
  400928:	4905      	ldr	r1, [pc, #20]	; (400940 <SPI_0_PORT_init+0x2c>)
  40092a:	2058      	movs	r0, #88	; 0x58
  40092c:	4b02      	ldr	r3, [pc, #8]	; (400938 <SPI_0_PORT_init+0x24>)
  40092e:	4798      	blx	r3
}
  400930:	bf00      	nop
  400932:	bd80      	pop	{r7, pc}
  400934:	005a0002 	.word	0x005a0002
  400938:	00400765 	.word	0x00400765
  40093c:	005b0002 	.word	0x005b0002
  400940:	00580002 	.word	0x00580002

00400944 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
  400944:	b580      	push	{r7, lr}
  400946:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI1);
  400948:	202a      	movs	r0, #42	; 0x2a
  40094a:	4b02      	ldr	r3, [pc, #8]	; (400954 <SPI_0_CLOCK_init+0x10>)
  40094c:	4798      	blx	r3
}
  40094e:	bf00      	nop
  400950:	bd80      	pop	{r7, pc}
  400952:	bf00      	nop
  400954:	00400805 	.word	0x00400805

00400958 <SPI_0_init>:

void SPI_0_init(void)
{
  400958:	b580      	push	{r7, lr}
  40095a:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
  40095c:	4b04      	ldr	r3, [pc, #16]	; (400970 <SPI_0_init+0x18>)
  40095e:	4798      	blx	r3

	spi_m_sync_init(&SPI_0, SPI1);
  400960:	4904      	ldr	r1, [pc, #16]	; (400974 <SPI_0_init+0x1c>)
  400962:	4805      	ldr	r0, [pc, #20]	; (400978 <SPI_0_init+0x20>)
  400964:	4b05      	ldr	r3, [pc, #20]	; (40097c <SPI_0_init+0x24>)
  400966:	4798      	blx	r3

	SPI_0_PORT_init();
  400968:	4b05      	ldr	r3, [pc, #20]	; (400980 <SPI_0_init+0x28>)
  40096a:	4798      	blx	r3
}
  40096c:	bf00      	nop
  40096e:	bd80      	pop	{r7, pc}
  400970:	00400945 	.word	0x00400945
  400974:	40058000 	.word	0x40058000
  400978:	20400154 	.word	0x20400154
  40097c:	00400e55 	.word	0x00400e55
  400980:	00400915 	.word	0x00400915

00400984 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
  400984:	b580      	push	{r7, lr}
  400986:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA4, PINMUX_PA4A_TWIHS0_TWCK0);
  400988:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40098c:	2004      	movs	r0, #4
  40098e:	4b04      	ldr	r3, [pc, #16]	; (4009a0 <I2C_0_PORT_init+0x1c>)
  400990:	4798      	blx	r3

	gpio_set_pin_function(PA3, PINMUX_PA3A_TWIHS0_TWD0);
  400992:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  400996:	2003      	movs	r0, #3
  400998:	4b01      	ldr	r3, [pc, #4]	; (4009a0 <I2C_0_PORT_init+0x1c>)
  40099a:	4798      	blx	r3
}
  40099c:	bf00      	nop
  40099e:	bd80      	pop	{r7, pc}
  4009a0:	00400765 	.word	0x00400765

004009a4 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
  4009a4:	b580      	push	{r7, lr}
  4009a6:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_TWIHS0);
  4009a8:	2013      	movs	r0, #19
  4009aa:	4b02      	ldr	r3, [pc, #8]	; (4009b4 <I2C_0_CLOCK_init+0x10>)
  4009ac:	4798      	blx	r3
}
  4009ae:	bf00      	nop
  4009b0:	bd80      	pop	{r7, pc}
  4009b2:	bf00      	nop
  4009b4:	00400805 	.word	0x00400805

004009b8 <I2C_0_init>:

void I2C_0_init(void)
{
  4009b8:	b580      	push	{r7, lr}
  4009ba:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
  4009bc:	4b04      	ldr	r3, [pc, #16]	; (4009d0 <I2C_0_init+0x18>)
  4009be:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  4009c0:	4904      	ldr	r1, [pc, #16]	; (4009d4 <I2C_0_init+0x1c>)
  4009c2:	4805      	ldr	r0, [pc, #20]	; (4009d8 <I2C_0_init+0x20>)
  4009c4:	4b05      	ldr	r3, [pc, #20]	; (4009dc <I2C_0_init+0x24>)
  4009c6:	4798      	blx	r3

	I2C_0_PORT_init();
  4009c8:	4b05      	ldr	r3, [pc, #20]	; (4009e0 <I2C_0_init+0x28>)
  4009ca:	4798      	blx	r3
}
  4009cc:	bf00      	nop
  4009ce:	bd80      	pop	{r7, pc}
  4009d0:	004009a5 	.word	0x004009a5
  4009d4:	40018000 	.word	0x40018000
  4009d8:	204001c4 	.word	0x204001c4
  4009dc:	00400df5 	.word	0x00400df5
  4009e0:	00400985 	.word	0x00400985

004009e4 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
  4009e4:	b580      	push	{r7, lr}
  4009e6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA9, PINMUX_PA9A_UART0_URXD0);
  4009e8:	f44f 2110 	mov.w	r1, #589824	; 0x90000
  4009ec:	2009      	movs	r0, #9
  4009ee:	4b04      	ldr	r3, [pc, #16]	; (400a00 <USART_0_PORT_init+0x1c>)
  4009f0:	4798      	blx	r3

	gpio_set_pin_function(PA10, PINMUX_PA10A_UART0_UTXD0);
  4009f2:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
  4009f6:	200a      	movs	r0, #10
  4009f8:	4b01      	ldr	r3, [pc, #4]	; (400a00 <USART_0_PORT_init+0x1c>)
  4009fa:	4798      	blx	r3
}
  4009fc:	bf00      	nop
  4009fe:	bd80      	pop	{r7, pc}
  400a00:	00400765 	.word	0x00400765

00400a04 <USART_0_CLOCK_init>:

void USART_0_CLOCK_init(void)
{
  400a04:	b580      	push	{r7, lr}
  400a06:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART0);
  400a08:	2007      	movs	r0, #7
  400a0a:	4b02      	ldr	r3, [pc, #8]	; (400a14 <USART_0_CLOCK_init+0x10>)
  400a0c:	4798      	blx	r3
}
  400a0e:	bf00      	nop
  400a10:	bd80      	pop	{r7, pc}
  400a12:	bf00      	nop
  400a14:	00400805 	.word	0x00400805

00400a18 <USART_0_init>:

void USART_0_init(void)
{
  400a18:	b580      	push	{r7, lr}
  400a1a:	af00      	add	r7, sp, #0
	USART_0_CLOCK_init();
  400a1c:	4b06      	ldr	r3, [pc, #24]	; (400a38 <USART_0_init+0x20>)
  400a1e:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  400a20:	4b06      	ldr	r3, [pc, #24]	; (400a3c <USART_0_init+0x24>)
  400a22:	4798      	blx	r3
  400a24:	4603      	mov	r3, r0
  400a26:	461a      	mov	r2, r3
  400a28:	4905      	ldr	r1, [pc, #20]	; (400a40 <USART_0_init+0x28>)
  400a2a:	4806      	ldr	r0, [pc, #24]	; (400a44 <USART_0_init+0x2c>)
  400a2c:	4b06      	ldr	r3, [pc, #24]	; (400a48 <USART_0_init+0x30>)
  400a2e:	4798      	blx	r3
	USART_0_PORT_init();
  400a30:	4b06      	ldr	r3, [pc, #24]	; (400a4c <USART_0_init+0x34>)
  400a32:	4798      	blx	r3
}
  400a34:	bf00      	nop
  400a36:	bd80      	pop	{r7, pc}
  400a38:	00400a05 	.word	0x00400a05
  400a3c:	00403665 	.word	0x00403665
  400a40:	400e0800 	.word	0x400e0800
  400a44:	20400168 	.word	0x20400168
  400a48:	004012ed 	.word	0x004012ed
  400a4c:	004009e5 	.word	0x004009e5

00400a50 <USART_1_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void USART_1_CLOCK_init()
{
  400a50:	b580      	push	{r7, lr}
  400a52:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_UART4);
  400a54:	202e      	movs	r0, #46	; 0x2e
  400a56:	4b02      	ldr	r3, [pc, #8]	; (400a60 <USART_1_CLOCK_init+0x10>)
  400a58:	4798      	blx	r3
}
  400a5a:	bf00      	nop
  400a5c:	bd80      	pop	{r7, pc}
  400a5e:	bf00      	nop
  400a60:	00400805 	.word	0x00400805

00400a64 <USART_1_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_1_PORT_init()
{
  400a64:	b580      	push	{r7, lr}
  400a66:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD18, PINMUX_PD18C_UART4_URXD4);
  400a68:	4904      	ldr	r1, [pc, #16]	; (400a7c <USART_1_PORT_init+0x18>)
  400a6a:	2072      	movs	r0, #114	; 0x72
  400a6c:	4b04      	ldr	r3, [pc, #16]	; (400a80 <USART_1_PORT_init+0x1c>)
  400a6e:	4798      	blx	r3

	gpio_set_pin_function(PD19, PINMUX_PD19C_UART4_UTXD4);
  400a70:	4904      	ldr	r1, [pc, #16]	; (400a84 <USART_1_PORT_init+0x20>)
  400a72:	2073      	movs	r0, #115	; 0x73
  400a74:	4b02      	ldr	r3, [pc, #8]	; (400a80 <USART_1_PORT_init+0x1c>)
  400a76:	4798      	blx	r3
}
  400a78:	bf00      	nop
  400a7a:	bd80      	pop	{r7, pc}
  400a7c:	00720002 	.word	0x00720002
  400a80:	00400765 	.word	0x00400765
  400a84:	00730002 	.word	0x00730002

00400a88 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
  400a88:	b590      	push	{r4, r7, lr}
  400a8a:	b083      	sub	sp, #12
  400a8c:	af02      	add	r7, sp, #8
	USART_1_CLOCK_init();
  400a8e:	4b09      	ldr	r3, [pc, #36]	; (400ab4 <USART_1_init+0x2c>)
  400a90:	4798      	blx	r3
	usart_async_init(&USART_1, UART4, USART_1_buffer, USART_1_BUFFER_SIZE, _uart_get_usart_async());
  400a92:	4b09      	ldr	r3, [pc, #36]	; (400ab8 <USART_1_init+0x30>)
  400a94:	4798      	blx	r3
  400a96:	4603      	mov	r3, r0
  400a98:	9300      	str	r3, [sp, #0]
  400a9a:	2310      	movs	r3, #16
  400a9c:	4a07      	ldr	r2, [pc, #28]	; (400abc <USART_1_init+0x34>)
  400a9e:	4908      	ldr	r1, [pc, #32]	; (400ac0 <USART_1_init+0x38>)
  400aa0:	4808      	ldr	r0, [pc, #32]	; (400ac4 <USART_1_init+0x3c>)
  400aa2:	4c09      	ldr	r4, [pc, #36]	; (400ac8 <USART_1_init+0x40>)
  400aa4:	47a0      	blx	r4
	USART_1_PORT_init();
  400aa6:	4b09      	ldr	r3, [pc, #36]	; (400acc <USART_1_init+0x44>)
  400aa8:	4798      	blx	r3
}
  400aaa:	bf00      	nop
  400aac:	3704      	adds	r7, #4
  400aae:	46bd      	mov	sp, r7
  400ab0:	bd90      	pop	{r4, r7, pc}
  400ab2:	bf00      	nop
  400ab4:	00400a51 	.word	0x00400a51
  400ab8:	00403675 	.word	0x00403675
  400abc:	2040003c 	.word	0x2040003c
  400ac0:	400e1e00 	.word	0x400e1e00
  400ac4:	20400174 	.word	0x20400174
  400ac8:	00400fe9 	.word	0x00400fe9
  400acc:	00400a65 	.word	0x00400a65

00400ad0 <USB_0_CLOCK_init>:
#warning USB clock should be 48MHz ~ 0.25% clock, check your configuration!
#endif
#endif

void USB_0_CLOCK_init(void)
{
  400ad0:	b580      	push	{r7, lr}
  400ad2:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_USBHS);
  400ad4:	2022      	movs	r0, #34	; 0x22
  400ad6:	4b02      	ldr	r3, [pc, #8]	; (400ae0 <USB_0_CLOCK_init+0x10>)
  400ad8:	4798      	blx	r3
}
  400ada:	bf00      	nop
  400adc:	bd80      	pop	{r7, pc}
  400ade:	bf00      	nop
  400ae0:	00400805 	.word	0x00400805

00400ae4 <USB_0_init>:

void USB_0_init(void)
{
  400ae4:	b580      	push	{r7, lr}
  400ae6:	af00      	add	r7, sp, #0
	USB_0_CLOCK_init();
  400ae8:	4b02      	ldr	r3, [pc, #8]	; (400af4 <USB_0_init+0x10>)
  400aea:	4798      	blx	r3
	usb_d_init();
  400aec:	4b02      	ldr	r3, [pc, #8]	; (400af8 <USB_0_init+0x14>)
  400aee:	4798      	blx	r3
}
  400af0:	bf00      	nop
  400af2:	bd80      	pop	{r7, pc}
  400af4:	00400ad1 	.word	0x00400ad1
  400af8:	00401849 	.word	0x00401849

00400afc <system_init>:

void system_init(void)
{
  400afc:	b580      	push	{r7, lr}
  400afe:	af00      	add	r7, sp, #0
	init_mcu();
  400b00:	4b1c      	ldr	r3, [pc, #112]	; (400b74 <system_init+0x78>)
  400b02:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOB);
  400b04:	200b      	movs	r0, #11
  400b06:	4b1c      	ldr	r3, [pc, #112]	; (400b78 <system_init+0x7c>)
  400b08:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOC);
  400b0a:	200c      	movs	r0, #12
  400b0c:	4b1a      	ldr	r3, [pc, #104]	; (400b78 <system_init+0x7c>)
  400b0e:	4798      	blx	r3

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);
  400b10:	481a      	ldr	r0, [pc, #104]	; (400b7c <system_init+0x80>)
  400b12:	4b1b      	ldr	r3, [pc, #108]	; (400b80 <system_init+0x84>)
  400b14:	4798      	blx	r3

	/* GPIO on PC20 */

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
  400b16:	2102      	movs	r1, #2
  400b18:	2054      	movs	r0, #84	; 0x54
  400b1a:	4b1a      	ldr	r3, [pc, #104]	; (400b84 <system_init+0x88>)
  400b1c:	4798      	blx	r3

	gpio_set_pin_level(LED0,
  400b1e:	2101      	movs	r1, #1
  400b20:	2054      	movs	r0, #84	; 0x54
  400b22:	4b19      	ldr	r3, [pc, #100]	; (400b88 <system_init+0x8c>)
  400b24:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   true);

	gpio_set_pin_function(LED0, GPIO_PIN_FUNCTION_OFF);
  400b26:	f04f 31ff 	mov.w	r1, #4294967295
  400b2a:	2054      	movs	r0, #84	; 0x54
  400b2c:	4b17      	ldr	r3, [pc, #92]	; (400b8c <system_init+0x90>)
  400b2e:	4798      	blx	r3

	/* GPIO on PC25 */

	gpio_set_pin_direction(CS,
  400b30:	2102      	movs	r1, #2
  400b32:	2059      	movs	r0, #89	; 0x59
  400b34:	4b13      	ldr	r3, [pc, #76]	; (400b84 <system_init+0x88>)
  400b36:	4798      	blx	r3
	                       // <GPIO_DIRECTION_OFF"> Off
	                       // <GPIO_DIRECTION_IN"> In
	                       // <GPIO_DIRECTION_OUT"> Out
	                       GPIO_DIRECTION_OUT);

	gpio_set_pin_level(CS,
  400b38:	2100      	movs	r1, #0
  400b3a:	2059      	movs	r0, #89	; 0x59
  400b3c:	4b12      	ldr	r3, [pc, #72]	; (400b88 <system_init+0x8c>)
  400b3e:	4798      	blx	r3
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(CS,
  400b40:	2100      	movs	r1, #0
  400b42:	2059      	movs	r0, #89	; 0x59
  400b44:	4b12      	ldr	r3, [pc, #72]	; (400b90 <system_init+0x94>)
  400b46:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(CS,
  400b48:	2102      	movs	r1, #2
  400b4a:	2059      	movs	r0, #89	; 0x59
  400b4c:	4b0f      	ldr	r3, [pc, #60]	; (400b8c <system_init+0x90>)
  400b4e:	4798      	blx	r3
	                      // <GPIO_PIN_FUNCTION_B"> B
	                      // <GPIO_PIN_FUNCTION_C"> C
	                      // <GPIO_PIN_FUNCTION_D"> D
	                      GPIO_PIN_FUNCTION_C);

	DAC_0_init();
  400b50:	4b10      	ldr	r3, [pc, #64]	; (400b94 <system_init+0x98>)
  400b52:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400b54:	4b10      	ldr	r3, [pc, #64]	; (400b98 <system_init+0x9c>)
  400b56:	4798      	blx	r3

	SPI_0_init();
  400b58:	4b10      	ldr	r3, [pc, #64]	; (400b9c <system_init+0xa0>)
  400b5a:	4798      	blx	r3

	I2C_0_init();
  400b5c:	4b10      	ldr	r3, [pc, #64]	; (400ba0 <system_init+0xa4>)
  400b5e:	4798      	blx	r3

	USART_0_init();
  400b60:	4b10      	ldr	r3, [pc, #64]	; (400ba4 <system_init+0xa8>)
  400b62:	4798      	blx	r3
	USART_1_init();
  400b64:	4b10      	ldr	r3, [pc, #64]	; (400ba8 <system_init+0xac>)
  400b66:	4798      	blx	r3

	USB_0_init();
  400b68:	4b10      	ldr	r3, [pc, #64]	; (400bac <system_init+0xb0>)
  400b6a:	4798      	blx	r3

	ext_irq_init();
  400b6c:	4b10      	ldr	r3, [pc, #64]	; (400bb0 <system_init+0xb4>)
  400b6e:	4798      	blx	r3
}
  400b70:	bf00      	nop
  400b72:	bd80      	pop	{r7, pc}
  400b74:	004007f5 	.word	0x004007f5
  400b78:	00400805 	.word	0x00400805
  400b7c:	400e1850 	.word	0x400e1850
  400b80:	00400477 	.word	0x00400477
  400b84:	00400785 	.word	0x00400785
  400b88:	004007bd 	.word	0x004007bd
  400b8c:	00400765 	.word	0x00400765
  400b90:	00400731 	.word	0x00400731
  400b94:	004008b9 	.word	0x004008b9
  400b98:	004008e5 	.word	0x004008e5
  400b9c:	00400959 	.word	0x00400959
  400ba0:	004009b9 	.word	0x004009b9
  400ba4:	00400a19 	.word	0x00400a19
  400ba8:	00400a89 	.word	0x00400a89
  400bac:	00400ae5 	.word	0x00400ae5
  400bb0:	00400c85 	.word	0x00400c85

00400bb4 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
  400bb4:	b480      	push	{r7}
  400bb6:	b085      	sub	sp, #20
  400bb8:	af00      	add	r7, sp, #0
  400bba:	6078      	str	r0, [r7, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bbc:	f3ef 8310 	mrs	r3, PRIMASK
  400bc0:	60fb      	str	r3, [r7, #12]
  return(result);
  400bc2:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
  400bc4:	687b      	ldr	r3, [r7, #4]
  400bc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400bc8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400bca:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  400bce:	bf00      	nop
  400bd0:	3714      	adds	r7, #20
  400bd2:	46bd      	mov	sp, r7
  400bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bd8:	4770      	bx	lr

00400bda <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
  400bda:	b480      	push	{r7}
  400bdc:	b085      	sub	sp, #20
  400bde:	af00      	add	r7, sp, #0
  400be0:	6078      	str	r0, [r7, #4]
  400be2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
  400be6:	687b      	ldr	r3, [r7, #4]
  400be8:	681b      	ldr	r3, [r3, #0]
  400bea:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400bec:	68fb      	ldr	r3, [r7, #12]
  400bee:	f383 8810 	msr	PRIMASK, r3
}
  400bf2:	bf00      	nop
  400bf4:	3714      	adds	r7, #20
  400bf6:	46bd      	mov	sp, r7
  400bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bfc:	4770      	bx	lr
	...

00400c00 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
  400c00:	b580      	push	{r7, lr}
  400c02:	b084      	sub	sp, #16
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
  400c08:	6039      	str	r1, [r7, #0]
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	2b00      	cmp	r3, #0
  400c0e:	d004      	beq.n	400c1a <dac_sync_init+0x1a>
  400c10:	683b      	ldr	r3, [r7, #0]
  400c12:	2b00      	cmp	r3, #0
  400c14:	d001      	beq.n	400c1a <dac_sync_init+0x1a>
  400c16:	2301      	movs	r3, #1
  400c18:	e000      	b.n	400c1c <dac_sync_init+0x1c>
  400c1a:	2300      	movs	r3, #0
  400c1c:	f003 0301 	and.w	r3, r3, #1
  400c20:	b2db      	uxtb	r3, r3
  400c22:	223c      	movs	r2, #60	; 0x3c
  400c24:	4914      	ldr	r1, [pc, #80]	; (400c78 <dac_sync_init+0x78>)
  400c26:	4618      	mov	r0, r3
  400c28:	4b14      	ldr	r3, [pc, #80]	; (400c7c <dac_sync_init+0x7c>)
  400c2a:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
  400c2c:	687b      	ldr	r3, [r7, #4]
  400c2e:	6839      	ldr	r1, [r7, #0]
  400c30:	4618      	mov	r0, r3
  400c32:	4b13      	ldr	r3, [pc, #76]	; (400c80 <dac_sync_init+0x80>)
  400c34:	4798      	blx	r3
  400c36:	60b8      	str	r0, [r7, #8]
	if (rc) {
  400c38:	68bb      	ldr	r3, [r7, #8]
  400c3a:	2b00      	cmp	r3, #0
  400c3c:	d001      	beq.n	400c42 <dac_sync_init+0x42>
		return rc;
  400c3e:	68bb      	ldr	r3, [r7, #8]
  400c40:	e015      	b.n	400c6e <dac_sync_init+0x6e>
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
  400c42:	2300      	movs	r3, #0
  400c44:	73fb      	strb	r3, [r7, #15]
  400c46:	e00e      	b.n	400c66 <dac_sync_init+0x66>
		descr->sel_ch[i].buffer = NULL;
  400c48:	7bfb      	ldrb	r3, [r7, #15]
  400c4a:	687a      	ldr	r2, [r7, #4]
  400c4c:	00db      	lsls	r3, r3, #3
  400c4e:	4413      	add	r3, r2
  400c50:	2200      	movs	r2, #0
  400c52:	605a      	str	r2, [r3, #4]
		descr->sel_ch[i].length = 0;
  400c54:	7bfb      	ldrb	r3, [r7, #15]
  400c56:	687a      	ldr	r2, [r7, #4]
  400c58:	00db      	lsls	r3, r3, #3
  400c5a:	4413      	add	r3, r2
  400c5c:	2200      	movs	r2, #0
  400c5e:	609a      	str	r2, [r3, #8]
	for (i = 0; i < CHANNEL_NUM; i++) {
  400c60:	7bfb      	ldrb	r3, [r7, #15]
  400c62:	3301      	adds	r3, #1
  400c64:	73fb      	strb	r3, [r7, #15]
  400c66:	7bfb      	ldrb	r3, [r7, #15]
  400c68:	2b01      	cmp	r3, #1
  400c6a:	d9ed      	bls.n	400c48 <dac_sync_init+0x48>
	}

	return ERR_NONE;
  400c6c:	2300      	movs	r3, #0
}
  400c6e:	4618      	mov	r0, r3
  400c70:	3710      	adds	r7, #16
  400c72:	46bd      	mov	sp, r7
  400c74:	bd80      	pop	{r7, pc}
  400c76:	bf00      	nop
  400c78:	004052fc 	.word	0x004052fc
  400c7c:	004018f5 	.word	0x004018f5
  400c80:	00401be1 	.word	0x00401be1

00400c84 <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
  400c84:	b580      	push	{r7, lr}
  400c86:	b082      	sub	sp, #8
  400c88:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400c8a:	2300      	movs	r3, #0
  400c8c:	80fb      	strh	r3, [r7, #6]
  400c8e:	e00e      	b.n	400cae <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
  400c90:	88fb      	ldrh	r3, [r7, #6]
  400c92:	4a0c      	ldr	r2, [pc, #48]	; (400cc4 <ext_irq_init+0x40>)
  400c94:	00db      	lsls	r3, r3, #3
  400c96:	4413      	add	r3, r2
  400c98:	f04f 32ff 	mov.w	r2, #4294967295
  400c9c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
  400c9e:	88fb      	ldrh	r3, [r7, #6]
  400ca0:	4a08      	ldr	r2, [pc, #32]	; (400cc4 <ext_irq_init+0x40>)
  400ca2:	2100      	movs	r1, #0
  400ca4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
  400ca8:	88fb      	ldrh	r3, [r7, #6]
  400caa:	3301      	adds	r3, #1
  400cac:	80fb      	strh	r3, [r7, #6]
  400cae:	88fb      	ldrh	r3, [r7, #6]
  400cb0:	2b00      	cmp	r3, #0
  400cb2:	d0ed      	beq.n	400c90 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
  400cb4:	4804      	ldr	r0, [pc, #16]	; (400cc8 <ext_irq_init+0x44>)
  400cb6:	4b05      	ldr	r3, [pc, #20]	; (400ccc <ext_irq_init+0x48>)
  400cb8:	4798      	blx	r3
  400cba:	4603      	mov	r3, r0
}
  400cbc:	4618      	mov	r0, r3
  400cbe:	3708      	adds	r7, #8
  400cc0:	46bd      	mov	sp, r7
  400cc2:	bd80      	pop	{r7, pc}
  400cc4:	2040004c 	.word	0x2040004c
  400cc8:	00400cd1 	.word	0x00400cd1
  400ccc:	00402199 	.word	0x00402199

00400cd0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400cd0:	b580      	push	{r7, lr}
  400cd2:	b084      	sub	sp, #16
  400cd4:	af00      	add	r7, sp, #0
  400cd6:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
  400cd8:	2300      	movs	r3, #0
  400cda:	73fb      	strb	r3, [r7, #15]
  400cdc:	2301      	movs	r3, #1
  400cde:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
  400ce0:	e02a      	b.n	400d38 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
  400ce2:	7bba      	ldrb	r2, [r7, #14]
  400ce4:	7bfb      	ldrb	r3, [r7, #15]
  400ce6:	4413      	add	r3, r2
  400ce8:	105b      	asrs	r3, r3, #1
  400cea:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
  400cec:	7b7b      	ldrb	r3, [r7, #13]
  400cee:	2b00      	cmp	r3, #0
  400cf0:	d127      	bne.n	400d42 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  400cf2:	7b7b      	ldrb	r3, [r7, #13]
  400cf4:	4a16      	ldr	r2, [pc, #88]	; (400d50 <process_ext_irq+0x80>)
  400cf6:	00db      	lsls	r3, r3, #3
  400cf8:	4413      	add	r3, r2
  400cfa:	685a      	ldr	r2, [r3, #4]
  400cfc:	687b      	ldr	r3, [r7, #4]
  400cfe:	429a      	cmp	r2, r3
  400d00:	d10b      	bne.n	400d1a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
  400d02:	7b7b      	ldrb	r3, [r7, #13]
  400d04:	4a12      	ldr	r2, [pc, #72]	; (400d50 <process_ext_irq+0x80>)
  400d06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400d0a:	2b00      	cmp	r3, #0
  400d0c:	d01b      	beq.n	400d46 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
  400d0e:	7b7b      	ldrb	r3, [r7, #13]
  400d10:	4a0f      	ldr	r2, [pc, #60]	; (400d50 <process_ext_irq+0x80>)
  400d12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400d16:	4798      	blx	r3
			}
			return;
  400d18:	e015      	b.n	400d46 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
  400d1a:	7b7b      	ldrb	r3, [r7, #13]
  400d1c:	4a0c      	ldr	r2, [pc, #48]	; (400d50 <process_ext_irq+0x80>)
  400d1e:	00db      	lsls	r3, r3, #3
  400d20:	4413      	add	r3, r2
  400d22:	685a      	ldr	r2, [r3, #4]
  400d24:	687b      	ldr	r3, [r7, #4]
  400d26:	429a      	cmp	r2, r3
  400d28:	d203      	bcs.n	400d32 <process_ext_irq+0x62>
			lower = middle + 1;
  400d2a:	7b7b      	ldrb	r3, [r7, #13]
  400d2c:	3301      	adds	r3, #1
  400d2e:	73fb      	strb	r3, [r7, #15]
  400d30:	e002      	b.n	400d38 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
  400d32:	7b7b      	ldrb	r3, [r7, #13]
  400d34:	3b01      	subs	r3, #1
  400d36:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
  400d38:	7bba      	ldrb	r2, [r7, #14]
  400d3a:	7bfb      	ldrb	r3, [r7, #15]
  400d3c:	429a      	cmp	r2, r3
  400d3e:	d2d0      	bcs.n	400ce2 <process_ext_irq+0x12>
  400d40:	e002      	b.n	400d48 <process_ext_irq+0x78>
			return;
  400d42:	bf00      	nop
  400d44:	e000      	b.n	400d48 <process_ext_irq+0x78>
			return;
  400d46:	bf00      	nop
		}
	}
}
  400d48:	3710      	adds	r7, #16
  400d4a:	46bd      	mov	sp, r7
  400d4c:	bd80      	pop	{r7, pc}
  400d4e:	bf00      	nop
  400d50:	2040004c 	.word	0x2040004c

00400d54 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
  400d54:	b580      	push	{r7, lr}
  400d56:	b08a      	sub	sp, #40	; 0x28
  400d58:	af00      	add	r7, sp, #0
  400d5a:	60f8      	str	r0, [r7, #12]
  400d5c:	60b9      	str	r1, [r7, #8]
  400d5e:	4613      	mov	r3, r2
  400d60:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  400d62:	68fb      	ldr	r3, [r7, #12]
  400d64:	3b14      	subs	r3, #20
  400d66:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400d6a:	8b9b      	ldrh	r3, [r3, #28]
  400d6c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  400d6e:	88fb      	ldrh	r3, [r7, #6]
  400d70:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  400d72:	f248 0301 	movw	r3, #32769	; 0x8001
  400d76:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
  400d78:	68bb      	ldr	r3, [r7, #8]
  400d7a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400d7e:	f107 0214 	add.w	r2, r7, #20
  400d82:	4611      	mov	r1, r2
  400d84:	4618      	mov	r0, r3
  400d86:	4b06      	ldr	r3, [pc, #24]	; (400da0 <i2c_m_sync_read+0x4c>)
  400d88:	4798      	blx	r3
  400d8a:	6238      	str	r0, [r7, #32]

	if (ret) {
  400d8c:	6a3b      	ldr	r3, [r7, #32]
  400d8e:	2b00      	cmp	r3, #0
  400d90:	d001      	beq.n	400d96 <i2c_m_sync_read+0x42>
		return ret;
  400d92:	6a3b      	ldr	r3, [r7, #32]
  400d94:	e000      	b.n	400d98 <i2c_m_sync_read+0x44>
	}

	return n;
  400d96:	88fb      	ldrh	r3, [r7, #6]
}
  400d98:	4618      	mov	r0, r3
  400d9a:	3728      	adds	r7, #40	; 0x28
  400d9c:	46bd      	mov	sp, r7
  400d9e:	bd80      	pop	{r7, pc}
  400da0:	00402cbd 	.word	0x00402cbd

00400da4 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400da4:	b580      	push	{r7, lr}
  400da6:	b08a      	sub	sp, #40	; 0x28
  400da8:	af00      	add	r7, sp, #0
  400daa:	60f8      	str	r0, [r7, #12]
  400dac:	60b9      	str	r1, [r7, #8]
  400dae:	4613      	mov	r3, r2
  400db0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
  400db2:	68fb      	ldr	r3, [r7, #12]
  400db4:	3b14      	subs	r3, #20
  400db6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  400db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dba:	8b9b      	ldrh	r3, [r3, #28]
  400dbc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
  400dbe:	88fb      	ldrh	r3, [r7, #6]
  400dc0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
  400dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400dc6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
  400dc8:	68bb      	ldr	r3, [r7, #8]
  400dca:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  400dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dce:	f107 0214 	add.w	r2, r7, #20
  400dd2:	4611      	mov	r1, r2
  400dd4:	4618      	mov	r0, r3
  400dd6:	4b06      	ldr	r3, [pc, #24]	; (400df0 <i2c_m_sync_write+0x4c>)
  400dd8:	4798      	blx	r3
  400dda:	6238      	str	r0, [r7, #32]

	if (ret) {
  400ddc:	6a3b      	ldr	r3, [r7, #32]
  400dde:	2b00      	cmp	r3, #0
  400de0:	d001      	beq.n	400de6 <i2c_m_sync_write+0x42>
		return ret;
  400de2:	6a3b      	ldr	r3, [r7, #32]
  400de4:	e000      	b.n	400de8 <i2c_m_sync_write+0x44>
	}

	return n;
  400de6:	88fb      	ldrh	r3, [r7, #6]
}
  400de8:	4618      	mov	r0, r3
  400dea:	3728      	adds	r7, #40	; 0x28
  400dec:	46bd      	mov	sp, r7
  400dee:	bd80      	pop	{r7, pc}
  400df0:	00402cbd 	.word	0x00402cbd

00400df4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  400df4:	b580      	push	{r7, lr}
  400df6:	b084      	sub	sp, #16
  400df8:	af00      	add	r7, sp, #0
  400dfa:	6078      	str	r0, [r7, #4]
  400dfc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
  400dfe:	687b      	ldr	r3, [r7, #4]
  400e00:	2b00      	cmp	r3, #0
  400e02:	bf14      	ite	ne
  400e04:	2301      	movne	r3, #1
  400e06:	2300      	moveq	r3, #0
  400e08:	b2db      	uxtb	r3, r3
  400e0a:	2268      	movs	r2, #104	; 0x68
  400e0c:	490c      	ldr	r1, [pc, #48]	; (400e40 <i2c_m_sync_init+0x4c>)
  400e0e:	4618      	mov	r0, r3
  400e10:	4b0c      	ldr	r3, [pc, #48]	; (400e44 <i2c_m_sync_init+0x50>)
  400e12:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400e14:	687b      	ldr	r3, [r7, #4]
  400e16:	6839      	ldr	r1, [r7, #0]
  400e18:	4618      	mov	r0, r3
  400e1a:	4b0b      	ldr	r3, [pc, #44]	; (400e48 <i2c_m_sync_init+0x54>)
  400e1c:	4798      	blx	r3
  400e1e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  400e20:	68fb      	ldr	r3, [r7, #12]
  400e22:	2b00      	cmp	r3, #0
  400e24:	d001      	beq.n	400e2a <i2c_m_sync_init+0x36>
		return init_status;
  400e26:	68fb      	ldr	r3, [r7, #12]
  400e28:	e006      	b.n	400e38 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400e2a:	687b      	ldr	r3, [r7, #4]
  400e2c:	4a07      	ldr	r2, [pc, #28]	; (400e4c <i2c_m_sync_init+0x58>)
  400e2e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
  400e30:	687b      	ldr	r3, [r7, #4]
  400e32:	4a07      	ldr	r2, [pc, #28]	; (400e50 <i2c_m_sync_init+0x5c>)
  400e34:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  400e36:	2300      	movs	r3, #0
}
  400e38:	4618      	mov	r0, r3
  400e3a:	3710      	adds	r7, #16
  400e3c:	46bd      	mov	sp, r7
  400e3e:	bd80      	pop	{r7, pc}
  400e40:	00405318 	.word	0x00405318
  400e44:	004018f5 	.word	0x004018f5
  400e48:	00402c19 	.word	0x00402c19
  400e4c:	00400d55 	.word	0x00400d55
  400e50:	00400da5 	.word	0x00400da5

00400e54 <spi_m_sync_init>:

static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length);
static int32_t _spi_m_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t length);

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400e54:	b580      	push	{r7, lr}
  400e56:	b084      	sub	sp, #16
  400e58:	af00      	add	r7, sp, #0
  400e5a:	6078      	str	r0, [r7, #4]
  400e5c:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
  400e5e:	2300      	movs	r3, #0
  400e60:	60fb      	str	r3, [r7, #12]

	ASSERT(spi && hw);
  400e62:	687b      	ldr	r3, [r7, #4]
  400e64:	2b00      	cmp	r3, #0
  400e66:	d004      	beq.n	400e72 <spi_m_sync_init+0x1e>
  400e68:	683b      	ldr	r3, [r7, #0]
  400e6a:	2b00      	cmp	r3, #0
  400e6c:	d001      	beq.n	400e72 <spi_m_sync_init+0x1e>
  400e6e:	2301      	movs	r3, #1
  400e70:	e000      	b.n	400e74 <spi_m_sync_init+0x20>
  400e72:	2300      	movs	r3, #0
  400e74:	f003 0301 	and.w	r3, r3, #1
  400e78:	b2db      	uxtb	r3, r3
  400e7a:	2242      	movs	r2, #66	; 0x42
  400e7c:	4910      	ldr	r1, [pc, #64]	; (400ec0 <spi_m_sync_init+0x6c>)
  400e7e:	4618      	mov	r0, r3
  400e80:	4b10      	ldr	r3, [pc, #64]	; (400ec4 <spi_m_sync_init+0x70>)
  400e82:	4798      	blx	r3

	spi->dev.prvt = (void *)hw;
  400e84:	687b      	ldr	r3, [r7, #4]
  400e86:	683a      	ldr	r2, [r7, #0]
  400e88:	601a      	str	r2, [r3, #0]

	rc = _spi_m_sync_init(&spi->dev, hw);
  400e8a:	687b      	ldr	r3, [r7, #4]
  400e8c:	6839      	ldr	r1, [r7, #0]
  400e8e:	4618      	mov	r0, r3
  400e90:	4b0d      	ldr	r3, [pc, #52]	; (400ec8 <spi_m_sync_init+0x74>)
  400e92:	4798      	blx	r3
  400e94:	60f8      	str	r0, [r7, #12]
	if (rc < 0) {
  400e96:	68fb      	ldr	r3, [r7, #12]
  400e98:	2b00      	cmp	r3, #0
  400e9a:	da01      	bge.n	400ea0 <spi_m_sync_init+0x4c>
		return rc;
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	e00a      	b.n	400eb6 <spi_m_sync_init+0x62>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400ea0:	687b      	ldr	r3, [r7, #4]
  400ea2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400ea6:	821a      	strh	r2, [r3, #16]
	spi->io.read  = _spi_m_sync_io_read;
  400ea8:	687b      	ldr	r3, [r7, #4]
  400eaa:	4a08      	ldr	r2, [pc, #32]	; (400ecc <spi_m_sync_init+0x78>)
  400eac:	60da      	str	r2, [r3, #12]
	spi->io.write = _spi_m_sync_io_write;
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	4a07      	ldr	r2, [pc, #28]	; (400ed0 <spi_m_sync_init+0x7c>)
  400eb2:	609a      	str	r2, [r3, #8]

	return ERR_NONE;
  400eb4:	2300      	movs	r3, #0
}
  400eb6:	4618      	mov	r0, r3
  400eb8:	3710      	adds	r7, #16
  400eba:	46bd      	mov	sp, r7
  400ebc:	bd80      	pop	{r7, pc}
  400ebe:	bf00      	nop
  400ec0:	00405334 	.word	0x00405334
  400ec4:	004018f5 	.word	0x004018f5
  400ec8:	00402741 	.word	0x00402741
  400ecc:	00400ed5 	.word	0x00400ed5
  400ed0:	00400f2d 	.word	0x00400f2d

00400ed4 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
  400ed4:	b580      	push	{r7, lr}
  400ed6:	b088      	sub	sp, #32
  400ed8:	af00      	add	r7, sp, #0
  400eda:	60f8      	str	r0, [r7, #12]
  400edc:	60b9      	str	r1, [r7, #8]
  400ede:	4613      	mov	r3, r2
  400ee0:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  400ee2:	68fb      	ldr	r3, [r7, #12]
  400ee4:	2b00      	cmp	r3, #0
  400ee6:	bf14      	ite	ne
  400ee8:	2301      	movne	r3, #1
  400eea:	2300      	moveq	r3, #0
  400eec:	b2db      	uxtb	r3, r3
  400eee:	2291      	movs	r2, #145	; 0x91
  400ef0:	490b      	ldr	r1, [pc, #44]	; (400f20 <_spi_m_sync_io_read+0x4c>)
  400ef2:	4618      	mov	r0, r3
  400ef4:	4b0b      	ldr	r3, [pc, #44]	; (400f24 <_spi_m_sync_io_read+0x50>)
  400ef6:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	3b08      	subs	r3, #8
  400efc:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
  400efe:	68bb      	ldr	r3, [r7, #8]
  400f00:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
  400f02:	2300      	movs	r3, #0
  400f04:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
  400f06:	88fb      	ldrh	r3, [r7, #6]
  400f08:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
  400f0a:	f107 0310 	add.w	r3, r7, #16
  400f0e:	4619      	mov	r1, r3
  400f10:	69f8      	ldr	r0, [r7, #28]
  400f12:	4b05      	ldr	r3, [pc, #20]	; (400f28 <_spi_m_sync_io_read+0x54>)
  400f14:	4798      	blx	r3
  400f16:	4603      	mov	r3, r0
}
  400f18:	4618      	mov	r0, r3
  400f1a:	3720      	adds	r7, #32
  400f1c:	46bd      	mov	sp, r7
  400f1e:	bd80      	pop	{r7, pc}
  400f20:	00405334 	.word	0x00405334
  400f24:	004018f5 	.word	0x004018f5
  400f28:	00400f85 	.word	0x00400f85

00400f2c <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
  400f2c:	b580      	push	{r7, lr}
  400f2e:	b088      	sub	sp, #32
  400f30:	af00      	add	r7, sp, #0
  400f32:	60f8      	str	r0, [r7, #12]
  400f34:	60b9      	str	r1, [r7, #8]
  400f36:	4613      	mov	r3, r2
  400f38:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  400f3a:	68fb      	ldr	r3, [r7, #12]
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	bf14      	ite	ne
  400f40:	2301      	movne	r3, #1
  400f42:	2300      	moveq	r3, #0
  400f44:	b2db      	uxtb	r3, r3
  400f46:	22ad      	movs	r2, #173	; 0xad
  400f48:	490b      	ldr	r1, [pc, #44]	; (400f78 <_spi_m_sync_io_write+0x4c>)
  400f4a:	4618      	mov	r0, r3
  400f4c:	4b0b      	ldr	r3, [pc, #44]	; (400f7c <_spi_m_sync_io_write+0x50>)
  400f4e:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
  400f50:	68fb      	ldr	r3, [r7, #12]
  400f52:	3b08      	subs	r3, #8
  400f54:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
  400f56:	2300      	movs	r3, #0
  400f58:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
  400f5a:	68bb      	ldr	r3, [r7, #8]
  400f5c:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
  400f5e:	88fb      	ldrh	r3, [r7, #6]
  400f60:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
  400f62:	f107 0310 	add.w	r3, r7, #16
  400f66:	4619      	mov	r1, r3
  400f68:	69f8      	ldr	r0, [r7, #28]
  400f6a:	4b05      	ldr	r3, [pc, #20]	; (400f80 <_spi_m_sync_io_write+0x54>)
  400f6c:	4798      	blx	r3
  400f6e:	4603      	mov	r3, r0
}
  400f70:	4618      	mov	r0, r3
  400f72:	3720      	adds	r7, #32
  400f74:	46bd      	mov	sp, r7
  400f76:	bd80      	pop	{r7, pc}
  400f78:	00405334 	.word	0x00405334
  400f7c:	004018f5 	.word	0x004018f5
  400f80:	00400f85 	.word	0x00400f85

00400f84 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400f84:	b580      	push	{r7, lr}
  400f86:	b086      	sub	sp, #24
  400f88:	af00      	add	r7, sp, #0
  400f8a:	6078      	str	r0, [r7, #4]
  400f8c:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400f8e:	687b      	ldr	r3, [r7, #4]
  400f90:	2b00      	cmp	r3, #0
  400f92:	d004      	beq.n	400f9e <spi_m_sync_transfer+0x1a>
  400f94:	683b      	ldr	r3, [r7, #0]
  400f96:	2b00      	cmp	r3, #0
  400f98:	d001      	beq.n	400f9e <spi_m_sync_transfer+0x1a>
  400f9a:	2301      	movs	r3, #1
  400f9c:	e000      	b.n	400fa0 <spi_m_sync_transfer+0x1c>
  400f9e:	2300      	movs	r3, #0
  400fa0:	f003 0301 	and.w	r3, r3, #1
  400fa4:	b2db      	uxtb	r3, r3
  400fa6:	22bd      	movs	r2, #189	; 0xbd
  400fa8:	490c      	ldr	r1, [pc, #48]	; (400fdc <spi_m_sync_transfer+0x58>)
  400faa:	4618      	mov	r0, r3
  400fac:	4b0c      	ldr	r3, [pc, #48]	; (400fe0 <spi_m_sync_transfer+0x5c>)
  400fae:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400fb0:	683b      	ldr	r3, [r7, #0]
  400fb2:	681b      	ldr	r3, [r3, #0]
  400fb4:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
  400fb6:	683b      	ldr	r3, [r7, #0]
  400fb8:	685b      	ldr	r3, [r3, #4]
  400fba:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
  400fbc:	683b      	ldr	r3, [r7, #0]
  400fbe:	689b      	ldr	r3, [r3, #8]
  400fc0:	617b      	str	r3, [r7, #20]

	return _spi_m_sync_trans(&spi->dev, &msg);
  400fc2:	687b      	ldr	r3, [r7, #4]
  400fc4:	f107 020c 	add.w	r2, r7, #12
  400fc8:	4611      	mov	r1, r2
  400fca:	4618      	mov	r0, r3
  400fcc:	4b05      	ldr	r3, [pc, #20]	; (400fe4 <spi_m_sync_transfer+0x60>)
  400fce:	4798      	blx	r3
  400fd0:	4603      	mov	r3, r0
}
  400fd2:	4618      	mov	r0, r3
  400fd4:	3718      	adds	r7, #24
  400fd6:	46bd      	mov	sp, r7
  400fd8:	bd80      	pop	{r7, pc}
  400fda:	bf00      	nop
  400fdc:	00405334 	.word	0x00405334
  400fe0:	004018f5 	.word	0x004018f5
  400fe4:	00402985 	.word	0x00402985

00400fe8 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
  400fe8:	b580      	push	{r7, lr}
  400fea:	b086      	sub	sp, #24
  400fec:	af00      	add	r7, sp, #0
  400fee:	60f8      	str	r0, [r7, #12]
  400ff0:	60b9      	str	r1, [r7, #8]
  400ff2:	607a      	str	r2, [r7, #4]
  400ff4:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400ff6:	68fb      	ldr	r3, [r7, #12]
  400ff8:	2b00      	cmp	r3, #0
  400ffa:	d00a      	beq.n	401012 <usart_async_init+0x2a>
  400ffc:	68bb      	ldr	r3, [r7, #8]
  400ffe:	2b00      	cmp	r3, #0
  401000:	d007      	beq.n	401012 <usart_async_init+0x2a>
  401002:	687b      	ldr	r3, [r7, #4]
  401004:	2b00      	cmp	r3, #0
  401006:	d004      	beq.n	401012 <usart_async_init+0x2a>
  401008:	887b      	ldrh	r3, [r7, #2]
  40100a:	2b00      	cmp	r3, #0
  40100c:	d001      	beq.n	401012 <usart_async_init+0x2a>
  40100e:	2301      	movs	r3, #1
  401010:	e000      	b.n	401014 <usart_async_init+0x2c>
  401012:	2300      	movs	r3, #0
  401014:	f003 0301 	and.w	r3, r3, #1
  401018:	b2db      	uxtb	r3, r3
  40101a:	2244      	movs	r2, #68	; 0x44
  40101c:	4919      	ldr	r1, [pc, #100]	; (401084 <usart_async_init+0x9c>)
  40101e:	4618      	mov	r0, r3
  401020:	4b19      	ldr	r3, [pc, #100]	; (401088 <usart_async_init+0xa0>)
  401022:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  401024:	68fb      	ldr	r3, [r7, #12]
  401026:	3334      	adds	r3, #52	; 0x34
  401028:	887a      	ldrh	r2, [r7, #2]
  40102a:	6879      	ldr	r1, [r7, #4]
  40102c:	4618      	mov	r0, r3
  40102e:	4b17      	ldr	r3, [pc, #92]	; (40108c <usart_async_init+0xa4>)
  401030:	4798      	blx	r3
  401032:	4603      	mov	r3, r0
  401034:	2b00      	cmp	r3, #0
  401036:	d002      	beq.n	40103e <usart_async_init+0x56>
		return ERR_INVALID_ARG;
  401038:	f06f 030c 	mvn.w	r3, #12
  40103c:	e01e      	b.n	40107c <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
  40103e:	68fb      	ldr	r3, [r7, #12]
  401040:	3308      	adds	r3, #8
  401042:	68b9      	ldr	r1, [r7, #8]
  401044:	4618      	mov	r0, r3
  401046:	4b12      	ldr	r3, [pc, #72]	; (401090 <usart_async_init+0xa8>)
  401048:	4798      	blx	r3
  40104a:	6178      	str	r0, [r7, #20]
	if (init_status) {
  40104c:	697b      	ldr	r3, [r7, #20]
  40104e:	2b00      	cmp	r3, #0
  401050:	d001      	beq.n	401056 <usart_async_init+0x6e>
		return init_status;
  401052:	697b      	ldr	r3, [r7, #20]
  401054:	e012      	b.n	40107c <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
  401056:	68fb      	ldr	r3, [r7, #12]
  401058:	4a0e      	ldr	r2, [pc, #56]	; (401094 <usart_async_init+0xac>)
  40105a:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
  40105c:	68fb      	ldr	r3, [r7, #12]
  40105e:	4a0e      	ldr	r2, [pc, #56]	; (401098 <usart_async_init+0xb0>)
  401060:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  401062:	68fb      	ldr	r3, [r7, #12]
  401064:	4a0d      	ldr	r2, [pc, #52]	; (40109c <usart_async_init+0xb4>)
  401066:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  401068:	68fb      	ldr	r3, [r7, #12]
  40106a:	4a0d      	ldr	r2, [pc, #52]	; (4010a0 <usart_async_init+0xb8>)
  40106c:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  40106e:	68fb      	ldr	r3, [r7, #12]
  401070:	4a0c      	ldr	r2, [pc, #48]	; (4010a4 <usart_async_init+0xbc>)
  401072:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  401074:	68fb      	ldr	r3, [r7, #12]
  401076:	4a0c      	ldr	r2, [pc, #48]	; (4010a8 <usart_async_init+0xc0>)
  401078:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
  40107a:	2300      	movs	r3, #0
}
  40107c:	4618      	mov	r0, r3
  40107e:	3718      	adds	r7, #24
  401080:	46bd      	mov	sp, r7
  401082:	bd80      	pop	{r7, pc}
  401084:	00405350 	.word	0x00405350
  401088:	004018f5 	.word	0x004018f5
  40108c:	0040191d 	.word	0x0040191d
  401090:	00403371 	.word	0x00403371
  401094:	0040113d 	.word	0x0040113d
  401098:	004010ad 	.word	0x004010ad
  40109c:	004011ed 	.word	0x004011ed
  4010a0:	00401285 	.word	0x00401285
  4010a4:	00401259 	.word	0x00401259
  4010a8:	004012c1 	.word	0x004012c1

004010ac <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4010ac:	b580      	push	{r7, lr}
  4010ae:	b086      	sub	sp, #24
  4010b0:	af00      	add	r7, sp, #0
  4010b2:	60f8      	str	r0, [r7, #12]
  4010b4:	60b9      	str	r1, [r7, #8]
  4010b6:	4613      	mov	r3, r2
  4010b8:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  4010ba:	68fb      	ldr	r3, [r7, #12]
  4010bc:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
  4010be:	697b      	ldr	r3, [r7, #20]
  4010c0:	2b00      	cmp	r3, #0
  4010c2:	d007      	beq.n	4010d4 <usart_async_write+0x28>
  4010c4:	68bb      	ldr	r3, [r7, #8]
  4010c6:	2b00      	cmp	r3, #0
  4010c8:	d004      	beq.n	4010d4 <usart_async_write+0x28>
  4010ca:	88fb      	ldrh	r3, [r7, #6]
  4010cc:	2b00      	cmp	r3, #0
  4010ce:	d001      	beq.n	4010d4 <usart_async_write+0x28>
  4010d0:	2301      	movs	r3, #1
  4010d2:	e000      	b.n	4010d6 <usart_async_write+0x2a>
  4010d4:	2300      	movs	r3, #0
  4010d6:	f003 0301 	and.w	r3, r3, #1
  4010da:	b2db      	uxtb	r3, r3
  4010dc:	f240 1245 	movw	r2, #325	; 0x145
  4010e0:	4913      	ldr	r1, [pc, #76]	; (401130 <usart_async_write+0x84>)
  4010e2:	4618      	mov	r0, r3
  4010e4:	4b13      	ldr	r3, [pc, #76]	; (401134 <usart_async_write+0x88>)
  4010e6:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
  4010e8:	697b      	ldr	r3, [r7, #20]
  4010ea:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  4010ee:	697b      	ldr	r3, [r7, #20]
  4010f0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  4010f4:	429a      	cmp	r2, r3
  4010f6:	d002      	beq.n	4010fe <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
  4010f8:	f06f 031b 	mvn.w	r3, #27
  4010fc:	e013      	b.n	401126 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
  4010fe:	697b      	ldr	r3, [r7, #20]
  401100:	68ba      	ldr	r2, [r7, #8]
  401102:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
  401104:	697b      	ldr	r3, [r7, #20]
  401106:	88fa      	ldrh	r2, [r7, #6]
  401108:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
  40110c:	697b      	ldr	r3, [r7, #20]
  40110e:	2200      	movs	r2, #0
  401110:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  401114:	697b      	ldr	r3, [r7, #20]
  401116:	2201      	movs	r2, #1
  401118:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  40111a:	697b      	ldr	r3, [r7, #20]
  40111c:	3308      	adds	r3, #8
  40111e:	4618      	mov	r0, r3
  401120:	4b05      	ldr	r3, [pc, #20]	; (401138 <usart_async_write+0x8c>)
  401122:	4798      	blx	r3

	return (int32_t)length;
  401124:	88fb      	ldrh	r3, [r7, #6]
}
  401126:	4618      	mov	r0, r3
  401128:	3718      	adds	r7, #24
  40112a:	46bd      	mov	sp, r7
  40112c:	bd80      	pop	{r7, pc}
  40112e:	bf00      	nop
  401130:	00405350 	.word	0x00405350
  401134:	004018f5 	.word	0x004018f5
  401138:	00403561 	.word	0x00403561

0040113c <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40113c:	b580      	push	{r7, lr}
  40113e:	b088      	sub	sp, #32
  401140:	af00      	add	r7, sp, #0
  401142:	60f8      	str	r0, [r7, #12]
  401144:	60b9      	str	r1, [r7, #8]
  401146:	4613      	mov	r3, r2
  401148:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
  40114a:	2300      	movs	r3, #0
  40114c:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
  40114e:	68fb      	ldr	r3, [r7, #12]
  401150:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
  401152:	69bb      	ldr	r3, [r7, #24]
  401154:	2b00      	cmp	r3, #0
  401156:	d007      	beq.n	401168 <usart_async_read+0x2c>
  401158:	68bb      	ldr	r3, [r7, #8]
  40115a:	2b00      	cmp	r3, #0
  40115c:	d004      	beq.n	401168 <usart_async_read+0x2c>
  40115e:	88fb      	ldrh	r3, [r7, #6]
  401160:	2b00      	cmp	r3, #0
  401162:	d001      	beq.n	401168 <usart_async_read+0x2c>
  401164:	2301      	movs	r3, #1
  401166:	e000      	b.n	40116a <usart_async_read+0x2e>
  401168:	2300      	movs	r3, #0
  40116a:	f003 0301 	and.w	r3, r3, #1
  40116e:	b2db      	uxtb	r3, r3
  401170:	f44f 72b1 	mov.w	r2, #354	; 0x162
  401174:	4917      	ldr	r1, [pc, #92]	; (4011d4 <usart_async_read+0x98>)
  401176:	4618      	mov	r0, r3
  401178:	4b17      	ldr	r3, [pc, #92]	; (4011d8 <usart_async_read+0x9c>)
  40117a:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
  40117c:	f107 0310 	add.w	r3, r7, #16
  401180:	4618      	mov	r0, r3
  401182:	4b16      	ldr	r3, [pc, #88]	; (4011dc <usart_async_read+0xa0>)
  401184:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  401186:	69bb      	ldr	r3, [r7, #24]
  401188:	3334      	adds	r3, #52	; 0x34
  40118a:	4618      	mov	r0, r3
  40118c:	4b14      	ldr	r3, [pc, #80]	; (4011e0 <usart_async_read+0xa4>)
  40118e:	4798      	blx	r3
  401190:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
  401192:	f107 0310 	add.w	r3, r7, #16
  401196:	4618      	mov	r0, r3
  401198:	4b12      	ldr	r3, [pc, #72]	; (4011e4 <usart_async_read+0xa8>)
  40119a:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
  40119c:	e00c      	b.n	4011b8 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  40119e:	69bb      	ldr	r3, [r7, #24]
  4011a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
  4011a4:	8bfb      	ldrh	r3, [r7, #30]
  4011a6:	1c59      	adds	r1, r3, #1
  4011a8:	83f9      	strh	r1, [r7, #30]
  4011aa:	4619      	mov	r1, r3
  4011ac:	68bb      	ldr	r3, [r7, #8]
  4011ae:	440b      	add	r3, r1
  4011b0:	4619      	mov	r1, r3
  4011b2:	4610      	mov	r0, r2
  4011b4:	4b0c      	ldr	r3, [pc, #48]	; (4011e8 <usart_async_read+0xac>)
  4011b6:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  4011b8:	8bfa      	ldrh	r2, [r7, #30]
  4011ba:	697b      	ldr	r3, [r7, #20]
  4011bc:	429a      	cmp	r2, r3
  4011be:	d203      	bcs.n	4011c8 <usart_async_read+0x8c>
  4011c0:	8bfa      	ldrh	r2, [r7, #30]
  4011c2:	88fb      	ldrh	r3, [r7, #6]
  4011c4:	429a      	cmp	r2, r3
  4011c6:	d3ea      	bcc.n	40119e <usart_async_read+0x62>
	}

	return (int32_t)was_read;
  4011c8:	8bfb      	ldrh	r3, [r7, #30]
}
  4011ca:	4618      	mov	r0, r3
  4011cc:	3720      	adds	r7, #32
  4011ce:	46bd      	mov	sp, r7
  4011d0:	bd80      	pop	{r7, pc}
  4011d2:	bf00      	nop
  4011d4:	00405350 	.word	0x00405350
  4011d8:	004018f5 	.word	0x004018f5
  4011dc:	00400bb5 	.word	0x00400bb5
  4011e0:	00401a75 	.word	0x00401a75
  4011e4:	00400bdb 	.word	0x00400bdb
  4011e8:	00401991 	.word	0x00401991

004011ec <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
  4011ec:	b590      	push	{r4, r7, lr}
  4011ee:	b085      	sub	sp, #20
  4011f0:	af00      	add	r7, sp, #0
  4011f2:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4011f4:	687b      	ldr	r3, [r7, #4]
  4011f6:	3b08      	subs	r3, #8
  4011f8:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
  4011fa:	68fb      	ldr	r3, [r7, #12]
  4011fc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
  401200:	68fb      	ldr	r3, [r7, #12]
  401202:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  401206:	429a      	cmp	r2, r3
  401208:	d017      	beq.n	40123a <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  40120a:	68fb      	ldr	r3, [r7, #12]
  40120c:	f103 0008 	add.w	r0, r3, #8
  401210:	68fb      	ldr	r3, [r7, #12]
  401212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401214:	68fb      	ldr	r3, [r7, #12]
  401216:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  40121a:	1c59      	adds	r1, r3, #1
  40121c:	b28c      	uxth	r4, r1
  40121e:	68f9      	ldr	r1, [r7, #12]
  401220:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
  401224:	4413      	add	r3, r2
  401226:	781b      	ldrb	r3, [r3, #0]
  401228:	4619      	mov	r1, r3
  40122a:	4b08      	ldr	r3, [pc, #32]	; (40124c <usart_process_byte_sent+0x60>)
  40122c:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  40122e:	68fb      	ldr	r3, [r7, #12]
  401230:	3308      	adds	r3, #8
  401232:	4618      	mov	r0, r3
  401234:	4b06      	ldr	r3, [pc, #24]	; (401250 <usart_process_byte_sent+0x64>)
  401236:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
  401238:	e004      	b.n	401244 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
  40123a:	68fb      	ldr	r3, [r7, #12]
  40123c:	3308      	adds	r3, #8
  40123e:	4618      	mov	r0, r3
  401240:	4b04      	ldr	r3, [pc, #16]	; (401254 <usart_process_byte_sent+0x68>)
  401242:	4798      	blx	r3
}
  401244:	bf00      	nop
  401246:	3714      	adds	r7, #20
  401248:	46bd      	mov	sp, r7
  40124a:	bd90      	pop	{r4, r7, pc}
  40124c:	00403455 	.word	0x00403455
  401250:	00403561 	.word	0x00403561
  401254:	004035a1 	.word	0x004035a1

00401258 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  401258:	b580      	push	{r7, lr}
  40125a:	b084      	sub	sp, #16
  40125c:	af00      	add	r7, sp, #0
  40125e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401260:	687b      	ldr	r3, [r7, #4]
  401262:	3b08      	subs	r3, #8
  401264:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  401266:	68fb      	ldr	r3, [r7, #12]
  401268:	2200      	movs	r2, #0
  40126a:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
  40126c:	68fb      	ldr	r3, [r7, #12]
  40126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401270:	2b00      	cmp	r3, #0
  401272:	d003      	beq.n	40127c <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
  401274:	68fb      	ldr	r3, [r7, #12]
  401276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401278:	68f8      	ldr	r0, [r7, #12]
  40127a:	4798      	blx	r3
	}
}
  40127c:	bf00      	nop
  40127e:	3710      	adds	r7, #16
  401280:	46bd      	mov	sp, r7
  401282:	bd80      	pop	{r7, pc}

00401284 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
  401284:	b580      	push	{r7, lr}
  401286:	b084      	sub	sp, #16
  401288:	af00      	add	r7, sp, #0
  40128a:	6078      	str	r0, [r7, #4]
  40128c:	460b      	mov	r3, r1
  40128e:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  401290:	687b      	ldr	r3, [r7, #4]
  401292:	3b08      	subs	r3, #8
  401294:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
  401296:	68fb      	ldr	r3, [r7, #12]
  401298:	3334      	adds	r3, #52	; 0x34
  40129a:	78fa      	ldrb	r2, [r7, #3]
  40129c:	4611      	mov	r1, r2
  40129e:	4618      	mov	r0, r3
  4012a0:	4b06      	ldr	r3, [pc, #24]	; (4012bc <usart_fill_rx_buffer+0x38>)
  4012a2:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
  4012a4:	68fb      	ldr	r3, [r7, #12]
  4012a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4012a8:	2b00      	cmp	r3, #0
  4012aa:	d003      	beq.n	4012b4 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
  4012ac:	68fb      	ldr	r3, [r7, #12]
  4012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4012b0:	68f8      	ldr	r0, [r7, #12]
  4012b2:	4798      	blx	r3
	}
}
  4012b4:	bf00      	nop
  4012b6:	3710      	adds	r7, #16
  4012b8:	46bd      	mov	sp, r7
  4012ba:	bd80      	pop	{r7, pc}
  4012bc:	00401a01 	.word	0x00401a01

004012c0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  4012c0:	b580      	push	{r7, lr}
  4012c2:	b084      	sub	sp, #16
  4012c4:	af00      	add	r7, sp, #0
  4012c6:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  4012c8:	687b      	ldr	r3, [r7, #4]
  4012ca:	3b08      	subs	r3, #8
  4012cc:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
  4012ce:	68fb      	ldr	r3, [r7, #12]
  4012d0:	2200      	movs	r2, #0
  4012d2:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
  4012d4:	68fb      	ldr	r3, [r7, #12]
  4012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012d8:	2b00      	cmp	r3, #0
  4012da:	d003      	beq.n	4012e4 <usart_error+0x24>
		descr->usart_cb.error(descr);
  4012dc:	68fb      	ldr	r3, [r7, #12]
  4012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012e0:	68f8      	ldr	r0, [r7, #12]
  4012e2:	4798      	blx	r3
	}
}
  4012e4:	bf00      	nop
  4012e6:	3710      	adds	r7, #16
  4012e8:	46bd      	mov	sp, r7
  4012ea:	bd80      	pop	{r7, pc}

004012ec <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
  4012ec:	b580      	push	{r7, lr}
  4012ee:	b086      	sub	sp, #24
  4012f0:	af00      	add	r7, sp, #0
  4012f2:	60f8      	str	r0, [r7, #12]
  4012f4:	60b9      	str	r1, [r7, #8]
  4012f6:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
  4012f8:	68fb      	ldr	r3, [r7, #12]
  4012fa:	2b00      	cmp	r3, #0
  4012fc:	d004      	beq.n	401308 <usart_sync_init+0x1c>
  4012fe:	68bb      	ldr	r3, [r7, #8]
  401300:	2b00      	cmp	r3, #0
  401302:	d001      	beq.n	401308 <usart_sync_init+0x1c>
  401304:	2301      	movs	r3, #1
  401306:	e000      	b.n	40130a <usart_sync_init+0x1e>
  401308:	2300      	movs	r3, #0
  40130a:	f003 0301 	and.w	r3, r3, #1
  40130e:	b2db      	uxtb	r3, r3
  401310:	223e      	movs	r2, #62	; 0x3e
  401312:	490d      	ldr	r1, [pc, #52]	; (401348 <usart_sync_init+0x5c>)
  401314:	4618      	mov	r0, r3
  401316:	4b0d      	ldr	r3, [pc, #52]	; (40134c <usart_sync_init+0x60>)
  401318:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  40131a:	68fb      	ldr	r3, [r7, #12]
  40131c:	3308      	adds	r3, #8
  40131e:	68b9      	ldr	r1, [r7, #8]
  401320:	4618      	mov	r0, r3
  401322:	4b0b      	ldr	r3, [pc, #44]	; (401350 <usart_sync_init+0x64>)
  401324:	4798      	blx	r3
  401326:	6178      	str	r0, [r7, #20]
	if (init_status) {
  401328:	697b      	ldr	r3, [r7, #20]
  40132a:	2b00      	cmp	r3, #0
  40132c:	d001      	beq.n	401332 <usart_sync_init+0x46>
		return init_status;
  40132e:	697b      	ldr	r3, [r7, #20]
  401330:	e006      	b.n	401340 <usart_sync_init+0x54>
	}

	descr->io.read  = usart_sync_read;
  401332:	68fb      	ldr	r3, [r7, #12]
  401334:	4a07      	ldr	r2, [pc, #28]	; (401354 <usart_sync_init+0x68>)
  401336:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
  401338:	68fb      	ldr	r3, [r7, #12]
  40133a:	4a07      	ldr	r2, [pc, #28]	; (401358 <usart_sync_init+0x6c>)
  40133c:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  40133e:	2300      	movs	r3, #0
}
  401340:	4618      	mov	r0, r3
  401342:	3718      	adds	r7, #24
  401344:	46bd      	mov	sp, r7
  401346:	bd80      	pop	{r7, pc}
  401348:	00405370 	.word	0x00405370
  40134c:	004018f5 	.word	0x004018f5
  401350:	00403319 	.word	0x00403319
  401354:	00401409 	.word	0x00401409
  401358:	0040135d 	.word	0x0040135d

0040135c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  40135c:	b580      	push	{r7, lr}
  40135e:	b086      	sub	sp, #24
  401360:	af00      	add	r7, sp, #0
  401362:	60f8      	str	r0, [r7, #12]
  401364:	60b9      	str	r1, [r7, #8]
  401366:	4613      	mov	r3, r2
  401368:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  40136a:	2300      	movs	r3, #0
  40136c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  40136e:	68fb      	ldr	r3, [r7, #12]
  401370:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  401372:	68fb      	ldr	r3, [r7, #12]
  401374:	2b00      	cmp	r3, #0
  401376:	d007      	beq.n	401388 <usart_sync_write+0x2c>
  401378:	68bb      	ldr	r3, [r7, #8]
  40137a:	2b00      	cmp	r3, #0
  40137c:	d004      	beq.n	401388 <usart_sync_write+0x2c>
  40137e:	88fb      	ldrh	r3, [r7, #6]
  401380:	2b00      	cmp	r3, #0
  401382:	d001      	beq.n	401388 <usart_sync_write+0x2c>
  401384:	2301      	movs	r3, #1
  401386:	e000      	b.n	40138a <usart_sync_write+0x2e>
  401388:	2300      	movs	r3, #0
  40138a:	f003 0301 	and.w	r3, r3, #1
  40138e:	b2db      	uxtb	r3, r3
  401390:	22fb      	movs	r2, #251	; 0xfb
  401392:	4919      	ldr	r1, [pc, #100]	; (4013f8 <usart_sync_write+0x9c>)
  401394:	4618      	mov	r0, r3
  401396:	4b19      	ldr	r3, [pc, #100]	; (4013fc <usart_sync_write+0xa0>)
  401398:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
  40139a:	bf00      	nop
  40139c:	693b      	ldr	r3, [r7, #16]
  40139e:	3308      	adds	r3, #8
  4013a0:	4618      	mov	r0, r3
  4013a2:	4b17      	ldr	r3, [pc, #92]	; (401400 <usart_sync_write+0xa4>)
  4013a4:	4798      	blx	r3
  4013a6:	4603      	mov	r3, r0
  4013a8:	f083 0301 	eor.w	r3, r3, #1
  4013ac:	b2db      	uxtb	r3, r3
  4013ae:	2b00      	cmp	r3, #0
  4013b0:	d1f4      	bne.n	40139c <usart_sync_write+0x40>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4013b2:	693b      	ldr	r3, [r7, #16]
  4013b4:	f103 0008 	add.w	r0, r3, #8
  4013b8:	68ba      	ldr	r2, [r7, #8]
  4013ba:	697b      	ldr	r3, [r7, #20]
  4013bc:	4413      	add	r3, r2
  4013be:	781b      	ldrb	r3, [r3, #0]
  4013c0:	4619      	mov	r1, r3
  4013c2:	4b10      	ldr	r3, [pc, #64]	; (401404 <usart_sync_write+0xa8>)
  4013c4:	4798      	blx	r3
		while (!_usart_sync_is_byte_sent(&descr->device))
  4013c6:	bf00      	nop
  4013c8:	693b      	ldr	r3, [r7, #16]
  4013ca:	3308      	adds	r3, #8
  4013cc:	4618      	mov	r0, r3
  4013ce:	4b0c      	ldr	r3, [pc, #48]	; (401400 <usart_sync_write+0xa4>)
  4013d0:	4798      	blx	r3
  4013d2:	4603      	mov	r3, r0
  4013d4:	f083 0301 	eor.w	r3, r3, #1
  4013d8:	b2db      	uxtb	r3, r3
  4013da:	2b00      	cmp	r3, #0
  4013dc:	d1f4      	bne.n	4013c8 <usart_sync_write+0x6c>
			;
	} while (++offset < length);
  4013de:	697b      	ldr	r3, [r7, #20]
  4013e0:	3301      	adds	r3, #1
  4013e2:	617b      	str	r3, [r7, #20]
  4013e4:	88fb      	ldrh	r3, [r7, #6]
  4013e6:	697a      	ldr	r2, [r7, #20]
  4013e8:	429a      	cmp	r2, r3
  4013ea:	d3e2      	bcc.n	4013b2 <usart_sync_write+0x56>

	return (int32_t)offset;
  4013ec:	697b      	ldr	r3, [r7, #20]
}
  4013ee:	4618      	mov	r0, r3
  4013f0:	3718      	adds	r7, #24
  4013f2:	46bd      	mov	sp, r7
  4013f4:	bd80      	pop	{r7, pc}
  4013f6:	bf00      	nop
  4013f8:	00405370 	.word	0x00405370
  4013fc:	004018f5 	.word	0x004018f5
  401400:	004034e1 	.word	0x004034e1
  401404:	0040340d 	.word	0x0040340d

00401408 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  401408:	b590      	push	{r4, r7, lr}
  40140a:	b087      	sub	sp, #28
  40140c:	af00      	add	r7, sp, #0
  40140e:	60f8      	str	r0, [r7, #12]
  401410:	60b9      	str	r1, [r7, #8]
  401412:	4613      	mov	r3, r2
  401414:	80fb      	strh	r3, [r7, #6]
	uint32_t                      offset = 0;
  401416:	2300      	movs	r3, #0
  401418:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
  40141a:	68fb      	ldr	r3, [r7, #12]
  40141c:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
  40141e:	68fb      	ldr	r3, [r7, #12]
  401420:	2b00      	cmp	r3, #0
  401422:	d007      	beq.n	401434 <usart_sync_read+0x2c>
  401424:	68bb      	ldr	r3, [r7, #8]
  401426:	2b00      	cmp	r3, #0
  401428:	d004      	beq.n	401434 <usart_sync_read+0x2c>
  40142a:	88fb      	ldrh	r3, [r7, #6]
  40142c:	2b00      	cmp	r3, #0
  40142e:	d001      	beq.n	401434 <usart_sync_read+0x2c>
  401430:	2301      	movs	r3, #1
  401432:	e000      	b.n	401436 <usart_sync_read+0x2e>
  401434:	2300      	movs	r3, #0
  401436:	f003 0301 	and.w	r3, r3, #1
  40143a:	b2db      	uxtb	r3, r3
  40143c:	f240 1215 	movw	r2, #277	; 0x115
  401440:	4912      	ldr	r1, [pc, #72]	; (40148c <usart_sync_read+0x84>)
  401442:	4618      	mov	r0, r3
  401444:	4b12      	ldr	r3, [pc, #72]	; (401490 <usart_sync_read+0x88>)
  401446:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  401448:	bf00      	nop
  40144a:	693b      	ldr	r3, [r7, #16]
  40144c:	3308      	adds	r3, #8
  40144e:	4618      	mov	r0, r3
  401450:	4b10      	ldr	r3, [pc, #64]	; (401494 <usart_sync_read+0x8c>)
  401452:	4798      	blx	r3
  401454:	4603      	mov	r3, r0
  401456:	f083 0301 	eor.w	r3, r3, #1
  40145a:	b2db      	uxtb	r3, r3
  40145c:	2b00      	cmp	r3, #0
  40145e:	d1f4      	bne.n	40144a <usart_sync_read+0x42>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  401460:	68ba      	ldr	r2, [r7, #8]
  401462:	697b      	ldr	r3, [r7, #20]
  401464:	18d4      	adds	r4, r2, r3
  401466:	693b      	ldr	r3, [r7, #16]
  401468:	3308      	adds	r3, #8
  40146a:	4618      	mov	r0, r3
  40146c:	4b0a      	ldr	r3, [pc, #40]	; (401498 <usart_sync_read+0x90>)
  40146e:	4798      	blx	r3
  401470:	4603      	mov	r3, r0
  401472:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
  401474:	697b      	ldr	r3, [r7, #20]
  401476:	3301      	adds	r3, #1
  401478:	617b      	str	r3, [r7, #20]
  40147a:	88fb      	ldrh	r3, [r7, #6]
  40147c:	697a      	ldr	r2, [r7, #20]
  40147e:	429a      	cmp	r2, r3
  401480:	d3e2      	bcc.n	401448 <usart_sync_read+0x40>

	return (int32_t)offset;
  401482:	697b      	ldr	r3, [r7, #20]
}
  401484:	4618      	mov	r0, r3
  401486:	371c      	adds	r7, #28
  401488:	46bd      	mov	sp, r7
  40148a:	bd90      	pop	{r4, r7, pc}
  40148c:	00405370 	.word	0x00405370
  401490:	004018f5 	.word	0x004018f5
  401494:	00403521 	.word	0x00403521
  401498:	0040349d 	.word	0x0040349d

0040149c <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
  40149c:	b480      	push	{r7}
  40149e:	b085      	sub	sp, #20
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	4603      	mov	r3, r0
  4014a4:	71fb      	strb	r3, [r7, #7]
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4014a6:	2300      	movs	r3, #0
  4014a8:	73fb      	strb	r3, [r7, #15]
  4014aa:	e029      	b.n	401500 <_usb_d_find_ep+0x64>
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  4014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014b0:	4a19      	ldr	r2, [pc, #100]	; (401518 <_usb_d_find_ep+0x7c>)
  4014b2:	015b      	lsls	r3, r3, #5
  4014b4:	4413      	add	r3, r2
  4014b6:	3301      	adds	r3, #1
  4014b8:	781b      	ldrb	r3, [r3, #0]
  4014ba:	79fa      	ldrb	r2, [r7, #7]
  4014bc:	429a      	cmp	r2, r3
  4014be:	d102      	bne.n	4014c6 <_usb_d_find_ep+0x2a>
			return i;
  4014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014c4:	e022      	b.n	40150c <_usb_d_find_ep+0x70>
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  4014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014ca:	4a13      	ldr	r2, [pc, #76]	; (401518 <_usb_d_find_ep+0x7c>)
  4014cc:	015b      	lsls	r3, r3, #5
  4014ce:	4413      	add	r3, r2
  4014d0:	781b      	ldrb	r3, [r3, #0]
  4014d2:	2b00      	cmp	r3, #0
  4014d4:	d10e      	bne.n	4014f4 <_usb_d_find_ep+0x58>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  4014d6:	79fb      	ldrb	r3, [r7, #7]
  4014d8:	f003 030f 	and.w	r3, r3, #15
  4014dc:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4014e0:	490d      	ldr	r1, [pc, #52]	; (401518 <_usb_d_find_ep+0x7c>)
  4014e2:	0152      	lsls	r2, r2, #5
  4014e4:	440a      	add	r2, r1
  4014e6:	3201      	adds	r2, #1
  4014e8:	7812      	ldrb	r2, [r2, #0]
  4014ea:	4293      	cmp	r3, r2
  4014ec:	d102      	bne.n	4014f4 <_usb_d_find_ep+0x58>
			return i;
  4014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014f2:	e00b      	b.n	40150c <_usb_d_find_ep+0x70>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4014f8:	b2db      	uxtb	r3, r3
  4014fa:	3301      	adds	r3, #1
  4014fc:	b2db      	uxtb	r3, r3
  4014fe:	73fb      	strb	r3, [r7, #15]
  401500:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401504:	2b03      	cmp	r3, #3
  401506:	ddd1      	ble.n	4014ac <_usb_d_find_ep+0x10>
		}
	}
	return -1;
  401508:	f04f 33ff 	mov.w	r3, #4294967295
}
  40150c:	4618      	mov	r0, r3
  40150e:	3714      	adds	r7, #20
  401510:	46bd      	mov	sp, r7
  401512:	f85d 7b04 	ldr.w	r7, [sp], #4
  401516:	4770      	bx	lr
  401518:	20400054 	.word	0x20400054

0040151c <_usb_d_trans>:
 * \param[in] size Transfer size.
 * \param[in] zlp Auto append ZLP for IN, or wait ZLP for OUT.
 */
static inline int32_t _usb_d_trans(const uint8_t ep, const bool dir, const uint8_t *buf, const uint32_t size,
                                   const uint8_t zlp)
{
  40151c:	b580      	push	{r7, lr}
  40151e:	b088      	sub	sp, #32
  401520:	af00      	add	r7, sp, #0
  401522:	60ba      	str	r2, [r7, #8]
  401524:	607b      	str	r3, [r7, #4]
  401526:	4603      	mov	r3, r0
  401528:	73fb      	strb	r3, [r7, #15]
  40152a:	460b      	mov	r3, r1
  40152c:	73bb      	strb	r3, [r7, #14]
	struct usb_d_transfer trans
  40152e:	68bb      	ldr	r3, [r7, #8]
  401530:	617b      	str	r3, [r7, #20]
  401532:	687b      	ldr	r3, [r7, #4]
  401534:	61bb      	str	r3, [r7, #24]
  401536:	7bbb      	ldrb	r3, [r7, #14]
  401538:	2b00      	cmp	r3, #0
  40153a:	d004      	beq.n	401546 <_usb_d_trans+0x2a>
  40153c:	7bfb      	ldrb	r3, [r7, #15]
  40153e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401542:	b2db      	uxtb	r3, r3
  401544:	e003      	b.n	40154e <_usb_d_trans+0x32>
  401546:	7bfb      	ldrb	r3, [r7, #15]
  401548:	f003 030f 	and.w	r3, r3, #15
  40154c:	b2db      	uxtb	r3, r3
  40154e:	773b      	strb	r3, [r7, #28]
  401550:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  401554:	777b      	strb	r3, [r7, #29]
	    = {(uint8_t *)buf, size, dir ? (uint8_t)(ep | USB_EP_DIR) : (uint8_t)(ep & USB_EP_N_MASK), zlp};

	return _usb_d_dev_ep_trans(&trans);
  401556:	f107 0314 	add.w	r3, r7, #20
  40155a:	4618      	mov	r0, r3
  40155c:	4b03      	ldr	r3, [pc, #12]	; (40156c <_usb_d_trans+0x50>)
  40155e:	4798      	blx	r3
  401560:	4603      	mov	r3, r0
}
  401562:	4618      	mov	r0, r3
  401564:	3720      	adds	r7, #32
  401566:	46bd      	mov	sp, r7
  401568:	bd80      	pop	{r7, pc}
  40156a:	bf00      	nop
  40156c:	0040502d 	.word	0x0040502d

00401570 <usb_d_dummy_cb_false>:
 * \param[in] unused1 Unused parameter.
 * \param[in] unused2 Unused parameter.
 * \return Always \c false.
 */
static bool usb_d_dummy_cb_false(uint32_t unused0, uint32_t unused1, uint32_t unused2)
{
  401570:	b480      	push	{r7}
  401572:	b085      	sub	sp, #20
  401574:	af00      	add	r7, sp, #0
  401576:	60f8      	str	r0, [r7, #12]
  401578:	60b9      	str	r1, [r7, #8]
  40157a:	607a      	str	r2, [r7, #4]
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
  40157c:	2300      	movs	r3, #0
}
  40157e:	4618      	mov	r0, r3
  401580:	3714      	adds	r7, #20
  401582:	46bd      	mov	sp, r7
  401584:	f85d 7b04 	ldr.w	r7, [sp], #4
  401588:	4770      	bx	lr
	...

0040158c <usb_d_cb_trans_setup>:
/**
 * \brief Callback invoked when SETUP packet is ready
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 */
static void usb_d_cb_trans_setup(const uint8_t ep)
{
  40158c:	b580      	push	{r7, lr}
  40158e:	b086      	sub	sp, #24
  401590:	af00      	add	r7, sp, #0
  401592:	4603      	mov	r3, r0
  401594:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401596:	79fb      	ldrb	r3, [r7, #7]
  401598:	4618      	mov	r0, r3
  40159a:	4b2a      	ldr	r3, [pc, #168]	; (401644 <usb_d_cb_trans_setup+0xb8>)
  40159c:	4798      	blx	r3
  40159e:	4603      	mov	r3, r0
  4015a0:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  4015a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4015a6:	015b      	lsls	r3, r3, #5
  4015a8:	4a27      	ldr	r2, [pc, #156]	; (401648 <usb_d_cb_trans_setup+0xbc>)
  4015aa:	4413      	add	r3, r2
  4015ac:	613b      	str	r3, [r7, #16]
	uint8_t *        req      = ept->xfer.req;
  4015ae:	693b      	ldr	r3, [r7, #16]
  4015b0:	330c      	adds	r3, #12
  4015b2:	60fb      	str	r3, [r7, #12]

	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  4015b4:	79fb      	ldrb	r3, [r7, #7]
  4015b6:	68f9      	ldr	r1, [r7, #12]
  4015b8:	4618      	mov	r0, r3
  4015ba:	4b24      	ldr	r3, [pc, #144]	; (40164c <usb_d_cb_trans_setup+0xc0>)
  4015bc:	4798      	blx	r3
  4015be:	4603      	mov	r3, r0
  4015c0:	72fb      	strb	r3, [r7, #11]
	if (n != 8) {
  4015c2:	7afb      	ldrb	r3, [r7, #11]
  4015c4:	2b08      	cmp	r3, #8
  4015c6:	d00d      	beq.n	4015e4 <usb_d_cb_trans_setup+0x58>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  4015c8:	79fb      	ldrb	r3, [r7, #7]
  4015ca:	2101      	movs	r1, #1
  4015cc:	4618      	mov	r0, r3
  4015ce:	4b20      	ldr	r3, [pc, #128]	; (401650 <usb_d_cb_trans_setup+0xc4>)
  4015d0:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  4015d2:	79fb      	ldrb	r3, [r7, #7]
  4015d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4015d8:	b2db      	uxtb	r3, r3
  4015da:	2101      	movs	r1, #1
  4015dc:	4618      	mov	r0, r3
  4015de:	4b1c      	ldr	r3, [pc, #112]	; (401650 <usb_d_cb_trans_setup+0xc4>)
  4015e0:	4798      	blx	r3
		return;
  4015e2:	e02b      	b.n	40163c <usb_d_cb_trans_setup+0xb0>
	}

	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  4015e4:	79fb      	ldrb	r3, [r7, #7]
  4015e6:	2100      	movs	r1, #0
  4015e8:	4618      	mov	r0, r3
  4015ea:	4b19      	ldr	r3, [pc, #100]	; (401650 <usb_d_cb_trans_setup+0xc4>)
  4015ec:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  4015ee:	79fb      	ldrb	r3, [r7, #7]
  4015f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4015f4:	b2db      	uxtb	r3, r3
  4015f6:	2100      	movs	r1, #0
  4015f8:	4618      	mov	r0, r3
  4015fa:	4b15      	ldr	r3, [pc, #84]	; (401650 <usb_d_cb_trans_setup+0xc4>)
  4015fc:	4798      	blx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  4015fe:	693b      	ldr	r3, [r7, #16]
  401600:	2201      	movs	r2, #1
  401602:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  401604:	693b      	ldr	r3, [r7, #16]
  401606:	695b      	ldr	r3, [r3, #20]
  401608:	79fa      	ldrb	r2, [r7, #7]
  40160a:	68f9      	ldr	r1, [r7, #12]
  40160c:	4610      	mov	r0, r2
  40160e:	4798      	blx	r3
  401610:	4603      	mov	r3, r0
  401612:	f083 0301 	eor.w	r3, r3, #1
  401616:	b2db      	uxtb	r3, r3
  401618:	2b00      	cmp	r3, #0
  40161a:	d00f      	beq.n	40163c <usb_d_cb_trans_setup+0xb0>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  40161c:	693b      	ldr	r3, [r7, #16]
  40161e:	2205      	movs	r2, #5
  401620:	709a      	strb	r2, [r3, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  401622:	79fb      	ldrb	r3, [r7, #7]
  401624:	2101      	movs	r1, #1
  401626:	4618      	mov	r0, r3
  401628:	4b09      	ldr	r3, [pc, #36]	; (401650 <usb_d_cb_trans_setup+0xc4>)
  40162a:	4798      	blx	r3
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  40162c:	79fb      	ldrb	r3, [r7, #7]
  40162e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401632:	b2db      	uxtb	r3, r3
  401634:	2101      	movs	r1, #1
  401636:	4618      	mov	r0, r3
  401638:	4b05      	ldr	r3, [pc, #20]	; (401650 <usb_d_cb_trans_setup+0xc4>)
  40163a:	4798      	blx	r3
	}
}
  40163c:	3718      	adds	r7, #24
  40163e:	46bd      	mov	sp, r7
  401640:	bd80      	pop	{r7, pc}
  401642:	bf00      	nop
  401644:	0040149d 	.word	0x0040149d
  401648:	20400054 	.word	0x20400054
  40164c:	00404f89 	.word	0x00404f89
  401650:	00404e5d 	.word	0x00404e5d

00401654 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  401654:	b580      	push	{r7, lr}
  401656:	b084      	sub	sp, #16
  401658:	af00      	add	r7, sp, #0
  40165a:	4603      	mov	r3, r0
  40165c:	6039      	str	r1, [r7, #0]
  40165e:	71fb      	strb	r3, [r7, #7]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401660:	79fb      	ldrb	r3, [r7, #7]
  401662:	4618      	mov	r0, r3
  401664:	4b0d      	ldr	r3, [pc, #52]	; (40169c <usb_d_cb_trans_more+0x48>)
  401666:	4798      	blx	r3
  401668:	4603      	mov	r3, r0
  40166a:	73fb      	strb	r3, [r7, #15]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  40166c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401670:	015b      	lsls	r3, r3, #5
  401672:	4a0b      	ldr	r2, [pc, #44]	; (4016a0 <usb_d_cb_trans_more+0x4c>)
  401674:	4413      	add	r3, r2
  401676:	60bb      	str	r3, [r7, #8]
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  401678:	68bb      	ldr	r3, [r7, #8]
  40167a:	789b      	ldrb	r3, [r3, #2]
  40167c:	2b03      	cmp	r3, #3
  40167e:	d107      	bne.n	401690 <usb_d_cb_trans_more+0x3c>
		return ept->callbacks.more(ep, transfered);
  401680:	68bb      	ldr	r3, [r7, #8]
  401682:	699b      	ldr	r3, [r3, #24]
  401684:	79fa      	ldrb	r2, [r7, #7]
  401686:	6839      	ldr	r1, [r7, #0]
  401688:	4610      	mov	r0, r2
  40168a:	4798      	blx	r3
  40168c:	4603      	mov	r3, r0
  40168e:	e000      	b.n	401692 <usb_d_cb_trans_more+0x3e>
	}
	return false;
  401690:	2300      	movs	r3, #0
}
  401692:	4618      	mov	r0, r3
  401694:	3710      	adds	r7, #16
  401696:	46bd      	mov	sp, r7
  401698:	bd80      	pop	{r7, pc}
  40169a:	bf00      	nop
  40169c:	0040149d 	.word	0x0040149d
  4016a0:	20400054 	.word	0x20400054

004016a4 <usb_d_ctrl_trans_done>:
/**
 * \brief Handles the case that control endpoint transactions are done
 * \param[in,out] ept Pointer to endpoint information.
 */
static inline void usb_d_ctrl_trans_done(struct usb_d_ep *ept)
{
  4016a4:	b590      	push	{r4, r7, lr}
  4016a6:	b087      	sub	sp, #28
  4016a8:	af02      	add	r7, sp, #8
  4016aa:	6078      	str	r0, [r7, #4]
	uint8_t state   = ept->xfer.hdr.state;
  4016ac:	687b      	ldr	r3, [r7, #4]
  4016ae:	789b      	ldrb	r3, [r3, #2]
  4016b0:	73fb      	strb	r3, [r7, #15]
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  4016b2:	687b      	ldr	r3, [r7, #4]
  4016b4:	7b1b      	ldrb	r3, [r3, #12]
  4016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016ba:	2b00      	cmp	r3, #0
  4016bc:	bf14      	ite	ne
  4016be:	2301      	movne	r3, #1
  4016c0:	2300      	moveq	r3, #0
  4016c2:	73bb      	strb	r3, [r7, #14]

	if (state == USB_EP_S_X_DATA) {
  4016c4:	7bfb      	ldrb	r3, [r7, #15]
  4016c6:	2b03      	cmp	r3, #3
  4016c8:	d13a      	bne.n	401740 <usb_d_ctrl_trans_done+0x9c>
		/* Data stage -> Status stage */
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  4016ca:	687b      	ldr	r3, [r7, #4]
  4016cc:	69db      	ldr	r3, [r3, #28]
  4016ce:	687a      	ldr	r2, [r7, #4]
  4016d0:	7850      	ldrb	r0, [r2, #1]
  4016d2:	687a      	ldr	r2, [r7, #4]
  4016d4:	320c      	adds	r2, #12
  4016d6:	2101      	movs	r1, #1
  4016d8:	4798      	blx	r3
  4016da:	4603      	mov	r3, r0
  4016dc:	737b      	strb	r3, [r7, #13]
		if (err) {
  4016de:	7b7b      	ldrb	r3, [r7, #13]
  4016e0:	2b00      	cmp	r3, #0
  4016e2:	d015      	beq.n	401710 <usb_d_ctrl_trans_done+0x6c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  4016e4:	687b      	ldr	r3, [r7, #4]
  4016e6:	2205      	movs	r2, #5
  4016e8:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  4016ea:	687b      	ldr	r3, [r7, #4]
  4016ec:	2202      	movs	r2, #2
  4016ee:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  4016f0:	7bbb      	ldrb	r3, [r7, #14]
  4016f2:	2b00      	cmp	r3, #0
  4016f4:	d002      	beq.n	4016fc <usb_d_ctrl_trans_done+0x58>
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	785b      	ldrb	r3, [r3, #1]
  4016fa:	e004      	b.n	401706 <usb_d_ctrl_trans_done+0x62>
  4016fc:	687b      	ldr	r3, [r7, #4]
  4016fe:	785b      	ldrb	r3, [r3, #1]
  401700:	f063 037f 	orn	r3, r3, #127	; 0x7f
  401704:	b2db      	uxtb	r3, r3
  401706:	2101      	movs	r1, #1
  401708:	4618      	mov	r0, r3
  40170a:	4b15      	ldr	r3, [pc, #84]	; (401760 <usb_d_ctrl_trans_done+0xbc>)
  40170c:	4798      	blx	r3
	} else {
		/* Status stage done */
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
	}
}
  40170e:	e022      	b.n	401756 <usb_d_ctrl_trans_done+0xb2>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  401710:	687b      	ldr	r3, [r7, #4]
  401712:	2204      	movs	r2, #4
  401714:	709a      	strb	r2, [r3, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  401716:	687b      	ldr	r3, [r7, #4]
  401718:	7858      	ldrb	r0, [r3, #1]
  40171a:	7bbb      	ldrb	r3, [r7, #14]
  40171c:	2b00      	cmp	r3, #0
  40171e:	bf14      	ite	ne
  401720:	2301      	movne	r3, #1
  401722:	2300      	moveq	r3, #0
  401724:	b2db      	uxtb	r3, r3
  401726:	f083 0301 	eor.w	r3, r3, #1
  40172a:	b2db      	uxtb	r3, r3
  40172c:	f003 0301 	and.w	r3, r3, #1
  401730:	b2d9      	uxtb	r1, r3
  401732:	2301      	movs	r3, #1
  401734:	9300      	str	r3, [sp, #0]
  401736:	2300      	movs	r3, #0
  401738:	2200      	movs	r2, #0
  40173a:	4c0a      	ldr	r4, [pc, #40]	; (401764 <usb_d_ctrl_trans_done+0xc0>)
  40173c:	47a0      	blx	r4
}
  40173e:	e00a      	b.n	401756 <usb_d_ctrl_trans_done+0xb2>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  401740:	687b      	ldr	r3, [r7, #4]
  401742:	69db      	ldr	r3, [r3, #28]
  401744:	687a      	ldr	r2, [r7, #4]
  401746:	7850      	ldrb	r0, [r2, #1]
  401748:	687a      	ldr	r2, [r7, #4]
  40174a:	320c      	adds	r2, #12
  40174c:	2100      	movs	r1, #0
  40174e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  401750:	687b      	ldr	r3, [r7, #4]
  401752:	2202      	movs	r2, #2
  401754:	709a      	strb	r2, [r3, #2]
}
  401756:	bf00      	nop
  401758:	3714      	adds	r7, #20
  40175a:	46bd      	mov	sp, r7
  40175c:	bd90      	pop	{r4, r7, pc}
  40175e:	bf00      	nop
  401760:	00404e5d 	.word	0x00404e5d
  401764:	0040151d 	.word	0x0040151d

00401768 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  401768:	b580      	push	{r7, lr}
  40176a:	b086      	sub	sp, #24
  40176c:	af00      	add	r7, sp, #0
  40176e:	4603      	mov	r3, r0
  401770:	60b9      	str	r1, [r7, #8]
  401772:	607a      	str	r2, [r7, #4]
  401774:	73fb      	strb	r3, [r7, #15]
	int8_t           ep_index = _usb_d_find_ep(ep);
  401776:	7bfb      	ldrb	r3, [r7, #15]
  401778:	4618      	mov	r0, r3
  40177a:	4b2f      	ldr	r3, [pc, #188]	; (401838 <_usb_d_cb_trans_done+0xd0>)
  40177c:	4798      	blx	r3
  40177e:	4603      	mov	r3, r0
  401780:	75fb      	strb	r3, [r7, #23]
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
  401782:	f997 3017 	ldrsb.w	r3, [r7, #23]
  401786:	015b      	lsls	r3, r3, #5
  401788:	4a2c      	ldr	r2, [pc, #176]	; (40183c <_usb_d_cb_trans_done+0xd4>)
  40178a:	4413      	add	r3, r2
  40178c:	613b      	str	r3, [r7, #16]

	if (code == USB_TRANS_DONE) {
  40178e:	68bb      	ldr	r3, [r7, #8]
  401790:	2b00      	cmp	r3, #0
  401792:	d10e      	bne.n	4017b2 <_usb_d_cb_trans_done+0x4a>
		ept->xfer.hdr.status = USB_XFER_DONE;
  401794:	693b      	ldr	r3, [r7, #16]
  401796:	2200      	movs	r2, #0
  401798:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  40179a:	693b      	ldr	r3, [r7, #16]
  40179c:	781b      	ldrb	r3, [r3, #0]
  40179e:	2b00      	cmp	r3, #0
  4017a0:	d103      	bne.n	4017aa <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
  4017a2:	6938      	ldr	r0, [r7, #16]
  4017a4:	4b26      	ldr	r3, [pc, #152]	; (401840 <_usb_d_cb_trans_done+0xd8>)
  4017a6:	4798      	blx	r3
			return;
  4017a8:	e043      	b.n	401832 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  4017aa:	693b      	ldr	r3, [r7, #16]
  4017ac:	2201      	movs	r2, #1
  4017ae:	709a      	strb	r2, [r3, #2]
  4017b0:	e038      	b.n	401824 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_STALL) {
  4017b2:	68bb      	ldr	r3, [r7, #8]
  4017b4:	2b01      	cmp	r3, #1
  4017b6:	d113      	bne.n	4017e0 <_usb_d_cb_trans_done+0x78>
		ept->xfer.hdr.status = USB_XFER_HALT;
  4017b8:	693b      	ldr	r3, [r7, #16]
  4017ba:	2202      	movs	r2, #2
  4017bc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4017be:	693b      	ldr	r3, [r7, #16]
  4017c0:	781b      	ldrb	r3, [r3, #0]
  4017c2:	2b00      	cmp	r3, #0
  4017c4:	d108      	bne.n	4017d8 <_usb_d_cb_trans_done+0x70>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4017c6:	693b      	ldr	r3, [r7, #16]
  4017c8:	2202      	movs	r2, #2
  4017ca:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  4017cc:	7bfb      	ldrb	r3, [r7, #15]
  4017ce:	2100      	movs	r1, #0
  4017d0:	4618      	mov	r0, r3
  4017d2:	4b1c      	ldr	r3, [pc, #112]	; (401844 <_usb_d_cb_trans_done+0xdc>)
  4017d4:	4798      	blx	r3
  4017d6:	e025      	b.n	401824 <_usb_d_cb_trans_done+0xbc>
		} else {
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  4017d8:	693b      	ldr	r3, [r7, #16]
  4017da:	2205      	movs	r2, #5
  4017dc:	709a      	strb	r2, [r3, #2]
  4017de:	e021      	b.n	401824 <_usb_d_cb_trans_done+0xbc>
		}
	} else if (code == USB_TRANS_ABORT) {
  4017e0:	68bb      	ldr	r3, [r7, #8]
  4017e2:	2b02      	cmp	r3, #2
  4017e4:	d10e      	bne.n	401804 <_usb_d_cb_trans_done+0x9c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  4017e6:	693b      	ldr	r3, [r7, #16]
  4017e8:	2204      	movs	r2, #4
  4017ea:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  4017ec:	693b      	ldr	r3, [r7, #16]
  4017ee:	781b      	ldrb	r3, [r3, #0]
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	d103      	bne.n	4017fc <_usb_d_cb_trans_done+0x94>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  4017f4:	693b      	ldr	r3, [r7, #16]
  4017f6:	2202      	movs	r2, #2
  4017f8:	709a      	strb	r2, [r3, #2]
			return;
  4017fa:	e01a      	b.n	401832 <_usb_d_cb_trans_done+0xca>
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  4017fc:	693b      	ldr	r3, [r7, #16]
  4017fe:	2201      	movs	r2, #1
  401800:	709a      	strb	r2, [r3, #2]
  401802:	e00f      	b.n	401824 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
  401804:	68bb      	ldr	r3, [r7, #8]
  401806:	2b03      	cmp	r3, #3
  401808:	d106      	bne.n	401818 <_usb_d_cb_trans_done+0xb0>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  40180a:	693b      	ldr	r3, [r7, #16]
  40180c:	2200      	movs	r2, #0
  40180e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  401810:	693b      	ldr	r3, [r7, #16]
  401812:	2205      	movs	r2, #5
  401814:	70da      	strb	r2, [r3, #3]
  401816:	e005      	b.n	401824 <_usb_d_cb_trans_done+0xbc>
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  401818:	693b      	ldr	r3, [r7, #16]
  40181a:	2206      	movs	r2, #6
  40181c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  40181e:	693b      	ldr	r3, [r7, #16]
  401820:	2206      	movs	r2, #6
  401822:	70da      	strb	r2, [r3, #3]
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  401824:	693b      	ldr	r3, [r7, #16]
  401826:	69db      	ldr	r3, [r3, #28]
  401828:	693a      	ldr	r2, [r7, #16]
  40182a:	78d1      	ldrb	r1, [r2, #3]
  40182c:	687a      	ldr	r2, [r7, #4]
  40182e:	7bf8      	ldrb	r0, [r7, #15]
  401830:	4798      	blx	r3
}
  401832:	3718      	adds	r7, #24
  401834:	46bd      	mov	sp, r7
  401836:	bd80      	pop	{r7, pc}
  401838:	0040149d 	.word	0x0040149d
  40183c:	20400054 	.word	0x20400054
  401840:	004016a5 	.word	0x004016a5
  401844:	00404e5d 	.word	0x00404e5d

00401848 <usb_d_init>:

int32_t usb_d_init(void)
{
  401848:	b580      	push	{r7, lr}
  40184a:	b082      	sub	sp, #8
  40184c:	af00      	add	r7, sp, #0
	int32_t rc = _usb_d_dev_init();
  40184e:	4b21      	ldr	r3, [pc, #132]	; (4018d4 <usb_d_init+0x8c>)
  401850:	4798      	blx	r3
  401852:	6038      	str	r0, [r7, #0]
	uint8_t i;
	if (rc < 0) {
  401854:	683b      	ldr	r3, [r7, #0]
  401856:	2b00      	cmp	r3, #0
  401858:	da01      	bge.n	40185e <usb_d_init+0x16>
		return rc;
  40185a:	683b      	ldr	r3, [r7, #0]
  40185c:	e036      	b.n	4018cc <usb_d_init+0x84>
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  40185e:	2280      	movs	r2, #128	; 0x80
  401860:	2100      	movs	r1, #0
  401862:	481d      	ldr	r0, [pc, #116]	; (4018d8 <usb_d_init+0x90>)
  401864:	4b1d      	ldr	r3, [pc, #116]	; (4018dc <usb_d_init+0x94>)
  401866:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  401868:	2300      	movs	r3, #0
  40186a:	71fb      	strb	r3, [r7, #7]
  40186c:	e01e      	b.n	4018ac <usb_d_init+0x64>
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  40186e:	79fb      	ldrb	r3, [r7, #7]
  401870:	4a19      	ldr	r2, [pc, #100]	; (4018d8 <usb_d_init+0x90>)
  401872:	015b      	lsls	r3, r3, #5
  401874:	4413      	add	r3, r2
  401876:	3301      	adds	r3, #1
  401878:	22ff      	movs	r2, #255	; 0xff
  40187a:	701a      	strb	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  40187c:	79fb      	ldrb	r3, [r7, #7]
  40187e:	4a16      	ldr	r2, [pc, #88]	; (4018d8 <usb_d_init+0x90>)
  401880:	015b      	lsls	r3, r3, #5
  401882:	4413      	add	r3, r2
  401884:	3314      	adds	r3, #20
  401886:	4a16      	ldr	r2, [pc, #88]	; (4018e0 <usb_d_init+0x98>)
  401888:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  40188a:	79fb      	ldrb	r3, [r7, #7]
  40188c:	4a12      	ldr	r2, [pc, #72]	; (4018d8 <usb_d_init+0x90>)
  40188e:	015b      	lsls	r3, r3, #5
  401890:	4413      	add	r3, r2
  401892:	3318      	adds	r3, #24
  401894:	4a12      	ldr	r2, [pc, #72]	; (4018e0 <usb_d_init+0x98>)
  401896:	601a      	str	r2, [r3, #0]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  401898:	79fb      	ldrb	r3, [r7, #7]
  40189a:	4a0f      	ldr	r2, [pc, #60]	; (4018d8 <usb_d_init+0x90>)
  40189c:	015b      	lsls	r3, r3, #5
  40189e:	4413      	add	r3, r2
  4018a0:	331c      	adds	r3, #28
  4018a2:	4a0f      	ldr	r2, [pc, #60]	; (4018e0 <usb_d_init+0x98>)
  4018a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  4018a6:	79fb      	ldrb	r3, [r7, #7]
  4018a8:	3301      	adds	r3, #1
  4018aa:	71fb      	strb	r3, [r7, #7]
  4018ac:	79fb      	ldrb	r3, [r7, #7]
  4018ae:	2b03      	cmp	r3, #3
  4018b0:	d9dd      	bls.n	40186e <usb_d_init+0x26>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  4018b2:	490c      	ldr	r1, [pc, #48]	; (4018e4 <usb_d_init+0x9c>)
  4018b4:	2000      	movs	r0, #0
  4018b6:	4b0c      	ldr	r3, [pc, #48]	; (4018e8 <usb_d_init+0xa0>)
  4018b8:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  4018ba:	490c      	ldr	r1, [pc, #48]	; (4018ec <usb_d_init+0xa4>)
  4018bc:	2001      	movs	r0, #1
  4018be:	4b0a      	ldr	r3, [pc, #40]	; (4018e8 <usb_d_init+0xa0>)
  4018c0:	4798      	blx	r3
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  4018c2:	490b      	ldr	r1, [pc, #44]	; (4018f0 <usb_d_init+0xa8>)
  4018c4:	2002      	movs	r0, #2
  4018c6:	4b08      	ldr	r3, [pc, #32]	; (4018e8 <usb_d_init+0xa0>)
  4018c8:	4798      	blx	r3
	return ERR_NONE;
  4018ca:	2300      	movs	r3, #0
}
  4018cc:	4618      	mov	r0, r3
  4018ce:	3708      	adds	r7, #8
  4018d0:	46bd      	mov	sp, r7
  4018d2:	bd80      	pop	{r7, pc}
  4018d4:	00404c8d 	.word	0x00404c8d
  4018d8:	20400054 	.word	0x20400054
  4018dc:	004052cf 	.word	0x004052cf
  4018e0:	00401571 	.word	0x00401571
  4018e4:	0040158d 	.word	0x0040158d
  4018e8:	004051ed 	.word	0x004051ed
  4018ec:	00401655 	.word	0x00401655
  4018f0:	00401769 	.word	0x00401769

004018f4 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
  4018f4:	b480      	push	{r7}
  4018f6:	b085      	sub	sp, #20
  4018f8:	af00      	add	r7, sp, #0
  4018fa:	4603      	mov	r3, r0
  4018fc:	60b9      	str	r1, [r7, #8]
  4018fe:	607a      	str	r2, [r7, #4]
  401900:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
  401902:	7bfb      	ldrb	r3, [r7, #15]
  401904:	f083 0301 	eor.w	r3, r3, #1
  401908:	b2db      	uxtb	r3, r3
  40190a:	2b00      	cmp	r3, #0
  40190c:	d000      	beq.n	401910 <assert+0x1c>
		__asm("BKPT #0");
  40190e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  401910:	bf00      	nop
  401912:	3714      	adds	r7, #20
  401914:	46bd      	mov	sp, r7
  401916:	f85d 7b04 	ldr.w	r7, [sp], #4
  40191a:	4770      	bx	lr

0040191c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  40191c:	b580      	push	{r7, lr}
  40191e:	b084      	sub	sp, #16
  401920:	af00      	add	r7, sp, #0
  401922:	60f8      	str	r0, [r7, #12]
  401924:	60b9      	str	r1, [r7, #8]
  401926:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
  401928:	68fb      	ldr	r3, [r7, #12]
  40192a:	2b00      	cmp	r3, #0
  40192c:	d007      	beq.n	40193e <ringbuffer_init+0x22>
  40192e:	68bb      	ldr	r3, [r7, #8]
  401930:	2b00      	cmp	r3, #0
  401932:	d004      	beq.n	40193e <ringbuffer_init+0x22>
  401934:	687b      	ldr	r3, [r7, #4]
  401936:	2b00      	cmp	r3, #0
  401938:	d001      	beq.n	40193e <ringbuffer_init+0x22>
  40193a:	2301      	movs	r3, #1
  40193c:	e000      	b.n	401940 <ringbuffer_init+0x24>
  40193e:	2300      	movs	r3, #0
  401940:	f003 0301 	and.w	r3, r3, #1
  401944:	b2db      	uxtb	r3, r3
  401946:	2232      	movs	r2, #50	; 0x32
  401948:	490f      	ldr	r1, [pc, #60]	; (401988 <ringbuffer_init+0x6c>)
  40194a:	4618      	mov	r0, r3
  40194c:	4b0f      	ldr	r3, [pc, #60]	; (40198c <ringbuffer_init+0x70>)
  40194e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  401950:	687b      	ldr	r3, [r7, #4]
  401952:	1e5a      	subs	r2, r3, #1
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	4013      	ands	r3, r2
  401958:	2b00      	cmp	r3, #0
  40195a:	d002      	beq.n	401962 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
  40195c:	f06f 030c 	mvn.w	r3, #12
  401960:	e00e      	b.n	401980 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  401962:	687b      	ldr	r3, [r7, #4]
  401964:	1e5a      	subs	r2, r3, #1
  401966:	68fb      	ldr	r3, [r7, #12]
  401968:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
  40196a:	68fb      	ldr	r3, [r7, #12]
  40196c:	2200      	movs	r2, #0
  40196e:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
  401970:	68fb      	ldr	r3, [r7, #12]
  401972:	689a      	ldr	r2, [r3, #8]
  401974:	68fb      	ldr	r3, [r7, #12]
  401976:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
  401978:	68fb      	ldr	r3, [r7, #12]
  40197a:	68ba      	ldr	r2, [r7, #8]
  40197c:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
  40197e:	2300      	movs	r3, #0
}
  401980:	4618      	mov	r0, r3
  401982:	3710      	adds	r7, #16
  401984:	46bd      	mov	sp, r7
  401986:	bd80      	pop	{r7, pc}
  401988:	0040538c 	.word	0x0040538c
  40198c:	004018f5 	.word	0x004018f5

00401990 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  401990:	b580      	push	{r7, lr}
  401992:	b082      	sub	sp, #8
  401994:	af00      	add	r7, sp, #0
  401996:	6078      	str	r0, [r7, #4]
  401998:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
  40199a:	687b      	ldr	r3, [r7, #4]
  40199c:	2b00      	cmp	r3, #0
  40199e:	d004      	beq.n	4019aa <ringbuffer_get+0x1a>
  4019a0:	683b      	ldr	r3, [r7, #0]
  4019a2:	2b00      	cmp	r3, #0
  4019a4:	d001      	beq.n	4019aa <ringbuffer_get+0x1a>
  4019a6:	2301      	movs	r3, #1
  4019a8:	e000      	b.n	4019ac <ringbuffer_get+0x1c>
  4019aa:	2300      	movs	r3, #0
  4019ac:	f003 0301 	and.w	r3, r3, #1
  4019b0:	b2db      	uxtb	r3, r3
  4019b2:	224a      	movs	r2, #74	; 0x4a
  4019b4:	4910      	ldr	r1, [pc, #64]	; (4019f8 <ringbuffer_get+0x68>)
  4019b6:	4618      	mov	r0, r3
  4019b8:	4b10      	ldr	r3, [pc, #64]	; (4019fc <ringbuffer_get+0x6c>)
  4019ba:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  4019bc:	687b      	ldr	r3, [r7, #4]
  4019be:	68da      	ldr	r2, [r3, #12]
  4019c0:	687b      	ldr	r3, [r7, #4]
  4019c2:	689b      	ldr	r3, [r3, #8]
  4019c4:	429a      	cmp	r2, r3
  4019c6:	d011      	beq.n	4019ec <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
  4019c8:	687b      	ldr	r3, [r7, #4]
  4019ca:	681a      	ldr	r2, [r3, #0]
  4019cc:	687b      	ldr	r3, [r7, #4]
  4019ce:	6899      	ldr	r1, [r3, #8]
  4019d0:	687b      	ldr	r3, [r7, #4]
  4019d2:	685b      	ldr	r3, [r3, #4]
  4019d4:	400b      	ands	r3, r1
  4019d6:	4413      	add	r3, r2
  4019d8:	781a      	ldrb	r2, [r3, #0]
  4019da:	683b      	ldr	r3, [r7, #0]
  4019dc:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
  4019de:	687b      	ldr	r3, [r7, #4]
  4019e0:	689b      	ldr	r3, [r3, #8]
  4019e2:	1c5a      	adds	r2, r3, #1
  4019e4:	687b      	ldr	r3, [r7, #4]
  4019e6:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
  4019e8:	2300      	movs	r3, #0
  4019ea:	e001      	b.n	4019f0 <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
  4019ec:	f06f 0309 	mvn.w	r3, #9
}
  4019f0:	4618      	mov	r0, r3
  4019f2:	3708      	adds	r7, #8
  4019f4:	46bd      	mov	sp, r7
  4019f6:	bd80      	pop	{r7, pc}
  4019f8:	0040538c 	.word	0x0040538c
  4019fc:	004018f5 	.word	0x004018f5

00401a00 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  401a00:	b580      	push	{r7, lr}
  401a02:	b082      	sub	sp, #8
  401a04:	af00      	add	r7, sp, #0
  401a06:	6078      	str	r0, [r7, #4]
  401a08:	460b      	mov	r3, r1
  401a0a:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
  401a0c:	687b      	ldr	r3, [r7, #4]
  401a0e:	2b00      	cmp	r3, #0
  401a10:	bf14      	ite	ne
  401a12:	2301      	movne	r3, #1
  401a14:	2300      	moveq	r3, #0
  401a16:	b2db      	uxtb	r3, r3
  401a18:	225b      	movs	r2, #91	; 0x5b
  401a1a:	4914      	ldr	r1, [pc, #80]	; (401a6c <ringbuffer_put+0x6c>)
  401a1c:	4618      	mov	r0, r3
  401a1e:	4b14      	ldr	r3, [pc, #80]	; (401a70 <ringbuffer_put+0x70>)
  401a20:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	681a      	ldr	r2, [r3, #0]
  401a26:	687b      	ldr	r3, [r7, #4]
  401a28:	68d9      	ldr	r1, [r3, #12]
  401a2a:	687b      	ldr	r3, [r7, #4]
  401a2c:	685b      	ldr	r3, [r3, #4]
  401a2e:	400b      	ands	r3, r1
  401a30:	4413      	add	r3, r2
  401a32:	78fa      	ldrb	r2, [r7, #3]
  401a34:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  401a36:	687b      	ldr	r3, [r7, #4]
  401a38:	68da      	ldr	r2, [r3, #12]
  401a3a:	687b      	ldr	r3, [r7, #4]
  401a3c:	689b      	ldr	r3, [r3, #8]
  401a3e:	1ad2      	subs	r2, r2, r3
  401a40:	687b      	ldr	r3, [r7, #4]
  401a42:	685b      	ldr	r3, [r3, #4]
  401a44:	429a      	cmp	r2, r3
  401a46:	d906      	bls.n	401a56 <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
  401a48:	687b      	ldr	r3, [r7, #4]
  401a4a:	68da      	ldr	r2, [r3, #12]
  401a4c:	687b      	ldr	r3, [r7, #4]
  401a4e:	685b      	ldr	r3, [r3, #4]
  401a50:	1ad2      	subs	r2, r2, r3
  401a52:	687b      	ldr	r3, [r7, #4]
  401a54:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
  401a56:	687b      	ldr	r3, [r7, #4]
  401a58:	68db      	ldr	r3, [r3, #12]
  401a5a:	1c5a      	adds	r2, r3, #1
  401a5c:	687b      	ldr	r3, [r7, #4]
  401a5e:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
  401a60:	2300      	movs	r3, #0
}
  401a62:	4618      	mov	r0, r3
  401a64:	3708      	adds	r7, #8
  401a66:	46bd      	mov	sp, r7
  401a68:	bd80      	pop	{r7, pc}
  401a6a:	bf00      	nop
  401a6c:	0040538c 	.word	0x0040538c
  401a70:	004018f5 	.word	0x004018f5

00401a74 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  401a74:	b580      	push	{r7, lr}
  401a76:	b082      	sub	sp, #8
  401a78:	af00      	add	r7, sp, #0
  401a7a:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
  401a7c:	687b      	ldr	r3, [r7, #4]
  401a7e:	2b00      	cmp	r3, #0
  401a80:	bf14      	ite	ne
  401a82:	2301      	movne	r3, #1
  401a84:	2300      	moveq	r3, #0
  401a86:	b2db      	uxtb	r3, r3
  401a88:	2271      	movs	r2, #113	; 0x71
  401a8a:	4906      	ldr	r1, [pc, #24]	; (401aa4 <ringbuffer_num+0x30>)
  401a8c:	4618      	mov	r0, r3
  401a8e:	4b06      	ldr	r3, [pc, #24]	; (401aa8 <ringbuffer_num+0x34>)
  401a90:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  401a92:	687b      	ldr	r3, [r7, #4]
  401a94:	68da      	ldr	r2, [r3, #12]
  401a96:	687b      	ldr	r3, [r7, #4]
  401a98:	689b      	ldr	r3, [r3, #8]
  401a9a:	1ad3      	subs	r3, r2, r3
}
  401a9c:	4618      	mov	r0, r3
  401a9e:	3708      	adds	r7, #8
  401aa0:	46bd      	mov	sp, r7
  401aa2:	bd80      	pop	{r7, pc}
  401aa4:	0040538c 	.word	0x0040538c
  401aa8:	004018f5 	.word	0x004018f5

00401aac <hri_efc_write_EEFC_FMR_FWS_bf>:
	tmp = (tmp & EEFC_FMR_FWS(mask)) >> EEFC_FMR_FWS_Pos;
	return tmp;
}

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
  401aac:	b480      	push	{r7}
  401aae:	b085      	sub	sp, #20
  401ab0:	af00      	add	r7, sp, #0
  401ab2:	6078      	str	r0, [r7, #4]
  401ab4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  401ab6:	687b      	ldr	r3, [r7, #4]
  401ab8:	681b      	ldr	r3, [r3, #0]
  401aba:	60fb      	str	r3, [r7, #12]
	tmp &= ~EEFC_FMR_FWS_Msk;
  401abc:	68fb      	ldr	r3, [r7, #12]
  401abe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  401ac2:	60fb      	str	r3, [r7, #12]
	tmp |= EEFC_FMR_FWS(data);
  401ac4:	683b      	ldr	r3, [r7, #0]
  401ac6:	021b      	lsls	r3, r3, #8
  401ac8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  401acc:	68fa      	ldr	r2, [r7, #12]
  401ace:	4313      	orrs	r3, r2
  401ad0:	60fb      	str	r3, [r7, #12]
	((Efc *)hw)->EEFC_FMR = tmp;
  401ad2:	687b      	ldr	r3, [r7, #4]
  401ad4:	68fa      	ldr	r2, [r7, #12]
  401ad6:	601a      	str	r2, [r3, #0]
	EFC_CRITICAL_SECTION_LEAVE();
}
  401ad8:	bf00      	nop
  401ada:	3714      	adds	r7, #20
  401adc:	46bd      	mov	sp, r7
  401ade:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae2:	4770      	bx	lr

00401ae4 <_fpu_enable>:

/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
  401ae4:	b580      	push	{r7, lr}
  401ae6:	b082      	sub	sp, #8
  401ae8:	af00      	add	r7, sp, #0
	CRITICAL_SECTION_ENTER()
  401aea:	1d3b      	adds	r3, r7, #4
  401aec:	4618      	mov	r0, r3
  401aee:	4b0b      	ldr	r3, [pc, #44]	; (401b1c <_fpu_enable+0x38>)
  401af0:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  401af2:	4a0b      	ldr	r2, [pc, #44]	; (401b20 <_fpu_enable+0x3c>)
  401af4:	4b0a      	ldr	r3, [pc, #40]	; (401b20 <_fpu_enable+0x3c>)
  401af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  401afa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401afe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb");
  401b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b06:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  401b0a:	1d3b      	adds	r3, r7, #4
  401b0c:	4618      	mov	r0, r3
  401b0e:	4b05      	ldr	r3, [pc, #20]	; (401b24 <_fpu_enable+0x40>)
  401b10:	4798      	blx	r3
}
  401b12:	bf00      	nop
  401b14:	3708      	adds	r7, #8
  401b16:	46bd      	mov	sp, r7
  401b18:	bd80      	pop	{r7, pc}
  401b1a:	bf00      	nop
  401b1c:	00400bb5 	.word	0x00400bb5
  401b20:	e000ed00 	.word	0xe000ed00
  401b24:	00400bdb 	.word	0x00400bdb

00401b28 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  401b28:	b580      	push	{r7, lr}
  401b2a:	af00      	add	r7, sp, #0
	_fpu_enable();
  401b2c:	4b04      	ldr	r3, [pc, #16]	; (401b40 <_init_chip+0x18>)
  401b2e:	4798      	blx	r3
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);
  401b30:	2105      	movs	r1, #5
  401b32:	4804      	ldr	r0, [pc, #16]	; (401b44 <_init_chip+0x1c>)
  401b34:	4b04      	ldr	r3, [pc, #16]	; (401b48 <_init_chip+0x20>)
  401b36:	4798      	blx	r3

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
#endif
	_pmc_init();
  401b38:	4b04      	ldr	r3, [pc, #16]	; (401b4c <_init_chip+0x24>)
  401b3a:	4798      	blx	r3
}
  401b3c:	bf00      	nop
  401b3e:	bd80      	pop	{r7, pc}
  401b40:	00401ae5 	.word	0x00401ae5
  401b44:	400e0c00 	.word	0x400e0c00
  401b48:	00401aad 	.word	0x00401aad
  401b4c:	00402591 	.word	0x00402591

00401b50 <hri_dacc_write_CHDR_reg>:
{
	((Dacc *)hw)->DACC_CHDR = mask;
}

static inline void hri_dacc_write_CHDR_reg(const void *const hw, hri_dacc_chsr_reg_t data)
{
  401b50:	b480      	push	{r7}
  401b52:	b083      	sub	sp, #12
  401b54:	af00      	add	r7, sp, #0
  401b56:	6078      	str	r0, [r7, #4]
  401b58:	6039      	str	r1, [r7, #0]
	((Dacc *)hw)->DACC_CHDR = data;
  401b5a:	687b      	ldr	r3, [r7, #4]
  401b5c:	683a      	ldr	r2, [r7, #0]
  401b5e:	615a      	str	r2, [r3, #20]
}
  401b60:	bf00      	nop
  401b62:	370c      	adds	r7, #12
  401b64:	46bd      	mov	sp, r7
  401b66:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b6a:	4770      	bx	lr

00401b6c <hri_dacc_write_CR_reg>:
{
	return ((Dacc *)hw)->DACC_ISR;
}

static inline void hri_dacc_write_CR_reg(const void *const hw, hri_dacc_cr_reg_t data)
{
  401b6c:	b480      	push	{r7}
  401b6e:	b083      	sub	sp, #12
  401b70:	af00      	add	r7, sp, #0
  401b72:	6078      	str	r0, [r7, #4]
  401b74:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_CR = data;
  401b76:	687b      	ldr	r3, [r7, #4]
  401b78:	683a      	ldr	r2, [r7, #0]
  401b7a:	601a      	str	r2, [r3, #0]
	DACC_CRITICAL_SECTION_LEAVE();
}
  401b7c:	bf00      	nop
  401b7e:	370c      	adds	r7, #12
  401b80:	46bd      	mov	sp, r7
  401b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b86:	4770      	bx	lr

00401b88 <hri_dacc_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_MR_reg(const void *const hw, hri_dacc_mr_reg_t data)
{
  401b88:	b480      	push	{r7}
  401b8a:	b083      	sub	sp, #12
  401b8c:	af00      	add	r7, sp, #0
  401b8e:	6078      	str	r0, [r7, #4]
  401b90:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_MR = data;
  401b92:	687b      	ldr	r3, [r7, #4]
  401b94:	683a      	ldr	r2, [r7, #0]
  401b96:	605a      	str	r2, [r3, #4]
	DACC_CRITICAL_SECTION_LEAVE();
}
  401b98:	bf00      	nop
  401b9a:	370c      	adds	r7, #12
  401b9c:	46bd      	mov	sp, r7
  401b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ba2:	4770      	bx	lr

00401ba4 <hri_dacc_write_TRIGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_TRIGR_reg(const void *const hw, hri_dacc_trigr_reg_t data)
{
  401ba4:	b480      	push	{r7}
  401ba6:	b083      	sub	sp, #12
  401ba8:	af00      	add	r7, sp, #0
  401baa:	6078      	str	r0, [r7, #4]
  401bac:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_TRIGR = data;
  401bae:	687b      	ldr	r3, [r7, #4]
  401bb0:	683a      	ldr	r2, [r7, #0]
  401bb2:	609a      	str	r2, [r3, #8]
	DACC_CRITICAL_SECTION_LEAVE();
}
  401bb4:	bf00      	nop
  401bb6:	370c      	adds	r7, #12
  401bb8:	46bd      	mov	sp, r7
  401bba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bbe:	4770      	bx	lr

00401bc0 <hri_dacc_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dacc_write_WPMR_reg(const void *const hw, hri_dacc_wpmr_reg_t data)
{
  401bc0:	b480      	push	{r7}
  401bc2:	b083      	sub	sp, #12
  401bc4:	af00      	add	r7, sp, #0
  401bc6:	6078      	str	r0, [r7, #4]
  401bc8:	6039      	str	r1, [r7, #0]
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_WPMR = data;
  401bca:	687b      	ldr	r3, [r7, #4]
  401bcc:	683a      	ldr	r2, [r7, #0]
  401bce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC_CRITICAL_SECTION_LEAVE();
}
  401bd2:	bf00      	nop
  401bd4:	370c      	adds	r7, #12
  401bd6:	46bd      	mov	sp, r7
  401bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bdc:	4770      	bx	lr
	...

00401be0 <_dac_sync_init>:

/**
 * \brief Initialize synchronous DAC
 */
int32_t _dac_sync_init(struct _dac_sync_device *const device, void *const hw)
{
  401be0:	b580      	push	{r7, lr}
  401be2:	b082      	sub	sp, #8
  401be4:	af00      	add	r7, sp, #0
  401be6:	6078      	str	r0, [r7, #4]
  401be8:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  401bea:	687b      	ldr	r3, [r7, #4]
  401bec:	2b00      	cmp	r3, #0
  401bee:	bf14      	ite	ne
  401bf0:	2301      	movne	r3, #1
  401bf2:	2300      	moveq	r3, #0
  401bf4:	b2db      	uxtb	r3, r3
  401bf6:	225d      	movs	r2, #93	; 0x5d
  401bf8:	4908      	ldr	r1, [pc, #32]	; (401c1c <_dac_sync_init+0x3c>)
  401bfa:	4618      	mov	r0, r3
  401bfc:	4b08      	ldr	r3, [pc, #32]	; (401c20 <_dac_sync_init+0x40>)
  401bfe:	4798      	blx	r3

	device->hw = hw;
  401c00:	687b      	ldr	r3, [r7, #4]
  401c02:	683a      	ldr	r2, [r7, #0]
  401c04:	601a      	str	r2, [r3, #0]

	return _dac_init(device->hw);
  401c06:	687b      	ldr	r3, [r7, #4]
  401c08:	681b      	ldr	r3, [r3, #0]
  401c0a:	4618      	mov	r0, r3
  401c0c:	4b05      	ldr	r3, [pc, #20]	; (401c24 <_dac_sync_init+0x44>)
  401c0e:	4798      	blx	r3
  401c10:	4603      	mov	r3, r0
}
  401c12:	4618      	mov	r0, r3
  401c14:	3708      	adds	r7, #8
  401c16:	46bd      	mov	sp, r7
  401c18:	bd80      	pop	{r7, pc}
  401c1a:	bf00      	nop
  401c1c:	004053b0 	.word	0x004053b0
  401c20:	004018f5 	.word	0x004018f5
  401c24:	00401c29 	.word	0x00401c29

00401c28 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
  401c28:	b580      	push	{r7, lr}
  401c2a:	b082      	sub	sp, #8
  401c2c:	af00      	add	r7, sp, #0
  401c2e:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  401c30:	687b      	ldr	r3, [r7, #4]
  401c32:	2b00      	cmp	r3, #0
  401c34:	bf14      	ite	ne
  401c36:	2301      	movne	r3, #1
  401c38:	2300      	moveq	r3, #0
  401c3a:	b2db      	uxtb	r3, r3
  401c3c:	f240 1201 	movw	r2, #257	; 0x101
  401c40:	490f      	ldr	r1, [pc, #60]	; (401c80 <_dac_init+0x58>)
  401c42:	4618      	mov	r0, r3
  401c44:	4b0f      	ldr	r3, [pc, #60]	; (401c84 <_dac_init+0x5c>)
  401c46:	4798      	blx	r3

	hri_dacc_write_CR_reg(hw, DACC_CR_SWRST);
  401c48:	2101      	movs	r1, #1
  401c4a:	6878      	ldr	r0, [r7, #4]
  401c4c:	4b0e      	ldr	r3, [pc, #56]	; (401c88 <_dac_init+0x60>)
  401c4e:	4798      	blx	r3
	hri_dacc_write_CHDR_reg(hw, DACC_CHDR_Msk);
  401c50:	2103      	movs	r1, #3
  401c52:	6878      	ldr	r0, [r7, #4]
  401c54:	4b0d      	ldr	r3, [pc, #52]	; (401c8c <_dac_init+0x64>)
  401c56:	4798      	blx	r3
	_dac_write_protection_disable(hw);
  401c58:	6878      	ldr	r0, [r7, #4]
  401c5a:	4b0d      	ldr	r3, [pc, #52]	; (401c90 <_dac_init+0x68>)
  401c5c:	4798      	blx	r3
	hri_dacc_write_MR_reg(hw, _dac.mr);
  401c5e:	4b0d      	ldr	r3, [pc, #52]	; (401c94 <_dac_init+0x6c>)
  401c60:	681b      	ldr	r3, [r3, #0]
  401c62:	4619      	mov	r1, r3
  401c64:	6878      	ldr	r0, [r7, #4]
  401c66:	4b0c      	ldr	r3, [pc, #48]	; (401c98 <_dac_init+0x70>)
  401c68:	4798      	blx	r3
	hri_dacc_write_TRIGR_reg(hw, _dac.trigr);
  401c6a:	4b0a      	ldr	r3, [pc, #40]	; (401c94 <_dac_init+0x6c>)
  401c6c:	685b      	ldr	r3, [r3, #4]
  401c6e:	4619      	mov	r1, r3
  401c70:	6878      	ldr	r0, [r7, #4]
  401c72:	4b0a      	ldr	r3, [pc, #40]	; (401c9c <_dac_init+0x74>)
  401c74:	4798      	blx	r3

	return ERR_NONE;
  401c76:	2300      	movs	r3, #0
}
  401c78:	4618      	mov	r0, r3
  401c7a:	3708      	adds	r7, #8
  401c7c:	46bd      	mov	sp, r7
  401c7e:	bd80      	pop	{r7, pc}
  401c80:	004053b0 	.word	0x004053b0
  401c84:	004018f5 	.word	0x004018f5
  401c88:	00401b6d 	.word	0x00401b6d
  401c8c:	00401b51 	.word	0x00401b51
  401c90:	00401ca1 	.word	0x00401ca1
  401c94:	20400000 	.word	0x20400000
  401c98:	00401b89 	.word	0x00401b89
  401c9c:	00401ba5 	.word	0x00401ba5

00401ca0 <_dac_write_protection_disable>:
 * \internal Disable DAC write protection
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _dac_write_protection_disable(void *const hw)
{
  401ca0:	b580      	push	{r7, lr}
  401ca2:	b082      	sub	sp, #8
  401ca4:	af00      	add	r7, sp, #0
  401ca6:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  401ca8:	687b      	ldr	r3, [r7, #4]
  401caa:	2b00      	cmp	r3, #0
  401cac:	bf14      	ite	ne
  401cae:	2301      	movne	r3, #1
  401cb0:	2300      	moveq	r3, #0
  401cb2:	b2db      	uxtb	r3, r3
  401cb4:	f44f 72af 	mov.w	r2, #350	; 0x15e
  401cb8:	4905      	ldr	r1, [pc, #20]	; (401cd0 <_dac_write_protection_disable+0x30>)
  401cba:	4618      	mov	r0, r3
  401cbc:	4b05      	ldr	r3, [pc, #20]	; (401cd4 <_dac_write_protection_disable+0x34>)
  401cbe:	4798      	blx	r3
	hri_dacc_write_WPMR_reg(hw, (hri_dacc_wpmr_reg_t)DACC_WPMR_WPKEY_PASSWD);
  401cc0:	4905      	ldr	r1, [pc, #20]	; (401cd8 <_dac_write_protection_disable+0x38>)
  401cc2:	6878      	ldr	r0, [r7, #4]
  401cc4:	4b05      	ldr	r3, [pc, #20]	; (401cdc <_dac_write_protection_disable+0x3c>)
  401cc6:	4798      	blx	r3
}
  401cc8:	bf00      	nop
  401cca:	3708      	adds	r7, #8
  401ccc:	46bd      	mov	sp, r7
  401cce:	bd80      	pop	{r7, pc}
  401cd0:	004053b0 	.word	0x004053b0
  401cd4:	004018f5 	.word	0x004018f5
  401cd8:	44414300 	.word	0x44414300
  401cdc:	00401bc1 	.word	0x00401bc1

00401ce0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401ce0:	b480      	push	{r7}
  401ce2:	b083      	sub	sp, #12
  401ce4:	af00      	add	r7, sp, #0
  401ce6:	4603      	mov	r3, r0
  401ce8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401cea:	4909      	ldr	r1, [pc, #36]	; (401d10 <NVIC_EnableIRQ+0x30>)
  401cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401cf0:	095b      	lsrs	r3, r3, #5
  401cf2:	79fa      	ldrb	r2, [r7, #7]
  401cf4:	f002 021f 	and.w	r2, r2, #31
  401cf8:	2001      	movs	r0, #1
  401cfa:	fa00 f202 	lsl.w	r2, r0, r2
  401cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401d02:	bf00      	nop
  401d04:	370c      	adds	r7, #12
  401d06:	46bd      	mov	sp, r7
  401d08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d0c:	4770      	bx	lr
  401d0e:	bf00      	nop
  401d10:	e000e100 	.word	0xe000e100

00401d14 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  401d14:	b480      	push	{r7}
  401d16:	b083      	sub	sp, #12
  401d18:	af00      	add	r7, sp, #0
  401d1a:	4603      	mov	r3, r0
  401d1c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401d1e:	4909      	ldr	r1, [pc, #36]	; (401d44 <NVIC_DisableIRQ+0x30>)
  401d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d24:	095b      	lsrs	r3, r3, #5
  401d26:	79fa      	ldrb	r2, [r7, #7]
  401d28:	f002 021f 	and.w	r2, r2, #31
  401d2c:	2001      	movs	r0, #1
  401d2e:	fa00 f202 	lsl.w	r2, r0, r2
  401d32:	3320      	adds	r3, #32
  401d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401d38:	bf00      	nop
  401d3a:	370c      	adds	r7, #12
  401d3c:	46bd      	mov	sp, r7
  401d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d42:	4770      	bx	lr
  401d44:	e000e100 	.word	0xe000e100

00401d48 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  401d48:	b480      	push	{r7}
  401d4a:	b083      	sub	sp, #12
  401d4c:	af00      	add	r7, sp, #0
  401d4e:	4603      	mov	r3, r0
  401d50:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401d52:	4909      	ldr	r1, [pc, #36]	; (401d78 <NVIC_ClearPendingIRQ+0x30>)
  401d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401d58:	095b      	lsrs	r3, r3, #5
  401d5a:	79fa      	ldrb	r2, [r7, #7]
  401d5c:	f002 021f 	and.w	r2, r2, #31
  401d60:	2001      	movs	r0, #1
  401d62:	fa00 f202 	lsl.w	r2, r0, r2
  401d66:	3360      	adds	r3, #96	; 0x60
  401d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  401d6c:	bf00      	nop
  401d6e:	370c      	adds	r7, #12
  401d70:	46bd      	mov	sp, r7
  401d72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d76:	4770      	bx	lr
  401d78:	e000e100 	.word	0xe000e100

00401d7c <hri_pio_read_IMR_reg>:
{
  401d7c:	b480      	push	{r7}
  401d7e:	b083      	sub	sp, #12
  401d80:	af00      	add	r7, sp, #0
  401d82:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_IMR;
  401d84:	687b      	ldr	r3, [r7, #4]
  401d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401d88:	4618      	mov	r0, r3
  401d8a:	370c      	adds	r7, #12
  401d8c:	46bd      	mov	sp, r7
  401d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d92:	4770      	bx	lr

00401d94 <hri_pio_set_AIMMR_reg>:
{
  401d94:	b480      	push	{r7}
  401d96:	b083      	sub	sp, #12
  401d98:	af00      	add	r7, sp, #0
  401d9a:	6078      	str	r0, [r7, #4]
  401d9c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_AIMER = mask;
  401d9e:	687b      	ldr	r3, [r7, #4]
  401da0:	683a      	ldr	r2, [r7, #0]
  401da2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
  401da6:	bf00      	nop
  401da8:	370c      	adds	r7, #12
  401daa:	46bd      	mov	sp, r7
  401dac:	f85d 7b04 	ldr.w	r7, [sp], #4
  401db0:	4770      	bx	lr

00401db2 <hri_pio_set_ELSR_reg>:
{
  401db2:	b480      	push	{r7}
  401db4:	b083      	sub	sp, #12
  401db6:	af00      	add	r7, sp, #0
  401db8:	6078      	str	r0, [r7, #4]
  401dba:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_LSR = mask;
  401dbc:	687b      	ldr	r3, [r7, #4]
  401dbe:	683a      	ldr	r2, [r7, #0]
  401dc0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401dc4:	bf00      	nop
  401dc6:	370c      	adds	r7, #12
  401dc8:	46bd      	mov	sp, r7
  401dca:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dce:	4770      	bx	lr

00401dd0 <hri_pio_clear_ELSR_reg>:
{
  401dd0:	b480      	push	{r7}
  401dd2:	b083      	sub	sp, #12
  401dd4:	af00      	add	r7, sp, #0
  401dd6:	6078      	str	r0, [r7, #4]
  401dd8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ESR = mask;
  401dda:	687b      	ldr	r3, [r7, #4]
  401ddc:	683a      	ldr	r2, [r7, #0]
  401dde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
  401de2:	bf00      	nop
  401de4:	370c      	adds	r7, #12
  401de6:	46bd      	mov	sp, r7
  401de8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dec:	4770      	bx	lr

00401dee <hri_pio_set_FRLHSR_reg>:
{
  401dee:	b480      	push	{r7}
  401df0:	b083      	sub	sp, #12
  401df2:	af00      	add	r7, sp, #0
  401df4:	6078      	str	r0, [r7, #4]
  401df6:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_REHLSR = mask;
  401df8:	687b      	ldr	r3, [r7, #4]
  401dfa:	683a      	ldr	r2, [r7, #0]
  401dfc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
  401e00:	bf00      	nop
  401e02:	370c      	adds	r7, #12
  401e04:	46bd      	mov	sp, r7
  401e06:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e0a:	4770      	bx	lr

00401e0c <hri_pio_clear_FRLHSR_reg>:
{
  401e0c:	b480      	push	{r7}
  401e0e:	b083      	sub	sp, #12
  401e10:	af00      	add	r7, sp, #0
  401e12:	6078      	str	r0, [r7, #4]
  401e14:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_FELLSR = mask;
  401e16:	687b      	ldr	r3, [r7, #4]
  401e18:	683a      	ldr	r2, [r7, #0]
  401e1a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
}
  401e1e:	bf00      	nop
  401e20:	370c      	adds	r7, #12
  401e22:	46bd      	mov	sp, r7
  401e24:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e28:	4770      	bx	lr

00401e2a <hri_pio_read_ISR_reg>:
{
  401e2a:	b480      	push	{r7}
  401e2c:	b083      	sub	sp, #12
  401e2e:	af00      	add	r7, sp, #0
  401e30:	6078      	str	r0, [r7, #4]
	return ((Pio *)hw)->PIO_ISR;
  401e32:	687b      	ldr	r3, [r7, #4]
  401e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401e36:	4618      	mov	r0, r3
  401e38:	370c      	adds	r7, #12
  401e3a:	46bd      	mov	sp, r7
  401e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e40:	4770      	bx	lr

00401e42 <_ffs>:
};
#endif

/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
  401e42:	b480      	push	{r7}
  401e44:	b087      	sub	sp, #28
  401e46:	af00      	add	r7, sp, #0
  401e48:	6078      	str	r0, [r7, #4]
  401e4a:	460b      	mov	r3, r1
  401e4c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  401e4e:	2300      	movs	r3, #0
  401e50:	617b      	str	r3, [r7, #20]
  401e52:	e01e      	b.n	401e92 <_ffs+0x50>
		bit = 1;
  401e54:	2301      	movs	r3, #1
  401e56:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401e58:	2300      	movs	r3, #0
  401e5a:	613b      	str	r3, [r7, #16]
  401e5c:	e013      	b.n	401e86 <_ffs+0x44>
			if (v[i] & bit) {
  401e5e:	697b      	ldr	r3, [r7, #20]
  401e60:	009b      	lsls	r3, r3, #2
  401e62:	687a      	ldr	r2, [r7, #4]
  401e64:	4413      	add	r3, r2
  401e66:	681a      	ldr	r2, [r3, #0]
  401e68:	68fb      	ldr	r3, [r7, #12]
  401e6a:	4013      	ands	r3, r2
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	d004      	beq.n	401e7a <_ffs+0x38>
				return i * 32 + j;
  401e70:	697b      	ldr	r3, [r7, #20]
  401e72:	015a      	lsls	r2, r3, #5
  401e74:	693b      	ldr	r3, [r7, #16]
  401e76:	4413      	add	r3, r2
  401e78:	e011      	b.n	401e9e <_ffs+0x5c>
			}
			bit <<= 1;
  401e7a:	68fb      	ldr	r3, [r7, #12]
  401e7c:	005b      	lsls	r3, r3, #1
  401e7e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  401e80:	693b      	ldr	r3, [r7, #16]
  401e82:	3301      	adds	r3, #1
  401e84:	613b      	str	r3, [r7, #16]
  401e86:	693b      	ldr	r3, [r7, #16]
  401e88:	2b1f      	cmp	r3, #31
  401e8a:	d9e8      	bls.n	401e5e <_ffs+0x1c>
	for (i = 0; i < len; i++) {
  401e8c:	697b      	ldr	r3, [r7, #20]
  401e8e:	3301      	adds	r3, #1
  401e90:	617b      	str	r3, [r7, #20]
  401e92:	78fa      	ldrb	r2, [r7, #3]
  401e94:	697b      	ldr	r3, [r7, #20]
  401e96:	429a      	cmp	r2, r3
  401e98:	d8dc      	bhi.n	401e54 <_ffs+0x12>
		}
	}

	return -1;
  401e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
  401e9e:	4618      	mov	r0, r3
  401ea0:	371c      	adds	r7, #28
  401ea2:	46bd      	mov	sp, r7
  401ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ea8:	4770      	bx	lr
	...

00401eac <_pio_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of hardware instance
 */
static uint8_t _pio_get_hardware_index(const void *const hw)
{
  401eac:	b580      	push	{r7, lr}
  401eae:	b082      	sub	sp, #8
  401eb0:	af00      	add	r7, sp, #0
  401eb2:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  401eb4:	687b      	ldr	r3, [r7, #4]
  401eb6:	2b00      	cmp	r3, #0
  401eb8:	bf14      	ite	ne
  401eba:	2301      	movne	r3, #1
  401ebc:	2300      	moveq	r3, #0
  401ebe:	b2db      	uxtb	r3, r3
  401ec0:	22c3      	movs	r2, #195	; 0xc3
  401ec2:	4906      	ldr	r1, [pc, #24]	; (401edc <_pio_get_hardware_index+0x30>)
  401ec4:	4618      	mov	r0, r3
  401ec6:	4b06      	ldr	r3, [pc, #24]	; (401ee0 <_pio_get_hardware_index+0x34>)
  401ec8:	4798      	blx	r3

	return ((uint32_t)hw - (uint32_t)PIOA) >> 9;
  401eca:	687a      	ldr	r2, [r7, #4]
  401ecc:	4b05      	ldr	r3, [pc, #20]	; (401ee4 <_pio_get_hardware_index+0x38>)
  401ece:	4413      	add	r3, r2
  401ed0:	0a5b      	lsrs	r3, r3, #9
  401ed2:	b2db      	uxtb	r3, r3
}
  401ed4:	4618      	mov	r0, r3
  401ed6:	3708      	adds	r7, #8
  401ed8:	46bd      	mov	sp, r7
  401eda:	bd80      	pop	{r7, pc}
  401edc:	004053e4 	.word	0x004053e4
  401ee0:	004018f5 	.word	0x004018f5
  401ee4:	bff1f200 	.word	0xbff1f200

00401ee8 <_pio_get_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The ordinal number of the given PIO hardware instance
 */
static int8_t _pio_get_index(const void *const hw)
{
  401ee8:	b580      	push	{r7, lr}
  401eea:	b084      	sub	sp, #16
  401eec:	af00      	add	r7, sp, #0
  401eee:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  401ef0:	687b      	ldr	r3, [r7, #4]
  401ef2:	2b00      	cmp	r3, #0
  401ef4:	bf14      	ite	ne
  401ef6:	2301      	movne	r3, #1
  401ef8:	2300      	moveq	r3, #0
  401efa:	b2db      	uxtb	r3, r3
  401efc:	22d1      	movs	r2, #209	; 0xd1
  401efe:	4913      	ldr	r1, [pc, #76]	; (401f4c <_pio_get_index+0x64>)
  401f00:	4618      	mov	r0, r3
  401f02:	4b13      	ldr	r3, [pc, #76]	; (401f50 <_pio_get_index+0x68>)
  401f04:	4798      	blx	r3

	uint8_t offset = _pio_get_hardware_index(hw);
  401f06:	6878      	ldr	r0, [r7, #4]
  401f08:	4b12      	ldr	r3, [pc, #72]	; (401f54 <_pio_get_index+0x6c>)
  401f0a:	4798      	blx	r3
  401f0c:	4603      	mov	r3, r0
  401f0e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401f10:	2300      	movs	r3, #0
  401f12:	73fb      	strb	r3, [r7, #15]
  401f14:	e010      	b.n	401f38 <_pio_get_index+0x50>
		if (_ext_irq[i].number == offset) {
  401f16:	7bfa      	ldrb	r2, [r7, #15]
  401f18:	490f      	ldr	r1, [pc, #60]	; (401f58 <_pio_get_index+0x70>)
  401f1a:	4613      	mov	r3, r2
  401f1c:	00db      	lsls	r3, r3, #3
  401f1e:	1a9b      	subs	r3, r3, r2
  401f20:	009b      	lsls	r3, r3, #2
  401f22:	440b      	add	r3, r1
  401f24:	781b      	ldrb	r3, [r3, #0]
  401f26:	7bba      	ldrb	r2, [r7, #14]
  401f28:	429a      	cmp	r2, r3
  401f2a:	d102      	bne.n	401f32 <_pio_get_index+0x4a>
			return i;
  401f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  401f30:	e007      	b.n	401f42 <_pio_get_index+0x5a>
	for (i = 0; i < ARRAY_SIZE(_ext_irq); i++) {
  401f32:	7bfb      	ldrb	r3, [r7, #15]
  401f34:	3301      	adds	r3, #1
  401f36:	73fb      	strb	r3, [r7, #15]
  401f38:	7bfb      	ldrb	r3, [r7, #15]
  401f3a:	2b00      	cmp	r3, #0
  401f3c:	d0eb      	beq.n	401f16 <_pio_get_index+0x2e>
		}
	}

	return ERR_INVALID_DATA;
  401f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
  401f42:	4618      	mov	r0, r3
  401f44:	3710      	adds	r7, #16
  401f46:	46bd      	mov	sp, r7
  401f48:	bd80      	pop	{r7, pc}
  401f4a:	bf00      	nop
  401f4c:	004053e4 	.word	0x004053e4
  401f50:	004018f5 	.word	0x004018f5
  401f54:	00401ead 	.word	0x00401ead
  401f58:	004053c8 	.word	0x004053c8

00401f5c <_ext_irq_handler>:

/**
 * \brief External interrupt handler
 */
static void _ext_irq_handler(void)
{
  401f5c:	b580      	push	{r7, lr}
  401f5e:	b088      	sub	sp, #32
  401f60:	af00      	add	r7, sp, #0
	uint32_t flag_total = 0, flags[5] = {
  401f62:	2300      	movs	r3, #0
  401f64:	61fb      	str	r3, [r7, #28]
  401f66:	1d3b      	adds	r3, r7, #4
  401f68:	2200      	movs	r2, #0
  401f6a:	601a      	str	r2, [r3, #0]
  401f6c:	605a      	str	r2, [r3, #4]
  401f6e:	609a      	str	r2, [r3, #8]
  401f70:	60da      	str	r2, [r3, #12]
  401f72:	611a      	str	r2, [r3, #16]
	                             0,
	                         };
	int8_t pos;

	ASSERT(callback);
  401f74:	4b36      	ldr	r3, [pc, #216]	; (402050 <_ext_irq_handler+0xf4>)
  401f76:	681b      	ldr	r3, [r3, #0]
  401f78:	2b00      	cmp	r3, #0
  401f7a:	bf14      	ite	ne
  401f7c:	2301      	movne	r3, #1
  401f7e:	2300      	moveq	r3, #0
  401f80:	b2db      	uxtb	r3, r3
  401f82:	22e9      	movs	r2, #233	; 0xe9
  401f84:	4933      	ldr	r1, [pc, #204]	; (402054 <_ext_irq_handler+0xf8>)
  401f86:	4618      	mov	r0, r3
  401f88:	4b33      	ldr	r3, [pc, #204]	; (402058 <_ext_irq_handler+0xfc>)
  401f8a:	4798      	blx	r3
	flags[0] &= hri_pio_read_IMR_reg(PIOA);
	flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	flags[1] = hri_pio_read_ISR_reg(PIOB);
  401f8c:	4833      	ldr	r0, [pc, #204]	; (40205c <_ext_irq_handler+0x100>)
  401f8e:	4b34      	ldr	r3, [pc, #208]	; (402060 <_ext_irq_handler+0x104>)
  401f90:	4798      	blx	r3
  401f92:	4603      	mov	r3, r0
  401f94:	60bb      	str	r3, [r7, #8]
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401f96:	4831      	ldr	r0, [pc, #196]	; (40205c <_ext_irq_handler+0x100>)
  401f98:	4b32      	ldr	r3, [pc, #200]	; (402064 <_ext_irq_handler+0x108>)
  401f9a:	4798      	blx	r3
  401f9c:	4602      	mov	r2, r0
  401f9e:	68bb      	ldr	r3, [r7, #8]
  401fa0:	4013      	ands	r3, r2
  401fa2:	60bb      	str	r3, [r7, #8]
	flag_total |= flags[1];
  401fa4:	68bb      	ldr	r3, [r7, #8]
  401fa6:	69fa      	ldr	r2, [r7, #28]
  401fa8:	4313      	orrs	r3, r2
  401faa:	61fb      	str	r3, [r7, #28]
	flags[4] = hri_pio_read_ISR_reg(PIOE);
	flags[4] &= hri_pio_read_IMR_reg(PIOE);
	flag_total |= flags[4];
#endif

	while (flag_total) {
  401fac:	e048      	b.n	402040 <_ext_irq_handler+0xe4>
		pos = _ffs(flags, 5);
  401fae:	1d3b      	adds	r3, r7, #4
  401fb0:	2105      	movs	r1, #5
  401fb2:	4618      	mov	r0, r3
  401fb4:	4b2c      	ldr	r3, [pc, #176]	; (402068 <_ext_irq_handler+0x10c>)
  401fb6:	4798      	blx	r3
  401fb8:	4603      	mov	r3, r0
  401fba:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  401fbc:	e029      	b.n	402012 <_ext_irq_handler+0xb6>
			callback(pos);
  401fbe:	4b24      	ldr	r3, [pc, #144]	; (402050 <_ext_irq_handler+0xf4>)
  401fc0:	681b      	ldr	r3, [r3, #0]
  401fc2:	f997 201b 	ldrsb.w	r2, [r7, #27]
  401fc6:	4610      	mov	r0, r2
  401fc8:	4798      	blx	r3

			flags[pos >> 5] &= ~(1 << (pos & 31));
  401fca:	f997 301b 	ldrsb.w	r3, [r7, #27]
  401fce:	115b      	asrs	r3, r3, #5
  401fd0:	b25b      	sxtb	r3, r3
  401fd2:	4618      	mov	r0, r3
  401fd4:	f997 301b 	ldrsb.w	r3, [r7, #27]
  401fd8:	115b      	asrs	r3, r3, #5
  401fda:	b25b      	sxtb	r3, r3
  401fdc:	009b      	lsls	r3, r3, #2
  401fde:	f107 0220 	add.w	r2, r7, #32
  401fe2:	4413      	add	r3, r2
  401fe4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  401fe8:	7efa      	ldrb	r2, [r7, #27]
  401fea:	f002 021f 	and.w	r2, r2, #31
  401fee:	2101      	movs	r1, #1
  401ff0:	fa01 f202 	lsl.w	r2, r1, r2
  401ff4:	43d2      	mvns	r2, r2
  401ff6:	401a      	ands	r2, r3
  401ff8:	0083      	lsls	r3, r0, #2
  401ffa:	f107 0120 	add.w	r1, r7, #32
  401ffe:	440b      	add	r3, r1
  402000:	f843 2c1c 	str.w	r2, [r3, #-28]
			pos = _ffs(flags, 5);
  402004:	1d3b      	adds	r3, r7, #4
  402006:	2105      	movs	r1, #5
  402008:	4618      	mov	r0, r3
  40200a:	4b17      	ldr	r3, [pc, #92]	; (402068 <_ext_irq_handler+0x10c>)
  40200c:	4798      	blx	r3
  40200e:	4603      	mov	r3, r0
  402010:	76fb      	strb	r3, [r7, #27]
		while (-1 != pos) {
  402012:	f997 301b 	ldrsb.w	r3, [r7, #27]
  402016:	f1b3 3fff 	cmp.w	r3, #4294967295
  40201a:	d1d0      	bne.n	401fbe <_ext_irq_handler+0x62>
		}
		flag_total = 0;
  40201c:	2300      	movs	r3, #0
  40201e:	61fb      	str	r3, [r7, #28]
		flags[0] &= hri_pio_read_IMR_reg(PIOA);
		flag_total |= flags[0];
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
		flags[1] = hri_pio_read_ISR_reg(PIOB);
  402020:	480e      	ldr	r0, [pc, #56]	; (40205c <_ext_irq_handler+0x100>)
  402022:	4b0f      	ldr	r3, [pc, #60]	; (402060 <_ext_irq_handler+0x104>)
  402024:	4798      	blx	r3
  402026:	4603      	mov	r3, r0
  402028:	60bb      	str	r3, [r7, #8]
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  40202a:	480c      	ldr	r0, [pc, #48]	; (40205c <_ext_irq_handler+0x100>)
  40202c:	4b0d      	ldr	r3, [pc, #52]	; (402064 <_ext_irq_handler+0x108>)
  40202e:	4798      	blx	r3
  402030:	4602      	mov	r2, r0
  402032:	68bb      	ldr	r3, [r7, #8]
  402034:	4013      	ands	r3, r2
  402036:	60bb      	str	r3, [r7, #8]
		flag_total |= flags[1];
  402038:	68bb      	ldr	r3, [r7, #8]
  40203a:	69fa      	ldr	r2, [r7, #28]
  40203c:	4313      	orrs	r3, r2
  40203e:	61fb      	str	r3, [r7, #28]
	while (flag_total) {
  402040:	69fb      	ldr	r3, [r7, #28]
  402042:	2b00      	cmp	r3, #0
  402044:	d1b3      	bne.n	401fae <_ext_irq_handler+0x52>
		flags[4] = hri_pio_read_ISR_reg(PIOE);
		flags[4] &= hri_pio_read_IMR_reg(PIOE);
		flag_total |= flags[4];
#endif
	}
}
  402046:	bf00      	nop
  402048:	3720      	adds	r7, #32
  40204a:	46bd      	mov	sp, r7
  40204c:	bd80      	pop	{r7, pc}
  40204e:	bf00      	nop
  402050:	204000d4 	.word	0x204000d4
  402054:	004053e4 	.word	0x004053e4
  402058:	004018f5 	.word	0x004018f5
  40205c:	400e1000 	.word	0x400e1000
  402060:	00401e2b 	.word	0x00401e2b
  402064:	00401d7d 	.word	0x00401d7d
  402068:	00401e43 	.word	0x00401e43

0040206c <PIOB_Handler>:

void PIOB_Handler(void)
{
  40206c:	b580      	push	{r7, lr}
  40206e:	af00      	add	r7, sp, #0
	_ext_irq_handler();
  402070:	4b01      	ldr	r3, [pc, #4]	; (402078 <PIOB_Handler+0xc>)
  402072:	4798      	blx	r3
}
  402074:	bf00      	nop
  402076:	bd80      	pop	{r7, pc}
  402078:	00401f5d 	.word	0x00401f5d

0040207c <_pio_init>:
 * \return The status of instance initial
 * \retval ERR_NONE Initial status OK
 * \retval ERR_DENIED No need to initial
 */
static int32_t _pio_init(void *const hw)
{
  40207c:	b580      	push	{r7, lr}
  40207e:	b084      	sub	sp, #16
  402080:	af00      	add	r7, sp, #0
  402082:	6078      	str	r0, [r7, #4]
	int8_t i;

	ASSERT(hw);
  402084:	687b      	ldr	r3, [r7, #4]
  402086:	2b00      	cmp	r3, #0
  402088:	bf14      	ite	ne
  40208a:	2301      	movne	r3, #1
  40208c:	2300      	moveq	r3, #0
  40208e:	b2db      	uxtb	r3, r3
  402090:	f240 1245 	movw	r2, #325	; 0x145
  402094:	4933      	ldr	r1, [pc, #204]	; (402164 <_pio_init+0xe8>)
  402096:	4618      	mov	r0, r3
  402098:	4b33      	ldr	r3, [pc, #204]	; (402168 <_pio_init+0xec>)
  40209a:	4798      	blx	r3

	i = _pio_get_index(hw);
  40209c:	6878      	ldr	r0, [r7, #4]
  40209e:	4b33      	ldr	r3, [pc, #204]	; (40216c <_pio_init+0xf0>)
  4020a0:	4798      	blx	r3
  4020a2:	4603      	mov	r3, r0
  4020a4:	73fb      	strb	r3, [r7, #15]
	if (i < 0) {
  4020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	da02      	bge.n	4020b4 <_pio_init+0x38>
		return ERR_DENIED;
  4020ae:	f06f 0310 	mvn.w	r3, #16
  4020b2:	e053      	b.n	40215c <_pio_init+0xe0>
	}

	hri_pio_set_AIMMR_reg(hw, _ext_irq[i].add_irq_enable);
  4020b4:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4020b8:	492d      	ldr	r1, [pc, #180]	; (402170 <_pio_init+0xf4>)
  4020ba:	4613      	mov	r3, r2
  4020bc:	00db      	lsls	r3, r3, #3
  4020be:	1a9b      	subs	r3, r3, r2
  4020c0:	009b      	lsls	r3, r3, #2
  4020c2:	440b      	add	r3, r1
  4020c4:	3308      	adds	r3, #8
  4020c6:	681b      	ldr	r3, [r3, #0]
  4020c8:	4619      	mov	r1, r3
  4020ca:	6878      	ldr	r0, [r7, #4]
  4020cc:	4b29      	ldr	r3, [pc, #164]	; (402174 <_pio_init+0xf8>)
  4020ce:	4798      	blx	r3
	hri_pio_clear_ELSR_reg(hw, _ext_irq[i].esr);
  4020d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4020d4:	4926      	ldr	r1, [pc, #152]	; (402170 <_pio_init+0xf4>)
  4020d6:	4613      	mov	r3, r2
  4020d8:	00db      	lsls	r3, r3, #3
  4020da:	1a9b      	subs	r3, r3, r2
  4020dc:	009b      	lsls	r3, r3, #2
  4020de:	440b      	add	r3, r1
  4020e0:	330c      	adds	r3, #12
  4020e2:	681b      	ldr	r3, [r3, #0]
  4020e4:	4619      	mov	r1, r3
  4020e6:	6878      	ldr	r0, [r7, #4]
  4020e8:	4b23      	ldr	r3, [pc, #140]	; (402178 <_pio_init+0xfc>)
  4020ea:	4798      	blx	r3
	hri_pio_set_ELSR_reg(hw, _ext_irq[i].lsr);
  4020ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
  4020f0:	491f      	ldr	r1, [pc, #124]	; (402170 <_pio_init+0xf4>)
  4020f2:	4613      	mov	r3, r2
  4020f4:	00db      	lsls	r3, r3, #3
  4020f6:	1a9b      	subs	r3, r3, r2
  4020f8:	009b      	lsls	r3, r3, #2
  4020fa:	440b      	add	r3, r1
  4020fc:	3310      	adds	r3, #16
  4020fe:	681b      	ldr	r3, [r3, #0]
  402100:	4619      	mov	r1, r3
  402102:	6878      	ldr	r0, [r7, #4]
  402104:	4b1d      	ldr	r3, [pc, #116]	; (40217c <_pio_init+0x100>)
  402106:	4798      	blx	r3
	hri_pio_clear_FRLHSR_reg(hw, _ext_irq[i].fellsr);
  402108:	2300      	movs	r3, #0
  40210a:	4619      	mov	r1, r3
  40210c:	6878      	ldr	r0, [r7, #4]
  40210e:	4b1c      	ldr	r3, [pc, #112]	; (402180 <_pio_init+0x104>)
  402110:	4798      	blx	r3
	hri_pio_set_FRLHSR_reg(hw, _ext_irq[i].rehlsr);
  402112:	f997 200f 	ldrsb.w	r2, [r7, #15]
  402116:	4916      	ldr	r1, [pc, #88]	; (402170 <_pio_init+0xf4>)
  402118:	4613      	mov	r3, r2
  40211a:	00db      	lsls	r3, r3, #3
  40211c:	1a9b      	subs	r3, r3, r2
  40211e:	009b      	lsls	r3, r3, #2
  402120:	440b      	add	r3, r1
  402122:	3314      	adds	r3, #20
  402124:	681b      	ldr	r3, [r3, #0]
  402126:	4619      	mov	r1, r3
  402128:	6878      	ldr	r0, [r7, #4]
  40212a:	4b16      	ldr	r3, [pc, #88]	; (402184 <_pio_init+0x108>)
  40212c:	4798      	blx	r3

	i = _pio_get_hardware_index(hw) + PIOA_IRQn;
  40212e:	6878      	ldr	r0, [r7, #4]
  402130:	4b15      	ldr	r3, [pc, #84]	; (402188 <_pio_init+0x10c>)
  402132:	4798      	blx	r3
  402134:	4603      	mov	r3, r0
  402136:	330a      	adds	r3, #10
  402138:	b2db      	uxtb	r3, r3
  40213a:	73fb      	strb	r3, [r7, #15]
	NVIC_DisableIRQ(i);
  40213c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402140:	4618      	mov	r0, r3
  402142:	4b12      	ldr	r3, [pc, #72]	; (40218c <_pio_init+0x110>)
  402144:	4798      	blx	r3
	NVIC_ClearPendingIRQ(i);
  402146:	f997 300f 	ldrsb.w	r3, [r7, #15]
  40214a:	4618      	mov	r0, r3
  40214c:	4b10      	ldr	r3, [pc, #64]	; (402190 <_pio_init+0x114>)
  40214e:	4798      	blx	r3
	NVIC_EnableIRQ(i);
  402150:	f997 300f 	ldrsb.w	r3, [r7, #15]
  402154:	4618      	mov	r0, r3
  402156:	4b0f      	ldr	r3, [pc, #60]	; (402194 <_pio_init+0x118>)
  402158:	4798      	blx	r3

	return ERR_NONE;
  40215a:	2300      	movs	r3, #0
}
  40215c:	4618      	mov	r0, r3
  40215e:	3710      	adds	r7, #16
  402160:	46bd      	mov	sp, r7
  402162:	bd80      	pop	{r7, pc}
  402164:	004053e4 	.word	0x004053e4
  402168:	004018f5 	.word	0x004018f5
  40216c:	00401ee9 	.word	0x00401ee9
  402170:	004053c8 	.word	0x004053c8
  402174:	00401d95 	.word	0x00401d95
  402178:	00401dd1 	.word	0x00401dd1
  40217c:	00401db3 	.word	0x00401db3
  402180:	00401e0d 	.word	0x00401e0d
  402184:	00401def 	.word	0x00401def
  402188:	00401ead 	.word	0x00401ead
  40218c:	00401d15 	.word	0x00401d15
  402190:	00401d49 	.word	0x00401d49
  402194:	00401ce1 	.word	0x00401ce1

00402198 <_ext_irq_init>:

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  402198:	b580      	push	{r7, lr}
  40219a:	b082      	sub	sp, #8
  40219c:	af00      	add	r7, sp, #0
  40219e:	6078      	str	r0, [r7, #4]
#if CONF_EXTIRQ_0_ENABLE == 1 && defined(PIOA)
	_pio_init(PIOA);
#endif

#if CONF_EXTIRQ_1_ENABLE == 1 && defined(PIOB)
	_pio_init(PIOB);
  4021a0:	4805      	ldr	r0, [pc, #20]	; (4021b8 <_ext_irq_init+0x20>)
  4021a2:	4b06      	ldr	r3, [pc, #24]	; (4021bc <_ext_irq_init+0x24>)
  4021a4:	4798      	blx	r3

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  4021a6:	4a06      	ldr	r2, [pc, #24]	; (4021c0 <_ext_irq_init+0x28>)
  4021a8:	687b      	ldr	r3, [r7, #4]
  4021aa:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
  4021ac:	2300      	movs	r3, #0
}
  4021ae:	4618      	mov	r0, r3
  4021b0:	3708      	adds	r7, #8
  4021b2:	46bd      	mov	sp, r7
  4021b4:	bd80      	pop	{r7, pc}
  4021b6:	bf00      	nop
  4021b8:	400e1000 	.word	0x400e1000
  4021bc:	0040207d 	.word	0x0040207d
  4021c0:	204000d4 	.word	0x204000d4

004021c4 <hri_pmc_write_CKGR_UCKR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_CKGR_UCKR_reg(const void *const hw, hri_pmc_ckgr_uckr_reg_t data)
{
  4021c4:	b480      	push	{r7}
  4021c6:	b083      	sub	sp, #12
  4021c8:	af00      	add	r7, sp, #0
  4021ca:	6078      	str	r0, [r7, #4]
  4021cc:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_UCKR = data;
  4021ce:	687b      	ldr	r3, [r7, #4]
  4021d0:	683a      	ldr	r2, [r7, #0]
  4021d2:	61da      	str	r2, [r3, #28]
	PMC_CRITICAL_SECTION_LEAVE();
}
  4021d4:	bf00      	nop
  4021d6:	370c      	adds	r7, #12
  4021d8:	46bd      	mov	sp, r7
  4021da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4021de:	4770      	bx	lr

004021e0 <hri_pmc_set_CKGR_MOR_reg>:
	tmp = (tmp & CKGR_MOR_KEY_Msk) >> CKGR_MOR_KEY_Pos;
	return tmp;
}

static inline void hri_pmc_set_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t mask)
{
  4021e0:	b480      	push	{r7}
  4021e2:	b083      	sub	sp, #12
  4021e4:	af00      	add	r7, sp, #0
  4021e6:	6078      	str	r0, [r7, #4]
  4021e8:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR |= mask;
  4021ea:	687b      	ldr	r3, [r7, #4]
  4021ec:	6a1a      	ldr	r2, [r3, #32]
  4021ee:	683b      	ldr	r3, [r7, #0]
  4021f0:	431a      	orrs	r2, r3
  4021f2:	687b      	ldr	r3, [r7, #4]
  4021f4:	621a      	str	r2, [r3, #32]
	PMC_CRITICAL_SECTION_LEAVE();
}
  4021f6:	bf00      	nop
  4021f8:	370c      	adds	r7, #12
  4021fa:	46bd      	mov	sp, r7
  4021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402200:	4770      	bx	lr

00402202 <hri_pmc_write_CKGR_MOR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_CKGR_MOR_reg(const void *const hw, hri_pmc_ckgr_mor_reg_t data)
{
  402202:	b480      	push	{r7}
  402204:	b083      	sub	sp, #12
  402206:	af00      	add	r7, sp, #0
  402208:	6078      	str	r0, [r7, #4]
  40220a:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_MOR = data;
  40220c:	687b      	ldr	r3, [r7, #4]
  40220e:	683a      	ldr	r2, [r7, #0]
  402210:	621a      	str	r2, [r3, #32]
	PMC_CRITICAL_SECTION_LEAVE();
}
  402212:	bf00      	nop
  402214:	370c      	adds	r7, #12
  402216:	46bd      	mov	sp, r7
  402218:	f85d 7b04 	ldr.w	r7, [sp], #4
  40221c:	4770      	bx	lr

0040221e <hri_pmc_read_CKGR_MOR_reg>:
	((Pmc *)hw)->CKGR_MOR ^= mask;
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
  40221e:	b480      	push	{r7}
  402220:	b083      	sub	sp, #12
  402222:	af00      	add	r7, sp, #0
  402224:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->CKGR_MOR;
  402226:	687b      	ldr	r3, [r7, #4]
  402228:	6a1b      	ldr	r3, [r3, #32]
}
  40222a:	4618      	mov	r0, r3
  40222c:	370c      	adds	r7, #12
  40222e:	46bd      	mov	sp, r7
  402230:	f85d 7b04 	ldr.w	r7, [sp], #4
  402234:	4770      	bx	lr
	...

00402238 <hri_pmc_write_CKGR_PLLAR_MULA_bf>:
	tmp = (tmp & CKGR_PLLAR_MULA(mask)) >> CKGR_PLLAR_MULA_Pos;
	return tmp;
}

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
  402238:	b480      	push	{r7}
  40223a:	b085      	sub	sp, #20
  40223c:	af00      	add	r7, sp, #0
  40223e:	6078      	str	r0, [r7, #4]
  402240:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  402242:	687b      	ldr	r3, [r7, #4]
  402244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402246:	60fb      	str	r3, [r7, #12]
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  402248:	68fa      	ldr	r2, [r7, #12]
  40224a:	4b09      	ldr	r3, [pc, #36]	; (402270 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x38>)
  40224c:	4013      	ands	r3, r2
  40224e:	60fb      	str	r3, [r7, #12]
	tmp |= CKGR_PLLAR_MULA(data);
  402250:	683b      	ldr	r3, [r7, #0]
  402252:	041a      	lsls	r2, r3, #16
  402254:	4b07      	ldr	r3, [pc, #28]	; (402274 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x3c>)
  402256:	4013      	ands	r3, r2
  402258:	68fa      	ldr	r2, [r7, #12]
  40225a:	4313      	orrs	r3, r2
  40225c:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  40225e:	687b      	ldr	r3, [r7, #4]
  402260:	68fa      	ldr	r2, [r7, #12]
  402262:	629a      	str	r2, [r3, #40]	; 0x28
	PMC_CRITICAL_SECTION_LEAVE();
}
  402264:	bf00      	nop
  402266:	3714      	adds	r7, #20
  402268:	46bd      	mov	sp, r7
  40226a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40226e:	4770      	bx	lr
  402270:	f800ffff 	.word	0xf800ffff
  402274:	07ff0000 	.word	0x07ff0000

00402278 <hri_pmc_write_CKGR_PLLAR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
  402278:	b480      	push	{r7}
  40227a:	b083      	sub	sp, #12
  40227c:	af00      	add	r7, sp, #0
  40227e:	6078      	str	r0, [r7, #4]
  402280:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  402282:	687b      	ldr	r3, [r7, #4]
  402284:	683a      	ldr	r2, [r7, #0]
  402286:	629a      	str	r2, [r3, #40]	; 0x28
	PMC_CRITICAL_SECTION_LEAVE();
}
  402288:	bf00      	nop
  40228a:	370c      	adds	r7, #12
  40228c:	46bd      	mov	sp, r7
  40228e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402292:	4770      	bx	lr

00402294 <hri_pmc_write_MCKR_UPLLDIV2_bit>:
	tmp = (tmp & PMC_MCKR_UPLLDIV2) >> PMC_MCKR_UPLLDIV2_Pos;
	return (bool)tmp;
}

static inline void hri_pmc_write_MCKR_UPLLDIV2_bit(const void *const hw, bool value)
{
  402294:	b480      	push	{r7}
  402296:	b085      	sub	sp, #20
  402298:	af00      	add	r7, sp, #0
  40229a:	6078      	str	r0, [r7, #4]
  40229c:	460b      	mov	r3, r1
  40229e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4022a0:	687b      	ldr	r3, [r7, #4]
  4022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4022a4:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_UPLLDIV2;
  4022a6:	68fb      	ldr	r3, [r7, #12]
  4022a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4022ac:	60fb      	str	r3, [r7, #12]
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  4022ae:	78fb      	ldrb	r3, [r7, #3]
  4022b0:	035b      	lsls	r3, r3, #13
  4022b2:	461a      	mov	r2, r3
  4022b4:	68fb      	ldr	r3, [r7, #12]
  4022b6:	4313      	orrs	r3, r2
  4022b8:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  4022ba:	687b      	ldr	r3, [r7, #4]
  4022bc:	68fa      	ldr	r2, [r7, #12]
  4022be:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  4022c0:	bf00      	nop
  4022c2:	3714      	adds	r7, #20
  4022c4:	46bd      	mov	sp, r7
  4022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022ca:	4770      	bx	lr

004022cc <hri_pmc_write_MCKR_CSS_bf>:
	tmp = (tmp & PMC_MCKR_CSS(mask)) >> PMC_MCKR_CSS_Pos;
	return tmp;
}

static inline void hri_pmc_write_MCKR_CSS_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
  4022cc:	b480      	push	{r7}
  4022ce:	b085      	sub	sp, #20
  4022d0:	af00      	add	r7, sp, #0
  4022d2:	6078      	str	r0, [r7, #4]
  4022d4:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4022d6:	687b      	ldr	r3, [r7, #4]
  4022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4022da:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_CSS_Msk;
  4022dc:	68fb      	ldr	r3, [r7, #12]
  4022de:	f023 0303 	bic.w	r3, r3, #3
  4022e2:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_CSS(data);
  4022e4:	683b      	ldr	r3, [r7, #0]
  4022e6:	f003 0303 	and.w	r3, r3, #3
  4022ea:	68fa      	ldr	r2, [r7, #12]
  4022ec:	4313      	orrs	r3, r2
  4022ee:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  4022f0:	687b      	ldr	r3, [r7, #4]
  4022f2:	68fa      	ldr	r2, [r7, #12]
  4022f4:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  4022f6:	bf00      	nop
  4022f8:	3714      	adds	r7, #20
  4022fa:	46bd      	mov	sp, r7
  4022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  402300:	4770      	bx	lr

00402302 <hri_pmc_write_MCKR_PRES_bf>:
	tmp = (tmp & PMC_MCKR_PRES(mask)) >> PMC_MCKR_PRES_Pos;
	return tmp;
}

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
  402302:	b480      	push	{r7}
  402304:	b085      	sub	sp, #20
  402306:	af00      	add	r7, sp, #0
  402308:	6078      	str	r0, [r7, #4]
  40230a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40230c:	687b      	ldr	r3, [r7, #4]
  40230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402310:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_PRES_Msk;
  402312:	68fb      	ldr	r3, [r7, #12]
  402314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402318:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_PRES(data);
  40231a:	683b      	ldr	r3, [r7, #0]
  40231c:	011b      	lsls	r3, r3, #4
  40231e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402322:	68fa      	ldr	r2, [r7, #12]
  402324:	4313      	orrs	r3, r2
  402326:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  402328:	687b      	ldr	r3, [r7, #4]
  40232a:	68fa      	ldr	r2, [r7, #12]
  40232c:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  40232e:	bf00      	nop
  402330:	3714      	adds	r7, #20
  402332:	46bd      	mov	sp, r7
  402334:	f85d 7b04 	ldr.w	r7, [sp], #4
  402338:	4770      	bx	lr

0040233a <hri_pmc_write_MCKR_MDIV_bf>:
	tmp = (tmp & PMC_MCKR_MDIV(mask)) >> PMC_MCKR_MDIV_Pos;
	return tmp;
}

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
  40233a:	b480      	push	{r7}
  40233c:	b085      	sub	sp, #20
  40233e:	af00      	add	r7, sp, #0
  402340:	6078      	str	r0, [r7, #4]
  402342:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  402344:	687b      	ldr	r3, [r7, #4]
  402346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402348:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40234a:	68fb      	ldr	r3, [r7, #12]
  40234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402350:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_MDIV(data);
  402352:	683b      	ldr	r3, [r7, #0]
  402354:	021b      	lsls	r3, r3, #8
  402356:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40235a:	68fa      	ldr	r2, [r7, #12]
  40235c:	4313      	orrs	r3, r2
  40235e:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  402360:	687b      	ldr	r3, [r7, #4]
  402362:	68fa      	ldr	r2, [r7, #12]
  402364:	631a      	str	r2, [r3, #48]	; 0x30
	PMC_CRITICAL_SECTION_LEAVE();
}
  402366:	bf00      	nop
  402368:	3714      	adds	r7, #20
  40236a:	46bd      	mov	sp, r7
  40236c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402370:	4770      	bx	lr

00402372 <hri_pmc_get_SR_MOSCXTS_bit>:
{
	return ((Pmc *)hw)->PMC_PMMR;
}

static inline bool hri_pmc_get_SR_MOSCXTS_bit(const void *const hw)
{
  402372:	b480      	push	{r7}
  402374:	b083      	sub	sp, #12
  402376:	af00      	add	r7, sp, #0
  402378:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  40237a:	687b      	ldr	r3, [r7, #4]
  40237c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40237e:	f003 0301 	and.w	r3, r3, #1
  402382:	2b00      	cmp	r3, #0
  402384:	bf14      	ite	ne
  402386:	2301      	movne	r3, #1
  402388:	2300      	moveq	r3, #0
  40238a:	b2db      	uxtb	r3, r3
}
  40238c:	4618      	mov	r0, r3
  40238e:	370c      	adds	r7, #12
  402390:	46bd      	mov	sp, r7
  402392:	f85d 7b04 	ldr.w	r7, [sp], #4
  402396:	4770      	bx	lr

00402398 <hri_pmc_get_SR_LOCKA_bit>:

static inline bool hri_pmc_get_SR_LOCKA_bit(const void *const hw)
{
  402398:	b480      	push	{r7}
  40239a:	b083      	sub	sp, #12
  40239c:	af00      	add	r7, sp, #0
  40239e:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4023a0:	687b      	ldr	r3, [r7, #4]
  4023a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023a4:	f003 0302 	and.w	r3, r3, #2
  4023a8:	2b00      	cmp	r3, #0
  4023aa:	bf14      	ite	ne
  4023ac:	2301      	movne	r3, #1
  4023ae:	2300      	moveq	r3, #0
  4023b0:	b2db      	uxtb	r3, r3
}
  4023b2:	4618      	mov	r0, r3
  4023b4:	370c      	adds	r7, #12
  4023b6:	46bd      	mov	sp, r7
  4023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023bc:	4770      	bx	lr

004023be <hri_pmc_get_SR_MCKRDY_bit>:

static inline bool hri_pmc_get_SR_MCKRDY_bit(const void *const hw)
{
  4023be:	b480      	push	{r7}
  4023c0:	b083      	sub	sp, #12
  4023c2:	af00      	add	r7, sp, #0
  4023c4:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4023c6:	687b      	ldr	r3, [r7, #4]
  4023c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023ca:	f003 0308 	and.w	r3, r3, #8
  4023ce:	2b00      	cmp	r3, #0
  4023d0:	bf14      	ite	ne
  4023d2:	2301      	movne	r3, #1
  4023d4:	2300      	moveq	r3, #0
  4023d6:	b2db      	uxtb	r3, r3
}
  4023d8:	4618      	mov	r0, r3
  4023da:	370c      	adds	r7, #12
  4023dc:	46bd      	mov	sp, r7
  4023de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023e2:	4770      	bx	lr

004023e4 <hri_pmc_get_SR_LOCKU_bit>:

static inline bool hri_pmc_get_SR_LOCKU_bit(const void *const hw)
{
  4023e4:	b480      	push	{r7}
  4023e6:	b083      	sub	sp, #12
  4023e8:	af00      	add	r7, sp, #0
  4023ea:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  4023ec:	687b      	ldr	r3, [r7, #4]
  4023ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4023f4:	2b00      	cmp	r3, #0
  4023f6:	bf14      	ite	ne
  4023f8:	2301      	movne	r3, #1
  4023fa:	2300      	moveq	r3, #0
  4023fc:	b2db      	uxtb	r3, r3
}
  4023fe:	4618      	mov	r0, r3
  402400:	370c      	adds	r7, #12
  402402:	46bd      	mov	sp, r7
  402404:	f85d 7b04 	ldr.w	r7, [sp], #4
  402408:	4770      	bx	lr
	...

0040240c <_pmc_init_sources>:
 * \brief Initializes clock generators
 *
 * All clock sources are running when this function returns.
 */
static void _pmc_init_sources(void)
{
  40240c:	b580      	push	{r7, lr}
  40240e:	b082      	sub	sp, #8
  402410:	af00      	add	r7, sp, #0
	uint32_t data = 0;
  402412:	2300      	movs	r3, #0
  402414:	607b      	str	r3, [r7, #4]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  402416:	4826      	ldr	r0, [pc, #152]	; (4024b0 <_pmc_init_sources+0xa4>)
  402418:	4b26      	ldr	r3, [pc, #152]	; (4024b4 <_pmc_init_sources+0xa8>)
  40241a:	4798      	blx	r3
  40241c:	4603      	mov	r3, r0
  40241e:	f023 0302 	bic.w	r3, r3, #2
  402422:	607b      	str	r3, [r7, #4]
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  402424:	687a      	ldr	r2, [r7, #4]
  402426:	4b24      	ldr	r3, [pc, #144]	; (4024b8 <_pmc_init_sources+0xac>)
  402428:	4313      	orrs	r3, r2
  40242a:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
  40242c:	6879      	ldr	r1, [r7, #4]
  40242e:	4820      	ldr	r0, [pc, #128]	; (4024b0 <_pmc_init_sources+0xa4>)
  402430:	4b22      	ldr	r3, [pc, #136]	; (4024bc <_pmc_init_sources+0xb0>)
  402432:	4798      	blx	r3
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  402434:	bf00      	nop
  402436:	481e      	ldr	r0, [pc, #120]	; (4024b0 <_pmc_init_sources+0xa4>)
  402438:	4b21      	ldr	r3, [pc, #132]	; (4024c0 <_pmc_init_sources+0xb4>)
  40243a:	4798      	blx	r3
  40243c:	4603      	mov	r3, r0
  40243e:	f083 0301 	eor.w	r3, r3, #1
  402442:	b2db      	uxtb	r3, r3
  402444:	2b00      	cmp	r3, #0
  402446:	d1f6      	bne.n	402436 <_pmc_init_sources+0x2a>
		/* Wait until the XTAL to stabilize */
	}
	hri_pmc_set_CKGR_MOR_reg(PMC, CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL);
  402448:	491e      	ldr	r1, [pc, #120]	; (4024c4 <_pmc_init_sources+0xb8>)
  40244a:	4819      	ldr	r0, [pc, #100]	; (4024b0 <_pmc_init_sources+0xa4>)
  40244c:	4b1e      	ldr	r3, [pc, #120]	; (4024c8 <_pmc_init_sources+0xbc>)
  40244e:	4798      	blx	r3
#endif
#endif
#endif

#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  402450:	4b1e      	ldr	r3, [pc, #120]	; (4024cc <_pmc_init_sources+0xc0>)
  402452:	607b      	str	r3, [r7, #4]
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
  402454:	2100      	movs	r1, #0
  402456:	4816      	ldr	r0, [pc, #88]	; (4024b0 <_pmc_init_sources+0xa4>)
  402458:	4b1d      	ldr	r3, [pc, #116]	; (4024d0 <_pmc_init_sources+0xc4>)
  40245a:	4798      	blx	r3
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
  40245c:	687b      	ldr	r3, [r7, #4]
  40245e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402462:	4619      	mov	r1, r3
  402464:	4812      	ldr	r0, [pc, #72]	; (4024b0 <_pmc_init_sources+0xa4>)
  402466:	4b1b      	ldr	r3, [pc, #108]	; (4024d4 <_pmc_init_sources+0xc8>)
  402468:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  40246a:	bf00      	nop
  40246c:	4810      	ldr	r0, [pc, #64]	; (4024b0 <_pmc_init_sources+0xa4>)
  40246e:	4b1a      	ldr	r3, [pc, #104]	; (4024d8 <_pmc_init_sources+0xcc>)
  402470:	4798      	blx	r3
  402472:	4603      	mov	r3, r0
  402474:	f083 0301 	eor.w	r3, r3, #1
  402478:	b2db      	uxtb	r3, r3
  40247a:	2b00      	cmp	r3, #0
  40247c:	d1f6      	bne.n	40246c <_pmc_init_sources+0x60>
		/* Wait until PLLACK stabilize */
	}
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40247e:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
  402482:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
  402484:	687b      	ldr	r3, [r7, #4]
  402486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40248a:	4619      	mov	r1, r3
  40248c:	4808      	ldr	r0, [pc, #32]	; (4024b0 <_pmc_init_sources+0xa4>)
  40248e:	4b13      	ldr	r3, [pc, #76]	; (4024dc <_pmc_init_sources+0xd0>)
  402490:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  402492:	bf00      	nop
  402494:	4806      	ldr	r0, [pc, #24]	; (4024b0 <_pmc_init_sources+0xa4>)
  402496:	4b12      	ldr	r3, [pc, #72]	; (4024e0 <_pmc_init_sources+0xd4>)
  402498:	4798      	blx	r3
  40249a:	4603      	mov	r3, r0
  40249c:	f083 0301 	eor.w	r3, r3, #1
  4024a0:	b2db      	uxtb	r3, r3
  4024a2:	2b00      	cmp	r3, #0
  4024a4:	d1f6      	bne.n	402494 <_pmc_init_sources+0x88>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4024a6:	bf00      	nop
  4024a8:	3708      	adds	r7, #8
  4024aa:	46bd      	mov	sp, r7
  4024ac:	bd80      	pop	{r7, pc}
  4024ae:	bf00      	nop
  4024b0:	400e0600 	.word	0x400e0600
  4024b4:	0040221f 	.word	0x0040221f
  4024b8:	00373e01 	.word	0x00373e01
  4024bc:	00402203 	.word	0x00402203
  4024c0:	00402373 	.word	0x00402373
  4024c4:	01370000 	.word	0x01370000
  4024c8:	004021e1 	.word	0x004021e1
  4024cc:	00183f01 	.word	0x00183f01
  4024d0:	00402239 	.word	0x00402239
  4024d4:	00402279 	.word	0x00402279
  4024d8:	00402399 	.word	0x00402399
  4024dc:	004021c5 	.word	0x004021c5
  4024e0:	004023e5 	.word	0x004023e5

004024e4 <_pmc_init_master_clock>:
 * \brief Initializes master clock generators
 *
 * Master clock are running when this function returns.
 */
static void _pmc_init_master_clock(void)
{
  4024e4:	b580      	push	{r7, lr}
  4024e6:	af00      	add	r7, sp, #0
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
  4024e8:	2101      	movs	r1, #1
  4024ea:	481c      	ldr	r0, [pc, #112]	; (40255c <_pmc_init_master_clock+0x78>)
  4024ec:	4b1c      	ldr	r3, [pc, #112]	; (402560 <_pmc_init_master_clock+0x7c>)
  4024ee:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4024f0:	bf00      	nop
  4024f2:	481a      	ldr	r0, [pc, #104]	; (40255c <_pmc_init_master_clock+0x78>)
  4024f4:	4b1b      	ldr	r3, [pc, #108]	; (402564 <_pmc_init_master_clock+0x80>)
  4024f6:	4798      	blx	r3
  4024f8:	4603      	mov	r3, r0
  4024fa:	f083 0301 	eor.w	r3, r3, #1
  4024fe:	b2db      	uxtb	r3, r3
  402500:	2b00      	cmp	r3, #0
  402502:	d1f6      	bne.n	4024f2 <_pmc_init_master_clock+0xe>
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
  402504:	2100      	movs	r1, #0
  402506:	4815      	ldr	r0, [pc, #84]	; (40255c <_pmc_init_master_clock+0x78>)
  402508:	4b17      	ldr	r3, [pc, #92]	; (402568 <_pmc_init_master_clock+0x84>)
  40250a:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40250c:	bf00      	nop
  40250e:	4813      	ldr	r0, [pc, #76]	; (40255c <_pmc_init_master_clock+0x78>)
  402510:	4b14      	ldr	r3, [pc, #80]	; (402564 <_pmc_init_master_clock+0x80>)
  402512:	4798      	blx	r3
  402514:	4603      	mov	r3, r0
  402516:	f083 0301 	eor.w	r3, r3, #1
  40251a:	b2db      	uxtb	r3, r3
  40251c:	2b00      	cmp	r3, #0
  40251e:	d1f6      	bne.n	40250e <_pmc_init_master_clock+0x2a>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
  402520:	2101      	movs	r1, #1
  402522:	480e      	ldr	r0, [pc, #56]	; (40255c <_pmc_init_master_clock+0x78>)
  402524:	4b11      	ldr	r3, [pc, #68]	; (40256c <_pmc_init_master_clock+0x88>)
  402526:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402528:	bf00      	nop
  40252a:	480c      	ldr	r0, [pc, #48]	; (40255c <_pmc_init_master_clock+0x78>)
  40252c:	4b0d      	ldr	r3, [pc, #52]	; (402564 <_pmc_init_master_clock+0x80>)
  40252e:	4798      	blx	r3
  402530:	4603      	mov	r3, r0
  402532:	f083 0301 	eor.w	r3, r3, #1
  402536:	b2db      	uxtb	r3, r3
  402538:	2b00      	cmp	r3, #0
  40253a:	d1f6      	bne.n	40252a <_pmc_init_master_clock+0x46>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
  40253c:	2102      	movs	r1, #2
  40253e:	4807      	ldr	r0, [pc, #28]	; (40255c <_pmc_init_master_clock+0x78>)
  402540:	4b0b      	ldr	r3, [pc, #44]	; (402570 <_pmc_init_master_clock+0x8c>)
  402542:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  402544:	bf00      	nop
  402546:	4805      	ldr	r0, [pc, #20]	; (40255c <_pmc_init_master_clock+0x78>)
  402548:	4b06      	ldr	r3, [pc, #24]	; (402564 <_pmc_init_master_clock+0x80>)
  40254a:	4798      	blx	r3
  40254c:	4603      	mov	r3, r0
  40254e:	f083 0301 	eor.w	r3, r3, #1
  402552:	b2db      	uxtb	r3, r3
  402554:	2b00      	cmp	r3, #0
  402556:	d1f6      	bne.n	402546 <_pmc_init_master_clock+0x62>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  402558:	bf00      	nop
  40255a:	bd80      	pop	{r7, pc}
  40255c:	400e0600 	.word	0x400e0600
  402560:	00402295 	.word	0x00402295
  402564:	004023bf 	.word	0x004023bf
  402568:	00402303 	.word	0x00402303
  40256c:	0040233b 	.word	0x0040233b
  402570:	004022cd 	.word	0x004022cd

00402574 <_pmc_init_program_clock>:
 * \brief Initializes programmable clock generators
 *
 * Programmable clock are running when this function returns.
 */
static void _pmc_init_program_clock(void)
{
  402574:	b480      	push	{r7}
  402576:	af00      	add	r7, sp, #0
	while (!hri_pmc_get_SR_PCKRDY0_bit(PMC)) {
		/* Wait until PCK6 clock is ready */
	}
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK6);
#endif
}
  402578:	bf00      	nop
  40257a:	46bd      	mov	sp, r7
  40257c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402580:	4770      	bx	lr

00402582 <_pmc_init_fs_clock>:
 * \brief Initializes USB FS clock generators
 *
 * USB FS clock are running when this function returns.
 */
static void _pmc_init_fs_clock(void)
{
  402582:	b480      	push	{r7}
  402584:	af00      	add	r7, sp, #0
	}
	data |= PMC_USB_USBDIV(CONF_USB_48M_DIV - 1);
	hri_pmc_write_USB_reg(PMC, data);
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_USBCLK);
#endif
}
  402586:	bf00      	nop
  402588:	46bd      	mov	sp, r7
  40258a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40258e:	4770      	bx	lr

00402590 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  402590:	b580      	push	{r7, lr}
  402592:	af00      	add	r7, sp, #0
	_pmc_init_sources();
  402594:	4b04      	ldr	r3, [pc, #16]	; (4025a8 <_pmc_init+0x18>)
  402596:	4798      	blx	r3
	_pmc_init_master_clock();
  402598:	4b04      	ldr	r3, [pc, #16]	; (4025ac <_pmc_init+0x1c>)
  40259a:	4798      	blx	r3
	_pmc_init_program_clock();
  40259c:	4b04      	ldr	r3, [pc, #16]	; (4025b0 <_pmc_init+0x20>)
  40259e:	4798      	blx	r3
	_pmc_init_fs_clock();
  4025a0:	4b04      	ldr	r3, [pc, #16]	; (4025b4 <_pmc_init+0x24>)
  4025a2:	4798      	blx	r3
}
  4025a4:	bf00      	nop
  4025a6:	bd80      	pop	{r7, pc}
  4025a8:	0040240d 	.word	0x0040240d
  4025ac:	004024e5 	.word	0x004024e5
  4025b0:	00402575 	.word	0x00402575
  4025b4:	00402583 	.word	0x00402583

004025b8 <hri_spi_write_CR_reg>:
{
	((Spi *)hw)->SPI_IDR = mask;
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
  4025b8:	b480      	push	{r7}
  4025ba:	b083      	sub	sp, #12
  4025bc:	af00      	add	r7, sp, #0
  4025be:	6078      	str	r0, [r7, #4]
  4025c0:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  4025c2:	687b      	ldr	r3, [r7, #4]
  4025c4:	683a      	ldr	r2, [r7, #0]
  4025c6:	601a      	str	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4025c8:	bf00      	nop
  4025ca:	370c      	adds	r7, #12
  4025cc:	46bd      	mov	sp, r7
  4025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025d2:	4770      	bx	lr

004025d4 <hri_spi_write_TDR_reg>:

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
  4025d4:	b480      	push	{r7}
  4025d6:	b083      	sub	sp, #12
  4025d8:	af00      	add	r7, sp, #0
  4025da:	6078      	str	r0, [r7, #4]
  4025dc:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  4025de:	687b      	ldr	r3, [r7, #4]
  4025e0:	683a      	ldr	r2, [r7, #0]
  4025e2:	60da      	str	r2, [r3, #12]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4025e4:	bf00      	nop
  4025e6:	370c      	adds	r7, #12
  4025e8:	46bd      	mov	sp, r7
  4025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025ee:	4770      	bx	lr

004025f0 <hri_spi_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_MR_reg(const void *const hw, hri_spi_mr_reg_t data)
{
  4025f0:	b480      	push	{r7}
  4025f2:	b083      	sub	sp, #12
  4025f4:	af00      	add	r7, sp, #0
  4025f6:	6078      	str	r0, [r7, #4]
  4025f8:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MR = data;
  4025fa:	687b      	ldr	r3, [r7, #4]
  4025fc:	683a      	ldr	r2, [r7, #0]
  4025fe:	605a      	str	r2, [r3, #4]
	SPI_CRITICAL_SECTION_LEAVE();
}
  402600:	bf00      	nop
  402602:	370c      	adds	r7, #12
  402604:	46bd      	mov	sp, r7
  402606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40260a:	4770      	bx	lr

0040260c <hri_spi_write_CSR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CSR_reg(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  40260c:	b480      	push	{r7}
  40260e:	b085      	sub	sp, #20
  402610:	af00      	add	r7, sp, #0
  402612:	60f8      	str	r0, [r7, #12]
  402614:	460b      	mov	r3, r1
  402616:	607a      	str	r2, [r7, #4]
  402618:	72fb      	strb	r3, [r7, #11]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CSR[index] = data;
  40261a:	7afa      	ldrb	r2, [r7, #11]
  40261c:	68fb      	ldr	r3, [r7, #12]
  40261e:	320c      	adds	r2, #12
  402620:	6879      	ldr	r1, [r7, #4]
  402622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  402626:	bf00      	nop
  402628:	3714      	adds	r7, #20
  40262a:	46bd      	mov	sp, r7
  40262c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402630:	4770      	bx	lr

00402632 <hri_spi_read_RDR_RD_bf>:
{
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD(mask)) >> SPI_RDR_RD_Pos;
}

static inline hri_spi_rdr_reg_t hri_spi_read_RDR_RD_bf(const void *const hw)
{
  402632:	b480      	push	{r7}
  402634:	b083      	sub	sp, #12
  402636:	af00      	add	r7, sp, #0
  402638:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  40263a:	687b      	ldr	r3, [r7, #4]
  40263c:	689b      	ldr	r3, [r3, #8]
  40263e:	b29b      	uxth	r3, r3
}
  402640:	4618      	mov	r0, r3
  402642:	370c      	adds	r7, #12
  402644:	46bd      	mov	sp, r7
  402646:	f85d 7b04 	ldr.w	r7, [sp], #4
  40264a:	4770      	bx	lr

0040264c <hri_spi_get_SR_SPIENS_bit>:
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
  40264c:	b480      	push	{r7}
  40264e:	b083      	sub	sp, #12
  402650:	af00      	add	r7, sp, #0
  402652:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  402654:	687b      	ldr	r3, [r7, #4]
  402656:	691b      	ldr	r3, [r3, #16]
  402658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40265c:	2b00      	cmp	r3, #0
  40265e:	bf14      	ite	ne
  402660:	2301      	movne	r3, #1
  402662:	2300      	moveq	r3, #0
  402664:	b2db      	uxtb	r3, r3
}
  402666:	4618      	mov	r0, r3
  402668:	370c      	adds	r7, #12
  40266a:	46bd      	mov	sp, r7
  40266c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402670:	4770      	bx	lr

00402672 <hri_spi_get_SR_reg>:

static inline hri_spi_sr_reg_t hri_spi_get_SR_reg(const void *const hw, hri_spi_sr_reg_t mask)
{
  402672:	b480      	push	{r7}
  402674:	b085      	sub	sp, #20
  402676:	af00      	add	r7, sp, #0
  402678:	6078      	str	r0, [r7, #4]
  40267a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Spi *)hw)->SPI_SR;
  40267c:	687b      	ldr	r3, [r7, #4]
  40267e:	691b      	ldr	r3, [r3, #16]
  402680:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  402682:	68fa      	ldr	r2, [r7, #12]
  402684:	683b      	ldr	r3, [r7, #0]
  402686:	4013      	ands	r3, r2
  402688:	60fb      	str	r3, [r7, #12]
	return tmp;
  40268a:	68fb      	ldr	r3, [r7, #12]
}
  40268c:	4618      	mov	r0, r3
  40268e:	3714      	adds	r7, #20
  402690:	46bd      	mov	sp, r7
  402692:	f85d 7b04 	ldr.w	r7, [sp], #4
  402696:	4770      	bx	lr

00402698 <hri_spi_read_SR_reg>:

static inline hri_spi_sr_reg_t hri_spi_read_SR_reg(const void *const hw)
{
  402698:	b480      	push	{r7}
  40269a:	b083      	sub	sp, #12
  40269c:	af00      	add	r7, sp, #0
  40269e:	6078      	str	r0, [r7, #4]
	return ((Spi *)hw)->SPI_SR;
  4026a0:	687b      	ldr	r3, [r7, #4]
  4026a2:	691b      	ldr	r3, [r3, #16]
}
  4026a4:	4618      	mov	r0, r3
  4026a6:	370c      	adds	r7, #12
  4026a8:	46bd      	mov	sp, r7
  4026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ae:	4770      	bx	lr

004026b0 <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
  4026b0:	b480      	push	{r7}
  4026b2:	b085      	sub	sp, #20
  4026b4:	af00      	add	r7, sp, #0
  4026b6:	6078      	str	r0, [r7, #4]

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  4026b8:	687a      	ldr	r2, [r7, #4]
  4026ba:	4b08      	ldr	r3, [pc, #32]	; (4026dc <_spi_get_hardware_index+0x2c>)
  4026bc:	4413      	add	r3, r2
  4026be:	0c1b      	lsrs	r3, r3, #16
  4026c0:	73fb      	strb	r3, [r7, #15]

	if (index == 5) {
  4026c2:	7bfb      	ldrb	r3, [r7, #15]
  4026c4:	2b05      	cmp	r3, #5
  4026c6:	d101      	bne.n	4026cc <_spi_get_hardware_index+0x1c>
		return 1;
  4026c8:	2301      	movs	r3, #1
  4026ca:	e000      	b.n	4026ce <_spi_get_hardware_index+0x1e>
	} else {
		return 0;
  4026cc:	2300      	movs	r3, #0
	}
}
  4026ce:	4618      	mov	r0, r3
  4026d0:	3714      	adds	r7, #20
  4026d2:	46bd      	mov	sp, r7
  4026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026d8:	4770      	bx	lr
  4026da:	bf00      	nop
  4026dc:	bfff8000 	.word	0xbfff8000

004026e0 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
  4026e0:	b580      	push	{r7, lr}
  4026e2:	b084      	sub	sp, #16
  4026e4:	af00      	add	r7, sp, #0
  4026e6:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4026e8:	687b      	ldr	r3, [r7, #4]
  4026ea:	4618      	mov	r0, r3
  4026ec:	4b12      	ldr	r3, [pc, #72]	; (402738 <_spi_get_regs+0x58>)
  4026ee:	4798      	blx	r3
  4026f0:	4603      	mov	r3, r0
  4026f2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4026f4:	2300      	movs	r3, #0
  4026f6:	73fb      	strb	r3, [r7, #15]
  4026f8:	e015      	b.n	402726 <_spi_get_regs+0x46>
		if (spi_regs[i].number == n) {
  4026fa:	7bfa      	ldrb	r2, [r7, #15]
  4026fc:	490f      	ldr	r1, [pc, #60]	; (40273c <_spi_get_regs+0x5c>)
  4026fe:	4613      	mov	r3, r2
  402700:	009b      	lsls	r3, r3, #2
  402702:	4413      	add	r3, r2
  402704:	009b      	lsls	r3, r3, #2
  402706:	440b      	add	r3, r1
  402708:	781b      	ldrb	r3, [r3, #0]
  40270a:	7bba      	ldrb	r2, [r7, #14]
  40270c:	429a      	cmp	r2, r3
  40270e:	d107      	bne.n	402720 <_spi_get_regs+0x40>
			return &spi_regs[i];
  402710:	7bfa      	ldrb	r2, [r7, #15]
  402712:	4613      	mov	r3, r2
  402714:	009b      	lsls	r3, r3, #2
  402716:	4413      	add	r3, r2
  402718:	009b      	lsls	r3, r3, #2
  40271a:	4a08      	ldr	r2, [pc, #32]	; (40273c <_spi_get_regs+0x5c>)
  40271c:	4413      	add	r3, r2
  40271e:	e006      	b.n	40272e <_spi_get_regs+0x4e>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  402720:	7bfb      	ldrb	r3, [r7, #15]
  402722:	3301      	adds	r3, #1
  402724:	73fb      	strb	r3, [r7, #15]
  402726:	7bfb      	ldrb	r3, [r7, #15]
  402728:	2b00      	cmp	r3, #0
  40272a:	d0e6      	beq.n	4026fa <_spi_get_regs+0x1a>
		}
	}

	return NULL;
  40272c:	2300      	movs	r3, #0
}
  40272e:	4618      	mov	r0, r3
  402730:	3710      	adds	r7, #16
  402732:	46bd      	mov	sp, r7
  402734:	bd80      	pop	{r7, pc}
  402736:	bf00      	nop
  402738:	004026b1 	.word	0x004026b1
  40273c:	00405400 	.word	0x00405400

00402740 <_spi_m_sync_init>:
		dev->callbacks.complete(dev, ERR_OVERFLOW);
	}
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  402740:	b580      	push	{r7, lr}
  402742:	b084      	sub	sp, #16
  402744:	af00      	add	r7, sp, #0
  402746:	6078      	str	r0, [r7, #4]
  402748:	6039      	str	r1, [r7, #0]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
  40274a:	683b      	ldr	r3, [r7, #0]
  40274c:	4618      	mov	r0, r3
  40274e:	4b2a      	ldr	r3, [pc, #168]	; (4027f8 <_spi_m_sync_init+0xb8>)
  402750:	4798      	blx	r3
  402752:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
  402754:	687b      	ldr	r3, [r7, #4]
  402756:	2b00      	cmp	r3, #0
  402758:	d004      	beq.n	402764 <_spi_m_sync_init+0x24>
  40275a:	683b      	ldr	r3, [r7, #0]
  40275c:	2b00      	cmp	r3, #0
  40275e:	d001      	beq.n	402764 <_spi_m_sync_init+0x24>
  402760:	2301      	movs	r3, #1
  402762:	e000      	b.n	402766 <_spi_m_sync_init+0x26>
  402764:	2300      	movs	r3, #0
  402766:	f003 0301 	and.w	r3, r3, #1
  40276a:	b2db      	uxtb	r3, r3
  40276c:	f44f 72a1 	mov.w	r2, #322	; 0x142
  402770:	4922      	ldr	r1, [pc, #136]	; (4027fc <_spi_m_sync_init+0xbc>)
  402772:	4618      	mov	r0, r3
  402774:	4b22      	ldr	r3, [pc, #136]	; (402800 <_spi_m_sync_init+0xc0>)
  402776:	4798      	blx	r3

	if (regs == NULL) {
  402778:	68fb      	ldr	r3, [r7, #12]
  40277a:	2b00      	cmp	r3, #0
  40277c:	d102      	bne.n	402784 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
  40277e:	f06f 030c 	mvn.w	r3, #12
  402782:	e035      	b.n	4027f0 <_spi_m_sync_init+0xb0>
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  402784:	6838      	ldr	r0, [r7, #0]
  402786:	4b1f      	ldr	r3, [pc, #124]	; (402804 <_spi_m_sync_init+0xc4>)
  402788:	4798      	blx	r3
  40278a:	4603      	mov	r3, r0
  40278c:	2b00      	cmp	r3, #0
  40278e:	d002      	beq.n	402796 <_spi_m_sync_init+0x56>
		return ERR_DENIED;
  402790:	f06f 0310 	mvn.w	r3, #16
  402794:	e02c      	b.n	4027f0 <_spi_m_sync_init+0xb0>
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
  402796:	2180      	movs	r1, #128	; 0x80
  402798:	6838      	ldr	r0, [r7, #0]
  40279a:	4b1b      	ldr	r3, [pc, #108]	; (402808 <_spi_m_sync_init+0xc8>)
  40279c:	4798      	blx	r3
	dev->prvt = hw;
  40279e:	687b      	ldr	r3, [r7, #4]
  4027a0:	683a      	ldr	r2, [r7, #0]
  4027a2:	601a      	str	r2, [r3, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4027a4:	68fb      	ldr	r3, [r7, #12]
  4027a6:	685a      	ldr	r2, [r3, #4]
  4027a8:	4b18      	ldr	r3, [pc, #96]	; (40280c <_spi_m_sync_init+0xcc>)
  4027aa:	4013      	ands	r3, r2
  4027ac:	4619      	mov	r1, r3
  4027ae:	6838      	ldr	r0, [r7, #0]
  4027b0:	4b15      	ldr	r3, [pc, #84]	; (402808 <_spi_m_sync_init+0xc8>)
  4027b2:	4798      	blx	r3
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4027b4:	68fb      	ldr	r3, [r7, #12]
  4027b6:	689a      	ldr	r2, [r3, #8]
  4027b8:	4b15      	ldr	r3, [pc, #84]	; (402810 <_spi_m_sync_init+0xd0>)
  4027ba:	4013      	ands	r3, r2
  4027bc:	4a15      	ldr	r2, [pc, #84]	; (402814 <_spi_m_sync_init+0xd4>)
  4027be:	431a      	orrs	r2, r3
  4027c0:	4611      	mov	r1, r2
  4027c2:	6838      	ldr	r0, [r7, #0]
  4027c4:	4b14      	ldr	r3, [pc, #80]	; (402818 <_spi_m_sync_init+0xd8>)
  4027c6:	4798      	blx	r3
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4027c8:	68fb      	ldr	r3, [r7, #12]
  4027ca:	68db      	ldr	r3, [r3, #12]
  4027cc:	461a      	mov	r2, r3
  4027ce:	2100      	movs	r1, #0
  4027d0:	6838      	ldr	r0, [r7, #0]
  4027d2:	4b12      	ldr	r3, [pc, #72]	; (40281c <_spi_m_sync_init+0xdc>)
  4027d4:	4798      	blx	r3

	dev->dummy_byte = regs->dummy_byte;
  4027d6:	68fb      	ldr	r3, [r7, #12]
  4027d8:	8a1a      	ldrh	r2, [r3, #16]
  4027da:	687b      	ldr	r3, [r7, #4]
  4027dc:	80da      	strh	r2, [r3, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4027de:	68fb      	ldr	r3, [r7, #12]
  4027e0:	68db      	ldr	r3, [r3, #12]
  4027e2:	b2db      	uxtb	r3, r3
  4027e4:	f023 030f 	bic.w	r3, r3, #15
  4027e8:	b2da      	uxtb	r2, r3
  4027ea:	687b      	ldr	r3, [r7, #4]
  4027ec:	711a      	strb	r2, [r3, #4]

	return ERR_NONE;
  4027ee:	2300      	movs	r3, #0
}
  4027f0:	4618      	mov	r0, r3
  4027f2:	3710      	adds	r7, #16
  4027f4:	46bd      	mov	sp, r7
  4027f6:	bd80      	pop	{r7, pc}
  4027f8:	004026e1 	.word	0x004026e1
  4027fc:	00405414 	.word	0x00405414
  402800:	004018f5 	.word	0x004018f5
  402804:	0040264d 	.word	0x0040264d
  402808:	004025b9 	.word	0x004025b9
  40280c:	feffff7c 	.word	0xfeffff7c
  402810:	fff1ff6f 	.word	0xfff1ff6f
  402814:	000e0010 	.word	0x000e0010
  402818:	004025f1 	.word	0x004025f1
  40281c:	0040260d 	.word	0x0040260d

00402820 <_spi_wait_bus_idle>:
	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
  402820:	b580      	push	{r7, lr}
  402822:	b082      	sub	sp, #8
  402824:	af00      	add	r7, sp, #0
  402826:	6078      	str	r0, [r7, #4]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  402828:	bf00      	nop
  40282a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40282e:	6878      	ldr	r0, [r7, #4]
  402830:	4b04      	ldr	r3, [pc, #16]	; (402844 <_spi_wait_bus_idle+0x24>)
  402832:	4798      	blx	r3
  402834:	4603      	mov	r3, r0
  402836:	2b00      	cmp	r3, #0
  402838:	d0f7      	beq.n	40282a <_spi_wait_bus_idle+0xa>
	}
}
  40283a:	bf00      	nop
  40283c:	3708      	adds	r7, #8
  40283e:	46bd      	mov	sp, r7
  402840:	bd80      	pop	{r7, pc}
  402842:	bf00      	nop
  402844:	00402673 	.word	0x00402673

00402848 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, struct _spi_trans_ctrl *ctrl)
{
  402848:	b580      	push	{r7, lr}
  40284a:	b084      	sub	sp, #16
  40284c:	af00      	add	r7, sp, #0
  40284e:	6078      	str	r0, [r7, #4]
  402850:	6039      	str	r1, [r7, #0]
	uint32_t data;

	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  402852:	6878      	ldr	r0, [r7, #4]
  402854:	4b17      	ldr	r3, [pc, #92]	; (4028b4 <_spi_rx_check_and_receive+0x6c>)
  402856:	4798      	blx	r3
  402858:	4603      	mov	r3, r0
  40285a:	f003 0301 	and.w	r3, r3, #1
  40285e:	2b00      	cmp	r3, #0
  402860:	d101      	bne.n	402866 <_spi_rx_check_and_receive+0x1e>
		return false;
  402862:	2300      	movs	r3, #0
  402864:	e022      	b.n	4028ac <_spi_rx_check_and_receive+0x64>
	}

	data = hri_spi_read_RDR_RD_bf(hw);
  402866:	6878      	ldr	r0, [r7, #4]
  402868:	4b13      	ldr	r3, [pc, #76]	; (4028b8 <_spi_rx_check_and_receive+0x70>)
  40286a:	4798      	blx	r3
  40286c:	60f8      	str	r0, [r7, #12]

	if (ctrl->rxbuf) {
  40286e:	683b      	ldr	r3, [r7, #0]
  402870:	685b      	ldr	r3, [r3, #4]
  402872:	2b00      	cmp	r3, #0
  402874:	d014      	beq.n	4028a0 <_spi_rx_check_and_receive+0x58>
		*ctrl->rxbuf++ = (uint8_t)data;
  402876:	683b      	ldr	r3, [r7, #0]
  402878:	685b      	ldr	r3, [r3, #4]
  40287a:	1c59      	adds	r1, r3, #1
  40287c:	683a      	ldr	r2, [r7, #0]
  40287e:	6051      	str	r1, [r2, #4]
  402880:	68fa      	ldr	r2, [r7, #12]
  402882:	b2d2      	uxtb	r2, r2
  402884:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
  402886:	683b      	ldr	r3, [r7, #0]
  402888:	7c1b      	ldrb	r3, [r3, #16]
  40288a:	2b01      	cmp	r3, #1
  40288c:	d908      	bls.n	4028a0 <_spi_rx_check_and_receive+0x58>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  40288e:	683b      	ldr	r3, [r7, #0]
  402890:	685b      	ldr	r3, [r3, #4]
  402892:	1c59      	adds	r1, r3, #1
  402894:	683a      	ldr	r2, [r7, #0]
  402896:	6051      	str	r1, [r2, #4]
  402898:	68fa      	ldr	r2, [r7, #12]
  40289a:	0a12      	lsrs	r2, r2, #8
  40289c:	b2d2      	uxtb	r2, r2
  40289e:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
  4028a0:	683b      	ldr	r3, [r7, #0]
  4028a2:	68db      	ldr	r3, [r3, #12]
  4028a4:	1c5a      	adds	r2, r3, #1
  4028a6:	683b      	ldr	r3, [r7, #0]
  4028a8:	60da      	str	r2, [r3, #12]

	return true;
  4028aa:	2301      	movs	r3, #1
}
  4028ac:	4618      	mov	r0, r3
  4028ae:	3710      	adds	r7, #16
  4028b0:	46bd      	mov	sp, r7
  4028b2:	bd80      	pop	{r7, pc}
  4028b4:	00402699 	.word	0x00402699
  4028b8:	00402633 	.word	0x00402633

004028bc <_spi_tx_check_and_send>:

/** Check flag of DRE and update transaction runtime information. */
static inline bool _spi_tx_check_and_send(void *const hw, struct _spi_trans_ctrl *ctrl, uint16_t dummy)
{
  4028bc:	b580      	push	{r7, lr}
  4028be:	b086      	sub	sp, #24
  4028c0:	af00      	add	r7, sp, #0
  4028c2:	60f8      	str	r0, [r7, #12]
  4028c4:	60b9      	str	r1, [r7, #8]
  4028c6:	4613      	mov	r3, r2
  4028c8:	80fb      	strh	r3, [r7, #6]
	uint32_t data;

	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  4028ca:	68f8      	ldr	r0, [r7, #12]
  4028cc:	4b1a      	ldr	r3, [pc, #104]	; (402938 <_spi_tx_check_and_send+0x7c>)
  4028ce:	4798      	blx	r3
  4028d0:	4603      	mov	r3, r0
  4028d2:	f003 0302 	and.w	r3, r3, #2
  4028d6:	2b00      	cmp	r3, #0
  4028d8:	d101      	bne.n	4028de <_spi_tx_check_and_send+0x22>
		return false;
  4028da:	2300      	movs	r3, #0
  4028dc:	e028      	b.n	402930 <_spi_tx_check_and_send+0x74>
	}

	if (ctrl->txbuf) {
  4028de:	68bb      	ldr	r3, [r7, #8]
  4028e0:	681b      	ldr	r3, [r3, #0]
  4028e2:	2b00      	cmp	r3, #0
  4028e4:	d018      	beq.n	402918 <_spi_tx_check_and_send+0x5c>
		data = *ctrl->txbuf++;
  4028e6:	68bb      	ldr	r3, [r7, #8]
  4028e8:	681b      	ldr	r3, [r3, #0]
  4028ea:	1c59      	adds	r1, r3, #1
  4028ec:	68ba      	ldr	r2, [r7, #8]
  4028ee:	6011      	str	r1, [r2, #0]
  4028f0:	781b      	ldrb	r3, [r3, #0]
  4028f2:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
  4028f4:	68bb      	ldr	r3, [r7, #8]
  4028f6:	7c1b      	ldrb	r3, [r3, #16]
  4028f8:	2b01      	cmp	r3, #1
  4028fa:	d90f      	bls.n	40291c <_spi_tx_check_and_send+0x60>
			data |= (*ctrl->txbuf) << 8;
  4028fc:	68bb      	ldr	r3, [r7, #8]
  4028fe:	681b      	ldr	r3, [r3, #0]
  402900:	781b      	ldrb	r3, [r3, #0]
  402902:	021b      	lsls	r3, r3, #8
  402904:	461a      	mov	r2, r3
  402906:	697b      	ldr	r3, [r7, #20]
  402908:	4313      	orrs	r3, r2
  40290a:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
  40290c:	68bb      	ldr	r3, [r7, #8]
  40290e:	681b      	ldr	r3, [r3, #0]
  402910:	1c5a      	adds	r2, r3, #1
  402912:	68bb      	ldr	r3, [r7, #8]
  402914:	601a      	str	r2, [r3, #0]
  402916:	e001      	b.n	40291c <_spi_tx_check_and_send+0x60>
		}
	} else {
		data = dummy;
  402918:	88fb      	ldrh	r3, [r7, #6]
  40291a:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
  40291c:	68bb      	ldr	r3, [r7, #8]
  40291e:	689b      	ldr	r3, [r3, #8]
  402920:	1c5a      	adds	r2, r3, #1
  402922:	68bb      	ldr	r3, [r7, #8]
  402924:	609a      	str	r2, [r3, #8]
	hri_spi_write_TDR_reg(hw, data);
  402926:	6979      	ldr	r1, [r7, #20]
  402928:	68f8      	ldr	r0, [r7, #12]
  40292a:	4b04      	ldr	r3, [pc, #16]	; (40293c <_spi_tx_check_and_send+0x80>)
  40292c:	4798      	blx	r3
	return true;
  40292e:	2301      	movs	r3, #1
}
  402930:	4618      	mov	r0, r3
  402932:	3718      	adds	r7, #24
  402934:	46bd      	mov	sp, r7
  402936:	bd80      	pop	{r7, pc}
  402938:	00402699 	.word	0x00402699
  40293c:	004025d5 	.word	0x004025d5

00402940 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
  402940:	b580      	push	{r7, lr}
  402942:	b082      	sub	sp, #8
  402944:	af00      	add	r7, sp, #0
  402946:	6078      	str	r0, [r7, #4]
  402948:	6039      	str	r1, [r7, #0]
	ASSERT(hw);
  40294a:	683b      	ldr	r3, [r7, #0]
  40294c:	2b00      	cmp	r3, #0
  40294e:	bf14      	ite	ne
  402950:	2301      	movne	r3, #1
  402952:	2300      	moveq	r3, #0
  402954:	b2db      	uxtb	r3, r3
  402956:	f44f 720c 	mov.w	r2, #560	; 0x230
  40295a:	4908      	ldr	r1, [pc, #32]	; (40297c <_spi_err_check+0x3c>)
  40295c:	4618      	mov	r0, r3
  40295e:	4b08      	ldr	r3, [pc, #32]	; (402980 <_spi_err_check+0x40>)
  402960:	4798      	blx	r3

	if (SPI_SR_OVRES & iflag) {
  402962:	687b      	ldr	r3, [r7, #4]
  402964:	f003 0308 	and.w	r3, r3, #8
  402968:	2b00      	cmp	r3, #0
  40296a:	d002      	beq.n	402972 <_spi_err_check+0x32>
		return ERR_OVERFLOW;
  40296c:	f06f 0312 	mvn.w	r3, #18
  402970:	e000      	b.n	402974 <_spi_err_check+0x34>
	}

	return ERR_NONE;
  402972:	2300      	movs	r3, #0
}
  402974:	4618      	mov	r0, r3
  402976:	3708      	adds	r7, #8
  402978:	46bd      	mov	sp, r7
  40297a:	bd80      	pop	{r7, pc}
  40297c:	00405414 	.word	0x00405414
  402980:	004018f5 	.word	0x004018f5

00402984 <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  402984:	b580      	push	{r7, lr}
  402986:	b08a      	sub	sp, #40	; 0x28
  402988:	af00      	add	r7, sp, #0
  40298a:	6078      	str	r0, [r7, #4]
  40298c:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
  40298e:	687b      	ldr	r3, [r7, #4]
  402990:	681b      	ldr	r3, [r3, #0]
  402992:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
  402994:	2300      	movs	r3, #0
  402996:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  402998:	683b      	ldr	r3, [r7, #0]
  40299a:	681b      	ldr	r3, [r3, #0]
  40299c:	60fb      	str	r3, [r7, #12]
  40299e:	683b      	ldr	r3, [r7, #0]
  4029a0:	685b      	ldr	r3, [r3, #4]
  4029a2:	613b      	str	r3, [r7, #16]
  4029a4:	2300      	movs	r3, #0
  4029a6:	617b      	str	r3, [r7, #20]
  4029a8:	2300      	movs	r3, #0
  4029aa:	61bb      	str	r3, [r7, #24]
  4029ac:	687b      	ldr	r3, [r7, #4]
  4029ae:	791b      	ldrb	r3, [r3, #4]
  4029b0:	773b      	strb	r3, [r7, #28]

	ASSERT(dev && hw);
  4029b2:	687b      	ldr	r3, [r7, #4]
  4029b4:	2b00      	cmp	r3, #0
  4029b6:	d004      	beq.n	4029c2 <_spi_m_sync_trans+0x3e>
  4029b8:	6a3b      	ldr	r3, [r7, #32]
  4029ba:	2b00      	cmp	r3, #0
  4029bc:	d001      	beq.n	4029c2 <_spi_m_sync_trans+0x3e>
  4029be:	2301      	movs	r3, #1
  4029c0:	e000      	b.n	4029c4 <_spi_m_sync_trans+0x40>
  4029c2:	2300      	movs	r3, #0
  4029c4:	f003 0301 	and.w	r3, r3, #1
  4029c8:	b2db      	uxtb	r3, r3
  4029ca:	f240 223f 	movw	r2, #575	; 0x23f
  4029ce:	4925      	ldr	r1, [pc, #148]	; (402a64 <_spi_m_sync_trans+0xe0>)
  4029d0:	4618      	mov	r0, r3
  4029d2:	4b25      	ldr	r3, [pc, #148]	; (402a68 <_spi_m_sync_trans+0xe4>)
  4029d4:	4798      	blx	r3

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  4029d6:	6a38      	ldr	r0, [r7, #32]
  4029d8:	4b24      	ldr	r3, [pc, #144]	; (402a6c <_spi_m_sync_trans+0xe8>)
  4029da:	4798      	blx	r3
  4029dc:	4603      	mov	r3, r0
  4029de:	f083 0301 	eor.w	r3, r3, #1
  4029e2:	b2db      	uxtb	r3, r3
  4029e4:	2b00      	cmp	r3, #0
  4029e6:	d002      	beq.n	4029ee <_spi_m_sync_trans+0x6a>
		return ERR_NOT_INITIALIZED;
  4029e8:	f06f 0313 	mvn.w	r3, #19
  4029ec:	e035      	b.n	402a5a <_spi_m_sync_trans+0xd6>
	}

	for (;;) {
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  4029ee:	f107 030c 	add.w	r3, r7, #12
  4029f2:	4619      	mov	r1, r3
  4029f4:	6a38      	ldr	r0, [r7, #32]
  4029f6:	4b1e      	ldr	r3, [pc, #120]	; (402a70 <_spi_m_sync_trans+0xec>)
  4029f8:	4798      	blx	r3
  4029fa:	4603      	mov	r3, r0
  4029fc:	f083 0301 	eor.w	r3, r3, #1
  402a00:	b2db      	uxtb	r3, r3
  402a02:	2b00      	cmp	r3, #0
  402a04:	d00b      	beq.n	402a1e <_spi_m_sync_trans+0x9a>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
  402a06:	69ba      	ldr	r2, [r7, #24]
  402a08:	697b      	ldr	r3, [r7, #20]
  402a0a:	429a      	cmp	r2, r3
  402a0c:	d307      	bcc.n	402a1e <_spi_m_sync_trans+0x9a>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  402a0e:	687b      	ldr	r3, [r7, #4]
  402a10:	88da      	ldrh	r2, [r3, #6]
  402a12:	f107 030c 	add.w	r3, r7, #12
  402a16:	4619      	mov	r1, r3
  402a18:	6a38      	ldr	r0, [r7, #32]
  402a1a:	4b16      	ldr	r3, [pc, #88]	; (402a74 <_spi_m_sync_trans+0xf0>)
  402a1c:	4798      	blx	r3
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
  402a1e:	6a38      	ldr	r0, [r7, #32]
  402a20:	4b15      	ldr	r3, [pc, #84]	; (402a78 <_spi_m_sync_trans+0xf4>)
  402a22:	4798      	blx	r3
  402a24:	4603      	mov	r3, r0
  402a26:	6a39      	ldr	r1, [r7, #32]
  402a28:	4618      	mov	r0, r3
  402a2a:	4b14      	ldr	r3, [pc, #80]	; (402a7c <_spi_m_sync_trans+0xf8>)
  402a2c:	4798      	blx	r3
  402a2e:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc < 0) {
  402a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402a32:	2b00      	cmp	r3, #0
  402a34:	db0c      	blt.n	402a50 <_spi_m_sync_trans+0xcc>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  402a36:	697a      	ldr	r2, [r7, #20]
  402a38:	683b      	ldr	r3, [r7, #0]
  402a3a:	689b      	ldr	r3, [r3, #8]
  402a3c:	429a      	cmp	r2, r3
  402a3e:	d3d6      	bcc.n	4029ee <_spi_m_sync_trans+0x6a>
  402a40:	69ba      	ldr	r2, [r7, #24]
  402a42:	683b      	ldr	r3, [r7, #0]
  402a44:	689b      	ldr	r3, [r3, #8]
  402a46:	429a      	cmp	r2, r3
  402a48:	d3d1      	bcc.n	4029ee <_spi_m_sync_trans+0x6a>
			rc = ctrl.txcnt;
  402a4a:	697b      	ldr	r3, [r7, #20]
  402a4c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
  402a4e:	e000      	b.n	402a52 <_spi_m_sync_trans+0xce>
			break;
  402a50:	bf00      	nop
		}
	}

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
  402a52:	6a38      	ldr	r0, [r7, #32]
  402a54:	4b0a      	ldr	r3, [pc, #40]	; (402a80 <_spi_m_sync_trans+0xfc>)
  402a56:	4798      	blx	r3

	return rc;
  402a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  402a5a:	4618      	mov	r0, r3
  402a5c:	3728      	adds	r7, #40	; 0x28
  402a5e:	46bd      	mov	sp, r7
  402a60:	bd80      	pop	{r7, pc}
  402a62:	bf00      	nop
  402a64:	00405414 	.word	0x00405414
  402a68:	004018f5 	.word	0x004018f5
  402a6c:	0040264d 	.word	0x0040264d
  402a70:	00402849 	.word	0x00402849
  402a74:	004028bd 	.word	0x004028bd
  402a78:	00402699 	.word	0x00402699
  402a7c:	00402941 	.word	0x00402941
  402a80:	00402821 	.word	0x00402821

00402a84 <hri_twihs_write_CR_reg>:
{
	((Twihs *)hw)->TWIHS_IDR = mask;
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
  402a84:	b480      	push	{r7}
  402a86:	b083      	sub	sp, #12
  402a88:	af00      	add	r7, sp, #0
  402a8a:	6078      	str	r0, [r7, #4]
  402a8c:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  402a8e:	687b      	ldr	r3, [r7, #4]
  402a90:	683a      	ldr	r2, [r7, #0]
  402a92:	601a      	str	r2, [r3, #0]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402a94:	bf00      	nop
  402a96:	370c      	adds	r7, #12
  402a98:	46bd      	mov	sp, r7
  402a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a9e:	4770      	bx	lr

00402aa0 <hri_twihs_write_THR_reg>:

static inline void hri_twihs_write_THR_reg(const void *const hw, hri_twihs_thr_reg_t data)
{
  402aa0:	b480      	push	{r7}
  402aa2:	b083      	sub	sp, #12
  402aa4:	af00      	add	r7, sp, #0
  402aa6:	6078      	str	r0, [r7, #4]
  402aa8:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_THR = data;
  402aaa:	687b      	ldr	r3, [r7, #4]
  402aac:	683a      	ldr	r2, [r7, #0]
  402aae:	635a      	str	r2, [r3, #52]	; 0x34
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402ab0:	bf00      	nop
  402ab2:	370c      	adds	r7, #12
  402ab4:	46bd      	mov	sp, r7
  402ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aba:	4770      	bx	lr

00402abc <hri_twihs_write_MMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_MMR_reg(const void *const hw, hri_twihs_mmr_reg_t data)
{
  402abc:	b480      	push	{r7}
  402abe:	b083      	sub	sp, #12
  402ac0:	af00      	add	r7, sp, #0
  402ac2:	6078      	str	r0, [r7, #4]
  402ac4:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_MMR = data;
  402ac6:	687b      	ldr	r3, [r7, #4]
  402ac8:	683a      	ldr	r2, [r7, #0]
  402aca:	605a      	str	r2, [r3, #4]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402acc:	bf00      	nop
  402ace:	370c      	adds	r7, #12
  402ad0:	46bd      	mov	sp, r7
  402ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ad6:	4770      	bx	lr

00402ad8 <hri_twihs_write_IADR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_IADR_reg(const void *const hw, hri_twihs_iadr_reg_t data)
{
  402ad8:	b480      	push	{r7}
  402ada:	b083      	sub	sp, #12
  402adc:	af00      	add	r7, sp, #0
  402ade:	6078      	str	r0, [r7, #4]
  402ae0:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_IADR = data;
  402ae2:	687b      	ldr	r3, [r7, #4]
  402ae4:	683a      	ldr	r2, [r7, #0]
  402ae6:	60da      	str	r2, [r3, #12]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402ae8:	bf00      	nop
  402aea:	370c      	adds	r7, #12
  402aec:	46bd      	mov	sp, r7
  402aee:	f85d 7b04 	ldr.w	r7, [sp], #4
  402af2:	4770      	bx	lr

00402af4 <hri_twihs_write_CWGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_CWGR_reg(const void *const hw, hri_twihs_cwgr_reg_t data)
{
  402af4:	b480      	push	{r7}
  402af6:	b083      	sub	sp, #12
  402af8:	af00      	add	r7, sp, #0
  402afa:	6078      	str	r0, [r7, #4]
  402afc:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CWGR = data;
  402afe:	687b      	ldr	r3, [r7, #4]
  402b00:	683a      	ldr	r2, [r7, #0]
  402b02:	611a      	str	r2, [r3, #16]
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402b04:	bf00      	nop
  402b06:	370c      	adds	r7, #12
  402b08:	46bd      	mov	sp, r7
  402b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b0e:	4770      	bx	lr

00402b10 <hri_twihs_write_SMBTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_SMBTR_reg(const void *const hw, hri_twihs_smbtr_reg_t data)
{
  402b10:	b480      	push	{r7}
  402b12:	b083      	sub	sp, #12
  402b14:	af00      	add	r7, sp, #0
  402b16:	6078      	str	r0, [r7, #4]
  402b18:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_SMBTR = data;
  402b1a:	687b      	ldr	r3, [r7, #4]
  402b1c:	683a      	ldr	r2, [r7, #0]
  402b1e:	639a      	str	r2, [r3, #56]	; 0x38
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402b20:	bf00      	nop
  402b22:	370c      	adds	r7, #12
  402b24:	46bd      	mov	sp, r7
  402b26:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b2a:	4770      	bx	lr

00402b2c <hri_twihs_write_FILTR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_twihs_write_FILTR_reg(const void *const hw, hri_twihs_filtr_reg_t data)
{
  402b2c:	b480      	push	{r7}
  402b2e:	b083      	sub	sp, #12
  402b30:	af00      	add	r7, sp, #0
  402b32:	6078      	str	r0, [r7, #4]
  402b34:	6039      	str	r1, [r7, #0]
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_FILTR = data;
  402b36:	687b      	ldr	r3, [r7, #4]
  402b38:	683a      	ldr	r2, [r7, #0]
  402b3a:	645a      	str	r2, [r3, #68]	; 0x44
	TWIHS_CRITICAL_SECTION_LEAVE();
}
  402b3c:	bf00      	nop
  402b3e:	370c      	adds	r7, #12
  402b40:	46bd      	mov	sp, r7
  402b42:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b46:	4770      	bx	lr

00402b48 <hri_twihs_get_SR_TXCOMP_bit>:
{
	return ((Twihs *)hw)->TWIHS_WPMR;
}

static inline bool hri_twihs_get_SR_TXCOMP_bit(const void *const hw)
{
  402b48:	b480      	push	{r7}
  402b4a:	b083      	sub	sp, #12
  402b4c:	af00      	add	r7, sp, #0
  402b4e:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  402b50:	687b      	ldr	r3, [r7, #4]
  402b52:	6a1b      	ldr	r3, [r3, #32]
  402b54:	f003 0301 	and.w	r3, r3, #1
  402b58:	2b00      	cmp	r3, #0
  402b5a:	bf14      	ite	ne
  402b5c:	2301      	movne	r3, #1
  402b5e:	2300      	moveq	r3, #0
  402b60:	b2db      	uxtb	r3, r3
}
  402b62:	4618      	mov	r0, r3
  402b64:	370c      	adds	r7, #12
  402b66:	46bd      	mov	sp, r7
  402b68:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b6c:	4770      	bx	lr

00402b6e <hri_twihs_get_SR_RXRDY_bit>:

static inline bool hri_twihs_get_SR_RXRDY_bit(const void *const hw)
{
  402b6e:	b480      	push	{r7}
  402b70:	b083      	sub	sp, #12
  402b72:	af00      	add	r7, sp, #0
  402b74:	6078      	str	r0, [r7, #4]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  402b76:	687b      	ldr	r3, [r7, #4]
  402b78:	6a1b      	ldr	r3, [r3, #32]
  402b7a:	f003 0302 	and.w	r3, r3, #2
  402b7e:	2b00      	cmp	r3, #0
  402b80:	bf14      	ite	ne
  402b82:	2301      	movne	r3, #1
  402b84:	2300      	moveq	r3, #0
  402b86:	b2db      	uxtb	r3, r3
}
  402b88:	4618      	mov	r0, r3
  402b8a:	370c      	adds	r7, #12
  402b8c:	46bd      	mov	sp, r7
  402b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b92:	4770      	bx	lr

00402b94 <hri_twihs_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_sr_reg_t hri_twihs_read_SR_reg(const void *const hw)
{
  402b94:	b480      	push	{r7}
  402b96:	b083      	sub	sp, #12
  402b98:	af00      	add	r7, sp, #0
  402b9a:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_SR;
  402b9c:	687b      	ldr	r3, [r7, #4]
  402b9e:	6a1b      	ldr	r3, [r3, #32]
}
  402ba0:	4618      	mov	r0, r3
  402ba2:	370c      	adds	r7, #12
  402ba4:	46bd      	mov	sp, r7
  402ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402baa:	4770      	bx	lr

00402bac <hri_twihs_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_twihs_rhr_reg_t hri_twihs_read_RHR_reg(const void *const hw)
{
  402bac:	b480      	push	{r7}
  402bae:	b083      	sub	sp, #12
  402bb0:	af00      	add	r7, sp, #0
  402bb2:	6078      	str	r0, [r7, #4]
	return ((Twihs *)hw)->TWIHS_RHR;
  402bb4:	687b      	ldr	r3, [r7, #4]
  402bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  402bb8:	4618      	mov	r0, r3
  402bba:	370c      	adds	r7, #12
  402bbc:	46bd      	mov	sp, r7
  402bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bc2:	4770      	bx	lr

00402bc4 <_get_i2cm_sync_cfg>:

/**
 * \berif Retrieve I2C Master Sync configuration instance
 */
static const struct _i2cm_sync_cfg *_get_i2cm_sync_cfg(void *hw)
{
  402bc4:	b480      	push	{r7}
  402bc6:	b085      	sub	sp, #20
  402bc8:	af00      	add	r7, sp, #0
  402bca:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  402bcc:	2300      	movs	r3, #0
  402bce:	73fb      	strb	r3, [r7, #15]
  402bd0:	e015      	b.n	402bfe <_get_i2cm_sync_cfg+0x3a>
		if (_i2cm_sync_cfgs[i].hw == hw) {
  402bd2:	7bfa      	ldrb	r2, [r7, #15]
  402bd4:	490f      	ldr	r1, [pc, #60]	; (402c14 <_get_i2cm_sync_cfg+0x50>)
  402bd6:	4613      	mov	r3, r2
  402bd8:	005b      	lsls	r3, r3, #1
  402bda:	4413      	add	r3, r2
  402bdc:	00db      	lsls	r3, r3, #3
  402bde:	440b      	add	r3, r1
  402be0:	681a      	ldr	r2, [r3, #0]
  402be2:	687b      	ldr	r3, [r7, #4]
  402be4:	429a      	cmp	r2, r3
  402be6:	d107      	bne.n	402bf8 <_get_i2cm_sync_cfg+0x34>
			return &(_i2cm_sync_cfgs[i]);
  402be8:	7bfa      	ldrb	r2, [r7, #15]
  402bea:	4613      	mov	r3, r2
  402bec:	005b      	lsls	r3, r3, #1
  402bee:	4413      	add	r3, r2
  402bf0:	00db      	lsls	r3, r3, #3
  402bf2:	4a08      	ldr	r2, [pc, #32]	; (402c14 <_get_i2cm_sync_cfg+0x50>)
  402bf4:	4413      	add	r3, r2
  402bf6:	e006      	b.n	402c06 <_get_i2cm_sync_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_i2cm_sync_cfgs); i++) {
  402bf8:	7bfb      	ldrb	r3, [r7, #15]
  402bfa:	3301      	adds	r3, #1
  402bfc:	73fb      	strb	r3, [r7, #15]
  402bfe:	7bfb      	ldrb	r3, [r7, #15]
  402c00:	2b00      	cmp	r3, #0
  402c02:	d0e6      	beq.n	402bd2 <_get_i2cm_sync_cfg+0xe>
		}
	}
	return NULL;
  402c04:	2300      	movs	r3, #0
}
  402c06:	4618      	mov	r0, r3
  402c08:	3714      	adds	r7, #20
  402c0a:	46bd      	mov	sp, r7
  402c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c10:	4770      	bx	lr
  402c12:	bf00      	nop
  402c14:	0040542c 	.word	0x0040542c

00402c18 <_i2c_m_sync_init>:

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  402c18:	b580      	push	{r7, lr}
  402c1a:	b084      	sub	sp, #16
  402c1c:	af00      	add	r7, sp, #0
  402c1e:	6078      	str	r0, [r7, #4]
  402c20:	6039      	str	r1, [r7, #0]
	ASSERT(dev && hw);
  402c22:	687b      	ldr	r3, [r7, #4]
  402c24:	2b00      	cmp	r3, #0
  402c26:	d004      	beq.n	402c32 <_i2c_m_sync_init+0x1a>
  402c28:	683b      	ldr	r3, [r7, #0]
  402c2a:	2b00      	cmp	r3, #0
  402c2c:	d001      	beq.n	402c32 <_i2c_m_sync_init+0x1a>
  402c2e:	2301      	movs	r3, #1
  402c30:	e000      	b.n	402c34 <_i2c_m_sync_init+0x1c>
  402c32:	2300      	movs	r3, #0
  402c34:	f003 0301 	and.w	r3, r3, #1
  402c38:	b2db      	uxtb	r3, r3
  402c3a:	2282      	movs	r2, #130	; 0x82
  402c3c:	4918      	ldr	r1, [pc, #96]	; (402ca0 <_i2c_m_sync_init+0x88>)
  402c3e:	4618      	mov	r0, r3
  402c40:	4b18      	ldr	r3, [pc, #96]	; (402ca4 <_i2c_m_sync_init+0x8c>)
  402c42:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  402c44:	687b      	ldr	r3, [r7, #4]
  402c46:	683a      	ldr	r2, [r7, #0]
  402c48:	611a      	str	r2, [r3, #16]
	cfg     = _get_i2cm_sync_cfg(dev->hw);
  402c4a:	687b      	ldr	r3, [r7, #4]
  402c4c:	691b      	ldr	r3, [r3, #16]
  402c4e:	4618      	mov	r0, r3
  402c50:	4b15      	ldr	r3, [pc, #84]	; (402ca8 <_i2c_m_sync_init+0x90>)
  402c52:	4798      	blx	r3
  402c54:	60f8      	str	r0, [r7, #12]

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  402c56:	687b      	ldr	r3, [r7, #4]
  402c58:	691a      	ldr	r2, [r3, #16]
  402c5a:	68fb      	ldr	r3, [r7, #12]
  402c5c:	685b      	ldr	r3, [r3, #4]
  402c5e:	4619      	mov	r1, r3
  402c60:	4610      	mov	r0, r2
  402c62:	4b12      	ldr	r3, [pc, #72]	; (402cac <_i2c_m_sync_init+0x94>)
  402c64:	4798      	blx	r3
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  402c66:	687b      	ldr	r3, [r7, #4]
  402c68:	691a      	ldr	r2, [r3, #16]
  402c6a:	68fb      	ldr	r3, [r7, #12]
  402c6c:	689b      	ldr	r3, [r3, #8]
  402c6e:	4619      	mov	r1, r3
  402c70:	4610      	mov	r0, r2
  402c72:	4b0f      	ldr	r3, [pc, #60]	; (402cb0 <_i2c_m_sync_init+0x98>)
  402c74:	4798      	blx	r3
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  402c76:	687b      	ldr	r3, [r7, #4]
  402c78:	691a      	ldr	r2, [r3, #16]
  402c7a:	68fb      	ldr	r3, [r7, #12]
  402c7c:	68db      	ldr	r3, [r3, #12]
  402c7e:	4619      	mov	r1, r3
  402c80:	4610      	mov	r0, r2
  402c82:	4b0c      	ldr	r3, [pc, #48]	; (402cb4 <_i2c_m_sync_init+0x9c>)
  402c84:	4798      	blx	r3
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  402c86:	687b      	ldr	r3, [r7, #4]
  402c88:	691a      	ldr	r2, [r3, #16]
  402c8a:	68fb      	ldr	r3, [r7, #12]
  402c8c:	691b      	ldr	r3, [r3, #16]
  402c8e:	4619      	mov	r1, r3
  402c90:	4610      	mov	r0, r2
  402c92:	4b09      	ldr	r3, [pc, #36]	; (402cb8 <_i2c_m_sync_init+0xa0>)
  402c94:	4798      	blx	r3

	return ERR_NONE;
  402c96:	2300      	movs	r3, #0
}
  402c98:	4618      	mov	r0, r3
  402c9a:	3710      	adds	r7, #16
  402c9c:	46bd      	mov	sp, r7
  402c9e:	bd80      	pop	{r7, pc}
  402ca0:	00405444 	.word	0x00405444
  402ca4:	004018f5 	.word	0x004018f5
  402ca8:	00402bc5 	.word	0x00402bc5
  402cac:	00402a85 	.word	0x00402a85
  402cb0:	00402b11 	.word	0x00402b11
  402cb4:	00402b2d 	.word	0x00402b2d
  402cb8:	00402af5 	.word	0x00402af5

00402cbc <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  402cbc:	b580      	push	{r7, lr}
  402cbe:	b082      	sub	sp, #8
  402cc0:	af00      	add	r7, sp, #0
  402cc2:	6078      	str	r0, [r7, #4]
  402cc4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && msg);
  402cc6:	687b      	ldr	r3, [r7, #4]
  402cc8:	2b00      	cmp	r3, #0
  402cca:	d004      	beq.n	402cd6 <_i2c_m_sync_transfer+0x1a>
  402ccc:	683b      	ldr	r3, [r7, #0]
  402cce:	2b00      	cmp	r3, #0
  402cd0:	d001      	beq.n	402cd6 <_i2c_m_sync_transfer+0x1a>
  402cd2:	2301      	movs	r3, #1
  402cd4:	e000      	b.n	402cd8 <_i2c_m_sync_transfer+0x1c>
  402cd6:	2300      	movs	r3, #0
  402cd8:	f003 0301 	and.w	r3, r3, #1
  402cdc:	b2db      	uxtb	r3, r3
  402cde:	22c4      	movs	r2, #196	; 0xc4
  402ce0:	4911      	ldr	r1, [pc, #68]	; (402d28 <_i2c_m_sync_transfer+0x6c>)
  402ce2:	4618      	mov	r0, r3
  402ce4:	4b11      	ldr	r3, [pc, #68]	; (402d2c <_i2c_m_sync_transfer+0x70>)
  402ce6:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  402ce8:	687b      	ldr	r3, [r7, #4]
  402cea:	885b      	ldrh	r3, [r3, #2]
  402cec:	b29b      	uxth	r3, r3
  402cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402cf2:	2b00      	cmp	r3, #0
  402cf4:	d002      	beq.n	402cfc <_i2c_m_sync_transfer+0x40>
		return I2C_ERR_BUSY;
  402cf6:	f06f 0305 	mvn.w	r3, #5
  402cfa:	e011      	b.n	402d20 <_i2c_m_sync_transfer+0x64>
	}

	if (msg->flags & I2C_M_RD) {
  402cfc:	683b      	ldr	r3, [r7, #0]
  402cfe:	885b      	ldrh	r3, [r3, #2]
  402d00:	b29b      	uxth	r3, r3
  402d02:	f003 0301 	and.w	r3, r3, #1
  402d06:	2b00      	cmp	r3, #0
  402d08:	d005      	beq.n	402d16 <_i2c_m_sync_transfer+0x5a>
		return _i2c_m_sync_read(dev, msg);
  402d0a:	6839      	ldr	r1, [r7, #0]
  402d0c:	6878      	ldr	r0, [r7, #4]
  402d0e:	4b08      	ldr	r3, [pc, #32]	; (402d30 <_i2c_m_sync_transfer+0x74>)
  402d10:	4798      	blx	r3
  402d12:	4603      	mov	r3, r0
  402d14:	e004      	b.n	402d20 <_i2c_m_sync_transfer+0x64>
	} else {
		return _i2c_m_sync_write(dev, msg);
  402d16:	6839      	ldr	r1, [r7, #0]
  402d18:	6878      	ldr	r0, [r7, #4]
  402d1a:	4b06      	ldr	r3, [pc, #24]	; (402d34 <_i2c_m_sync_transfer+0x78>)
  402d1c:	4798      	blx	r3
  402d1e:	4603      	mov	r3, r0
	}
}
  402d20:	4618      	mov	r0, r3
  402d22:	3708      	adds	r7, #8
  402d24:	46bd      	mov	sp, r7
  402d26:	bd80      	pop	{r7, pc}
  402d28:	00405444 	.word	0x00405444
  402d2c:	004018f5 	.word	0x004018f5
  402d30:	00402e69 	.word	0x00402e69
  402d34:	00402d39 	.word	0x00402d39

00402d38 <_i2c_m_sync_write>:

static inline int32_t _i2c_m_sync_write(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  402d38:	b580      	push	{r7, lr}
  402d3a:	b086      	sub	sp, #24
  402d3c:	af00      	add	r7, sp, #0
  402d3e:	6078      	str	r0, [r7, #4]
  402d40:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;
  402d42:	2300      	movs	r3, #0
  402d44:	613b      	str	r3, [r7, #16]

	msg->flags |= I2C_M_BUSY;
  402d46:	683b      	ldr	r3, [r7, #0]
  402d48:	885b      	ldrh	r3, [r3, #2]
  402d4a:	b29b      	uxth	r3, r3
  402d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402d50:	b29a      	uxth	r2, r3
  402d52:	683b      	ldr	r3, [r7, #0]
  402d54:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  402d56:	683b      	ldr	r3, [r7, #0]
  402d58:	881b      	ldrh	r3, [r3, #0]
  402d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402d5e:	2b00      	cmp	r3, #0
  402d60:	d01b      	beq.n	402d9a <_i2c_m_sync_write+0x62>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  402d62:	687b      	ldr	r3, [r7, #4]
  402d64:	691a      	ldr	r2, [r3, #16]
  402d66:	683b      	ldr	r3, [r7, #0]
  402d68:	881b      	ldrh	r3, [r3, #0]
  402d6a:	0a1b      	lsrs	r3, r3, #8
  402d6c:	b29b      	uxth	r3, r3
  402d6e:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  402d72:	b29b      	uxth	r3, r3
  402d74:	041b      	lsls	r3, r3, #16
  402d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402d7e:	4619      	mov	r1, r3
  402d80:	4610      	mov	r0, r2
  402d82:	4b33      	ldr	r3, [pc, #204]	; (402e50 <_i2c_m_sync_write+0x118>)
  402d84:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  402d86:	687b      	ldr	r3, [r7, #4]
  402d88:	691a      	ldr	r2, [r3, #16]
  402d8a:	683b      	ldr	r3, [r7, #0]
  402d8c:	881b      	ldrh	r3, [r3, #0]
  402d8e:	b2db      	uxtb	r3, r3
  402d90:	4619      	mov	r1, r3
  402d92:	4610      	mov	r0, r2
  402d94:	4b2f      	ldr	r3, [pc, #188]	; (402e54 <_i2c_m_sync_write+0x11c>)
  402d96:	4798      	blx	r3
  402d98:	e00a      	b.n	402db0 <_i2c_m_sync_write+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  402d9a:	687b      	ldr	r3, [r7, #4]
  402d9c:	691a      	ldr	r2, [r3, #16]
  402d9e:	683b      	ldr	r3, [r7, #0]
  402da0:	881b      	ldrh	r3, [r3, #0]
  402da2:	041b      	lsls	r3, r3, #16
  402da4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402da8:	4619      	mov	r1, r3
  402daa:	4610      	mov	r0, r2
  402dac:	4b28      	ldr	r3, [pc, #160]	; (402e50 <_i2c_m_sync_write+0x118>)
  402dae:	4798      	blx	r3
	}

	for (i = 0; i < msg->len; i++) {
  402db0:	2300      	movs	r3, #0
  402db2:	617b      	str	r3, [r7, #20]
  402db4:	e020      	b.n	402df8 <_i2c_m_sync_write+0xc0>
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
  402db6:	687b      	ldr	r3, [r7, #4]
  402db8:	691b      	ldr	r3, [r3, #16]
  402dba:	4618      	mov	r0, r3
  402dbc:	4b26      	ldr	r3, [pc, #152]	; (402e58 <_i2c_m_sync_write+0x120>)
  402dbe:	4798      	blx	r3
  402dc0:	60f8      	str	r0, [r7, #12]
			if (sr & TWIHS_SR_NACK) {
  402dc2:	68fb      	ldr	r3, [r7, #12]
  402dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  402dc8:	2b00      	cmp	r3, #0
  402dca:	d003      	beq.n	402dd4 <_i2c_m_sync_write+0x9c>
				ret = I2C_NACK;
  402dcc:	f06f 0301 	mvn.w	r3, #1
  402dd0:	613b      	str	r3, [r7, #16]
				break;
  402dd2:	e004      	b.n	402dde <_i2c_m_sync_write+0xa6>
			}
		} while (!(sr & TWIHS_SR_TXRDY));
  402dd4:	68fb      	ldr	r3, [r7, #12]
  402dd6:	f003 0304 	and.w	r3, r3, #4
  402dda:	2b00      	cmp	r3, #0
  402ddc:	d0eb      	beq.n	402db6 <_i2c_m_sync_write+0x7e>

		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  402dde:	687b      	ldr	r3, [r7, #4]
  402de0:	6918      	ldr	r0, [r3, #16]
  402de2:	683b      	ldr	r3, [r7, #0]
  402de4:	689a      	ldr	r2, [r3, #8]
  402de6:	697b      	ldr	r3, [r7, #20]
  402de8:	4413      	add	r3, r2
  402dea:	781b      	ldrb	r3, [r3, #0]
  402dec:	4619      	mov	r1, r3
  402dee:	4b1b      	ldr	r3, [pc, #108]	; (402e5c <_i2c_m_sync_write+0x124>)
  402df0:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  402df2:	697b      	ldr	r3, [r7, #20]
  402df4:	3301      	adds	r3, #1
  402df6:	617b      	str	r3, [r7, #20]
  402df8:	683b      	ldr	r3, [r7, #0]
  402dfa:	685b      	ldr	r3, [r3, #4]
  402dfc:	461a      	mov	r2, r3
  402dfe:	697b      	ldr	r3, [r7, #20]
  402e00:	429a      	cmp	r2, r3
  402e02:	d8d8      	bhi.n	402db6 <_i2c_m_sync_write+0x7e>
	}

	if (msg->flags & I2C_M_STOP) {
  402e04:	683b      	ldr	r3, [r7, #0]
  402e06:	885b      	ldrh	r3, [r3, #2]
  402e08:	b29b      	uxth	r3, r3
  402e0a:	b21b      	sxth	r3, r3
  402e0c:	2b00      	cmp	r3, #0
  402e0e:	da11      	bge.n	402e34 <_i2c_m_sync_write+0xfc>
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  402e10:	687b      	ldr	r3, [r7, #4]
  402e12:	691b      	ldr	r3, [r3, #16]
  402e14:	2102      	movs	r1, #2
  402e16:	4618      	mov	r0, r3
  402e18:	4b11      	ldr	r3, [pc, #68]	; (402e60 <_i2c_m_sync_write+0x128>)
  402e1a:	4798      	blx	r3
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  402e1c:	bf00      	nop
  402e1e:	687b      	ldr	r3, [r7, #4]
  402e20:	691b      	ldr	r3, [r3, #16]
  402e22:	4618      	mov	r0, r3
  402e24:	4b0f      	ldr	r3, [pc, #60]	; (402e64 <_i2c_m_sync_write+0x12c>)
  402e26:	4798      	blx	r3
  402e28:	4603      	mov	r3, r0
  402e2a:	f083 0301 	eor.w	r3, r3, #1
  402e2e:	b2db      	uxtb	r3, r3
  402e30:	2b00      	cmp	r3, #0
  402e32:	d1f4      	bne.n	402e1e <_i2c_m_sync_write+0xe6>
		};
	}

	dev->service.msg.flags &= ~I2C_M_BUSY;
  402e34:	687b      	ldr	r3, [r7, #4]
  402e36:	885b      	ldrh	r3, [r3, #2]
  402e38:	b29b      	uxth	r3, r3
  402e3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402e3e:	b29a      	uxth	r2, r3
  402e40:	687b      	ldr	r3, [r7, #4]
  402e42:	805a      	strh	r2, [r3, #2]

	return ret;
  402e44:	693b      	ldr	r3, [r7, #16]
}
  402e46:	4618      	mov	r0, r3
  402e48:	3718      	adds	r7, #24
  402e4a:	46bd      	mov	sp, r7
  402e4c:	bd80      	pop	{r7, pc}
  402e4e:	bf00      	nop
  402e50:	00402abd 	.word	0x00402abd
  402e54:	00402ad9 	.word	0x00402ad9
  402e58:	00402b95 	.word	0x00402b95
  402e5c:	00402aa1 	.word	0x00402aa1
  402e60:	00402a85 	.word	0x00402a85
  402e64:	00402b49 	.word	0x00402b49

00402e68 <_i2c_m_sync_read>:

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  402e68:	b590      	push	{r4, r7, lr}
  402e6a:	b085      	sub	sp, #20
  402e6c:	af00      	add	r7, sp, #0
  402e6e:	6078      	str	r0, [r7, #4]
  402e70:	6039      	str	r1, [r7, #0]
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  402e72:	683b      	ldr	r3, [r7, #0]
  402e74:	885b      	ldrh	r3, [r3, #2]
  402e76:	b29b      	uxth	r3, r3
  402e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  402e7c:	b29a      	uxth	r2, r3
  402e7e:	683b      	ldr	r3, [r7, #0]
  402e80:	805a      	strh	r2, [r3, #2]

	if (msg->addr & I2C_M_TEN) {
  402e82:	683b      	ldr	r3, [r7, #0]
  402e84:	881b      	ldrh	r3, [r3, #0]
  402e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  402e8a:	2b00      	cmp	r3, #0
  402e8c:	d01b      	beq.n	402ec6 <_i2c_m_sync_read+0x5e>
		hri_twihs_write_MMR_reg(dev->hw,
  402e8e:	687b      	ldr	r3, [r7, #4]
  402e90:	691a      	ldr	r2, [r3, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  402e92:	683b      	ldr	r3, [r7, #0]
  402e94:	881b      	ldrh	r3, [r3, #0]
  402e96:	0a1b      	lsrs	r3, r3, #8
  402e98:	b29b      	uxth	r3, r3
  402e9a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  402e9e:	b29b      	uxth	r3, r3
  402ea0:	041b      	lsls	r3, r3, #16
  402ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402ea6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
		hri_twihs_write_MMR_reg(dev->hw,
  402eaa:	4619      	mov	r1, r3
  402eac:	4610      	mov	r0, r2
  402eae:	4b38      	ldr	r3, [pc, #224]	; (402f90 <_i2c_m_sync_read+0x128>)
  402eb0:	4798      	blx	r3
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  402eb2:	687b      	ldr	r3, [r7, #4]
  402eb4:	691a      	ldr	r2, [r3, #16]
  402eb6:	683b      	ldr	r3, [r7, #0]
  402eb8:	881b      	ldrh	r3, [r3, #0]
  402eba:	b2db      	uxtb	r3, r3
  402ebc:	4619      	mov	r1, r3
  402ebe:	4610      	mov	r0, r2
  402ec0:	4b34      	ldr	r3, [pc, #208]	; (402f94 <_i2c_m_sync_read+0x12c>)
  402ec2:	4798      	blx	r3
  402ec4:	e00c      	b.n	402ee0 <_i2c_m_sync_read+0x78>
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  402ec6:	687b      	ldr	r3, [r7, #4]
  402ec8:	691a      	ldr	r2, [r3, #16]
  402eca:	683b      	ldr	r3, [r7, #0]
  402ecc:	881b      	ldrh	r3, [r3, #0]
  402ece:	041b      	lsls	r3, r3, #16
  402ed0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  402ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  402ed8:	4619      	mov	r1, r3
  402eda:	4610      	mov	r0, r2
  402edc:	4b2c      	ldr	r3, [pc, #176]	; (402f90 <_i2c_m_sync_read+0x128>)
  402ede:	4798      	blx	r3
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  402ee0:	687b      	ldr	r3, [r7, #4]
  402ee2:	691a      	ldr	r2, [r3, #16]
  402ee4:	683b      	ldr	r3, [r7, #0]
  402ee6:	685b      	ldr	r3, [r3, #4]
  402ee8:	2b01      	cmp	r3, #1
  402eea:	d101      	bne.n	402ef0 <_i2c_m_sync_read+0x88>
  402eec:	2303      	movs	r3, #3
  402eee:	e000      	b.n	402ef2 <_i2c_m_sync_read+0x8a>
  402ef0:	2301      	movs	r3, #1
  402ef2:	4619      	mov	r1, r3
  402ef4:	4610      	mov	r0, r2
  402ef6:	4b28      	ldr	r3, [pc, #160]	; (402f98 <_i2c_m_sync_read+0x130>)
  402ef8:	4798      	blx	r3

	for (i = 0; i < msg->len; i++) {
  402efa:	2300      	movs	r3, #0
  402efc:	60fb      	str	r3, [r7, #12]
  402efe:	e027      	b.n	402f50 <_i2c_m_sync_read+0xe8>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  402f00:	bf00      	nop
  402f02:	687b      	ldr	r3, [r7, #4]
  402f04:	691b      	ldr	r3, [r3, #16]
  402f06:	4618      	mov	r0, r3
  402f08:	4b24      	ldr	r3, [pc, #144]	; (402f9c <_i2c_m_sync_read+0x134>)
  402f0a:	4798      	blx	r3
  402f0c:	4603      	mov	r3, r0
  402f0e:	f083 0301 	eor.w	r3, r3, #1
  402f12:	b2db      	uxtb	r3, r3
  402f14:	2b00      	cmp	r3, #0
  402f16:	d1f4      	bne.n	402f02 <_i2c_m_sync_read+0x9a>
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  402f18:	683b      	ldr	r3, [r7, #0]
  402f1a:	689a      	ldr	r2, [r3, #8]
  402f1c:	68fb      	ldr	r3, [r7, #12]
  402f1e:	18d4      	adds	r4, r2, r3
  402f20:	687b      	ldr	r3, [r7, #4]
  402f22:	691b      	ldr	r3, [r3, #16]
  402f24:	4618      	mov	r0, r3
  402f26:	4b1e      	ldr	r3, [pc, #120]	; (402fa0 <_i2c_m_sync_read+0x138>)
  402f28:	4798      	blx	r3
  402f2a:	4603      	mov	r3, r0
  402f2c:	b2db      	uxtb	r3, r3
  402f2e:	7023      	strb	r3, [r4, #0]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  402f30:	683b      	ldr	r3, [r7, #0]
  402f32:	685b      	ldr	r3, [r3, #4]
  402f34:	3b02      	subs	r3, #2
  402f36:	461a      	mov	r2, r3
  402f38:	68fb      	ldr	r3, [r7, #12]
  402f3a:	429a      	cmp	r2, r3
  402f3c:	d105      	bne.n	402f4a <_i2c_m_sync_read+0xe2>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  402f3e:	687b      	ldr	r3, [r7, #4]
  402f40:	691b      	ldr	r3, [r3, #16]
  402f42:	2102      	movs	r1, #2
  402f44:	4618      	mov	r0, r3
  402f46:	4b14      	ldr	r3, [pc, #80]	; (402f98 <_i2c_m_sync_read+0x130>)
  402f48:	4798      	blx	r3
	for (i = 0; i < msg->len; i++) {
  402f4a:	68fb      	ldr	r3, [r7, #12]
  402f4c:	3301      	adds	r3, #1
  402f4e:	60fb      	str	r3, [r7, #12]
  402f50:	683b      	ldr	r3, [r7, #0]
  402f52:	685b      	ldr	r3, [r3, #4]
  402f54:	461a      	mov	r2, r3
  402f56:	68fb      	ldr	r3, [r7, #12]
  402f58:	429a      	cmp	r2, r3
  402f5a:	d8d1      	bhi.n	402f00 <_i2c_m_sync_read+0x98>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  402f5c:	bf00      	nop
  402f5e:	687b      	ldr	r3, [r7, #4]
  402f60:	691b      	ldr	r3, [r3, #16]
  402f62:	4618      	mov	r0, r3
  402f64:	4b0f      	ldr	r3, [pc, #60]	; (402fa4 <_i2c_m_sync_read+0x13c>)
  402f66:	4798      	blx	r3
  402f68:	4603      	mov	r3, r0
  402f6a:	f083 0301 	eor.w	r3, r3, #1
  402f6e:	b2db      	uxtb	r3, r3
  402f70:	2b00      	cmp	r3, #0
  402f72:	d1f4      	bne.n	402f5e <_i2c_m_sync_read+0xf6>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  402f74:	687b      	ldr	r3, [r7, #4]
  402f76:	885b      	ldrh	r3, [r3, #2]
  402f78:	b29b      	uxth	r3, r3
  402f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402f7e:	b29a      	uxth	r2, r3
  402f80:	687b      	ldr	r3, [r7, #4]
  402f82:	805a      	strh	r2, [r3, #2]

	return ERR_NONE;
  402f84:	2300      	movs	r3, #0
}
  402f86:	4618      	mov	r0, r3
  402f88:	3714      	adds	r7, #20
  402f8a:	46bd      	mov	sp, r7
  402f8c:	bd90      	pop	{r4, r7, pc}
  402f8e:	bf00      	nop
  402f90:	00402abd 	.word	0x00402abd
  402f94:	00402ad9 	.word	0x00402ad9
  402f98:	00402a85 	.word	0x00402a85
  402f9c:	00402b6f 	.word	0x00402b6f
  402fa0:	00402bad 	.word	0x00402bad
  402fa4:	00402b49 	.word	0x00402b49

00402fa8 <NVIC_EnableIRQ>:
{
  402fa8:	b480      	push	{r7}
  402faa:	b083      	sub	sp, #12
  402fac:	af00      	add	r7, sp, #0
  402fae:	4603      	mov	r3, r0
  402fb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402fb2:	4909      	ldr	r1, [pc, #36]	; (402fd8 <NVIC_EnableIRQ+0x30>)
  402fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fb8:	095b      	lsrs	r3, r3, #5
  402fba:	79fa      	ldrb	r2, [r7, #7]
  402fbc:	f002 021f 	and.w	r2, r2, #31
  402fc0:	2001      	movs	r0, #1
  402fc2:	fa00 f202 	lsl.w	r2, r0, r2
  402fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  402fca:	bf00      	nop
  402fcc:	370c      	adds	r7, #12
  402fce:	46bd      	mov	sp, r7
  402fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fd4:	4770      	bx	lr
  402fd6:	bf00      	nop
  402fd8:	e000e100 	.word	0xe000e100

00402fdc <NVIC_DisableIRQ>:
{
  402fdc:	b480      	push	{r7}
  402fde:	b083      	sub	sp, #12
  402fe0:	af00      	add	r7, sp, #0
  402fe2:	4603      	mov	r3, r0
  402fe4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402fe6:	4909      	ldr	r1, [pc, #36]	; (40300c <NVIC_DisableIRQ+0x30>)
  402fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402fec:	095b      	lsrs	r3, r3, #5
  402fee:	79fa      	ldrb	r2, [r7, #7]
  402ff0:	f002 021f 	and.w	r2, r2, #31
  402ff4:	2001      	movs	r0, #1
  402ff6:	fa00 f202 	lsl.w	r2, r0, r2
  402ffa:	3320      	adds	r3, #32
  402ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403000:	bf00      	nop
  403002:	370c      	adds	r7, #12
  403004:	46bd      	mov	sp, r7
  403006:	f85d 7b04 	ldr.w	r7, [sp], #4
  40300a:	4770      	bx	lr
  40300c:	e000e100 	.word	0xe000e100

00403010 <NVIC_ClearPendingIRQ>:
{
  403010:	b480      	push	{r7}
  403012:	b083      	sub	sp, #12
  403014:	af00      	add	r7, sp, #0
  403016:	4603      	mov	r3, r0
  403018:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40301a:	4909      	ldr	r1, [pc, #36]	; (403040 <NVIC_ClearPendingIRQ+0x30>)
  40301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403020:	095b      	lsrs	r3, r3, #5
  403022:	79fa      	ldrb	r2, [r7, #7]
  403024:	f002 021f 	and.w	r2, r2, #31
  403028:	2001      	movs	r0, #1
  40302a:	fa00 f202 	lsl.w	r2, r0, r2
  40302e:	3360      	adds	r3, #96	; 0x60
  403030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403034:	bf00      	nop
  403036:	370c      	adds	r7, #12
  403038:	46bd      	mov	sp, r7
  40303a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40303e:	4770      	bx	lr
  403040:	e000e100 	.word	0xe000e100

00403044 <hri_uart_get_IMR_RXRDY_bit>:
{
	((Uart *)hw)->UART_IER = UART_IMR_RXRDY;
}

static inline bool hri_uart_get_IMR_RXRDY_bit(const void *const hw)
{
  403044:	b480      	push	{r7}
  403046:	b083      	sub	sp, #12
  403048:	af00      	add	r7, sp, #0
  40304a:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_RXRDY) >> UART_IMR_RXRDY_Pos;
  40304c:	687b      	ldr	r3, [r7, #4]
  40304e:	691b      	ldr	r3, [r3, #16]
  403050:	f003 0301 	and.w	r3, r3, #1
  403054:	2b00      	cmp	r3, #0
  403056:	bf14      	ite	ne
  403058:	2301      	movne	r3, #1
  40305a:	2300      	moveq	r3, #0
  40305c:	b2db      	uxtb	r3, r3
}
  40305e:	4618      	mov	r0, r3
  403060:	370c      	adds	r7, #12
  403062:	46bd      	mov	sp, r7
  403064:	f85d 7b04 	ldr.w	r7, [sp], #4
  403068:	4770      	bx	lr

0040306a <hri_uart_set_IMR_TXRDY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_RXRDY;
}

static inline void hri_uart_set_IMR_TXRDY_bit(const void *const hw)
{
  40306a:	b480      	push	{r7}
  40306c:	b083      	sub	sp, #12
  40306e:	af00      	add	r7, sp, #0
  403070:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
  403072:	687b      	ldr	r3, [r7, #4]
  403074:	2202      	movs	r2, #2
  403076:	609a      	str	r2, [r3, #8]
}
  403078:	bf00      	nop
  40307a:	370c      	adds	r7, #12
  40307c:	46bd      	mov	sp, r7
  40307e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403082:	4770      	bx	lr

00403084 <hri_uart_get_IMR_TXRDY_bit>:

static inline bool hri_uart_get_IMR_TXRDY_bit(const void *const hw)
{
  403084:	b480      	push	{r7}
  403086:	b083      	sub	sp, #12
  403088:	af00      	add	r7, sp, #0
  40308a:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXRDY) >> UART_IMR_TXRDY_Pos;
  40308c:	687b      	ldr	r3, [r7, #4]
  40308e:	691b      	ldr	r3, [r3, #16]
  403090:	085b      	lsrs	r3, r3, #1
  403092:	f003 0301 	and.w	r3, r3, #1
  403096:	2b00      	cmp	r3, #0
  403098:	bf14      	ite	ne
  40309a:	2301      	movne	r3, #1
  40309c:	2300      	moveq	r3, #0
  40309e:	b2db      	uxtb	r3, r3
}
  4030a0:	4618      	mov	r0, r3
  4030a2:	370c      	adds	r7, #12
  4030a4:	46bd      	mov	sp, r7
  4030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030aa:	4770      	bx	lr

004030ac <hri_uart_clear_IMR_TXRDY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
	}
}

static inline void hri_uart_clear_IMR_TXRDY_bit(const void *const hw)
{
  4030ac:	b480      	push	{r7}
  4030ae:	b083      	sub	sp, #12
  4030b0:	af00      	add	r7, sp, #0
  4030b2:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXRDY;
  4030b4:	687b      	ldr	r3, [r7, #4]
  4030b6:	2202      	movs	r2, #2
  4030b8:	60da      	str	r2, [r3, #12]
}
  4030ba:	bf00      	nop
  4030bc:	370c      	adds	r7, #12
  4030be:	46bd      	mov	sp, r7
  4030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030c4:	4770      	bx	lr

004030c6 <hri_uart_set_IMR_TXEMPTY_bit>:
{
	((Uart *)hw)->UART_IDR = UART_IMR_PARE;
}

static inline void hri_uart_set_IMR_TXEMPTY_bit(const void *const hw)
{
  4030c6:	b480      	push	{r7}
  4030c8:	b083      	sub	sp, #12
  4030ca:	af00      	add	r7, sp, #0
  4030cc:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
  4030ce:	687b      	ldr	r3, [r7, #4]
  4030d0:	f44f 7200 	mov.w	r2, #512	; 0x200
  4030d4:	609a      	str	r2, [r3, #8]
}
  4030d6:	bf00      	nop
  4030d8:	370c      	adds	r7, #12
  4030da:	46bd      	mov	sp, r7
  4030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030e0:	4770      	bx	lr

004030e2 <hri_uart_get_IMR_TXEMPTY_bit>:

static inline bool hri_uart_get_IMR_TXEMPTY_bit(const void *const hw)
{
  4030e2:	b480      	push	{r7}
  4030e4:	b083      	sub	sp, #12
  4030e6:	af00      	add	r7, sp, #0
  4030e8:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXEMPTY) >> UART_IMR_TXEMPTY_Pos;
  4030ea:	687b      	ldr	r3, [r7, #4]
  4030ec:	691b      	ldr	r3, [r3, #16]
  4030ee:	0a5b      	lsrs	r3, r3, #9
  4030f0:	f003 0301 	and.w	r3, r3, #1
  4030f4:	2b00      	cmp	r3, #0
  4030f6:	bf14      	ite	ne
  4030f8:	2301      	movne	r3, #1
  4030fa:	2300      	moveq	r3, #0
  4030fc:	b2db      	uxtb	r3, r3
}
  4030fe:	4618      	mov	r0, r3
  403100:	370c      	adds	r7, #12
  403102:	46bd      	mov	sp, r7
  403104:	f85d 7b04 	ldr.w	r7, [sp], #4
  403108:	4770      	bx	lr

0040310a <hri_uart_clear_IMR_TXEMPTY_bit>:
		((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
	}
}

static inline void hri_uart_clear_IMR_TXEMPTY_bit(const void *const hw)
{
  40310a:	b480      	push	{r7}
  40310c:	b083      	sub	sp, #12
  40310e:	af00      	add	r7, sp, #0
  403110:	6078      	str	r0, [r7, #4]
	((Uart *)hw)->UART_IDR = UART_IMR_TXEMPTY;
  403112:	687b      	ldr	r3, [r7, #4]
  403114:	f44f 7200 	mov.w	r2, #512	; 0x200
  403118:	60da      	str	r2, [r3, #12]
}
  40311a:	bf00      	nop
  40311c:	370c      	adds	r7, #12
  40311e:	46bd      	mov	sp, r7
  403120:	f85d 7b04 	ldr.w	r7, [sp], #4
  403124:	4770      	bx	lr

00403126 <hri_uart_write_CR_reg>:
{
	((Uart *)hw)->UART_IDR = mask;
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
  403126:	b480      	push	{r7}
  403128:	b083      	sub	sp, #12
  40312a:	af00      	add	r7, sp, #0
  40312c:	6078      	str	r0, [r7, #4]
  40312e:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  403130:	687b      	ldr	r3, [r7, #4]
  403132:	683a      	ldr	r2, [r7, #0]
  403134:	601a      	str	r2, [r3, #0]
	UART_CRITICAL_SECTION_LEAVE();
}
  403136:	bf00      	nop
  403138:	370c      	adds	r7, #12
  40313a:	46bd      	mov	sp, r7
  40313c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403140:	4770      	bx	lr

00403142 <hri_uart_write_THR_reg>:

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
  403142:	b480      	push	{r7}
  403144:	b083      	sub	sp, #12
  403146:	af00      	add	r7, sp, #0
  403148:	6078      	str	r0, [r7, #4]
  40314a:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  40314c:	687b      	ldr	r3, [r7, #4]
  40314e:	683a      	ldr	r2, [r7, #0]
  403150:	61da      	str	r2, [r3, #28]
	UART_CRITICAL_SECTION_LEAVE();
}
  403152:	bf00      	nop
  403154:	370c      	adds	r7, #12
  403156:	46bd      	mov	sp, r7
  403158:	f85d 7b04 	ldr.w	r7, [sp], #4
  40315c:	4770      	bx	lr

0040315e <hri_uart_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_MR_reg(const void *const hw, hri_uart_mr_reg_t data)
{
  40315e:	b480      	push	{r7}
  403160:	b083      	sub	sp, #12
  403162:	af00      	add	r7, sp, #0
  403164:	6078      	str	r0, [r7, #4]
  403166:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_MR = data;
  403168:	687b      	ldr	r3, [r7, #4]
  40316a:	683a      	ldr	r2, [r7, #0]
  40316c:	605a      	str	r2, [r3, #4]
	UART_CRITICAL_SECTION_LEAVE();
}
  40316e:	bf00      	nop
  403170:	370c      	adds	r7, #12
  403172:	46bd      	mov	sp, r7
  403174:	f85d 7b04 	ldr.w	r7, [sp], #4
  403178:	4770      	bx	lr

0040317a <hri_uart_write_BRGR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_BRGR_reg(const void *const hw, hri_uart_brgr_reg_t data)
{
  40317a:	b480      	push	{r7}
  40317c:	b083      	sub	sp, #12
  40317e:	af00      	add	r7, sp, #0
  403180:	6078      	str	r0, [r7, #4]
  403182:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_BRGR = data;
  403184:	687b      	ldr	r3, [r7, #4]
  403186:	683a      	ldr	r2, [r7, #0]
  403188:	621a      	str	r2, [r3, #32]
	UART_CRITICAL_SECTION_LEAVE();
}
  40318a:	bf00      	nop
  40318c:	370c      	adds	r7, #12
  40318e:	46bd      	mov	sp, r7
  403190:	f85d 7b04 	ldr.w	r7, [sp], #4
  403194:	4770      	bx	lr

00403196 <hri_uart_write_WPMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
  403196:	b480      	push	{r7}
  403198:	b083      	sub	sp, #12
  40319a:	af00      	add	r7, sp, #0
  40319c:	6078      	str	r0, [r7, #4]
  40319e:	6039      	str	r1, [r7, #0]
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  4031a0:	687b      	ldr	r3, [r7, #4]
  4031a2:	683a      	ldr	r2, [r7, #0]
  4031a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	UART_CRITICAL_SECTION_LEAVE();
}
  4031a8:	bf00      	nop
  4031aa:	370c      	adds	r7, #12
  4031ac:	46bd      	mov	sp, r7
  4031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031b2:	4770      	bx	lr

004031b4 <hri_uart_get_SR_RXRDY_bit>:
{
	return ((Uart *)hw)->UART_WPMR;
}

static inline bool hri_uart_get_SR_RXRDY_bit(const void *const hw)
{
  4031b4:	b480      	push	{r7}
  4031b6:	b083      	sub	sp, #12
  4031b8:	af00      	add	r7, sp, #0
  4031ba:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  4031bc:	687b      	ldr	r3, [r7, #4]
  4031be:	695b      	ldr	r3, [r3, #20]
  4031c0:	f003 0301 	and.w	r3, r3, #1
  4031c4:	2b00      	cmp	r3, #0
  4031c6:	bf14      	ite	ne
  4031c8:	2301      	movne	r3, #1
  4031ca:	2300      	moveq	r3, #0
  4031cc:	b2db      	uxtb	r3, r3
}
  4031ce:	4618      	mov	r0, r3
  4031d0:	370c      	adds	r7, #12
  4031d2:	46bd      	mov	sp, r7
  4031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031d8:	4770      	bx	lr

004031da <hri_uart_get_SR_TXRDY_bit>:

static inline bool hri_uart_get_SR_TXRDY_bit(const void *const hw)
{
  4031da:	b480      	push	{r7}
  4031dc:	b083      	sub	sp, #12
  4031de:	af00      	add	r7, sp, #0
  4031e0:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  4031e2:	687b      	ldr	r3, [r7, #4]
  4031e4:	695b      	ldr	r3, [r3, #20]
  4031e6:	f003 0302 	and.w	r3, r3, #2
  4031ea:	2b00      	cmp	r3, #0
  4031ec:	bf14      	ite	ne
  4031ee:	2301      	movne	r3, #1
  4031f0:	2300      	moveq	r3, #0
  4031f2:	b2db      	uxtb	r3, r3
}
  4031f4:	4618      	mov	r0, r3
  4031f6:	370c      	adds	r7, #12
  4031f8:	46bd      	mov	sp, r7
  4031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031fe:	4770      	bx	lr

00403200 <hri_uart_get_SR_TXEMPTY_bit>:
{
	return (((Uart *)hw)->UART_SR & UART_SR_PARE) > 0;
}

static inline bool hri_uart_get_SR_TXEMPTY_bit(const void *const hw)
{
  403200:	b480      	push	{r7}
  403202:	b083      	sub	sp, #12
  403204:	af00      	add	r7, sp, #0
  403206:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  403208:	687b      	ldr	r3, [r7, #4]
  40320a:	695b      	ldr	r3, [r3, #20]
  40320c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  403210:	2b00      	cmp	r3, #0
  403212:	bf14      	ite	ne
  403214:	2301      	movne	r3, #1
  403216:	2300      	moveq	r3, #0
  403218:	b2db      	uxtb	r3, r3
}
  40321a:	4618      	mov	r0, r3
  40321c:	370c      	adds	r7, #12
  40321e:	46bd      	mov	sp, r7
  403220:	f85d 7b04 	ldr.w	r7, [sp], #4
  403224:	4770      	bx	lr

00403226 <hri_uart_read_SR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_sr_reg_t hri_uart_read_SR_reg(const void *const hw)
{
  403226:	b480      	push	{r7}
  403228:	b083      	sub	sp, #12
  40322a:	af00      	add	r7, sp, #0
  40322c:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_SR;
  40322e:	687b      	ldr	r3, [r7, #4]
  403230:	695b      	ldr	r3, [r3, #20]
}
  403232:	4618      	mov	r0, r3
  403234:	370c      	adds	r7, #12
  403236:	46bd      	mov	sp, r7
  403238:	f85d 7b04 	ldr.w	r7, [sp], #4
  40323c:	4770      	bx	lr

0040323e <hri_uart_read_RHR_RXCHR_bf>:
{
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR(mask)) >> UART_RHR_RXCHR_Pos;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_RXCHR_bf(const void *const hw)
{
  40323e:	b480      	push	{r7}
  403240:	b083      	sub	sp, #12
  403242:	af00      	add	r7, sp, #0
  403244:	6078      	str	r0, [r7, #4]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  403246:	687b      	ldr	r3, [r7, #4]
  403248:	699b      	ldr	r3, [r3, #24]
  40324a:	b2db      	uxtb	r3, r3
}
  40324c:	4618      	mov	r0, r3
  40324e:	370c      	adds	r7, #12
  403250:	46bd      	mov	sp, r7
  403252:	f85d 7b04 	ldr.w	r7, [sp], #4
  403256:	4770      	bx	lr

00403258 <hri_uart_read_RHR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_reg(const void *const hw)
{
  403258:	b480      	push	{r7}
  40325a:	b083      	sub	sp, #12
  40325c:	af00      	add	r7, sp, #0
  40325e:	6078      	str	r0, [r7, #4]
	return ((Uart *)hw)->UART_RHR;
  403260:	687b      	ldr	r3, [r7, #4]
  403262:	699b      	ldr	r3, [r3, #24]
}
  403264:	4618      	mov	r0, r3
  403266:	370c      	adds	r7, #12
  403268:	46bd      	mov	sp, r7
  40326a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40326e:	4770      	bx	lr

00403270 <_uart_get_irq_num>:
/**
 * \brief Retrieve IRQ number for the given hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_irq_num(const void *const hw)
{
  403270:	b580      	push	{r7, lr}
  403272:	b084      	sub	sp, #16
  403274:	af00      	add	r7, sp, #0
  403276:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  403278:	687b      	ldr	r3, [r7, #4]
  40327a:	2b00      	cmp	r3, #0
  40327c:	bf14      	ite	ne
  40327e:	2301      	movne	r3, #1
  403280:	2300      	moveq	r3, #0
  403282:	b2db      	uxtb	r3, r3
  403284:	2291      	movs	r2, #145	; 0x91
  403286:	4916      	ldr	r1, [pc, #88]	; (4032e0 <_uart_get_irq_num+0x70>)
  403288:	4618      	mov	r0, r3
  40328a:	4b16      	ldr	r3, [pc, #88]	; (4032e4 <_uart_get_irq_num+0x74>)
  40328c:	4798      	blx	r3
	uint8_t i;
	i = _uart_get_hardware_index(hw);
  40328e:	6878      	ldr	r0, [r7, #4]
  403290:	4b15      	ldr	r3, [pc, #84]	; (4032e8 <_uart_get_irq_num+0x78>)
  403292:	4798      	blx	r3
  403294:	4603      	mov	r3, r0
  403296:	73fb      	strb	r3, [r7, #15]
	switch (i) {
  403298:	7bfb      	ldrb	r3, [r7, #15]
  40329a:	2b04      	cmp	r3, #4
  40329c:	d816      	bhi.n	4032cc <_uart_get_irq_num+0x5c>
  40329e:	a201      	add	r2, pc, #4	; (adr r2, 4032a4 <_uart_get_irq_num+0x34>)
  4032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4032a4:	004032b9 	.word	0x004032b9
  4032a8:	004032bd 	.word	0x004032bd
  4032ac:	004032c1 	.word	0x004032c1
  4032b0:	004032c5 	.word	0x004032c5
  4032b4:	004032c9 	.word	0x004032c9
	case 0:
		return UART0_IRQn;
  4032b8:	2307      	movs	r3, #7
  4032ba:	e00d      	b.n	4032d8 <_uart_get_irq_num+0x68>

	case 1:
		return UART1_IRQn;
  4032bc:	2308      	movs	r3, #8
  4032be:	e00b      	b.n	4032d8 <_uart_get_irq_num+0x68>
	case 2:
		return UART2_IRQn;
  4032c0:	232c      	movs	r3, #44	; 0x2c
  4032c2:	e009      	b.n	4032d8 <_uart_get_irq_num+0x68>

	case 3:
		return UART3_IRQn;
  4032c4:	232d      	movs	r3, #45	; 0x2d
  4032c6:	e007      	b.n	4032d8 <_uart_get_irq_num+0x68>

	case 4:
		return UART4_IRQn;
  4032c8:	232e      	movs	r3, #46	; 0x2e
  4032ca:	e005      	b.n	4032d8 <_uart_get_irq_num+0x68>
	default:
		ASSERT(false);
  4032cc:	22a3      	movs	r2, #163	; 0xa3
  4032ce:	4904      	ldr	r1, [pc, #16]	; (4032e0 <_uart_get_irq_num+0x70>)
  4032d0:	2000      	movs	r0, #0
  4032d2:	4b04      	ldr	r3, [pc, #16]	; (4032e4 <_uart_get_irq_num+0x74>)
  4032d4:	4798      	blx	r3
		return ERR_INVALID_DATA;
  4032d6:	23ff      	movs	r3, #255	; 0xff
	}
}
  4032d8:	4618      	mov	r0, r3
  4032da:	3710      	adds	r7, #16
  4032dc:	46bd      	mov	sp, r7
  4032de:	bd80      	pop	{r7, pc}
  4032e0:	00405460 	.word	0x00405460
  4032e4:	004018f5 	.word	0x004018f5
  4032e8:	004035e1 	.word	0x004035e1

004032ec <_uart_init_irq_param>:

/**
 * \brief Init irq param with the given twi hardware instance
 */
static void _uart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
  4032ec:	b480      	push	{r7}
  4032ee:	b083      	sub	sp, #12
  4032f0:	af00      	add	r7, sp, #0
  4032f2:	6078      	str	r0, [r7, #4]
  4032f4:	6039      	str	r1, [r7, #0]
	if (hw == UART4) {
  4032f6:	687b      	ldr	r3, [r7, #4]
  4032f8:	4a05      	ldr	r2, [pc, #20]	; (403310 <_uart_init_irq_param+0x24>)
  4032fa:	4293      	cmp	r3, r2
  4032fc:	d102      	bne.n	403304 <_uart_init_irq_param+0x18>
		_uart4_dev = dev;
  4032fe:	4a05      	ldr	r2, [pc, #20]	; (403314 <_uart_init_irq_param+0x28>)
  403300:	683b      	ldr	r3, [r7, #0]
  403302:	6013      	str	r3, [r2, #0]
	}
}
  403304:	bf00      	nop
  403306:	370c      	adds	r7, #12
  403308:	46bd      	mov	sp, r7
  40330a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40330e:	4770      	bx	lr
  403310:	400e1e00 	.word	0x400e1e00
  403314:	204000d8 	.word	0x204000d8

00403318 <_usart_sync_init>:

/**
 * \brief Initialize synchronous UART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
  403318:	b580      	push	{r7, lr}
  40331a:	b082      	sub	sp, #8
  40331c:	af00      	add	r7, sp, #0
  40331e:	6078      	str	r0, [r7, #4]
  403320:	6039      	str	r1, [r7, #0]
	ASSERT(device);
  403322:	687b      	ldr	r3, [r7, #4]
  403324:	2b00      	cmp	r3, #0
  403326:	bf14      	ite	ne
  403328:	2301      	movne	r3, #1
  40332a:	2300      	moveq	r3, #0
  40332c:	b2db      	uxtb	r3, r3
  40332e:	22b7      	movs	r2, #183	; 0xb7
  403330:	490c      	ldr	r1, [pc, #48]	; (403364 <_usart_sync_init+0x4c>)
  403332:	4618      	mov	r0, r3
  403334:	4b0c      	ldr	r3, [pc, #48]	; (403368 <_usart_sync_init+0x50>)
  403336:	4798      	blx	r3
	ASSERT(hw);
  403338:	683b      	ldr	r3, [r7, #0]
  40333a:	2b00      	cmp	r3, #0
  40333c:	bf14      	ite	ne
  40333e:	2301      	movne	r3, #1
  403340:	2300      	moveq	r3, #0
  403342:	b2db      	uxtb	r3, r3
  403344:	22b8      	movs	r2, #184	; 0xb8
  403346:	4907      	ldr	r1, [pc, #28]	; (403364 <_usart_sync_init+0x4c>)
  403348:	4618      	mov	r0, r3
  40334a:	4b07      	ldr	r3, [pc, #28]	; (403368 <_usart_sync_init+0x50>)
  40334c:	4798      	blx	r3

	device->hw = hw;
  40334e:	687b      	ldr	r3, [r7, #4]
  403350:	683a      	ldr	r2, [r7, #0]
  403352:	601a      	str	r2, [r3, #0]

	return _uart_init(hw);
  403354:	6838      	ldr	r0, [r7, #0]
  403356:	4b05      	ldr	r3, [pc, #20]	; (40336c <_usart_sync_init+0x54>)
  403358:	4798      	blx	r3
  40335a:	4603      	mov	r3, r0
}
  40335c:	4618      	mov	r0, r3
  40335e:	3708      	adds	r7, #8
  403360:	46bd      	mov	sp, r7
  403362:	bd80      	pop	{r7, pc}
  403364:	00405460 	.word	0x00405460
  403368:	004018f5 	.word	0x004018f5
  40336c:	00403845 	.word	0x00403845

00403370 <_usart_async_init>:

/**
 * \brief Initialize asynchronous UART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
  403370:	b580      	push	{r7, lr}
  403372:	b084      	sub	sp, #16
  403374:	af00      	add	r7, sp, #0
  403376:	6078      	str	r0, [r7, #4]
  403378:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
  40337a:	687b      	ldr	r3, [r7, #4]
  40337c:	2b00      	cmp	r3, #0
  40337e:	bf14      	ite	ne
  403380:	2301      	movne	r3, #1
  403382:	2300      	moveq	r3, #0
  403384:	b2db      	uxtb	r3, r3
  403386:	22c6      	movs	r2, #198	; 0xc6
  403388:	4918      	ldr	r1, [pc, #96]	; (4033ec <_usart_async_init+0x7c>)
  40338a:	4618      	mov	r0, r3
  40338c:	4b18      	ldr	r3, [pc, #96]	; (4033f0 <_usart_async_init+0x80>)
  40338e:	4798      	blx	r3

	init_status = _uart_init(hw);
  403390:	6838      	ldr	r0, [r7, #0]
  403392:	4b18      	ldr	r3, [pc, #96]	; (4033f4 <_usart_async_init+0x84>)
  403394:	4798      	blx	r3
  403396:	60f8      	str	r0, [r7, #12]
	if (init_status) {
  403398:	68fb      	ldr	r3, [r7, #12]
  40339a:	2b00      	cmp	r3, #0
  40339c:	d001      	beq.n	4033a2 <_usart_async_init+0x32>
		return init_status;
  40339e:	68fb      	ldr	r3, [r7, #12]
  4033a0:	e01f      	b.n	4033e2 <_usart_async_init+0x72>
	}
	device->hw = hw;
  4033a2:	687b      	ldr	r3, [r7, #4]
  4033a4:	683a      	ldr	r2, [r7, #0]
  4033a6:	619a      	str	r2, [r3, #24]

	_uart_init_irq_param(hw, device);
  4033a8:	6879      	ldr	r1, [r7, #4]
  4033aa:	6838      	ldr	r0, [r7, #0]
  4033ac:	4b12      	ldr	r3, [pc, #72]	; (4033f8 <_usart_async_init+0x88>)
  4033ae:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  4033b0:	6838      	ldr	r0, [r7, #0]
  4033b2:	4b12      	ldr	r3, [pc, #72]	; (4033fc <_usart_async_init+0x8c>)
  4033b4:	4798      	blx	r3
  4033b6:	4603      	mov	r3, r0
  4033b8:	b25b      	sxtb	r3, r3
  4033ba:	4618      	mov	r0, r3
  4033bc:	4b10      	ldr	r3, [pc, #64]	; (403400 <_usart_async_init+0x90>)
  4033be:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_uart_get_irq_num(hw));
  4033c0:	6838      	ldr	r0, [r7, #0]
  4033c2:	4b0e      	ldr	r3, [pc, #56]	; (4033fc <_usart_async_init+0x8c>)
  4033c4:	4798      	blx	r3
  4033c6:	4603      	mov	r3, r0
  4033c8:	b25b      	sxtb	r3, r3
  4033ca:	4618      	mov	r0, r3
  4033cc:	4b0d      	ldr	r3, [pc, #52]	; (403404 <_usart_async_init+0x94>)
  4033ce:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  4033d0:	6838      	ldr	r0, [r7, #0]
  4033d2:	4b0a      	ldr	r3, [pc, #40]	; (4033fc <_usart_async_init+0x8c>)
  4033d4:	4798      	blx	r3
  4033d6:	4603      	mov	r3, r0
  4033d8:	b25b      	sxtb	r3, r3
  4033da:	4618      	mov	r0, r3
  4033dc:	4b0a      	ldr	r3, [pc, #40]	; (403408 <_usart_async_init+0x98>)
  4033de:	4798      	blx	r3

	return ERR_NONE;
  4033e0:	2300      	movs	r3, #0
}
  4033e2:	4618      	mov	r0, r3
  4033e4:	3710      	adds	r7, #16
  4033e6:	46bd      	mov	sp, r7
  4033e8:	bd80      	pop	{r7, pc}
  4033ea:	bf00      	nop
  4033ec:	00405460 	.word	0x00405460
  4033f0:	004018f5 	.word	0x004018f5
  4033f4:	00403845 	.word	0x00403845
  4033f8:	004032ed 	.word	0x004032ed
  4033fc:	00403271 	.word	0x00403271
  403400:	00402fdd 	.word	0x00402fdd
  403404:	00403011 	.word	0x00403011
  403408:	00402fa9 	.word	0x00402fa9

0040340c <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
  40340c:	b580      	push	{r7, lr}
  40340e:	b082      	sub	sp, #8
  403410:	af00      	add	r7, sp, #0
  403412:	6078      	str	r0, [r7, #4]
  403414:	460b      	mov	r3, r1
  403416:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  403418:	687b      	ldr	r3, [r7, #4]
  40341a:	2b00      	cmp	r3, #0
  40341c:	bf14      	ite	ne
  40341e:	2301      	movne	r3, #1
  403420:	2300      	moveq	r3, #0
  403422:	b2db      	uxtb	r3, r3
  403424:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
  403428:	4907      	ldr	r1, [pc, #28]	; (403448 <_usart_sync_write_byte+0x3c>)
  40342a:	4618      	mov	r0, r3
  40342c:	4b07      	ldr	r3, [pc, #28]	; (40344c <_usart_sync_write_byte+0x40>)
  40342e:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  403430:	687b      	ldr	r3, [r7, #4]
  403432:	681b      	ldr	r3, [r3, #0]
  403434:	78fa      	ldrb	r2, [r7, #3]
  403436:	4611      	mov	r1, r2
  403438:	4618      	mov	r0, r3
  40343a:	4b05      	ldr	r3, [pc, #20]	; (403450 <_usart_sync_write_byte+0x44>)
  40343c:	4798      	blx	r3
}
  40343e:	bf00      	nop
  403440:	3708      	adds	r7, #8
  403442:	46bd      	mov	sp, r7
  403444:	bd80      	pop	{r7, pc}
  403446:	bf00      	nop
  403448:	00405460 	.word	0x00405460
  40344c:	004018f5 	.word	0x004018f5
  403450:	00403143 	.word	0x00403143

00403454 <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given UART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
  403454:	b580      	push	{r7, lr}
  403456:	b082      	sub	sp, #8
  403458:	af00      	add	r7, sp, #0
  40345a:	6078      	str	r0, [r7, #4]
  40345c:	460b      	mov	r3, r1
  40345e:	70fb      	strb	r3, [r7, #3]
	ASSERT(device);
  403460:	687b      	ldr	r3, [r7, #4]
  403462:	2b00      	cmp	r3, #0
  403464:	bf14      	ite	ne
  403466:	2301      	movne	r3, #1
  403468:	2300      	moveq	r3, #0
  40346a:	b2db      	uxtb	r3, r3
  40346c:	f240 12ab 	movw	r2, #427	; 0x1ab
  403470:	4907      	ldr	r1, [pc, #28]	; (403490 <_usart_async_write_byte+0x3c>)
  403472:	4618      	mov	r0, r3
  403474:	4b07      	ldr	r3, [pc, #28]	; (403494 <_usart_async_write_byte+0x40>)
  403476:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  403478:	687b      	ldr	r3, [r7, #4]
  40347a:	699b      	ldr	r3, [r3, #24]
  40347c:	78fa      	ldrb	r2, [r7, #3]
  40347e:	4611      	mov	r1, r2
  403480:	4618      	mov	r0, r3
  403482:	4b05      	ldr	r3, [pc, #20]	; (403498 <_usart_async_write_byte+0x44>)
  403484:	4798      	blx	r3
}
  403486:	bf00      	nop
  403488:	3708      	adds	r7, #8
  40348a:	46bd      	mov	sp, r7
  40348c:	bd80      	pop	{r7, pc}
  40348e:	bf00      	nop
  403490:	00405460 	.word	0x00405460
  403494:	004018f5 	.word	0x004018f5
  403498:	00403143 	.word	0x00403143

0040349c <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given UART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
  40349c:	b580      	push	{r7, lr}
  40349e:	b082      	sub	sp, #8
  4034a0:	af00      	add	r7, sp, #0
  4034a2:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4034a4:	687b      	ldr	r3, [r7, #4]
  4034a6:	2b00      	cmp	r3, #0
  4034a8:	bf14      	ite	ne
  4034aa:	2301      	movne	r3, #1
  4034ac:	2300      	moveq	r3, #0
  4034ae:	b2db      	uxtb	r3, r3
  4034b0:	f44f 72da 	mov.w	r2, #436	; 0x1b4
  4034b4:	4907      	ldr	r1, [pc, #28]	; (4034d4 <_usart_sync_read_byte+0x38>)
  4034b6:	4618      	mov	r0, r3
  4034b8:	4b07      	ldr	r3, [pc, #28]	; (4034d8 <_usart_sync_read_byte+0x3c>)
  4034ba:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  4034bc:	687b      	ldr	r3, [r7, #4]
  4034be:	681b      	ldr	r3, [r3, #0]
  4034c0:	4618      	mov	r0, r3
  4034c2:	4b06      	ldr	r3, [pc, #24]	; (4034dc <_usart_sync_read_byte+0x40>)
  4034c4:	4798      	blx	r3
  4034c6:	4603      	mov	r3, r0
  4034c8:	b2db      	uxtb	r3, r3
}
  4034ca:	4618      	mov	r0, r3
  4034cc:	3708      	adds	r7, #8
  4034ce:	46bd      	mov	sp, r7
  4034d0:	bd80      	pop	{r7, pc}
  4034d2:	bf00      	nop
  4034d4:	00405460 	.word	0x00405460
  4034d8:	004018f5 	.word	0x004018f5
  4034dc:	0040323f 	.word	0x0040323f

004034e0 <_usart_sync_is_byte_sent>:

/**
 * \brief Check if UART is ready to send next byte
 */
bool _usart_sync_is_byte_sent(const struct _usart_sync_device *const device)
{
  4034e0:	b580      	push	{r7, lr}
  4034e2:	b082      	sub	sp, #8
  4034e4:	af00      	add	r7, sp, #0
  4034e6:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4034e8:	687b      	ldr	r3, [r7, #4]
  4034ea:	2b00      	cmp	r3, #0
  4034ec:	bf14      	ite	ne
  4034ee:	2301      	movne	r3, #1
  4034f0:	2300      	moveq	r3, #0
  4034f2:	b2db      	uxtb	r3, r3
  4034f4:	f240 12bd 	movw	r2, #445	; 0x1bd
  4034f8:	4906      	ldr	r1, [pc, #24]	; (403514 <_usart_sync_is_byte_sent+0x34>)
  4034fa:	4618      	mov	r0, r3
  4034fc:	4b06      	ldr	r3, [pc, #24]	; (403518 <_usart_sync_is_byte_sent+0x38>)
  4034fe:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  403500:	687b      	ldr	r3, [r7, #4]
  403502:	681b      	ldr	r3, [r3, #0]
  403504:	4618      	mov	r0, r3
  403506:	4b05      	ldr	r3, [pc, #20]	; (40351c <_usart_sync_is_byte_sent+0x3c>)
  403508:	4798      	blx	r3
  40350a:	4603      	mov	r3, r0
}
  40350c:	4618      	mov	r0, r3
  40350e:	3708      	adds	r7, #8
  403510:	46bd      	mov	sp, r7
  403512:	bd80      	pop	{r7, pc}
  403514:	00405460 	.word	0x00405460
  403518:	004018f5 	.word	0x004018f5
  40351c:	004031db 	.word	0x004031db

00403520 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by UART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
  403520:	b580      	push	{r7, lr}
  403522:	b082      	sub	sp, #8
  403524:	af00      	add	r7, sp, #0
  403526:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  403528:	687b      	ldr	r3, [r7, #4]
  40352a:	2b00      	cmp	r3, #0
  40352c:	bf14      	ite	ne
  40352e:	2301      	movne	r3, #1
  403530:	2300      	moveq	r3, #0
  403532:	b2db      	uxtb	r3, r3
  403534:	f240 12cf 	movw	r2, #463	; 0x1cf
  403538:	4906      	ldr	r1, [pc, #24]	; (403554 <_usart_sync_is_byte_received+0x34>)
  40353a:	4618      	mov	r0, r3
  40353c:	4b06      	ldr	r3, [pc, #24]	; (403558 <_usart_sync_is_byte_received+0x38>)
  40353e:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  403540:	687b      	ldr	r3, [r7, #4]
  403542:	681b      	ldr	r3, [r3, #0]
  403544:	4618      	mov	r0, r3
  403546:	4b05      	ldr	r3, [pc, #20]	; (40355c <_usart_sync_is_byte_received+0x3c>)
  403548:	4798      	blx	r3
  40354a:	4603      	mov	r3, r0
}
  40354c:	4618      	mov	r0, r3
  40354e:	3708      	adds	r7, #8
  403550:	46bd      	mov	sp, r7
  403552:	bd80      	pop	{r7, pc}
  403554:	00405460 	.word	0x00405460
  403558:	004018f5 	.word	0x004018f5
  40355c:	004031b5 	.word	0x004031b5

00403560 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
  403560:	b580      	push	{r7, lr}
  403562:	b082      	sub	sp, #8
  403564:	af00      	add	r7, sp, #0
  403566:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  403568:	687b      	ldr	r3, [r7, #4]
  40356a:	2b00      	cmp	r3, #0
  40356c:	bf14      	ite	ne
  40356e:	2301      	movne	r3, #1
  403570:	2300      	moveq	r3, #0
  403572:	b2db      	uxtb	r3, r3
  403574:	f240 220a 	movw	r2, #522	; 0x20a
  403578:	4906      	ldr	r1, [pc, #24]	; (403594 <_usart_async_enable_byte_sent_irq+0x34>)
  40357a:	4618      	mov	r0, r3
  40357c:	4b06      	ldr	r3, [pc, #24]	; (403598 <_usart_async_enable_byte_sent_irq+0x38>)
  40357e:	4798      	blx	r3
	hri_uart_set_IMR_TXRDY_bit(device->hw);
  403580:	687b      	ldr	r3, [r7, #4]
  403582:	699b      	ldr	r3, [r3, #24]
  403584:	4618      	mov	r0, r3
  403586:	4b05      	ldr	r3, [pc, #20]	; (40359c <_usart_async_enable_byte_sent_irq+0x3c>)
  403588:	4798      	blx	r3
}
  40358a:	bf00      	nop
  40358c:	3708      	adds	r7, #8
  40358e:	46bd      	mov	sp, r7
  403590:	bd80      	pop	{r7, pc}
  403592:	bf00      	nop
  403594:	00405460 	.word	0x00405460
  403598:	004018f5 	.word	0x004018f5
  40359c:	0040306b 	.word	0x0040306b

004035a0 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
  4035a0:	b580      	push	{r7, lr}
  4035a2:	b082      	sub	sp, #8
  4035a4:	af00      	add	r7, sp, #0
  4035a6:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  4035a8:	687b      	ldr	r3, [r7, #4]
  4035aa:	2b00      	cmp	r3, #0
  4035ac:	bf14      	ite	ne
  4035ae:	2301      	movne	r3, #1
  4035b0:	2300      	moveq	r3, #0
  4035b2:	b2db      	uxtb	r3, r3
  4035b4:	f240 2213 	movw	r2, #531	; 0x213
  4035b8:	4906      	ldr	r1, [pc, #24]	; (4035d4 <_usart_async_enable_tx_done_irq+0x34>)
  4035ba:	4618      	mov	r0, r3
  4035bc:	4b06      	ldr	r3, [pc, #24]	; (4035d8 <_usart_async_enable_tx_done_irq+0x38>)
  4035be:	4798      	blx	r3
	hri_uart_set_IMR_TXEMPTY_bit(device->hw);
  4035c0:	687b      	ldr	r3, [r7, #4]
  4035c2:	699b      	ldr	r3, [r3, #24]
  4035c4:	4618      	mov	r0, r3
  4035c6:	4b05      	ldr	r3, [pc, #20]	; (4035dc <_usart_async_enable_tx_done_irq+0x3c>)
  4035c8:	4798      	blx	r3
}
  4035ca:	bf00      	nop
  4035cc:	3708      	adds	r7, #8
  4035ce:	46bd      	mov	sp, r7
  4035d0:	bd80      	pop	{r7, pc}
  4035d2:	bf00      	nop
  4035d4:	00405460 	.word	0x00405460
  4035d8:	004018f5 	.word	0x004018f5
  4035dc:	004030c7 	.word	0x004030c7

004035e0 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4035e0:	b580      	push	{r7, lr}
  4035e2:	b082      	sub	sp, #8
  4035e4:	af00      	add	r7, sp, #0
  4035e6:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4035e8:	687b      	ldr	r3, [r7, #4]
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	bf14      	ite	ne
  4035ee:	2301      	movne	r3, #1
  4035f0:	2300      	moveq	r3, #0
  4035f2:	b2db      	uxtb	r3, r3
  4035f4:	f240 221d 	movw	r2, #541	; 0x21d
  4035f8:	4913      	ldr	r1, [pc, #76]	; (403648 <_uart_get_hardware_index+0x68>)
  4035fa:	4618      	mov	r0, r3
  4035fc:	4b13      	ldr	r3, [pc, #76]	; (40364c <_uart_get_hardware_index+0x6c>)
  4035fe:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  403600:	687b      	ldr	r3, [r7, #4]
  403602:	4a13      	ldr	r2, [pc, #76]	; (403650 <_uart_get_hardware_index+0x70>)
  403604:	4293      	cmp	r3, r2
  403606:	d101      	bne.n	40360c <_uart_get_hardware_index+0x2c>
		return 0;
  403608:	2300      	movs	r3, #0
  40360a:	e018      	b.n	40363e <_uart_get_hardware_index+0x5e>
	} else if (UART1 == hw) {
  40360c:	687b      	ldr	r3, [r7, #4]
  40360e:	4a11      	ldr	r2, [pc, #68]	; (403654 <_uart_get_hardware_index+0x74>)
  403610:	4293      	cmp	r3, r2
  403612:	d101      	bne.n	403618 <_uart_get_hardware_index+0x38>
		return 1;
  403614:	2301      	movs	r3, #1
  403616:	e012      	b.n	40363e <_uart_get_hardware_index+0x5e>
	} else if (UART2 == hw) {
  403618:	687b      	ldr	r3, [r7, #4]
  40361a:	4a0f      	ldr	r2, [pc, #60]	; (403658 <_uart_get_hardware_index+0x78>)
  40361c:	4293      	cmp	r3, r2
  40361e:	d101      	bne.n	403624 <_uart_get_hardware_index+0x44>
		return 2;
  403620:	2302      	movs	r3, #2
  403622:	e00c      	b.n	40363e <_uart_get_hardware_index+0x5e>
	} else if (UART3 == hw) {
  403624:	687b      	ldr	r3, [r7, #4]
  403626:	4a0d      	ldr	r2, [pc, #52]	; (40365c <_uart_get_hardware_index+0x7c>)
  403628:	4293      	cmp	r3, r2
  40362a:	d101      	bne.n	403630 <_uart_get_hardware_index+0x50>
		return 3;
  40362c:	2303      	movs	r3, #3
  40362e:	e006      	b.n	40363e <_uart_get_hardware_index+0x5e>
	} else if (UART4 == hw) {
  403630:	687b      	ldr	r3, [r7, #4]
  403632:	4a0b      	ldr	r2, [pc, #44]	; (403660 <_uart_get_hardware_index+0x80>)
  403634:	4293      	cmp	r3, r2
  403636:	d101      	bne.n	40363c <_uart_get_hardware_index+0x5c>
		return 4;
  403638:	2304      	movs	r3, #4
  40363a:	e000      	b.n	40363e <_uart_get_hardware_index+0x5e>
	} else {
		return ERR_INVALID_DATA;
  40363c:	23ff      	movs	r3, #255	; 0xff
	}
}
  40363e:	4618      	mov	r0, r3
  403640:	3708      	adds	r7, #8
  403642:	46bd      	mov	sp, r7
  403644:	bd80      	pop	{r7, pc}
  403646:	bf00      	nop
  403648:	00405460 	.word	0x00405460
  40364c:	004018f5 	.word	0x004018f5
  403650:	400e0800 	.word	0x400e0800
  403654:	400e0a00 	.word	0x400e0a00
  403658:	400e1a00 	.word	0x400e1a00
  40365c:	400e1c00 	.word	0x400e1c00
  403660:	400e1e00 	.word	0x400e1e00

00403664 <_uart_get_usart_sync>:

/**
 * \brief Retrieve usart sync helper functions
 */
void *_uart_get_usart_sync(void)
{
  403664:	b480      	push	{r7}
  403666:	af00      	add	r7, sp, #0
	return (void *)NULL;
  403668:	2300      	movs	r3, #0
}
  40366a:	4618      	mov	r0, r3
  40366c:	46bd      	mov	sp, r7
  40366e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403672:	4770      	bx	lr

00403674 <_uart_get_usart_async>:

/**
 * \brief Retrieve usart async helper functions
 */
void *_uart_get_usart_async(void)
{
  403674:	b480      	push	{r7}
  403676:	af00      	add	r7, sp, #0
	return (void *)NULL;
  403678:	2300      	movs	r3, #0
}
  40367a:	4618      	mov	r0, r3
  40367c:	46bd      	mov	sp, r7
  40367e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403682:	4770      	bx	lr

00403684 <_uart_interrupt_handler>:
 * \internal Uart interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _uart_interrupt_handler(struct _usart_async_device *device)
{
  403684:	b590      	push	{r4, r7, lr}
  403686:	b085      	sub	sp, #20
  403688:	af00      	add	r7, sp, #0
  40368a:	6078      	str	r0, [r7, #4]
	ASSERT(device);
  40368c:	687b      	ldr	r3, [r7, #4]
  40368e:	2b00      	cmp	r3, #0
  403690:	bf14      	ite	ne
  403692:	2301      	movne	r3, #1
  403694:	2300      	moveq	r3, #0
  403696:	b2db      	uxtb	r3, r3
  403698:	f240 2281 	movw	r2, #641	; 0x281
  40369c:	4935      	ldr	r1, [pc, #212]	; (403774 <_uart_interrupt_handler+0xf0>)
  40369e:	4618      	mov	r0, r3
  4036a0:	4b35      	ldr	r3, [pc, #212]	; (403778 <_uart_interrupt_handler+0xf4>)
  4036a2:	4798      	blx	r3
	void *hw = device->hw;
  4036a4:	687b      	ldr	r3, [r7, #4]
  4036a6:	699b      	ldr	r3, [r3, #24]
  4036a8:	60fb      	str	r3, [r7, #12]

	if (hri_uart_get_SR_TXRDY_bit(hw) && hri_uart_get_IMR_TXRDY_bit(hw)) {
  4036aa:	68f8      	ldr	r0, [r7, #12]
  4036ac:	4b33      	ldr	r3, [pc, #204]	; (40377c <_uart_interrupt_handler+0xf8>)
  4036ae:	4798      	blx	r3
  4036b0:	4603      	mov	r3, r0
  4036b2:	2b00      	cmp	r3, #0
  4036b4:	d00d      	beq.n	4036d2 <_uart_interrupt_handler+0x4e>
  4036b6:	68f8      	ldr	r0, [r7, #12]
  4036b8:	4b31      	ldr	r3, [pc, #196]	; (403780 <_uart_interrupt_handler+0xfc>)
  4036ba:	4798      	blx	r3
  4036bc:	4603      	mov	r3, r0
  4036be:	2b00      	cmp	r3, #0
  4036c0:	d007      	beq.n	4036d2 <_uart_interrupt_handler+0x4e>
		hri_uart_clear_IMR_TXRDY_bit(hw);
  4036c2:	68f8      	ldr	r0, [r7, #12]
  4036c4:	4b2f      	ldr	r3, [pc, #188]	; (403784 <_uart_interrupt_handler+0x100>)
  4036c6:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
  4036c8:	687b      	ldr	r3, [r7, #4]
  4036ca:	681b      	ldr	r3, [r3, #0]
  4036cc:	6878      	ldr	r0, [r7, #4]
  4036ce:	4798      	blx	r3
  4036d0:	e04c      	b.n	40376c <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_TXEMPTY_bit(hw) && hri_uart_get_IMR_TXEMPTY_bit(hw)) {
  4036d2:	68f8      	ldr	r0, [r7, #12]
  4036d4:	4b2c      	ldr	r3, [pc, #176]	; (403788 <_uart_interrupt_handler+0x104>)
  4036d6:	4798      	blx	r3
  4036d8:	4603      	mov	r3, r0
  4036da:	2b00      	cmp	r3, #0
  4036dc:	d00d      	beq.n	4036fa <_uart_interrupt_handler+0x76>
  4036de:	68f8      	ldr	r0, [r7, #12]
  4036e0:	4b2a      	ldr	r3, [pc, #168]	; (40378c <_uart_interrupt_handler+0x108>)
  4036e2:	4798      	blx	r3
  4036e4:	4603      	mov	r3, r0
  4036e6:	2b00      	cmp	r3, #0
  4036e8:	d007      	beq.n	4036fa <_uart_interrupt_handler+0x76>
		hri_uart_clear_IMR_TXEMPTY_bit(hw);
  4036ea:	68f8      	ldr	r0, [r7, #12]
  4036ec:	4b28      	ldr	r3, [pc, #160]	; (403790 <_uart_interrupt_handler+0x10c>)
  4036ee:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
  4036f0:	687b      	ldr	r3, [r7, #4]
  4036f2:	689b      	ldr	r3, [r3, #8]
  4036f4:	6878      	ldr	r0, [r7, #4]
  4036f6:	4798      	blx	r3
  4036f8:	e038      	b.n	40376c <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_get_SR_RXRDY_bit(hw) && hri_uart_get_IMR_RXRDY_bit(hw)) {
  4036fa:	68f8      	ldr	r0, [r7, #12]
  4036fc:	4b25      	ldr	r3, [pc, #148]	; (403794 <_uart_interrupt_handler+0x110>)
  4036fe:	4798      	blx	r3
  403700:	4603      	mov	r3, r0
  403702:	2b00      	cmp	r3, #0
  403704:	d021      	beq.n	40374a <_uart_interrupt_handler+0xc6>
  403706:	68f8      	ldr	r0, [r7, #12]
  403708:	4b23      	ldr	r3, [pc, #140]	; (403798 <_uart_interrupt_handler+0x114>)
  40370a:	4798      	blx	r3
  40370c:	4603      	mov	r3, r0
  40370e:	2b00      	cmp	r3, #0
  403710:	d01b      	beq.n	40374a <_uart_interrupt_handler+0xc6>
		if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  403712:	68f8      	ldr	r0, [r7, #12]
  403714:	4b21      	ldr	r3, [pc, #132]	; (40379c <_uart_interrupt_handler+0x118>)
  403716:	4798      	blx	r3
  403718:	4603      	mov	r3, r0
  40371a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  40371e:	2b00      	cmp	r3, #0
  403720:	d008      	beq.n	403734 <_uart_interrupt_handler+0xb0>
			hri_uart_read_RHR_reg(hw);
  403722:	68f8      	ldr	r0, [r7, #12]
  403724:	4b1e      	ldr	r3, [pc, #120]	; (4037a0 <_uart_interrupt_handler+0x11c>)
  403726:	4798      	blx	r3
			hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  403728:	f44f 7180 	mov.w	r1, #256	; 0x100
  40372c:	68f8      	ldr	r0, [r7, #12]
  40372e:	4b1d      	ldr	r3, [pc, #116]	; (4037a4 <_uart_interrupt_handler+0x120>)
  403730:	4798      	blx	r3
			return;
  403732:	e01b      	b.n	40376c <_uart_interrupt_handler+0xe8>
		}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_uart_read_RHR_RXCHR_bf(hw));
  403734:	687b      	ldr	r3, [r7, #4]
  403736:	685c      	ldr	r4, [r3, #4]
  403738:	68f8      	ldr	r0, [r7, #12]
  40373a:	4b1b      	ldr	r3, [pc, #108]	; (4037a8 <_uart_interrupt_handler+0x124>)
  40373c:	4798      	blx	r3
  40373e:	4603      	mov	r3, r0
  403740:	b2db      	uxtb	r3, r3
  403742:	4619      	mov	r1, r3
  403744:	6878      	ldr	r0, [r7, #4]
  403746:	47a0      	blx	r4
  403748:	e010      	b.n	40376c <_uart_interrupt_handler+0xe8>
	} else if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  40374a:	68f8      	ldr	r0, [r7, #12]
  40374c:	4b13      	ldr	r3, [pc, #76]	; (40379c <_uart_interrupt_handler+0x118>)
  40374e:	4798      	blx	r3
  403750:	4603      	mov	r3, r0
  403752:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
  403756:	2b00      	cmp	r3, #0
  403758:	d008      	beq.n	40376c <_uart_interrupt_handler+0xe8>
		hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  40375a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40375e:	68f8      	ldr	r0, [r7, #12]
  403760:	4b10      	ldr	r3, [pc, #64]	; (4037a4 <_uart_interrupt_handler+0x120>)
  403762:	4798      	blx	r3
		device->usart_cb.error_cb(device);
  403764:	687b      	ldr	r3, [r7, #4]
  403766:	68db      	ldr	r3, [r3, #12]
  403768:	6878      	ldr	r0, [r7, #4]
  40376a:	4798      	blx	r3
	}
}
  40376c:	3714      	adds	r7, #20
  40376e:	46bd      	mov	sp, r7
  403770:	bd90      	pop	{r4, r7, pc}
  403772:	bf00      	nop
  403774:	00405460 	.word	0x00405460
  403778:	004018f5 	.word	0x004018f5
  40377c:	004031db 	.word	0x004031db
  403780:	00403085 	.word	0x00403085
  403784:	004030ad 	.word	0x004030ad
  403788:	00403201 	.word	0x00403201
  40378c:	004030e3 	.word	0x004030e3
  403790:	0040310b 	.word	0x0040310b
  403794:	004031b5 	.word	0x004031b5
  403798:	00403045 	.word	0x00403045
  40379c:	00403227 	.word	0x00403227
  4037a0:	00403259 	.word	0x00403259
  4037a4:	00403127 	.word	0x00403127
  4037a8:	0040323f 	.word	0x0040323f

004037ac <UART4_Handler>:

/**
 * \internal UART interrupt handler
 */
void UART4_Handler(void)
{
  4037ac:	b580      	push	{r7, lr}
  4037ae:	af00      	add	r7, sp, #0
	_uart_interrupt_handler(_uart4_dev);
  4037b0:	4b03      	ldr	r3, [pc, #12]	; (4037c0 <UART4_Handler+0x14>)
  4037b2:	681b      	ldr	r3, [r3, #0]
  4037b4:	4618      	mov	r0, r3
  4037b6:	4b03      	ldr	r3, [pc, #12]	; (4037c4 <UART4_Handler+0x18>)
  4037b8:	4798      	blx	r3
}
  4037ba:	bf00      	nop
  4037bc:	bd80      	pop	{r7, pc}
  4037be:	bf00      	nop
  4037c0:	204000d8 	.word	0x204000d8
  4037c4:	00403685 	.word	0x00403685

004037c8 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  4037c8:	b580      	push	{r7, lr}
  4037ca:	b084      	sub	sp, #16
  4037cc:	af00      	add	r7, sp, #0
  4037ce:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  4037d0:	687b      	ldr	r3, [r7, #4]
  4037d2:	2b00      	cmp	r3, #0
  4037d4:	bf14      	ite	ne
  4037d6:	2301      	movne	r3, #1
  4037d8:	2300      	moveq	r3, #0
  4037da:	b2db      	uxtb	r3, r3
  4037dc:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  4037e0:	4914      	ldr	r1, [pc, #80]	; (403834 <_get_uart_index+0x6c>)
  4037e2:	4618      	mov	r0, r3
  4037e4:	4b14      	ldr	r3, [pc, #80]	; (403838 <_get_uart_index+0x70>)
  4037e6:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  4037e8:	6878      	ldr	r0, [r7, #4]
  4037ea:	4b14      	ldr	r3, [pc, #80]	; (40383c <_get_uart_index+0x74>)
  4037ec:	4798      	blx	r3
  4037ee:	4603      	mov	r3, r0
  4037f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  4037f2:	2300      	movs	r3, #0
  4037f4:	73fb      	strb	r3, [r7, #15]
  4037f6:	e00f      	b.n	403818 <_get_uart_index+0x50>
		if (_uarts[i].number == uart_offset) {
  4037f8:	7bfa      	ldrb	r2, [r7, #15]
  4037fa:	4911      	ldr	r1, [pc, #68]	; (403840 <_get_uart_index+0x78>)
  4037fc:	4613      	mov	r3, r2
  4037fe:	005b      	lsls	r3, r3, #1
  403800:	4413      	add	r3, r2
  403802:	009b      	lsls	r3, r3, #2
  403804:	440b      	add	r3, r1
  403806:	781b      	ldrb	r3, [r3, #0]
  403808:	7bba      	ldrb	r2, [r7, #14]
  40380a:	429a      	cmp	r2, r3
  40380c:	d101      	bne.n	403812 <_get_uart_index+0x4a>
			return i;
  40380e:	7bfb      	ldrb	r3, [r7, #15]
  403810:	e00c      	b.n	40382c <_get_uart_index+0x64>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  403812:	7bfb      	ldrb	r3, [r7, #15]
  403814:	3301      	adds	r3, #1
  403816:	73fb      	strb	r3, [r7, #15]
  403818:	7bfb      	ldrb	r3, [r7, #15]
  40381a:	2b01      	cmp	r3, #1
  40381c:	d9ec      	bls.n	4037f8 <_get_uart_index+0x30>
		}
	}

	ASSERT(false);
  40381e:	f240 22b2 	movw	r2, #690	; 0x2b2
  403822:	4904      	ldr	r1, [pc, #16]	; (403834 <_get_uart_index+0x6c>)
  403824:	2000      	movs	r0, #0
  403826:	4b04      	ldr	r3, [pc, #16]	; (403838 <_get_uart_index+0x70>)
  403828:	4798      	blx	r3
	return 0;
  40382a:	2300      	movs	r3, #0
}
  40382c:	4618      	mov	r0, r3
  40382e:	3710      	adds	r7, #16
  403830:	46bd      	mov	sp, r7
  403832:	bd80      	pop	{r7, pc}
  403834:	00405460 	.word	0x00405460
  403838:	004018f5 	.word	0x004018f5
  40383c:	004035e1 	.word	0x004035e1
  403840:	20400008 	.word	0x20400008

00403844 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  403844:	b580      	push	{r7, lr}
  403846:	b084      	sub	sp, #16
  403848:	af00      	add	r7, sp, #0
  40384a:	6078      	str	r0, [r7, #4]
	ASSERT(hw);
  40384c:	687b      	ldr	r3, [r7, #4]
  40384e:	2b00      	cmp	r3, #0
  403850:	bf14      	ite	ne
  403852:	2301      	movne	r3, #1
  403854:	2300      	moveq	r3, #0
  403856:	b2db      	uxtb	r3, r3
  403858:	f240 22bf 	movw	r2, #703	; 0x2bf
  40385c:	491a      	ldr	r1, [pc, #104]	; (4038c8 <_uart_init+0x84>)
  40385e:	4618      	mov	r0, r3
  403860:	4b1a      	ldr	r3, [pc, #104]	; (4038cc <_uart_init+0x88>)
  403862:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  403864:	6878      	ldr	r0, [r7, #4]
  403866:	4b1a      	ldr	r3, [pc, #104]	; (4038d0 <_uart_init+0x8c>)
  403868:	4798      	blx	r3
  40386a:	4603      	mov	r3, r0
  40386c:	73fb      	strb	r3, [r7, #15]
	/* Disable the Write Protect. */
	hri_uart_write_WPMR_reg(hw, UART_WPMR_WPKEY_PASSWD);
  40386e:	4919      	ldr	r1, [pc, #100]	; (4038d4 <_uart_init+0x90>)
  403870:	6878      	ldr	r0, [r7, #4]
  403872:	4b19      	ldr	r3, [pc, #100]	; (4038d8 <_uart_init+0x94>)
  403874:	4798      	blx	r3

	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
  403876:	21ac      	movs	r1, #172	; 0xac
  403878:	6878      	ldr	r0, [r7, #4]
  40387a:	4b18      	ldr	r3, [pc, #96]	; (4038dc <_uart_init+0x98>)
  40387c:	4798      	blx	r3
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);
  40387e:	f44f 7180 	mov.w	r1, #256	; 0x100
  403882:	6878      	ldr	r0, [r7, #4]
  403884:	4b15      	ldr	r3, [pc, #84]	; (4038dc <_uart_init+0x98>)
  403886:	4798      	blx	r3

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  403888:	7bfa      	ldrb	r2, [r7, #15]
  40388a:	4915      	ldr	r1, [pc, #84]	; (4038e0 <_uart_init+0x9c>)
  40388c:	4613      	mov	r3, r2
  40388e:	005b      	lsls	r3, r3, #1
  403890:	4413      	add	r3, r2
  403892:	009b      	lsls	r3, r3, #2
  403894:	440b      	add	r3, r1
  403896:	3304      	adds	r3, #4
  403898:	681b      	ldr	r3, [r3, #0]
  40389a:	4619      	mov	r1, r3
  40389c:	6878      	ldr	r0, [r7, #4]
  40389e:	4b11      	ldr	r3, [pc, #68]	; (4038e4 <_uart_init+0xa0>)
  4038a0:	4798      	blx	r3
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);
  4038a2:	7bfa      	ldrb	r2, [r7, #15]
  4038a4:	490e      	ldr	r1, [pc, #56]	; (4038e0 <_uart_init+0x9c>)
  4038a6:	4613      	mov	r3, r2
  4038a8:	005b      	lsls	r3, r3, #1
  4038aa:	4413      	add	r3, r2
  4038ac:	009b      	lsls	r3, r3, #2
  4038ae:	440b      	add	r3, r1
  4038b0:	3308      	adds	r3, #8
  4038b2:	681b      	ldr	r3, [r3, #0]
  4038b4:	4619      	mov	r1, r3
  4038b6:	6878      	ldr	r0, [r7, #4]
  4038b8:	4b0b      	ldr	r3, [pc, #44]	; (4038e8 <_uart_init+0xa4>)
  4038ba:	4798      	blx	r3

	return ERR_NONE;
  4038bc:	2300      	movs	r3, #0
}
  4038be:	4618      	mov	r0, r3
  4038c0:	3710      	adds	r7, #16
  4038c2:	46bd      	mov	sp, r7
  4038c4:	bd80      	pop	{r7, pc}
  4038c6:	bf00      	nop
  4038c8:	00405460 	.word	0x00405460
  4038cc:	004018f5 	.word	0x004018f5
  4038d0:	004037c9 	.word	0x004037c9
  4038d4:	55415200 	.word	0x55415200
  4038d8:	00403197 	.word	0x00403197
  4038dc:	00403127 	.word	0x00403127
  4038e0:	20400008 	.word	0x20400008
  4038e4:	0040315f 	.word	0x0040315f
  4038e8:	0040317b 	.word	0x0040317b

004038ec <hri_usbhs_set_DEVIMR_SUSPE_bit>:
typedef uint32_t hri_usbhshstdma_hstdmacontrol_reg_t;
typedef uint32_t hri_usbhshstdma_hstdmanxtdsc_reg_t;
typedef uint32_t hri_usbhshstdma_hstdmastatus_reg_t;

static inline void hri_usbhs_set_DEVIMR_SUSPE_bit(const void *const hw)
{
  4038ec:	b480      	push	{r7}
  4038ee:	b083      	sub	sp, #12
  4038f0:	af00      	add	r7, sp, #0
  4038f2:	6078      	str	r0, [r7, #4]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  4038f4:	687b      	ldr	r3, [r7, #4]
  4038f6:	2201      	movs	r2, #1
  4038f8:	619a      	str	r2, [r3, #24]
}
  4038fa:	bf00      	nop
  4038fc:	370c      	adds	r7, #12
  4038fe:	46bd      	mov	sp, r7
  403900:	f85d 7b04 	ldr.w	r7, [sp], #4
  403904:	4770      	bx	lr

00403906 <hri_usbhs_clear_DEVIMR_WAKEUPE_bit>:
		((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_WAKEUPE;
	}
}

static inline void hri_usbhs_clear_DEVIMR_WAKEUPE_bit(const void *const hw)
{
  403906:	b480      	push	{r7}
  403908:	b083      	sub	sp, #12
  40390a:	af00      	add	r7, sp, #0
  40390c:	6078      	str	r0, [r7, #4]
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_WAKEUPE;
  40390e:	687b      	ldr	r3, [r7, #4]
  403910:	2210      	movs	r2, #16
  403912:	615a      	str	r2, [r3, #20]
}
  403914:	bf00      	nop
  403916:	370c      	adds	r7, #12
  403918:	46bd      	mov	sp, r7
  40391a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40391e:	4770      	bx	lr

00403920 <hri_usbhs_set_DEVIMR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_DMA_7;
}

static inline void hri_usbhs_set_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  403920:	b480      	push	{r7}
  403922:	b083      	sub	sp, #12
  403924:	af00      	add	r7, sp, #0
  403926:	6078      	str	r0, [r7, #4]
  403928:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  40392a:	687b      	ldr	r3, [r7, #4]
  40392c:	683a      	ldr	r2, [r7, #0]
  40392e:	619a      	str	r2, [r3, #24]
}
  403930:	bf00      	nop
  403932:	370c      	adds	r7, #12
  403934:	46bd      	mov	sp, r7
  403936:	f85d 7b04 	ldr.w	r7, [sp], #4
  40393a:	4770      	bx	lr

0040393c <hri_usbhs_read_DEVIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devimr_reg_t hri_usbhs_read_DEVIMR_reg(const void *const hw)
{
  40393c:	b480      	push	{r7}
  40393e:	b083      	sub	sp, #12
  403940:	af00      	add	r7, sp, #0
  403942:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  403944:	687b      	ldr	r3, [r7, #4]
  403946:	691b      	ldr	r3, [r3, #16]
}
  403948:	4618      	mov	r0, r3
  40394a:	370c      	adds	r7, #12
  40394c:	46bd      	mov	sp, r7
  40394e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403952:	4770      	bx	lr

00403954 <hri_usbhs_clear_DEVIMR_reg>:
	((Usbhs *)hw)->USBHS_DEVIER = data;
	((Usbhs *)hw)->USBHS_DEVIDR = ~data;
}

static inline void hri_usbhs_clear_DEVIMR_reg(const void *const hw, hri_usbhs_devimr_reg_t mask)
{
  403954:	b480      	push	{r7}
  403956:	b083      	sub	sp, #12
  403958:	af00      	add	r7, sp, #0
  40395a:	6078      	str	r0, [r7, #4]
  40395c:	6039      	str	r1, [r7, #0]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  40395e:	687b      	ldr	r3, [r7, #4]
  403960:	683a      	ldr	r2, [r7, #0]
  403962:	615a      	str	r2, [r3, #20]
}
  403964:	bf00      	nop
  403966:	370c      	adds	r7, #12
  403968:	46bd      	mov	sp, r7
  40396a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40396e:	4770      	bx	lr

00403970 <hri_usbhs_get_DEVEPTISR_RXSTPI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_RXOUTI;
}

static inline bool hri_usbhs_get_DEVEPTISR_RXSTPI_bit(const void *const hw, uint8_t index)
{
  403970:	b480      	push	{r7}
  403972:	b083      	sub	sp, #12
  403974:	af00      	add	r7, sp, #0
  403976:	6078      	str	r0, [r7, #4]
  403978:	460b      	mov	r3, r1
  40397a:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  40397c:	78fa      	ldrb	r2, [r7, #3]
  40397e:	687b      	ldr	r3, [r7, #4]
  403980:	324c      	adds	r2, #76	; 0x4c
  403982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403986:	089b      	lsrs	r3, r3, #2
  403988:	f003 0301 	and.w	r3, r3, #1
  40398c:	2b00      	cmp	r3, #0
  40398e:	bf14      	ite	ne
  403990:	2301      	movne	r3, #1
  403992:	2300      	moveq	r3, #0
  403994:	b2db      	uxtb	r3, r3
}
  403996:	4618      	mov	r0, r3
  403998:	370c      	adds	r7, #12
  40399a:	46bd      	mov	sp, r7
  40399c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039a0:	4770      	bx	lr

004039a2 <hri_usbhs_get_DEVEPTISR_STALLEDI_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_OVERFI;
}

static inline bool hri_usbhs_get_DEVEPTISR_STALLEDI_bit(const void *const hw, uint8_t index)
{
  4039a2:	b480      	push	{r7}
  4039a4:	b083      	sub	sp, #12
  4039a6:	af00      	add	r7, sp, #0
  4039a8:	6078      	str	r0, [r7, #4]
  4039aa:	460b      	mov	r3, r1
  4039ac:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  4039ae:	78fa      	ldrb	r2, [r7, #3]
  4039b0:	687b      	ldr	r3, [r7, #4]
  4039b2:	324c      	adds	r2, #76	; 0x4c
  4039b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4039b8:	099b      	lsrs	r3, r3, #6
  4039ba:	f003 0301 	and.w	r3, r3, #1
  4039be:	2b00      	cmp	r3, #0
  4039c0:	bf14      	ite	ne
  4039c2:	2301      	movne	r3, #1
  4039c4:	2300      	moveq	r3, #0
  4039c6:	b2db      	uxtb	r3, r3
}
  4039c8:	4618      	mov	r0, r3
  4039ca:	370c      	adds	r7, #12
  4039cc:	46bd      	mov	sp, r7
  4039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4039d2:	4770      	bx	lr

004039d4 <hri_usbhs_get_DEVEPTISR_RWALL_bit>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = USBHS_DEVEPTISR_SHORTPACKET;
}

static inline bool hri_usbhs_get_DEVEPTISR_RWALL_bit(const void *const hw, uint8_t index)
{
  4039d4:	b480      	push	{r7}
  4039d6:	b083      	sub	sp, #12
  4039d8:	af00      	add	r7, sp, #0
  4039da:	6078      	str	r0, [r7, #4]
  4039dc:	460b      	mov	r3, r1
  4039de:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  4039e0:	78fa      	ldrb	r2, [r7, #3]
  4039e2:	687b      	ldr	r3, [r7, #4]
  4039e4:	324c      	adds	r2, #76	; 0x4c
  4039e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4039ea:	0c1b      	lsrs	r3, r3, #16
  4039ec:	f003 0301 	and.w	r3, r3, #1
  4039f0:	2b00      	cmp	r3, #0
  4039f2:	bf14      	ite	ne
  4039f4:	2301      	movne	r3, #1
  4039f6:	2300      	moveq	r3, #0
  4039f8:	b2db      	uxtb	r3, r3
}
  4039fa:	4618      	mov	r0, r3
  4039fc:	370c      	adds	r7, #12
  4039fe:	46bd      	mov	sp, r7
  403a00:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a04:	4770      	bx	lr

00403a06 <hri_usbhs_get_DEVEPTISR_reg>:
	return tmp;
}

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_get_DEVEPTISR_reg(const void *const hw, uint8_t index,
                                                                    hri_usbhs_deveptisr_reg_t mask)
{
  403a06:	b480      	push	{r7}
  403a08:	b087      	sub	sp, #28
  403a0a:	af00      	add	r7, sp, #0
  403a0c:	60f8      	str	r0, [r7, #12]
  403a0e:	460b      	mov	r3, r1
  403a10:	607a      	str	r2, [r7, #4]
  403a12:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  403a14:	7afa      	ldrb	r2, [r7, #11]
  403a16:	68fb      	ldr	r3, [r7, #12]
  403a18:	324c      	adds	r2, #76	; 0x4c
  403a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403a1e:	617b      	str	r3, [r7, #20]
	tmp &= mask;
  403a20:	697a      	ldr	r2, [r7, #20]
  403a22:	687b      	ldr	r3, [r7, #4]
  403a24:	4013      	ands	r3, r2
  403a26:	617b      	str	r3, [r7, #20]
	return tmp;
  403a28:	697b      	ldr	r3, [r7, #20]
}
  403a2a:	4618      	mov	r0, r3
  403a2c:	371c      	adds	r7, #28
  403a2e:	46bd      	mov	sp, r7
  403a30:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a34:	4770      	bx	lr

00403a36 <hri_usbhs_read_DEVEPTISR_reg>:

static inline hri_usbhs_deveptisr_reg_t hri_usbhs_read_DEVEPTISR_reg(const void *const hw, uint8_t index)
{
  403a36:	b480      	push	{r7}
  403a38:	b083      	sub	sp, #12
  403a3a:	af00      	add	r7, sp, #0
  403a3c:	6078      	str	r0, [r7, #4]
  403a3e:	460b      	mov	r3, r1
  403a40:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  403a42:	78fa      	ldrb	r2, [r7, #3]
  403a44:	687b      	ldr	r3, [r7, #4]
  403a46:	324c      	adds	r2, #76	; 0x4c
  403a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  403a4c:	4618      	mov	r0, r3
  403a4e:	370c      	adds	r7, #12
  403a50:	46bd      	mov	sp, r7
  403a52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a56:	4770      	bx	lr

00403a58 <hri_usbhs_write_DEVEPTICR_reg>:
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
  403a58:	b480      	push	{r7}
  403a5a:	b085      	sub	sp, #20
  403a5c:	af00      	add	r7, sp, #0
  403a5e:	60f8      	str	r0, [r7, #12]
  403a60:	460b      	mov	r3, r1
  403a62:	607a      	str	r2, [r7, #4]
  403a64:	72fb      	strb	r3, [r7, #11]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  403a66:	7afa      	ldrb	r2, [r7, #11]
  403a68:	68fb      	ldr	r3, [r7, #12]
  403a6a:	3258      	adds	r2, #88	; 0x58
  403a6c:	6879      	ldr	r1, [r7, #4]
  403a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  403a72:	bf00      	nop
  403a74:	3714      	adds	r7, #20
  403a76:	46bd      	mov	sp, r7
  403a78:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a7c:	4770      	bx	lr

00403a7e <hri_usbhs_write_DEVICR_reg>:
{
	((Usbhs *)hw)->USBHS_HSTPIPICR[index] = data;
}

static inline void hri_usbhs_write_DEVICR_reg(const void *const hw, hri_usbhs_devicr_reg_t data)
{
  403a7e:	b480      	push	{r7}
  403a80:	b083      	sub	sp, #12
  403a82:	af00      	add	r7, sp, #0
  403a84:	6078      	str	r0, [r7, #4]
  403a86:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVICR = data;
  403a88:	687b      	ldr	r3, [r7, #4]
  403a8a:	683a      	ldr	r2, [r7, #0]
  403a8c:	609a      	str	r2, [r3, #8]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403a8e:	bf00      	nop
  403a90:	370c      	adds	r7, #12
  403a92:	46bd      	mov	sp, r7
  403a94:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a98:	4770      	bx	lr

00403a9a <hri_usbhs_write_DEVEPTIFR_reg>:
	((Usbhs *)hw)->USBHS_DEVIFR = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_write_DEVEPTIFR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptifr_reg_t data)
{
  403a9a:	b480      	push	{r7}
  403a9c:	b085      	sub	sp, #20
  403a9e:	af00      	add	r7, sp, #0
  403aa0:	60f8      	str	r0, [r7, #12]
  403aa2:	460b      	mov	r3, r1
  403aa4:	607a      	str	r2, [r7, #4]
  403aa6:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  403aa8:	7afa      	ldrb	r2, [r7, #11]
  403aaa:	68fb      	ldr	r3, [r7, #12]
  403aac:	3264      	adds	r2, #100	; 0x64
  403aae:	6879      	ldr	r1, [r7, #4]
  403ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403ab4:	bf00      	nop
  403ab6:	3714      	adds	r7, #20
  403ab8:	46bd      	mov	sp, r7
  403aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  403abe:	4770      	bx	lr

00403ac0 <hri_usbhs_write_DEVEPTIER_reg>:

static inline void hri_usbhs_write_DEVEPTIER_reg(const void *const hw, uint8_t index, hri_usbhs_deveptier_reg_t data)
{
  403ac0:	b480      	push	{r7}
  403ac2:	b085      	sub	sp, #20
  403ac4:	af00      	add	r7, sp, #0
  403ac6:	60f8      	str	r0, [r7, #12]
  403ac8:	460b      	mov	r3, r1
  403aca:	607a      	str	r2, [r7, #4]
  403acc:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  403ace:	7afa      	ldrb	r2, [r7, #11]
  403ad0:	68fb      	ldr	r3, [r7, #12]
  403ad2:	327c      	adds	r2, #124	; 0x7c
  403ad4:	6879      	ldr	r1, [r7, #4]
  403ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403ada:	bf00      	nop
  403adc:	3714      	adds	r7, #20
  403ade:	46bd      	mov	sp, r7
  403ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ae4:	4770      	bx	lr

00403ae6 <hri_usbhs_write_DEVEPTIDR_reg>:

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
  403ae6:	b480      	push	{r7}
  403ae8:	b085      	sub	sp, #20
  403aea:	af00      	add	r7, sp, #0
  403aec:	60f8      	str	r0, [r7, #12]
  403aee:	460b      	mov	r3, r1
  403af0:	607a      	str	r2, [r7, #4]
  403af2:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  403af4:	7afa      	ldrb	r2, [r7, #11]
  403af6:	68fb      	ldr	r3, [r7, #12]
  403af8:	3288      	adds	r2, #136	; 0x88
  403afa:	6879      	ldr	r1, [r7, #4]
  403afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403b00:	bf00      	nop
  403b02:	3714      	adds	r7, #20
  403b04:	46bd      	mov	sp, r7
  403b06:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b0a:	4770      	bx	lr

00403b0c <hri_usbhs_set_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_HSTPIPIDR[index] = data;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVCTRL_ADDEN_bit(const void *const hw)
{
  403b0c:	b480      	push	{r7}
  403b0e:	b083      	sub	sp, #12
  403b10:	af00      	add	r7, sp, #0
  403b12:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  403b14:	687b      	ldr	r3, [r7, #4]
  403b16:	681b      	ldr	r3, [r3, #0]
  403b18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  403b1c:	687b      	ldr	r3, [r7, #4]
  403b1e:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403b20:	bf00      	nop
  403b22:	370c      	adds	r7, #12
  403b24:	46bd      	mov	sp, r7
  403b26:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b2a:	4770      	bx	lr

00403b2c <hri_usbhs_clear_DEVCTRL_ADDEN_bit>:
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
  403b2c:	b480      	push	{r7}
  403b2e:	b083      	sub	sp, #12
  403b30:	af00      	add	r7, sp, #0
  403b32:	6078      	str	r0, [r7, #4]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  403b34:	687b      	ldr	r3, [r7, #4]
  403b36:	681b      	ldr	r3, [r3, #0]
  403b38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  403b3c:	687b      	ldr	r3, [r7, #4]
  403b3e:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403b40:	bf00      	nop
  403b42:	370c      	adds	r7, #12
  403b44:	46bd      	mov	sp, r7
  403b46:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b4a:	4770      	bx	lr

00403b4c <hri_usbhs_write_DEVCTRL_UADD_bf>:
	tmp = (tmp & USBHS_DEVCTRL_UADD(mask)) >> USBHS_DEVCTRL_UADD_Pos;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  403b4c:	b480      	push	{r7}
  403b4e:	b085      	sub	sp, #20
  403b50:	af00      	add	r7, sp, #0
  403b52:	6078      	str	r0, [r7, #4]
  403b54:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  403b56:	687b      	ldr	r3, [r7, #4]
  403b58:	681b      	ldr	r3, [r3, #0]
  403b5a:	60fb      	str	r3, [r7, #12]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  403b5c:	68fb      	ldr	r3, [r7, #12]
  403b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403b62:	60fb      	str	r3, [r7, #12]
	tmp |= USBHS_DEVCTRL_UADD(data);
  403b64:	683b      	ldr	r3, [r7, #0]
  403b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  403b6a:	68fa      	ldr	r2, [r7, #12]
  403b6c:	4313      	orrs	r3, r2
  403b6e:	60fb      	str	r3, [r7, #12]
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  403b70:	687b      	ldr	r3, [r7, #4]
  403b72:	68fa      	ldr	r2, [r7, #12]
  403b74:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403b76:	bf00      	nop
  403b78:	3714      	adds	r7, #20
  403b7a:	46bd      	mov	sp, r7
  403b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b80:	4770      	bx	lr

00403b82 <hri_usbhs_write_DEVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_DEVCTRL_reg(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
  403b82:	b480      	push	{r7}
  403b84:	b083      	sub	sp, #12
  403b86:	af00      	add	r7, sp, #0
  403b88:	6078      	str	r0, [r7, #4]
  403b8a:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  403b8c:	687b      	ldr	r3, [r7, #4]
  403b8e:	683a      	ldr	r2, [r7, #0]
  403b90:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403b92:	bf00      	nop
  403b94:	370c      	adds	r7, #12
  403b96:	46bd      	mov	sp, r7
  403b98:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b9c:	4770      	bx	lr

00403b9e <hri_usbhs_set_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPDIR;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  403b9e:	b480      	push	{r7}
  403ba0:	b083      	sub	sp, #12
  403ba2:	af00      	add	r7, sp, #0
  403ba4:	6078      	str	r0, [r7, #4]
  403ba6:	460b      	mov	r3, r1
  403ba8:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  403baa:	78fa      	ldrb	r2, [r7, #3]
  403bac:	78f9      	ldrb	r1, [r7, #3]
  403bae:	687b      	ldr	r3, [r7, #4]
  403bb0:	3140      	adds	r1, #64	; 0x40
  403bb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  403bb6:	f443 7100 	orr.w	r1, r3, #512	; 0x200
  403bba:	687b      	ldr	r3, [r7, #4]
  403bbc:	3240      	adds	r2, #64	; 0x40
  403bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403bc2:	bf00      	nop
  403bc4:	370c      	adds	r7, #12
  403bc6:	46bd      	mov	sp, r7
  403bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bcc:	4770      	bx	lr

00403bce <hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] = tmp;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline void hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(const void *const hw, uint8_t index)
{
  403bce:	b480      	push	{r7}
  403bd0:	b083      	sub	sp, #12
  403bd2:	af00      	add	r7, sp, #0
  403bd4:	6078      	str	r0, [r7, #4]
  403bd6:	460b      	mov	r3, r1
  403bd8:	70fb      	strb	r3, [r7, #3]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  403bda:	78fa      	ldrb	r2, [r7, #3]
  403bdc:	78f9      	ldrb	r1, [r7, #3]
  403bde:	687b      	ldr	r3, [r7, #4]
  403be0:	3140      	adds	r1, #64	; 0x40
  403be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  403be6:	f423 7100 	bic.w	r1, r3, #512	; 0x200
  403bea:	687b      	ldr	r3, [r7, #4]
  403bec:	3240      	adds	r2, #64	; 0x40
  403bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403bf2:	bf00      	nop
  403bf4:	370c      	adds	r7, #12
  403bf6:	46bd      	mov	sp, r7
  403bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bfc:	4770      	bx	lr

00403bfe <hri_usbhs_read_DEVEPTCFG_EPTYPE_bf>:
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] ^= USBHS_DEVEPTCFG_EPTYPE(mask);
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_deveptcfg_reg_t hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(const void *const hw, uint8_t index)
{
  403bfe:	b480      	push	{r7}
  403c00:	b085      	sub	sp, #20
  403c02:	af00      	add	r7, sp, #0
  403c04:	6078      	str	r0, [r7, #4]
  403c06:	460b      	mov	r3, r1
  403c08:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  403c0a:	78fa      	ldrb	r2, [r7, #3]
  403c0c:	687b      	ldr	r3, [r7, #4]
  403c0e:	3240      	adds	r2, #64	; 0x40
  403c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403c14:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_DEVEPTCFG_EPTYPE_Msk) >> USBHS_DEVEPTCFG_EPTYPE_Pos;
  403c16:	68fb      	ldr	r3, [r7, #12]
  403c18:	0adb      	lsrs	r3, r3, #11
  403c1a:	f003 0303 	and.w	r3, r3, #3
  403c1e:	60fb      	str	r3, [r7, #12]
	return tmp;
  403c20:	68fb      	ldr	r3, [r7, #12]
}
  403c22:	4618      	mov	r0, r3
  403c24:	3714      	adds	r7, #20
  403c26:	46bd      	mov	sp, r7
  403c28:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c2c:	4770      	bx	lr

00403c2e <hri_usbhs_get_CTRL_USBE_bit>:
	((Usbhs *)hw)->USBHS_CTRL |= USBHS_CTRL_USBE;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_CTRL_USBE_bit(const void *const hw)
{
  403c2e:	b480      	push	{r7}
  403c30:	b085      	sub	sp, #20
  403c32:	af00      	add	r7, sp, #0
  403c34:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  403c36:	687b      	ldr	r3, [r7, #4]
  403c38:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
  403c3c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & USBHS_CTRL_USBE) >> USBHS_CTRL_USBE_Pos;
  403c3e:	68fb      	ldr	r3, [r7, #12]
  403c40:	0bdb      	lsrs	r3, r3, #15
  403c42:	f003 0301 	and.w	r3, r3, #1
  403c46:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
  403c48:	68fb      	ldr	r3, [r7, #12]
  403c4a:	2b00      	cmp	r3, #0
  403c4c:	bf14      	ite	ne
  403c4e:	2301      	movne	r3, #1
  403c50:	2300      	moveq	r3, #0
  403c52:	b2db      	uxtb	r3, r3
}
  403c54:	4618      	mov	r0, r3
  403c56:	3714      	adds	r7, #20
  403c58:	46bd      	mov	sp, r7
  403c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c5e:	4770      	bx	lr

00403c60 <hri_usbhs_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_usbhs_write_CTRL_reg(const void *const hw, hri_usbhs_ctrl_reg_t data)
{
  403c60:	b480      	push	{r7}
  403c62:	b083      	sub	sp, #12
  403c64:	af00      	add	r7, sp, #0
  403c66:	6078      	str	r0, [r7, #4]
  403c68:	6039      	str	r1, [r7, #0]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_CTRL = data;
  403c6a:	687b      	ldr	r3, [r7, #4]
  403c6c:	683a      	ldr	r2, [r7, #0]
  403c6e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403c72:	bf00      	nop
  403c74:	370c      	adds	r7, #12
  403c76:	46bd      	mov	sp, r7
  403c78:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c7c:	4770      	bx	lr

00403c7e <hri_usbhs_read_DEVISR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_devisr_reg_t hri_usbhs_read_DEVISR_reg(const void *const hw)
{
  403c7e:	b480      	push	{r7}
  403c80:	b083      	sub	sp, #12
  403c82:	af00      	add	r7, sp, #0
  403c84:	6078      	str	r0, [r7, #4]
	return ((Usbhs *)hw)->USBHS_DEVISR;
  403c86:	687b      	ldr	r3, [r7, #4]
  403c88:	685b      	ldr	r3, [r3, #4]
}
  403c8a:	4618      	mov	r0, r3
  403c8c:	370c      	adds	r7, #12
  403c8e:	46bd      	mov	sp, r7
  403c90:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c94:	4770      	bx	lr

00403c96 <hri_usbhs_read_DEVEPTIMR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_usbhs_deveptimr_reg_t hri_usbhs_read_DEVEPTIMR_reg(const void *const hw, uint8_t index)
{
  403c96:	b480      	push	{r7}
  403c98:	b083      	sub	sp, #12
  403c9a:	af00      	add	r7, sp, #0
  403c9c:	6078      	str	r0, [r7, #4]
  403c9e:	460b      	mov	r3, r1
  403ca0:	70fb      	strb	r3, [r7, #3]
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  403ca2:	78fa      	ldrb	r2, [r7, #3]
  403ca4:	687b      	ldr	r3, [r7, #4]
  403ca6:	3270      	adds	r2, #112	; 0x70
  403ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  403cac:	4618      	mov	r0, r3
  403cae:	370c      	adds	r7, #12
  403cb0:	46bd      	mov	sp, r7
  403cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cb6:	4770      	bx	lr

00403cb8 <hri_usbhs_write_DEVDMAADDRESS_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
  403cb8:	b480      	push	{r7}
  403cba:	b085      	sub	sp, #20
  403cbc:	af00      	add	r7, sp, #0
  403cbe:	60f8      	str	r0, [r7, #12]
  403cc0:	460b      	mov	r3, r1
  403cc2:	607a      	str	r2, [r7, #4]
  403cc4:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMAADDRESS = data;
  403cc6:	7afb      	ldrb	r3, [r7, #11]
  403cc8:	68fa      	ldr	r2, [r7, #12]
  403cca:	3331      	adds	r3, #49	; 0x31
  403ccc:	011b      	lsls	r3, r3, #4
  403cce:	4413      	add	r3, r2
  403cd0:	3304      	adds	r3, #4
  403cd2:	687a      	ldr	r2, [r7, #4]
  403cd4:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403cd6:	bf00      	nop
  403cd8:	3714      	adds	r7, #20
  403cda:	46bd      	mov	sp, r7
  403cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ce0:	4770      	bx	lr

00403ce2 <hri_usbhs_write_DEVDMACONTROL_reg>:
	return tmp;
}

static inline void hri_usbhs_write_DEVDMACONTROL_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmacontrol_reg_t data)
{
  403ce2:	b480      	push	{r7}
  403ce4:	b085      	sub	sp, #20
  403ce6:	af00      	add	r7, sp, #0
  403ce8:	60f8      	str	r0, [r7, #12]
  403cea:	460b      	mov	r3, r1
  403cec:	607a      	str	r2, [r7, #4]
  403cee:	72fb      	strb	r3, [r7, #11]
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL = data;
  403cf0:	7afb      	ldrb	r3, [r7, #11]
  403cf2:	68fa      	ldr	r2, [r7, #12]
  403cf4:	011b      	lsls	r3, r3, #4
  403cf6:	4413      	add	r3, r2
  403cf8:	f503 7346 	add.w	r3, r3, #792	; 0x318
  403cfc:	687a      	ldr	r2, [r7, #4]
  403cfe:	601a      	str	r2, [r3, #0]
	USBHS_CRITICAL_SECTION_LEAVE();
}
  403d00:	bf00      	nop
  403d02:	3714      	adds	r7, #20
  403d04:	46bd      	mov	sp, r7
  403d06:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d0a:	4770      	bx	lr

00403d0c <hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit>:
{
	return ((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL;
}

static inline bool hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(const void *const hw, uint8_t submodule_index)
{
  403d0c:	b480      	push	{r7}
  403d0e:	b083      	sub	sp, #12
  403d10:	af00      	add	r7, sp, #0
  403d12:	6078      	str	r0, [r7, #4]
  403d14:	460b      	mov	r3, r1
  403d16:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  403d18:	78fb      	ldrb	r3, [r7, #3]
  403d1a:	687a      	ldr	r2, [r7, #4]
  403d1c:	011b      	lsls	r3, r3, #4
  403d1e:	4413      	add	r3, r2
  403d20:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  403d24:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_CHANN_ENB_Pos;
  403d26:	f003 0301 	and.w	r3, r3, #1
  403d2a:	2b00      	cmp	r3, #0
  403d2c:	bf14      	ite	ne
  403d2e:	2301      	movne	r3, #1
  403d30:	2300      	moveq	r3, #0
  403d32:	b2db      	uxtb	r3, r3
}
  403d34:	4618      	mov	r0, r3
  403d36:	370c      	adds	r7, #12
  403d38:	46bd      	mov	sp, r7
  403d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d3e:	4770      	bx	lr

00403d40 <hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit>:
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS = USBHS_DEVDMASTATUS_CHANN_ACT;
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
  403d40:	b480      	push	{r7}
  403d42:	b083      	sub	sp, #12
  403d44:	af00      	add	r7, sp, #0
  403d46:	6078      	str	r0, [r7, #4]
  403d48:	460b      	mov	r3, r1
  403d4a:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  403d4c:	78fb      	ldrb	r3, [r7, #3]
  403d4e:	687a      	ldr	r2, [r7, #4]
  403d50:	011b      	lsls	r3, r3, #4
  403d52:	4413      	add	r3, r2
  403d54:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  403d58:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_END_TR_ST_Pos;
  403d5a:	091b      	lsrs	r3, r3, #4
  403d5c:	f003 0301 	and.w	r3, r3, #1
  403d60:	2b00      	cmp	r3, #0
  403d62:	bf14      	ite	ne
  403d64:	2301      	movne	r3, #1
  403d66:	2300      	moveq	r3, #0
  403d68:	b2db      	uxtb	r3, r3
}
  403d6a:	4618      	mov	r0, r3
  403d6c:	370c      	adds	r7, #12
  403d6e:	46bd      	mov	sp, r7
  403d70:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d74:	4770      	bx	lr

00403d76 <hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf>:
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
  403d76:	b480      	push	{r7}
  403d78:	b083      	sub	sp, #12
  403d7a:	af00      	add	r7, sp, #0
  403d7c:	6078      	str	r0, [r7, #4]
  403d7e:	460b      	mov	r3, r1
  403d80:	70fb      	strb	r3, [r7, #3]
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  403d82:	78fb      	ldrb	r3, [r7, #3]
  403d84:	687a      	ldr	r2, [r7, #4]
  403d86:	011b      	lsls	r3, r3, #4
  403d88:	4413      	add	r3, r2
  403d8a:	f503 7347 	add.w	r3, r3, #796	; 0x31c
  403d8e:	681b      	ldr	r3, [r3, #0]
	       >> USBHS_DEVDMASTATUS_BUFF_COUNT_Pos;
  403d90:	0c1b      	lsrs	r3, r3, #16
  403d92:	b29b      	uxth	r3, r3
}
  403d94:	4618      	mov	r0, r3
  403d96:	370c      	adds	r7, #12
  403d98:	46bd      	mov	sp, r7
  403d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d9e:	4770      	bx	lr

00403da0 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  403da0:	b480      	push	{r7}
  403da2:	b083      	sub	sp, #12
  403da4:	af00      	add	r7, sp, #0
  403da6:	6078      	str	r0, [r7, #4]
  403da8:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
}
  403daa:	bf00      	nop
  403dac:	370c      	adds	r7, #12
  403dae:	46bd      	mov	sp, r7
  403db0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403db4:	4770      	bx	lr

00403db6 <_dummy_func_return_false>:
/**
 * \brief Dummy callback function
 * \return Always false.
 */
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
  403db6:	b480      	push	{r7}
  403db8:	b083      	sub	sp, #12
  403dba:	af00      	add	r7, sp, #0
  403dbc:	6078      	str	r0, [r7, #4]
  403dbe:	6039      	str	r1, [r7, #0]
	(void)unused0;
	(void)unused1;
	return false;
  403dc0:	2300      	movs	r3, #0
}
  403dc2:	4618      	mov	r0, r3
  403dc4:	370c      	adds	r7, #12
  403dc6:	46bd      	mov	sp, r7
  403dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dcc:	4770      	bx	lr
	...

00403dd0 <_usbd_ep_int_ack>:
/** \brief ACK the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_ack(uint8_t epn, uint32_t flags)
{
  403dd0:	b580      	push	{r7, lr}
  403dd2:	b082      	sub	sp, #8
  403dd4:	af00      	add	r7, sp, #0
  403dd6:	4603      	mov	r3, r0
  403dd8:	6039      	str	r1, [r7, #0]
  403dda:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTICR_reg(USBHS, epn, flags);
  403ddc:	79fb      	ldrb	r3, [r7, #7]
  403dde:	683a      	ldr	r2, [r7, #0]
  403de0:	4619      	mov	r1, r3
  403de2:	4803      	ldr	r0, [pc, #12]	; (403df0 <_usbd_ep_int_ack+0x20>)
  403de4:	4b03      	ldr	r3, [pc, #12]	; (403df4 <_usbd_ep_int_ack+0x24>)
  403de6:	4798      	blx	r3
}
  403de8:	bf00      	nop
  403dea:	3708      	adds	r7, #8
  403dec:	46bd      	mov	sp, r7
  403dee:	bd80      	pop	{r7, pc}
  403df0:	40038000 	.word	0x40038000
  403df4:	00403a59 	.word	0x00403a59

00403df8 <_usbd_ep_int_en>:
/** \brief Enable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_en(uint8_t epn, uint32_t flags)
{
  403df8:	b580      	push	{r7, lr}
  403dfa:	b082      	sub	sp, #8
  403dfc:	af00      	add	r7, sp, #0
  403dfe:	4603      	mov	r3, r0
  403e00:	6039      	str	r1, [r7, #0]
  403e02:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIER_reg(USBHS, epn, flags);
  403e04:	79fb      	ldrb	r3, [r7, #7]
  403e06:	683a      	ldr	r2, [r7, #0]
  403e08:	4619      	mov	r1, r3
  403e0a:	4808      	ldr	r0, [pc, #32]	; (403e2c <_usbd_ep_int_en+0x34>)
  403e0c:	4b08      	ldr	r3, [pc, #32]	; (403e30 <_usbd_ep_int_en+0x38>)
  403e0e:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  403e10:	79fb      	ldrb	r3, [r7, #7]
  403e12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403e16:	fa02 f303 	lsl.w	r3, r2, r3
  403e1a:	4619      	mov	r1, r3
  403e1c:	4803      	ldr	r0, [pc, #12]	; (403e2c <_usbd_ep_int_en+0x34>)
  403e1e:	4b05      	ldr	r3, [pc, #20]	; (403e34 <_usbd_ep_int_en+0x3c>)
  403e20:	4798      	blx	r3
}
  403e22:	bf00      	nop
  403e24:	3708      	adds	r7, #8
  403e26:	46bd      	mov	sp, r7
  403e28:	bd80      	pop	{r7, pc}
  403e2a:	bf00      	nop
  403e2c:	40038000 	.word	0x40038000
  403e30:	00403ac1 	.word	0x00403ac1
  403e34:	00403921 	.word	0x00403921

00403e38 <_usbd_ep_int_dis>:
/** \brief Disable the endpoint interrupt
 * \param[in] epn Endpoint number.
 * \param[in] flags Interrupt flags.
 */
static inline void _usbd_ep_int_dis(uint8_t epn, uint32_t flags)
{
  403e38:	b580      	push	{r7, lr}
  403e3a:	b082      	sub	sp, #8
  403e3c:	af00      	add	r7, sp, #0
  403e3e:	4603      	mov	r3, r0
  403e40:	6039      	str	r1, [r7, #0]
  403e42:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, flags);
  403e44:	79fb      	ldrb	r3, [r7, #7]
  403e46:	683a      	ldr	r2, [r7, #0]
  403e48:	4619      	mov	r1, r3
  403e4a:	4803      	ldr	r0, [pc, #12]	; (403e58 <_usbd_ep_int_dis+0x20>)
  403e4c:	4b03      	ldr	r3, [pc, #12]	; (403e5c <_usbd_ep_int_dis+0x24>)
  403e4e:	4798      	blx	r3
}
  403e50:	bf00      	nop
  403e52:	3708      	adds	r7, #8
  403e54:	46bd      	mov	sp, r7
  403e56:	bd80      	pop	{r7, pc}
  403e58:	40038000 	.word	0x40038000
  403e5c:	00403ae7 	.word	0x00403ae7

00403e60 <_usbd_ep_is_ctrl>:

/** \brief Check if endpoint is control endpoint
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_ctrl(uint8_t epn)
{
  403e60:	b580      	push	{r7, lr}
  403e62:	b082      	sub	sp, #8
  403e64:	af00      	add	r7, sp, #0
  403e66:	4603      	mov	r3, r0
  403e68:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_read_DEVEPTCFG_EPTYPE_bf(USBHS, epn) == USB_D_EPCFG_CTRL);
  403e6a:	79fb      	ldrb	r3, [r7, #7]
  403e6c:	4619      	mov	r1, r3
  403e6e:	4806      	ldr	r0, [pc, #24]	; (403e88 <_usbd_ep_is_ctrl+0x28>)
  403e70:	4b06      	ldr	r3, [pc, #24]	; (403e8c <_usbd_ep_is_ctrl+0x2c>)
  403e72:	4798      	blx	r3
  403e74:	4603      	mov	r3, r0
  403e76:	2b00      	cmp	r3, #0
  403e78:	bf0c      	ite	eq
  403e7a:	2301      	moveq	r3, #1
  403e7c:	2300      	movne	r3, #0
  403e7e:	b2db      	uxtb	r3, r3
}
  403e80:	4618      	mov	r0, r3
  403e82:	3708      	adds	r7, #8
  403e84:	46bd      	mov	sp, r7
  403e86:	bd80      	pop	{r7, pc}
  403e88:	40038000 	.word	0x40038000
  403e8c:	00403bff 	.word	0x00403bff

00403e90 <_usbd_ep_set_stall>:
/** \brief Set endpoint stall
 * \param[in] epn Endpoint number.
 * \param[in] st Stall status.
 */
static inline void _usbd_ep_set_stall(uint8_t epn, bool st)
{
  403e90:	b580      	push	{r7, lr}
  403e92:	b084      	sub	sp, #16
  403e94:	af00      	add	r7, sp, #0
  403e96:	4603      	mov	r3, r0
  403e98:	460a      	mov	r2, r1
  403e9a:	71fb      	strb	r3, [r7, #7]
  403e9c:	4613      	mov	r3, r2
  403e9e:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  403ea0:	4b0b      	ldr	r3, [pc, #44]	; (403ed0 <_usbd_ep_set_stall+0x40>)
  403ea2:	60fb      	str	r3, [r7, #12]

	if (st) {
  403ea4:	79bb      	ldrb	r3, [r7, #6]
  403ea6:	2b00      	cmp	r3, #0
  403ea8:	d007      	beq.n	403eba <_usbd_ep_set_stall+0x2a>
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_STALLRQS);
  403eaa:	79fb      	ldrb	r3, [r7, #7]
  403eac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403eb0:	4619      	mov	r1, r3
  403eb2:	68f8      	ldr	r0, [r7, #12]
  403eb4:	4b07      	ldr	r3, [pc, #28]	; (403ed4 <_usbd_ep_set_stall+0x44>)
  403eb6:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
	}
}
  403eb8:	e006      	b.n	403ec8 <_usbd_ep_set_stall+0x38>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_STALLRQC);
  403eba:	79fb      	ldrb	r3, [r7, #7]
  403ebc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403ec0:	4619      	mov	r1, r3
  403ec2:	68f8      	ldr	r0, [r7, #12]
  403ec4:	4b04      	ldr	r3, [pc, #16]	; (403ed8 <_usbd_ep_set_stall+0x48>)
  403ec6:	4798      	blx	r3
}
  403ec8:	bf00      	nop
  403eca:	3710      	adds	r7, #16
  403ecc:	46bd      	mov	sp, r7
  403ece:	bd80      	pop	{r7, pc}
  403ed0:	40038000 	.word	0x40038000
  403ed4:	00403ac1 	.word	0x00403ac1
  403ed8:	00403ae7 	.word	0x00403ae7

00403edc <_usbd_ep_is_stall_sent>:
/** \brief Check if stall has been sent from the endpoint
 * \param[in] epn Endpoint number.
 * \return \c true if it's sent.
 */
static inline bool _usbd_ep_is_stall_sent(uint8_t epn)
{
  403edc:	b580      	push	{r7, lr}
  403ede:	b082      	sub	sp, #8
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	4603      	mov	r3, r0
  403ee4:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_STALLEDI_bit(USBHS, epn));
  403ee6:	79fb      	ldrb	r3, [r7, #7]
  403ee8:	4619      	mov	r1, r3
  403eea:	4804      	ldr	r0, [pc, #16]	; (403efc <_usbd_ep_is_stall_sent+0x20>)
  403eec:	4b04      	ldr	r3, [pc, #16]	; (403f00 <_usbd_ep_is_stall_sent+0x24>)
  403eee:	4798      	blx	r3
  403ef0:	4603      	mov	r3, r0
}
  403ef2:	4618      	mov	r0, r3
  403ef4:	3708      	adds	r7, #8
  403ef6:	46bd      	mov	sp, r7
  403ef8:	bd80      	pop	{r7, pc}
  403efa:	bf00      	nop
  403efc:	40038000 	.word	0x40038000
  403f00:	004039a3 	.word	0x004039a3

00403f04 <_usbd_ep_ack_stall>:

/** \brief ACK endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_stall(uint8_t epn)
{
  403f04:	b580      	push	{r7, lr}
  403f06:	b082      	sub	sp, #8
  403f08:	af00      	add	r7, sp, #0
  403f0a:	4603      	mov	r3, r0
  403f0c:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_STALLEDI);
  403f0e:	79fb      	ldrb	r3, [r7, #7]
  403f10:	2140      	movs	r1, #64	; 0x40
  403f12:	4618      	mov	r0, r3
  403f14:	4b02      	ldr	r3, [pc, #8]	; (403f20 <_usbd_ep_ack_stall+0x1c>)
  403f16:	4798      	blx	r3
}
  403f18:	bf00      	nop
  403f1a:	3708      	adds	r7, #8
  403f1c:	46bd      	mov	sp, r7
  403f1e:	bd80      	pop	{r7, pc}
  403f20:	00403dd1 	.word	0x00403dd1

00403f24 <_usbd_ep_int_stall_en>:
/** \brief Enable/disable endpoint STALL interrupt
 * \param[in] epn Endpoint number.
 * \param[in] en \c true to enable, \c false to disable.
 */
static inline void _usbd_ep_int_stall_en(uint8_t epn, const bool en)
{
  403f24:	b580      	push	{r7, lr}
  403f26:	b082      	sub	sp, #8
  403f28:	af00      	add	r7, sp, #0
  403f2a:	4603      	mov	r3, r0
  403f2c:	460a      	mov	r2, r1
  403f2e:	71fb      	strb	r3, [r7, #7]
  403f30:	4613      	mov	r3, r2
  403f32:	71bb      	strb	r3, [r7, #6]
	if (en) {
  403f34:	79bb      	ldrb	r3, [r7, #6]
  403f36:	2b00      	cmp	r3, #0
  403f38:	d005      	beq.n	403f46 <_usbd_ep_int_stall_en+0x22>
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  403f3a:	79fb      	ldrb	r3, [r7, #7]
  403f3c:	2140      	movs	r1, #64	; 0x40
  403f3e:	4618      	mov	r0, r3
  403f40:	4b05      	ldr	r3, [pc, #20]	; (403f58 <_usbd_ep_int_stall_en+0x34>)
  403f42:	4798      	blx	r3
	} else {
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
	}
}
  403f44:	e004      	b.n	403f50 <_usbd_ep_int_stall_en+0x2c>
		_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  403f46:	79fb      	ldrb	r3, [r7, #7]
  403f48:	2140      	movs	r1, #64	; 0x40
  403f4a:	4618      	mov	r0, r3
  403f4c:	4b03      	ldr	r3, [pc, #12]	; (403f5c <_usbd_ep_int_stall_en+0x38>)
  403f4e:	4798      	blx	r3
}
  403f50:	bf00      	nop
  403f52:	3708      	adds	r7, #8
  403f54:	46bd      	mov	sp, r7
  403f56:	bd80      	pop	{r7, pc}
  403f58:	00403df9 	.word	0x00403df9
  403f5c:	00403e39 	.word	0x00403e39

00403f60 <_usbd_ep_stop_setup>:

/** \brief Stop SETUP transactions
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_stop_setup(uint8_t epn)
{
  403f60:	b580      	push	{r7, lr}
  403f62:	b082      	sub	sp, #8
  403f64:	af00      	add	r7, sp, #0
  403f66:	4603      	mov	r3, r0
  403f68:	71fb      	strb	r3, [r7, #7]
	hri_usbhs_write_DEVEPTIDR_reg(USBHS, epn, USBHS_DEVEPTIDR_RXSTPEC);
  403f6a:	79fb      	ldrb	r3, [r7, #7]
  403f6c:	2204      	movs	r2, #4
  403f6e:	4619      	mov	r1, r3
  403f70:	4803      	ldr	r0, [pc, #12]	; (403f80 <_usbd_ep_stop_setup+0x20>)
  403f72:	4b04      	ldr	r3, [pc, #16]	; (403f84 <_usbd_ep_stop_setup+0x24>)
  403f74:	4798      	blx	r3
}
  403f76:	bf00      	nop
  403f78:	3708      	adds	r7, #8
  403f7a:	46bd      	mov	sp, r7
  403f7c:	bd80      	pop	{r7, pc}
  403f7e:	bf00      	nop
  403f80:	40038000 	.word	0x40038000
  403f84:	00403ae7 	.word	0x00403ae7

00403f88 <_usbd_ep_is_setup>:

/** \brief Check if SETUP packet is ready
 * \param[in] epn Endpoint number.
 */
static inline bool _usbd_ep_is_setup(uint8_t epn)
{
  403f88:	b580      	push	{r7, lr}
  403f8a:	b082      	sub	sp, #8
  403f8c:	af00      	add	r7, sp, #0
  403f8e:	4603      	mov	r3, r0
  403f90:	71fb      	strb	r3, [r7, #7]
	return hri_usbhs_get_DEVEPTISR_RXSTPI_bit(USBHS, epn);
  403f92:	79fb      	ldrb	r3, [r7, #7]
  403f94:	4619      	mov	r1, r3
  403f96:	4804      	ldr	r0, [pc, #16]	; (403fa8 <_usbd_ep_is_setup+0x20>)
  403f98:	4b04      	ldr	r3, [pc, #16]	; (403fac <_usbd_ep_is_setup+0x24>)
  403f9a:	4798      	blx	r3
  403f9c:	4603      	mov	r3, r0
}
  403f9e:	4618      	mov	r0, r3
  403fa0:	3708      	adds	r7, #8
  403fa2:	46bd      	mov	sp, r7
  403fa4:	bd80      	pop	{r7, pc}
  403fa6:	bf00      	nop
  403fa8:	40038000 	.word	0x40038000
  403fac:	00403971 	.word	0x00403971

00403fb0 <_usbd_ep_ack_setup>:

/** \brief ACK endpoint SETUP interrupt
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_ack_setup(uint8_t epn)
{
  403fb0:	b580      	push	{r7, lr}
  403fb2:	b082      	sub	sp, #8
  403fb4:	af00      	add	r7, sp, #0
  403fb6:	4603      	mov	r3, r0
  403fb8:	71fb      	strb	r3, [r7, #7]
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_RXSTPI);
  403fba:	79fb      	ldrb	r3, [r7, #7]
  403fbc:	2104      	movs	r1, #4
  403fbe:	4618      	mov	r0, r3
  403fc0:	4b02      	ldr	r3, [pc, #8]	; (403fcc <_usbd_ep_ack_setup+0x1c>)
  403fc2:	4798      	blx	r3
}
  403fc4:	bf00      	nop
  403fc6:	3708      	adds	r7, #8
  403fc8:	46bd      	mov	sp, r7
  403fca:	bd80      	pop	{r7, pc}
  403fcc:	00403dd1 	.word	0x00403dd1

00403fd0 <_usbd_ep_reset_toggle>:

/** \brief Reset endpoint toggle value
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_reset_toggle(uint8_t epn)
{
  403fd0:	b580      	push	{r7, lr}
  403fd2:	b084      	sub	sp, #16
  403fd4:	af00      	add	r7, sp, #0
  403fd6:	4603      	mov	r3, r0
  403fd8:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  403fda:	4b06      	ldr	r3, [pc, #24]	; (403ff4 <_usbd_ep_reset_toggle+0x24>)
  403fdc:	60fb      	str	r3, [r7, #12]
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RSTDTS);
  403fde:	79fb      	ldrb	r3, [r7, #7]
  403fe0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  403fe4:	4619      	mov	r1, r3
  403fe6:	68f8      	ldr	r0, [r7, #12]
  403fe8:	4b03      	ldr	r3, [pc, #12]	; (403ff8 <_usbd_ep_reset_toggle+0x28>)
  403fea:	4798      	blx	r3
}
  403fec:	bf00      	nop
  403fee:	3710      	adds	r7, #16
  403ff0:	46bd      	mov	sp, r7
  403ff2:	bd80      	pop	{r7, pc}
  403ff4:	40038000 	.word	0x40038000
  403ff8:	00403ac1 	.word	0x00403ac1

00403ffc <_usbd_ep_get_trans_count>:

/** \brief Get byte count for transactions
 * \param[in] epn Endpoint number.
 */
static inline uint16_t _usbd_ep_get_trans_count(uint8_t epn)
{
  403ffc:	b580      	push	{r7, lr}
  403ffe:	b082      	sub	sp, #8
  404000:	af00      	add	r7, sp, #0
  404002:	4603      	mov	r3, r0
  404004:	71fb      	strb	r3, [r7, #7]
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  404006:	79fb      	ldrb	r3, [r7, #7]
  404008:	4a05      	ldr	r2, [pc, #20]	; (404020 <_usbd_ep_get_trans_count+0x24>)
  40400a:	4619      	mov	r1, r3
  40400c:	4805      	ldr	r0, [pc, #20]	; (404024 <_usbd_ep_get_trans_count+0x28>)
  40400e:	4b06      	ldr	r3, [pc, #24]	; (404028 <_usbd_ep_get_trans_count+0x2c>)
  404010:	4798      	blx	r3
  404012:	4603      	mov	r3, r0
  404014:	0d1b      	lsrs	r3, r3, #20
  404016:	b29b      	uxth	r3, r3
}
  404018:	4618      	mov	r0, r3
  40401a:	3708      	adds	r7, #8
  40401c:	46bd      	mov	sp, r7
  40401e:	bd80      	pop	{r7, pc}
  404020:	7ff00000 	.word	0x7ff00000
  404024:	40038000 	.word	0x40038000
  404028:	00403a07 	.word	0x00403a07

0040402c <_usbd_ep_send_zlp_in>:

/** \brief Send a ZLP IN on control endpoint
 * \param[in] epn Endpoint number.
 */
static inline void _usbd_ep_send_zlp_in(uint8_t epn)
{
  40402c:	b580      	push	{r7, lr}
  40402e:	b084      	sub	sp, #16
  404030:	af00      	add	r7, sp, #0
  404032:	4603      	mov	r3, r0
  404034:	71fb      	strb	r3, [r7, #7]
	Usbhs *hw = USBHS;
  404036:	4b0c      	ldr	r3, [pc, #48]	; (404068 <_usbd_ep_send_zlp_in+0x3c>)
  404038:	60fb      	str	r3, [r7, #12]

	/* Send ZLP on IN endpoint. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  40403a:	79fb      	ldrb	r3, [r7, #7]
  40403c:	2201      	movs	r2, #1
  40403e:	4619      	mov	r1, r3
  404040:	68f8      	ldr	r0, [r7, #12]
  404042:	4b0a      	ldr	r3, [pc, #40]	; (40406c <_usbd_ep_send_zlp_in+0x40>)
  404044:	4798      	blx	r3

	/* To detect a protocol error, enable nak interrupt on data OUT phase. */
	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_NAKOUTIC);
  404046:	79fb      	ldrb	r3, [r7, #7]
  404048:	2208      	movs	r2, #8
  40404a:	4619      	mov	r1, r3
  40404c:	68f8      	ldr	r0, [r7, #12]
  40404e:	4b07      	ldr	r3, [pc, #28]	; (40406c <_usbd_ep_send_zlp_in+0x40>)
  404050:	4798      	blx	r3
	hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_NAKOUTES);
  404052:	79fb      	ldrb	r3, [r7, #7]
  404054:	2208      	movs	r2, #8
  404056:	4619      	mov	r1, r3
  404058:	68f8      	ldr	r0, [r7, #12]
  40405a:	4b05      	ldr	r3, [pc, #20]	; (404070 <_usbd_ep_send_zlp_in+0x44>)
  40405c:	4798      	blx	r3
}
  40405e:	bf00      	nop
  404060:	3710      	adds	r7, #16
  404062:	46bd      	mov	sp, r7
  404064:	bd80      	pop	{r7, pc}
  404066:	bf00      	nop
  404068:	40038000 	.word	0x40038000
  40406c:	00403a59 	.word	0x00403a59
  404070:	00403ac1 	.word	0x00403ac1

00404074 <_usbd_ep_set_in_rdy>:
/** Set IN ready for IN transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate IN packet ready to TX.
 */
static inline void _usbd_ep_set_in_rdy(uint8_t epn, const bool rdy)
{
  404074:	b580      	push	{r7, lr}
  404076:	b084      	sub	sp, #16
  404078:	af00      	add	r7, sp, #0
  40407a:	4603      	mov	r3, r0
  40407c:	460a      	mov	r2, r1
  40407e:	71fb      	strb	r3, [r7, #7]
  404080:	4613      	mov	r3, r2
  404082:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  404084:	4b0a      	ldr	r3, [pc, #40]	; (4040b0 <_usbd_ep_set_in_rdy+0x3c>)
  404086:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  404088:	79bb      	ldrb	r3, [r7, #6]
  40408a:	2b00      	cmp	r3, #0
  40408c:	d006      	beq.n	40409c <_usbd_ep_set_in_rdy+0x28>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  40408e:	79fb      	ldrb	r3, [r7, #7]
  404090:	2201      	movs	r2, #1
  404092:	4619      	mov	r1, r3
  404094:	68f8      	ldr	r0, [r7, #12]
  404096:	4b07      	ldr	r3, [pc, #28]	; (4040b4 <_usbd_ep_set_in_rdy+0x40>)
  404098:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
	}
}
  40409a:	e005      	b.n	4040a8 <_usbd_ep_set_in_rdy+0x34>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  40409c:	79fb      	ldrb	r3, [r7, #7]
  40409e:	2201      	movs	r2, #1
  4040a0:	4619      	mov	r1, r3
  4040a2:	68f8      	ldr	r0, [r7, #12]
  4040a4:	4b04      	ldr	r3, [pc, #16]	; (4040b8 <_usbd_ep_set_in_rdy+0x44>)
  4040a6:	4798      	blx	r3
}
  4040a8:	bf00      	nop
  4040aa:	3710      	adds	r7, #16
  4040ac:	46bd      	mov	sp, r7
  4040ae:	bd80      	pop	{r7, pc}
  4040b0:	40038000 	.word	0x40038000
  4040b4:	00403a59 	.word	0x00403a59
  4040b8:	00403a9b 	.word	0x00403a9b

004040bc <_usbd_ep_set_out_rdy>:
/** \brief Set ready for OUT transactions
 * \param[in] epn Endpoint number.
 * \param[in] rdy Set to \c true to indicate OUT bank ready to RX.
 */
static inline void _usbd_ep_set_out_rdy(uint8_t epn, const bool rdy)
{
  4040bc:	b580      	push	{r7, lr}
  4040be:	b084      	sub	sp, #16
  4040c0:	af00      	add	r7, sp, #0
  4040c2:	4603      	mov	r3, r0
  4040c4:	460a      	mov	r2, r1
  4040c6:	71fb      	strb	r3, [r7, #7]
  4040c8:	4613      	mov	r3, r2
  4040ca:	71bb      	strb	r3, [r7, #6]
	Usbhs *hw = USBHS;
  4040cc:	4b0a      	ldr	r3, [pc, #40]	; (4040f8 <_usbd_ep_set_out_rdy+0x3c>)
  4040ce:	60fb      	str	r3, [r7, #12]

	if (rdy) {
  4040d0:	79bb      	ldrb	r3, [r7, #6]
  4040d2:	2b00      	cmp	r3, #0
  4040d4:	d006      	beq.n	4040e4 <_usbd_ep_set_out_rdy+0x28>
		hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_RXOUTIS);
  4040d6:	79fb      	ldrb	r3, [r7, #7]
  4040d8:	2202      	movs	r2, #2
  4040da:	4619      	mov	r1, r3
  4040dc:	68f8      	ldr	r0, [r7, #12]
  4040de:	4b07      	ldr	r3, [pc, #28]	; (4040fc <_usbd_ep_set_out_rdy+0x40>)
  4040e0:	4798      	blx	r3
	} else {
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
	}
}
  4040e2:	e005      	b.n	4040f0 <_usbd_ep_set_out_rdy+0x34>
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  4040e4:	79fb      	ldrb	r3, [r7, #7]
  4040e6:	2202      	movs	r2, #2
  4040e8:	4619      	mov	r1, r3
  4040ea:	68f8      	ldr	r0, [r7, #12]
  4040ec:	4b04      	ldr	r3, [pc, #16]	; (404100 <_usbd_ep_set_out_rdy+0x44>)
  4040ee:	4798      	blx	r3
}
  4040f0:	bf00      	nop
  4040f2:	3710      	adds	r7, #16
  4040f4:	46bd      	mov	sp, r7
  4040f6:	bd80      	pop	{r7, pc}
  4040f8:	40038000 	.word	0x40038000
  4040fc:	00403a9b 	.word	0x00403a9b
  404100:	00403a59 	.word	0x00403a59

00404104 <_usb_d_dev_sof>:

/**
 * \brief Handles USB SOF interrupt
 */
static inline void _usb_d_dev_sof(void)
{
  404104:	b580      	push	{r7, lr}
  404106:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_SOFC);
  404108:	2104      	movs	r1, #4
  40410a:	4804      	ldr	r0, [pc, #16]	; (40411c <_usb_d_dev_sof+0x18>)
  40410c:	4b04      	ldr	r3, [pc, #16]	; (404120 <_usb_d_dev_sof+0x1c>)
  40410e:	4798      	blx	r3
	dev_inst.callbacks.sof();
  404110:	4b04      	ldr	r3, [pc, #16]	; (404124 <_usb_d_dev_sof+0x20>)
  404112:	681b      	ldr	r3, [r3, #0]
  404114:	4798      	blx	r3
}
  404116:	bf00      	nop
  404118:	bd80      	pop	{r7, pc}
  40411a:	bf00      	nop
  40411c:	40038000 	.word	0x40038000
  404120:	00403a7f 	.word	0x00403a7f
  404124:	204000dc 	.word	0x204000dc

00404128 <_usb_d_dev_msof>:

/**
 * \brief Handles USB MSOF interrupt
 */
static inline void _usb_d_dev_msof(void)
{
  404128:	b580      	push	{r7, lr}
  40412a:	af00      	add	r7, sp, #0
	/* ACK SOF interrupt. */
	hri_usbhs_write_DEVICR_reg(USBHS, USBHS_DEVICR_MSOFC);
  40412c:	2102      	movs	r1, #2
  40412e:	4804      	ldr	r0, [pc, #16]	; (404140 <_usb_d_dev_msof+0x18>)
  404130:	4b04      	ldr	r3, [pc, #16]	; (404144 <_usb_d_dev_msof+0x1c>)
  404132:	4798      	blx	r3
	dev_inst.callbacks.sof();
  404134:	4b04      	ldr	r3, [pc, #16]	; (404148 <_usb_d_dev_msof+0x20>)
  404136:	681b      	ldr	r3, [r3, #0]
  404138:	4798      	blx	r3
}
  40413a:	bf00      	nop
  40413c:	bd80      	pop	{r7, pc}
  40413e:	bf00      	nop
  404140:	40038000 	.word	0x40038000
  404144:	00403a7f 	.word	0x00403a7f
  404148:	204000dc 	.word	0x204000dc

0040414c <_usb_d_dev_wakeup>:

/**
 * \brief Handles USB resume/wakeup interrupts
 */
static inline void _usb_d_dev_wakeup(void)
{
  40414c:	b580      	push	{r7, lr}
  40414e:	b082      	sub	sp, #8
  404150:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  404152:	4b0a      	ldr	r3, [pc, #40]	; (40417c <_usb_d_dev_wakeup+0x30>)
  404154:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USBHS_DEVICR_WAKEUPC);
  404156:	2110      	movs	r1, #16
  404158:	6878      	ldr	r0, [r7, #4]
  40415a:	4b09      	ldr	r3, [pc, #36]	; (404180 <_usb_d_dev_wakeup+0x34>)
  40415c:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_WAKEUPE_bit(hw);
  40415e:	6878      	ldr	r0, [r7, #4]
  404160:	4b08      	ldr	r3, [pc, #32]	; (404184 <_usb_d_dev_wakeup+0x38>)
  404162:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_SUSPE_bit(hw);
  404164:	6878      	ldr	r0, [r7, #4]
  404166:	4b08      	ldr	r3, [pc, #32]	; (404188 <_usb_d_dev_wakeup+0x3c>)
  404168:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  40416a:	4b08      	ldr	r3, [pc, #32]	; (40418c <_usb_d_dev_wakeup+0x40>)
  40416c:	685b      	ldr	r3, [r3, #4]
  40416e:	2100      	movs	r1, #0
  404170:	2002      	movs	r0, #2
  404172:	4798      	blx	r3
}
  404174:	bf00      	nop
  404176:	3708      	adds	r7, #8
  404178:	46bd      	mov	sp, r7
  40417a:	bd80      	pop	{r7, pc}
  40417c:	40038000 	.word	0x40038000
  404180:	00403a7f 	.word	0x00403a7f
  404184:	00403907 	.word	0x00403907
  404188:	004038ed 	.word	0x004038ed
  40418c:	204000dc 	.word	0x204000dc

00404190 <_usb_d_dev_reset>:

/**
 * \brief Handles USB signal reset interrupt
 */
static inline void _usb_d_dev_reset(void)
{
  404190:	b580      	push	{r7, lr}
  404192:	b082      	sub	sp, #8
  404194:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  404196:	4b0c      	ldr	r3, [pc, #48]	; (4041c8 <_usb_d_dev_reset+0x38>)
  404198:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USBHS_DEVICR_EORSTC);
  40419a:	2108      	movs	r1, #8
  40419c:	6878      	ldr	r0, [r7, #4]
  40419e:	4b0b      	ldr	r3, [pc, #44]	; (4041cc <_usb_d_dev_reset+0x3c>)
  4041a0:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(hw, USB_D_WAKEUP_INT_FLAGS);
  4041a2:	2170      	movs	r1, #112	; 0x70
  4041a4:	6878      	ldr	r0, [r7, #4]
  4041a6:	4b0a      	ldr	r3, [pc, #40]	; (4041d0 <_usb_d_dev_reset+0x40>)
  4041a8:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  4041aa:	2101      	movs	r1, #1
  4041ac:	6878      	ldr	r0, [r7, #4]
  4041ae:	4b09      	ldr	r3, [pc, #36]	; (4041d4 <_usb_d_dev_reset+0x44>)
  4041b0:	4798      	blx	r3

	_usb_d_dev_reset_epts();
  4041b2:	4b09      	ldr	r3, [pc, #36]	; (4041d8 <_usb_d_dev_reset+0x48>)
  4041b4:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  4041b6:	4b09      	ldr	r3, [pc, #36]	; (4041dc <_usb_d_dev_reset+0x4c>)
  4041b8:	685b      	ldr	r3, [r3, #4]
  4041ba:	2100      	movs	r1, #0
  4041bc:	2001      	movs	r0, #1
  4041be:	4798      	blx	r3
}
  4041c0:	bf00      	nop
  4041c2:	3708      	adds	r7, #8
  4041c4:	46bd      	mov	sp, r7
  4041c6:	bd80      	pop	{r7, pc}
  4041c8:	40038000 	.word	0x40038000
  4041cc:	00403a7f 	.word	0x00403a7f
  4041d0:	00403955 	.word	0x00403955
  4041d4:	00403921 	.word	0x00403921
  4041d8:	00404bfd 	.word	0x00404bfd
  4041dc:	204000dc 	.word	0x204000dc

004041e0 <_usb_d_dev_suspend>:

static inline void _usb_d_dev_suspend(void)
{
  4041e0:	b580      	push	{r7, lr}
  4041e2:	b082      	sub	sp, #8
  4041e4:	af00      	add	r7, sp, #0
	Usbhs *hw = USBHS;
  4041e6:	4b0b      	ldr	r3, [pc, #44]	; (404214 <_usb_d_dev_suspend+0x34>)
  4041e8:	607b      	str	r3, [r7, #4]

	hri_usbhs_write_DEVICR_reg(hw, USB_D_SUSPEND_INT_FLAGS);
  4041ea:	2101      	movs	r1, #1
  4041ec:	6878      	ldr	r0, [r7, #4]
  4041ee:	4b0a      	ldr	r3, [pc, #40]	; (404218 <_usb_d_dev_suspend+0x38>)
  4041f0:	4798      	blx	r3
	hri_usbhs_clear_DEVIMR_reg(USBHS, USB_D_SUSPEND_INT_FLAGS);
  4041f2:	2101      	movs	r1, #1
  4041f4:	4807      	ldr	r0, [pc, #28]	; (404214 <_usb_d_dev_suspend+0x34>)
  4041f6:	4b09      	ldr	r3, [pc, #36]	; (40421c <_usb_d_dev_suspend+0x3c>)
  4041f8:	4798      	blx	r3
	hri_usbhs_set_DEVIMR_reg(USBHS, USB_D_WAKEUP_INT_FLAGS);
  4041fa:	2170      	movs	r1, #112	; 0x70
  4041fc:	4805      	ldr	r0, [pc, #20]	; (404214 <_usb_d_dev_suspend+0x34>)
  4041fe:	4b08      	ldr	r3, [pc, #32]	; (404220 <_usb_d_dev_suspend+0x40>)
  404200:	4798      	blx	r3

	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  404202:	4b08      	ldr	r3, [pc, #32]	; (404224 <_usb_d_dev_suspend+0x44>)
  404204:	685b      	ldr	r3, [r3, #4]
  404206:	2100      	movs	r1, #0
  404208:	2004      	movs	r0, #4
  40420a:	4798      	blx	r3
}
  40420c:	bf00      	nop
  40420e:	3708      	adds	r7, #8
  404210:	46bd      	mov	sp, r7
  404212:	bd80      	pop	{r7, pc}
  404214:	40038000 	.word	0x40038000
  404218:	00403a7f 	.word	0x00403a7f
  40421c:	00403955 	.word	0x00403955
  404220:	00403921 	.word	0x00403921
  404224:	204000dc 	.word	0x204000dc

00404228 <_usb_d_dev_handle_nep>:

/**
 * \brief Handles USB non-endpoint interrupt
 */
static inline bool _usb_d_dev_handle_nep(void)
{
  404228:	b580      	push	{r7, lr}
  40422a:	b082      	sub	sp, #8
  40422c:	af00      	add	r7, sp, #0
	bool     rc    = true;
  40422e:	2301      	movs	r3, #1
  404230:	71fb      	strb	r3, [r7, #7]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  404232:	481f      	ldr	r0, [pc, #124]	; (4042b0 <_usb_d_dev_handle_nep+0x88>)
  404234:	4b1f      	ldr	r3, [pc, #124]	; (4042b4 <_usb_d_dev_handle_nep+0x8c>)
  404236:	4798      	blx	r3
  404238:	4603      	mov	r3, r0
  40423a:	80bb      	strh	r3, [r7, #4]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  40423c:	481c      	ldr	r0, [pc, #112]	; (4042b0 <_usb_d_dev_handle_nep+0x88>)
  40423e:	4b1e      	ldr	r3, [pc, #120]	; (4042b8 <_usb_d_dev_handle_nep+0x90>)
  404240:	4798      	blx	r3
  404242:	4603      	mov	r3, r0
  404244:	b29a      	uxth	r2, r3
  404246:	88bb      	ldrh	r3, [r7, #4]
  404248:	4013      	ands	r3, r2
  40424a:	80bb      	strh	r3, [r7, #4]

	if (flags & USBHS_DEVISR_SOF) {
  40424c:	88bb      	ldrh	r3, [r7, #4]
  40424e:	f003 0304 	and.w	r3, r3, #4
  404252:	2b00      	cmp	r3, #0
  404254:	d003      	beq.n	40425e <_usb_d_dev_handle_nep+0x36>
		_usb_d_dev_sof();
  404256:	4b19      	ldr	r3, [pc, #100]	; (4042bc <_usb_d_dev_handle_nep+0x94>)
  404258:	4798      	blx	r3
		return true;
  40425a:	2301      	movs	r3, #1
  40425c:	e023      	b.n	4042a6 <_usb_d_dev_handle_nep+0x7e>
	} else if (flags & USBHS_DEVISR_MSOF) {
  40425e:	88bb      	ldrh	r3, [r7, #4]
  404260:	f003 0302 	and.w	r3, r3, #2
  404264:	2b00      	cmp	r3, #0
  404266:	d003      	beq.n	404270 <_usb_d_dev_handle_nep+0x48>
		_usb_d_dev_msof();
  404268:	4b15      	ldr	r3, [pc, #84]	; (4042c0 <_usb_d_dev_handle_nep+0x98>)
  40426a:	4798      	blx	r3
		return true;
  40426c:	2301      	movs	r3, #1
  40426e:	e01a      	b.n	4042a6 <_usb_d_dev_handle_nep+0x7e>
	}

	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  404270:	88bb      	ldrh	r3, [r7, #4]
  404272:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404276:	2b00      	cmp	r3, #0
  404278:	d002      	beq.n	404280 <_usb_d_dev_handle_nep+0x58>
		_usb_d_dev_wakeup();
  40427a:	4b12      	ldr	r3, [pc, #72]	; (4042c4 <_usb_d_dev_handle_nep+0x9c>)
  40427c:	4798      	blx	r3
  40427e:	e011      	b.n	4042a4 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_EORST) {
  404280:	88bb      	ldrh	r3, [r7, #4]
  404282:	f003 0308 	and.w	r3, r3, #8
  404286:	2b00      	cmp	r3, #0
  404288:	d002      	beq.n	404290 <_usb_d_dev_handle_nep+0x68>
		_usb_d_dev_reset();
  40428a:	4b0f      	ldr	r3, [pc, #60]	; (4042c8 <_usb_d_dev_handle_nep+0xa0>)
  40428c:	4798      	blx	r3
  40428e:	e009      	b.n	4042a4 <_usb_d_dev_handle_nep+0x7c>
	} else if (flags & USBHS_DEVISR_SUSP) {
  404290:	88bb      	ldrh	r3, [r7, #4]
  404292:	f003 0301 	and.w	r3, r3, #1
  404296:	2b00      	cmp	r3, #0
  404298:	d002      	beq.n	4042a0 <_usb_d_dev_handle_nep+0x78>
		_usb_d_dev_suspend();
  40429a:	4b0c      	ldr	r3, [pc, #48]	; (4042cc <_usb_d_dev_handle_nep+0xa4>)
  40429c:	4798      	blx	r3
  40429e:	e001      	b.n	4042a4 <_usb_d_dev_handle_nep+0x7c>
	} else {
		rc = false;
  4042a0:	2300      	movs	r3, #0
  4042a2:	71fb      	strb	r3, [r7, #7]
	}

	return rc;
  4042a4:	79fb      	ldrb	r3, [r7, #7]
}
  4042a6:	4618      	mov	r0, r3
  4042a8:	3708      	adds	r7, #8
  4042aa:	46bd      	mov	sp, r7
  4042ac:	bd80      	pop	{r7, pc}
  4042ae:	bf00      	nop
  4042b0:	40038000 	.word	0x40038000
  4042b4:	00403c7f 	.word	0x00403c7f
  4042b8:	0040393d 	.word	0x0040393d
  4042bc:	00404105 	.word	0x00404105
  4042c0:	00404129 	.word	0x00404129
  4042c4:	0040414d 	.word	0x0040414d
  4042c8:	00404191 	.word	0x00404191
  4042cc:	004041e1 	.word	0x004041e1

004042d0 <_usb_d_dev_in_next>:
/**
 * \brief Prepare next IN transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_in_next(struct _usb_d_dev_ep *ept)
{
  4042d0:	b580      	push	{r7, lr}
  4042d2:	b08a      	sub	sp, #40	; 0x28
  4042d4:	af00      	add	r7, sp, #0
  4042d6:	6078      	str	r0, [r7, #4]
	Usbhs *  hw       = USBHS;
  4042d8:	4b65      	ldr	r3, [pc, #404]	; (404470 <_usb_d_dev_in_next+0x1a0>)
  4042da:	623b      	str	r3, [r7, #32]
	uint8_t  epn      = USB_EP_GET_N(ept->ep);
  4042dc:	687b      	ldr	r3, [r7, #4]
  4042de:	7c9b      	ldrb	r3, [r3, #18]
  4042e0:	f003 030f 	and.w	r3, r3, #15
  4042e4:	77fb      	strb	r3, [r7, #31]
	uint8_t *ptr_dest = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  4042e6:	7ffb      	ldrb	r3, [r7, #31]
  4042e8:	03da      	lsls	r2, r3, #15
  4042ea:	4b62      	ldr	r3, [pc, #392]	; (404474 <_usb_d_dev_in_next+0x1a4>)
  4042ec:	4413      	add	r3, r2
  4042ee:	61bb      	str	r3, [r7, #24]
	uint8_t *ptr_src;

	uint16_t trans_count = ept->trans_load;
  4042f0:	687b      	ldr	r3, [r7, #4]
  4042f2:	68db      	ldr	r3, [r3, #12]
  4042f4:	82fb      	strh	r3, [r7, #22]
	uint16_t trans_next;
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  4042f6:	687b      	ldr	r3, [r7, #4]
  4042f8:	8a1b      	ldrh	r3, [r3, #16]
  4042fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
  4042fe:	4293      	cmp	r3, r2
  404300:	d103      	bne.n	40430a <_usb_d_dev_in_next+0x3a>
  404302:	687b      	ldr	r3, [r7, #4]
  404304:	8a1b      	ldrh	r3, [r3, #16]
  404306:	b21b      	sxth	r3, r3
  404308:	e004      	b.n	404314 <_usb_d_dev_in_next+0x44>
  40430a:	687b      	ldr	r3, [r7, #4]
  40430c:	8a1b      	ldrh	r3, [r3, #16]
  40430e:	3b01      	subs	r3, #1
  404310:	b29b      	uxth	r3, r3
  404312:	b21b      	sxth	r3, r3
  404314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
  404318:	4013      	ands	r3, r2
  40431a:	b21b      	sxth	r3, r3
  40431c:	82bb      	strh	r3, [r7, #20]
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  40431e:	687b      	ldr	r3, [r7, #4]
  404320:	7cdb      	ldrb	r3, [r3, #19]
  404322:	f003 0307 	and.w	r3, r3, #7
  404326:	b2db      	uxtb	r3, r3
  404328:	2b01      	cmp	r3, #1
  40432a:	bf0c      	ite	eq
  40432c:	2301      	moveq	r3, #1
  40432e:	2300      	movne	r3, #0
  404330:	74fb      	strb	r3, [r7, #19]

	if (ept->trans_count >= ept->trans_size) {
  404332:	687b      	ldr	r3, [r7, #4]
  404334:	689a      	ldr	r2, [r3, #8]
  404336:	687b      	ldr	r3, [r7, #4]
  404338:	685b      	ldr	r3, [r3, #4]
  40433a:	429a      	cmp	r2, r3
  40433c:	d358      	bcc.n	4043f0 <_usb_d_dev_in_next+0x120>
		if (ept->flags.bits.need_zlp) {
  40433e:	687b      	ldr	r3, [r7, #4]
  404340:	7cdb      	ldrb	r3, [r3, #19]
  404342:	f003 0310 	and.w	r3, r3, #16
  404346:	b2db      	uxtb	r3, r3
  404348:	2b00      	cmp	r3, #0
  40434a:	d019      	beq.n	404380 <_usb_d_dev_in_next+0xb0>
			ept->trans_load          = 0;
  40434c:	687b      	ldr	r3, [r7, #4]
  40434e:	2200      	movs	r2, #0
  404350:	60da      	str	r2, [r3, #12]
			ept->flags.bits.need_zlp = 0;
  404352:	687a      	ldr	r2, [r7, #4]
  404354:	7cd3      	ldrb	r3, [r2, #19]
  404356:	f36f 1304 	bfc	r3, #4, #1
  40435a:	74d3      	strb	r3, [r2, #19]
			_usbd_ep_send_zlp_in(epn);
  40435c:	7ffb      	ldrb	r3, [r7, #31]
  40435e:	4618      	mov	r0, r3
  404360:	4b45      	ldr	r3, [pc, #276]	; (404478 <_usb_d_dev_in_next+0x1a8>)
  404362:	4798      	blx	r3
			if (!is_ctrl) {
  404364:	7cfb      	ldrb	r3, [r7, #19]
  404366:	f083 0301 	eor.w	r3, r3, #1
  40436a:	b2db      	uxtb	r3, r3
  40436c:	2b00      	cmp	r3, #0
  40436e:	d078      	beq.n	404462 <_usb_d_dev_in_next+0x192>
				/** Switch to next bank. */
				hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  404370:	7ffb      	ldrb	r3, [r7, #31]
  404372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  404376:	4619      	mov	r1, r3
  404378:	6a38      	ldr	r0, [r7, #32]
  40437a:	4b40      	ldr	r3, [pc, #256]	; (40447c <_usb_d_dev_in_next+0x1ac>)
  40437c:	4798      	blx	r3
			}
			return;
  40437e:	e070      	b.n	404462 <_usb_d_dev_in_next+0x192>
		}

		/* Complete. */
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_TXINEC);
  404380:	7ffb      	ldrb	r3, [r7, #31]
  404382:	2201      	movs	r2, #1
  404384:	4619      	mov	r1, r3
  404386:	6a38      	ldr	r0, [r7, #32]
  404388:	4b3c      	ldr	r3, [pc, #240]	; (40447c <_usb_d_dev_in_next+0x1ac>)
  40438a:	4798      	blx	r3
		if (!is_ctrl) {
  40438c:	7cfb      	ldrb	r3, [r7, #19]
  40438e:	f083 0301 	eor.w	r3, r3, #1
  404392:	b2db      	uxtb	r3, r3
  404394:	2b00      	cmp	r3, #0
  404396:	d008      	beq.n	4043aa <_usb_d_dev_in_next+0xda>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  404398:	7ffb      	ldrb	r3, [r7, #31]
  40439a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40439e:	fa02 f303 	lsl.w	r3, r2, r3
  4043a2:	4619      	mov	r1, r3
  4043a4:	6a38      	ldr	r0, [r7, #32]
  4043a6:	4b36      	ldr	r3, [pc, #216]	; (404480 <_usb_d_dev_in_next+0x1b0>)
  4043a8:	4798      	blx	r3
		}

		ept->trans_size = ept->trans_count;
  4043aa:	687b      	ldr	r3, [r7, #4]
  4043ac:	689a      	ldr	r2, [r3, #8]
  4043ae:	687b      	ldr	r3, [r7, #4]
  4043b0:	605a      	str	r2, [r3, #4]

		/* No ping-pong, so ask more data without background transfer. */
		if (last_pkt == ept->size) {
  4043b2:	687b      	ldr	r3, [r7, #4]
  4043b4:	8a1b      	ldrh	r3, [r3, #16]
  4043b6:	8aba      	ldrh	r2, [r7, #20]
  4043b8:	429a      	cmp	r2, r3
  4043ba:	d114      	bne.n	4043e6 <_usb_d_dev_in_next+0x116>
			ept->flags.bits.is_busy = 0;
  4043bc:	687a      	ldr	r2, [r7, #4]
  4043be:	7cd3      	ldrb	r3, [r2, #19]
  4043c0:	f36f 1386 	bfc	r3, #6, #1
  4043c4:	74d3      	strb	r3, [r2, #19]
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  4043c6:	4b2f      	ldr	r3, [pc, #188]	; (404484 <_usb_d_dev_in_next+0x1b4>)
  4043c8:	68db      	ldr	r3, [r3, #12]
  4043ca:	687a      	ldr	r2, [r7, #4]
  4043cc:	7c90      	ldrb	r0, [r2, #18]
  4043ce:	687a      	ldr	r2, [r7, #4]
  4043d0:	6892      	ldr	r2, [r2, #8]
  4043d2:	4611      	mov	r1, r2
  4043d4:	4798      	blx	r3
  4043d6:	4603      	mov	r3, r0
  4043d8:	2b00      	cmp	r3, #0
  4043da:	d144      	bne.n	404466 <_usb_d_dev_in_next+0x196>
				/* More data added. */
				return;
			}
			ept->flags.bits.is_busy = 1;
  4043dc:	687a      	ldr	r2, [r7, #4]
  4043de:	7cd3      	ldrb	r3, [r2, #19]
  4043e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4043e4:	74d3      	strb	r3, [r2, #19]
		}
		/* Finish normally. */
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4043e6:	2100      	movs	r1, #0
  4043e8:	6878      	ldr	r0, [r7, #4]
  4043ea:	4b27      	ldr	r3, [pc, #156]	; (404488 <_usb_d_dev_in_next+0x1b8>)
  4043ec:	4798      	blx	r3
		return;
  4043ee:	e03b      	b.n	404468 <_usb_d_dev_in_next+0x198>
	} else {
		trans_next = ept->trans_size - ept->trans_count;
  4043f0:	687b      	ldr	r3, [r7, #4]
  4043f2:	685b      	ldr	r3, [r3, #4]
  4043f4:	b29a      	uxth	r2, r3
  4043f6:	687b      	ldr	r3, [r7, #4]
  4043f8:	689b      	ldr	r3, [r3, #8]
  4043fa:	b29b      	uxth	r3, r3
  4043fc:	1ad3      	subs	r3, r2, r3
  4043fe:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (trans_next > ept->size) {
  404400:	687b      	ldr	r3, [r7, #4]
  404402:	8a1b      	ldrh	r3, [r3, #16]
  404404:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  404406:	429a      	cmp	r2, r3
  404408:	d902      	bls.n	404410 <_usb_d_dev_in_next+0x140>
			trans_next = ept->size;
  40440a:	687b      	ldr	r3, [r7, #4]
  40440c:	8a1b      	ldrh	r3, [r3, #16]
  40440e:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		ptr_src = &ept->trans_buf[ept->trans_count];
  404410:	687b      	ldr	r3, [r7, #4]
  404412:	681a      	ldr	r2, [r3, #0]
  404414:	687b      	ldr	r3, [r7, #4]
  404416:	689b      	ldr	r3, [r3, #8]
  404418:	4413      	add	r3, r2
  40441a:	60fb      	str	r3, [r7, #12]
		memcpy(ptr_dest, ptr_src, trans_next);
  40441c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  40441e:	461a      	mov	r2, r3
  404420:	68f9      	ldr	r1, [r7, #12]
  404422:	69b8      	ldr	r0, [r7, #24]
  404424:	4b19      	ldr	r3, [pc, #100]	; (40448c <_usb_d_dev_in_next+0x1bc>)
  404426:	4798      	blx	r3
		ept->trans_load = trans_next;
  404428:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
  40442a:	687b      	ldr	r3, [r7, #4]
  40442c:	60da      	str	r2, [r3, #12]
		ept->trans_count += trans_next;
  40442e:	687b      	ldr	r3, [r7, #4]
  404430:	689a      	ldr	r2, [r3, #8]
  404432:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  404434:	441a      	add	r2, r3
  404436:	687b      	ldr	r3, [r7, #4]
  404438:	609a      	str	r2, [r3, #8]
		hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_TXINIC);
  40443a:	7ffb      	ldrb	r3, [r7, #31]
  40443c:	2201      	movs	r2, #1
  40443e:	4619      	mov	r1, r3
  404440:	6a38      	ldr	r0, [r7, #32]
  404442:	4b13      	ldr	r3, [pc, #76]	; (404490 <_usb_d_dev_in_next+0x1c0>)
  404444:	4798      	blx	r3
		if (!is_ctrl) {
  404446:	7cfb      	ldrb	r3, [r7, #19]
  404448:	f083 0301 	eor.w	r3, r3, #1
  40444c:	b2db      	uxtb	r3, r3
  40444e:	2b00      	cmp	r3, #0
  404450:	d00a      	beq.n	404468 <_usb_d_dev_in_next+0x198>
			/** Switch to next bank. */
			hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  404452:	7ffb      	ldrb	r3, [r7, #31]
  404454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  404458:	4619      	mov	r1, r3
  40445a:	6a38      	ldr	r0, [r7, #32]
  40445c:	4b07      	ldr	r3, [pc, #28]	; (40447c <_usb_d_dev_in_next+0x1ac>)
  40445e:	4798      	blx	r3
  404460:	e002      	b.n	404468 <_usb_d_dev_in_next+0x198>
			return;
  404462:	bf00      	nop
  404464:	e000      	b.n	404468 <_usb_d_dev_in_next+0x198>
				return;
  404466:	bf00      	nop
		}
	}
}
  404468:	3728      	adds	r7, #40	; 0x28
  40446a:	46bd      	mov	sp, r7
  40446c:	bd80      	pop	{r7, pc}
  40446e:	bf00      	nop
  404470:	40038000 	.word	0x40038000
  404474:	a0100000 	.word	0xa0100000
  404478:	0040402d 	.word	0x0040402d
  40447c:	00403ae7 	.word	0x00403ae7
  404480:	00403955 	.word	0x00403955
  404484:	204000dc 	.word	0x204000dc
  404488:	00404ed9 	.word	0x00404ed9
  40448c:	004052b9 	.word	0x004052b9
  404490:	00403a59 	.word	0x00403a59

00404494 <_usb_d_dev_out_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_out_next(struct _usb_d_dev_ep *ept)
{
  404494:	b580      	push	{r7, lr}
  404496:	b088      	sub	sp, #32
  404498:	af00      	add	r7, sp, #0
  40449a:	6078      	str	r0, [r7, #4]
	Usbhs *  hw          = USBHS;
  40449c:	4b47      	ldr	r3, [pc, #284]	; (4045bc <_usb_d_dev_out_next+0x128>)
  40449e:	61bb      	str	r3, [r7, #24]
	uint8_t  epn         = USB_EP_GET_N(ept->ep);
  4044a0:	687b      	ldr	r3, [r7, #4]
  4044a2:	7c9b      	ldrb	r3, [r3, #18]
  4044a4:	f003 030f 	and.w	r3, r3, #15
  4044a8:	75fb      	strb	r3, [r7, #23]
	uint16_t last_trans  = _usbd_ep_get_trans_count(epn);
  4044aa:	7dfb      	ldrb	r3, [r7, #23]
  4044ac:	4618      	mov	r0, r3
  4044ae:	4b44      	ldr	r3, [pc, #272]	; (4045c0 <_usb_d_dev_out_next+0x12c>)
  4044b0:	4798      	blx	r3
  4044b2:	4603      	mov	r3, r0
  4044b4:	83fb      	strh	r3, [r7, #30]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  4044b6:	687b      	ldr	r3, [r7, #4]
  4044b8:	685b      	ldr	r3, [r3, #4]
  4044ba:	b29a      	uxth	r2, r3
  4044bc:	687b      	ldr	r3, [r7, #4]
  4044be:	689b      	ldr	r3, [r3, #8]
  4044c0:	b29b      	uxth	r3, r3
  4044c2:	1ad3      	subs	r3, r2, r3
  4044c4:	82bb      	strh	r3, [r7, #20]
	uint8_t *ptr         = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  4044c6:	7dfb      	ldrb	r3, [r7, #23]
  4044c8:	03da      	lsls	r2, r3, #15
  4044ca:	4b3e      	ldr	r3, [pc, #248]	; (4045c4 <_usb_d_dev_out_next+0x130>)
  4044cc:	4413      	add	r3, r2
  4044ce:	613b      	str	r3, [r7, #16]
	bool     is_full = false, is_short = false;
  4044d0:	2300      	movs	r3, #0
  4044d2:	777b      	strb	r3, [r7, #29]
  4044d4:	2300      	movs	r3, #0
  4044d6:	773b      	strb	r3, [r7, #28]
	bool     is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4044d8:	687b      	ldr	r3, [r7, #4]
  4044da:	7cdb      	ldrb	r3, [r3, #19]
  4044dc:	f003 0307 	and.w	r3, r3, #7
  4044e0:	b2db      	uxtb	r3, r3
  4044e2:	2b01      	cmp	r3, #1
  4044e4:	bf0c      	ite	eq
  4044e6:	2301      	moveq	r3, #1
  4044e8:	2300      	movne	r3, #0
  4044ea:	73fb      	strb	r3, [r7, #15]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_RXOUTIC);
  4044ec:	7dfb      	ldrb	r3, [r7, #23]
  4044ee:	2202      	movs	r2, #2
  4044f0:	4619      	mov	r1, r3
  4044f2:	69b8      	ldr	r0, [r7, #24]
  4044f4:	4b34      	ldr	r3, [pc, #208]	; (4045c8 <_usb_d_dev_out_next+0x134>)
  4044f6:	4798      	blx	r3

	if (last_trans > 0) {
  4044f8:	8bfb      	ldrh	r3, [r7, #30]
  4044fa:	2b00      	cmp	r3, #0
  4044fc:	d021      	beq.n	404542 <_usb_d_dev_out_next+0xae>
		if (last_trans > last_remain) {
  4044fe:	8bfa      	ldrh	r2, [r7, #30]
  404500:	8abb      	ldrh	r3, [r7, #20]
  404502:	429a      	cmp	r2, r3
  404504:	d903      	bls.n	40450e <_usb_d_dev_out_next+0x7a>
			last_trans = last_remain;
  404506:	8abb      	ldrh	r3, [r7, #20]
  404508:	83fb      	strh	r3, [r7, #30]
			is_full    = true;
  40450a:	2301      	movs	r3, #1
  40450c:	777b      	strb	r3, [r7, #29]
		}
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  40450e:	687b      	ldr	r3, [r7, #4]
  404510:	681a      	ldr	r2, [r3, #0]
  404512:	687b      	ldr	r3, [r7, #4]
  404514:	689b      	ldr	r3, [r3, #8]
  404516:	4413      	add	r3, r2
  404518:	8bfa      	ldrh	r2, [r7, #30]
  40451a:	6939      	ldr	r1, [r7, #16]
  40451c:	4618      	mov	r0, r3
  40451e:	4b2b      	ldr	r3, [pc, #172]	; (4045cc <_usb_d_dev_out_next+0x138>)
  404520:	4798      	blx	r3
		ept->trans_count += last_trans;
  404522:	687b      	ldr	r3, [r7, #4]
  404524:	689a      	ldr	r2, [r3, #8]
  404526:	8bfb      	ldrh	r3, [r7, #30]
  404528:	441a      	add	r2, r3
  40452a:	687b      	ldr	r3, [r7, #4]
  40452c:	609a      	str	r2, [r3, #8]
		ept->trans_load = last_trans;
  40452e:	8bfa      	ldrh	r2, [r7, #30]
  404530:	687b      	ldr	r3, [r7, #4]
  404532:	60da      	str	r2, [r3, #12]
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_FIFOCONC);
  404534:	7dfb      	ldrb	r3, [r7, #23]
  404536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40453a:	4619      	mov	r1, r3
  40453c:	69b8      	ldr	r0, [r7, #24]
  40453e:	4b24      	ldr	r3, [pc, #144]	; (4045d0 <_usb_d_dev_out_next+0x13c>)
  404540:	4798      	blx	r3
	}

	if (last_trans < ept->size) {
  404542:	687b      	ldr	r3, [r7, #4]
  404544:	8a1b      	ldrh	r3, [r3, #16]
  404546:	8bfa      	ldrh	r2, [r7, #30]
  404548:	429a      	cmp	r2, r3
  40454a:	d207      	bcs.n	40455c <_usb_d_dev_out_next+0xc8>
		ept->flags.bits.need_zlp = 0;
  40454c:	687a      	ldr	r2, [r7, #4]
  40454e:	7cd3      	ldrb	r3, [r2, #19]
  404550:	f36f 1304 	bfc	r3, #4, #1
  404554:	74d3      	strb	r3, [r2, #19]
		is_short                 = true;
  404556:	2301      	movs	r3, #1
  404558:	773b      	strb	r3, [r7, #28]
  40455a:	e007      	b.n	40456c <_usb_d_dev_out_next+0xd8>
	} else if (ept->trans_count >= ept->trans_size) {
  40455c:	687b      	ldr	r3, [r7, #4]
  40455e:	689a      	ldr	r2, [r3, #8]
  404560:	687b      	ldr	r3, [r7, #4]
  404562:	685b      	ldr	r3, [r3, #4]
  404564:	429a      	cmp	r2, r3
  404566:	d301      	bcc.n	40456c <_usb_d_dev_out_next+0xd8>
		is_full = true;
  404568:	2301      	movs	r3, #1
  40456a:	777b      	strb	r3, [r7, #29]
	}

	/* Complete. */
	if (is_full || is_short) {
  40456c:	7f7b      	ldrb	r3, [r7, #29]
  40456e:	2b00      	cmp	r3, #0
  404570:	d102      	bne.n	404578 <_usb_d_dev_out_next+0xe4>
  404572:	7f3b      	ldrb	r3, [r7, #28]
  404574:	2b00      	cmp	r3, #0
  404576:	d01c      	beq.n	4045b2 <_usb_d_dev_out_next+0x11e>
		hri_usbhs_write_DEVEPTIDR_reg(hw, epn, USBHS_DEVEPTIDR_RXOUTEC);
  404578:	7dfb      	ldrb	r3, [r7, #23]
  40457a:	2202      	movs	r2, #2
  40457c:	4619      	mov	r1, r3
  40457e:	69b8      	ldr	r0, [r7, #24]
  404580:	4b13      	ldr	r3, [pc, #76]	; (4045d0 <_usb_d_dev_out_next+0x13c>)
  404582:	4798      	blx	r3
		if (!is_ctrl) {
  404584:	7bfb      	ldrb	r3, [r7, #15]
  404586:	f083 0301 	eor.w	r3, r3, #1
  40458a:	b2db      	uxtb	r3, r3
  40458c:	2b00      	cmp	r3, #0
  40458e:	d008      	beq.n	4045a2 <_usb_d_dev_out_next+0x10e>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  404590:	7dfb      	ldrb	r3, [r7, #23]
  404592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404596:	fa02 f303 	lsl.w	r3, r2, r3
  40459a:	4619      	mov	r1, r3
  40459c:	69b8      	ldr	r0, [r7, #24]
  40459e:	4b0d      	ldr	r3, [pc, #52]	; (4045d4 <_usb_d_dev_out_next+0x140>)
  4045a0:	4798      	blx	r3
		}
		ept->trans_size = ept->trans_count;
  4045a2:	687b      	ldr	r3, [r7, #4]
  4045a4:	689a      	ldr	r2, [r3, #8]
  4045a6:	687b      	ldr	r3, [r7, #4]
  4045a8:	605a      	str	r2, [r3, #4]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4045aa:	2100      	movs	r1, #0
  4045ac:	6878      	ldr	r0, [r7, #4]
  4045ae:	4b0a      	ldr	r3, [pc, #40]	; (4045d8 <_usb_d_dev_out_next+0x144>)
  4045b0:	4798      	blx	r3
	}
}
  4045b2:	bf00      	nop
  4045b4:	3720      	adds	r7, #32
  4045b6:	46bd      	mov	sp, r7
  4045b8:	bd80      	pop	{r7, pc}
  4045ba:	bf00      	nop
  4045bc:	40038000 	.word	0x40038000
  4045c0:	00403ffd 	.word	0x00403ffd
  4045c4:	a0100000 	.word	0xa0100000
  4045c8:	00403a59 	.word	0x00403a59
  4045cc:	004052b9 	.word	0x004052b9
  4045d0:	00403ae7 	.word	0x00403ae7
  4045d4:	00403955 	.word	0x00403955
  4045d8:	00404ed9 	.word	0x00404ed9

004045dc <_usb_d_dev_dma_next>:
/**
 * \brief Prepare next OUT transactions
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_dma_next(struct _usb_d_dev_ep *ept)
{
  4045dc:	b580      	push	{r7, lr}
  4045de:	b086      	sub	sp, #24
  4045e0:	af00      	add	r7, sp, #0
  4045e2:	6078      	str	r0, [r7, #4]
	Usbhs *  hw  = USBHS;
  4045e4:	4b61      	ldr	r3, [pc, #388]	; (40476c <_usb_d_dev_dma_next+0x190>)
  4045e6:	60fb      	str	r3, [r7, #12]
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  4045e8:	687b      	ldr	r3, [r7, #4]
  4045ea:	7c9b      	ldrb	r3, [r3, #18]
  4045ec:	f003 030f 	and.w	r3, r3, #15
  4045f0:	72fb      	strb	r3, [r7, #11]
	uint32_t trans_next;
	uint32_t dma_ctrl;

	if (!ept->flags.bits.is_busy) {
  4045f2:	687b      	ldr	r3, [r7, #4]
  4045f4:	7cdb      	ldrb	r3, [r3, #19]
  4045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4045fa:	b2db      	uxtb	r3, r3
  4045fc:	2b00      	cmp	r3, #0
  4045fe:	f000 80b0 	beq.w	404762 <_usb_d_dev_dma_next+0x186>
		/* No job is running, then ignore it (system error) */
		return;
	}

	if (ept->trans_count != ept->trans_size) {
  404602:	687b      	ldr	r3, [r7, #4]
  404604:	689a      	ldr	r2, [r3, #8]
  404606:	687b      	ldr	r3, [r7, #4]
  404608:	685b      	ldr	r3, [r3, #4]
  40460a:	429a      	cmp	r2, r3
  40460c:	d073      	beq.n	4046f6 <_usb_d_dev_dma_next+0x11a>
		trans_next = ept->trans_size - ept->trans_count;
  40460e:	687b      	ldr	r3, [r7, #4]
  404610:	685a      	ldr	r2, [r3, #4]
  404612:	687b      	ldr	r3, [r7, #4]
  404614:	689b      	ldr	r3, [r3, #8]
  404616:	1ad3      	subs	r3, r2, r3
  404618:	617b      	str	r3, [r7, #20]
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  40461a:	697b      	ldr	r3, [r7, #20]
  40461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404620:	d905      	bls.n	40462e <_usb_d_dev_dma_next+0x52>
			trans_next = USB_D_DEV_TRANS_MAX;
  404622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  404626:	617b      	str	r3, [r7, #20]
			/* Set 0 to transfer the maximum */
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  404628:	2300      	movs	r3, #0
  40462a:	613b      	str	r3, [r7, #16]
  40462c:	e002      	b.n	404634 <_usb_d_dev_dma_next+0x58>
		} else {
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  40462e:	697b      	ldr	r3, [r7, #20]
  404630:	041b      	lsls	r3, r3, #16
  404632:	613b      	str	r3, [r7, #16]
		}
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  404634:	687b      	ldr	r3, [r7, #4]
  404636:	7cdb      	ldrb	r3, [r3, #19]
  404638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40463c:	b2db      	uxtb	r3, r3
  40463e:	2b00      	cmp	r3, #0
  404640:	d00b      	beq.n	40465a <_usb_d_dev_dma_next+0x7e>
  404642:	687b      	ldr	r3, [r7, #4]
  404644:	7cdb      	ldrb	r3, [r3, #19]
  404646:	f003 0310 	and.w	r3, r3, #16
  40464a:	b2db      	uxtb	r3, r3
  40464c:	2b00      	cmp	r3, #0
  40464e:	d104      	bne.n	40465a <_usb_d_dev_dma_next+0x7e>
			/* Enable short packet option, else the DMA transfer is accepted
			    and interrupt DMA valid but nothing is sent. */
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  404650:	693b      	ldr	r3, [r7, #16]
  404652:	f043 0308 	orr.w	r3, r3, #8
  404656:	613b      	str	r3, [r7, #16]
  404658:	e010      	b.n	40467c <_usb_d_dev_dma_next+0xa0>
		} else {
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  40465a:	687b      	ldr	r3, [r7, #4]
  40465c:	7cdb      	ldrb	r3, [r3, #19]
  40465e:	f003 0307 	and.w	r3, r3, #7
  404662:	b2db      	uxtb	r3, r3
  404664:	2b02      	cmp	r3, #2
  404666:	d105      	bne.n	404674 <_usb_d_dev_dma_next+0x98>
  404668:	687b      	ldr	r3, [r7, #4]
  40466a:	8a1b      	ldrh	r3, [r3, #16]
  40466c:	461a      	mov	r2, r3
  40466e:	697b      	ldr	r3, [r7, #20]
  404670:	429a      	cmp	r2, r3
  404672:	d303      	bcc.n	40467c <_usb_d_dev_dma_next+0xa0>
				/* Enable short packet reception */
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  404674:	693b      	ldr	r3, [r7, #16]
  404676:	f043 0314 	orr.w	r3, r3, #20
  40467a:	613b      	str	r3, [r7, #16]
			}
		}

		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  40467c:	7afb      	ldrb	r3, [r7, #11]
  40467e:	3b01      	subs	r3, #1
  404680:	b2d9      	uxtb	r1, r3
  404682:	687b      	ldr	r3, [r7, #4]
  404684:	681a      	ldr	r2, [r3, #0]
  404686:	687b      	ldr	r3, [r7, #4]
  404688:	689b      	ldr	r3, [r3, #8]
  40468a:	4413      	add	r3, r2
  40468c:	461a      	mov	r2, r3
  40468e:	68f8      	ldr	r0, [r7, #12]
  404690:	4b37      	ldr	r3, [pc, #220]	; (404770 <_usb_d_dev_dma_next+0x194>)
  404692:	4798      	blx	r3
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  404694:	693b      	ldr	r3, [r7, #16]
  404696:	f043 0321 	orr.w	r3, r3, #33	; 0x21
  40469a:	613b      	str	r3, [r7, #16]

		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  40469c:	7afb      	ldrb	r3, [r7, #11]
  40469e:	3b01      	subs	r3, #1
  4046a0:	b2db      	uxtb	r3, r3
  4046a2:	4619      	mov	r1, r3
  4046a4:	68f8      	ldr	r0, [r7, #12]
  4046a6:	4b33      	ldr	r3, [pc, #204]	; (404774 <_usb_d_dev_dma_next+0x198>)
  4046a8:	4798      	blx	r3
  4046aa:	4603      	mov	r3, r0
  4046ac:	f083 0301 	eor.w	r3, r3, #1
  4046b0:	b2db      	uxtb	r3, r3
  4046b2:	2b00      	cmp	r3, #0
  4046b4:	d01b      	beq.n	4046ee <_usb_d_dev_dma_next+0x112>
			hri_usbhs_write_DEVDMACONTROL_reg(hw, (epn - 1), dma_ctrl);
  4046b6:	7afb      	ldrb	r3, [r7, #11]
  4046b8:	3b01      	subs	r3, #1
  4046ba:	b2db      	uxtb	r3, r3
  4046bc:	693a      	ldr	r2, [r7, #16]
  4046be:	4619      	mov	r1, r3
  4046c0:	68f8      	ldr	r0, [r7, #12]
  4046c2:	4b2d      	ldr	r3, [pc, #180]	; (404778 <_usb_d_dev_dma_next+0x19c>)
  4046c4:	4798      	blx	r3
			ept->trans_count += trans_next;
  4046c6:	687b      	ldr	r3, [r7, #4]
  4046c8:	689a      	ldr	r2, [r3, #8]
  4046ca:	697b      	ldr	r3, [r7, #20]
  4046cc:	441a      	add	r2, r3
  4046ce:	687b      	ldr	r3, [r7, #4]
  4046d0:	609a      	str	r2, [r3, #8]
			ept->trans_load = trans_next;
  4046d2:	687b      	ldr	r3, [r7, #4]
  4046d4:	697a      	ldr	r2, [r7, #20]
  4046d6:	60da      	str	r2, [r3, #12]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  4046d8:	7afb      	ldrb	r3, [r7, #11]
  4046da:	3b01      	subs	r3, #1
  4046dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4046e0:	fa02 f303 	lsl.w	r3, r2, r3
  4046e4:	4619      	mov	r1, r3
  4046e6:	68f8      	ldr	r0, [r7, #12]
  4046e8:	4b24      	ldr	r3, [pc, #144]	; (40477c <_usb_d_dev_dma_next+0x1a0>)
  4046ea:	4798      	blx	r3
			return;
  4046ec:	e03a      	b.n	404764 <_usb_d_dev_dma_next+0x188>
		}

		/* Here a ZLP has been received and the DMA transfer must be not started.
		   It is the end of transfer. */
		ept->trans_size = ept->trans_count;
  4046ee:	687b      	ldr	r3, [r7, #4]
  4046f0:	689a      	ldr	r2, [r3, #8]
  4046f2:	687b      	ldr	r3, [r7, #4]
  4046f4:	605a      	str	r2, [r3, #4]
	}

	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  4046f6:	687b      	ldr	r3, [r7, #4]
  4046f8:	7cdb      	ldrb	r3, [r3, #19]
  4046fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4046fe:	b2db      	uxtb	r3, r3
  404700:	2b00      	cmp	r3, #0
  404702:	d029      	beq.n	404758 <_usb_d_dev_dma_next+0x17c>
  404704:	687b      	ldr	r3, [r7, #4]
  404706:	7cdb      	ldrb	r3, [r3, #19]
  404708:	f003 0310 	and.w	r3, r3, #16
  40470c:	b2db      	uxtb	r3, r3
  40470e:	2b00      	cmp	r3, #0
  404710:	d022      	beq.n	404758 <_usb_d_dev_dma_next+0x17c>
		/* Need to send a ZLP (No possible with USB DMA) enable interrupt to
		   wait a free bank to sent ZLP. */
		_usbd_ep_int_ack(epn, USBHS_DEVEPTICR_TXINIC);
  404712:	7afb      	ldrb	r3, [r7, #11]
  404714:	2101      	movs	r1, #1
  404716:	4618      	mov	r0, r3
  404718:	4b19      	ldr	r3, [pc, #100]	; (404780 <_usb_d_dev_dma_next+0x1a4>)
  40471a:	4798      	blx	r3
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  40471c:	7afb      	ldrb	r3, [r7, #11]
  40471e:	4619      	mov	r1, r3
  404720:	68f8      	ldr	r0, [r7, #12]
  404722:	4b18      	ldr	r3, [pc, #96]	; (404784 <_usb_d_dev_dma_next+0x1a8>)
  404724:	4798      	blx	r3
  404726:	4603      	mov	r3, r0
  404728:	2b00      	cmp	r3, #0
  40472a:	d005      	beq.n	404738 <_usb_d_dev_dma_next+0x15c>
			hri_usbhs_write_DEVEPTIFR_reg(hw, epn, USBHS_DEVEPTIFR_TXINIS);
  40472c:	7afb      	ldrb	r3, [r7, #11]
  40472e:	2201      	movs	r2, #1
  404730:	4619      	mov	r1, r3
  404732:	68f8      	ldr	r0, [r7, #12]
  404734:	4b14      	ldr	r3, [pc, #80]	; (404788 <_usb_d_dev_dma_next+0x1ac>)
  404736:	4798      	blx	r3
		}
		hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  404738:	7afb      	ldrb	r3, [r7, #11]
  40473a:	2201      	movs	r2, #1
  40473c:	4619      	mov	r1, r3
  40473e:	68f8      	ldr	r0, [r7, #12]
  404740:	4b12      	ldr	r3, [pc, #72]	; (40478c <_usb_d_dev_dma_next+0x1b0>)
  404742:	4798      	blx	r3
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  404744:	7afb      	ldrb	r3, [r7, #11]
  404746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40474a:	fa02 f303 	lsl.w	r3, r2, r3
  40474e:	4619      	mov	r1, r3
  404750:	68f8      	ldr	r0, [r7, #12]
  404752:	4b0a      	ldr	r3, [pc, #40]	; (40477c <_usb_d_dev_dma_next+0x1a0>)
  404754:	4798      	blx	r3
		return;
  404756:	e005      	b.n	404764 <_usb_d_dev_dma_next+0x188>
	}

	/* Complete */
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  404758:	2100      	movs	r1, #0
  40475a:	6878      	ldr	r0, [r7, #4]
  40475c:	4b0c      	ldr	r3, [pc, #48]	; (404790 <_usb_d_dev_dma_next+0x1b4>)
  40475e:	4798      	blx	r3
  404760:	e000      	b.n	404764 <_usb_d_dev_dma_next+0x188>
		return;
  404762:	bf00      	nop
}
  404764:	3718      	adds	r7, #24
  404766:	46bd      	mov	sp, r7
  404768:	bd80      	pop	{r7, pc}
  40476a:	bf00      	nop
  40476c:	40038000 	.word	0x40038000
  404770:	00403cb9 	.word	0x00403cb9
  404774:	00403d41 	.word	0x00403d41
  404778:	00403ce3 	.word	0x00403ce3
  40477c:	00403921 	.word	0x00403921
  404780:	00403dd1 	.word	0x00403dd1
  404784:	004039d5 	.word	0x004039d5
  404788:	00403a9b 	.word	0x00403a9b
  40478c:	00403ac1 	.word	0x00403ac1
  404790:	00404ed9 	.word	0x00404ed9

00404794 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  404794:	b580      	push	{r7, lr}
  404796:	b084      	sub	sp, #16
  404798:	af00      	add	r7, sp, #0
  40479a:	6078      	str	r0, [r7, #4]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  40479c:	687b      	ldr	r3, [r7, #4]
  40479e:	7c9b      	ldrb	r3, [r3, #18]
  4047a0:	f003 030f 	and.w	r3, r3, #15
  4047a4:	73fb      	strb	r3, [r7, #15]
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4047a6:	687b      	ldr	r3, [r7, #4]
  4047a8:	7cdb      	ldrb	r3, [r3, #19]
  4047aa:	f003 0307 	and.w	r3, r3, #7
  4047ae:	b2db      	uxtb	r3, r3
  4047b0:	2b01      	cmp	r3, #1
  4047b2:	bf0c      	ite	eq
  4047b4:	2301      	moveq	r3, #1
  4047b6:	2300      	movne	r3, #0
  4047b8:	73bb      	strb	r3, [r7, #14]

	if (!is_ctrl) {
  4047ba:	7bbb      	ldrb	r3, [r7, #14]
  4047bc:	f083 0301 	eor.w	r3, r3, #1
  4047c0:	b2db      	uxtb	r3, r3
  4047c2:	2b00      	cmp	r3, #0
  4047c4:	d008      	beq.n	4047d8 <_usb_d_dev_handle_setup+0x44>
		/* Should never be here! */
		_usbd_ep_ack_setup(epn);
  4047c6:	7bfb      	ldrb	r3, [r7, #15]
  4047c8:	4618      	mov	r0, r3
  4047ca:	4b1a      	ldr	r3, [pc, #104]	; (404834 <_usb_d_dev_handle_setup+0xa0>)
  4047cc:	4798      	blx	r3
		_usbd_ep_stop_setup(epn);
  4047ce:	7bfb      	ldrb	r3, [r7, #15]
  4047d0:	4618      	mov	r0, r3
  4047d2:	4b19      	ldr	r3, [pc, #100]	; (404838 <_usb_d_dev_handle_setup+0xa4>)
  4047d4:	4798      	blx	r3
		return;
  4047d6:	e02a      	b.n	40482e <_usb_d_dev_handle_setup+0x9a>

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  4047d8:	687b      	ldr	r3, [r7, #4]
  4047da:	7cdb      	ldrb	r3, [r3, #19]
  4047dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4047e0:	b2db      	uxtb	r3, r3
  4047e2:	2b00      	cmp	r3, #0
  4047e4:	d00e      	beq.n	404804 <_usb_d_dev_handle_setup+0x70>
		ept->flags.bits.is_busy = 0;
  4047e6:	687a      	ldr	r2, [r7, #4]
  4047e8:	7cd3      	ldrb	r3, [r2, #19]
  4047ea:	f36f 1386 	bfc	r3, #6, #1
  4047ee:	74d3      	strb	r3, [r2, #19]

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
  4047f0:	7bfb      	ldrb	r3, [r7, #15]
  4047f2:	2100      	movs	r1, #0
  4047f4:	4618      	mov	r0, r3
  4047f6:	4b11      	ldr	r3, [pc, #68]	; (40483c <_usb_d_dev_handle_setup+0xa8>)
  4047f8:	4798      	blx	r3
		_usbd_ep_set_out_rdy(epn, false);
  4047fa:	7bfb      	ldrb	r3, [r7, #15]
  4047fc:	2100      	movs	r1, #0
  4047fe:	4618      	mov	r0, r3
  404800:	4b0f      	ldr	r3, [pc, #60]	; (404840 <_usb_d_dev_handle_setup+0xac>)
  404802:	4798      	blx	r3
	}

	ept->flags.bits.is_stalled = 0;
  404804:	687a      	ldr	r2, [r7, #4]
  404806:	7cd3      	ldrb	r3, [r2, #19]
  404808:	f36f 03c3 	bfc	r3, #3, #1
  40480c:	74d3      	strb	r3, [r2, #19]

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
  40480e:	7bfb      	ldrb	r3, [r7, #15]
  404810:	2118      	movs	r1, #24
  404812:	4618      	mov	r0, r3
  404814:	4b0b      	ldr	r3, [pc, #44]	; (404844 <_usb_d_dev_handle_setup+0xb0>)
  404816:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
  404818:	7bfb      	ldrb	r3, [r7, #15]
  40481a:	2118      	movs	r1, #24
  40481c:	4618      	mov	r0, r3
  40481e:	4b0a      	ldr	r3, [pc, #40]	; (404848 <_usb_d_dev_handle_setup+0xb4>)
  404820:	4798      	blx	r3
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  404822:	4b0a      	ldr	r3, [pc, #40]	; (40484c <_usb_d_dev_handle_setup+0xb8>)
  404824:	689b      	ldr	r3, [r3, #8]
  404826:	687a      	ldr	r2, [r7, #4]
  404828:	7c92      	ldrb	r2, [r2, #18]
  40482a:	4610      	mov	r0, r2
  40482c:	4798      	blx	r3
}
  40482e:	3710      	adds	r7, #16
  404830:	46bd      	mov	sp, r7
  404832:	bd80      	pop	{r7, pc}
  404834:	00403fb1 	.word	0x00403fb1
  404838:	00403f61 	.word	0x00403f61
  40483c:	00404075 	.word	0x00404075
  404840:	004040bd 	.word	0x004040bd
  404844:	00403dd1 	.word	0x00403dd1
  404848:	00403e39 	.word	0x00403e39
  40484c:	204000dc 	.word	0x204000dc

00404850 <_usb_d_dev_handle_stall>:
/**
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept)
{
  404850:	b580      	push	{r7, lr}
  404852:	b084      	sub	sp, #16
  404854:	af00      	add	r7, sp, #0
  404856:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  404858:	687b      	ldr	r3, [r7, #4]
  40485a:	7c9b      	ldrb	r3, [r3, #18]
  40485c:	f003 030f 	and.w	r3, r3, #15
  404860:	73fb      	strb	r3, [r7, #15]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, false);
  404862:	7bfb      	ldrb	r3, [r7, #15]
  404864:	2100      	movs	r1, #0
  404866:	4618      	mov	r0, r3
  404868:	4b04      	ldr	r3, [pc, #16]	; (40487c <_usb_d_dev_handle_stall+0x2c>)
  40486a:	4798      	blx	r3
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  40486c:	2101      	movs	r1, #1
  40486e:	6878      	ldr	r0, [r7, #4]
  404870:	4b03      	ldr	r3, [pc, #12]	; (404880 <_usb_d_dev_handle_stall+0x30>)
  404872:	4798      	blx	r3
}
  404874:	bf00      	nop
  404876:	3710      	adds	r7, #16
  404878:	46bd      	mov	sp, r7
  40487a:	bd80      	pop	{r7, pc}
  40487c:	00403f25 	.word	0x00403f25
  404880:	00404ed9 	.word	0x00404ed9

00404884 <_usb_d_dev_handle_overflow>:
/**
 * \brief Handles transaction overflow interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_overflow(struct _usb_d_dev_ep *ept)
{
  404884:	b580      	push	{r7, lr}
  404886:	b084      	sub	sp, #16
  404888:	af00      	add	r7, sp, #0
  40488a:	6078      	str	r0, [r7, #4]
	Usbhs * hw  = USBHS;
  40488c:	4b0f      	ldr	r3, [pc, #60]	; (4048cc <_usb_d_dev_handle_overflow+0x48>)
  40488e:	60fb      	str	r3, [r7, #12]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  404890:	687b      	ldr	r3, [r7, #4]
  404892:	7c9b      	ldrb	r3, [r3, #18]
  404894:	f003 030f 	and.w	r3, r3, #15
  404898:	72fb      	strb	r3, [r7, #11]

	hri_usbhs_write_DEVEPTICR_reg(hw, epn, USBHS_DEVEPTICR_OVERFIC);
  40489a:	7afb      	ldrb	r3, [r7, #11]
  40489c:	2220      	movs	r2, #32
  40489e:	4619      	mov	r1, r3
  4048a0:	68f8      	ldr	r0, [r7, #12]
  4048a2:	4b0b      	ldr	r3, [pc, #44]	; (4048d0 <_usb_d_dev_handle_overflow+0x4c>)
  4048a4:	4798      	blx	r3
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  4048a6:	687b      	ldr	r3, [r7, #4]
  4048a8:	7cdb      	ldrb	r3, [r3, #19]
  4048aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
  4048ae:	b2db      	uxtb	r3, r3
  4048b0:	2b00      	cmp	r3, #0
  4048b2:	bf14      	ite	ne
  4048b4:	2301      	movne	r3, #1
  4048b6:	2300      	moveq	r3, #0
  4048b8:	b2db      	uxtb	r3, r3
  4048ba:	2204      	movs	r2, #4
  4048bc:	4619      	mov	r1, r3
  4048be:	6878      	ldr	r0, [r7, #4]
  4048c0:	4b04      	ldr	r3, [pc, #16]	; (4048d4 <_usb_d_dev_handle_overflow+0x50>)
  4048c2:	4798      	blx	r3
}
  4048c4:	bf00      	nop
  4048c6:	3710      	adds	r7, #16
  4048c8:	46bd      	mov	sp, r7
  4048ca:	bd80      	pop	{r7, pc}
  4048cc:	40038000 	.word	0x40038000
  4048d0:	00403a59 	.word	0x00403a59
  4048d4:	00404f21 	.word	0x00404f21

004048d8 <_usb_d_dev_trans_setup_isr>:
 * \brief Analyze flags for setup transaction
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_setup_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  4048d8:	b580      	push	{r7, lr}
  4048da:	b082      	sub	sp, #8
  4048dc:	af00      	add	r7, sp, #0
  4048de:	6078      	str	r0, [r7, #4]
  4048e0:	460b      	mov	r3, r1
  4048e2:	70fb      	strb	r3, [r7, #3]
	/*
	 * SETPU is automatically ACKed by hardware
	 * OUT & IN should be set to NAK when checking SETUP
	 * No need to check OUT & IN status.
	 */
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4048e4:	78fb      	ldrb	r3, [r7, #3]
  4048e6:	f003 0304 	and.w	r3, r3, #4
  4048ea:	2b00      	cmp	r3, #0
  4048ec:	d003      	beq.n	4048f6 <_usb_d_dev_trans_setup_isr+0x1e>
		_usb_d_dev_handle_setup(ept);
  4048ee:	6878      	ldr	r0, [r7, #4]
  4048f0:	4b07      	ldr	r3, [pc, #28]	; (404910 <_usb_d_dev_trans_setup_isr+0x38>)
  4048f2:	4798      	blx	r3
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
		_usb_d_dev_handle_stall(ept);
	}
}
  4048f4:	e007      	b.n	404906 <_usb_d_dev_trans_setup_isr+0x2e>
	} else if (flags & USBHS_DEVEPTISR_STALLEDI) {
  4048f6:	78fb      	ldrb	r3, [r7, #3]
  4048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4048fc:	2b00      	cmp	r3, #0
  4048fe:	d002      	beq.n	404906 <_usb_d_dev_trans_setup_isr+0x2e>
		_usb_d_dev_handle_stall(ept);
  404900:	6878      	ldr	r0, [r7, #4]
  404902:	4b04      	ldr	r3, [pc, #16]	; (404914 <_usb_d_dev_trans_setup_isr+0x3c>)
  404904:	4798      	blx	r3
}
  404906:	bf00      	nop
  404908:	3708      	adds	r7, #8
  40490a:	46bd      	mov	sp, r7
  40490c:	bd80      	pop	{r7, pc}
  40490e:	bf00      	nop
  404910:	00404795 	.word	0x00404795
  404914:	00404851 	.word	0x00404851

00404918 <_usb_d_dev_trans_in_isr>:
 * \brief Analyze flags for IN transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_in_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  404918:	b580      	push	{r7, lr}
  40491a:	b082      	sub	sp, #8
  40491c:	af00      	add	r7, sp, #0
  40491e:	6078      	str	r0, [r7, #4]
  404920:	460b      	mov	r3, r1
  404922:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check IN flags
	 * If control endpoint, SETUP & OUT is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_TXINI) {
  404924:	78fb      	ldrb	r3, [r7, #3]
  404926:	f003 0301 	and.w	r3, r3, #1
  40492a:	2b00      	cmp	r3, #0
  40492c:	d003      	beq.n	404936 <_usb_d_dev_trans_in_isr+0x1e>
		_usb_d_dev_in_next(ept);
  40492e:	6878      	ldr	r0, [r7, #4]
  404930:	4b0a      	ldr	r3, [pc, #40]	; (40495c <_usb_d_dev_trans_in_isr+0x44>)
  404932:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  404934:	e00e      	b.n	404954 <_usb_d_dev_trans_in_isr+0x3c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  404936:	687b      	ldr	r3, [r7, #4]
  404938:	7cdb      	ldrb	r3, [r3, #19]
  40493a:	f003 0307 	and.w	r3, r3, #7
  40493e:	b2db      	uxtb	r3, r3
  404940:	2b01      	cmp	r3, #1
  404942:	d107      	bne.n	404954 <_usb_d_dev_trans_in_isr+0x3c>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  404944:	78fb      	ldrb	r3, [r7, #3]
  404946:	f003 0304 	and.w	r3, r3, #4
  40494a:	2b00      	cmp	r3, #0
  40494c:	d002      	beq.n	404954 <_usb_d_dev_trans_in_isr+0x3c>
			_usb_d_dev_handle_setup(ept);
  40494e:	6878      	ldr	r0, [r7, #4]
  404950:	4b03      	ldr	r3, [pc, #12]	; (404960 <_usb_d_dev_trans_in_isr+0x48>)
  404952:	4798      	blx	r3
}
  404954:	bf00      	nop
  404956:	3708      	adds	r7, #8
  404958:	46bd      	mov	sp, r7
  40495a:	bd80      	pop	{r7, pc}
  40495c:	004042d1 	.word	0x004042d1
  404960:	00404795 	.word	0x00404795

00404964 <_usb_d_dev_trans_out_isr>:
 * \brief Analyze flags for OUT transactions
 * \param[in] ept Pointer to endpoint information.
 * \param[in] flags Endpoint interrupt flags.
 */
static inline void _usb_d_dev_trans_out_isr(struct _usb_d_dev_ep *ept, const uint8_t flags)
{
  404964:	b580      	push	{r7, lr}
  404966:	b082      	sub	sp, #8
  404968:	af00      	add	r7, sp, #0
  40496a:	6078      	str	r0, [r7, #4]
  40496c:	460b      	mov	r3, r1
  40496e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Check OUT flags.
	 * If control endpoint, SETUP & IN NAK is checked to see if abort
	 */
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  404970:	78fb      	ldrb	r3, [r7, #3]
  404972:	f003 0320 	and.w	r3, r3, #32
  404976:	2b00      	cmp	r3, #0
  404978:	d003      	beq.n	404982 <_usb_d_dev_trans_out_isr+0x1e>
		_usb_d_dev_handle_overflow(ept);
  40497a:	6878      	ldr	r0, [r7, #4]
  40497c:	4b0f      	ldr	r3, [pc, #60]	; (4049bc <_usb_d_dev_trans_out_isr+0x58>)
  40497e:	4798      	blx	r3
		 */
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
			_usb_d_dev_handle_setup(ept);
		}
	}
}
  404980:	e017      	b.n	4049b2 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  404982:	78fb      	ldrb	r3, [r7, #3]
  404984:	f003 0302 	and.w	r3, r3, #2
  404988:	2b00      	cmp	r3, #0
  40498a:	d003      	beq.n	404994 <_usb_d_dev_trans_out_isr+0x30>
		_usb_d_dev_out_next(ept);
  40498c:	6878      	ldr	r0, [r7, #4]
  40498e:	4b0c      	ldr	r3, [pc, #48]	; (4049c0 <_usb_d_dev_trans_out_isr+0x5c>)
  404990:	4798      	blx	r3
}
  404992:	e00e      	b.n	4049b2 <_usb_d_dev_trans_out_isr+0x4e>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  404994:	687b      	ldr	r3, [r7, #4]
  404996:	7cdb      	ldrb	r3, [r3, #19]
  404998:	f003 0307 	and.w	r3, r3, #7
  40499c:	b2db      	uxtb	r3, r3
  40499e:	2b01      	cmp	r3, #1
  4049a0:	d107      	bne.n	4049b2 <_usb_d_dev_trans_out_isr+0x4e>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  4049a2:	78fb      	ldrb	r3, [r7, #3]
  4049a4:	f003 0304 	and.w	r3, r3, #4
  4049a8:	2b00      	cmp	r3, #0
  4049aa:	d002      	beq.n	4049b2 <_usb_d_dev_trans_out_isr+0x4e>
			_usb_d_dev_handle_setup(ept);
  4049ac:	6878      	ldr	r0, [r7, #4]
  4049ae:	4b05      	ldr	r3, [pc, #20]	; (4049c4 <_usb_d_dev_trans_out_isr+0x60>)
  4049b0:	4798      	blx	r3
}
  4049b2:	bf00      	nop
  4049b4:	3708      	adds	r7, #8
  4049b6:	46bd      	mov	sp, r7
  4049b8:	bd80      	pop	{r7, pc}
  4049ba:	bf00      	nop
  4049bc:	00404885 	.word	0x00404885
  4049c0:	00404495 	.word	0x00404495
  4049c4:	00404795 	.word	0x00404795

004049c8 <_usb_d_dev_handle_eps>:
 * \brief Handles the endpoint interrupts.
 * \param[in] epint Endpoint interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_eps(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  4049c8:	b580      	push	{r7, lr}
  4049ca:	b084      	sub	sp, #16
  4049cc:	af00      	add	r7, sp, #0
  4049ce:	6078      	str	r0, [r7, #4]
  4049d0:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  4049d2:	4b28      	ldr	r3, [pc, #160]	; (404a74 <_usb_d_dev_handle_eps+0xac>)
  4049d4:	60fb      	str	r3, [r7, #12]

	uint8_t flags, mask;
	uint8_t epn = USB_EP_GET_N(ept->ep);
  4049d6:	683b      	ldr	r3, [r7, #0]
  4049d8:	7c9b      	ldrb	r3, [r3, #18]
  4049da:	f003 030f 	and.w	r3, r3, #15
  4049de:	72fb      	strb	r3, [r7, #11]

	if (!(epint & (1u << epn))) {
  4049e0:	7afb      	ldrb	r3, [r7, #11]
  4049e2:	2201      	movs	r2, #1
  4049e4:	409a      	lsls	r2, r3
  4049e6:	687b      	ldr	r3, [r7, #4]
  4049e8:	4013      	ands	r3, r2
  4049ea:	2b00      	cmp	r3, #0
  4049ec:	d03d      	beq.n	404a6a <_usb_d_dev_handle_eps+0xa2>
		return;
	}

	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  4049ee:	7afb      	ldrb	r3, [r7, #11]
  4049f0:	4619      	mov	r1, r3
  4049f2:	68f8      	ldr	r0, [r7, #12]
  4049f4:	4b20      	ldr	r3, [pc, #128]	; (404a78 <_usb_d_dev_handle_eps+0xb0>)
  4049f6:	4798      	blx	r3
  4049f8:	4603      	mov	r3, r0
  4049fa:	72bb      	strb	r3, [r7, #10]
	mask  = hri_usbhs_read_DEVEPTIMR_reg(hw, epn);
  4049fc:	7afb      	ldrb	r3, [r7, #11]
  4049fe:	4619      	mov	r1, r3
  404a00:	68f8      	ldr	r0, [r7, #12]
  404a02:	4b1e      	ldr	r3, [pc, #120]	; (404a7c <_usb_d_dev_handle_eps+0xb4>)
  404a04:	4798      	blx	r3
  404a06:	4603      	mov	r3, r0
  404a08:	727b      	strb	r3, [r7, #9]
	flags &= mask;
  404a0a:	7aba      	ldrb	r2, [r7, #10]
  404a0c:	7a7b      	ldrb	r3, [r7, #9]
  404a0e:	4013      	ands	r3, r2
  404a10:	72bb      	strb	r3, [r7, #10]

	if (flags) {
  404a12:	7abb      	ldrb	r3, [r7, #10]
  404a14:	2b00      	cmp	r3, #0
  404a16:	d029      	beq.n	404a6c <_usb_d_dev_handle_eps+0xa4>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  404a18:	7abb      	ldrb	r3, [r7, #10]
  404a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404a1e:	2b00      	cmp	r3, #0
  404a20:	d003      	beq.n	404a2a <_usb_d_dev_handle_eps+0x62>
			_usb_d_dev_handle_stall(ept);
  404a22:	6838      	ldr	r0, [r7, #0]
  404a24:	4b16      	ldr	r3, [pc, #88]	; (404a80 <_usb_d_dev_handle_eps+0xb8>)
  404a26:	4798      	blx	r3
  404a28:	e020      	b.n	404a6c <_usb_d_dev_handle_eps+0xa4>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  404a2a:	683b      	ldr	r3, [r7, #0]
  404a2c:	7cdb      	ldrb	r3, [r3, #19]
  404a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404a32:	b2db      	uxtb	r3, r3
  404a34:	2b00      	cmp	r3, #0
  404a36:	d105      	bne.n	404a44 <_usb_d_dev_handle_eps+0x7c>
			_usb_d_dev_trans_setup_isr(ept, flags);
  404a38:	7abb      	ldrb	r3, [r7, #10]
  404a3a:	4619      	mov	r1, r3
  404a3c:	6838      	ldr	r0, [r7, #0]
  404a3e:	4b11      	ldr	r3, [pc, #68]	; (404a84 <_usb_d_dev_handle_eps+0xbc>)
  404a40:	4798      	blx	r3
  404a42:	e013      	b.n	404a6c <_usb_d_dev_handle_eps+0xa4>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  404a44:	683b      	ldr	r3, [r7, #0]
  404a46:	7cdb      	ldrb	r3, [r3, #19]
  404a48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404a4c:	b2db      	uxtb	r3, r3
  404a4e:	2b00      	cmp	r3, #0
  404a50:	d005      	beq.n	404a5e <_usb_d_dev_handle_eps+0x96>
			_usb_d_dev_trans_in_isr(ept, flags);
  404a52:	7abb      	ldrb	r3, [r7, #10]
  404a54:	4619      	mov	r1, r3
  404a56:	6838      	ldr	r0, [r7, #0]
  404a58:	4b0b      	ldr	r3, [pc, #44]	; (404a88 <_usb_d_dev_handle_eps+0xc0>)
  404a5a:	4798      	blx	r3
  404a5c:	e006      	b.n	404a6c <_usb_d_dev_handle_eps+0xa4>
		} else {
			_usb_d_dev_trans_out_isr(ept, flags);
  404a5e:	7abb      	ldrb	r3, [r7, #10]
  404a60:	4619      	mov	r1, r3
  404a62:	6838      	ldr	r0, [r7, #0]
  404a64:	4b09      	ldr	r3, [pc, #36]	; (404a8c <_usb_d_dev_handle_eps+0xc4>)
  404a66:	4798      	blx	r3
  404a68:	e000      	b.n	404a6c <_usb_d_dev_handle_eps+0xa4>
		return;
  404a6a:	bf00      	nop
		}
	}
}
  404a6c:	3710      	adds	r7, #16
  404a6e:	46bd      	mov	sp, r7
  404a70:	bd80      	pop	{r7, pc}
  404a72:	bf00      	nop
  404a74:	40038000 	.word	0x40038000
  404a78:	00403a37 	.word	0x00403a37
  404a7c:	00403c97 	.word	0x00403c97
  404a80:	00404851 	.word	0x00404851
  404a84:	004048d9 	.word	0x004048d9
  404a88:	00404919 	.word	0x00404919
  404a8c:	00404965 	.word	0x00404965

00404a90 <_usb_d_dev_handle_dma>:
 * \brief Handles the endpoint DMA interrupts.
 * \param[in] epint Endpoint DMA interrupt summary (by bits).
 * \param[in] ept Pointer to endpoint information.
 */
static inline void _usb_d_dev_handle_dma(uint32_t epint, struct _usb_d_dev_ep *ept)
{
  404a90:	b580      	push	{r7, lr}
  404a92:	b086      	sub	sp, #24
  404a94:	af00      	add	r7, sp, #0
  404a96:	6078      	str	r0, [r7, #4]
  404a98:	6039      	str	r1, [r7, #0]
	Usbhs *hw = USBHS;
  404a9a:	4b21      	ldr	r3, [pc, #132]	; (404b20 <_usb_d_dev_handle_dma+0x90>)
  404a9c:	617b      	str	r3, [r7, #20]

	uint8_t  epn = USB_EP_GET_N(ept->ep);
  404a9e:	683b      	ldr	r3, [r7, #0]
  404aa0:	7c9b      	ldrb	r3, [r3, #18]
  404aa2:	f003 030f 	and.w	r3, r3, #15
  404aa6:	74fb      	strb	r3, [r7, #19]
	uint32_t trans_next;

	if (!(epint & (1u << (epn - 1)))) {
  404aa8:	7cfb      	ldrb	r3, [r7, #19]
  404aaa:	3b01      	subs	r3, #1
  404aac:	2201      	movs	r2, #1
  404aae:	409a      	lsls	r2, r3
  404ab0:	687b      	ldr	r3, [r7, #4]
  404ab2:	4013      	ands	r3, r2
  404ab4:	2b00      	cmp	r3, #0
  404ab6:	d02c      	beq.n	404b12 <_usb_d_dev_handle_dma+0x82>
		return;
	}

	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  404ab8:	7cfb      	ldrb	r3, [r7, #19]
  404aba:	3b01      	subs	r3, #1
  404abc:	b2db      	uxtb	r3, r3
  404abe:	4619      	mov	r1, r3
  404ac0:	6978      	ldr	r0, [r7, #20]
  404ac2:	4b18      	ldr	r3, [pc, #96]	; (404b24 <_usb_d_dev_handle_dma+0x94>)
  404ac4:	4798      	blx	r3
  404ac6:	4603      	mov	r3, r0
  404ac8:	2b00      	cmp	r3, #0
  404aca:	d124      	bne.n	404b16 <_usb_d_dev_handle_dma+0x86>
		/* Ignore EOT_STA interrupt */
		return;
	}
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  404acc:	7cfb      	ldrb	r3, [r7, #19]
  404ace:	3b01      	subs	r3, #1
  404ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  404ad4:	fa02 f303 	lsl.w	r3, r2, r3
  404ad8:	4619      	mov	r1, r3
  404ada:	6978      	ldr	r0, [r7, #20]
  404adc:	4b12      	ldr	r3, [pc, #72]	; (404b28 <_usb_d_dev_handle_dma+0x98>)
  404ade:	4798      	blx	r3
	trans_next = hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(hw, (epn - 1));
  404ae0:	7cfb      	ldrb	r3, [r7, #19]
  404ae2:	3b01      	subs	r3, #1
  404ae4:	b2db      	uxtb	r3, r3
  404ae6:	4619      	mov	r1, r3
  404ae8:	6978      	ldr	r0, [r7, #20]
  404aea:	4b10      	ldr	r3, [pc, #64]	; (404b2c <_usb_d_dev_handle_dma+0x9c>)
  404aec:	4798      	blx	r3
  404aee:	60f8      	str	r0, [r7, #12]
	if (trans_next) {
  404af0:	68fb      	ldr	r3, [r7, #12]
  404af2:	2b00      	cmp	r3, #0
  404af4:	d009      	beq.n	404b0a <_usb_d_dev_handle_dma+0x7a>
		/* Transfer no complete (short packet or ZLP) then: Update number of
		   data transfered */
		ept->trans_count -= trans_next;
  404af6:	683b      	ldr	r3, [r7, #0]
  404af8:	689a      	ldr	r2, [r3, #8]
  404afa:	68fb      	ldr	r3, [r7, #12]
  404afc:	1ad2      	subs	r2, r2, r3
  404afe:	683b      	ldr	r3, [r7, #0]
  404b00:	609a      	str	r2, [r3, #8]
		/* Set transfer complete to stop the transfer */
		ept->trans_size = ept->trans_count;
  404b02:	683b      	ldr	r3, [r7, #0]
  404b04:	689a      	ldr	r2, [r3, #8]
  404b06:	683b      	ldr	r3, [r7, #0]
  404b08:	605a      	str	r2, [r3, #4]
	}
	_usb_d_dev_dma_next(ept);
  404b0a:	6838      	ldr	r0, [r7, #0]
  404b0c:	4b08      	ldr	r3, [pc, #32]	; (404b30 <_usb_d_dev_handle_dma+0xa0>)
  404b0e:	4798      	blx	r3
  404b10:	e002      	b.n	404b18 <_usb_d_dev_handle_dma+0x88>
		return;
  404b12:	bf00      	nop
  404b14:	e000      	b.n	404b18 <_usb_d_dev_handle_dma+0x88>
		return;
  404b16:	bf00      	nop
}
  404b18:	3718      	adds	r7, #24
  404b1a:	46bd      	mov	sp, r7
  404b1c:	bd80      	pop	{r7, pc}
  404b1e:	bf00      	nop
  404b20:	40038000 	.word	0x40038000
  404b24:	00403d0d 	.word	0x00403d0d
  404b28:	00403955 	.word	0x00403955
  404b2c:	00403d77 	.word	0x00403d77
  404b30:	004045dd 	.word	0x004045dd

00404b34 <USBHS_Handler>:

/**
 * \brief USB device interrupt handler
 */
void USBHS_Handler(void)
{
  404b34:	b590      	push	{r4, r7, lr}
  404b36:	b087      	sub	sp, #28
  404b38:	af00      	add	r7, sp, #0
	Usbhs *  hw = USBHS;
  404b3a:	4b29      	ldr	r3, [pc, #164]	; (404be0 <USBHS_Handler+0xac>)
  404b3c:	613b      	str	r3, [r7, #16]
	uint8_t  i;
	uint32_t flags, ep_int, dma_int;

	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  404b3e:	6938      	ldr	r0, [r7, #16]
  404b40:	4b28      	ldr	r3, [pc, #160]	; (404be4 <USBHS_Handler+0xb0>)
  404b42:	4798      	blx	r3
  404b44:	4604      	mov	r4, r0
  404b46:	6938      	ldr	r0, [r7, #16]
  404b48:	4b27      	ldr	r3, [pc, #156]	; (404be8 <USBHS_Handler+0xb4>)
  404b4a:	4798      	blx	r3
  404b4c:	4603      	mov	r3, r0
  404b4e:	4023      	ands	r3, r4
  404b50:	60fb      	str	r3, [r7, #12]

	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  404b52:	68fb      	ldr	r3, [r7, #12]
  404b54:	0b1b      	lsrs	r3, r3, #12
  404b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
  404b5a:	60bb      	str	r3, [r7, #8]
#if (CONF_USB_D_DMA_ENABLE == 1)
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  404b5c:	68fb      	ldr	r3, [r7, #12]
  404b5e:	0e5b      	lsrs	r3, r3, #25
  404b60:	607b      	str	r3, [r7, #4]
#endif

#if (CONF_USB_D_DMA_ENABLE == 1)
	if ((ep_int == 0) && (dma_int == 0)) {
  404b62:	68bb      	ldr	r3, [r7, #8]
  404b64:	2b00      	cmp	r3, #0
  404b66:	d107      	bne.n	404b78 <USBHS_Handler+0x44>
  404b68:	687b      	ldr	r3, [r7, #4]
  404b6a:	2b00      	cmp	r3, #0
  404b6c:	d104      	bne.n	404b78 <USBHS_Handler+0x44>
#else
	if (ep_int == 0) {
#endif
		if (_usb_d_dev_handle_nep()) {
  404b6e:	4b1f      	ldr	r3, [pc, #124]	; (404bec <USBHS_Handler+0xb8>)
  404b70:	4798      	blx	r3
  404b72:	4603      	mov	r3, r0
  404b74:	2b00      	cmp	r3, #0
  404b76:	d12e      	bne.n	404bd6 <USBHS_Handler+0xa2>
			return;
		}
	}

	/* Handle endpoints */
	for (i = 0; i < USB_D_N_EP; i++) {
  404b78:	2300      	movs	r3, #0
  404b7a:	75fb      	strb	r3, [r7, #23]
  404b7c:	e027      	b.n	404bce <USBHS_Handler+0x9a>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  404b7e:	7dfa      	ldrb	r2, [r7, #23]
  404b80:	4613      	mov	r3, r2
  404b82:	009b      	lsls	r3, r3, #2
  404b84:	4413      	add	r3, r2
  404b86:	009b      	lsls	r3, r3, #2
  404b88:	3310      	adds	r3, #16
  404b8a:	4a19      	ldr	r2, [pc, #100]	; (404bf0 <USBHS_Handler+0xbc>)
  404b8c:	4413      	add	r3, r2
  404b8e:	3304      	adds	r3, #4
  404b90:	603b      	str	r3, [r7, #0]

		if (ept->ep == 0xFF) {
  404b92:	683b      	ldr	r3, [r7, #0]
  404b94:	7c9b      	ldrb	r3, [r3, #18]
  404b96:	2bff      	cmp	r3, #255	; 0xff
  404b98:	d015      	beq.n	404bc6 <USBHS_Handler+0x92>
			continue;
		}
		if (ep_int) {
  404b9a:	68bb      	ldr	r3, [r7, #8]
  404b9c:	2b00      	cmp	r3, #0
  404b9e:	d004      	beq.n	404baa <USBHS_Handler+0x76>
			_usb_d_dev_handle_eps(ep_int, ept);
  404ba0:	6839      	ldr	r1, [r7, #0]
  404ba2:	68b8      	ldr	r0, [r7, #8]
  404ba4:	4b13      	ldr	r3, [pc, #76]	; (404bf4 <USBHS_Handler+0xc0>)
  404ba6:	4798      	blx	r3
  404ba8:	e00e      	b.n	404bc8 <USBHS_Handler+0x94>
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  404baa:	687b      	ldr	r3, [r7, #4]
  404bac:	2b00      	cmp	r3, #0
  404bae:	d00b      	beq.n	404bc8 <USBHS_Handler+0x94>
  404bb0:	7dfb      	ldrb	r3, [r7, #23]
  404bb2:	2b00      	cmp	r3, #0
  404bb4:	d008      	beq.n	404bc8 <USBHS_Handler+0x94>
  404bb6:	7dfb      	ldrb	r3, [r7, #23]
  404bb8:	2b06      	cmp	r3, #6
  404bba:	d805      	bhi.n	404bc8 <USBHS_Handler+0x94>
			_usb_d_dev_handle_dma(dma_int, ept);
  404bbc:	6839      	ldr	r1, [r7, #0]
  404bbe:	6878      	ldr	r0, [r7, #4]
  404bc0:	4b0d      	ldr	r3, [pc, #52]	; (404bf8 <USBHS_Handler+0xc4>)
  404bc2:	4798      	blx	r3
  404bc4:	e000      	b.n	404bc8 <USBHS_Handler+0x94>
			continue;
  404bc6:	bf00      	nop
	for (i = 0; i < USB_D_N_EP; i++) {
  404bc8:	7dfb      	ldrb	r3, [r7, #23]
  404bca:	3301      	adds	r3, #1
  404bcc:	75fb      	strb	r3, [r7, #23]
  404bce:	7dfb      	ldrb	r3, [r7, #23]
  404bd0:	2b03      	cmp	r3, #3
  404bd2:	d9d4      	bls.n	404b7e <USBHS_Handler+0x4a>
  404bd4:	e000      	b.n	404bd8 <USBHS_Handler+0xa4>
			return;
  404bd6:	bf00      	nop
		}
#endif
	}
}
  404bd8:	371c      	adds	r7, #28
  404bda:	46bd      	mov	sp, r7
  404bdc:	bd90      	pop	{r4, r7, pc}
  404bde:	bf00      	nop
  404be0:	40038000 	.word	0x40038000
  404be4:	00403c7f 	.word	0x00403c7f
  404be8:	0040393d 	.word	0x0040393d
  404bec:	00404229 	.word	0x00404229
  404bf0:	204000dc 	.word	0x204000dc
  404bf4:	004049c9 	.word	0x004049c9
  404bf8:	00404a91 	.word	0x00404a91

00404bfc <_usb_d_dev_reset_epts>:

/**
 * \brief Reset all endpoint software instances
 */
static void _usb_d_dev_reset_epts(void)
{
  404bfc:	b580      	push	{r7, lr}
  404bfe:	b082      	sub	sp, #8
  404c00:	af00      	add	r7, sp, #0
	uint8_t i;

	/* Reset USB address to 0 */
	hri_usbhs_clear_DEVCTRL_ADDEN_bit(USBHS);
  404c02:	481c      	ldr	r0, [pc, #112]	; (404c74 <_usb_d_dev_reset_epts+0x78>)
  404c04:	4b1c      	ldr	r3, [pc, #112]	; (404c78 <_usb_d_dev_reset_epts+0x7c>)
  404c06:	4798      	blx	r3
	hri_usbhs_write_DEVCTRL_UADD_bf(USBHS, 0);
  404c08:	2100      	movs	r1, #0
  404c0a:	481a      	ldr	r0, [pc, #104]	; (404c74 <_usb_d_dev_reset_epts+0x78>)
  404c0c:	4b1b      	ldr	r3, [pc, #108]	; (404c7c <_usb_d_dev_reset_epts+0x80>)
  404c0e:	4798      	blx	r3
	hri_usbhs_set_DEVCTRL_ADDEN_bit(USBHS);
  404c10:	4818      	ldr	r0, [pc, #96]	; (404c74 <_usb_d_dev_reset_epts+0x78>)
  404c12:	4b1b      	ldr	r3, [pc, #108]	; (404c80 <_usb_d_dev_reset_epts+0x84>)
  404c14:	4798      	blx	r3

	for (i = 0; i < USB_D_N_EP; i++) {
  404c16:	2300      	movs	r3, #0
  404c18:	71fb      	strb	r3, [r7, #7]
  404c1a:	e023      	b.n	404c64 <_usb_d_dev_reset_epts+0x68>
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  404c1c:	79fa      	ldrb	r2, [r7, #7]
  404c1e:	4613      	mov	r3, r2
  404c20:	009b      	lsls	r3, r3, #2
  404c22:	4413      	add	r3, r2
  404c24:	009b      	lsls	r3, r3, #2
  404c26:	3310      	adds	r3, #16
  404c28:	4a16      	ldr	r2, [pc, #88]	; (404c84 <_usb_d_dev_reset_epts+0x88>)
  404c2a:	4413      	add	r3, r2
  404c2c:	3304      	adds	r3, #4
  404c2e:	2103      	movs	r1, #3
  404c30:	4618      	mov	r0, r3
  404c32:	4b15      	ldr	r3, [pc, #84]	; (404c88 <_usb_d_dev_reset_epts+0x8c>)
  404c34:	4798      	blx	r3
		dev_inst.ep[i].ep       = 0xFF;
  404c36:	79fa      	ldrb	r2, [r7, #7]
  404c38:	4912      	ldr	r1, [pc, #72]	; (404c84 <_usb_d_dev_reset_epts+0x88>)
  404c3a:	4613      	mov	r3, r2
  404c3c:	009b      	lsls	r3, r3, #2
  404c3e:	4413      	add	r3, r2
  404c40:	009b      	lsls	r3, r3, #2
  404c42:	440b      	add	r3, r1
  404c44:	3326      	adds	r3, #38	; 0x26
  404c46:	22ff      	movs	r2, #255	; 0xff
  404c48:	701a      	strb	r2, [r3, #0]
		dev_inst.ep[i].flags.u8 = 0;
  404c4a:	79fa      	ldrb	r2, [r7, #7]
  404c4c:	490d      	ldr	r1, [pc, #52]	; (404c84 <_usb_d_dev_reset_epts+0x88>)
  404c4e:	4613      	mov	r3, r2
  404c50:	009b      	lsls	r3, r3, #2
  404c52:	4413      	add	r3, r2
  404c54:	009b      	lsls	r3, r3, #2
  404c56:	440b      	add	r3, r1
  404c58:	3327      	adds	r3, #39	; 0x27
  404c5a:	2200      	movs	r2, #0
  404c5c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_D_N_EP; i++) {
  404c5e:	79fb      	ldrb	r3, [r7, #7]
  404c60:	3301      	adds	r3, #1
  404c62:	71fb      	strb	r3, [r7, #7]
  404c64:	79fb      	ldrb	r3, [r7, #7]
  404c66:	2b03      	cmp	r3, #3
  404c68:	d9d8      	bls.n	404c1c <_usb_d_dev_reset_epts+0x20>
	}
}
  404c6a:	bf00      	nop
  404c6c:	3708      	adds	r7, #8
  404c6e:	46bd      	mov	sp, r7
  404c70:	bd80      	pop	{r7, pc}
  404c72:	bf00      	nop
  404c74:	40038000 	.word	0x40038000
  404c78:	00403b2d 	.word	0x00403b2d
  404c7c:	00403b4d 	.word	0x00403b4d
  404c80:	00403b0d 	.word	0x00403b0d
  404c84:	204000dc 	.word	0x204000dc
  404c88:	00404ed9 	.word	0x00404ed9

00404c8c <_usb_d_dev_init>:

int32_t _usb_d_dev_init(void)
{
  404c8c:	b590      	push	{r4, r7, lr}
  404c8e:	b089      	sub	sp, #36	; 0x24
  404c90:	af00      	add	r7, sp, #0
	Usbhs *        hw = USBHS;
  404c92:	4b1d      	ldr	r3, [pc, #116]	; (404d08 <_usb_d_dev_init+0x7c>)
  404c94:	61fb      	str	r3, [r7, #28]
	uint32_t       data;
	uint8_t        speed      = CONF_USB_D_SPEED;
  404c96:	2302      	movs	r3, #2
  404c98:	76fb      	strb	r3, [r7, #27]
	const uint32_t spdconf[4] = {
  404c9a:	4b1c      	ldr	r3, [pc, #112]	; (404d0c <_usb_d_dev_init+0x80>)
  404c9c:	1d3c      	adds	r4, r7, #4
  404c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  404ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0,                                             /* HS */
		0                                              /* Reserved */
	};
#endif

	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  404ca4:	69f8      	ldr	r0, [r7, #28]
  404ca6:	4b1a      	ldr	r3, [pc, #104]	; (404d10 <_usb_d_dev_init+0x84>)
  404ca8:	4798      	blx	r3
  404caa:	4603      	mov	r3, r0
  404cac:	2b00      	cmp	r3, #0
  404cae:	d002      	beq.n	404cb6 <_usb_d_dev_init+0x2a>
		return ERR_DENIED;
  404cb0:	f06f 0310 	mvn.w	r3, #16
  404cb4:	e024      	b.n	404d00 <_usb_d_dev_init+0x74>
	}

	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  404cb6:	4b17      	ldr	r3, [pc, #92]	; (404d14 <_usb_d_dev_init+0x88>)
  404cb8:	4a17      	ldr	r2, [pc, #92]	; (404d18 <_usb_d_dev_init+0x8c>)
  404cba:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  404cbc:	4b15      	ldr	r3, [pc, #84]	; (404d14 <_usb_d_dev_init+0x88>)
  404cbe:	4a16      	ldr	r2, [pc, #88]	; (404d18 <_usb_d_dev_init+0x8c>)
  404cc0:	605a      	str	r2, [r3, #4]

	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  404cc2:	4b14      	ldr	r3, [pc, #80]	; (404d14 <_usb_d_dev_init+0x88>)
  404cc4:	4a14      	ldr	r2, [pc, #80]	; (404d18 <_usb_d_dev_init+0x8c>)
  404cc6:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  404cc8:	4b12      	ldr	r3, [pc, #72]	; (404d14 <_usb_d_dev_init+0x88>)
  404cca:	4a14      	ldr	r2, [pc, #80]	; (404d1c <_usb_d_dev_init+0x90>)
  404ccc:	60da      	str	r2, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  404cce:	4b11      	ldr	r3, [pc, #68]	; (404d14 <_usb_d_dev_init+0x88>)
  404cd0:	4a11      	ldr	r2, [pc, #68]	; (404d18 <_usb_d_dev_init+0x8c>)
  404cd2:	611a      	str	r2, [r3, #16]

	_usb_d_dev_reset_epts();
  404cd4:	4b12      	ldr	r3, [pc, #72]	; (404d20 <_usb_d_dev_init+0x94>)
  404cd6:	4798      	blx	r3
	hri_usbhs_write_CTRL_reg(hw, USBHS_CTRL_UIMOD);
  404cd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  404cdc:	69f8      	ldr	r0, [r7, #28]
  404cde:	4b11      	ldr	r3, [pc, #68]	; (404d24 <_usb_d_dev_init+0x98>)
  404ce0:	4798      	blx	r3

	data = spdconf[speed] | USBHS_DEVCTRL_DETACH;
  404ce2:	7efb      	ldrb	r3, [r7, #27]
  404ce4:	009b      	lsls	r3, r3, #2
  404ce6:	f107 0220 	add.w	r2, r7, #32
  404cea:	4413      	add	r3, r2
  404cec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  404cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404cf4:	617b      	str	r3, [r7, #20]
	hri_usbhs_write_DEVCTRL_reg(hw, data);
  404cf6:	6979      	ldr	r1, [r7, #20]
  404cf8:	69f8      	ldr	r0, [r7, #28]
  404cfa:	4b0b      	ldr	r3, [pc, #44]	; (404d28 <_usb_d_dev_init+0x9c>)
  404cfc:	4798      	blx	r3

	return ERR_NONE;
  404cfe:	2300      	movs	r3, #0
}
  404d00:	4618      	mov	r0, r3
  404d02:	3724      	adds	r7, #36	; 0x24
  404d04:	46bd      	mov	sp, r7
  404d06:	bd90      	pop	{r4, r7, pc}
  404d08:	40038000 	.word	0x40038000
  404d0c:	00405478 	.word	0x00405478
  404d10:	00403c2f 	.word	0x00403c2f
  404d14:	204000dc 	.word	0x204000dc
  404d18:	00403da1 	.word	0x00403da1
  404d1c:	00403db7 	.word	0x00403db7
  404d20:	00404bfd 	.word	0x00404bfd
  404d24:	00403c61 	.word	0x00403c61
  404d28:	00403b83 	.word	0x00403b83

00404d2c <_usb_d_dev_ep_stall_get>:
 * \return Stall status.
 * \retval \c true Endpoint is stalled.
 * \retval \c false Endpoint is not stalled.
 */
static inline int32_t _usb_d_dev_ep_stall_get(struct _usb_d_dev_ep *ept)
{
  404d2c:	b480      	push	{r7}
  404d2e:	b083      	sub	sp, #12
  404d30:	af00      	add	r7, sp, #0
  404d32:	6078      	str	r0, [r7, #4]
	return ept->flags.bits.is_stalled;
  404d34:	687b      	ldr	r3, [r7, #4]
  404d36:	7cdb      	ldrb	r3, [r3, #19]
  404d38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  404d3c:	b2db      	uxtb	r3, r3
}
  404d3e:	4618      	mov	r0, r3
  404d40:	370c      	adds	r7, #12
  404d42:	46bd      	mov	sp, r7
  404d44:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d48:	4770      	bx	lr
	...

00404d4c <_usb_d_dev_ep_stall_set>:
 * \brief Set endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_set(struct _usb_d_dev_ep *ept)
{
  404d4c:	b580      	push	{r7, lr}
  404d4e:	b084      	sub	sp, #16
  404d50:	af00      	add	r7, sp, #0
  404d52:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  404d54:	687b      	ldr	r3, [r7, #4]
  404d56:	7c9b      	ldrb	r3, [r3, #18]
  404d58:	f003 030f 	and.w	r3, r3, #15
  404d5c:	73fb      	strb	r3, [r7, #15]
	if (epn > CONF_USB_D_MAX_EP_N) {
  404d5e:	7bfb      	ldrb	r3, [r7, #15]
  404d60:	2b03      	cmp	r3, #3
  404d62:	d902      	bls.n	404d6a <_usb_d_dev_ep_stall_set+0x1e>
		return ERR_NOT_FOUND;
  404d64:	f06f 0309 	mvn.w	r3, #9
  404d68:	e016      	b.n	404d98 <_usb_d_dev_ep_stall_set+0x4c>
	}
	if (!ept->flags.bits.is_stalled) {
  404d6a:	687b      	ldr	r3, [r7, #4]
  404d6c:	7cdb      	ldrb	r3, [r3, #19]
  404d6e:	f003 0308 	and.w	r3, r3, #8
  404d72:	b2db      	uxtb	r3, r3
  404d74:	2b00      	cmp	r3, #0
  404d76:	d10e      	bne.n	404d96 <_usb_d_dev_ep_stall_set+0x4a>
		ept->flags.bits.is_stalled = 1;
  404d78:	687a      	ldr	r2, [r7, #4]
  404d7a:	7cd3      	ldrb	r3, [r2, #19]
  404d7c:	f043 0308 	orr.w	r3, r3, #8
  404d80:	74d3      	strb	r3, [r2, #19]
		_usbd_ep_int_en(epn, USBHS_DEVEPTIMR_STALLEDE);
  404d82:	7bfb      	ldrb	r3, [r7, #15]
  404d84:	2140      	movs	r1, #64	; 0x40
  404d86:	4618      	mov	r0, r3
  404d88:	4b05      	ldr	r3, [pc, #20]	; (404da0 <_usb_d_dev_ep_stall_set+0x54>)
  404d8a:	4798      	blx	r3
		_usbd_ep_set_stall(epn, true);
  404d8c:	7bfb      	ldrb	r3, [r7, #15]
  404d8e:	2101      	movs	r1, #1
  404d90:	4618      	mov	r0, r3
  404d92:	4b04      	ldr	r3, [pc, #16]	; (404da4 <_usb_d_dev_ep_stall_set+0x58>)
  404d94:	4798      	blx	r3
	}

	/* In stall interrupt abort the transfer. */
	return ERR_NONE;
  404d96:	2300      	movs	r3, #0
}
  404d98:	4618      	mov	r0, r3
  404d9a:	3710      	adds	r7, #16
  404d9c:	46bd      	mov	sp, r7
  404d9e:	bd80      	pop	{r7, pc}
  404da0:	00403df9 	.word	0x00403df9
  404da4:	00403e91 	.word	0x00403e91

00404da8 <_usb_d_dev_ep_stall_clr>:
 * \brief Clear endpoint stall
 * \param[in, out] ept Pointer to endpoint information.
 * \return Always 0, success.
 */
static inline int32_t _usb_d_dev_ep_stall_clr(struct _usb_d_dev_ep *ept)
{
  404da8:	b580      	push	{r7, lr}
  404daa:	b084      	sub	sp, #16
  404dac:	af00      	add	r7, sp, #0
  404dae:	6078      	str	r0, [r7, #4]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  404db0:	687b      	ldr	r3, [r7, #4]
  404db2:	7c9b      	ldrb	r3, [r3, #18]
  404db4:	f003 030f 	and.w	r3, r3, #15
  404db8:	73fb      	strb	r3, [r7, #15]

	if (!ept->flags.bits.is_stalled) {
  404dba:	687b      	ldr	r3, [r7, #4]
  404dbc:	7cdb      	ldrb	r3, [r3, #19]
  404dbe:	f003 0308 	and.w	r3, r3, #8
  404dc2:	b2db      	uxtb	r3, r3
  404dc4:	2b00      	cmp	r3, #0
  404dc6:	d101      	bne.n	404dcc <_usb_d_dev_ep_stall_clr+0x24>
		return ERR_NONE;
  404dc8:	2300      	movs	r3, #0
  404dca:	e035      	b.n	404e38 <_usb_d_dev_ep_stall_clr+0x90>
	}
	_usbd_ep_set_stall(epn, false);
  404dcc:	7bfb      	ldrb	r3, [r7, #15]
  404dce:	2100      	movs	r1, #0
  404dd0:	4618      	mov	r0, r3
  404dd2:	4b1b      	ldr	r3, [pc, #108]	; (404e40 <_usb_d_dev_ep_stall_clr+0x98>)
  404dd4:	4798      	blx	r3
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_STALLEDE);
  404dd6:	7bfb      	ldrb	r3, [r7, #15]
  404dd8:	2140      	movs	r1, #64	; 0x40
  404dda:	4618      	mov	r0, r3
  404ddc:	4b19      	ldr	r3, [pc, #100]	; (404e44 <_usb_d_dev_ep_stall_clr+0x9c>)
  404dde:	4798      	blx	r3

	if (_usbd_ep_is_stall_sent(epn)) {
  404de0:	7bfb      	ldrb	r3, [r7, #15]
  404de2:	4618      	mov	r0, r3
  404de4:	4b18      	ldr	r3, [pc, #96]	; (404e48 <_usb_d_dev_ep_stall_clr+0xa0>)
  404de6:	4798      	blx	r3
  404de8:	4603      	mov	r3, r0
  404dea:	2b00      	cmp	r3, #0
  404dec:	d007      	beq.n	404dfe <_usb_d_dev_ep_stall_clr+0x56>
		_usbd_ep_ack_stall(epn);
  404dee:	7bfb      	ldrb	r3, [r7, #15]
  404df0:	4618      	mov	r0, r3
  404df2:	4b16      	ldr	r3, [pc, #88]	; (404e4c <_usb_d_dev_ep_stall_clr+0xa4>)
  404df4:	4798      	blx	r3
		_usbd_ep_reset_toggle(epn);
  404df6:	7bfb      	ldrb	r3, [r7, #15]
  404df8:	4618      	mov	r0, r3
  404dfa:	4b15      	ldr	r3, [pc, #84]	; (404e50 <_usb_d_dev_ep_stall_clr+0xa8>)
  404dfc:	4798      	blx	r3
	}

	if (_usb_d_dev_ep_is_ctrl(ept)) {
  404dfe:	687b      	ldr	r3, [r7, #4]
  404e00:	7cdb      	ldrb	r3, [r3, #19]
  404e02:	f003 0307 	and.w	r3, r3, #7
  404e06:	b2db      	uxtb	r3, r3
  404e08:	2b01      	cmp	r3, #1
  404e0a:	d10f      	bne.n	404e2c <_usb_d_dev_ep_stall_clr+0x84>
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  404e0c:	7bfb      	ldrb	r3, [r7, #15]
  404e0e:	4619      	mov	r1, r3
  404e10:	4810      	ldr	r0, [pc, #64]	; (404e54 <_usb_d_dev_ep_stall_clr+0xac>)
  404e12:	4b11      	ldr	r3, [pc, #68]	; (404e58 <_usb_d_dev_ep_stall_clr+0xb0>)
  404e14:	4798      	blx	r3
  404e16:	4603      	mov	r3, r0
  404e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404e1c:	2b00      	cmp	r3, #0
  404e1e:	d10a      	bne.n	404e36 <_usb_d_dev_ep_stall_clr+0x8e>
			ept->flags.bits.is_stalled = 0;
  404e20:	687a      	ldr	r2, [r7, #4]
  404e22:	7cd3      	ldrb	r3, [r2, #19]
  404e24:	f36f 03c3 	bfc	r3, #3, #1
  404e28:	74d3      	strb	r3, [r2, #19]
  404e2a:	e004      	b.n	404e36 <_usb_d_dev_ep_stall_clr+0x8e>
		}
	} else {
		ept->flags.bits.is_stalled = 0;
  404e2c:	687a      	ldr	r2, [r7, #4]
  404e2e:	7cd3      	ldrb	r3, [r2, #19]
  404e30:	f36f 03c3 	bfc	r3, #3, #1
  404e34:	74d3      	strb	r3, [r2, #19]
	}

	return ERR_NONE;
  404e36:	2300      	movs	r3, #0
}
  404e38:	4618      	mov	r0, r3
  404e3a:	3710      	adds	r7, #16
  404e3c:	46bd      	mov	sp, r7
  404e3e:	bd80      	pop	{r7, pc}
  404e40:	00403e91 	.word	0x00403e91
  404e44:	00403e39 	.word	0x00403e39
  404e48:	00403edd 	.word	0x00403edd
  404e4c:	00403f05 	.word	0x00403f05
  404e50:	00403fd1 	.word	0x00403fd1
  404e54:	40038000 	.word	0x40038000
  404e58:	00403a37 	.word	0x00403a37

00404e5c <_usb_d_dev_ep_stall>:

int32_t _usb_d_dev_ep_stall(const uint8_t ep, const enum usb_ep_stall_ctrl ctrl)
{
  404e5c:	b580      	push	{r7, lr}
  404e5e:	b086      	sub	sp, #24
  404e60:	af00      	add	r7, sp, #0
  404e62:	4603      	mov	r3, r0
  404e64:	460a      	mov	r2, r1
  404e66:	71fb      	strb	r3, [r7, #7]
  404e68:	4613      	mov	r3, r2
  404e6a:	71bb      	strb	r3, [r7, #6]
	uint8_t               epn = USB_EP_GET_N(ep);
  404e6c:	79fb      	ldrb	r3, [r7, #7]
  404e6e:	f003 030f 	and.w	r3, r3, #15
  404e72:	74fb      	strb	r3, [r7, #19]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  404e74:	7cfa      	ldrb	r2, [r7, #19]
  404e76:	4613      	mov	r3, r2
  404e78:	009b      	lsls	r3, r3, #2
  404e7a:	4413      	add	r3, r2
  404e7c:	009b      	lsls	r3, r3, #2
  404e7e:	3310      	adds	r3, #16
  404e80:	4a11      	ldr	r2, [pc, #68]	; (404ec8 <_usb_d_dev_ep_stall+0x6c>)
  404e82:	4413      	add	r3, r2
  404e84:	3304      	adds	r3, #4
  404e86:	60fb      	str	r3, [r7, #12]
	int32_t               rc;

	if (epn > CONF_USB_D_MAX_EP_N) {
  404e88:	7cfb      	ldrb	r3, [r7, #19]
  404e8a:	2b03      	cmp	r3, #3
  404e8c:	d902      	bls.n	404e94 <_usb_d_dev_ep_stall+0x38>
		return -USB_ERR_PARAM;
  404e8e:	f06f 0311 	mvn.w	r3, #17
  404e92:	e014      	b.n	404ebe <_usb_d_dev_ep_stall+0x62>
	}

	if (USB_EP_STALL_SET == ctrl) {
  404e94:	79bb      	ldrb	r3, [r7, #6]
  404e96:	2b01      	cmp	r3, #1
  404e98:	d104      	bne.n	404ea4 <_usb_d_dev_ep_stall+0x48>
		rc = _usb_d_dev_ep_stall_set(ept);
  404e9a:	68f8      	ldr	r0, [r7, #12]
  404e9c:	4b0b      	ldr	r3, [pc, #44]	; (404ecc <_usb_d_dev_ep_stall+0x70>)
  404e9e:	4798      	blx	r3
  404ea0:	6178      	str	r0, [r7, #20]
  404ea2:	e00b      	b.n	404ebc <_usb_d_dev_ep_stall+0x60>
	} else if (USB_EP_STALL_CLR == ctrl) {
  404ea4:	79bb      	ldrb	r3, [r7, #6]
  404ea6:	2b00      	cmp	r3, #0
  404ea8:	d104      	bne.n	404eb4 <_usb_d_dev_ep_stall+0x58>
		rc = _usb_d_dev_ep_stall_clr(ept);
  404eaa:	68f8      	ldr	r0, [r7, #12]
  404eac:	4b08      	ldr	r3, [pc, #32]	; (404ed0 <_usb_d_dev_ep_stall+0x74>)
  404eae:	4798      	blx	r3
  404eb0:	6178      	str	r0, [r7, #20]
  404eb2:	e003      	b.n	404ebc <_usb_d_dev_ep_stall+0x60>
	} else {
		rc = _usb_d_dev_ep_stall_get(ept);
  404eb4:	68f8      	ldr	r0, [r7, #12]
  404eb6:	4b07      	ldr	r3, [pc, #28]	; (404ed4 <_usb_d_dev_ep_stall+0x78>)
  404eb8:	4798      	blx	r3
  404eba:	6178      	str	r0, [r7, #20]
	}

	return rc;
  404ebc:	697b      	ldr	r3, [r7, #20]
}
  404ebe:	4618      	mov	r0, r3
  404ec0:	3718      	adds	r7, #24
  404ec2:	46bd      	mov	sp, r7
  404ec4:	bd80      	pop	{r7, pc}
  404ec6:	bf00      	nop
  404ec8:	204000dc 	.word	0x204000dc
  404ecc:	00404d4d 	.word	0x00404d4d
  404ed0:	00404da9 	.word	0x00404da9
  404ed4:	00404d2d 	.word	0x00404d2d

00404ed8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  404ed8:	b580      	push	{r7, lr}
  404eda:	b082      	sub	sp, #8
  404edc:	af00      	add	r7, sp, #0
  404ede:	6078      	str	r0, [r7, #4]
  404ee0:	6039      	str	r1, [r7, #0]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  404ee2:	687b      	ldr	r3, [r7, #4]
  404ee4:	7c9b      	ldrb	r3, [r3, #18]
  404ee6:	2bff      	cmp	r3, #255	; 0xff
  404ee8:	d014      	beq.n	404f14 <_usb_d_dev_trans_done+0x3c>
  404eea:	687b      	ldr	r3, [r7, #4]
  404eec:	7cdb      	ldrb	r3, [r3, #19]
  404eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404ef2:	b2db      	uxtb	r3, r3
  404ef4:	2b00      	cmp	r3, #0
  404ef6:	d00d      	beq.n	404f14 <_usb_d_dev_trans_done+0x3c>
		return;
	}

	ept->flags.bits.is_busy = 0;
  404ef8:	687a      	ldr	r2, [r7, #4]
  404efa:	7cd3      	ldrb	r3, [r2, #19]
  404efc:	f36f 1386 	bfc	r3, #6, #1
  404f00:	74d3      	strb	r3, [r2, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  404f02:	4b06      	ldr	r3, [pc, #24]	; (404f1c <_usb_d_dev_trans_done+0x44>)
  404f04:	691b      	ldr	r3, [r3, #16]
  404f06:	687a      	ldr	r2, [r7, #4]
  404f08:	7c90      	ldrb	r0, [r2, #18]
  404f0a:	687a      	ldr	r2, [r7, #4]
  404f0c:	6892      	ldr	r2, [r2, #8]
  404f0e:	6839      	ldr	r1, [r7, #0]
  404f10:	4798      	blx	r3
  404f12:	e000      	b.n	404f16 <_usb_d_dev_trans_done+0x3e>
		return;
  404f14:	bf00      	nop
}
  404f16:	3708      	adds	r7, #8
  404f18:	46bd      	mov	sp, r7
  404f1a:	bd80      	pop	{r7, pc}
  404f1c:	204000dc 	.word	0x204000dc

00404f20 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
  404f20:	b580      	push	{r7, lr}
  404f22:	b086      	sub	sp, #24
  404f24:	af00      	add	r7, sp, #0
  404f26:	60f8      	str	r0, [r7, #12]
  404f28:	460b      	mov	r3, r1
  404f2a:	607a      	str	r2, [r7, #4]
  404f2c:	72fb      	strb	r3, [r7, #11]
	uint8_t epn = USB_EP_GET_N(ept->ep);
  404f2e:	68fb      	ldr	r3, [r7, #12]
  404f30:	7c9b      	ldrb	r3, [r3, #18]
  404f32:	f003 030f 	and.w	r3, r3, #15
  404f36:	75fb      	strb	r3, [r7, #23]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  404f38:	68fb      	ldr	r3, [r7, #12]
  404f3a:	7c9b      	ldrb	r3, [r3, #18]
  404f3c:	2bff      	cmp	r3, #255	; 0xff
  404f3e:	d019      	beq.n	404f74 <_usb_d_dev_trans_stop+0x54>
  404f40:	68fb      	ldr	r3, [r7, #12]
  404f42:	7cdb      	ldrb	r3, [r3, #19]
  404f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404f48:	b2db      	uxtb	r3, r3
  404f4a:	2b00      	cmp	r3, #0
  404f4c:	d012      	beq.n	404f74 <_usb_d_dev_trans_stop+0x54>
		return;
	}

	/* Stop transfer */
	if (dir) {
  404f4e:	7afb      	ldrb	r3, [r7, #11]
  404f50:	2b00      	cmp	r3, #0
  404f52:	d005      	beq.n	404f60 <_usb_d_dev_trans_stop+0x40>
		/* NAK IN */
		_usbd_ep_set_in_rdy(epn, false);
  404f54:	7dfb      	ldrb	r3, [r7, #23]
  404f56:	2100      	movs	r1, #0
  404f58:	4618      	mov	r0, r3
  404f5a:	4b08      	ldr	r3, [pc, #32]	; (404f7c <_usb_d_dev_trans_stop+0x5c>)
  404f5c:	4798      	blx	r3
  404f5e:	e004      	b.n	404f6a <_usb_d_dev_trans_stop+0x4a>
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
  404f60:	7dfb      	ldrb	r3, [r7, #23]
  404f62:	2100      	movs	r1, #0
  404f64:	4618      	mov	r0, r3
  404f66:	4b06      	ldr	r3, [pc, #24]	; (404f80 <_usb_d_dev_trans_stop+0x60>)
  404f68:	4798      	blx	r3
	}

	_usb_d_dev_trans_done(ept, code);
  404f6a:	6879      	ldr	r1, [r7, #4]
  404f6c:	68f8      	ldr	r0, [r7, #12]
  404f6e:	4b05      	ldr	r3, [pc, #20]	; (404f84 <_usb_d_dev_trans_stop+0x64>)
  404f70:	4798      	blx	r3
  404f72:	e000      	b.n	404f76 <_usb_d_dev_trans_stop+0x56>
		return;
  404f74:	bf00      	nop
}
  404f76:	3718      	adds	r7, #24
  404f78:	46bd      	mov	sp, r7
  404f7a:	bd80      	pop	{r7, pc}
  404f7c:	00404075 	.word	0x00404075
  404f80:	004040bd 	.word	0x004040bd
  404f84:	00404ed9 	.word	0x00404ed9

00404f88 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
  404f88:	b580      	push	{r7, lr}
  404f8a:	b084      	sub	sp, #16
  404f8c:	af00      	add	r7, sp, #0
  404f8e:	4603      	mov	r3, r0
  404f90:	6039      	str	r1, [r7, #0]
  404f92:	71fb      	strb	r3, [r7, #7]
	uint8_t epn = USB_EP_GET_N(ep);
  404f94:	79fb      	ldrb	r3, [r7, #7]
  404f96:	f003 030f 	and.w	r3, r3, #15
  404f9a:	73fb      	strb	r3, [r7, #15]

	uint16_t bytes = _usbd_ep_get_trans_count(epn);
  404f9c:	7bfb      	ldrb	r3, [r7, #15]
  404f9e:	4618      	mov	r0, r3
  404fa0:	4b1c      	ldr	r3, [pc, #112]	; (405014 <_usb_d_dev_ep_read_req+0x8c>)
  404fa2:	4798      	blx	r3
  404fa4:	4603      	mov	r3, r0
  404fa6:	81bb      	strh	r3, [r7, #12]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  404fa8:	7bfb      	ldrb	r3, [r7, #15]
  404faa:	2b03      	cmp	r3, #3
  404fac:	d802      	bhi.n	404fb4 <_usb_d_dev_ep_read_req+0x2c>
  404fae:	683b      	ldr	r3, [r7, #0]
  404fb0:	2b00      	cmp	r3, #0
  404fb2:	d102      	bne.n	404fba <_usb_d_dev_ep_read_req+0x32>
		return -USB_ERR_PARAM;
  404fb4:	f06f 0311 	mvn.w	r3, #17
  404fb8:	e027      	b.n	40500a <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  404fba:	7bfb      	ldrb	r3, [r7, #15]
  404fbc:	4618      	mov	r0, r3
  404fbe:	4b16      	ldr	r3, [pc, #88]	; (405018 <_usb_d_dev_ep_read_req+0x90>)
  404fc0:	4798      	blx	r3
  404fc2:	4603      	mov	r3, r0
  404fc4:	f083 0301 	eor.w	r3, r3, #1
  404fc8:	b2db      	uxtb	r3, r3
  404fca:	2b00      	cmp	r3, #0
  404fcc:	d002      	beq.n	404fd4 <_usb_d_dev_ep_read_req+0x4c>
		return -USB_ERR_FUNC;
  404fce:	f06f 0312 	mvn.w	r3, #18
  404fd2:	e01a      	b.n	40500a <_usb_d_dev_ep_read_req+0x82>
	}

	if (!_usbd_ep_is_setup(epn)) {
  404fd4:	7bfb      	ldrb	r3, [r7, #15]
  404fd6:	4618      	mov	r0, r3
  404fd8:	4b10      	ldr	r3, [pc, #64]	; (40501c <_usb_d_dev_ep_read_req+0x94>)
  404fda:	4798      	blx	r3
  404fdc:	4603      	mov	r3, r0
  404fde:	f083 0301 	eor.w	r3, r3, #1
  404fe2:	b2db      	uxtb	r3, r3
  404fe4:	2b00      	cmp	r3, #0
  404fe6:	d001      	beq.n	404fec <_usb_d_dev_ep_read_req+0x64>
		return ERR_NONE;
  404fe8:	2300      	movs	r3, #0
  404fea:	e00e      	b.n	40500a <_usb_d_dev_ep_read_req+0x82>
	}

	uint8_t *ptr = (uint8_t *)&_usbd_ep_get_fifo_access(epn, 8);
  404fec:	7bfb      	ldrb	r3, [r7, #15]
  404fee:	03da      	lsls	r2, r3, #15
  404ff0:	4b0b      	ldr	r3, [pc, #44]	; (405020 <_usb_d_dev_ep_read_req+0x98>)
  404ff2:	4413      	add	r3, r2
  404ff4:	60bb      	str	r3, [r7, #8]
	memcpy(req_buf, (void *)ptr, 8);
  404ff6:	2208      	movs	r2, #8
  404ff8:	68b9      	ldr	r1, [r7, #8]
  404ffa:	6838      	ldr	r0, [r7, #0]
  404ffc:	4b09      	ldr	r3, [pc, #36]	; (405024 <_usb_d_dev_ep_read_req+0x9c>)
  404ffe:	4798      	blx	r3

	_usbd_ep_ack_setup(epn);
  405000:	7bfb      	ldrb	r3, [r7, #15]
  405002:	4618      	mov	r0, r3
  405004:	4b08      	ldr	r3, [pc, #32]	; (405028 <_usb_d_dev_ep_read_req+0xa0>)
  405006:	4798      	blx	r3

	return bytes;
  405008:	89bb      	ldrh	r3, [r7, #12]
}
  40500a:	4618      	mov	r0, r3
  40500c:	3710      	adds	r7, #16
  40500e:	46bd      	mov	sp, r7
  405010:	bd80      	pop	{r7, pc}
  405012:	bf00      	nop
  405014:	00403ffd 	.word	0x00403ffd
  405018:	00403e61 	.word	0x00403e61
  40501c:	00403f89 	.word	0x00403f89
  405020:	a0100000 	.word	0xa0100000
  405024:	004052b9 	.word	0x004052b9
  405028:	00403fb1 	.word	0x00403fb1

0040502c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  40502c:	b580      	push	{r7, lr}
  40502e:	b088      	sub	sp, #32
  405030:	af00      	add	r7, sp, #0
  405032:	6078      	str	r0, [r7, #4]
	Usbhs *               hw  = USBHS;
  405034:	4b64      	ldr	r3, [pc, #400]	; (4051c8 <_usb_d_dev_ep_trans+0x19c>)
  405036:	61fb      	str	r3, [r7, #28]
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  405038:	687b      	ldr	r3, [r7, #4]
  40503a:	7a1b      	ldrb	r3, [r3, #8]
  40503c:	f003 030f 	and.w	r3, r3, #15
  405040:	76fb      	strb	r3, [r7, #27]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  405042:	687b      	ldr	r3, [r7, #4]
  405044:	7a1b      	ldrb	r3, [r3, #8]
  405046:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40504a:	2b00      	cmp	r3, #0
  40504c:	bf14      	ite	ne
  40504e:	2301      	movne	r3, #1
  405050:	2300      	moveq	r3, #0
  405052:	76bb      	strb	r3, [r7, #26]
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  405054:	7efa      	ldrb	r2, [r7, #27]
  405056:	4613      	mov	r3, r2
  405058:	009b      	lsls	r3, r3, #2
  40505a:	4413      	add	r3, r2
  40505c:	009b      	lsls	r3, r3, #2
  40505e:	3310      	adds	r3, #16
  405060:	4a5a      	ldr	r2, [pc, #360]	; (4051cc <_usb_d_dev_ep_trans+0x1a0>)
  405062:	4413      	add	r3, r2
  405064:	3304      	adds	r3, #4
  405066:	617b      	str	r3, [r7, #20]

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  405068:	697b      	ldr	r3, [r7, #20]
  40506a:	8a1b      	ldrh	r3, [r3, #16]
  40506c:	f240 32ff 	movw	r2, #1023	; 0x3ff
  405070:	4293      	cmp	r3, r2
  405072:	d004      	beq.n	40507e <_usb_d_dev_ep_trans+0x52>
  405074:	697b      	ldr	r3, [r7, #20]
  405076:	8a1b      	ldrh	r3, [r3, #16]
  405078:	3b01      	subs	r3, #1
  40507a:	b29b      	uxth	r3, r3
  40507c:	e001      	b.n	405082 <_usb_d_dev_ep_trans+0x56>
  40507e:	f240 33ff 	movw	r3, #1023	; 0x3ff
  405082:	827b      	strh	r3, [r7, #18]
	bool     size_n_aligned = (trans->size & size_mask);
  405084:	687b      	ldr	r3, [r7, #4]
  405086:	685a      	ldr	r2, [r3, #4]
  405088:	8a7b      	ldrh	r3, [r7, #18]
  40508a:	4013      	ands	r3, r2
  40508c:	2b00      	cmp	r3, #0
  40508e:	bf14      	ite	ne
  405090:	2301      	movne	r3, #1
  405092:	2300      	moveq	r3, #0
  405094:	747b      	strb	r3, [r7, #17]
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  405096:	697b      	ldr	r3, [r7, #20]
  405098:	7cdb      	ldrb	r3, [r3, #19]
  40509a:	f003 0307 	and.w	r3, r3, #7
  40509e:	b2db      	uxtb	r3, r3
  4050a0:	2b01      	cmp	r3, #1
  4050a2:	bf0c      	ite	eq
  4050a4:	2301      	moveq	r3, #1
  4050a6:	2300      	movne	r3, #0
  4050a8:	743b      	strb	r3, [r7, #16]

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  4050aa:	7efb      	ldrb	r3, [r7, #27]
  4050ac:	2b03      	cmp	r3, #3
  4050ae:	d902      	bls.n	4050b6 <_usb_d_dev_ep_trans+0x8a>
		return -USB_ERR_PARAM;
  4050b0:	f06f 0311 	mvn.w	r3, #17
  4050b4:	e083      	b.n	4051be <_usb_d_dev_ep_trans+0x192>
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  4050b6:	697b      	ldr	r3, [r7, #20]
  4050b8:	7cdb      	ldrb	r3, [r3, #19]
  4050ba:	f003 0308 	and.w	r3, r3, #8
  4050be:	b2db      	uxtb	r3, r3
  4050c0:	2b00      	cmp	r3, #0
  4050c2:	d001      	beq.n	4050c8 <_usb_d_dev_ep_trans+0x9c>
		return USB_HALTED;
  4050c4:	2302      	movs	r3, #2
  4050c6:	e07a      	b.n	4051be <_usb_d_dev_ep_trans+0x192>
	}

	/* Try to start transactions. */
	atomic_enter_critical(&flags);
  4050c8:	f107 030c 	add.w	r3, r7, #12
  4050cc:	4618      	mov	r0, r3
  4050ce:	4b40      	ldr	r3, [pc, #256]	; (4051d0 <_usb_d_dev_ep_trans+0x1a4>)
  4050d0:	4798      	blx	r3

	if (_usb_d_dev_ep_is_busy(ept)) {
  4050d2:	697b      	ldr	r3, [r7, #20]
  4050d4:	7cdb      	ldrb	r3, [r3, #19]
  4050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4050da:	b2db      	uxtb	r3, r3
  4050dc:	2b00      	cmp	r3, #0
  4050de:	d006      	beq.n	4050ee <_usb_d_dev_ep_trans+0xc2>
		atomic_leave_critical(&flags);
  4050e0:	f107 030c 	add.w	r3, r7, #12
  4050e4:	4618      	mov	r0, r3
  4050e6:	4b3b      	ldr	r3, [pc, #236]	; (4051d4 <_usb_d_dev_ep_trans+0x1a8>)
  4050e8:	4798      	blx	r3
		return USB_BUSY;
  4050ea:	2301      	movs	r3, #1
  4050ec:	e067      	b.n	4051be <_usb_d_dev_ep_trans+0x192>
	}

	ept->flags.bits.is_busy = 1;
  4050ee:	697a      	ldr	r2, [r7, #20]
  4050f0:	7cd3      	ldrb	r3, [r2, #19]
  4050f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4050f6:	74d3      	strb	r3, [r2, #19]
	atomic_leave_critical(&flags);
  4050f8:	f107 030c 	add.w	r3, r7, #12
  4050fc:	4618      	mov	r0, r3
  4050fe:	4b35      	ldr	r3, [pc, #212]	; (4051d4 <_usb_d_dev_ep_trans+0x1a8>)
  405100:	4798      	blx	r3

	/* Copy transaction information. */
	ept->trans_buf   = trans->buf;
  405102:	687b      	ldr	r3, [r7, #4]
  405104:	681a      	ldr	r2, [r3, #0]
  405106:	697b      	ldr	r3, [r7, #20]
  405108:	601a      	str	r2, [r3, #0]
	ept->trans_size  = trans->size;
  40510a:	687b      	ldr	r3, [r7, #4]
  40510c:	685a      	ldr	r2, [r3, #4]
  40510e:	697b      	ldr	r3, [r7, #20]
  405110:	605a      	str	r2, [r3, #4]
	ept->trans_count = 0;
  405112:	697b      	ldr	r3, [r7, #20]
  405114:	2200      	movs	r2, #0
  405116:	609a      	str	r2, [r3, #8]
	ept->trans_load  = 0;
  405118:	697b      	ldr	r3, [r7, #20]
  40511a:	2200      	movs	r2, #0
  40511c:	60da      	str	r2, [r3, #12]

	ept->flags.bits.dir      = dir;
  40511e:	697a      	ldr	r2, [r7, #20]
  405120:	7cd3      	ldrb	r3, [r2, #19]
  405122:	7eb9      	ldrb	r1, [r7, #26]
  405124:	f361 13c7 	bfi	r3, r1, #7, #1
  405128:	74d3      	strb	r3, [r2, #19]
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  40512a:	687b      	ldr	r3, [r7, #4]
  40512c:	7a5b      	ldrb	r3, [r3, #9]
  40512e:	2b00      	cmp	r3, #0
  405130:	d007      	beq.n	405142 <_usb_d_dev_ep_trans+0x116>
  405132:	7c7b      	ldrb	r3, [r7, #17]
  405134:	f083 0301 	eor.w	r3, r3, #1
  405138:	b2db      	uxtb	r3, r3
  40513a:	2b00      	cmp	r3, #0
  40513c:	d001      	beq.n	405142 <_usb_d_dev_ep_trans+0x116>
  40513e:	2301      	movs	r3, #1
  405140:	e000      	b.n	405144 <_usb_d_dev_ep_trans+0x118>
  405142:	2300      	movs	r3, #0
  405144:	b2db      	uxtb	r3, r3
  405146:	f003 0301 	and.w	r3, r3, #1
  40514a:	b2d9      	uxtb	r1, r3
  40514c:	697a      	ldr	r2, [r7, #20]
  40514e:	7cd3      	ldrb	r3, [r2, #19]
  405150:	f361 1304 	bfi	r3, r1, #4, #1
  405154:	74d3      	strb	r3, [r2, #19]

#if (CONF_USB_D_DMA_ENABLE == 1)
	if (_usb_d_dev_ep_is_dma(epn)) {
  405156:	7efb      	ldrb	r3, [r7, #27]
  405158:	2b00      	cmp	r3, #0
  40515a:	d00b      	beq.n	405174 <_usb_d_dev_ep_trans+0x148>
  40515c:	7efb      	ldrb	r3, [r7, #27]
  40515e:	2b06      	cmp	r3, #6
  405160:	d808      	bhi.n	405174 <_usb_d_dev_ep_trans+0x148>
		hri_usbhs_set_DEVEPTCFG_AUTOSW_bit(hw, epn);
  405162:	7efb      	ldrb	r3, [r7, #27]
  405164:	4619      	mov	r1, r3
  405166:	69f8      	ldr	r0, [r7, #28]
  405168:	4b1b      	ldr	r3, [pc, #108]	; (4051d8 <_usb_d_dev_ep_trans+0x1ac>)
  40516a:	4798      	blx	r3
		_usb_d_dev_dma_next(ept);
  40516c:	6978      	ldr	r0, [r7, #20]
  40516e:	4b1b      	ldr	r3, [pc, #108]	; (4051dc <_usb_d_dev_ep_trans+0x1b0>)
  405170:	4798      	blx	r3
  405172:	e023      	b.n	4051bc <_usb_d_dev_ep_trans+0x190>
	} else {
#endif
		if (!is_ctrl) {
  405174:	7c3b      	ldrb	r3, [r7, #16]
  405176:	f083 0301 	eor.w	r3, r3, #1
  40517a:	b2db      	uxtb	r3, r3
  40517c:	2b00      	cmp	r3, #0
  40517e:	d008      	beq.n	405192 <_usb_d_dev_ep_trans+0x166>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  405180:	7efb      	ldrb	r3, [r7, #27]
  405182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  405186:	fa02 f303 	lsl.w	r3, r2, r3
  40518a:	4619      	mov	r1, r3
  40518c:	69f8      	ldr	r0, [r7, #28]
  40518e:	4b14      	ldr	r3, [pc, #80]	; (4051e0 <_usb_d_dev_ep_trans+0x1b4>)
  405190:	4798      	blx	r3
		}
		hri_usbhs_clear_DEVEPTCFG_AUTOSW_bit(hw, epn);
  405192:	7efb      	ldrb	r3, [r7, #27]
  405194:	4619      	mov	r1, r3
  405196:	69f8      	ldr	r0, [r7, #28]
  405198:	4b12      	ldr	r3, [pc, #72]	; (4051e4 <_usb_d_dev_ep_trans+0x1b8>)
  40519a:	4798      	blx	r3
		if (dir) {
  40519c:	7ebb      	ldrb	r3, [r7, #26]
  40519e:	2b00      	cmp	r3, #0
  4051a0:	d006      	beq.n	4051b0 <_usb_d_dev_ep_trans+0x184>
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_TXINES);
  4051a2:	7efb      	ldrb	r3, [r7, #27]
  4051a4:	2201      	movs	r2, #1
  4051a6:	4619      	mov	r1, r3
  4051a8:	69f8      	ldr	r0, [r7, #28]
  4051aa:	4b0f      	ldr	r3, [pc, #60]	; (4051e8 <_usb_d_dev_ep_trans+0x1bc>)
  4051ac:	4798      	blx	r3
  4051ae:	e005      	b.n	4051bc <_usb_d_dev_ep_trans+0x190>
		} else {
			hri_usbhs_write_DEVEPTIER_reg(hw, epn, USBHS_DEVEPTIER_RXOUTES);
  4051b0:	7efb      	ldrb	r3, [r7, #27]
  4051b2:	2202      	movs	r2, #2
  4051b4:	4619      	mov	r1, r3
  4051b6:	69f8      	ldr	r0, [r7, #28]
  4051b8:	4b0b      	ldr	r3, [pc, #44]	; (4051e8 <_usb_d_dev_ep_trans+0x1bc>)
  4051ba:	4798      	blx	r3
		}
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
  4051bc:	2300      	movs	r3, #0
}
  4051be:	4618      	mov	r0, r3
  4051c0:	3720      	adds	r7, #32
  4051c2:	46bd      	mov	sp, r7
  4051c4:	bd80      	pop	{r7, pc}
  4051c6:	bf00      	nop
  4051c8:	40038000 	.word	0x40038000
  4051cc:	204000dc 	.word	0x204000dc
  4051d0:	00400bb5 	.word	0x00400bb5
  4051d4:	00400bdb 	.word	0x00400bdb
  4051d8:	00403b9f 	.word	0x00403b9f
  4051dc:	004045dd 	.word	0x004045dd
  4051e0:	00403921 	.word	0x00403921
  4051e4:	00403bcf 	.word	0x00403bcf
  4051e8:	00403ac1 	.word	0x00403ac1

004051ec <_usb_d_dev_register_ep_callback>:
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
  4051ec:	b480      	push	{r7}
  4051ee:	b085      	sub	sp, #20
  4051f0:	af00      	add	r7, sp, #0
  4051f2:	4603      	mov	r3, r0
  4051f4:	6039      	str	r1, [r7, #0]
  4051f6:	71fb      	strb	r3, [r7, #7]
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  4051f8:	683b      	ldr	r3, [r7, #0]
  4051fa:	2b00      	cmp	r3, #0
  4051fc:	d001      	beq.n	405202 <_usb_d_dev_register_ep_callback+0x16>
  4051fe:	683b      	ldr	r3, [r7, #0]
  405200:	e000      	b.n	405204 <_usb_d_dev_register_ep_callback+0x18>
  405202:	4b0e      	ldr	r3, [pc, #56]	; (40523c <_usb_d_dev_register_ep_callback+0x50>)
  405204:	60fb      	str	r3, [r7, #12]

	if (type == USB_D_DEV_EP_CB_SETUP) {
  405206:	79fb      	ldrb	r3, [r7, #7]
  405208:	2b00      	cmp	r3, #0
  40520a:	d103      	bne.n	405214 <_usb_d_dev_register_ep_callback+0x28>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  40520c:	4a0c      	ldr	r2, [pc, #48]	; (405240 <_usb_d_dev_register_ep_callback+0x54>)
  40520e:	68fb      	ldr	r3, [r7, #12]
  405210:	6093      	str	r3, [r2, #8]
	} else if (type == USB_D_DEV_EP_CB_MORE) {
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
	}
}
  405212:	e00c      	b.n	40522e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  405214:	79fb      	ldrb	r3, [r7, #7]
  405216:	2b01      	cmp	r3, #1
  405218:	d103      	bne.n	405222 <_usb_d_dev_register_ep_callback+0x36>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  40521a:	4a09      	ldr	r2, [pc, #36]	; (405240 <_usb_d_dev_register_ep_callback+0x54>)
  40521c:	68fb      	ldr	r3, [r7, #12]
  40521e:	60d3      	str	r3, [r2, #12]
}
  405220:	e005      	b.n	40522e <_usb_d_dev_register_ep_callback+0x42>
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  405222:	79fb      	ldrb	r3, [r7, #7]
  405224:	2b02      	cmp	r3, #2
  405226:	d102      	bne.n	40522e <_usb_d_dev_register_ep_callback+0x42>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  405228:	4a05      	ldr	r2, [pc, #20]	; (405240 <_usb_d_dev_register_ep_callback+0x54>)
  40522a:	68fb      	ldr	r3, [r7, #12]
  40522c:	6113      	str	r3, [r2, #16]
}
  40522e:	bf00      	nop
  405230:	3714      	adds	r7, #20
  405232:	46bd      	mov	sp, r7
  405234:	f85d 7b04 	ldr.w	r7, [sp], #4
  405238:	4770      	bx	lr
  40523a:	bf00      	nop
  40523c:	00403da1 	.word	0x00403da1
  405240:	204000dc 	.word	0x204000dc

00405244 <main>:

uint32_t testVar1;
uint32_t testVar2;

int main(void)
{
  405244:	b580      	push	{r7, lr}
  405246:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  405248:	4b06      	ldr	r3, [pc, #24]	; (405264 <main+0x20>)
  40524a:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		testVar1++;
  40524c:	4b06      	ldr	r3, [pc, #24]	; (405268 <main+0x24>)
  40524e:	681b      	ldr	r3, [r3, #0]
  405250:	3301      	adds	r3, #1
  405252:	4a05      	ldr	r2, [pc, #20]	; (405268 <main+0x24>)
  405254:	6013      	str	r3, [r2, #0]
		testVar2--;
  405256:	4b05      	ldr	r3, [pc, #20]	; (40526c <main+0x28>)
  405258:	681b      	ldr	r3, [r3, #0]
  40525a:	3b01      	subs	r3, #1
  40525c:	4a03      	ldr	r2, [pc, #12]	; (40526c <main+0x28>)
  40525e:	6013      	str	r3, [r2, #0]
		testVar1++;
  405260:	e7f4      	b.n	40524c <main+0x8>
  405262:	bf00      	nop
  405264:	004001ad 	.word	0x004001ad
  405268:	204001e8 	.word	0x204001e8
  40526c:	204001e4 	.word	0x204001e4

00405270 <__libc_init_array>:
  405270:	b570      	push	{r4, r5, r6, lr}
  405272:	4e0d      	ldr	r6, [pc, #52]	; (4052a8 <__libc_init_array+0x38>)
  405274:	4c0d      	ldr	r4, [pc, #52]	; (4052ac <__libc_init_array+0x3c>)
  405276:	1ba4      	subs	r4, r4, r6
  405278:	10a4      	asrs	r4, r4, #2
  40527a:	2500      	movs	r5, #0
  40527c:	42a5      	cmp	r5, r4
  40527e:	d109      	bne.n	405294 <__libc_init_array+0x24>
  405280:	4e0b      	ldr	r6, [pc, #44]	; (4052b0 <__libc_init_array+0x40>)
  405282:	4c0c      	ldr	r4, [pc, #48]	; (4052b4 <__libc_init_array+0x44>)
  405284:	f000 f910 	bl	4054a8 <_init>
  405288:	1ba4      	subs	r4, r4, r6
  40528a:	10a4      	asrs	r4, r4, #2
  40528c:	2500      	movs	r5, #0
  40528e:	42a5      	cmp	r5, r4
  405290:	d105      	bne.n	40529e <__libc_init_array+0x2e>
  405292:	bd70      	pop	{r4, r5, r6, pc}
  405294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  405298:	4798      	blx	r3
  40529a:	3501      	adds	r5, #1
  40529c:	e7ee      	b.n	40527c <__libc_init_array+0xc>
  40529e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  4052a2:	4798      	blx	r3
  4052a4:	3501      	adds	r5, #1
  4052a6:	e7f2      	b.n	40528e <__libc_init_array+0x1e>
  4052a8:	004054b4 	.word	0x004054b4
  4052ac:	004054b4 	.word	0x004054b4
  4052b0:	004054b4 	.word	0x004054b4
  4052b4:	004054b8 	.word	0x004054b8

004052b8 <memcpy>:
  4052b8:	b510      	push	{r4, lr}
  4052ba:	1e43      	subs	r3, r0, #1
  4052bc:	440a      	add	r2, r1
  4052be:	4291      	cmp	r1, r2
  4052c0:	d100      	bne.n	4052c4 <memcpy+0xc>
  4052c2:	bd10      	pop	{r4, pc}
  4052c4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4052c8:	f803 4f01 	strb.w	r4, [r3, #1]!
  4052cc:	e7f7      	b.n	4052be <memcpy+0x6>

004052ce <memset>:
  4052ce:	4402      	add	r2, r0
  4052d0:	4603      	mov	r3, r0
  4052d2:	4293      	cmp	r3, r2
  4052d4:	d100      	bne.n	4052d8 <memset+0xa>
  4052d6:	4770      	bx	lr
  4052d8:	f803 1b01 	strb.w	r1, [r3], #1
  4052dc:	e7f9      	b.n	4052d2 <memset+0x4>
  4052de:	0000      	movs	r0, r0
  4052e0:	682f2e2e 	.word	0x682f2e2e
  4052e4:	702f6c70 	.word	0x702f6c70
  4052e8:	682f6f69 	.word	0x682f6f69
  4052ec:	675f6c70 	.word	0x675f6c70
  4052f0:	5f6f6970 	.word	0x5f6f6970
  4052f4:	65736162 	.word	0x65736162
  4052f8:	0000682e 	.word	0x0000682e
  4052fc:	682f2e2e 	.word	0x682f2e2e
  405300:	732f6c61 	.word	0x732f6c61
  405304:	682f6372 	.word	0x682f6372
  405308:	645f6c61 	.word	0x645f6c61
  40530c:	735f6361 	.word	0x735f6361
  405310:	2e636e79 	.word	0x2e636e79
  405314:	00000063 	.word	0x00000063
  405318:	682f2e2e 	.word	0x682f2e2e
  40531c:	732f6c61 	.word	0x732f6c61
  405320:	682f6372 	.word	0x682f6372
  405324:	695f6c61 	.word	0x695f6c61
  405328:	6d5f6332 	.word	0x6d5f6332
  40532c:	6e79735f 	.word	0x6e79735f
  405330:	00632e63 	.word	0x00632e63
  405334:	682f2e2e 	.word	0x682f2e2e
  405338:	732f6c61 	.word	0x732f6c61
  40533c:	682f6372 	.word	0x682f6372
  405340:	735f6c61 	.word	0x735f6c61
  405344:	6d5f6970 	.word	0x6d5f6970
  405348:	6e79735f 	.word	0x6e79735f
  40534c:	00632e63 	.word	0x00632e63
  405350:	682f2e2e 	.word	0x682f2e2e
  405354:	732f6c61 	.word	0x732f6c61
  405358:	682f6372 	.word	0x682f6372
  40535c:	755f6c61 	.word	0x755f6c61
  405360:	74726173 	.word	0x74726173
  405364:	7973615f 	.word	0x7973615f
  405368:	632e636e 	.word	0x632e636e
  40536c:	00000000 	.word	0x00000000
  405370:	682f2e2e 	.word	0x682f2e2e
  405374:	732f6c61 	.word	0x732f6c61
  405378:	682f6372 	.word	0x682f6372
  40537c:	755f6c61 	.word	0x755f6c61
  405380:	74726173 	.word	0x74726173
  405384:	6e79735f 	.word	0x6e79735f
  405388:	00632e63 	.word	0x00632e63
  40538c:	682f2e2e 	.word	0x682f2e2e
  405390:	752f6c61 	.word	0x752f6c61
  405394:	736c6974 	.word	0x736c6974
  405398:	6372732f 	.word	0x6372732f
  40539c:	6974752f 	.word	0x6974752f
  4053a0:	725f736c 	.word	0x725f736c
  4053a4:	62676e69 	.word	0x62676e69
  4053a8:	65666675 	.word	0x65666675
  4053ac:	00632e72 	.word	0x00632e72
  4053b0:	682f2e2e 	.word	0x682f2e2e
  4053b4:	642f6c70 	.word	0x642f6c70
  4053b8:	682f6361 	.word	0x682f6361
  4053bc:	645f6c70 	.word	0x645f6c70
  4053c0:	632e6361 	.word	0x632e6361
  4053c4:	00000000 	.word	0x00000000

004053c8 <_ext_irq>:
  4053c8:	00000001 00000001 00000001 00000001     ................
  4053d8:	00000000 00000001 00000000 682f2e2e     ............../h
  4053e8:	702f6c70 682f6f69 705f6c70 655f6f69     pl/pio/hpl_pio_e
  4053f8:	632e7478 00000000                       xt.c....

00405400 <spi_regs>:
  405400:	00000001 80000000 00000001 04960c82     ................
  405410:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  405420:	735f6c70 632e6970 00000000              pl_spi.c....

0040542c <_i2cm_sync_cfgs>:
  40542c:	40018000 00000020 00000000 00000000     ...@ ...........
  40543c:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  40544c:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  40545c:	00000000 682f2e2e 752f6c70 2f747261     ....../hpl/uart/
  40546c:	5f6c7068 74726175 0000632e 00001000     hpl_uart.c......
  40547c:	00000c00 00000000 00000000 00000201     ................
  40548c:	682f2e2e 752f6c70 73686273 6c70682f     ../hpl/usbhs/hpl
  40549c:	6273755f 632e7368 00000000              _usbhs.c....

004054a8 <_init>:
  4054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4054aa:	bf00      	nop
  4054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4054ae:	bc08      	pop	{r3}
  4054b0:	469e      	mov	lr, r3
  4054b2:	4770      	bx	lr

004054b4 <__init_array_start>:
  4054b4:	00400165 	.word	0x00400165

004054b8 <_fini>:
  4054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4054ba:	bf00      	nop
  4054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4054be:	bc08      	pop	{r3}
  4054c0:	469e      	mov	lr, r3
  4054c2:	4770      	bx	lr

004054c4 <__fini_array_start>:
  4054c4:	00400141 	.word	0x00400141
