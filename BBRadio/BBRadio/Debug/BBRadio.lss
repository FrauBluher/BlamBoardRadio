
BBRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002570  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20400000  20400000  00012570  2**0
                  CONTENTS
  2 .bss          00000318  20400000  20400000  00020000  2**2
                  ALLOC
  3 .heap         00000200  20400318  20400318  00020000  2**0
                  ALLOC
  4 .stack        00000400  20400518  20400518  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00012570  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0001259e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001cc13  00000000  00000000  000125f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036b1  00000000  00000000  0002f20a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ef85  00000000  00000000  000328bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c90  00000000  00000000  00041840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f28  00000000  00000000  000424d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b9d7  00000000  00000000  000433f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013ab6  00000000  00000000  0004edcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000fc823  00000000  00000000  00062885  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000022d0  00000000  00000000  0015f0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 09 40 20 bd 01 40 00 b9 01 40 00 b9 01 40 00     ..@ ..@...@...@.
  400010:	b9 01 40 00 b9 01 40 00 b9 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 01 40 00 b9 01 40 00 00 00 00 00 b9 01 40 00     ..@...@.......@.
  40003c:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  40004c:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  40005c:	b9 01 40 00 b9 01 40 00 00 00 00 00 b9 01 40 00     ..@...@.......@.
  40006c:	b5 0f 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  40007c:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  40008c:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  40009c:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  4000ac:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  4000bc:	b9 01 40 00 b9 01 40 00 b9 01 40 00 a9 1a 40 00     ..@...@...@...@.
	...
  4000e0:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  4000f0:	b9 01 40 00 b9 01 40 00 ed 17 40 00 b9 01 40 00     ..@...@...@...@.
  400100:	b9 01 40 00 b9 01 40 00 b9 01 40 00 b9 01 40 00     ..@...@...@...@.
  400110:	b9 01 40 00 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
  400120:	b9 01 40 00 b9 01 40 00 cd 22 40 00 b9 01 40 00     ..@...@.."@...@.
  400130:	b9 01 40 00 00 00 00 00 b9 01 40 00 b9 01 40 00     ..@.......@...@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400000 	.word	0x20400000
  40015c:	00000000 	.word	0x00000000
  400160:	00402570 	.word	0x00402570

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402570 	.word	0x00402570
  4001a0:	20400004 	.word	0x20400004
  4001a4:	00402570 	.word	0x00402570
  4001a8:	00000000 	.word	0x00000000

004001ac <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
  4001ac:	b508      	push	{r3, lr}
	system_init();
  4001ae:	4b01      	ldr	r3, [pc, #4]	; (4001b4 <atmel_start_init+0x8>)
  4001b0:	4798      	blx	r3
	asm("");
  4001b2:	bd08      	pop	{r3, pc}
  4001b4:	00400525 	.word	0x00400525

004001b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001b8:	e7fe      	b.n	4001b8 <Dummy_Handler>
	...

004001bc <Reset_Handler>:
{
  4001bc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001be:	4b17      	ldr	r3, [pc, #92]	; (40021c <Reset_Handler+0x60>)
  4001c0:	4a17      	ldr	r2, [pc, #92]	; (400220 <Reset_Handler+0x64>)
  4001c2:	429a      	cmp	r2, r3
  4001c4:	d010      	beq.n	4001e8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4001c6:	4b17      	ldr	r3, [pc, #92]	; (400224 <Reset_Handler+0x68>)
  4001c8:	4a14      	ldr	r2, [pc, #80]	; (40021c <Reset_Handler+0x60>)
  4001ca:	429a      	cmp	r2, r3
  4001cc:	d20c      	bcs.n	4001e8 <Reset_Handler+0x2c>
  4001ce:	3b01      	subs	r3, #1
  4001d0:	1a9b      	subs	r3, r3, r2
  4001d2:	f023 0303 	bic.w	r3, r3, #3
  4001d6:	3304      	adds	r3, #4
  4001d8:	4413      	add	r3, r2
  4001da:	4911      	ldr	r1, [pc, #68]	; (400220 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4001dc:	f851 0b04 	ldr.w	r0, [r1], #4
  4001e0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4001e4:	429a      	cmp	r2, r3
  4001e6:	d1f9      	bne.n	4001dc <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4001e8:	4b0f      	ldr	r3, [pc, #60]	; (400228 <Reset_Handler+0x6c>)
  4001ea:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x70>)
  4001ec:	429a      	cmp	r2, r3
  4001ee:	d20a      	bcs.n	400206 <Reset_Handler+0x4a>
  4001f0:	3b01      	subs	r3, #1
  4001f2:	1a9b      	subs	r3, r3, r2
  4001f4:	f023 0303 	bic.w	r3, r3, #3
  4001f8:	3304      	adds	r3, #4
  4001fa:	4413      	add	r3, r2
                *pDest++ = 0;
  4001fc:	2100      	movs	r1, #0
  4001fe:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400202:	4293      	cmp	r3, r2
  400204:	d1fb      	bne.n	4001fe <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400206:	4a0a      	ldr	r2, [pc, #40]	; (400230 <Reset_Handler+0x74>)
  400208:	4b0a      	ldr	r3, [pc, #40]	; (400234 <Reset_Handler+0x78>)
  40020a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40020e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400210:	4b09      	ldr	r3, [pc, #36]	; (400238 <Reset_Handler+0x7c>)
  400212:	4798      	blx	r3
        main();
  400214:	4b09      	ldr	r3, [pc, #36]	; (40023c <Reset_Handler+0x80>)
  400216:	4798      	blx	r3
  400218:	e7fe      	b.n	400218 <Reset_Handler+0x5c>
  40021a:	bf00      	nop
  40021c:	20400000 	.word	0x20400000
  400220:	00402570 	.word	0x00402570
  400224:	20400000 	.word	0x20400000
  400228:	20400318 	.word	0x20400318
  40022c:	20400000 	.word	0x20400000
  400230:	e000ed00 	.word	0xe000ed00
  400234:	00400000 	.word	0x00400000
  400238:	00402369 	.word	0x00402369
  40023c:	0040233d 	.word	0x0040233d

00400240 <DAC_0_PORT_init>:
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
	((Pio *)hw)->PIO_PER = mask;
  400240:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400244:	4b03      	ldr	r3, [pc, #12]	; (400254 <DAC_0_PORT_init+0x14>)
  400246:	601a      	str	r2, [r3, #0]
  400248:	2201      	movs	r2, #1
  40024a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  40024e:	601a      	str	r2, [r3, #0]
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	400e1000 	.word	0x400e1000

00400258 <DAC_0_CLOCK_init>:
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400258:	4b04      	ldr	r3, [pc, #16]	; (40026c <DAC_0_CLOCK_init+0x14>)
  40025a:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40025c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400260:	d103      	bne.n	40026a <DAC_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400266:	4b01      	ldr	r3, [pc, #4]	; (40026c <DAC_0_CLOCK_init+0x14>)
  400268:	611a      	str	r2, [r3, #16]
  40026a:	4770      	bx	lr
  40026c:	400e0600 	.word	0x400e0600

00400270 <DAC_0_init>:

	_pmc_enable_periph_clock(ID_DACC);
}

void DAC_0_init(void)
{
  400270:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
  400272:	4b04      	ldr	r3, [pc, #16]	; (400284 <DAC_0_init+0x14>)
  400274:	4798      	blx	r3
	dac_sync_init(&DAC_0, DACC);
  400276:	4904      	ldr	r1, [pc, #16]	; (400288 <DAC_0_init+0x18>)
  400278:	4804      	ldr	r0, [pc, #16]	; (40028c <DAC_0_init+0x1c>)
  40027a:	4b05      	ldr	r3, [pc, #20]	; (400290 <DAC_0_init+0x20>)
  40027c:	4798      	blx	r3
	DAC_0_PORT_init();
  40027e:	4b05      	ldr	r3, [pc, #20]	; (400294 <DAC_0_init+0x24>)
  400280:	4798      	blx	r3
  400282:	bd08      	pop	{r3, pc}
  400284:	00400259 	.word	0x00400259
  400288:	40040000 	.word	0x40040000
  40028c:	20400240 	.word	0x20400240
  400290:	004005f9 	.word	0x004005f9
  400294:	00400241 	.word	0x00400241

00400298 <EXTERNAL_IRQ_0_init>:
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
	((Pio *)hw)->PIO_ODR = mask;
  400298:	4b03      	ldr	r3, [pc, #12]	; (4002a8 <EXTERNAL_IRQ_0_init+0x10>)
  40029a:	2201      	movs	r2, #1
  40029c:	615a      	str	r2, [r3, #20]
	((Pio *)hw)->PIO_PUDR = ~data;
}

static inline void hri_pio_clear_PUSR_reg(const void *const hw, hri_pio_pusr_reg_t mask)
{
	((Pio *)hw)->PIO_PUDR = mask;
  40029e:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = ~data;
}

static inline void hri_pio_clear_PPDSR_reg(const void *const hw, hri_pio_ppdsr_reg_t mask)
{
	((Pio *)hw)->PIO_PPDDR = mask;
  4002a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_PER = mask;
  4002a4:	601a      	str	r2, [r3, #0]
  4002a6:	4770      	bx	lr
  4002a8:	400e1000 	.word	0x400e1000

004002ac <SPI_0_PORT_init>:
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002ac:	4b11      	ldr	r3, [pc, #68]	; (4002f4 <SPI_0_PORT_init+0x48>)
  4002ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
  4002b4:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  4002bc:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4002c2:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002c6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
  4002ca:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002ce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  4002d2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4002d8:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  4002e0:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002e4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  4002e8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4002ee:	605a      	str	r2, [r3, #4]
  4002f0:	4770      	bx	lr
  4002f2:	bf00      	nop
  4002f4:	400e1200 	.word	0x400e1200

004002f8 <SPI_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4002f8:	4b05      	ldr	r3, [pc, #20]	; (400310 <SPI_0_CLOCK_init+0x18>)
  4002fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  4002fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
  400302:	d104      	bne.n	40030e <SPI_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400304:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400308:	4b01      	ldr	r3, [pc, #4]	; (400310 <SPI_0_CLOCK_init+0x18>)
  40030a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40030e:	4770      	bx	lr
  400310:	400e0600 	.word	0x400e0600

00400314 <SPI_0_init>:
{
	_pmc_enable_periph_clock(ID_SPI1);
}

void SPI_0_init(void)
{
  400314:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
  400316:	4b04      	ldr	r3, [pc, #16]	; (400328 <SPI_0_init+0x14>)
  400318:	4798      	blx	r3
	spi_m_dma_init(&SPI_0, SPI1);
  40031a:	4904      	ldr	r1, [pc, #16]	; (40032c <SPI_0_init+0x18>)
  40031c:	4804      	ldr	r0, [pc, #16]	; (400330 <SPI_0_init+0x1c>)
  40031e:	4b05      	ldr	r3, [pc, #20]	; (400334 <SPI_0_init+0x20>)
  400320:	4798      	blx	r3
	SPI_0_PORT_init();
  400322:	4b05      	ldr	r3, [pc, #20]	; (400338 <SPI_0_init+0x24>)
  400324:	4798      	blx	r3
  400326:	bd08      	pop	{r3, pc}
  400328:	004002f9 	.word	0x004002f9
  40032c:	40058000 	.word	0x40058000
  400330:	20400254 	.word	0x20400254
  400334:	0040079d 	.word	0x0040079d
  400338:	004002ad 	.word	0x004002ad

0040033c <I2C_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40033c:	4b0a      	ldr	r3, [pc, #40]	; (400368 <I2C_0_PORT_init+0x2c>)
  40033e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400340:	f022 0210 	bic.w	r2, r2, #16
  400344:	671a      	str	r2, [r3, #112]	; 0x70
  400346:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400348:	f022 0210 	bic.w	r2, r2, #16
  40034c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40034e:	2210      	movs	r2, #16
  400350:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400354:	f022 0208 	bic.w	r2, r2, #8
  400358:	671a      	str	r2, [r3, #112]	; 0x70
  40035a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40035c:	f022 0208 	bic.w	r2, r2, #8
  400360:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400362:	2208      	movs	r2, #8
  400364:	605a      	str	r2, [r3, #4]
  400366:	4770      	bx	lr
  400368:	400e0e00 	.word	0x400e0e00

0040036c <I2C_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40036c:	4b04      	ldr	r3, [pc, #16]	; (400380 <I2C_0_CLOCK_init+0x14>)
  40036e:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400370:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  400374:	d103      	bne.n	40037e <I2C_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400376:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40037a:	4b01      	ldr	r3, [pc, #4]	; (400380 <I2C_0_CLOCK_init+0x14>)
  40037c:	611a      	str	r2, [r3, #16]
  40037e:	4770      	bx	lr
  400380:	400e0600 	.word	0x400e0600

00400384 <I2C_0_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS0);
}

void I2C_0_init(void)
{
  400384:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
  400386:	4b04      	ldr	r3, [pc, #16]	; (400398 <I2C_0_init+0x14>)
  400388:	4798      	blx	r3

	i2c_m_sync_init(&I2C_0, TWIHS0);
  40038a:	4904      	ldr	r1, [pc, #16]	; (40039c <I2C_0_init+0x18>)
  40038c:	4804      	ldr	r0, [pc, #16]	; (4003a0 <I2C_0_init+0x1c>)
  40038e:	4b05      	ldr	r3, [pc, #20]	; (4003a4 <I2C_0_init+0x20>)
  400390:	4798      	blx	r3

	I2C_0_PORT_init();
  400392:	4b05      	ldr	r3, [pc, #20]	; (4003a8 <I2C_0_init+0x24>)
  400394:	4798      	blx	r3
  400396:	bd08      	pop	{r3, pc}
  400398:	0040036d 	.word	0x0040036d
  40039c:	40018000 	.word	0x40018000
  4003a0:	204002f8 	.word	0x204002f8
  4003a4:	004006f5 	.word	0x004006f5
  4003a8:	0040033d 	.word	0x0040033d

004003ac <I2C_INSTANCE_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003ac:	4b04      	ldr	r3, [pc, #16]	; (4003c0 <I2C_INSTANCE_CLOCK_init+0x14>)
  4003ae:	699b      	ldr	r3, [r3, #24]
  4003b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4003b4:	d103      	bne.n	4003be <I2C_INSTANCE_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4003ba:	4b01      	ldr	r3, [pc, #4]	; (4003c0 <I2C_INSTANCE_CLOCK_init+0x14>)
  4003bc:	611a      	str	r2, [r3, #16]
  4003be:	4770      	bx	lr
  4003c0:	400e0600 	.word	0x400e0600

004003c4 <I2C_INSTANCE_init>:
{
	_pmc_enable_periph_clock(ID_TWIHS1);
}

void I2C_INSTANCE_init(void)
{
  4003c4:	b508      	push	{r3, lr}
	I2C_INSTANCE_CLOCK_init();
  4003c6:	4b03      	ldr	r3, [pc, #12]	; (4003d4 <I2C_INSTANCE_init+0x10>)
  4003c8:	4798      	blx	r3

	i2c_m_sync_init(&I2C_INSTANCE, TWIHS1);
  4003ca:	4903      	ldr	r1, [pc, #12]	; (4003d8 <I2C_INSTANCE_init+0x14>)
  4003cc:	4803      	ldr	r0, [pc, #12]	; (4003dc <I2C_INSTANCE_init+0x18>)
  4003ce:	4b04      	ldr	r3, [pc, #16]	; (4003e0 <I2C_INSTANCE_init+0x1c>)
  4003d0:	4798      	blx	r3
  4003d2:	bd08      	pop	{r3, pc}
  4003d4:	004003ad 	.word	0x004003ad
  4003d8:	4001c000 	.word	0x4001c000
  4003dc:	20400288 	.word	0x20400288
  4003e0:	004006f5 	.word	0x004006f5

004003e4 <USART_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003e4:	4b0b      	ldr	r3, [pc, #44]	; (400414 <USART_0_PORT_init+0x30>)
  4003e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  4003ec:	671a      	str	r2, [r3, #112]	; 0x70
  4003ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  4003f4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4003fa:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  400402:	671a      	str	r2, [r3, #112]	; 0x70
  400404:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
  40040a:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40040c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400410:	605a      	str	r2, [r3, #4]
  400412:	4770      	bx	lr
  400414:	400e0e00 	.word	0x400e0e00

00400418 <USART_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400418:	4b04      	ldr	r3, [pc, #16]	; (40042c <USART_0_CLOCK_init+0x14>)
  40041a:	699b      	ldr	r3, [r3, #24]
  40041c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400420:	d102      	bne.n	400428 <USART_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400422:	2280      	movs	r2, #128	; 0x80
  400424:	4b01      	ldr	r3, [pc, #4]	; (40042c <USART_0_CLOCK_init+0x14>)
  400426:	611a      	str	r2, [r3, #16]
  400428:	4770      	bx	lr
  40042a:	bf00      	nop
  40042c:	400e0600 	.word	0x400e0600

00400430 <USART_0_init>:
{
	_pmc_enable_periph_clock(ID_UART0);
}

void USART_0_init(void)
{
  400430:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
  400432:	4b06      	ldr	r3, [pc, #24]	; (40044c <USART_0_init+0x1c>)
  400434:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  400436:	4b06      	ldr	r3, [pc, #24]	; (400450 <USART_0_init+0x20>)
  400438:	4798      	blx	r3
  40043a:	4602      	mov	r2, r0
  40043c:	4905      	ldr	r1, [pc, #20]	; (400454 <USART_0_init+0x24>)
  40043e:	4806      	ldr	r0, [pc, #24]	; (400458 <USART_0_init+0x28>)
  400440:	4b06      	ldr	r3, [pc, #24]	; (40045c <USART_0_init+0x2c>)
  400442:	4798      	blx	r3
	USART_0_PORT_init();
  400444:	4b06      	ldr	r3, [pc, #24]	; (400460 <USART_0_init+0x30>)
  400446:	4798      	blx	r3
  400448:	bd08      	pop	{r3, pc}
  40044a:	bf00      	nop
  40044c:	00400419 	.word	0x00400419
  400450:	004017e5 	.word	0x004017e5
  400454:	400e0800 	.word	0x400e0800
  400458:	2040027c 	.word	0x2040027c
  40045c:	00400ab1 	.word	0x00400ab1
  400460:	004003e5 	.word	0x004003e5

00400464 <USART_1_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400464:	4b05      	ldr	r3, [pc, #20]	; (40047c <USART_1_CLOCK_init+0x18>)
  400466:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40046a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40046e:	d104      	bne.n	40047a <USART_1_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400470:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400474:	4b01      	ldr	r3, [pc, #4]	; (40047c <USART_1_CLOCK_init+0x18>)
  400476:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40047a:	4770      	bx	lr
  40047c:	400e0600 	.word	0x400e0600

00400480 <USART_1_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400480:	4b0b      	ldr	r3, [pc, #44]	; (4004b0 <USART_1_PORT_init+0x30>)
  400482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400484:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  400488:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40048a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40048c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  400490:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400492:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400496:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40049a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
  40049e:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  4004a6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4004ac:	605a      	str	r2, [r3, #4]
  4004ae:	4770      	bx	lr
  4004b0:	400e1400 	.word	0x400e1400

004004b4 <USART_1_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_1_init(void)
{
  4004b4:	b510      	push	{r4, lr}
  4004b6:	b082      	sub	sp, #8
	USART_1_CLOCK_init();
  4004b8:	4b07      	ldr	r3, [pc, #28]	; (4004d8 <USART_1_init+0x24>)
  4004ba:	4798      	blx	r3
	usart_async_init(&USART_1, UART4, USART_1_buffer, USART_1_BUFFER_SIZE, _uart_get_usart_async());
  4004bc:	4b07      	ldr	r3, [pc, #28]	; (4004dc <USART_1_init+0x28>)
  4004be:	4798      	blx	r3
  4004c0:	9000      	str	r0, [sp, #0]
  4004c2:	2310      	movs	r3, #16
  4004c4:	4a06      	ldr	r2, [pc, #24]	; (4004e0 <USART_1_init+0x2c>)
  4004c6:	4907      	ldr	r1, [pc, #28]	; (4004e4 <USART_1_init+0x30>)
  4004c8:	4807      	ldr	r0, [pc, #28]	; (4004e8 <USART_1_init+0x34>)
  4004ca:	4c08      	ldr	r4, [pc, #32]	; (4004ec <USART_1_init+0x38>)
  4004cc:	47a0      	blx	r4
	USART_1_PORT_init();
  4004ce:	4b08      	ldr	r3, [pc, #32]	; (4004f0 <USART_1_init+0x3c>)
  4004d0:	4798      	blx	r3
}
  4004d2:	b002      	add	sp, #8
  4004d4:	bd10      	pop	{r4, pc}
  4004d6:	bf00      	nop
  4004d8:	00400465 	.word	0x00400465
  4004dc:	004017e9 	.word	0x004017e9
  4004e0:	2040001c 	.word	0x2040001c
  4004e4:	400e1e00 	.word	0x400e1e00
  4004e8:	204002a8 	.word	0x204002a8
  4004ec:	0040094d 	.word	0x0040094d
  4004f0:	00400481 	.word	0x00400481

004004f4 <USB_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  4004f4:	4b05      	ldr	r3, [pc, #20]	; (40050c <USB_0_CLOCK_init+0x18>)
  4004f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  4004fa:	f013 0f04 	tst.w	r3, #4
  4004fe:	d103      	bne.n	400508 <USB_0_CLOCK_init+0x14>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400500:	2204      	movs	r2, #4
  400502:	4b02      	ldr	r3, [pc, #8]	; (40050c <USB_0_CLOCK_init+0x18>)
  400504:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400508:	4770      	bx	lr
  40050a:	bf00      	nop
  40050c:	400e0600 	.word	0x400e0600

00400510 <USB_0_init>:
{
	_pmc_enable_periph_clock(ID_USBHS);
}

void USB_0_init(void)
{
  400510:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
  400512:	4b02      	ldr	r3, [pc, #8]	; (40051c <USB_0_init+0xc>)
  400514:	4798      	blx	r3
	usb_d_init();
  400516:	4b02      	ldr	r3, [pc, #8]	; (400520 <USB_0_init+0x10>)
  400518:	4798      	blx	r3
  40051a:	bd08      	pop	{r3, pc}
  40051c:	004004f5 	.word	0x004004f5
  400520:	00400d4d 	.word	0x00400d4d

00400524 <system_init>:
}

void system_init(void)
{
  400524:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  400526:	4b20      	ldr	r3, [pc, #128]	; (4005a8 <system_init+0x84>)
  400528:	4798      	blx	r3
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40052a:	4b20      	ldr	r3, [pc, #128]	; (4005ac <system_init+0x88>)
  40052c:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40052e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400532:	d103      	bne.n	40053c <system_init+0x18>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400534:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400538:	4b1c      	ldr	r3, [pc, #112]	; (4005ac <system_init+0x88>)
  40053a:	611a      	str	r2, [r3, #16]
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40053c:	4b1b      	ldr	r3, [pc, #108]	; (4005ac <system_init+0x88>)
  40053e:	699b      	ldr	r3, [r3, #24]
  400540:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400544:	d103      	bne.n	40054e <system_init+0x2a>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40054a:	4b18      	ldr	r3, [pc, #96]	; (4005ac <system_init+0x88>)
  40054c:	611a      	str	r2, [r3, #16]
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40054e:	4a18      	ldr	r2, [pc, #96]	; (4005b0 <system_init+0x8c>)
  400550:	6853      	ldr	r3, [r2, #4]
  400552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400556:	6053      	str	r3, [r2, #4]
	((Pio *)hw)->PIO_OER = mask;
  400558:	4b16      	ldr	r3, [pc, #88]	; (4005b4 <system_init+0x90>)
  40055a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40055e:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_SODR = mask;
  400560:	631a      	str	r2, [r3, #48]	; 0x30
	((Pio *)hw)->PIO_PER = mask;
  400562:	601a      	str	r2, [r3, #0]
	((Pio *)hw)->PIO_OER = mask;
  400564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400568:	611a      	str	r2, [r3, #16]
	((Pio *)hw)->PIO_CODR = mask;
  40056a:	635a      	str	r2, [r3, #52]	; 0x34
	((Pio *)hw)->PIO_PUDR = mask;
  40056c:	661a      	str	r2, [r3, #96]	; 0x60
	((Pio *)hw)->PIO_PPDDR = mask;
  40056e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400572:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400574:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
  400578:	6719      	str	r1, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40057a:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40057c:	4311      	orrs	r1, r2
  40057e:	6759      	str	r1, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400580:	605a      	str	r2, [r3, #4]
	                      // <GPIO_PIN_FUNCTION_B"> B
	                      // <GPIO_PIN_FUNCTION_C"> C
	                      // <GPIO_PIN_FUNCTION_D"> D
	                      GPIO_PIN_FUNCTION_C);

	DAC_0_init();
  400582:	4b0d      	ldr	r3, [pc, #52]	; (4005b8 <system_init+0x94>)
  400584:	4798      	blx	r3
	EXTERNAL_IRQ_0_init();
  400586:	4b0d      	ldr	r3, [pc, #52]	; (4005bc <system_init+0x98>)
  400588:	4798      	blx	r3

	SPI_0_init();
  40058a:	4b0d      	ldr	r3, [pc, #52]	; (4005c0 <system_init+0x9c>)
  40058c:	4798      	blx	r3

	I2C_0_init();
  40058e:	4b0d      	ldr	r3, [pc, #52]	; (4005c4 <system_init+0xa0>)
  400590:	4798      	blx	r3

	I2C_INSTANCE_init();
  400592:	4b0d      	ldr	r3, [pc, #52]	; (4005c8 <system_init+0xa4>)
  400594:	4798      	blx	r3

	USART_0_init();
  400596:	4b0d      	ldr	r3, [pc, #52]	; (4005cc <system_init+0xa8>)
  400598:	4798      	blx	r3
	USART_1_init();
  40059a:	4b0d      	ldr	r3, [pc, #52]	; (4005d0 <system_init+0xac>)
  40059c:	4798      	blx	r3

	USB_0_init();
  40059e:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <system_init+0xb0>)
  4005a0:	4798      	blx	r3

	ext_irq_init();
  4005a2:	4b0d      	ldr	r3, [pc, #52]	; (4005d8 <system_init+0xb4>)
  4005a4:	4798      	blx	r3
  4005a6:	bd08      	pop	{r3, pc}
  4005a8:	00400ead 	.word	0x00400ead
  4005ac:	400e0600 	.word	0x400e0600
  4005b0:	400e1850 	.word	0x400e1850
  4005b4:	400e1200 	.word	0x400e1200
  4005b8:	00400271 	.word	0x00400271
  4005bc:	00400299 	.word	0x00400299
  4005c0:	00400315 	.word	0x00400315
  4005c4:	00400385 	.word	0x00400385
  4005c8:	004003c5 	.word	0x004003c5
  4005cc:	00400431 	.word	0x00400431
  4005d0:	004004b5 	.word	0x004004b5
  4005d4:	00400511 	.word	0x00400511
  4005d8:	00400671 	.word	0x00400671

004005dc <atomic_enter_critical>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005dc:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4005e0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4005e2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005e4:	f3bf 8f5f 	dmb	sy
  4005e8:	4770      	bx	lr

004005ea <atomic_leave_critical>:
  4005ea:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4005ee:	6803      	ldr	r3, [r0, #0]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4005f0:	f383 8810 	msr	PRIMASK, r3
  4005f4:	4770      	bx	lr
	...

004005f8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
  4005f8:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
  4005fa:	4604      	mov	r4, r0
  4005fc:	460d      	mov	r5, r1
  4005fe:	2800      	cmp	r0, #0
  400600:	bf18      	it	ne
  400602:	2900      	cmpne	r1, #0
  400604:	bf14      	ite	ne
  400606:	2001      	movne	r0, #1
  400608:	2000      	moveq	r0, #0
  40060a:	223c      	movs	r2, #60	; 0x3c
  40060c:	4907      	ldr	r1, [pc, #28]	; (40062c <dac_sync_init+0x34>)
  40060e:	4b08      	ldr	r3, [pc, #32]	; (400630 <dac_sync_init+0x38>)
  400610:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
  400612:	4629      	mov	r1, r5
  400614:	4620      	mov	r0, r4
  400616:	4b07      	ldr	r3, [pc, #28]	; (400634 <dac_sync_init+0x3c>)
  400618:	4798      	blx	r3
	if (rc) {
  40061a:	4602      	mov	r2, r0
  40061c:	b920      	cbnz	r0, 400628 <dac_sync_init+0x30>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
  40061e:	2300      	movs	r3, #0
  400620:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
  400622:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
  400624:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
  400626:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
  400628:	4610      	mov	r0, r2
  40062a:	bd38      	pop	{r3, r4, r5, pc}
  40062c:	004023d8 	.word	0x004023d8
  400630:	00400db5 	.word	0x00400db5
  400634:	00400f49 	.word	0x00400f49

00400638 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
  400638:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
  40063a:	4b0c      	ldr	r3, [pc, #48]	; (40066c <process_ext_irq+0x34>)
  40063c:	685c      	ldr	r4, [r3, #4]
  40063e:	42a0      	cmp	r0, r4
  400640:	d00e      	beq.n	400660 <process_ext_irq+0x28>
  400642:	2301      	movs	r3, #1
  400644:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
  400646:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
  400648:	25ff      	movs	r5, #255	; 0xff
  40064a:	e003      	b.n	400654 <process_ext_irq+0x1c>
  40064c:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
  40064e:	185a      	adds	r2, r3, r1
  400650:	0852      	lsrs	r2, r2, #1
  400652:	d104      	bne.n	40065e <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
  400654:	42a0      	cmp	r0, r4
  400656:	d9f9      	bls.n	40064c <process_ext_irq+0x14>
	while (upper >= lower) {
  400658:	b13b      	cbz	r3, 40066a <process_ext_irq+0x32>
			lower = middle + 1;
  40065a:	4631      	mov	r1, r6
  40065c:	e7f7      	b.n	40064e <process_ext_irq+0x16>
  40065e:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
  400660:	4b02      	ldr	r3, [pc, #8]	; (40066c <process_ext_irq+0x34>)
  400662:	681b      	ldr	r3, [r3, #0]
  400664:	b10b      	cbz	r3, 40066a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
  400666:	4798      	blx	r3
  400668:	bd70      	pop	{r4, r5, r6, pc}
  40066a:	bd70      	pop	{r4, r5, r6, pc}
  40066c:	2040002c 	.word	0x2040002c

00400670 <ext_irq_init>:
{
  400670:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
  400672:	4b05      	ldr	r3, [pc, #20]	; (400688 <ext_irq_init+0x18>)
  400674:	f04f 32ff 	mov.w	r2, #4294967295
  400678:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
  40067a:	2200      	movs	r2, #0
  40067c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
  40067e:	4803      	ldr	r0, [pc, #12]	; (40068c <ext_irq_init+0x1c>)
  400680:	4b03      	ldr	r3, [pc, #12]	; (400690 <ext_irq_init+0x20>)
  400682:	4798      	blx	r3
}
  400684:	bd08      	pop	{r3, pc}
  400686:	bf00      	nop
  400688:	2040002c 	.word	0x2040002c
  40068c:	00400639 	.word	0x00400639
  400690:	00401059 	.word	0x00401059

00400694 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
  400694:	b510      	push	{r4, lr}
  400696:	b084      	sub	sp, #16
  400698:	4614      	mov	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
  40069a:	8903      	ldrh	r3, [r0, #8]
  40069c:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  4006a0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
  4006a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4006a6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
  4006aa:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4006ac:	a901      	add	r1, sp, #4
  4006ae:	3814      	subs	r0, #20
  4006b0:	4b03      	ldr	r3, [pc, #12]	; (4006c0 <i2c_m_sync_write+0x2c>)
  4006b2:	4798      	blx	r3
	if (ret) {
		return ret;
	}

	return n;
}
  4006b4:	2800      	cmp	r0, #0
  4006b6:	bf08      	it	eq
  4006b8:	4620      	moveq	r0, r4
  4006ba:	b004      	add	sp, #16
  4006bc:	bd10      	pop	{r4, pc}
  4006be:	bf00      	nop
  4006c0:	00401355 	.word	0x00401355

004006c4 <i2c_m_sync_read>:
{
  4006c4:	b510      	push	{r4, lr}
  4006c6:	b084      	sub	sp, #16
  4006c8:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
  4006ca:	8903      	ldrh	r3, [r0, #8]
  4006cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
  4006d0:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
  4006d2:	f248 0301 	movw	r3, #32769	; 0x8001
  4006d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
  4006da:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
  4006dc:	a901      	add	r1, sp, #4
  4006de:	3814      	subs	r0, #20
  4006e0:	4b03      	ldr	r3, [pc, #12]	; (4006f0 <i2c_m_sync_read+0x2c>)
  4006e2:	4798      	blx	r3
}
  4006e4:	2800      	cmp	r0, #0
  4006e6:	bf08      	it	eq
  4006e8:	4620      	moveq	r0, r4
  4006ea:	b004      	add	sp, #16
  4006ec:	bd10      	pop	{r4, pc}
  4006ee:	bf00      	nop
  4006f0:	00401355 	.word	0x00401355

004006f4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
  4006f4:	b538      	push	{r3, r4, r5, lr}
  4006f6:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
  4006f8:	4604      	mov	r4, r0
  4006fa:	2268      	movs	r2, #104	; 0x68
  4006fc:	4908      	ldr	r1, [pc, #32]	; (400720 <i2c_m_sync_init+0x2c>)
  4006fe:	3000      	adds	r0, #0
  400700:	bf18      	it	ne
  400702:	2001      	movne	r0, #1
  400704:	4b07      	ldr	r3, [pc, #28]	; (400724 <i2c_m_sync_init+0x30>)
  400706:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
  400708:	4629      	mov	r1, r5
  40070a:	4620      	mov	r0, r4
  40070c:	4b06      	ldr	r3, [pc, #24]	; (400728 <i2c_m_sync_init+0x34>)
  40070e:	4798      	blx	r3
	if (init_status) {
  400710:	4603      	mov	r3, r0
  400712:	b918      	cbnz	r0, 40071c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
  400714:	4a05      	ldr	r2, [pc, #20]	; (40072c <i2c_m_sync_init+0x38>)
  400716:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
  400718:	4a05      	ldr	r2, [pc, #20]	; (400730 <i2c_m_sync_init+0x3c>)
  40071a:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
  40071c:	4618      	mov	r0, r3
  40071e:	bd38      	pop	{r3, r4, r5, pc}
  400720:	004023f4 	.word	0x004023f4
  400724:	00400db5 	.word	0x00400db5
  400728:	004012ed 	.word	0x004012ed
  40072c:	004006c5 	.word	0x004006c5
  400730:	00400695 	.word	0x00400695

00400734 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
  400734:	b570      	push	{r4, r5, r6, lr}
  400736:	460d      	mov	r5, r1
  400738:	4616      	mov	r6, r2
	ASSERT(io);
  40073a:	4604      	mov	r4, r0
  40073c:	22a2      	movs	r2, #162	; 0xa2
  40073e:	4907      	ldr	r1, [pc, #28]	; (40075c <_spi_m_dma_io_write+0x28>)
  400740:	3000      	adds	r0, #0
  400742:	bf18      	it	ne
  400744:	2001      	movne	r0, #1
  400746:	4b06      	ldr	r3, [pc, #24]	; (400760 <_spi_m_dma_io_write+0x2c>)
  400748:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);

	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
  40074a:	4633      	mov	r3, r6
  40074c:	2200      	movs	r2, #0
  40074e:	4629      	mov	r1, r5
  400750:	f1a4 001c 	sub.w	r0, r4, #28
  400754:	4c03      	ldr	r4, [pc, #12]	; (400764 <_spi_m_dma_io_write+0x30>)
  400756:	47a0      	blx	r4
}
  400758:	bd70      	pop	{r4, r5, r6, pc}
  40075a:	bf00      	nop
  40075c:	00402410 	.word	0x00402410
  400760:	00400db5 	.word	0x00400db5
  400764:	00401241 	.word	0x00401241

00400768 <_spi_m_dma_io_read>:
{
  400768:	b570      	push	{r4, r5, r6, lr}
  40076a:	460d      	mov	r5, r1
  40076c:	4616      	mov	r6, r2
	ASSERT(io);
  40076e:	4604      	mov	r4, r0
  400770:	228a      	movs	r2, #138	; 0x8a
  400772:	4907      	ldr	r1, [pc, #28]	; (400790 <_spi_m_dma_io_read+0x28>)
  400774:	3000      	adds	r0, #0
  400776:	bf18      	it	ne
  400778:	2001      	movne	r0, #1
  40077a:	4b06      	ldr	r3, [pc, #24]	; (400794 <_spi_m_dma_io_read+0x2c>)
  40077c:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
  40077e:	4633      	mov	r3, r6
  400780:	462a      	mov	r2, r5
  400782:	2100      	movs	r1, #0
  400784:	f1a4 001c 	sub.w	r0, r4, #28
  400788:	4c03      	ldr	r4, [pc, #12]	; (400798 <_spi_m_dma_io_read+0x30>)
  40078a:	47a0      	blx	r4
}
  40078c:	bd70      	pop	{r4, r5, r6, pc}
  40078e:	bf00      	nop
  400790:	00402410 	.word	0x00402410
  400794:	00400db5 	.word	0x00400db5
  400798:	00401241 	.word	0x00401241

0040079c <spi_m_dma_init>:
{
  40079c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && hw);
  40079e:	4604      	mov	r4, r0
  4007a0:	460d      	mov	r5, r1
  4007a2:	2800      	cmp	r0, #0
  4007a4:	bf18      	it	ne
  4007a6:	2900      	cmpne	r1, #0
  4007a8:	bf14      	ite	ne
  4007aa:	2001      	movne	r0, #1
  4007ac:	2000      	moveq	r0, #0
  4007ae:	223d      	movs	r2, #61	; 0x3d
  4007b0:	4907      	ldr	r1, [pc, #28]	; (4007d0 <spi_m_dma_init+0x34>)
  4007b2:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <spi_m_dma_init+0x38>)
  4007b4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4007b6:	6025      	str	r5, [r4, #0]
	rc = _spi_m_dma_init(&spi->dev, hw);
  4007b8:	4629      	mov	r1, r5
  4007ba:	4620      	mov	r0, r4
  4007bc:	4b06      	ldr	r3, [pc, #24]	; (4007d8 <spi_m_dma_init+0x3c>)
  4007be:	4798      	blx	r3
	if (rc) {
  4007c0:	4603      	mov	r3, r0
  4007c2:	b918      	cbnz	r0, 4007cc <spi_m_dma_init+0x30>
	spi->io.read  = _spi_m_dma_io_read;
  4007c4:	4a05      	ldr	r2, [pc, #20]	; (4007dc <spi_m_dma_init+0x40>)
  4007c6:	6222      	str	r2, [r4, #32]
	spi->io.write = _spi_m_dma_io_write;
  4007c8:	4a05      	ldr	r2, [pc, #20]	; (4007e0 <spi_m_dma_init+0x44>)
  4007ca:	61e2      	str	r2, [r4, #28]
}
  4007cc:	4618      	mov	r0, r3
  4007ce:	bd38      	pop	{r3, r4, r5, pc}
  4007d0:	00402410 	.word	0x00402410
  4007d4:	00400db5 	.word	0x00400db5
  4007d8:	0040119d 	.word	0x0040119d
  4007dc:	00400769 	.word	0x00400769
  4007e0:	00400735 	.word	0x00400735

004007e4 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  4007e4:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  4007e6:	2300      	movs	r3, #0
  4007e8:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  4007ea:	69c3      	ldr	r3, [r0, #28]
  4007ec:	b11b      	cbz	r3, 4007f6 <usart_transmission_complete+0x12>
  4007ee:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  4007f2:	4610      	mov	r0, r2
  4007f4:	4798      	blx	r3
  4007f6:	bd08      	pop	{r3, pc}

004007f8 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  4007f8:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  4007fa:	2300      	movs	r3, #0
  4007fc:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  4007fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400800:	b11b      	cbz	r3, 40080a <usart_error+0x12>
  400802:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  400806:	4610      	mov	r0, r2
  400808:	4798      	blx	r3
  40080a:	bd08      	pop	{r3, pc}

0040080c <usart_fill_rx_buffer>:
{
  40080c:	b538      	push	{r3, r4, r5, lr}
  40080e:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  400810:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  400814:	302c      	adds	r0, #44	; 0x2c
  400816:	4b03      	ldr	r3, [pc, #12]	; (400824 <usart_fill_rx_buffer+0x18>)
  400818:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  40081a:	6a23      	ldr	r3, [r4, #32]
  40081c:	b10b      	cbz	r3, 400822 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  40081e:	4628      	mov	r0, r5
  400820:	4798      	blx	r3
  400822:	bd38      	pop	{r3, r4, r5, pc}
  400824:	00400e49 	.word	0x00400e49

00400828 <usart_async_write>:
{
  400828:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr && buf && length);
  40082a:	460e      	mov	r6, r1
  40082c:	4615      	mov	r5, r2
  40082e:	2900      	cmp	r1, #0
  400830:	bf18      	it	ne
  400832:	2a00      	cmpne	r2, #0
  400834:	bf14      	ite	ne
  400836:	2301      	movne	r3, #1
  400838:	2300      	moveq	r3, #0
  40083a:	4604      	mov	r4, r0
  40083c:	f240 1245 	movw	r2, #325	; 0x145
  400840:	490f      	ldr	r1, [pc, #60]	; (400880 <usart_async_write+0x58>)
  400842:	2800      	cmp	r0, #0
  400844:	bf0c      	ite	eq
  400846:	2000      	moveq	r0, #0
  400848:	f003 0001 	andne.w	r0, r3, #1
  40084c:	4b0d      	ldr	r3, [pc, #52]	; (400884 <usart_async_write+0x5c>)
  40084e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  400850:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  400854:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  400858:	429a      	cmp	r2, r3
  40085a:	d10d      	bne.n	400878 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
  40085c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  40085e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  400862:	2300      	movs	r3, #0
  400864:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  400868:	2301      	movs	r3, #1
  40086a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  40086c:	f104 0008 	add.w	r0, r4, #8
  400870:	4b05      	ldr	r3, [pc, #20]	; (400888 <usart_async_write+0x60>)
  400872:	4798      	blx	r3
	return (int32_t)length;
  400874:	4628      	mov	r0, r5
  400876:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NO_RESOURCE;
  400878:	f06f 001b 	mvn.w	r0, #27
}
  40087c:	bd70      	pop	{r4, r5, r6, pc}
  40087e:	bf00      	nop
  400880:	0040242c 	.word	0x0040242c
  400884:	00400db5 	.word	0x00400db5
  400888:	00401799 	.word	0x00401799

0040088c <usart_process_byte_sent>:
{
  40088c:	b510      	push	{r4, lr}
  40088e:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  400890:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  400892:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  400896:	429a      	cmp	r2, r3
  400898:	d009      	beq.n	4008ae <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  40089a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40089c:	1c59      	adds	r1, r3, #1
  40089e:	8781      	strh	r1, [r0, #60]	; 0x3c
  4008a0:	5cd1      	ldrb	r1, [r2, r3]
  4008a2:	4b04      	ldr	r3, [pc, #16]	; (4008b4 <usart_process_byte_sent+0x28>)
  4008a4:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  4008a6:	4620      	mov	r0, r4
  4008a8:	4b03      	ldr	r3, [pc, #12]	; (4008b8 <usart_process_byte_sent+0x2c>)
  4008aa:	4798      	blx	r3
  4008ac:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  4008ae:	4b03      	ldr	r3, [pc, #12]	; (4008bc <usart_process_byte_sent+0x30>)
  4008b0:	4798      	blx	r3
  4008b2:	bd10      	pop	{r4, pc}
  4008b4:	00401701 	.word	0x00401701
  4008b8:	00401799 	.word	0x00401799
  4008bc:	004017bd 	.word	0x004017bd

004008c0 <usart_async_read>:
{
  4008c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4008c4:	b083      	sub	sp, #12
	ASSERT(descr && buf && length);
  4008c6:	4690      	mov	r8, r2
  4008c8:	1c14      	adds	r4, r2, #0
  4008ca:	bf18      	it	ne
  4008cc:	2401      	movne	r4, #1
  4008ce:	460f      	mov	r7, r1
  4008d0:	2900      	cmp	r1, #0
  4008d2:	bf0c      	ite	eq
  4008d4:	2300      	moveq	r3, #0
  4008d6:	f004 0301 	andne.w	r3, r4, #1
  4008da:	4681      	mov	r9, r0
  4008dc:	f44f 72b1 	mov.w	r2, #354	; 0x162
  4008e0:	4914      	ldr	r1, [pc, #80]	; (400934 <usart_async_read+0x74>)
  4008e2:	2800      	cmp	r0, #0
  4008e4:	bf0c      	ite	eq
  4008e6:	2000      	moveq	r0, #0
  4008e8:	f003 0001 	andne.w	r0, r3, #1
  4008ec:	4b12      	ldr	r3, [pc, #72]	; (400938 <usart_async_read+0x78>)
  4008ee:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  4008f0:	a801      	add	r0, sp, #4
  4008f2:	4b12      	ldr	r3, [pc, #72]	; (40093c <usart_async_read+0x7c>)
  4008f4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  4008f6:	f109 0934 	add.w	r9, r9, #52	; 0x34
  4008fa:	4648      	mov	r0, r9
  4008fc:	4b10      	ldr	r3, [pc, #64]	; (400940 <usart_async_read+0x80>)
  4008fe:	4798      	blx	r3
  400900:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  400902:	a801      	add	r0, sp, #4
  400904:	4b0f      	ldr	r3, [pc, #60]	; (400944 <usart_async_read+0x84>)
  400906:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  400908:	b18e      	cbz	r6, 40092e <usart_async_read+0x6e>
  40090a:	b184      	cbz	r4, 40092e <usart_async_read+0x6e>
  40090c:	2100      	movs	r1, #0
  40090e:	460c      	mov	r4, r1
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  400910:	4d0d      	ldr	r5, [pc, #52]	; (400948 <usart_async_read+0x88>)
  400912:	3401      	adds	r4, #1
  400914:	b2a4      	uxth	r4, r4
  400916:	4439      	add	r1, r7
  400918:	4648      	mov	r0, r9
  40091a:	47a8      	blx	r5
	while ((was_read < num) && (was_read < length)) {
  40091c:	4621      	mov	r1, r4
  40091e:	45a0      	cmp	r8, r4
  400920:	d901      	bls.n	400926 <usart_async_read+0x66>
  400922:	42a6      	cmp	r6, r4
  400924:	d8f5      	bhi.n	400912 <usart_async_read+0x52>
}
  400926:	4620      	mov	r0, r4
  400928:	b003      	add	sp, #12
  40092a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint16_t                       was_read = 0;
  40092e:	2400      	movs	r4, #0
  400930:	e7f9      	b.n	400926 <usart_async_read+0x66>
  400932:	bf00      	nop
  400934:	0040242c 	.word	0x0040242c
  400938:	00400db5 	.word	0x00400db5
  40093c:	004005dd 	.word	0x004005dd
  400940:	00400e89 	.word	0x00400e89
  400944:	004005eb 	.word	0x004005eb
  400948:	00400e05 	.word	0x00400e05

0040094c <usart_async_init>:
{
  40094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40094e:	4615      	mov	r5, r2
  400950:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400952:	4604      	mov	r4, r0
  400954:	460f      	mov	r7, r1
  400956:	2800      	cmp	r0, #0
  400958:	bf18      	it	ne
  40095a:	2900      	cmpne	r1, #0
  40095c:	bf14      	ite	ne
  40095e:	2001      	movne	r0, #1
  400960:	2000      	moveq	r0, #0
  400962:	d005      	beq.n	400970 <usart_async_init+0x24>
  400964:	2a00      	cmp	r2, #0
  400966:	bf18      	it	ne
  400968:	2b00      	cmpne	r3, #0
  40096a:	bf14      	ite	ne
  40096c:	2001      	movne	r0, #1
  40096e:	2000      	moveq	r0, #0
  400970:	2244      	movs	r2, #68	; 0x44
  400972:	4911      	ldr	r1, [pc, #68]	; (4009b8 <usart_async_init+0x6c>)
  400974:	4b11      	ldr	r3, [pc, #68]	; (4009bc <usart_async_init+0x70>)
  400976:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  400978:	4632      	mov	r2, r6
  40097a:	4629      	mov	r1, r5
  40097c:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400980:	4b0f      	ldr	r3, [pc, #60]	; (4009c0 <usart_async_init+0x74>)
  400982:	4798      	blx	r3
  400984:	b9a0      	cbnz	r0, 4009b0 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
  400986:	4639      	mov	r1, r7
  400988:	f104 0008 	add.w	r0, r4, #8
  40098c:	4b0d      	ldr	r3, [pc, #52]	; (4009c4 <usart_async_init+0x78>)
  40098e:	4798      	blx	r3
	if (init_status) {
  400990:	4603      	mov	r3, r0
  400992:	b958      	cbnz	r0, 4009ac <usart_async_init+0x60>
	descr->io.read  = usart_async_read;
  400994:	4a0c      	ldr	r2, [pc, #48]	; (4009c8 <usart_async_init+0x7c>)
  400996:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  400998:	4a0c      	ldr	r2, [pc, #48]	; (4009cc <usart_async_init+0x80>)
  40099a:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  40099c:	4a0c      	ldr	r2, [pc, #48]	; (4009d0 <usart_async_init+0x84>)
  40099e:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  4009a0:	4a0c      	ldr	r2, [pc, #48]	; (4009d4 <usart_async_init+0x88>)
  4009a2:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  4009a4:	4a0c      	ldr	r2, [pc, #48]	; (4009d8 <usart_async_init+0x8c>)
  4009a6:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  4009a8:	4a0c      	ldr	r2, [pc, #48]	; (4009dc <usart_async_init+0x90>)
  4009aa:	6162      	str	r2, [r4, #20]
}
  4009ac:	4618      	mov	r0, r3
  4009ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  4009b0:	f06f 030c 	mvn.w	r3, #12
  4009b4:	e7fa      	b.n	4009ac <usart_async_init+0x60>
  4009b6:	bf00      	nop
  4009b8:	0040242c 	.word	0x0040242c
  4009bc:	00400db5 	.word	0x00400db5
  4009c0:	00400dbd 	.word	0x00400dbd
  4009c4:	00401645 	.word	0x00401645
  4009c8:	004008c1 	.word	0x004008c1
  4009cc:	00400829 	.word	0x00400829
  4009d0:	0040088d 	.word	0x0040088d
  4009d4:	0040080d 	.word	0x0040080d
  4009d8:	004007e5 	.word	0x004007e5
  4009dc:	004007f9 	.word	0x004007f9

004009e0 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4009e4:	460f      	mov	r7, r1
  4009e6:	4691      	mov	r9, r2
  4009e8:	2900      	cmp	r1, #0
  4009ea:	bf18      	it	ne
  4009ec:	2a00      	cmpne	r2, #0
  4009ee:	bf14      	ite	ne
  4009f0:	2301      	movne	r3, #1
  4009f2:	2300      	moveq	r3, #0
  4009f4:	4604      	mov	r4, r0
  4009f6:	22fb      	movs	r2, #251	; 0xfb
  4009f8:	4910      	ldr	r1, [pc, #64]	; (400a3c <usart_sync_write+0x5c>)
  4009fa:	2800      	cmp	r0, #0
  4009fc:	bf0c      	ite	eq
  4009fe:	2000      	moveq	r0, #0
  400a00:	f003 0001 	andne.w	r0, r3, #1
  400a04:	4b0e      	ldr	r3, [pc, #56]	; (400a40 <usart_sync_write+0x60>)
  400a06:	4798      	blx	r3
	while (!_usart_sync_is_byte_sent(&descr->device))
  400a08:	3408      	adds	r4, #8
  400a0a:	4d0e      	ldr	r5, [pc, #56]	; (400a44 <usart_sync_write+0x64>)
  400a0c:	4620      	mov	r0, r4
  400a0e:	47a8      	blx	r5
  400a10:	2800      	cmp	r0, #0
  400a12:	d0fb      	beq.n	400a0c <usart_sync_write+0x2c>
  400a14:	3f01      	subs	r7, #1
  400a16:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400a18:	f8df 802c 	ldr.w	r8, [pc, #44]	; 400a48 <usart_sync_write+0x68>
		while (!_usart_sync_is_byte_sent(&descr->device))
  400a1c:	4d09      	ldr	r5, [pc, #36]	; (400a44 <usart_sync_write+0x64>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
  400a1e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  400a22:	4620      	mov	r0, r4
  400a24:	47c0      	blx	r8
		while (!_usart_sync_is_byte_sent(&descr->device))
  400a26:	4620      	mov	r0, r4
  400a28:	47a8      	blx	r5
  400a2a:	2800      	cmp	r0, #0
  400a2c:	d0fb      	beq.n	400a26 <usart_sync_write+0x46>
			;
	} while (++offset < length);
  400a2e:	3601      	adds	r6, #1
  400a30:	454e      	cmp	r6, r9
  400a32:	d3f4      	bcc.n	400a1e <usart_sync_write+0x3e>

	return (int32_t)offset;
}
  400a34:	4630      	mov	r0, r6
  400a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a3a:	bf00      	nop
  400a3c:	0040244c 	.word	0x0040244c
  400a40:	00400db5 	.word	0x00400db5
  400a44:	00401749 	.word	0x00401749
  400a48:	004016dd 	.word	0x004016dd

00400a4c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400a50:	460f      	mov	r7, r1
  400a52:	4691      	mov	r9, r2
  400a54:	2900      	cmp	r1, #0
  400a56:	bf18      	it	ne
  400a58:	2a00      	cmpne	r2, #0
  400a5a:	bf14      	ite	ne
  400a5c:	2301      	movne	r3, #1
  400a5e:	2300      	moveq	r3, #0
  400a60:	4604      	mov	r4, r0
  400a62:	f240 1215 	movw	r2, #277	; 0x115
  400a66:	490e      	ldr	r1, [pc, #56]	; (400aa0 <usart_sync_read+0x54>)
  400a68:	2800      	cmp	r0, #0
  400a6a:	bf0c      	ite	eq
  400a6c:	2000      	moveq	r0, #0
  400a6e:	f003 0001 	andne.w	r0, r3, #1
  400a72:	4b0c      	ldr	r3, [pc, #48]	; (400aa4 <usart_sync_read+0x58>)
  400a74:	4798      	blx	r3
  400a76:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
  400a78:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400a7a:	3408      	adds	r4, #8
  400a7c:	4d0a      	ldr	r5, [pc, #40]	; (400aa8 <usart_sync_read+0x5c>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400a7e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 400aac <usart_sync_read+0x60>
		while (!_usart_sync_is_byte_received(&descr->device))
  400a82:	4620      	mov	r0, r4
  400a84:	47a8      	blx	r5
  400a86:	2800      	cmp	r0, #0
  400a88:	d0fb      	beq.n	400a82 <usart_sync_read+0x36>
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400a8a:	4620      	mov	r0, r4
  400a8c:	47c0      	blx	r8
  400a8e:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
  400a92:	3601      	adds	r6, #1
  400a94:	454e      	cmp	r6, r9
  400a96:	d3f4      	bcc.n	400a82 <usart_sync_read+0x36>

	return (int32_t)offset;
}
  400a98:	4630      	mov	r0, r6
  400a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a9e:	bf00      	nop
  400aa0:	0040244c 	.word	0x0040244c
  400aa4:	00400db5 	.word	0x00400db5
  400aa8:	00401771 	.word	0x00401771
  400aac:	00401725 	.word	0x00401725

00400ab0 <usart_sync_init>:
{
  400ab0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400ab2:	4604      	mov	r4, r0
  400ab4:	460d      	mov	r5, r1
  400ab6:	2800      	cmp	r0, #0
  400ab8:	bf18      	it	ne
  400aba:	2900      	cmpne	r1, #0
  400abc:	bf14      	ite	ne
  400abe:	2001      	movne	r0, #1
  400ac0:	2000      	moveq	r0, #0
  400ac2:	223e      	movs	r2, #62	; 0x3e
  400ac4:	4907      	ldr	r1, [pc, #28]	; (400ae4 <usart_sync_init+0x34>)
  400ac6:	4b08      	ldr	r3, [pc, #32]	; (400ae8 <usart_sync_init+0x38>)
  400ac8:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  400aca:	4629      	mov	r1, r5
  400acc:	f104 0008 	add.w	r0, r4, #8
  400ad0:	4b06      	ldr	r3, [pc, #24]	; (400aec <usart_sync_init+0x3c>)
  400ad2:	4798      	blx	r3
	if (init_status) {
  400ad4:	4603      	mov	r3, r0
  400ad6:	b918      	cbnz	r0, 400ae0 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  400ad8:	4a05      	ldr	r2, [pc, #20]	; (400af0 <usart_sync_init+0x40>)
  400ada:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  400adc:	4a05      	ldr	r2, [pc, #20]	; (400af4 <usart_sync_init+0x44>)
  400ade:	6022      	str	r2, [r4, #0]
}
  400ae0:	4618      	mov	r0, r3
  400ae2:	bd38      	pop	{r3, r4, r5, pc}
  400ae4:	0040244c 	.word	0x0040244c
  400ae8:	00400db5 	.word	0x00400db5
  400aec:	0040160d 	.word	0x0040160d
  400af0:	00400a4d 	.word	0x00400a4d
  400af4:	004009e1 	.word	0x004009e1

00400af8 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  400af8:	4b0f      	ldr	r3, [pc, #60]	; (400b38 <_usb_d_find_ep+0x40>)
  400afa:	7859      	ldrb	r1, [r3, #1]
  400afc:	4288      	cmp	r0, r1
  400afe:	d018      	beq.n	400b32 <_usb_d_find_ep+0x3a>
{
  400b00:	b430      	push	{r4, r5}
  400b02:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  400b04:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  400b06:	f000 050f 	and.w	r5, r0, #15
  400b0a:	e007      	b.n	400b1c <_usb_d_find_ep+0x24>
  400b0c:	3301      	adds	r3, #1
  400b0e:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  400b10:	2b04      	cmp	r3, #4
  400b12:	d009      	beq.n	400b28 <_usb_d_find_ep+0x30>
  400b14:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
  400b16:	7851      	ldrb	r1, [r2, #1]
  400b18:	4281      	cmp	r1, r0
  400b1a:	d007      	beq.n	400b2c <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
  400b1c:	7814      	ldrb	r4, [r2, #0]
  400b1e:	2c00      	cmp	r4, #0
  400b20:	d1f4      	bne.n	400b0c <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
  400b22:	428d      	cmp	r5, r1
  400b24:	d1f2      	bne.n	400b0c <_usb_d_find_ep+0x14>
  400b26:	e001      	b.n	400b2c <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
  400b28:	f04f 33ff 	mov.w	r3, #4294967295
}
  400b2c:	4618      	mov	r0, r3
  400b2e:	bc30      	pop	{r4, r5}
  400b30:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  400b32:	2300      	movs	r3, #0
}
  400b34:	4618      	mov	r0, r3
  400b36:	4770      	bx	lr
  400b38:	20400034 	.word	0x20400034

00400b3c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
  400b3c:	2000      	movs	r0, #0
  400b3e:	4770      	bx	lr

00400b40 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
  400b40:	b538      	push	{r3, r4, r5, lr}
  400b42:	4604      	mov	r4, r0
  400b44:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
  400b46:	4b09      	ldr	r3, [pc, #36]	; (400b6c <usb_d_cb_trans_more+0x2c>)
  400b48:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
  400b4a:	4b09      	ldr	r3, [pc, #36]	; (400b70 <usb_d_cb_trans_more+0x30>)
  400b4c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  400b50:	789b      	ldrb	r3, [r3, #2]
  400b52:	2b03      	cmp	r3, #3
  400b54:	d001      	beq.n	400b5a <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
  400b56:	2000      	movs	r0, #0
}
  400b58:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
  400b5a:	4b05      	ldr	r3, [pc, #20]	; (400b70 <usb_d_cb_trans_more+0x30>)
  400b5c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  400b60:	6983      	ldr	r3, [r0, #24]
  400b62:	4629      	mov	r1, r5
  400b64:	4620      	mov	r0, r4
  400b66:	4798      	blx	r3
  400b68:	bd38      	pop	{r3, r4, r5, pc}
  400b6a:	bf00      	nop
  400b6c:	00400af9 	.word	0x00400af9
  400b70:	20400034 	.word	0x20400034

00400b74 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
  400b74:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b76:	b085      	sub	sp, #20
  400b78:	4606      	mov	r6, r0
  400b7a:	460d      	mov	r5, r1
  400b7c:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
  400b7e:	4b4d      	ldr	r3, [pc, #308]	; (400cb4 <_usb_d_cb_trans_done+0x140>)
  400b80:	4798      	blx	r3
  400b82:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
  400b84:	2d00      	cmp	r5, #0
  400b86:	d15b      	bne.n	400c40 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
  400b88:	4a4b      	ldr	r2, [pc, #300]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400b8a:	0143      	lsls	r3, r0, #5
  400b8c:	18d1      	adds	r1, r2, r3
  400b8e:	2000      	movs	r0, #0
  400b90:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  400b92:	5cd3      	ldrb	r3, [r2, r3]
  400b94:	b173      	cbz	r3, 400bb4 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  400b96:	4b48      	ldr	r3, [pc, #288]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400b98:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  400b9c:	2201      	movs	r2, #1
  400b9e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
  400ba0:	4845      	ldr	r0, [pc, #276]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400ba2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  400ba6:	69c3      	ldr	r3, [r0, #28]
  400ba8:	463a      	mov	r2, r7
  400baa:	78c1      	ldrb	r1, [r0, #3]
  400bac:	4630      	mov	r0, r6
  400bae:	4798      	blx	r3
}
  400bb0:	b005      	add	sp, #20
  400bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
  400bb4:	788b      	ldrb	r3, [r1, #2]
  400bb6:	2b03      	cmp	r3, #3
  400bb8:	d00b      	beq.n	400bd2 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
  400bba:	483f      	ldr	r0, [pc, #252]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400bbc:	eb00 1244 	add.w	r2, r0, r4, lsl #5
  400bc0:	4614      	mov	r4, r2
  400bc2:	69d3      	ldr	r3, [r2, #28]
  400bc4:	320c      	adds	r2, #12
  400bc6:	2100      	movs	r1, #0
  400bc8:	7860      	ldrb	r0, [r4, #1]
  400bca:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  400bcc:	2302      	movs	r3, #2
  400bce:	70a3      	strb	r3, [r4, #2]
  400bd0:	e7ee      	b.n	400bb0 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
  400bd2:	460b      	mov	r3, r1
  400bd4:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
  400bd8:	460a      	mov	r2, r1
  400bda:	69ce      	ldr	r6, [r1, #28]
  400bdc:	320c      	adds	r2, #12
  400bde:	2101      	movs	r1, #1
  400be0:	7858      	ldrb	r0, [r3, #1]
  400be2:	47b0      	blx	r6
		if (err) {
  400be4:	b1a0      	cbz	r0, 400c10 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
  400be6:	4b34      	ldr	r3, [pc, #208]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400be8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  400bec:	2205      	movs	r2, #5
  400bee:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
  400bf0:	2202      	movs	r2, #2
  400bf2:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
  400bf4:	2d00      	cmp	r5, #0
  400bf6:	db09      	blt.n	400c0c <_usb_d_cb_trans_done+0x98>
  400bf8:	482f      	ldr	r0, [pc, #188]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400bfa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  400bfe:	7840      	ldrb	r0, [r0, #1]
  400c00:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  400c04:	2101      	movs	r1, #1
  400c06:	4b2d      	ldr	r3, [pc, #180]	; (400cbc <_usb_d_cb_trans_done+0x148>)
  400c08:	4798      	blx	r3
  400c0a:	e7d1      	b.n	400bb0 <_usb_d_cb_trans_done+0x3c>
  400c0c:	7858      	ldrb	r0, [r3, #1]
  400c0e:	e7f9      	b.n	400c04 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
  400c10:	4829      	ldr	r0, [pc, #164]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400c12:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  400c16:	2304      	movs	r3, #4
  400c18:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
  400c1a:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
  400c1c:	2200      	movs	r2, #0
  400c1e:	9201      	str	r2, [sp, #4]
  400c20:	9202      	str	r2, [sp, #8]
  400c22:	4295      	cmp	r5, r2
  400c24:	bfac      	ite	ge
  400c26:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
  400c2a:	f003 030f 	andlt.w	r3, r3, #15
  400c2e:	f88d 300c 	strb.w	r3, [sp, #12]
  400c32:	2301      	movs	r3, #1
  400c34:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
  400c38:	a801      	add	r0, sp, #4
  400c3a:	4b21      	ldr	r3, [pc, #132]	; (400cc0 <_usb_d_cb_trans_done+0x14c>)
  400c3c:	4798      	blx	r3
  400c3e:	e7b7      	b.n	400bb0 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
  400c40:	2d01      	cmp	r5, #1
  400c42:	d00a      	beq.n	400c5a <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
  400c44:	2d02      	cmp	r5, #2
  400c46:	d01c      	beq.n	400c82 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
  400c48:	2d03      	cmp	r5, #3
  400c4a:	d02a      	beq.n	400ca2 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
  400c4c:	4b1a      	ldr	r3, [pc, #104]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400c4e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  400c52:	2206      	movs	r2, #6
  400c54:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
  400c56:	70da      	strb	r2, [r3, #3]
  400c58:	e7a2      	b.n	400ba0 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
  400c5a:	4a17      	ldr	r2, [pc, #92]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400c5c:	0143      	lsls	r3, r0, #5
  400c5e:	18d1      	adds	r1, r2, r3
  400c60:	2002      	movs	r0, #2
  400c62:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  400c64:	5cd3      	ldrb	r3, [r2, r3]
  400c66:	b12b      	cbz	r3, 400c74 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
  400c68:	4b13      	ldr	r3, [pc, #76]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400c6a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  400c6e:	2205      	movs	r2, #5
  400c70:	709a      	strb	r2, [r3, #2]
  400c72:	e795      	b.n	400ba0 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  400c74:	460b      	mov	r3, r1
  400c76:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  400c78:	2100      	movs	r1, #0
  400c7a:	4630      	mov	r0, r6
  400c7c:	4b0f      	ldr	r3, [pc, #60]	; (400cbc <_usb_d_cb_trans_done+0x148>)
  400c7e:	4798      	blx	r3
  400c80:	e78e      	b.n	400ba0 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
  400c82:	4a0d      	ldr	r2, [pc, #52]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400c84:	0143      	lsls	r3, r0, #5
  400c86:	18d1      	adds	r1, r2, r3
  400c88:	2004      	movs	r0, #4
  400c8a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
  400c8c:	5cd3      	ldrb	r3, [r2, r3]
  400c8e:	b12b      	cbz	r3, 400c9c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
  400c90:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400c92:	eb03 1344 	add.w	r3, r3, r4, lsl #5
  400c96:	2201      	movs	r2, #1
  400c98:	709a      	strb	r2, [r3, #2]
  400c9a:	e781      	b.n	400ba0 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
  400c9c:	2302      	movs	r3, #2
  400c9e:	708b      	strb	r3, [r1, #2]
			return;
  400ca0:	e786      	b.n	400bb0 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
  400ca2:	4b05      	ldr	r3, [pc, #20]	; (400cb8 <_usb_d_cb_trans_done+0x144>)
  400ca4:	eb03 1340 	add.w	r3, r3, r0, lsl #5
  400ca8:	2200      	movs	r2, #0
  400caa:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
  400cac:	2205      	movs	r2, #5
  400cae:	70da      	strb	r2, [r3, #3]
  400cb0:	e776      	b.n	400ba0 <_usb_d_cb_trans_done+0x2c>
  400cb2:	bf00      	nop
  400cb4:	00400af9 	.word	0x00400af9
  400cb8:	20400034 	.word	0x20400034
  400cbc:	00401ef9 	.word	0x00401ef9
  400cc0:	0040209d 	.word	0x0040209d

00400cc4 <usb_d_cb_trans_setup>:
{
  400cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400cc8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
  400cca:	4b1c      	ldr	r3, [pc, #112]	; (400d3c <usb_d_cb_trans_setup+0x78>)
  400ccc:	4798      	blx	r3
  400cce:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
  400cd0:	4c1b      	ldr	r4, [pc, #108]	; (400d40 <usb_d_cb_trans_setup+0x7c>)
  400cd2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
  400cd6:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
  400cd8:	4621      	mov	r1, r4
  400cda:	4628      	mov	r0, r5
  400cdc:	4b19      	ldr	r3, [pc, #100]	; (400d44 <usb_d_cb_trans_setup+0x80>)
  400cde:	4798      	blx	r3
	if (n != 8) {
  400ce0:	b2c0      	uxtb	r0, r0
  400ce2:	2808      	cmp	r0, #8
  400ce4:	d009      	beq.n	400cfa <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  400ce6:	2101      	movs	r1, #1
  400ce8:	4628      	mov	r0, r5
  400cea:	4c17      	ldr	r4, [pc, #92]	; (400d48 <usb_d_cb_trans_setup+0x84>)
  400cec:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  400cee:	2101      	movs	r1, #1
  400cf0:	f045 0080 	orr.w	r0, r5, #128	; 0x80
  400cf4:	47a0      	blx	r4
		return;
  400cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
  400cfa:	2100      	movs	r1, #0
  400cfc:	4628      	mov	r0, r5
  400cfe:	4f12      	ldr	r7, [pc, #72]	; (400d48 <usb_d_cb_trans_setup+0x84>)
  400d00:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
  400d02:	f045 0880 	orr.w	r8, r5, #128	; 0x80
  400d06:	2100      	movs	r1, #0
  400d08:	4640      	mov	r0, r8
  400d0a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
  400d0c:	4b0c      	ldr	r3, [pc, #48]	; (400d40 <usb_d_cb_trans_setup+0x7c>)
  400d0e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
  400d12:	2201      	movs	r2, #1
  400d14:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
  400d16:	695b      	ldr	r3, [r3, #20]
  400d18:	4621      	mov	r1, r4
  400d1a:	4628      	mov	r0, r5
  400d1c:	4798      	blx	r3
  400d1e:	b108      	cbz	r0, 400d24 <usb_d_cb_trans_setup+0x60>
  400d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
  400d24:	4b06      	ldr	r3, [pc, #24]	; (400d40 <usb_d_cb_trans_setup+0x7c>)
  400d26:	eb03 1646 	add.w	r6, r3, r6, lsl #5
  400d2a:	2305      	movs	r3, #5
  400d2c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
  400d2e:	2101      	movs	r1, #1
  400d30:	4628      	mov	r0, r5
  400d32:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
  400d34:	2101      	movs	r1, #1
  400d36:	4640      	mov	r0, r8
  400d38:	47b8      	blx	r7
  400d3a:	e7f1      	b.n	400d20 <usb_d_cb_trans_setup+0x5c>
  400d3c:	00400af9 	.word	0x00400af9
  400d40:	20400034 	.word	0x20400034
  400d44:	00402039 	.word	0x00402039
  400d48:	00401ef9 	.word	0x00401ef9

00400d4c <usb_d_init>:

int32_t usb_d_init(void)
{
  400d4c:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
  400d4e:	4b11      	ldr	r3, [pc, #68]	; (400d94 <usb_d_init+0x48>)
  400d50:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
  400d52:	2800      	cmp	r0, #0
  400d54:	db1c      	blt.n	400d90 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
  400d56:	4c10      	ldr	r4, [pc, #64]	; (400d98 <usb_d_init+0x4c>)
  400d58:	2280      	movs	r2, #128	; 0x80
  400d5a:	2100      	movs	r1, #0
  400d5c:	4620      	mov	r0, r4
  400d5e:	4b0f      	ldr	r3, [pc, #60]	; (400d9c <usb_d_init+0x50>)
  400d60:	4798      	blx	r3
  400d62:	4623      	mov	r3, r4
  400d64:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  400d68:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  400d6a:	4a0d      	ldr	r2, [pc, #52]	; (400da0 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
  400d6c:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
  400d6e:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
  400d70:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
  400d72:	61da      	str	r2, [r3, #28]
  400d74:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
  400d76:	4283      	cmp	r3, r0
  400d78:	d1f8      	bne.n	400d6c <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
  400d7a:	490a      	ldr	r1, [pc, #40]	; (400da4 <usb_d_init+0x58>)
  400d7c:	2000      	movs	r0, #0
  400d7e:	4c0a      	ldr	r4, [pc, #40]	; (400da8 <usb_d_init+0x5c>)
  400d80:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
  400d82:	490a      	ldr	r1, [pc, #40]	; (400dac <usb_d_init+0x60>)
  400d84:	2001      	movs	r0, #1
  400d86:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
  400d88:	4909      	ldr	r1, [pc, #36]	; (400db0 <usb_d_init+0x64>)
  400d8a:	2002      	movs	r0, #2
  400d8c:	47a0      	blx	r4
	return ERR_NONE;
  400d8e:	2000      	movs	r0, #0
}
  400d90:	bd10      	pop	{r4, pc}
  400d92:	bf00      	nop
  400d94:	00401ea9 	.word	0x00401ea9
  400d98:	20400034 	.word	0x20400034
  400d9c:	004023c7 	.word	0x004023c7
  400da0:	00400b3d 	.word	0x00400b3d
  400da4:	00400cc5 	.word	0x00400cc5
  400da8:	004021ed 	.word	0x004021ed
  400dac:	00400b41 	.word	0x00400b41
  400db0:	00400b75 	.word	0x00400b75

00400db4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400db4:	b900      	cbnz	r0, 400db8 <assert+0x4>
		__asm("BKPT #0");
  400db6:	be00      	bkpt	0x0000
  400db8:	4770      	bx	lr
	...

00400dbc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  400dbc:	b570      	push	{r4, r5, r6, lr}
	ASSERT(rb && buf && size);
  400dbe:	460e      	mov	r6, r1
  400dc0:	4615      	mov	r5, r2
  400dc2:	2900      	cmp	r1, #0
  400dc4:	bf18      	it	ne
  400dc6:	2a00      	cmpne	r2, #0
  400dc8:	bf14      	ite	ne
  400dca:	2301      	movne	r3, #1
  400dcc:	2300      	moveq	r3, #0
  400dce:	4604      	mov	r4, r0
  400dd0:	2232      	movs	r2, #50	; 0x32
  400dd2:	490a      	ldr	r1, [pc, #40]	; (400dfc <ringbuffer_init+0x40>)
  400dd4:	2800      	cmp	r0, #0
  400dd6:	bf0c      	ite	eq
  400dd8:	2000      	moveq	r0, #0
  400dda:	f003 0001 	andne.w	r0, r3, #1
  400dde:	4b08      	ldr	r3, [pc, #32]	; (400e00 <ringbuffer_init+0x44>)
  400de0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  400de2:	1e6b      	subs	r3, r5, #1
  400de4:	421d      	tst	r5, r3
  400de6:	d105      	bne.n	400df4 <ringbuffer_init+0x38>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  400de8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  400dea:	2000      	movs	r0, #0
  400dec:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  400dee:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  400df0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  400df2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
  400df4:	f06f 000c 	mvn.w	r0, #12
}
  400df8:	bd70      	pop	{r4, r5, r6, pc}
  400dfa:	bf00      	nop
  400dfc:	00402468 	.word	0x00402468
  400e00:	00400db5 	.word	0x00400db5

00400e04 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  400e04:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  400e06:	4604      	mov	r4, r0
  400e08:	460d      	mov	r5, r1
  400e0a:	2800      	cmp	r0, #0
  400e0c:	bf18      	it	ne
  400e0e:	2900      	cmpne	r1, #0
  400e10:	bf14      	ite	ne
  400e12:	2001      	movne	r0, #1
  400e14:	2000      	moveq	r0, #0
  400e16:	224a      	movs	r2, #74	; 0x4a
  400e18:	4909      	ldr	r1, [pc, #36]	; (400e40 <ringbuffer_get+0x3c>)
  400e1a:	4b0a      	ldr	r3, [pc, #40]	; (400e44 <ringbuffer_get+0x40>)
  400e1c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  400e1e:	68a3      	ldr	r3, [r4, #8]
  400e20:	68e2      	ldr	r2, [r4, #12]
  400e22:	429a      	cmp	r2, r3
  400e24:	d009      	beq.n	400e3a <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  400e26:	6862      	ldr	r2, [r4, #4]
  400e28:	4013      	ands	r3, r2
  400e2a:	6822      	ldr	r2, [r4, #0]
  400e2c:	5cd3      	ldrb	r3, [r2, r3]
  400e2e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  400e30:	68a3      	ldr	r3, [r4, #8]
  400e32:	3301      	adds	r3, #1
  400e34:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  400e36:	2000      	movs	r0, #0
  400e38:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  400e3a:	f06f 0009 	mvn.w	r0, #9
}
  400e3e:	bd38      	pop	{r3, r4, r5, pc}
  400e40:	00402468 	.word	0x00402468
  400e44:	00400db5 	.word	0x00400db5

00400e48 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  400e48:	b538      	push	{r3, r4, r5, lr}
  400e4a:	460d      	mov	r5, r1
	ASSERT(rb);
  400e4c:	4604      	mov	r4, r0
  400e4e:	225b      	movs	r2, #91	; 0x5b
  400e50:	490b      	ldr	r1, [pc, #44]	; (400e80 <ringbuffer_put+0x38>)
  400e52:	3000      	adds	r0, #0
  400e54:	bf18      	it	ne
  400e56:	2001      	movne	r0, #1
  400e58:	4b0a      	ldr	r3, [pc, #40]	; (400e84 <ringbuffer_put+0x3c>)
  400e5a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  400e5c:	68e3      	ldr	r3, [r4, #12]
  400e5e:	6862      	ldr	r2, [r4, #4]
  400e60:	4013      	ands	r3, r2
  400e62:	6822      	ldr	r2, [r4, #0]
  400e64:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  400e66:	68e3      	ldr	r3, [r4, #12]
  400e68:	6861      	ldr	r1, [r4, #4]
  400e6a:	68a2      	ldr	r2, [r4, #8]
  400e6c:	1a9a      	subs	r2, r3, r2
  400e6e:	428a      	cmp	r2, r1
  400e70:	d901      	bls.n	400e76 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  400e72:	1a59      	subs	r1, r3, r1
  400e74:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  400e76:	3301      	adds	r3, #1
  400e78:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  400e7a:	2000      	movs	r0, #0
  400e7c:	bd38      	pop	{r3, r4, r5, pc}
  400e7e:	bf00      	nop
  400e80:	00402468 	.word	0x00402468
  400e84:	00400db5 	.word	0x00400db5

00400e88 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  400e88:	b510      	push	{r4, lr}
	ASSERT(rb);
  400e8a:	4604      	mov	r4, r0
  400e8c:	2271      	movs	r2, #113	; 0x71
  400e8e:	4905      	ldr	r1, [pc, #20]	; (400ea4 <ringbuffer_num+0x1c>)
  400e90:	3000      	adds	r0, #0
  400e92:	bf18      	it	ne
  400e94:	2001      	movne	r0, #1
  400e96:	4b04      	ldr	r3, [pc, #16]	; (400ea8 <ringbuffer_num+0x20>)
  400e98:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  400e9a:	68e0      	ldr	r0, [r4, #12]
  400e9c:	68a3      	ldr	r3, [r4, #8]
}
  400e9e:	1ac0      	subs	r0, r0, r3
  400ea0:	bd10      	pop	{r4, pc}
  400ea2:	bf00      	nop
  400ea4:	00402468 	.word	0x00402468
  400ea8:	00400db5 	.word	0x00400db5

00400eac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400eac:	b500      	push	{lr}
  400eae:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400eb0:	a801      	add	r0, sp, #4
  400eb2:	4b0e      	ldr	r3, [pc, #56]	; (400eec <_init_chip+0x40>)
  400eb4:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400eb6:	4a0e      	ldr	r2, [pc, #56]	; (400ef0 <_init_chip+0x44>)
  400eb8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb");
  400ec4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ec8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400ecc:	a801      	add	r0, sp, #4
  400ece:	4b09      	ldr	r3, [pc, #36]	; (400ef4 <_init_chip+0x48>)
  400ed0:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400ed2:	4a09      	ldr	r2, [pc, #36]	; (400ef8 <_init_chip+0x4c>)
  400ed4:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400ed6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400eda:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
	((Efc *)hw)->EEFC_FMR = tmp;
  400ede:	6013      	str	r3, [r2, #0]

#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();
#endif
	_pmc_init();
  400ee0:	4b06      	ldr	r3, [pc, #24]	; (400efc <_init_chip+0x50>)
  400ee2:	4798      	blx	r3
}
  400ee4:	b003      	add	sp, #12
  400ee6:	f85d fb04 	ldr.w	pc, [sp], #4
  400eea:	bf00      	nop
  400eec:	004005dd 	.word	0x004005dd
  400ef0:	e000ed00 	.word	0xe000ed00
  400ef4:	004005eb 	.word	0x004005eb
  400ef8:	400e0c00 	.word	0x400e0c00
  400efc:	004010c9 	.word	0x004010c9

00400f00 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
  400f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(hw);
  400f02:	4604      	mov	r4, r0
  400f04:	1c06      	adds	r6, r0, #0
  400f06:	bf18      	it	ne
  400f08:	2601      	movne	r6, #1
  400f0a:	4f0c      	ldr	r7, [pc, #48]	; (400f3c <_dac_init+0x3c>)
  400f0c:	f240 1201 	movw	r2, #257	; 0x101
  400f10:	4639      	mov	r1, r7
  400f12:	4630      	mov	r0, r6
  400f14:	4d0a      	ldr	r5, [pc, #40]	; (400f40 <_dac_init+0x40>)
  400f16:	47a8      	blx	r5
}

static inline void hri_dacc_write_CR_reg(const void *const hw, hri_dacc_cr_reg_t data)
{
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_CR = data;
  400f18:	2301      	movs	r3, #1
  400f1a:	6023      	str	r3, [r4, #0]
	((Dacc *)hw)->DACC_CHDR = data;
  400f1c:	2303      	movs	r3, #3
  400f1e:	6163      	str	r3, [r4, #20]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _dac_write_protection_disable(void *const hw)
{
	ASSERT(hw);
  400f20:	f44f 72af 	mov.w	r2, #350	; 0x15e
  400f24:	4639      	mov	r1, r7
  400f26:	4630      	mov	r0, r6
  400f28:	47a8      	blx	r5
}

static inline void hri_dacc_write_WPMR_reg(const void *const hw, hri_dacc_wpmr_reg_t data)
{
	DACC_CRITICAL_SECTION_ENTER();
	((Dacc *)hw)->DACC_WPMR = data;
  400f2a:	4b06      	ldr	r3, [pc, #24]	; (400f44 <_dac_init+0x44>)
  400f2c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Dacc *)hw)->DACC_MR = data;
  400f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400f34:	6063      	str	r3, [r4, #4]
	((Dacc *)hw)->DACC_TRIGR = data;
  400f36:	2000      	movs	r0, #0
  400f38:	60a0      	str	r0, [r4, #8]
}
  400f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f3c:	0040248c 	.word	0x0040248c
  400f40:	00400db5 	.word	0x00400db5
  400f44:	44414300 	.word	0x44414300

00400f48 <_dac_sync_init>:
{
  400f48:	b538      	push	{r3, r4, r5, lr}
  400f4a:	460c      	mov	r4, r1
	ASSERT(device);
  400f4c:	4605      	mov	r5, r0
  400f4e:	225d      	movs	r2, #93	; 0x5d
  400f50:	4905      	ldr	r1, [pc, #20]	; (400f68 <_dac_sync_init+0x20>)
  400f52:	3000      	adds	r0, #0
  400f54:	bf18      	it	ne
  400f56:	2001      	movne	r0, #1
  400f58:	4b04      	ldr	r3, [pc, #16]	; (400f6c <_dac_sync_init+0x24>)
  400f5a:	4798      	blx	r3
	device->hw = hw;
  400f5c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
  400f5e:	4620      	mov	r0, r4
  400f60:	4b03      	ldr	r3, [pc, #12]	; (400f70 <_dac_sync_init+0x28>)
  400f62:	4798      	blx	r3
}
  400f64:	bd38      	pop	{r3, r4, r5, pc}
  400f66:	bf00      	nop
  400f68:	0040248c 	.word	0x0040248c
  400f6c:	00400db5 	.word	0x00400db5
  400f70:	00400f01 	.word	0x00400f01

00400f74 <_ffs>:
/* Find the first bit set */
static int _ffs(uint32_t *v, uint8_t len)
{
	uint32_t i, j, bit;

	for (i = 0; i < len; i++) {
  400f74:	b1d9      	cbz	r1, 400fae <_ffs+0x3a>
{
  400f76:	b430      	push	{r4, r5}
  400f78:	460d      	mov	r5, r1
  400f7a:	3804      	subs	r0, #4
	for (i = 0; i < len; i++) {
  400f7c:	2400      	movs	r4, #0
		bit = 1;
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
			if (v[i] & bit) {
  400f7e:	f850 1f04 	ldr.w	r1, [r0, #4]!
  400f82:	f011 0f01 	tst.w	r1, #1
  400f86:	d10d      	bne.n	400fa4 <_ffs+0x30>
  400f88:	2301      	movs	r3, #1
  400f8a:	2202      	movs	r2, #2
  400f8c:	4211      	tst	r1, r2
  400f8e:	d10a      	bne.n	400fa6 <_ffs+0x32>
				return i * 32 + j;
			}
			bit <<= 1;
  400f90:	0052      	lsls	r2, r2, #1
		for (j = 0; j < sizeof(uint32_t) * 8; j++) {
  400f92:	3301      	adds	r3, #1
  400f94:	2b20      	cmp	r3, #32
  400f96:	d1f9      	bne.n	400f8c <_ffs+0x18>
	for (i = 0; i < len; i++) {
  400f98:	3401      	adds	r4, #1
  400f9a:	42ac      	cmp	r4, r5
  400f9c:	d1ef      	bne.n	400f7e <_ffs+0xa>
		}
	}

	return -1;
  400f9e:	f04f 30ff 	mov.w	r0, #4294967295
  400fa2:	e002      	b.n	400faa <_ffs+0x36>
			if (v[i] & bit) {
  400fa4:	2300      	movs	r3, #0
				return i * 32 + j;
  400fa6:	eb03 1044 	add.w	r0, r3, r4, lsl #5
}
  400faa:	bc30      	pop	{r4, r5}
  400fac:	4770      	bx	lr
	return -1;
  400fae:	f04f 30ff 	mov.w	r0, #4294967295
  400fb2:	4770      	bx	lr

00400fb4 <PIOB_Handler>:
#endif
	}
}

void PIOB_Handler(void)
{
  400fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fb8:	b086      	sub	sp, #24
	uint32_t flag_total = 0, flags[5] = {
  400fba:	2300      	movs	r3, #0
  400fbc:	9301      	str	r3, [sp, #4]
  400fbe:	9302      	str	r3, [sp, #8]
  400fc0:	9303      	str	r3, [sp, #12]
  400fc2:	9304      	str	r3, [sp, #16]
  400fc4:	9305      	str	r3, [sp, #20]
	ASSERT(callback);
  400fc6:	4b1f      	ldr	r3, [pc, #124]	; (401044 <PIOB_Handler+0x90>)
  400fc8:	6818      	ldr	r0, [r3, #0]
  400fca:	22e9      	movs	r2, #233	; 0xe9
  400fcc:	491e      	ldr	r1, [pc, #120]	; (401048 <PIOB_Handler+0x94>)
  400fce:	3000      	adds	r0, #0
  400fd0:	bf18      	it	ne
  400fd2:	2001      	movne	r0, #1
  400fd4:	4b1d      	ldr	r3, [pc, #116]	; (40104c <PIOB_Handler+0x98>)
  400fd6:	4798      	blx	r3
	return ((Pio *)hw)->PIO_ISR;
  400fd8:	4a1d      	ldr	r2, [pc, #116]	; (401050 <PIOB_Handler+0x9c>)
  400fda:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  400fdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
	flags[1] &= hri_pio_read_IMR_reg(PIOB);
  400fde:	4013      	ands	r3, r2
  400fe0:	9302      	str	r3, [sp, #8]
	while (flag_total) {
  400fe2:	b35b      	cbz	r3, 40103c <PIOB_Handler+0x88>
		pos = _ffs(flags, 5);
  400fe4:	4d1b      	ldr	r5, [pc, #108]	; (401054 <PIOB_Handler+0xa0>)
			callback(pos);
  400fe6:	4f17      	ldr	r7, [pc, #92]	; (401044 <PIOB_Handler+0x90>)
	return ((Pio *)hw)->PIO_ISR;
  400fe8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 401050 <PIOB_Handler+0x9c>
		pos = _ffs(flags, 5);
  400fec:	2105      	movs	r1, #5
  400fee:	a801      	add	r0, sp, #4
  400ff0:	47a8      	blx	r5
  400ff2:	b244      	sxtb	r4, r0
		while (-1 != pos) {
  400ff4:	f1b4 3fff 	cmp.w	r4, #4294967295
  400ff8:	d018      	beq.n	40102c <PIOB_Handler+0x78>
			flags[pos >> 5] &= ~(1 << (pos & 31));
  400ffa:	2601      	movs	r6, #1
			callback(pos);
  400ffc:	4620      	mov	r0, r4
  400ffe:	683b      	ldr	r3, [r7, #0]
  401000:	4798      	blx	r3
			flags[pos >> 5] &= ~(1 << (pos & 31));
  401002:	1163      	asrs	r3, r4, #5
  401004:	aa06      	add	r2, sp, #24
  401006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40100a:	f004 041f 	and.w	r4, r4, #31
  40100e:	fa06 f404 	lsl.w	r4, r6, r4
  401012:	f853 2c14 	ldr.w	r2, [r3, #-20]
  401016:	ea22 0404 	bic.w	r4, r2, r4
  40101a:	f843 4c14 	str.w	r4, [r3, #-20]
			pos = _ffs(flags, 5);
  40101e:	2105      	movs	r1, #5
  401020:	a801      	add	r0, sp, #4
  401022:	47a8      	blx	r5
  401024:	b244      	sxtb	r4, r0
		while (-1 != pos) {
  401026:	f1b4 3fff 	cmp.w	r4, #4294967295
  40102a:	d1e7      	bne.n	400ffc <PIOB_Handler+0x48>
  40102c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
	return ((Pio *)hw)->PIO_IMR;
  401030:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
		flags[1] &= hri_pio_read_IMR_reg(PIOB);
  401034:	4013      	ands	r3, r2
  401036:	9302      	str	r3, [sp, #8]
	while (flag_total) {
  401038:	2b00      	cmp	r3, #0
  40103a:	d1d7      	bne.n	400fec <PIOB_Handler+0x38>
	_ext_irq_handler();
}
  40103c:	b006      	add	sp, #24
  40103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401042:	bf00      	nop
  401044:	204000b4 	.word	0x204000b4
  401048:	004024a4 	.word	0x004024a4
  40104c:	00400db5 	.word	0x00400db5
  401050:	400e1000 	.word	0x400e1000
  401054:	00400f75 	.word	0x00400f75

00401058 <_ext_irq_init>:

	return ERR_NONE;
}

int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
  401058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40105a:	4607      	mov	r7, r0
	ASSERT(hw);
  40105c:	4d15      	ldr	r5, [pc, #84]	; (4010b4 <_ext_irq_init+0x5c>)
  40105e:	f240 1245 	movw	r2, #325	; 0x145
  401062:	4629      	mov	r1, r5
  401064:	2001      	movs	r0, #1
  401066:	4c14      	ldr	r4, [pc, #80]	; (4010b8 <_ext_irq_init+0x60>)
  401068:	47a0      	blx	r4
	ASSERT(hw);
  40106a:	22d1      	movs	r2, #209	; 0xd1
  40106c:	4629      	mov	r1, r5
  40106e:	2001      	movs	r0, #1
  401070:	47a0      	blx	r4
	ASSERT(hw);
  401072:	22c3      	movs	r2, #195	; 0xc3
  401074:	4629      	mov	r1, r5
  401076:	2001      	movs	r0, #1
  401078:	47a0      	blx	r4
	((Pio *)hw)->PIO_AIMER = mask;
  40107a:	4b10      	ldr	r3, [pc, #64]	; (4010bc <_ext_irq_init+0x64>)
  40107c:	2001      	movs	r0, #1
  40107e:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
	((Pio *)hw)->PIO_ESR = mask;
  401082:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	((Pio *)hw)->PIO_LSR = mask;
  401086:	2600      	movs	r6, #0
  401088:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
	((Pio *)hw)->PIO_FELLSR = mask;
  40108c:	f8c3 60d0 	str.w	r6, [r3, #208]	; 0xd0
	((Pio *)hw)->PIO_REHLSR = mask;
  401090:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
  401094:	22c3      	movs	r2, #195	; 0xc3
  401096:	4629      	mov	r1, r5
  401098:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40109a:	4b09      	ldr	r3, [pc, #36]	; (4010c0 <_ext_irq_init+0x68>)
  40109c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4010a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4010a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4010a8:	601a      	str	r2, [r3, #0]

#if CONF_EXTIRQ_4_ENABLE == 1 && defined(PIOE)
	_pio_init(PIOE);
#endif

	callback = cb;
  4010aa:	4b06      	ldr	r3, [pc, #24]	; (4010c4 <_ext_irq_init+0x6c>)
  4010ac:	601f      	str	r7, [r3, #0]

	return ERR_NONE;
}
  4010ae:	4630      	mov	r0, r6
  4010b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010b2:	bf00      	nop
  4010b4:	004024a4 	.word	0x004024a4
  4010b8:	00400db5 	.word	0x00400db5
  4010bc:	400e1000 	.word	0x400e1000
  4010c0:	e000e100 	.word	0xe000e100
  4010c4:	204000b4 	.word	0x204000b4

004010c8 <_pmc_init>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  4010c8:	4926      	ldr	r1, [pc, #152]	; (401164 <_pmc_init+0x9c>)
  4010ca:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  4010cc:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4010d0:	4b25      	ldr	r3, [pc, #148]	; (401168 <_pmc_init+0xa0>)
  4010d2:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4010d4:	620b      	str	r3, [r1, #32]
	return ((Pmc *)hw)->PMC_PMMR;
}

static inline bool hri_pmc_get_SR_MOSCXTS_bit(const void *const hw)
{
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4010d6:	460a      	mov	r2, r1
  4010d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4010da:	f013 0f01 	tst.w	r3, #1
  4010de:	d0fb      	beq.n	4010d8 <_pmc_init+0x10>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4010e0:	4b20      	ldr	r3, [pc, #128]	; (401164 <_pmc_init+0x9c>)
  4010e2:	6a19      	ldr	r1, [r3, #32]
  4010e4:	4a21      	ldr	r2, [pc, #132]	; (40116c <_pmc_init+0xa4>)
  4010e6:	430a      	orrs	r2, r1
  4010e8:	621a      	str	r2, [r3, #32]
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4010ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4010ec:	4a20      	ldr	r2, [pc, #128]	; (401170 <_pmc_init+0xa8>)
  4010ee:	400a      	ands	r2, r1
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4010f0:	629a      	str	r2, [r3, #40]	; 0x28
	((Pmc *)hw)->CKGR_PLLAR = data;
  4010f2:	4a20      	ldr	r2, [pc, #128]	; (401174 <_pmc_init+0xac>)
  4010f4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_pmc_get_SR_LOCKA_bit(const void *const hw)
{
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4010f6:	461a      	mov	r2, r3
  4010f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4010fa:	f013 0f02 	tst.w	r3, #2
  4010fe:	d0fb      	beq.n	4010f8 <_pmc_init+0x30>
	((Pmc *)hw)->CKGR_UCKR = data;
  401100:	f44f 0271 	mov.w	r2, #15794176	; 0xf10000
  401104:	4b17      	ldr	r3, [pc, #92]	; (401164 <_pmc_init+0x9c>)
  401106:	61da      	str	r2, [r3, #28]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
}

static inline bool hri_pmc_get_SR_LOCKU_bit(const void *const hw)
{
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKU) > 0;
  401108:	461a      	mov	r2, r3
  40110a:	6e93      	ldr	r3, [r2, #104]	; 0x68
#endif

#if (CONF_UPLLCK_ENABLE == 1)
	data = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
	hri_pmc_write_CKGR_UCKR_reg(PMC, (CKGR_UCKR_UPLLEN | data));
	while (!hri_pmc_get_SR_LOCKU_bit(PMC)) {
  40110c:	f013 0f40 	tst.w	r3, #64	; 0x40
  401110:	d0fb      	beq.n	40110a <_pmc_init+0x42>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401112:	4a14      	ldr	r2, [pc, #80]	; (401164 <_pmc_init+0x9c>)
  401114:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp |= value << PMC_MCKR_UPLLDIV2_Pos;
  401116:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
	((Pmc *)hw)->PMC_MCKR = tmp;
  40111a:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40111c:	6e93      	ldr	r3, [r2, #104]	; 0x68
static void _pmc_init_master_clock(void)
{
#if (CONF_CLK_MCKR_ENABLE == 1)
#if (CONF_UPLLCK_ENABLE == 1)
	hri_pmc_write_MCKR_UPLLDIV2_bit(PMC, CONF_UPLLCKDIV_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40111e:	f013 0f08 	tst.w	r3, #8
  401122:	d0fb      	beq.n	40111c <_pmc_init+0x54>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401124:	4a0f      	ldr	r2, [pc, #60]	; (401164 <_pmc_init+0x9c>)
  401126:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  401128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	((Pmc *)hw)->PMC_MCKR = tmp;
  40112c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40112e:	6e93      	ldr	r3, [r2, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401130:	f013 0f08 	tst.w	r3, #8
  401134:	d0fb      	beq.n	40112e <_pmc_init+0x66>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401136:	4a0b      	ldr	r2, [pc, #44]	; (401164 <_pmc_init+0x9c>)
  401138:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40113a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  40113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  401142:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  401144:	6e93      	ldr	r3, [r2, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401146:	f013 0f08 	tst.w	r3, #8
  40114a:	d0fb      	beq.n	401144 <_pmc_init+0x7c>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40114c:	4a05      	ldr	r2, [pc, #20]	; (401164 <_pmc_init+0x9c>)
  40114e:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  401150:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  401154:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  401158:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40115a:	6e93      	ldr	r3, [r2, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40115c:	f013 0f08 	tst.w	r3, #8
  401160:	d0fb      	beq.n	40115a <_pmc_init+0x92>
{
	_pmc_init_sources();
	_pmc_init_master_clock();
	_pmc_init_program_clock();
	_pmc_init_fs_clock();
}
  401162:	4770      	bx	lr
  401164:	400e0600 	.word	0x400e0600
  401168:	00373e01 	.word	0x00373e01
  40116c:	01370000 	.word	0x01370000
  401170:	f800ffff 	.word	0xf800ffff
  401174:	20183f01 	.word	0x20183f01

00401178 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
  401178:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
  40117a:	6883      	ldr	r3, [r0, #8]
  40117c:	689b      	ldr	r3, [r3, #8]
  40117e:	b103      	cbz	r3, 401182 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
  401180:	4798      	blx	r3
  401182:	bd08      	pop	{r3, pc}

00401184 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
  401184:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
  401186:	6883      	ldr	r3, [r0, #8]
  401188:	685b      	ldr	r3, [r3, #4]
  40118a:	b103      	cbz	r3, 40118e <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
  40118c:	4798      	blx	r3
  40118e:	bd08      	pop	{r3, pc}

00401190 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the SPI device instance.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
  401190:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
  401192:	6883      	ldr	r3, [r0, #8]
  401194:	68db      	ldr	r3, [r3, #12]
  401196:	b103      	cbz	r3, 40119a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
  401198:	4798      	blx	r3
  40119a:	bd08      	pop	{r3, pc}

0040119c <_spi_m_dma_init>:
	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  40119c:	4b1f      	ldr	r3, [pc, #124]	; (40121c <_spi_m_dma_init+0x80>)
  40119e:	440b      	add	r3, r1
		if (spi_regs[i].number == n) {
  4011a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
			return &spi_regs[i];
  4011a4:	2b05      	cmp	r3, #5
  4011a6:	4b1e      	ldr	r3, [pc, #120]	; (401220 <_spi_m_dma_init+0x84>)
  4011a8:	bf18      	it	ne
  4011aa:	2300      	movne	r3, #0
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  4011ac:	690a      	ldr	r2, [r1, #16]
{
	struct _spi_m_dma_dev *    spid = dev;
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	/* Do hardware initialize. */
	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  4011ae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
  4011b2:	d130      	bne.n	401216 <_spi_m_dma_init+0x7a>
{
  4011b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4011b8:	4604      	mov	r4, r0
		return ERR_DENIED;
	}

	spid->prvt = hw;
  4011ba:	6001      	str	r1, [r0, #0]
	((Spi *)hw)->SPI_CR = data;
  4011bc:	2280      	movs	r2, #128	; 0x80
  4011be:	600a      	str	r2, [r1, #0]
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4011c0:	6858      	ldr	r0, [r3, #4]
  4011c2:	4a18      	ldr	r2, [pc, #96]	; (401224 <_spi_m_dma_init+0x88>)
  4011c4:	4002      	ands	r2, r0
  4011c6:	600a      	str	r2, [r1, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4011c8:	689a      	ldr	r2, [r3, #8]
  4011ca:	4817      	ldr	r0, [pc, #92]	; (401228 <_spi_m_dma_init+0x8c>)
  4011cc:	4010      	ands	r0, r2
  4011ce:	4a17      	ldr	r2, [pc, #92]	; (40122c <_spi_m_dma_init+0x90>)
  4011d0:	4302      	orrs	r2, r0
	((Spi *)hw)->SPI_MR = data;
  4011d2:	604a      	str	r2, [r1, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4011d4:	68db      	ldr	r3, [r3, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  4011d6:	630b      	str	r3, [r1, #48]	; 0x30

	/* Initialize callbacks: must use them */
	spid->callbacks.error = NULL;
  4011d8:	2500      	movs	r5, #0
  4011da:	60e5      	str	r5, [r4, #12]
	spid->callbacks.rx    = NULL;
  4011dc:	60a5      	str	r5, [r4, #8]
	spid->callbacks.tx    = NULL;
  4011de:	6065      	str	r5, [r4, #4]

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
  4011e0:	f104 0818 	add.w	r8, r4, #24
  4011e4:	2101      	movs	r1, #1
  4011e6:	4640      	mov	r0, r8
  4011e8:	4f11      	ldr	r7, [pc, #68]	; (401230 <_spi_m_dma_init+0x94>)
  4011ea:	47b8      	blx	r7
	dev->resource->back                 = dev;
  4011ec:	69a3      	ldr	r3, [r4, #24]
  4011ee:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
  4011f0:	69a3      	ldr	r3, [r4, #24]
  4011f2:	4a10      	ldr	r2, [pc, #64]	; (401234 <_spi_m_dma_init+0x98>)
  4011f4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  4011f6:	69a3      	ldr	r3, [r4, #24]
  4011f8:	4e0f      	ldr	r6, [pc, #60]	; (401238 <_spi_m_dma_init+0x9c>)
  4011fa:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
  4011fc:	4629      	mov	r1, r5
  4011fe:	4640      	mov	r0, r8
  401200:	47b8      	blx	r7
	dev->resource->back                 = dev;
  401202:	69a3      	ldr	r3, [r4, #24]
  401204:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
  401206:	69a3      	ldr	r3, [r4, #24]
  401208:	4a0c      	ldr	r2, [pc, #48]	; (40123c <_spi_m_dma_init+0xa0>)
  40120a:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
  40120c:	69a3      	ldr	r3, [r4, #24]
  40120e:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
  401210:	4628      	mov	r0, r5
  401212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_DENIED;
  401216:	f06f 0010 	mvn.w	r0, #16
  40121a:	4770      	bx	lr
  40121c:	bfff8000 	.word	0xbfff8000
  401220:	004024c0 	.word	0x004024c0
  401224:	feffff7c 	.word	0xfeffff7c
  401228:	fff1ff6f 	.word	0xfff1ff6f
  40122c:	000e0010 	.word	0x000e0010
  401230:	004022b9 	.word	0x004022b9
  401234:	00401179 	.word	0x00401179
  401238:	00401191 	.word	0x00401191
  40123c:	00401185 	.word	0x00401185

00401240 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
  401240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401244:	4605      	mov	r5, r0
  401246:	460e      	mov	r6, r1
  401248:	461f      	mov	r7, r3
	const struct spi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
  40124a:	6801      	ldr	r1, [r0, #0]
	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  40124c:	4b20      	ldr	r3, [pc, #128]	; (4012d0 <_spi_m_dma_transfer+0x90>)
  40124e:	440b      	add	r3, r1
		if (spi_regs[i].number == n) {
  401250:	f3c3 4307 	ubfx	r3, r3, #16, #8
			return &spi_regs[i];
  401254:	2b05      	cmp	r3, #5
  401256:	4c1f      	ldr	r4, [pc, #124]	; (4012d4 <_spi_m_dma_transfer+0x94>)
  401258:	bf18      	it	ne
  40125a:	2400      	movne	r4, #0
	uint8_t                    rx_ch = _spi_get_rx_dma_channel(dev->prvt);
	uint8_t                    tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
  40125c:	b182      	cbz	r2, 401280 <_spi_m_dma_transfer+0x40>
  40125e:	4690      	mov	r8, r2
		/* Enable spi rx */
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
  401260:	3108      	adds	r1, #8
  401262:	2001      	movs	r0, #1
  401264:	4b1c      	ldr	r3, [pc, #112]	; (4012d8 <_spi_m_dma_transfer+0x98>)
  401266:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
  401268:	4641      	mov	r1, r8
  40126a:	2001      	movs	r0, #1
  40126c:	4b1b      	ldr	r3, [pc, #108]	; (4012dc <_spi_m_dma_transfer+0x9c>)
  40126e:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
  401270:	4639      	mov	r1, r7
  401272:	2001      	movs	r0, #1
  401274:	4b1a      	ldr	r3, [pc, #104]	; (4012e0 <_spi_m_dma_transfer+0xa0>)
  401276:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
  401278:	2100      	movs	r1, #0
  40127a:	2001      	movs	r0, #1
  40127c:	4b19      	ldr	r3, [pc, #100]	; (4012e4 <_spi_m_dma_transfer+0xa4>)
  40127e:	4798      	blx	r3
	}

	if (txbuf) {
  401280:	b19e      	cbz	r6, 4012aa <_spi_m_dma_transfer+0x6a>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
  401282:	4631      	mov	r1, r6
  401284:	2000      	movs	r0, #0
  401286:	4b14      	ldr	r3, [pc, #80]	; (4012d8 <_spi_m_dma_transfer+0x98>)
  401288:	4798      	blx	r3
	return (uint32_t) & (((Spi *)hw)->SPI_TDR);
  40128a:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  40128c:	310c      	adds	r1, #12
  40128e:	2000      	movs	r0, #0
  401290:	4b12      	ldr	r3, [pc, #72]	; (4012dc <_spi_m_dma_transfer+0x9c>)
  401292:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  401294:	4639      	mov	r1, r7
  401296:	2000      	movs	r0, #0
  401298:	4b11      	ldr	r3, [pc, #68]	; (4012e0 <_spi_m_dma_transfer+0xa0>)
  40129a:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
  40129c:	2100      	movs	r1, #0
  40129e:	4608      	mov	r0, r1
  4012a0:	4b10      	ldr	r3, [pc, #64]	; (4012e4 <_spi_m_dma_transfer+0xa4>)
  4012a2:	4798      	blx	r3

	return ERR_NONE;
}
  4012a4:	2000      	movs	r0, #0
  4012a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
  4012aa:	f104 0110 	add.w	r1, r4, #16
  4012ae:	2000      	movs	r0, #0
  4012b0:	4b09      	ldr	r3, [pc, #36]	; (4012d8 <_spi_m_dma_transfer+0x98>)
  4012b2:	4798      	blx	r3
	return (uint32_t) & (((Spi *)hw)->SPI_TDR);
  4012b4:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
  4012b6:	310c      	adds	r1, #12
  4012b8:	2000      	movs	r0, #0
  4012ba:	4b08      	ldr	r3, [pc, #32]	; (4012dc <_spi_m_dma_transfer+0x9c>)
  4012bc:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
  4012be:	2100      	movs	r1, #0
  4012c0:	4608      	mov	r0, r1
  4012c2:	4b09      	ldr	r3, [pc, #36]	; (4012e8 <_spi_m_dma_transfer+0xa8>)
  4012c4:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
  4012c6:	4639      	mov	r1, r7
  4012c8:	2000      	movs	r0, #0
  4012ca:	4b05      	ldr	r3, [pc, #20]	; (4012e0 <_spi_m_dma_transfer+0xa0>)
  4012cc:	4798      	blx	r3
  4012ce:	e7e5      	b.n	40129c <_spi_m_dma_transfer+0x5c>
  4012d0:	bfff8000 	.word	0xbfff8000
  4012d4:	004024c0 	.word	0x004024c0
  4012d8:	0040222d 	.word	0x0040222d
  4012dc:	0040221d 	.word	0x0040221d
  4012e0:	00402289 	.word	0x00402289
  4012e4:	004022a1 	.word	0x004022a1
  4012e8:	0040223d 	.word	0x0040223d

004012ec <_i2c_m_sync_init>:
	}
	return NULL;
}

int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const dev, void *const hw)
{
  4012ec:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  4012ee:	4605      	mov	r5, r0
  4012f0:	460c      	mov	r4, r1
  4012f2:	2800      	cmp	r0, #0
  4012f4:	bf18      	it	ne
  4012f6:	2900      	cmpne	r1, #0
  4012f8:	bf14      	ite	ne
  4012fa:	2001      	movne	r0, #1
  4012fc:	2000      	moveq	r0, #0
  4012fe:	2288      	movs	r2, #136	; 0x88
  401300:	4910      	ldr	r1, [pc, #64]	; (401344 <_i2c_m_sync_init+0x58>)
  401302:	4b11      	ldr	r3, [pc, #68]	; (401348 <_i2c_m_sync_init+0x5c>)
  401304:	4798      	blx	r3

	const struct _i2cm_sync_cfg *cfg;

	dev->hw = hw;
  401306:	612c      	str	r4, [r5, #16]
		if (_i2cm_sync_cfgs[i].hw == hw) {
  401308:	4b10      	ldr	r3, [pc, #64]	; (40134c <_i2c_m_sync_init+0x60>)
  40130a:	429c      	cmp	r4, r3
  40130c:	d018      	beq.n	401340 <_i2c_m_sync_init+0x54>
  40130e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
  401312:	429c      	cmp	r4, r3
  401314:	d00d      	beq.n	401332 <_i2c_m_sync_init+0x46>
	return NULL;
  401316:	2300      	movs	r3, #0
	cfg     = _get_i2cm_sync_cfg(dev->hw);

	// hri_twihs_write_CR_reg(hw, TWIHS_CR_SWRST);
	// hri_twihs_read_RHR_reg(hw);
	hri_twihs_write_CR_reg(dev->hw, cfg->ctrl);
  401318:	685a      	ldr	r2, [r3, #4]
}

static inline void hri_twihs_write_CR_reg(const void *const hw, hri_twihs_cr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_CR = data;
  40131a:	6022      	str	r2, [r4, #0]
	hri_twihs_write_SMBTR_reg(dev->hw, cfg->smbtr);
  40131c:	692a      	ldr	r2, [r5, #16]
  40131e:	6899      	ldr	r1, [r3, #8]
}

static inline void hri_twihs_write_SMBTR_reg(const void *const hw, hri_twihs_smbtr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_SMBTR = data;
  401320:	6391      	str	r1, [r2, #56]	; 0x38
	hri_twihs_write_FILTR_reg(dev->hw, cfg->filtr);
  401322:	692a      	ldr	r2, [r5, #16]
  401324:	68d9      	ldr	r1, [r3, #12]
}

static inline void hri_twihs_write_FILTR_reg(const void *const hw, hri_twihs_filtr_reg_t data)
{
	TWIHS_CRITICAL_SECTION_ENTER();
	((Twihs *)hw)->TWIHS_FILTR = data;
  401326:	6451      	str	r1, [r2, #68]	; 0x44
	hri_twihs_write_CWGR_reg(dev->hw, cfg->cwgr);
  401328:	692a      	ldr	r2, [r5, #16]
  40132a:	691b      	ldr	r3, [r3, #16]
	((Twihs *)hw)->TWIHS_CWGR = data;
  40132c:	6113      	str	r3, [r2, #16]

	return ERR_NONE;
}
  40132e:	2000      	movs	r0, #0
  401330:	bd38      	pop	{r3, r4, r5, pc}
		if (_i2cm_sync_cfgs[i].hw == hw) {
  401332:	2201      	movs	r2, #1
			return &(_i2cm_sync_cfgs[i]);
  401334:	0053      	lsls	r3, r2, #1
  401336:	441a      	add	r2, r3
  401338:	4b05      	ldr	r3, [pc, #20]	; (401350 <_i2c_m_sync_init+0x64>)
  40133a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40133e:	e7eb      	b.n	401318 <_i2c_m_sync_init+0x2c>
		if (_i2cm_sync_cfgs[i].hw == hw) {
  401340:	2200      	movs	r2, #0
  401342:	e7f7      	b.n	401334 <_i2c_m_sync_init+0x48>
  401344:	00402504 	.word	0x00402504
  401348:	00400db5 	.word	0x00400db5
  40134c:	40018000 	.word	0x40018000
  401350:	004024d4 	.word	0x004024d4

00401354 <_i2c_m_sync_transfer>:

	return ERR_NONE;
}

int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
  401354:	b570      	push	{r4, r5, r6, lr}
	ASSERT(dev && msg);
  401356:	4605      	mov	r5, r0
  401358:	460c      	mov	r4, r1
  40135a:	2800      	cmp	r0, #0
  40135c:	bf18      	it	ne
  40135e:	2900      	cmpne	r1, #0
  401360:	bf14      	ite	ne
  401362:	2001      	movne	r0, #1
  401364:	2000      	moveq	r0, #0
  401366:	22ca      	movs	r2, #202	; 0xca
  401368:	4951      	ldr	r1, [pc, #324]	; (4014b0 <_i2c_m_sync_transfer+0x15c>)
  40136a:	4b52      	ldr	r3, [pc, #328]	; (4014b4 <_i2c_m_sync_transfer+0x160>)
  40136c:	4798      	blx	r3

	if (dev->service.msg.flags & I2C_M_BUSY) {
  40136e:	886b      	ldrh	r3, [r5, #2]
  401370:	f413 7f80 	tst.w	r3, #256	; 0x100
  401374:	f040 8098 	bne.w	4014a8 <_i2c_m_sync_transfer+0x154>
		return I2C_ERR_BUSY;
	}

	if (msg->flags & I2C_M_RD) {
  401378:	8863      	ldrh	r3, [r4, #2]
  40137a:	f013 0f01 	tst.w	r3, #1
  40137e:	d11d      	bne.n	4013bc <_i2c_m_sync_transfer+0x68>
{
	uint32_t i;
	uint32_t sr;
	int      ret = ERR_NONE;

	msg->flags |= I2C_M_BUSY;
  401380:	8863      	ldrh	r3, [r4, #2]
  401382:	b29b      	uxth	r3, r3
  401384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  401388:	8063      	strh	r3, [r4, #2]

	if (msg->addr & I2C_M_TEN) {
  40138a:	8823      	ldrh	r3, [r4, #0]
  40138c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401390:	d05e      	beq.n	401450 <_i2c_m_sync_transfer+0xfc>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1));
  401392:	692a      	ldr	r2, [r5, #16]
  401394:	0a1b      	lsrs	r3, r3, #8
  401396:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  40139a:	041b      	lsls	r3, r3, #16
  40139c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Twihs *)hw)->TWIHS_MMR = data;
  4013a4:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  4013a6:	692b      	ldr	r3, [r5, #16]
  4013a8:	7822      	ldrb	r2, [r4, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  4013aa:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
	}

	for (i = 0; i < msg->len; i++) {
  4013ac:	6863      	ldr	r3, [r4, #4]
  4013ae:	2b00      	cmp	r3, #0
  4013b0:	d065      	beq.n	40147e <_i2c_m_sync_transfer+0x12a>
  4013b2:	2000      	movs	r0, #0
  4013b4:	4601      	mov	r1, r0
		/* Wait for data is transferred from TWIHS_THR or if NACK is detected */
		do {
			sr = hri_twihs_read_SR_reg(dev->hw);
			if (sr & TWIHS_SR_NACK) {
				ret = I2C_NACK;
  4013b6:	f06f 0601 	mvn.w	r6, #1
  4013ba:	e057      	b.n	40146c <_i2c_m_sync_transfer+0x118>

static inline int32_t _i2c_m_sync_read(struct _i2c_m_sync_device *const dev, struct _i2c_m_msg *msg)
{
	uint32_t i;

	msg->flags |= I2C_M_BUSY;
  4013bc:	8863      	ldrh	r3, [r4, #2]
  4013be:	b29b      	uxth	r3, r3
  4013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4013c4:	8063      	strh	r3, [r4, #2]

	if (msg->addr & I2C_M_TEN) {
  4013c6:	8823      	ldrh	r3, [r4, #0]
  4013c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4013cc:	d018      	beq.n	401400 <_i2c_m_sync_transfer+0xac>
		hri_twihs_write_MMR_reg(dev->hw,
  4013ce:	692a      	ldr	r2, [r5, #16]
		                        TWIHS_MMR_DADR(0x78 | (msg->addr >> 8)) | TWIHS_MMR_IADRSZ(1) | TWIHS_MMR_MREAD);
  4013d0:	0a1b      	lsrs	r3, r3, #8
  4013d2:	f043 0378 	orr.w	r3, r3, #120	; 0x78
  4013d6:	041b      	lsls	r3, r3, #16
  4013d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4013dc:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
	((Twihs *)hw)->TWIHS_MMR = data;
  4013e0:	6053      	str	r3, [r2, #4]
		hri_twihs_write_IADR_reg(dev->hw, msg->addr & 0xff);
  4013e2:	692b      	ldr	r3, [r5, #16]
  4013e4:	7822      	ldrb	r2, [r4, #0]
	((Twihs *)hw)->TWIHS_IADR = data;
  4013e6:	60da      	str	r2, [r3, #12]
	} else {
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
	}
	/* In single data byte master read, the START and STOP must both be set */
	hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_START | ((msg->len == 1) ? TWIHS_CR_STOP : 0));
  4013e8:	692b      	ldr	r3, [r5, #16]
  4013ea:	6862      	ldr	r2, [r4, #4]
  4013ec:	2a01      	cmp	r2, #1
  4013ee:	bf0c      	ite	eq
  4013f0:	2203      	moveq	r2, #3
  4013f2:	2201      	movne	r2, #1
	((Twihs *)hw)->TWIHS_CR = data;
  4013f4:	601a      	str	r2, [r3, #0]

	for (i = 0; i < msg->len; i++) {
  4013f6:	6863      	ldr	r3, [r4, #4]
  4013f8:	b1eb      	cbz	r3, 401436 <_i2c_m_sync_transfer+0xe2>
  4013fa:	2100      	movs	r1, #0
  4013fc:	2002      	movs	r0, #2
  4013fe:	e00b      	b.n	401418 <_i2c_m_sync_transfer+0xc4>
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr) | TWIHS_MMR_MREAD);
  401400:	692a      	ldr	r2, [r5, #16]
  401402:	041b      	lsls	r3, r3, #16
  401404:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	((Twihs *)hw)->TWIHS_MMR = data;
  40140c:	6053      	str	r3, [r2, #4]
  40140e:	e7eb      	b.n	4013e8 <_i2c_m_sync_transfer+0x94>
	for (i = 0; i < msg->len; i++) {
  401410:	3101      	adds	r1, #1
  401412:	6863      	ldr	r3, [r4, #4]
  401414:	4299      	cmp	r1, r3
  401416:	d20e      	bcs.n	401436 <_i2c_m_sync_transfer+0xe2>
		/* Wait for a byte has been received in TWIHS_RHR since last read */
		while (!hri_twihs_get_SR_RXRDY_bit(dev->hw)) {
  401418:	692a      	ldr	r2, [r5, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
}

static inline bool hri_twihs_get_SR_RXRDY_bit(const void *const hw)
{
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_RXRDY) > 0;
  40141a:	6a13      	ldr	r3, [r2, #32]
  40141c:	f013 0f02 	tst.w	r3, #2
  401420:	d0fb      	beq.n	40141a <_i2c_m_sync_transfer+0xc6>
	return tmp;
}

static inline hri_twihs_rhr_reg_t hri_twihs_read_RHR_reg(const void *const hw)
{
	return ((Twihs *)hw)->TWIHS_RHR;
  401422:	6b12      	ldr	r2, [r2, #48]	; 0x30
		};

		msg->buffer[i] = hri_twihs_read_RHR_reg(dev->hw);
  401424:	68a3      	ldr	r3, [r4, #8]
  401426:	545a      	strb	r2, [r3, r1]
		/* In multiple data bytes master read, the STOP must be set after the
		 * last data received but one */
		if (i == (msg->len - 2)) {
  401428:	6863      	ldr	r3, [r4, #4]
  40142a:	3b02      	subs	r3, #2
  40142c:	428b      	cmp	r3, r1
  40142e:	d1ef      	bne.n	401410 <_i2c_m_sync_transfer+0xbc>
			hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401430:	692b      	ldr	r3, [r5, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401432:	6018      	str	r0, [r3, #0]
  401434:	e7ec      	b.n	401410 <_i2c_m_sync_transfer+0xbc>
		}
	}

	while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  401436:	692a      	ldr	r2, [r5, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  401438:	6a13      	ldr	r3, [r2, #32]
  40143a:	f013 0f01 	tst.w	r3, #1
  40143e:	d0fb      	beq.n	401438 <_i2c_m_sync_transfer+0xe4>
	};
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401440:	886b      	ldrh	r3, [r5, #2]
  401442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  401446:	041b      	lsls	r3, r3, #16
  401448:	0c1b      	lsrs	r3, r3, #16
  40144a:	806b      	strh	r3, [r5, #2]
		return _i2c_m_sync_read(dev, msg);
  40144c:	2000      	movs	r0, #0
  40144e:	bd70      	pop	{r4, r5, r6, pc}
		hri_twihs_write_MMR_reg(dev->hw, TWIHS_MMR_DADR(msg->addr));
  401450:	692a      	ldr	r2, [r5, #16]
  401452:	041b      	lsls	r3, r3, #16
  401454:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
	((Twihs *)hw)->TWIHS_MMR = data;
  401458:	6053      	str	r3, [r2, #4]
  40145a:	e7a7      	b.n	4013ac <_i2c_m_sync_transfer+0x58>
				ret = I2C_NACK;
  40145c:	4630      	mov	r0, r6
		hri_twihs_write_THR_reg(dev->hw, msg->buffer[i]);
  40145e:	68a3      	ldr	r3, [r4, #8]
  401460:	5c5b      	ldrb	r3, [r3, r1]
	((Twihs *)hw)->TWIHS_THR = data;
  401462:	6353      	str	r3, [r2, #52]	; 0x34
	for (i = 0; i < msg->len; i++) {
  401464:	3101      	adds	r1, #1
  401466:	6863      	ldr	r3, [r4, #4]
  401468:	4299      	cmp	r1, r3
  40146a:	d209      	bcs.n	401480 <_i2c_m_sync_transfer+0x12c>
			sr = hri_twihs_read_SR_reg(dev->hw);
  40146c:	692a      	ldr	r2, [r5, #16]
	return ((Twihs *)hw)->TWIHS_SR;
  40146e:	6a13      	ldr	r3, [r2, #32]
			if (sr & TWIHS_SR_NACK) {
  401470:	f413 7f80 	tst.w	r3, #256	; 0x100
  401474:	d1f2      	bne.n	40145c <_i2c_m_sync_transfer+0x108>
		} while (!(sr & TWIHS_SR_TXRDY));
  401476:	f013 0f04 	tst.w	r3, #4
  40147a:	d0f8      	beq.n	40146e <_i2c_m_sync_transfer+0x11a>
  40147c:	e7ef      	b.n	40145e <_i2c_m_sync_transfer+0x10a>
	for (i = 0; i < msg->len; i++) {
  40147e:	2000      	movs	r0, #0
	if (msg->flags & I2C_M_STOP) {
  401480:	8863      	ldrh	r3, [r4, #2]
  401482:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401486:	d106      	bne.n	401496 <_i2c_m_sync_transfer+0x142>
	dev->service.msg.flags &= ~I2C_M_BUSY;
  401488:	886b      	ldrh	r3, [r5, #2]
  40148a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40148e:	041b      	lsls	r3, r3, #16
  401490:	0c1b      	lsrs	r3, r3, #16
  401492:	806b      	strh	r3, [r5, #2]
		return _i2c_m_sync_write(dev, msg);
  401494:	bd70      	pop	{r4, r5, r6, pc}
		hri_twihs_write_CR_reg(dev->hw, TWIHS_CR_STOP);
  401496:	692b      	ldr	r3, [r5, #16]
	((Twihs *)hw)->TWIHS_CR = data;
  401498:	2202      	movs	r2, #2
  40149a:	601a      	str	r2, [r3, #0]
		while (!hri_twihs_get_SR_TXCOMP_bit(dev->hw)) {
  40149c:	692a      	ldr	r2, [r5, #16]
	return (((Twihs *)hw)->TWIHS_SR & TWIHS_SR_TXCOMP) > 0;
  40149e:	6a13      	ldr	r3, [r2, #32]
  4014a0:	f013 0f01 	tst.w	r3, #1
  4014a4:	d0fb      	beq.n	40149e <_i2c_m_sync_transfer+0x14a>
  4014a6:	e7ef      	b.n	401488 <_i2c_m_sync_transfer+0x134>
		return I2C_ERR_BUSY;
  4014a8:	f06f 0005 	mvn.w	r0, #5
}
  4014ac:	bd70      	pop	{r4, r5, r6, pc}
  4014ae:	bf00      	nop
  4014b0:	00402504 	.word	0x00402504
  4014b4:	00400db5 	.word	0x00400db5

004014b8 <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  4014b8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4014ba:	4604      	mov	r4, r0
  4014bc:	f240 221d 	movw	r2, #541	; 0x21d
  4014c0:	4911      	ldr	r1, [pc, #68]	; (401508 <_uart_get_hardware_index+0x50>)
  4014c2:	3000      	adds	r0, #0
  4014c4:	bf18      	it	ne
  4014c6:	2001      	movne	r0, #1
  4014c8:	4b10      	ldr	r3, [pc, #64]	; (40150c <_uart_get_hardware_index+0x54>)
  4014ca:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  4014cc:	4b10      	ldr	r3, [pc, #64]	; (401510 <_uart_get_hardware_index+0x58>)
  4014ce:	429c      	cmp	r4, r3
  4014d0:	d011      	beq.n	4014f6 <_uart_get_hardware_index+0x3e>
		return 0;
	} else if (UART1 == hw) {
  4014d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4014d6:	429c      	cmp	r4, r3
  4014d8:	d00f      	beq.n	4014fa <_uart_get_hardware_index+0x42>
		return 1;
	} else if (UART2 == hw) {
  4014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4014de:	429c      	cmp	r4, r3
  4014e0:	d00d      	beq.n	4014fe <_uart_get_hardware_index+0x46>
		return 2;
	} else if (UART3 == hw) {
  4014e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
  4014e6:	429c      	cmp	r4, r3
  4014e8:	d00b      	beq.n	401502 <_uart_get_hardware_index+0x4a>
		return 3;
	} else if (UART4 == hw) {
		return 4;
	} else {
		return ERR_INVALID_DATA;
  4014ea:	480a      	ldr	r0, [pc, #40]	; (401514 <_uart_get_hardware_index+0x5c>)
  4014ec:	4284      	cmp	r4, r0
  4014ee:	bf0c      	ite	eq
  4014f0:	2004      	moveq	r0, #4
  4014f2:	20ff      	movne	r0, #255	; 0xff
  4014f4:	bd10      	pop	{r4, pc}
		return 0;
  4014f6:	2000      	movs	r0, #0
  4014f8:	bd10      	pop	{r4, pc}
		return 1;
  4014fa:	2001      	movs	r0, #1
  4014fc:	bd10      	pop	{r4, pc}
		return 2;
  4014fe:	2002      	movs	r0, #2
  401500:	bd10      	pop	{r4, pc}
		return 3;
  401502:	2003      	movs	r0, #3
	}
}
  401504:	bd10      	pop	{r4, pc}
  401506:	bf00      	nop
  401508:	00402538 	.word	0x00402538
  40150c:	00400db5 	.word	0x00400db5
  401510:	400e0800 	.word	0x400e0800
  401514:	400e1e00 	.word	0x400e1e00

00401518 <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  401518:	b510      	push	{r4, lr}
	ASSERT(hw);
  40151a:	4604      	mov	r4, r0
  40151c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  401520:	490b      	ldr	r1, [pc, #44]	; (401550 <_get_uart_index+0x38>)
  401522:	3000      	adds	r0, #0
  401524:	bf18      	it	ne
  401526:	2001      	movne	r0, #1
  401528:	4b0a      	ldr	r3, [pc, #40]	; (401554 <_get_uart_index+0x3c>)
  40152a:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  40152c:	4620      	mov	r0, r4
  40152e:	4b0a      	ldr	r3, [pc, #40]	; (401558 <_get_uart_index+0x40>)
  401530:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
		if (_uarts[i].number == uart_offset) {
  401532:	b148      	cbz	r0, 401548 <_get_uart_index+0x30>
  401534:	2804      	cmp	r0, #4
  401536:	d009      	beq.n	40154c <_get_uart_index+0x34>
			return i;
		}
	}

	ASSERT(false);
  401538:	f240 22b2 	movw	r2, #690	; 0x2b2
  40153c:	4904      	ldr	r1, [pc, #16]	; (401550 <_get_uart_index+0x38>)
  40153e:	2000      	movs	r0, #0
  401540:	4b04      	ldr	r3, [pc, #16]	; (401554 <_get_uart_index+0x3c>)
  401542:	4798      	blx	r3
	return 0;
  401544:	2000      	movs	r0, #0
  401546:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  401548:	2000      	movs	r0, #0
  40154a:	bd10      	pop	{r4, pc}
  40154c:	2001      	movs	r0, #1
}
  40154e:	bd10      	pop	{r4, pc}
  401550:	00402538 	.word	0x00402538
  401554:	00400db5 	.word	0x00400db5
  401558:	004014b9 	.word	0x004014b9

0040155c <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  40155c:	b510      	push	{r4, lr}
	ASSERT(hw);
  40155e:	4604      	mov	r4, r0
  401560:	f240 22bf 	movw	r2, #703	; 0x2bf
  401564:	490f      	ldr	r1, [pc, #60]	; (4015a4 <_uart_init+0x48>)
  401566:	3000      	adds	r0, #0
  401568:	bf18      	it	ne
  40156a:	2001      	movne	r0, #1
  40156c:	4b0e      	ldr	r3, [pc, #56]	; (4015a8 <_uart_init+0x4c>)
  40156e:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  401570:	4620      	mov	r0, r4
  401572:	4b0e      	ldr	r3, [pc, #56]	; (4015ac <_uart_init+0x50>)
  401574:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  401576:	4b0e      	ldr	r3, [pc, #56]	; (4015b0 <_uart_init+0x54>)
  401578:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Uart *)hw)->UART_CR = data;
  40157c:	23ac      	movs	r3, #172	; 0xac
  40157e:	6023      	str	r3, [r4, #0]
  401580:	f44f 7380 	mov.w	r3, #256	; 0x100
  401584:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  401586:	4b0b      	ldr	r3, [pc, #44]	; (4015b4 <_uart_init+0x58>)
  401588:	0042      	lsls	r2, r0, #1
  40158a:	1811      	adds	r1, r2, r0
  40158c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  401590:	6849      	ldr	r1, [r1, #4]
	((Uart *)hw)->UART_MR = data;
  401592:	6061      	str	r1, [r4, #4]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);
  401594:	4402      	add	r2, r0
  401596:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40159a:	689b      	ldr	r3, [r3, #8]
	((Uart *)hw)->UART_BRGR = data;
  40159c:	6223      	str	r3, [r4, #32]

	return ERR_NONE;
}
  40159e:	2000      	movs	r0, #0
  4015a0:	bd10      	pop	{r4, pc}
  4015a2:	bf00      	nop
  4015a4:	00402538 	.word	0x00402538
  4015a8:	00400db5 	.word	0x00400db5
  4015ac:	00401519 	.word	0x00401519
  4015b0:	55415200 	.word	0x55415200
  4015b4:	00402520 	.word	0x00402520

004015b8 <_uart_get_irq_num>:
{
  4015b8:	b510      	push	{r4, lr}
	ASSERT(hw);
  4015ba:	4604      	mov	r4, r0
  4015bc:	2291      	movs	r2, #145	; 0x91
  4015be:	4910      	ldr	r1, [pc, #64]	; (401600 <_uart_get_irq_num+0x48>)
  4015c0:	3000      	adds	r0, #0
  4015c2:	bf18      	it	ne
  4015c4:	2001      	movne	r0, #1
  4015c6:	4b0f      	ldr	r3, [pc, #60]	; (401604 <_uart_get_irq_num+0x4c>)
  4015c8:	4798      	blx	r3
	i = _uart_get_hardware_index(hw);
  4015ca:	4620      	mov	r0, r4
  4015cc:	4b0e      	ldr	r3, [pc, #56]	; (401608 <_uart_get_irq_num+0x50>)
  4015ce:	4798      	blx	r3
	switch (i) {
  4015d0:	2804      	cmp	r0, #4
  4015d2:	d80c      	bhi.n	4015ee <_uart_get_irq_num+0x36>
  4015d4:	e8df f000 	tbb	[pc, r0]
  4015d8:	07050312 	.word	0x07050312
  4015dc:	09          	.byte	0x09
  4015dd:	00          	.byte	0x00
		return UART1_IRQn;
  4015de:	2008      	movs	r0, #8
  4015e0:	bd10      	pop	{r4, pc}
		return UART2_IRQn;
  4015e2:	202c      	movs	r0, #44	; 0x2c
  4015e4:	bd10      	pop	{r4, pc}
		return UART3_IRQn;
  4015e6:	202d      	movs	r0, #45	; 0x2d
  4015e8:	bd10      	pop	{r4, pc}
		return UART4_IRQn;
  4015ea:	202e      	movs	r0, #46	; 0x2e
  4015ec:	bd10      	pop	{r4, pc}
		ASSERT(false);
  4015ee:	22a3      	movs	r2, #163	; 0xa3
  4015f0:	4903      	ldr	r1, [pc, #12]	; (401600 <_uart_get_irq_num+0x48>)
  4015f2:	2000      	movs	r0, #0
  4015f4:	4b03      	ldr	r3, [pc, #12]	; (401604 <_uart_get_irq_num+0x4c>)
  4015f6:	4798      	blx	r3
		return ERR_INVALID_DATA;
  4015f8:	20ff      	movs	r0, #255	; 0xff
  4015fa:	bd10      	pop	{r4, pc}
		return UART0_IRQn;
  4015fc:	2007      	movs	r0, #7
}
  4015fe:	bd10      	pop	{r4, pc}
  401600:	00402538 	.word	0x00402538
  401604:	00400db5 	.word	0x00400db5
  401608:	004014b9 	.word	0x004014b9

0040160c <_usart_sync_init>:
{
  40160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40160e:	460c      	mov	r4, r1
	ASSERT(device);
  401610:	4e09      	ldr	r6, [pc, #36]	; (401638 <_usart_sync_init+0x2c>)
  401612:	4607      	mov	r7, r0
  401614:	22b7      	movs	r2, #183	; 0xb7
  401616:	4631      	mov	r1, r6
  401618:	3000      	adds	r0, #0
  40161a:	bf18      	it	ne
  40161c:	2001      	movne	r0, #1
  40161e:	4d07      	ldr	r5, [pc, #28]	; (40163c <_usart_sync_init+0x30>)
  401620:	47a8      	blx	r5
	ASSERT(hw);
  401622:	22b8      	movs	r2, #184	; 0xb8
  401624:	4631      	mov	r1, r6
  401626:	1c20      	adds	r0, r4, #0
  401628:	bf18      	it	ne
  40162a:	2001      	movne	r0, #1
  40162c:	47a8      	blx	r5
	device->hw = hw;
  40162e:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  401630:	4620      	mov	r0, r4
  401632:	4b03      	ldr	r3, [pc, #12]	; (401640 <_usart_sync_init+0x34>)
  401634:	4798      	blx	r3
}
  401636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401638:	00402538 	.word	0x00402538
  40163c:	00400db5 	.word	0x00400db5
  401640:	0040155d 	.word	0x0040155d

00401644 <_usart_async_init>:
{
  401644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401648:	460c      	mov	r4, r1
	ASSERT(device);
  40164a:	4605      	mov	r5, r0
  40164c:	22c6      	movs	r2, #198	; 0xc6
  40164e:	491c      	ldr	r1, [pc, #112]	; (4016c0 <_usart_async_init+0x7c>)
  401650:	3000      	adds	r0, #0
  401652:	bf18      	it	ne
  401654:	2001      	movne	r0, #1
  401656:	4b1b      	ldr	r3, [pc, #108]	; (4016c4 <_usart_async_init+0x80>)
  401658:	4798      	blx	r3
	init_status = _uart_init(hw);
  40165a:	4620      	mov	r0, r4
  40165c:	4b1a      	ldr	r3, [pc, #104]	; (4016c8 <_usart_async_init+0x84>)
  40165e:	4798      	blx	r3
	if (init_status) {
  401660:	4606      	mov	r6, r0
  401662:	b110      	cbz	r0, 40166a <_usart_async_init+0x26>
}
  401664:	4630      	mov	r0, r6
  401666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
  40166a:	61ac      	str	r4, [r5, #24]
	if (hw == UART4) {
  40166c:	4b17      	ldr	r3, [pc, #92]	; (4016cc <_usart_async_init+0x88>)
  40166e:	429c      	cmp	r4, r3
  401670:	d023      	beq.n	4016ba <_usart_async_init+0x76>
	NVIC_DisableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  401672:	4620      	mov	r0, r4
  401674:	4f16      	ldr	r7, [pc, #88]	; (4016d0 <_usart_async_init+0x8c>)
  401676:	47b8      	blx	r7
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401678:	b243      	sxtb	r3, r0
  40167a:	095b      	lsrs	r3, r3, #5
  40167c:	f000 001f 	and.w	r0, r0, #31
  401680:	2501      	movs	r5, #1
  401682:	fa05 f000 	lsl.w	r0, r5, r0
  401686:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4016d8 <_usart_async_init+0x94>
  40168a:	3320      	adds	r3, #32
  40168c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_ClearPendingIRQ((IRQn_Type)_uart_get_irq_num(hw));
  401690:	4620      	mov	r0, r4
  401692:	47b8      	blx	r7
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401694:	b243      	sxtb	r3, r0
  401696:	095b      	lsrs	r3, r3, #5
  401698:	f000 001f 	and.w	r0, r0, #31
  40169c:	fa05 f000 	lsl.w	r0, r5, r0
  4016a0:	3360      	adds	r3, #96	; 0x60
  4016a2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_uart_get_irq_num(hw));
  4016a6:	4620      	mov	r0, r4
  4016a8:	47b8      	blx	r7
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4016aa:	b243      	sxtb	r3, r0
  4016ac:	095b      	lsrs	r3, r3, #5
  4016ae:	f000 001f 	and.w	r0, r0, #31
  4016b2:	4085      	lsls	r5, r0
  4016b4:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	return ERR_NONE;
  4016b8:	e7d4      	b.n	401664 <_usart_async_init+0x20>
		_uart4_dev = dev;
  4016ba:	4b06      	ldr	r3, [pc, #24]	; (4016d4 <_usart_async_init+0x90>)
  4016bc:	601d      	str	r5, [r3, #0]
  4016be:	e7d8      	b.n	401672 <_usart_async_init+0x2e>
  4016c0:	00402538 	.word	0x00402538
  4016c4:	00400db5 	.word	0x00400db5
  4016c8:	0040155d 	.word	0x0040155d
  4016cc:	400e1e00 	.word	0x400e1e00
  4016d0:	004015b9 	.word	0x004015b9
  4016d4:	204000b8 	.word	0x204000b8
  4016d8:	e000e100 	.word	0xe000e100

004016dc <_usart_sync_write_byte>:
{
  4016dc:	b538      	push	{r3, r4, r5, lr}
  4016de:	460c      	mov	r4, r1
	ASSERT(device);
  4016e0:	4605      	mov	r5, r0
  4016e2:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
  4016e6:	4904      	ldr	r1, [pc, #16]	; (4016f8 <_usart_sync_write_byte+0x1c>)
  4016e8:	3000      	adds	r0, #0
  4016ea:	bf18      	it	ne
  4016ec:	2001      	movne	r0, #1
  4016ee:	4b03      	ldr	r3, [pc, #12]	; (4016fc <_usart_sync_write_byte+0x20>)
  4016f0:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  4016f2:	682b      	ldr	r3, [r5, #0]
	((Uart *)hw)->UART_THR = data;
  4016f4:	61dc      	str	r4, [r3, #28]
  4016f6:	bd38      	pop	{r3, r4, r5, pc}
  4016f8:	00402538 	.word	0x00402538
  4016fc:	00400db5 	.word	0x00400db5

00401700 <_usart_async_write_byte>:
{
  401700:	b538      	push	{r3, r4, r5, lr}
  401702:	460c      	mov	r4, r1
	ASSERT(device);
  401704:	4605      	mov	r5, r0
  401706:	f240 12ab 	movw	r2, #427	; 0x1ab
  40170a:	4904      	ldr	r1, [pc, #16]	; (40171c <_usart_async_write_byte+0x1c>)
  40170c:	3000      	adds	r0, #0
  40170e:	bf18      	it	ne
  401710:	2001      	movne	r0, #1
  401712:	4b03      	ldr	r3, [pc, #12]	; (401720 <_usart_async_write_byte+0x20>)
  401714:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  401716:	69ab      	ldr	r3, [r5, #24]
  401718:	61dc      	str	r4, [r3, #28]
  40171a:	bd38      	pop	{r3, r4, r5, pc}
  40171c:	00402538 	.word	0x00402538
  401720:	00400db5 	.word	0x00400db5

00401724 <_usart_sync_read_byte>:
{
  401724:	b510      	push	{r4, lr}
	ASSERT(device);
  401726:	4604      	mov	r4, r0
  401728:	f44f 72da 	mov.w	r2, #436	; 0x1b4
  40172c:	4904      	ldr	r1, [pc, #16]	; (401740 <_usart_sync_read_byte+0x1c>)
  40172e:	3000      	adds	r0, #0
  401730:	bf18      	it	ne
  401732:	2001      	movne	r0, #1
  401734:	4b03      	ldr	r3, [pc, #12]	; (401744 <_usart_sync_read_byte+0x20>)
  401736:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  401738:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR(mask)) >> UART_RHR_RXCHR_Pos;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_RXCHR_bf(const void *const hw)
{
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  40173a:	6998      	ldr	r0, [r3, #24]
}
  40173c:	b2c0      	uxtb	r0, r0
  40173e:	bd10      	pop	{r4, pc}
  401740:	00402538 	.word	0x00402538
  401744:	00400db5 	.word	0x00400db5

00401748 <_usart_sync_is_byte_sent>:
{
  401748:	b510      	push	{r4, lr}
	ASSERT(device);
  40174a:	4604      	mov	r4, r0
  40174c:	f240 12bd 	movw	r2, #445	; 0x1bd
  401750:	4905      	ldr	r1, [pc, #20]	; (401768 <_usart_sync_is_byte_sent+0x20>)
  401752:	3000      	adds	r0, #0
  401754:	bf18      	it	ne
  401756:	2001      	movne	r0, #1
  401758:	4b04      	ldr	r3, [pc, #16]	; (40176c <_usart_sync_is_byte_sent+0x24>)
  40175a:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  40175c:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  40175e:	6958      	ldr	r0, [r3, #20]
}
  401760:	f3c0 0040 	ubfx	r0, r0, #1, #1
  401764:	bd10      	pop	{r4, pc}
  401766:	bf00      	nop
  401768:	00402538 	.word	0x00402538
  40176c:	00400db5 	.word	0x00400db5

00401770 <_usart_sync_is_byte_received>:
{
  401770:	b510      	push	{r4, lr}
	ASSERT(device);
  401772:	4604      	mov	r4, r0
  401774:	f240 12cf 	movw	r2, #463	; 0x1cf
  401778:	4905      	ldr	r1, [pc, #20]	; (401790 <_usart_sync_is_byte_received+0x20>)
  40177a:	3000      	adds	r0, #0
  40177c:	bf18      	it	ne
  40177e:	2001      	movne	r0, #1
  401780:	4b04      	ldr	r3, [pc, #16]	; (401794 <_usart_sync_is_byte_received+0x24>)
  401782:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  401784:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  401786:	6958      	ldr	r0, [r3, #20]
}
  401788:	f000 0001 	and.w	r0, r0, #1
  40178c:	bd10      	pop	{r4, pc}
  40178e:	bf00      	nop
  401790:	00402538 	.word	0x00402538
  401794:	00400db5 	.word	0x00400db5

00401798 <_usart_async_enable_byte_sent_irq>:
{
  401798:	b510      	push	{r4, lr}
	ASSERT(device);
  40179a:	4604      	mov	r4, r0
  40179c:	f240 220a 	movw	r2, #522	; 0x20a
  4017a0:	4904      	ldr	r1, [pc, #16]	; (4017b4 <_usart_async_enable_byte_sent_irq+0x1c>)
  4017a2:	3000      	adds	r0, #0
  4017a4:	bf18      	it	ne
  4017a6:	2001      	movne	r0, #1
  4017a8:	4b03      	ldr	r3, [pc, #12]	; (4017b8 <_usart_async_enable_byte_sent_irq+0x20>)
  4017aa:	4798      	blx	r3
	hri_uart_set_IMR_TXRDY_bit(device->hw);
  4017ac:	69a3      	ldr	r3, [r4, #24]
	((Uart *)hw)->UART_IER = UART_IMR_TXRDY;
  4017ae:	2202      	movs	r2, #2
  4017b0:	609a      	str	r2, [r3, #8]
  4017b2:	bd10      	pop	{r4, pc}
  4017b4:	00402538 	.word	0x00402538
  4017b8:	00400db5 	.word	0x00400db5

004017bc <_usart_async_enable_tx_done_irq>:
{
  4017bc:	b510      	push	{r4, lr}
	ASSERT(device);
  4017be:	4604      	mov	r4, r0
  4017c0:	f240 2213 	movw	r2, #531	; 0x213
  4017c4:	4905      	ldr	r1, [pc, #20]	; (4017dc <_usart_async_enable_tx_done_irq+0x20>)
  4017c6:	3000      	adds	r0, #0
  4017c8:	bf18      	it	ne
  4017ca:	2001      	movne	r0, #1
  4017cc:	4b04      	ldr	r3, [pc, #16]	; (4017e0 <_usart_async_enable_tx_done_irq+0x24>)
  4017ce:	4798      	blx	r3
	hri_uart_set_IMR_TXEMPTY_bit(device->hw);
  4017d0:	69a3      	ldr	r3, [r4, #24]
	((Uart *)hw)->UART_IER = UART_IMR_TXEMPTY;
  4017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4017d6:	609a      	str	r2, [r3, #8]
  4017d8:	bd10      	pop	{r4, pc}
  4017da:	bf00      	nop
  4017dc:	00402538 	.word	0x00402538
  4017e0:	00400db5 	.word	0x00400db5

004017e4 <_uart_get_usart_sync>:
}
  4017e4:	2000      	movs	r0, #0
  4017e6:	4770      	bx	lr

004017e8 <_uart_get_usart_async>:
}
  4017e8:	2000      	movs	r0, #0
  4017ea:	4770      	bx	lr

004017ec <UART4_Handler>:
{
  4017ec:	b510      	push	{r4, lr}
	_uart_interrupt_handler(_uart4_dev);
  4017ee:	4b25      	ldr	r3, [pc, #148]	; (401884 <UART4_Handler+0x98>)
  4017f0:	681c      	ldr	r4, [r3, #0]
	ASSERT(device);
  4017f2:	f240 2281 	movw	r2, #641	; 0x281
  4017f6:	4924      	ldr	r1, [pc, #144]	; (401888 <UART4_Handler+0x9c>)
  4017f8:	1c20      	adds	r0, r4, #0
  4017fa:	bf18      	it	ne
  4017fc:	2001      	movne	r0, #1
  4017fe:	4b23      	ldr	r3, [pc, #140]	; (40188c <UART4_Handler+0xa0>)
  401800:	4798      	blx	r3
	void *hw = device->hw;
  401802:	69a3      	ldr	r3, [r4, #24]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  401804:	695a      	ldr	r2, [r3, #20]
	if (hri_uart_get_SR_TXRDY_bit(hw) && hri_uart_get_IMR_TXRDY_bit(hw)) {
  401806:	f012 0f02 	tst.w	r2, #2
  40180a:	d003      	beq.n	401814 <UART4_Handler+0x28>
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXRDY) >> UART_IMR_TXRDY_Pos;
  40180c:	691a      	ldr	r2, [r3, #16]
  40180e:	f012 0f02 	tst.w	r2, #2
  401812:	d118      	bne.n	401846 <UART4_Handler+0x5a>
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  401814:	695a      	ldr	r2, [r3, #20]
	} else if (hri_uart_get_SR_TXEMPTY_bit(hw) && hri_uart_get_IMR_TXEMPTY_bit(hw)) {
  401816:	f412 7f00 	tst.w	r2, #512	; 0x200
  40181a:	d003      	beq.n	401824 <UART4_Handler+0x38>
	return (((Uart *)hw)->UART_IMR & UART_IMR_TXEMPTY) >> UART_IMR_TXEMPTY_Pos;
  40181c:	691a      	ldr	r2, [r3, #16]
  40181e:	f412 7f00 	tst.w	r2, #512	; 0x200
  401822:	d116      	bne.n	401852 <UART4_Handler+0x66>
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  401824:	695a      	ldr	r2, [r3, #20]
	} else if (hri_uart_get_SR_RXRDY_bit(hw) && hri_uart_get_IMR_RXRDY_bit(hw)) {
  401826:	f012 0f01 	tst.w	r2, #1
  40182a:	d01f      	beq.n	40186c <UART4_Handler+0x80>
	return (((Uart *)hw)->UART_IMR & UART_IMR_RXRDY) >> UART_IMR_RXRDY_Pos;
  40182c:	691a      	ldr	r2, [r3, #16]
  40182e:	f012 0f01 	tst.w	r2, #1
  401832:	d01b      	beq.n	40186c <UART4_Handler+0x80>
	return ((Uart *)hw)->UART_SR;
  401834:	695a      	ldr	r2, [r3, #20]
		if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  401836:	f012 0fe0 	tst.w	r2, #224	; 0xe0
  40183a:	d011      	beq.n	401860 <UART4_Handler+0x74>
	return tmp;
}

static inline hri_uart_rhr_reg_t hri_uart_read_RHR_reg(const void *const hw)
{
	return ((Uart *)hw)->UART_RHR;
  40183c:	699a      	ldr	r2, [r3, #24]
	((Uart *)hw)->UART_CR = data;
  40183e:	f44f 7280 	mov.w	r2, #256	; 0x100
  401842:	601a      	str	r2, [r3, #0]
  401844:	bd10      	pop	{r4, pc}
	((Uart *)hw)->UART_IDR = UART_IMR_TXRDY;
  401846:	2202      	movs	r2, #2
  401848:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  40184a:	6823      	ldr	r3, [r4, #0]
  40184c:	4620      	mov	r0, r4
  40184e:	4798      	blx	r3
  401850:	bd10      	pop	{r4, pc}
	((Uart *)hw)->UART_IDR = UART_IMR_TXEMPTY;
  401852:	f44f 7200 	mov.w	r2, #512	; 0x200
  401856:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  401858:	68a3      	ldr	r3, [r4, #8]
  40185a:	4620      	mov	r0, r4
  40185c:	4798      	blx	r3
  40185e:	bd10      	pop	{r4, pc}
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  401860:	6999      	ldr	r1, [r3, #24]
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_uart_read_RHR_RXCHR_bf(hw));
  401862:	6863      	ldr	r3, [r4, #4]
  401864:	b2c9      	uxtb	r1, r1
  401866:	4620      	mov	r0, r4
  401868:	4798      	blx	r3
  40186a:	bd10      	pop	{r4, pc}
	return ((Uart *)hw)->UART_SR;
  40186c:	695a      	ldr	r2, [r3, #20]
	} else if (hri_uart_read_SR_reg(hw) & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)) {
  40186e:	f012 0fe0 	tst.w	r2, #224	; 0xe0
  401872:	d100      	bne.n	401876 <UART4_Handler+0x8a>
  401874:	bd10      	pop	{r4, pc}
	((Uart *)hw)->UART_CR = data;
  401876:	f44f 7280 	mov.w	r2, #256	; 0x100
  40187a:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  40187c:	68e3      	ldr	r3, [r4, #12]
  40187e:	4620      	mov	r0, r4
  401880:	4798      	blx	r3
}
  401882:	e7f7      	b.n	401874 <UART4_Handler+0x88>
  401884:	204000b8 	.word	0x204000b8
  401888:	00402538 	.word	0x00402538
  40188c:	00400db5 	.word	0x00400db5

00401890 <_dummy_func_no_return>:

/**
 * \brief Dummy callback function
 */
static void _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
  401890:	4770      	bx	lr

00401892 <_dummy_func_return_false>:
static bool _dummy_func_return_false(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
  401892:	2000      	movs	r0, #0
  401894:	4770      	bx	lr
	...

00401898 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
  401898:	b508      	push	{r3, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
  40189a:	7c83      	ldrb	r3, [r0, #18]
  40189c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
  4018a0:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
  4018a2:	f002 0107 	and.w	r1, r2, #7
  4018a6:	2901      	cmp	r1, #1
  4018a8:	d008      	beq.n	4018bc <_usb_d_dev_handle_setup+0x24>
  4018aa:	4a15      	ldr	r2, [pc, #84]	; (401900 <_usb_d_dev_handle_setup+0x68>)
  4018ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = mask;
}

static inline void hri_usbhs_write_DEVEPTICR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptisr_reg_t data)
{
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4018b0:	2204      	movs	r2, #4
  4018b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}

static inline void hri_usbhs_write_DEVEPTIDR_reg(const void *const hw, uint8_t index, hri_usbhs_deveptidr_reg_t data)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  4018b6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  4018ba:	bd08      	pop	{r3, pc}

	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
  4018bc:	f012 0f40 	tst.w	r2, #64	; 0x40
  4018c0:	d00c      	beq.n	4018dc <_usb_d_dev_handle_setup+0x44>
		ept->flags.bits.is_busy = 0;
  4018c2:	7cc2      	ldrb	r2, [r0, #19]
  4018c4:	f36f 1286 	bfc	r2, #6, #1
  4018c8:	74c2      	strb	r2, [r0, #19]
  4018ca:	4a0d      	ldr	r2, [pc, #52]	; (401900 <_usb_d_dev_handle_setup+0x68>)
  4018cc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  4018d0:	2101      	movs	r1, #1
  4018d2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  4018d6:	2102      	movs	r1, #2
  4018d8:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, false);
		_usbd_ep_set_out_rdy(epn, false);
	}

	ept->flags.bits.is_stalled = 0;
  4018dc:	7cc2      	ldrb	r2, [r0, #19]
  4018de:	f36f 02c3 	bfc	r2, #3, #1
  4018e2:	74c2      	strb	r2, [r0, #19]
  4018e4:	4a06      	ldr	r2, [pc, #24]	; (401900 <_usb_d_dev_handle_setup+0x68>)
  4018e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018ea:	2218      	movs	r2, #24
  4018ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  4018f0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

	/* Clear status and notify SETUP */
	_usbd_ep_int_ack(epn, USBHS_DEVEPTISR_NAKINI | USBHS_DEVEPTISR_NAKOUTI);
	_usbd_ep_int_dis(epn, USBHS_DEVEPTIMR_NAKINE | USBHS_DEVEPTIMR_NAKOUTE);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
  4018f4:	4b03      	ldr	r3, [pc, #12]	; (401904 <_usb_d_dev_handle_setup+0x6c>)
  4018f6:	689b      	ldr	r3, [r3, #8]
  4018f8:	7c80      	ldrb	r0, [r0, #18]
  4018fa:	4798      	blx	r3
  4018fc:	bd08      	pop	{r3, pc}
  4018fe:	bf00      	nop
  401900:	40038000 	.word	0x40038000
  401904:	204000bc 	.word	0x204000bc

00401908 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
  401908:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  40190a:	7c84      	ldrb	r4, [r0, #18]
  40190c:	2cff      	cmp	r4, #255	; 0xff
  40190e:	d003      	beq.n	401918 <_usb_d_dev_trans_done+0x10>
  401910:	7cc3      	ldrb	r3, [r0, #19]
  401912:	f013 0f40 	tst.w	r3, #64	; 0x40
  401916:	d100      	bne.n	40191a <_usb_d_dev_trans_done+0x12>
  401918:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}

	ept->flags.bits.is_busy = 0;
  40191a:	7cc2      	ldrb	r2, [r0, #19]
  40191c:	f36f 1286 	bfc	r2, #6, #1
  401920:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
  401922:	4a03      	ldr	r2, [pc, #12]	; (401930 <_usb_d_dev_trans_done+0x28>)
  401924:	6915      	ldr	r5, [r2, #16]
  401926:	6882      	ldr	r2, [r0, #8]
  401928:	4620      	mov	r0, r4
  40192a:	47a8      	blx	r5
  40192c:	e7f4      	b.n	401918 <_usb_d_dev_trans_done+0x10>
  40192e:	bf00      	nop
  401930:	204000bc 	.word	0x204000bc

00401934 <_usb_d_dev_reset_epts>:
{
  401934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

static inline void hri_usbhs_clear_DEVCTRL_ADDEN_bit(const void *const hw)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVCTRL &= ~USBHS_DEVCTRL_ADDEN;
  401938:	4b0f      	ldr	r3, [pc, #60]	; (401978 <_usb_d_dev_reset_epts+0x44>)
  40193a:	681a      	ldr	r2, [r3, #0]
  40193c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  401940:	601a      	str	r2, [r3, #0]

static inline void hri_usbhs_write_DEVCTRL_UADD_bf(const void *const hw, hri_usbhs_devctrl_reg_t data)
{
	uint32_t tmp;
	USBHS_CRITICAL_SECTION_ENTER();
	tmp = ((Usbhs *)hw)->USBHS_DEVCTRL;
  401942:	681a      	ldr	r2, [r3, #0]
	tmp &= ~USBHS_DEVCTRL_UADD_Msk;
  401944:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	tmp |= USBHS_DEVCTRL_UADD(data);
	((Usbhs *)hw)->USBHS_DEVCTRL = tmp;
  401948:	601a      	str	r2, [r3, #0]
	((Usbhs *)hw)->USBHS_DEVCTRL |= USBHS_DEVCTRL_ADDEN;
  40194a:	681a      	ldr	r2, [r3, #0]
  40194c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401950:	601a      	str	r2, [r3, #0]
  401952:	4d0a      	ldr	r5, [pc, #40]	; (40197c <_usb_d_dev_reset_epts+0x48>)
  401954:	f105 0414 	add.w	r4, r5, #20
  401958:	3564      	adds	r5, #100	; 0x64
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  40195a:	f04f 0803 	mov.w	r8, #3
  40195e:	4f08      	ldr	r7, [pc, #32]	; (401980 <_usb_d_dev_reset_epts+0x4c>)
		dev_inst.ep[i].ep       = 0xFF;
  401960:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
  401962:	4641      	mov	r1, r8
  401964:	4620      	mov	r0, r4
  401966:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
  401968:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
  40196a:	2300      	movs	r3, #0
  40196c:	74e3      	strb	r3, [r4, #19]
  40196e:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
  401970:	42ac      	cmp	r4, r5
  401972:	d1f6      	bne.n	401962 <_usb_d_dev_reset_epts+0x2e>
}
  401974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401978:	40038000 	.word	0x40038000
  40197c:	204000bc 	.word	0x204000bc
  401980:	00401909 	.word	0x00401909

00401984 <_usb_d_dev_dma_next>:
	if (!ept->flags.bits.is_busy) {
  401984:	7cc2      	ldrb	r2, [r0, #19]
  401986:	f012 0f40 	tst.w	r2, #64	; 0x40
  40198a:	d067      	beq.n	401a5c <_usb_d_dev_dma_next+0xd8>
{
  40198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  40198e:	7c81      	ldrb	r1, [r0, #18]
  401990:	f001 010f 	and.w	r1, r1, #15
	if (ept->trans_count != ept->trans_size) {
  401994:	6887      	ldr	r7, [r0, #8]
  401996:	6843      	ldr	r3, [r0, #4]
  401998:	429f      	cmp	r7, r3
  40199a:	d021      	beq.n	4019e0 <_usb_d_dev_dma_next+0x5c>
		trans_next = ept->trans_size - ept->trans_count;
  40199c:	1bdb      	subs	r3, r3, r7
		if (trans_next > USB_D_DEV_TRANS_MAX) {
  40199e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4019a2:	d826      	bhi.n	4019f2 <_usb_d_dev_dma_next+0x6e>
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(trans_next);
  4019a4:	041e      	lsls	r6, r3, #16
		if ((ept->flags.bits.dir) && (!ept->flags.bits.need_zlp)) {
  4019a6:	f002 0590 	and.w	r5, r2, #144	; 0x90
  4019aa:	2d80      	cmp	r5, #128	; 0x80
  4019ac:	d025      	beq.n	4019fa <_usb_d_dev_dma_next+0x76>
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  4019ae:	f002 0207 	and.w	r2, r2, #7
  4019b2:	2a02      	cmp	r2, #2
  4019b4:	d024      	beq.n	401a00 <_usb_d_dev_dma_next+0x7c>
				dma_ctrl |= USBHS_DEVDMACONTROL_END_TR_IT | USBHS_DEVDMACONTROL_END_TR_EN;
  4019b6:	f046 0614 	orr.w	r6, r6, #20
		hri_usbhs_write_DEVDMAADDRESS_reg(hw, (epn - 1), (uint32_t)&ept->trans_buf[ept->trans_count]);
  4019ba:	6802      	ldr	r2, [r0, #0]
  4019bc:	4417      	add	r7, r2
  4019be:	1e4a      	subs	r2, r1, #1

static inline void hri_usbhs_write_DEVDMAADDRESS_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbhs_devdmaaddress_reg_t data)
{
	USBHS_CRITICAL_SECTION_ENTER();
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMAADDRESS = data;
  4019c0:	b2d2      	uxtb	r2, r2
  4019c2:	4c27      	ldr	r4, [pc, #156]	; (401a60 <_usb_d_dev_dma_next+0xdc>)
  4019c4:	f102 0531 	add.w	r5, r2, #49	; 0x31
  4019c8:	eb04 1505 	add.w	r5, r4, r5, lsl #4
  4019cc:	606f      	str	r7, [r5, #4]
	USBHS_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_END_TR_ST)
  4019ce:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  4019d2:	f8d4 431c 	ldr.w	r4, [r4, #796]	; 0x31c
		if (!hri_usbhs_get_DEVDMASTATUS_END_TR_ST_bit(hw, (epn - 1))) {
  4019d6:	f014 0f10 	tst.w	r4, #16
  4019da:	d015      	beq.n	401a08 <_usb_d_dev_dma_next+0x84>
		ept->trans_size = ept->trans_count;
  4019dc:	6883      	ldr	r3, [r0, #8]
  4019de:	6043      	str	r3, [r0, #4]
	if ((ept->flags.bits.dir) && (ept->flags.bits.need_zlp)) {
  4019e0:	7cc3      	ldrb	r3, [r0, #19]
  4019e2:	f003 0390 	and.w	r3, r3, #144	; 0x90
  4019e6:	2b90      	cmp	r3, #144	; 0x90
  4019e8:	d020      	beq.n	401a2c <_usb_d_dev_dma_next+0xa8>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  4019ea:	2100      	movs	r1, #0
  4019ec:	4b1d      	ldr	r3, [pc, #116]	; (401a64 <_usb_d_dev_dma_next+0xe0>)
  4019ee:	4798      	blx	r3
  4019f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			dma_ctrl = USBHS_DEVDMACONTROL_BUFF_LENGTH(0);
  4019f2:	2600      	movs	r6, #0
			trans_next = USB_D_DEV_TRANS_MAX;
  4019f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4019f8:	e7d5      	b.n	4019a6 <_usb_d_dev_dma_next+0x22>
			dma_ctrl |= USBHS_DEVDMACONTROL_END_B_EN;
  4019fa:	f046 0608 	orr.w	r6, r6, #8
  4019fe:	e7dc      	b.n	4019ba <_usb_d_dev_dma_next+0x36>
			if ((ept->flags.bits.eptype != USB_D_EPTYPE_ISOCH) || (trans_next <= ept->size)) {
  401a00:	8a02      	ldrh	r2, [r0, #16]
  401a02:	4293      	cmp	r3, r2
  401a04:	d8d9      	bhi.n	4019ba <_usb_d_dev_dma_next+0x36>
  401a06:	e7d6      	b.n	4019b6 <_usb_d_dev_dma_next+0x32>
		dma_ctrl |= USBHS_DEVDMACONTROL_END_BUFFIT | USBHS_DEVDMACONTROL_CHANN_ENB;
  401a08:	f046 0621 	orr.w	r6, r6, #33	; 0x21
	((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMACONTROL = data;
  401a0c:	4c14      	ldr	r4, [pc, #80]	; (401a60 <_usb_d_dev_dma_next+0xdc>)
  401a0e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
  401a12:	f8c2 6318 	str.w	r6, [r2, #792]	; 0x318
			ept->trans_count += trans_next;
  401a16:	6882      	ldr	r2, [r0, #8]
  401a18:	441a      	add	r2, r3
  401a1a:	6082      	str	r2, [r0, #8]
			ept->trans_load = trans_next;
  401a1c:	60c3      	str	r3, [r0, #12]
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  401a1e:	3901      	subs	r1, #1
  401a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  401a24:	fa03 f101 	lsl.w	r1, r3, r1
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401a28:	61a1      	str	r1, [r4, #24]
  401a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a2c:	4b0c      	ldr	r3, [pc, #48]	; (401a60 <_usb_d_dev_dma_next+0xdc>)
  401a2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401a32:	2201      	movs	r2, #1
  401a34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RWALL) >> USBHS_DEVEPTISR_RWALL_Pos;
  401a38:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
		if (hri_usbhs_get_DEVEPTISR_RWALL_bit(hw, epn)) {
  401a3c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
  401a40:	d002      	beq.n	401a48 <_usb_d_dev_dma_next+0xc4>
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  401a42:	2201      	movs	r2, #1
  401a44:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401a48:	2201      	movs	r2, #1
  401a4a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  401a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a52:	fa03 f101 	lsl.w	r1, r3, r1
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401a56:	4b02      	ldr	r3, [pc, #8]	; (401a60 <_usb_d_dev_dma_next+0xdc>)
  401a58:	6199      	str	r1, [r3, #24]
  401a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a5c:	4770      	bx	lr
  401a5e:	bf00      	nop
  401a60:	40038000 	.word	0x40038000
  401a64:	00401909 	.word	0x00401909

00401a68 <_usb_d_dev_trans_stop>:
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
	uint8_t epn = USB_EP_GET_N(ept->ep);
  401a68:	7c83      	ldrb	r3, [r0, #18]

	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  401a6a:	2bff      	cmp	r3, #255	; 0xff
  401a6c:	d016      	beq.n	401a9c <_usb_d_dev_trans_stop+0x34>
{
  401a6e:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
  401a70:	7cc4      	ldrb	r4, [r0, #19]
  401a72:	f014 0f40 	tst.w	r4, #64	; 0x40
  401a76:	d00a      	beq.n	401a8e <_usb_d_dev_trans_stop+0x26>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  401a78:	f003 030f 	and.w	r3, r3, #15
		return;
	}

	/* Stop transfer */
	if (dir) {
  401a7c:	b141      	cbz	r1, 401a90 <_usb_d_dev_trans_stop+0x28>
	((Usbhs *)hw)->USBHS_DEVEPTIFR[index] = data;
  401a7e:	3364      	adds	r3, #100	; 0x64
  401a80:	2401      	movs	r4, #1
  401a82:	4907      	ldr	r1, [pc, #28]	; (401aa0 <_usb_d_dev_trans_stop+0x38>)
  401a84:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  401a88:	4611      	mov	r1, r2
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, false);
	}

	_usb_d_dev_trans_done(ept, code);
  401a8a:	4b06      	ldr	r3, [pc, #24]	; (401aa4 <_usb_d_dev_trans_stop+0x3c>)
  401a8c:	4798      	blx	r3
  401a8e:	bd10      	pop	{r4, pc}
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401a90:	3358      	adds	r3, #88	; 0x58
  401a92:	2402      	movs	r4, #2
  401a94:	4902      	ldr	r1, [pc, #8]	; (401aa0 <_usb_d_dev_trans_stop+0x38>)
  401a96:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  401a9a:	e7f5      	b.n	401a88 <_usb_d_dev_trans_stop+0x20>
  401a9c:	4770      	bx	lr
  401a9e:	bf00      	nop
  401aa0:	40038000 	.word	0x40038000
  401aa4:	00401909 	.word	0x00401909

00401aa8 <USBHS_Handler>:
{
  401aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401aac:	b085      	sub	sp, #20
	return ((Usbhs *)hw)->USBHS_DEVISR;
  401aae:	4aaa      	ldr	r2, [pc, #680]	; (401d58 <USBHS_Handler+0x2b0>)
  401ab0:	6851      	ldr	r1, [r2, #4]
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  401ab2:	6913      	ldr	r3, [r2, #16]
	flags = hri_usbhs_read_DEVISR_reg(hw) & hri_usbhs_read_DEVIMR_reg(hw);
  401ab4:	400b      	ands	r3, r1
	ep_int = (flags & USBHS_DEVISR_PEP__Msk) >> USBHS_DEVISR_PEP__Pos;
  401ab6:	f3c3 370b 	ubfx	r7, r3, #12, #12
	dma_int = (flags & USBHS_DEVISR_DMA__Msk) >> USBHS_DEVISR_DMA__Pos;
  401aba:	ea4f 6853 	mov.w	r8, r3, lsr #25
	if ((ep_int == 0) && (dma_int == 0)) {
  401abe:	b917      	cbnz	r7, 401ac6 <USBHS_Handler+0x1e>
  401ac0:	f1b8 0f00 	cmp.w	r8, #0
  401ac4:	d002      	beq.n	401acc <USBHS_Handler+0x24>
  401ac6:	4ca5      	ldr	r4, [pc, #660]	; (401d5c <USBHS_Handler+0x2b4>)
{
  401ac8:	2500      	movs	r5, #0
  401aca:	e08a      	b.n	401be2 <USBHS_Handler+0x13a>
	return ((Usbhs *)hw)->USBHS_DEVISR;
  401acc:	6853      	ldr	r3, [r2, #4]
	uint16_t flags = hri_usbhs_read_DEVISR_reg(USBHS);
  401ace:	b29b      	uxth	r3, r3
	return ((Usbhs *)hw)->USBHS_DEVIMR;
  401ad0:	6912      	ldr	r2, [r2, #16]
	flags &= hri_usbhs_read_DEVIMR_reg(USBHS);
  401ad2:	4013      	ands	r3, r2
	if (flags & USBHS_DEVISR_SOF) {
  401ad4:	f013 0f04 	tst.w	r3, #4
  401ad8:	d117      	bne.n	401b0a <USBHS_Handler+0x62>
	} else if (flags & USBHS_DEVISR_MSOF) {
  401ada:	f013 0f02 	tst.w	r3, #2
  401ade:	d11d      	bne.n	401b1c <USBHS_Handler+0x74>
	if (flags & USB_D_WAKEUP_INT_FLAGS) {
  401ae0:	f013 0f70 	tst.w	r3, #112	; 0x70
  401ae4:	d121      	bne.n	401b2a <USBHS_Handler+0x82>
	} else if (flags & USBHS_DEVISR_EORST) {
  401ae6:	f013 0f08 	tst.w	r3, #8
  401aea:	d12a      	bne.n	401b42 <USBHS_Handler+0x9a>
	} else if (flags & USBHS_DEVISR_SUSP) {
  401aec:	f013 0f01 	tst.w	r3, #1
  401af0:	d0e9      	beq.n	401ac6 <USBHS_Handler+0x1e>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  401af2:	4b99      	ldr	r3, [pc, #612]	; (401d58 <USBHS_Handler+0x2b0>)
  401af4:	2201      	movs	r2, #1
  401af6:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401af8:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401afa:	2270      	movs	r2, #112	; 0x70
  401afc:	619a      	str	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
  401afe:	4b97      	ldr	r3, [pc, #604]	; (401d5c <USBHS_Handler+0x2b4>)
  401b00:	685b      	ldr	r3, [r3, #4]
  401b02:	2100      	movs	r1, #0
  401b04:	2004      	movs	r0, #4
  401b06:	4798      	blx	r3
  401b08:	e005      	b.n	401b16 <USBHS_Handler+0x6e>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  401b0a:	2204      	movs	r2, #4
  401b0c:	4b92      	ldr	r3, [pc, #584]	; (401d58 <USBHS_Handler+0x2b0>)
  401b0e:	609a      	str	r2, [r3, #8]
	dev_inst.callbacks.sof();
  401b10:	4b92      	ldr	r3, [pc, #584]	; (401d5c <USBHS_Handler+0x2b4>)
  401b12:	681b      	ldr	r3, [r3, #0]
  401b14:	4798      	blx	r3
}
  401b16:	b005      	add	sp, #20
  401b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b1c:	2202      	movs	r2, #2
  401b1e:	4b8e      	ldr	r3, [pc, #568]	; (401d58 <USBHS_Handler+0x2b0>)
  401b20:	609a      	str	r2, [r3, #8]
	dev_inst.callbacks.sof();
  401b22:	4b8e      	ldr	r3, [pc, #568]	; (401d5c <USBHS_Handler+0x2b4>)
  401b24:	681b      	ldr	r3, [r3, #0]
  401b26:	4798      	blx	r3
  401b28:	e7f5      	b.n	401b16 <USBHS_Handler+0x6e>
  401b2a:	4b8b      	ldr	r3, [pc, #556]	; (401d58 <USBHS_Handler+0x2b0>)
  401b2c:	2210      	movs	r2, #16
  401b2e:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = USBHS_DEVIMR_WAKEUPE;
  401b30:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = USBHS_DEVIMR_SUSPE;
  401b32:	2201      	movs	r2, #1
  401b34:	619a      	str	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
  401b36:	4b89      	ldr	r3, [pc, #548]	; (401d5c <USBHS_Handler+0x2b4>)
  401b38:	685b      	ldr	r3, [r3, #4]
  401b3a:	2100      	movs	r1, #0
  401b3c:	2002      	movs	r0, #2
  401b3e:	4798      	blx	r3
  401b40:	e7e9      	b.n	401b16 <USBHS_Handler+0x6e>
	((Usbhs *)hw)->USBHS_DEVICR = data;
  401b42:	4b85      	ldr	r3, [pc, #532]	; (401d58 <USBHS_Handler+0x2b0>)
  401b44:	2208      	movs	r2, #8
  401b46:	609a      	str	r2, [r3, #8]
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401b48:	2270      	movs	r2, #112	; 0x70
  401b4a:	615a      	str	r2, [r3, #20]
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401b4c:	2401      	movs	r4, #1
  401b4e:	619c      	str	r4, [r3, #24]
	_usb_d_dev_reset_epts();
  401b50:	4b83      	ldr	r3, [pc, #524]	; (401d60 <USBHS_Handler+0x2b8>)
  401b52:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
  401b54:	4b81      	ldr	r3, [pc, #516]	; (401d5c <USBHS_Handler+0x2b4>)
  401b56:	685b      	ldr	r3, [r3, #4]
  401b58:	2100      	movs	r1, #0
  401b5a:	4620      	mov	r0, r4
  401b5c:	4798      	blx	r3
  401b5e:	e7da      	b.n	401b16 <USBHS_Handler+0x6e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  401b60:	f006 060f 	and.w	r6, r6, #15
	if (!(epint & (1u << epn))) {
  401b64:	2301      	movs	r3, #1
  401b66:	40b3      	lsls	r3, r6
  401b68:	423b      	tst	r3, r7
  401b6a:	d036      	beq.n	401bda <USBHS_Handler+0x132>
  401b6c:	4b7a      	ldr	r3, [pc, #488]	; (401d58 <USBHS_Handler+0x2b0>)
  401b6e:	eb03 0b86 	add.w	fp, r3, r6, lsl #2
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  401b72:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
	flags = hri_usbhs_read_DEVEPTISR_reg(hw, epn);
  401b76:	b2db      	uxtb	r3, r3
	return ((Usbhs *)hw)->USBHS_DEVEPTIMR[index];
  401b78:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
	if (flags) {
  401b7c:	4013      	ands	r3, r2
  401b7e:	d02c      	beq.n	401bda <USBHS_Handler+0x132>
		if (flags & USBHS_DEVEPTISR_STALLEDI) {
  401b80:	f013 0f40 	tst.w	r3, #64	; 0x40
  401b84:	d122      	bne.n	401bcc <USBHS_Handler+0x124>
		} else if (!_usb_d_dev_ep_is_busy(ept)) {
  401b86:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  401b8a:	4974      	ldr	r1, [pc, #464]	; (401d5c <USBHS_Handler+0x2b4>)
  401b8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401b90:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
  401b94:	9201      	str	r2, [sp, #4]
  401b96:	f012 0f40 	tst.w	r2, #64	; 0x40
  401b9a:	d058      	beq.n	401c4e <USBHS_Handler+0x1a6>
		} else if (_usb_d_dev_ep_is_in(ept)) {
  401b9c:	9a01      	ldr	r2, [sp, #4]
  401b9e:	f012 0f80 	tst.w	r2, #128	; 0x80
  401ba2:	d15b      	bne.n	401c5c <USBHS_Handler+0x1b4>
	if (flags & USBHS_DEVEPTISR_OVERFI) {
  401ba4:	f013 0f20 	tst.w	r3, #32
  401ba8:	f040 8103 	bne.w	401db2 <USBHS_Handler+0x30a>
	} else if (flags & USBHS_DEVEPTISR_RXOUTI) {
  401bac:	f013 0f02 	tst.w	r3, #2
  401bb0:	f040 810f 	bne.w	401dd2 <USBHS_Handler+0x32a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  401bb4:	9a01      	ldr	r2, [sp, #4]
  401bb6:	f002 0207 	and.w	r2, r2, #7
  401bba:	2a01      	cmp	r2, #1
  401bbc:	d10d      	bne.n	401bda <USBHS_Handler+0x132>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  401bbe:	f013 0f04 	tst.w	r3, #4
  401bc2:	d00a      	beq.n	401bda <USBHS_Handler+0x132>
			_usb_d_dev_handle_setup(ept);
  401bc4:	4650      	mov	r0, sl
  401bc6:	4b67      	ldr	r3, [pc, #412]	; (401d64 <USBHS_Handler+0x2bc>)
  401bc8:	4798      	blx	r3
  401bca:	e006      	b.n	401bda <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401bcc:	2340      	movs	r3, #64	; 0x40
  401bce:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
	_usb_d_dev_trans_done(ept, USB_TRANS_STALL);
  401bd2:	2101      	movs	r1, #1
  401bd4:	4650      	mov	r0, sl
  401bd6:	4b64      	ldr	r3, [pc, #400]	; (401d68 <USBHS_Handler+0x2c0>)
  401bd8:	4798      	blx	r3
  401bda:	3501      	adds	r5, #1
  401bdc:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
  401bde:	2d04      	cmp	r5, #4
  401be0:	d099      	beq.n	401b16 <USBHS_Handler+0x6e>
		struct _usb_d_dev_ep *ept = &dev_inst.ep[i];
  401be2:	46a9      	mov	r9, r5
  401be4:	9400      	str	r4, [sp, #0]
		if (ept->ep == 0xFF) {
  401be6:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
  401bea:	2eff      	cmp	r6, #255	; 0xff
  401bec:	d0f5      	beq.n	401bda <USBHS_Handler+0x132>
  401bee:	f104 0a14 	add.w	sl, r4, #20
		if (ep_int) {
  401bf2:	2f00      	cmp	r7, #0
  401bf4:	d1b4      	bne.n	401b60 <USBHS_Handler+0xb8>
		else if ((dma_int) && (_usb_d_dev_ep_is_dma(i))) {
  401bf6:	f1b8 0f00 	cmp.w	r8, #0
  401bfa:	d0ee      	beq.n	401bda <USBHS_Handler+0x132>
  401bfc:	1e6b      	subs	r3, r5, #1
  401bfe:	b2db      	uxtb	r3, r3
  401c00:	2b05      	cmp	r3, #5
  401c02:	d8ea      	bhi.n	401bda <USBHS_Handler+0x132>
	uint8_t  epn = USB_EP_GET_N(ept->ep);
  401c04:	f006 060f 	and.w	r6, r6, #15
	if (!(epint & (1u << (epn - 1)))) {
  401c08:	1e71      	subs	r1, r6, #1
  401c0a:	2301      	movs	r3, #1
  401c0c:	408b      	lsls	r3, r1
  401c0e:	ea13 0f08 	tst.w	r3, r8
  401c12:	d0e2      	beq.n	401bda <USBHS_Handler+0x132>
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_CHANN_ENB)
  401c14:	b2cb      	uxtb	r3, r1
  401c16:	4a50      	ldr	r2, [pc, #320]	; (401d58 <USBHS_Handler+0x2b0>)
  401c18:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  401c1c:	f8d2 231c 	ldr.w	r2, [r2, #796]	; 0x31c
	if (hri_usbhs_get_DEVDMASTATUS_CHANN_ENB_bit(hw, (epn - 1))) {
  401c20:	f012 0f01 	tst.w	r2, #1
  401c24:	d1d9      	bne.n	401bda <USBHS_Handler+0x132>
	hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIMR_DMA_1 << (epn - 1)));
  401c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401c2a:	408a      	lsls	r2, r1
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401c2c:	494a      	ldr	r1, [pc, #296]	; (401d58 <USBHS_Handler+0x2b0>)
  401c2e:	614a      	str	r2, [r1, #20]
}

static inline hri_usbhs_devdmastatus_reg_t hri_usbhs_read_DEVDMASTATUS_BUFF_COUNT_bf(const void *const hw,
                                                                                     uint8_t           submodule_index)
{
	return (((Usbhs *)hw)->USBHS_DEVDMA[submodule_index].USBHS_DEVDMASTATUS & USBHS_DEVDMASTATUS_BUFF_COUNT_Msk)
  401c30:	eb01 1303 	add.w	r3, r1, r3, lsl #4
  401c34:	f8d3 231c 	ldr.w	r2, [r3, #796]	; 0x31c
	if (trans_next) {
  401c38:	0c12      	lsrs	r2, r2, #16
  401c3a:	d004      	beq.n	401c46 <USBHS_Handler+0x19e>
		ept->trans_count -= trans_next;
  401c3c:	9900      	ldr	r1, [sp, #0]
  401c3e:	69cb      	ldr	r3, [r1, #28]
  401c40:	1a9b      	subs	r3, r3, r2
  401c42:	61cb      	str	r3, [r1, #28]
		ept->trans_size = ept->trans_count;
  401c44:	618b      	str	r3, [r1, #24]
	_usb_d_dev_dma_next(ept);
  401c46:	4650      	mov	r0, sl
  401c48:	4b48      	ldr	r3, [pc, #288]	; (401d6c <USBHS_Handler+0x2c4>)
  401c4a:	4798      	blx	r3
  401c4c:	e7c5      	b.n	401bda <USBHS_Handler+0x132>
	if (flags & USBHS_DEVEPTISR_RXSTPI) {
  401c4e:	f013 0f04 	tst.w	r3, #4
  401c52:	d0c2      	beq.n	401bda <USBHS_Handler+0x132>
		_usb_d_dev_handle_setup(ept);
  401c54:	4650      	mov	r0, sl
  401c56:	4b43      	ldr	r3, [pc, #268]	; (401d64 <USBHS_Handler+0x2bc>)
  401c58:	4798      	blx	r3
  401c5a:	e7be      	b.n	401bda <USBHS_Handler+0x132>
	if (flags & USBHS_DEVEPTISR_TXINI) {
  401c5c:	f013 0f01 	tst.w	r3, #1
  401c60:	d10b      	bne.n	401c7a <USBHS_Handler+0x1d2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
  401c62:	9a01      	ldr	r2, [sp, #4]
  401c64:	f002 0207 	and.w	r2, r2, #7
  401c68:	2a01      	cmp	r2, #1
  401c6a:	d1b6      	bne.n	401bda <USBHS_Handler+0x132>
		if (flags & USBHS_DEVEPTISR_RXSTPI) {
  401c6c:	f013 0f04 	tst.w	r3, #4
  401c70:	d0b3      	beq.n	401bda <USBHS_Handler+0x132>
			_usb_d_dev_handle_setup(ept);
  401c72:	4650      	mov	r0, sl
  401c74:	4b3b      	ldr	r3, [pc, #236]	; (401d64 <USBHS_Handler+0x2bc>)
  401c76:	4798      	blx	r3
  401c78:	e7af      	b.n	401bda <USBHS_Handler+0x132>
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  401c7a:	9b00      	ldr	r3, [sp, #0]
  401c7c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
  401c7e:	f240 33ff 	movw	r3, #1023	; 0x3ff
  401c82:	4298      	cmp	r0, r3
  401c84:	d02f      	beq.n	401ce6 <USBHS_Handler+0x23e>
  401c86:	1e42      	subs	r2, r0, #1
  401c88:	b292      	uxth	r2, r2
	bool     is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
  401c8a:	9b01      	ldr	r3, [sp, #4]
  401c8c:	f003 0307 	and.w	r3, r3, #7
  401c90:	9302      	str	r3, [sp, #8]
	if (ept->trans_count >= ept->trans_size) {
  401c92:	9b00      	ldr	r3, [sp, #0]
  401c94:	469e      	mov	lr, r3
  401c96:	69d9      	ldr	r1, [r3, #28]
  401c98:	f8de 3018 	ldr.w	r3, [lr, #24]
  401c9c:	4299      	cmp	r1, r3
  401c9e:	d367      	bcc.n	401d70 <USBHS_Handler+0x2c8>
		if (ept->flags.bits.need_zlp) {
  401ca0:	9901      	ldr	r1, [sp, #4]
  401ca2:	f011 0f10 	tst.w	r1, #16
  401ca6:	d021      	beq.n	401cec <USBHS_Handler+0x244>
			ept->trans_load          = 0;
  401ca8:	2100      	movs	r1, #0
  401caa:	f8ce 1020 	str.w	r1, [lr, #32]
			ept->flags.bits.need_zlp = 0;
  401cae:	eb09 0389 	add.w	r3, r9, r9, lsl #2
  401cb2:	4a2a      	ldr	r2, [pc, #168]	; (401d5c <USBHS_Handler+0x2b4>)
  401cb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401cb8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401cbc:	f361 1204 	bfi	r2, r1, #4, #1
  401cc0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401cc4:	2301      	movs	r3, #1
  401cc6:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
  401cca:	2308      	movs	r3, #8
  401ccc:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401cd0:	f8cb 31f0 	str.w	r3, [fp, #496]	; 0x1f0
			if (!is_ctrl) {
  401cd4:	9b02      	ldr	r3, [sp, #8]
  401cd6:	2b01      	cmp	r3, #1
  401cd8:	f43f af7f 	beq.w	401bda <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401ce0:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
  401ce4:	e779      	b.n	401bda <USBHS_Handler+0x132>
	uint16_t last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
  401ce6:	f240 32ff 	movw	r2, #1023	; 0x3ff
  401cea:	e7ce      	b.n	401c8a <USBHS_Handler+0x1e2>
	uint16_t trans_count = ept->trans_load;
  401cec:	9b00      	ldr	r3, [sp, #0]
  401cee:	6a1b      	ldr	r3, [r3, #32]
  401cf0:	2101      	movs	r1, #1
  401cf2:	f8cb 1220 	str.w	r1, [fp, #544]	; 0x220
		if (!is_ctrl) {
  401cf6:	9902      	ldr	r1, [sp, #8]
  401cf8:	2901      	cmp	r1, #1
  401cfa:	d005      	beq.n	401d08 <USBHS_Handler+0x260>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  401cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401d00:	fa01 f606 	lsl.w	r6, r1, r6
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401d04:	4914      	ldr	r1, [pc, #80]	; (401d58 <USBHS_Handler+0x2b0>)
  401d06:	614e      	str	r6, [r1, #20]
		ept->trans_size = ept->trans_count;
  401d08:	9e00      	ldr	r6, [sp, #0]
  401d0a:	69f1      	ldr	r1, [r6, #28]
  401d0c:	61b1      	str	r1, [r6, #24]
		if (last_pkt == ept->size) {
  401d0e:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
  401d10:	401a      	ands	r2, r3
  401d12:	4290      	cmp	r0, r2
  401d14:	d11b      	bne.n	401d4e <USBHS_Handler+0x2a6>
			ept->flags.bits.is_busy = 0;
  401d16:	2314      	movs	r3, #20
  401d18:	4a10      	ldr	r2, [pc, #64]	; (401d5c <USBHS_Handler+0x2b4>)
  401d1a:	fb03 2309 	mla	r3, r3, r9, r2
  401d1e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401d22:	f36f 1286 	bfc	r2, #6, #1
  401d26:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
  401d2a:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <USBHS_Handler+0x2b4>)
  401d2c:	68db      	ldr	r3, [r3, #12]
  401d2e:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
  401d32:	4798      	blx	r3
  401d34:	2800      	cmp	r0, #0
  401d36:	f47f af50 	bne.w	401bda <USBHS_Handler+0x132>
			ept->flags.bits.is_busy = 1;
  401d3a:	2314      	movs	r3, #20
  401d3c:	4a07      	ldr	r2, [pc, #28]	; (401d5c <USBHS_Handler+0x2b4>)
  401d3e:	fb03 2309 	mla	r3, r3, r9, r2
  401d42:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  401d4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  401d4e:	2100      	movs	r1, #0
  401d50:	4650      	mov	r0, sl
  401d52:	4b05      	ldr	r3, [pc, #20]	; (401d68 <USBHS_Handler+0x2c0>)
  401d54:	4798      	blx	r3
  401d56:	e740      	b.n	401bda <USBHS_Handler+0x132>
  401d58:	40038000 	.word	0x40038000
  401d5c:	204000bc 	.word	0x204000bc
  401d60:	00401935 	.word	0x00401935
  401d64:	00401899 	.word	0x00401899
  401d68:	00401909 	.word	0x00401909
  401d6c:	00401985 	.word	0x00401985
		trans_next = ept->trans_size - ept->trans_count;
  401d70:	1a5b      	subs	r3, r3, r1
  401d72:	b29b      	uxth	r3, r3
		memcpy(ptr_dest, ptr_src, trans_next);
  401d74:	4298      	cmp	r0, r3
  401d76:	bf28      	it	cs
  401d78:	4618      	movcs	r0, r3
  401d7a:	4681      	mov	r9, r0
		ptr_src = &ept->trans_buf[ept->trans_count];
  401d7c:	9b00      	ldr	r3, [sp, #0]
  401d7e:	695b      	ldr	r3, [r3, #20]
		memcpy(ptr_dest, ptr_src, trans_next);
  401d80:	4602      	mov	r2, r0
  401d82:	4419      	add	r1, r3
  401d84:	4842      	ldr	r0, [pc, #264]	; (401e90 <USBHS_Handler+0x3e8>)
  401d86:	eb00 30c6 	add.w	r0, r0, r6, lsl #15
  401d8a:	4b42      	ldr	r3, [pc, #264]	; (401e94 <USBHS_Handler+0x3ec>)
  401d8c:	4798      	blx	r3
		ept->trans_load = trans_next;
  401d8e:	9a00      	ldr	r2, [sp, #0]
  401d90:	f8c2 9020 	str.w	r9, [r2, #32]
		ept->trans_count += trans_next;
  401d94:	69d3      	ldr	r3, [r2, #28]
  401d96:	444b      	add	r3, r9
  401d98:	61d3      	str	r3, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401d9a:	2301      	movs	r3, #1
  401d9c:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
		if (!is_ctrl) {
  401da0:	9b02      	ldr	r3, [sp, #8]
  401da2:	2b01      	cmp	r3, #1
  401da4:	f43f af19 	beq.w	401bda <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401da8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401dac:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
  401db0:	e713      	b.n	401bda <USBHS_Handler+0x132>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401db2:	2320      	movs	r3, #32
  401db4:	f8cb 3160 	str.w	r3, [fp, #352]	; 0x160
	_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_ERROR);
  401db8:	eb05 0985 	add.w	r9, r5, r5, lsl #2
  401dbc:	4b36      	ldr	r3, [pc, #216]	; (401e98 <USBHS_Handler+0x3f0>)
  401dbe:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  401dc2:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
  401dc6:	2204      	movs	r2, #4
  401dc8:	09c9      	lsrs	r1, r1, #7
  401dca:	4650      	mov	r0, sl
  401dcc:	4b33      	ldr	r3, [pc, #204]	; (401e9c <USBHS_Handler+0x3f4>)
  401dce:	4798      	blx	r3
  401dd0:	e703      	b.n	401bda <USBHS_Handler+0x132>
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  401dd2:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  401dd6:	f3c3 530a 	ubfx	r3, r3, #20, #11
  401dda:	4619      	mov	r1, r3
  401ddc:	9302      	str	r3, [sp, #8]
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  401dde:	9a00      	ldr	r2, [sp, #0]
  401de0:	6993      	ldr	r3, [r2, #24]
  401de2:	69d0      	ldr	r0, [r2, #28]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401de4:	2202      	movs	r2, #2
  401de6:	f8cb 2160 	str.w	r2, [fp, #352]	; 0x160
	if (last_trans > 0) {
  401dea:	2900      	cmp	r1, #0
  401dec:	d043      	beq.n	401e76 <USBHS_Handler+0x3ce>
	uint16_t last_remain = ept->trans_size - ept->trans_count;
  401dee:	1a1b      	subs	r3, r3, r0
  401df0:	b29b      	uxth	r3, r3
		if (last_trans > last_remain) {
  401df2:	4299      	cmp	r1, r3
  401df4:	d93c      	bls.n	401e70 <USBHS_Handler+0x3c8>
			last_trans = last_remain;
  401df6:	9302      	str	r3, [sp, #8]
			is_full    = true;
  401df8:	2301      	movs	r3, #1
  401dfa:	9303      	str	r3, [sp, #12]
		memcpy(&ept->trans_buf[ept->trans_count], ptr, last_trans);
  401dfc:	9b00      	ldr	r3, [sp, #0]
  401dfe:	695b      	ldr	r3, [r3, #20]
  401e00:	9a02      	ldr	r2, [sp, #8]
  401e02:	4923      	ldr	r1, [pc, #140]	; (401e90 <USBHS_Handler+0x3e8>)
  401e04:	eb01 31c6 	add.w	r1, r1, r6, lsl #15
  401e08:	4418      	add	r0, r3
  401e0a:	4b22      	ldr	r3, [pc, #136]	; (401e94 <USBHS_Handler+0x3ec>)
  401e0c:	4798      	blx	r3
		ept->trans_count += last_trans;
  401e0e:	9900      	ldr	r1, [sp, #0]
  401e10:	69cb      	ldr	r3, [r1, #28]
  401e12:	9802      	ldr	r0, [sp, #8]
  401e14:	4403      	add	r3, r0
  401e16:	61cb      	str	r3, [r1, #28]
		ept->trans_load = last_trans;
  401e18:	460b      	mov	r3, r1
  401e1a:	6218      	str	r0, [r3, #32]
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401e1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  401e20:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
	if (last_trans < ept->size) {
  401e24:	9b00      	ldr	r3, [sp, #0]
  401e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  401e28:	9a02      	ldr	r2, [sp, #8]
  401e2a:	4293      	cmp	r3, r2
  401e2c:	d926      	bls.n	401e7c <USBHS_Handler+0x3d4>
		ept->flags.bits.need_zlp = 0;
  401e2e:	eb09 0389 	add.w	r3, r9, r9, lsl #2
  401e32:	4a19      	ldr	r2, [pc, #100]	; (401e98 <USBHS_Handler+0x3f0>)
  401e34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401e38:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401e3c:	f36f 1204 	bfc	r2, #4, #1
  401e40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  401e44:	2302      	movs	r3, #2
  401e46:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
		if (!is_ctrl) {
  401e4a:	9b01      	ldr	r3, [sp, #4]
  401e4c:	f003 0307 	and.w	r3, r3, #7
  401e50:	2b01      	cmp	r3, #1
  401e52:	d005      	beq.n	401e60 <USBHS_Handler+0x3b8>
			hri_usbhs_clear_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  401e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401e58:	fa03 f606 	lsl.w	r6, r3, r6
	((Usbhs *)hw)->USBHS_DEVIDR = mask;
  401e5c:	4b10      	ldr	r3, [pc, #64]	; (401ea0 <USBHS_Handler+0x3f8>)
  401e5e:	615e      	str	r6, [r3, #20]
		ept->trans_size = ept->trans_count;
  401e60:	9a00      	ldr	r2, [sp, #0]
  401e62:	69d3      	ldr	r3, [r2, #28]
  401e64:	6193      	str	r3, [r2, #24]
		_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
  401e66:	2100      	movs	r1, #0
  401e68:	4650      	mov	r0, sl
  401e6a:	4b0e      	ldr	r3, [pc, #56]	; (401ea4 <USBHS_Handler+0x3fc>)
  401e6c:	4798      	blx	r3
  401e6e:	e6b4      	b.n	401bda <USBHS_Handler+0x132>
	bool     is_full = false, is_short = false;
  401e70:	2300      	movs	r3, #0
  401e72:	9303      	str	r3, [sp, #12]
  401e74:	e7c2      	b.n	401dfc <USBHS_Handler+0x354>
  401e76:	2300      	movs	r3, #0
  401e78:	9303      	str	r3, [sp, #12]
  401e7a:	e7d3      	b.n	401e24 <USBHS_Handler+0x37c>
	} else if (ept->trans_count >= ept->trans_size) {
  401e7c:	9900      	ldr	r1, [sp, #0]
  401e7e:	69ca      	ldr	r2, [r1, #28]
  401e80:	698b      	ldr	r3, [r1, #24]
  401e82:	429a      	cmp	r2, r3
  401e84:	d2de      	bcs.n	401e44 <USBHS_Handler+0x39c>
	if (is_full || is_short) {
  401e86:	9b03      	ldr	r3, [sp, #12]
  401e88:	2b00      	cmp	r3, #0
  401e8a:	f43f aea6 	beq.w	401bda <USBHS_Handler+0x132>
  401e8e:	e7d9      	b.n	401e44 <USBHS_Handler+0x39c>
  401e90:	a0100000 	.word	0xa0100000
  401e94:	004023b1 	.word	0x004023b1
  401e98:	204000bc 	.word	0x204000bc
  401e9c:	00401a69 	.word	0x00401a69
  401ea0:	40038000 	.word	0x40038000
  401ea4:	00401909 	.word	0x00401909

00401ea8 <_usb_d_dev_init>:
{
  401ea8:	b508      	push	{r3, lr}
	tmp = ((Usbhs *)hw)->USBHS_CTRL;
  401eaa:	4b0e      	ldr	r3, [pc, #56]	; (401ee4 <_usb_d_dev_init+0x3c>)
  401eac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
	if (hri_usbhs_get_CTRL_USBE_bit(hw)) {
  401eb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  401eb4:	d113      	bne.n	401ede <_usb_d_dev_init+0x36>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
  401eb6:	4b0c      	ldr	r3, [pc, #48]	; (401ee8 <_usb_d_dev_init+0x40>)
  401eb8:	4a0c      	ldr	r2, [pc, #48]	; (401eec <_usb_d_dev_init+0x44>)
  401eba:	601a      	str	r2, [r3, #0]
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
  401ebc:	605a      	str	r2, [r3, #4]
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
  401ebe:	609a      	str	r2, [r3, #8]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_return_false;
  401ec0:	490b      	ldr	r1, [pc, #44]	; (401ef0 <_usb_d_dev_init+0x48>)
  401ec2:	60d9      	str	r1, [r3, #12]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
  401ec4:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
  401ec6:	4b0b      	ldr	r3, [pc, #44]	; (401ef4 <_usb_d_dev_init+0x4c>)
  401ec8:	4798      	blx	r3
	((Usbhs *)hw)->USBHS_CTRL = data;
  401eca:	4b06      	ldr	r3, [pc, #24]	; (401ee4 <_usb_d_dev_init+0x3c>)
  401ecc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401ed0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	((Usbhs *)hw)->USBHS_DEVCTRL = data;
  401ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
  401ed8:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
  401eda:	2000      	movs	r0, #0
  401edc:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
  401ede:	f06f 0010 	mvn.w	r0, #16
}
  401ee2:	bd08      	pop	{r3, pc}
  401ee4:	40038000 	.word	0x40038000
  401ee8:	204000bc 	.word	0x204000bc
  401eec:	00401891 	.word	0x00401891
  401ef0:	00401893 	.word	0x00401893
  401ef4:	00401935 	.word	0x00401935

00401ef8 <_usb_d_dev_ep_stall>:
	uint8_t               epn = USB_EP_GET_N(ep);
  401ef8:	f000 000f 	and.w	r0, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N) {
  401efc:	2803      	cmp	r0, #3
  401efe:	f200 808a 	bhi.w	402016 <_usb_d_dev_ep_stall+0x11e>
	if (USB_EP_STALL_SET == ctrl) {
  401f02:	2901      	cmp	r1, #1
  401f04:	d00b      	beq.n	401f1e <_usb_d_dev_ep_stall+0x26>
	} else if (USB_EP_STALL_CLR == ctrl) {
  401f06:	2900      	cmp	r1, #0
  401f08:	d039      	beq.n	401f7e <_usb_d_dev_ep_stall+0x86>
	return ept->flags.bits.is_stalled;
  401f0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f0e:	4b48      	ldr	r3, [pc, #288]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  401f10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f14:	f890 0027 	ldrb.w	r0, [r0, #39]	; 0x27
  401f18:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  401f1c:	4770      	bx	lr
	uint8_t epn = USB_EP_GET_N(ept->ep);
  401f1e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  401f22:	4a43      	ldr	r2, [pc, #268]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  401f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401f28:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  401f2c:	f003 030f 	and.w	r3, r3, #15
	if (epn > CONF_USB_D_MAX_EP_N) {
  401f30:	2b03      	cmp	r3, #3
  401f32:	d873      	bhi.n	40201c <_usb_d_dev_ep_stall+0x124>
	if (!ept->flags.bits.is_stalled) {
  401f34:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  401f38:	493d      	ldr	r1, [pc, #244]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  401f3a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401f3e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
  401f42:	f012 0f08 	tst.w	r2, #8
  401f46:	d16c      	bne.n	402022 <_usb_d_dev_ep_stall+0x12a>
		ept->flags.bits.is_stalled = 1;
  401f48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f4c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  401f50:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
  401f54:	f042 0208 	orr.w	r2, r2, #8
  401f58:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
  401f5c:	4835      	ldr	r0, [pc, #212]	; (402034 <_usb_d_dev_ep_stall+0x13c>)
  401f5e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401f62:	2240      	movs	r2, #64	; 0x40
  401f64:	f8c1 21f0 	str.w	r2, [r1, #496]	; 0x1f0
	hri_usbhs_set_DEVIMR_reg(USBHS, USBHS_DEVIMR_PEP_0 << epn);
  401f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401f6c:	fa02 f303 	lsl.w	r3, r2, r3
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  401f70:	6183      	str	r3, [r0, #24]
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401f72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401f76:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0
	return ERR_NONE;
  401f7a:	2000      	movs	r0, #0
  401f7c:	4770      	bx	lr
	if (!ept->flags.bits.is_stalled) {
  401f7e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  401f82:	4a2b      	ldr	r2, [pc, #172]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  401f84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401f88:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401f8c:	f012 0f08 	tst.w	r2, #8
  401f90:	d049      	beq.n	402026 <_usb_d_dev_ep_stall+0x12e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
  401f92:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  401f96:	4926      	ldr	r1, [pc, #152]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  401f98:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  401f9c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  401fa0:	f003 010f 	and.w	r1, r3, #15
  401fa4:	4b23      	ldr	r3, [pc, #140]	; (402034 <_usb_d_dev_ep_stall+0x13c>)
  401fa6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTIDR[index] = data;
  401faa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401fae:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
  401fb2:	2140      	movs	r1, #64	; 0x40
  401fb4:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_STALLEDI) >> USBHS_DEVEPTISR_STALLEDI_Pos;
  401fb8:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
	if (_usbd_ep_is_stall_sent(epn)) {
  401fbc:	f011 0f40 	tst.w	r1, #64	; 0x40
  401fc0:	d006      	beq.n	401fd0 <_usb_d_dev_ep_stall+0xd8>
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  401fc2:	2140      	movs	r1, #64	; 0x40
  401fc4:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  401fc8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  401fcc:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (_usb_d_dev_ep_is_ctrl(ept)) {
  401fd0:	f002 0207 	and.w	r2, r2, #7
  401fd4:	2a01      	cmp	r2, #1
  401fd6:	d00c      	beq.n	401ff2 <_usb_d_dev_ep_stall+0xfa>
		ept->flags.bits.is_stalled = 0;
  401fd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401fdc:	4b14      	ldr	r3, [pc, #80]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  401fde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  401fe2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  401fe6:	f36f 02c3 	bfc	r2, #3, #1
  401fea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_clr(ept);
  401fee:	2000      	movs	r0, #0
  401ff0:	4770      	bx	lr
	return ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  401ff2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
		if ((hri_usbhs_read_DEVEPTISR_reg(USBHS, epn) & USBHS_DEVEPTISR_STALLEDI) == 0) {
  401ff6:	f013 0f40 	tst.w	r3, #64	; 0x40
  401ffa:	d116      	bne.n	40202a <_usb_d_dev_ep_stall+0x132>
			ept->flags.bits.is_stalled = 0;
  401ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402000:	4b0b      	ldr	r3, [pc, #44]	; (402030 <_usb_d_dev_ep_stall+0x138>)
  402002:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  402006:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  40200a:	f36f 02c3 	bfc	r2, #3, #1
  40200e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		rc = _usb_d_dev_ep_stall_clr(ept);
  402012:	2000      	movs	r0, #0
  402014:	4770      	bx	lr
		return -USB_ERR_PARAM;
  402016:	f06f 0011 	mvn.w	r0, #17
  40201a:	4770      	bx	lr
		return ERR_NOT_FOUND;
  40201c:	f06f 0009 	mvn.w	r0, #9
  402020:	4770      	bx	lr
	return ERR_NONE;
  402022:	2000      	movs	r0, #0
  402024:	4770      	bx	lr
		rc = _usb_d_dev_ep_stall_clr(ept);
  402026:	2000      	movs	r0, #0
  402028:	4770      	bx	lr
  40202a:	2000      	movs	r0, #0
}
  40202c:	4770      	bx	lr
  40202e:	bf00      	nop
  402030:	204000bc 	.word	0x204000bc
  402034:	40038000 	.word	0x40038000

00402038 <_usb_d_dev_ep_read_req>:
}

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
	uint8_t epn = USB_EP_GET_N(ep);
  402038:	f000 000f 	and.w	r0, r0, #15
  40203c:	4b15      	ldr	r3, [pc, #84]	; (402094 <_usb_d_dev_ep_read_req+0x5c>)
  40203e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTISR[index];
  402042:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130

	uint16_t bytes = _usbd_ep_get_trans_count(epn);

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  402046:	2803      	cmp	r0, #3
  402048:	d821      	bhi.n	40208e <_usb_d_dev_ep_read_req+0x56>
{
  40204a:	b430      	push	{r4, r5}
  40204c:	460c      	mov	r4, r1
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
  40204e:	b1c1      	cbz	r1, 402082 <_usb_d_dev_ep_read_req+0x4a>
	tmp = ((Usbhs *)hw)->USBHS_DEVEPTCFG[index];
  402050:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
		return -USB_ERR_PARAM;
	}

	if (!_usbd_ep_is_ctrl(epn)) {
  402054:	f411 5fc0 	tst.w	r1, #6144	; 0x1800
  402058:	d116      	bne.n	402088 <_usb_d_dev_ep_read_req+0x50>
	return (((Usbhs *)hw)->USBHS_DEVEPTISR[index] & USBHS_DEVEPTISR_RXSTPI) >> USBHS_DEVEPTISR_RXSTPI_Pos;
  40205a:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
		return -USB_ERR_FUNC;
	}

	if (!_usbd_ep_is_setup(epn)) {
  40205e:	f011 0f04 	tst.w	r1, #4
  402062:	d102      	bne.n	40206a <_usb_d_dev_ep_read_req+0x32>
		return ERR_NONE;
  402064:	2000      	movs	r0, #0
	memcpy(req_buf, (void *)ptr, 8);

	_usbd_ep_ack_setup(epn);

	return bytes;
}
  402066:	bc30      	pop	{r4, r5}
  402068:	4770      	bx	lr
	memcpy(req_buf, (void *)ptr, 8);
  40206a:	4d0b      	ldr	r5, [pc, #44]	; (402098 <_usb_d_dev_ep_read_req+0x60>)
  40206c:	eb05 35c0 	add.w	r5, r5, r0, lsl #15
  402070:	cd03      	ldmia	r5!, {r0, r1}
  402072:	6020      	str	r0, [r4, #0]
  402074:	6061      	str	r1, [r4, #4]
	((Usbhs *)hw)->USBHS_DEVEPTICR[index] = data;
  402076:	2104      	movs	r1, #4
  402078:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	return (hri_usbhs_get_DEVEPTISR_reg(USBHS, epn, USBHS_DEVEPTISR_BYCT_Msk) >> USBHS_DEVEPTISR_BYCT_Pos);
  40207c:	f3c2 500a 	ubfx	r0, r2, #20, #11
	return bytes;
  402080:	e7f1      	b.n	402066 <_usb_d_dev_ep_read_req+0x2e>
		return -USB_ERR_PARAM;
  402082:	f06f 0011 	mvn.w	r0, #17
  402086:	e7ee      	b.n	402066 <_usb_d_dev_ep_read_req+0x2e>
		return -USB_ERR_FUNC;
  402088:	f06f 0012 	mvn.w	r0, #18
  40208c:	e7eb      	b.n	402066 <_usb_d_dev_ep_read_req+0x2e>
		return -USB_ERR_PARAM;
  40208e:	f06f 0011 	mvn.w	r0, #17
}
  402092:	4770      	bx	lr
  402094:	40038000 	.word	0x40038000
  402098:	a0100000 	.word	0xa0100000

0040209c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
  40209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020a0:	b083      	sub	sp, #12
	Usbhs *               hw  = USBHS;
	uint8_t               epn = USB_EP_GET_N(trans->ep);
  4020a2:	7a06      	ldrb	r6, [r0, #8]
  4020a4:	f006 040f 	and.w	r4, r6, #15
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
  4020a8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  4020ac:	4b4a      	ldr	r3, [pc, #296]	; (4021d8 <_usb_d_dev_ep_trans+0x13c>)
  4020ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4020b2:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
  4020b4:	f240 33ff 	movw	r3, #1023	; 0x3ff
  4020b8:	429d      	cmp	r5, r3
  4020ba:	d001      	beq.n	4020c0 <_usb_d_dev_ep_trans+0x24>
  4020bc:	3d01      	subs	r5, #1
  4020be:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
	bool     is_ctrl        = _usb_d_dev_ep_is_ctrl(ept);
  4020c0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4020c4:	4a44      	ldr	r2, [pc, #272]	; (4021d8 <_usb_d_dev_ep_trans+0x13c>)
  4020c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4020ca:	f893 8027 	ldrb.w	r8, [r3, #39]	; 0x27

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
  4020ce:	2c03      	cmp	r4, #3
  4020d0:	d87e      	bhi.n	4021d0 <_usb_d_dev_ep_trans+0x134>
		return -USB_ERR_PARAM;
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
  4020d2:	f018 0f08 	tst.w	r8, #8
  4020d6:	d003      	beq.n	4020e0 <_usb_d_dev_ep_trans+0x44>
		return USB_HALTED;
  4020d8:	2002      	movs	r0, #2
#if (CONF_USB_D_DMA_ENABLE == 1)
	}
#endif

	return ERR_NONE;
}
  4020da:	b003      	add	sp, #12
  4020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020e0:	4607      	mov	r7, r0
	bool     size_n_aligned = (trans->size & size_mask);
  4020e2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	atomic_enter_critical(&flags);
  4020e6:	a801      	add	r0, sp, #4
  4020e8:	4b3c      	ldr	r3, [pc, #240]	; (4021dc <_usb_d_dev_ep_trans+0x140>)
  4020ea:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
  4020ec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4020f0:	4a39      	ldr	r2, [pc, #228]	; (4021d8 <_usb_d_dev_ep_trans+0x13c>)
  4020f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4020f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
  4020fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4020fe:	d14f      	bne.n	4021a0 <_usb_d_dev_ep_trans+0x104>
  402100:	b276      	sxtb	r6, r6
	ept->flags.bits.is_busy = 1;
  402102:	eb04 0984 	add.w	r9, r4, r4, lsl #2
  402106:	4b34      	ldr	r3, [pc, #208]	; (4021d8 <_usb_d_dev_ep_trans+0x13c>)
  402108:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  40210c:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
  402110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402114:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
	atomic_leave_critical(&flags);
  402118:	a801      	add	r0, sp, #4
  40211a:	4b31      	ldr	r3, [pc, #196]	; (4021e0 <_usb_d_dev_ep_trans+0x144>)
  40211c:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
  40211e:	683b      	ldr	r3, [r7, #0]
  402120:	f8c9 3014 	str.w	r3, [r9, #20]
	ept->trans_size  = trans->size;
  402124:	687b      	ldr	r3, [r7, #4]
  402126:	f8c9 3018 	str.w	r3, [r9, #24]
	ept->trans_count = 0;
  40212a:	2300      	movs	r3, #0
  40212c:	f8c9 301c 	str.w	r3, [r9, #28]
	ept->trans_load  = 0;
  402130:	f8c9 3020 	str.w	r3, [r9, #32]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
  402134:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir      = dir;
  402136:	f899 3027 	ldrb.w	r3, [r9, #39]	; 0x27
  40213a:	f362 13c7 	bfi	r3, r2, #7, #1
  40213e:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
	ept->flags.bits.need_zlp = (trans->zlp && (!size_n_aligned));
  402142:	ea15 0f0a 	tst.w	r5, sl
  402146:	bf0c      	ite	eq
  402148:	2301      	moveq	r3, #1
  40214a:	2300      	movne	r3, #0
  40214c:	7a7a      	ldrb	r2, [r7, #9]
  40214e:	2a00      	cmp	r2, #0
  402150:	bf0c      	ite	eq
  402152:	2300      	moveq	r3, #0
  402154:	f003 0301 	andne.w	r3, r3, #1
  402158:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
  40215c:	f363 1204 	bfi	r2, r3, #4, #1
  402160:	f889 2027 	strb.w	r2, [r9, #39]	; 0x27
	if (_usb_d_dev_ep_is_dma(epn)) {
  402164:	1e63      	subs	r3, r4, #1
  402166:	b2db      	uxtb	r3, r3
  402168:	2b05      	cmp	r3, #5
  40216a:	d91e      	bls.n	4021aa <_usb_d_dev_ep_trans+0x10e>
		if (!is_ctrl) {
  40216c:	f008 0307 	and.w	r3, r8, #7
  402170:	2b01      	cmp	r3, #1
  402172:	d004      	beq.n	40217e <_usb_d_dev_ep_trans+0xe2>
			hri_usbhs_set_DEVIMR_reg(hw, (USBHS_DEVIER_PEP_0 << epn));
  402174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402178:	40a3      	lsls	r3, r4
	((Usbhs *)hw)->USBHS_DEVIER = mask;
  40217a:	4a1a      	ldr	r2, [pc, #104]	; (4021e4 <_usb_d_dev_ep_trans+0x148>)
  40217c:	6193      	str	r3, [r2, #24]
  40217e:	4b19      	ldr	r3, [pc, #100]	; (4021e4 <_usb_d_dev_ep_trans+0x148>)
  402180:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] &= ~USBHS_DEVEPTCFG_AUTOSW;
  402184:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
  402188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40218c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
		if (dir) {
  402190:	2e00      	cmp	r6, #0
	((Usbhs *)hw)->USBHS_DEVEPTIER[index] = data;
  402192:	bfb4      	ite	lt
  402194:	2301      	movlt	r3, #1
  402196:	2302      	movge	r3, #2
  402198:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
	return ERR_NONE;
  40219c:	2000      	movs	r0, #0
  40219e:	e79c      	b.n	4020da <_usb_d_dev_ep_trans+0x3e>
		atomic_leave_critical(&flags);
  4021a0:	a801      	add	r0, sp, #4
  4021a2:	4b0f      	ldr	r3, [pc, #60]	; (4021e0 <_usb_d_dev_ep_trans+0x144>)
  4021a4:	4798      	blx	r3
		return USB_BUSY;
  4021a6:	2001      	movs	r0, #1
  4021a8:	e797      	b.n	4020da <_usb_d_dev_ep_trans+0x3e>
  4021aa:	4b0e      	ldr	r3, [pc, #56]	; (4021e4 <_usb_d_dev_ep_trans+0x148>)
  4021ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	((Usbhs *)hw)->USBHS_DEVEPTCFG[index] |= USBHS_DEVEPTCFG_AUTOSW;
  4021b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  4021b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  4021b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	struct _usb_d_dev_ep *ept = &dev_inst.ep[epn];
  4021bc:	3401      	adds	r4, #1
  4021be:	eb04 0484 	add.w	r4, r4, r4, lsl #2
		_usb_d_dev_dma_next(ept);
  4021c2:	4805      	ldr	r0, [pc, #20]	; (4021d8 <_usb_d_dev_ep_trans+0x13c>)
  4021c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
  4021c8:	4b07      	ldr	r3, [pc, #28]	; (4021e8 <_usb_d_dev_ep_trans+0x14c>)
  4021ca:	4798      	blx	r3
	return ERR_NONE;
  4021cc:	2000      	movs	r0, #0
  4021ce:	e784      	b.n	4020da <_usb_d_dev_ep_trans+0x3e>
		return -USB_ERR_PARAM;
  4021d0:	f06f 0011 	mvn.w	r0, #17
  4021d4:	e781      	b.n	4020da <_usb_d_dev_ep_trans+0x3e>
  4021d6:	bf00      	nop
  4021d8:	204000bc 	.word	0x204000bc
  4021dc:	004005dd 	.word	0x004005dd
  4021e0:	004005eb 	.word	0x004005eb
  4021e4:	40038000 	.word	0x40038000
  4021e8:	00401985 	.word	0x00401985

004021ec <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
  4021ec:	4b09      	ldr	r3, [pc, #36]	; (402214 <_usb_d_dev_register_ep_callback+0x28>)
  4021ee:	2900      	cmp	r1, #0
  4021f0:	bf08      	it	eq
  4021f2:	4619      	moveq	r1, r3

	if (type == USB_D_DEV_EP_CB_SETUP) {
  4021f4:	b120      	cbz	r0, 402200 <_usb_d_dev_register_ep_callback+0x14>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
  4021f6:	2801      	cmp	r0, #1
  4021f8:	d005      	beq.n	402206 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
  4021fa:	2802      	cmp	r0, #2
  4021fc:	d006      	beq.n	40220c <_usb_d_dev_register_ep_callback+0x20>
  4021fe:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
  402200:	4b05      	ldr	r3, [pc, #20]	; (402218 <_usb_d_dev_register_ep_callback+0x2c>)
  402202:	6099      	str	r1, [r3, #8]
  402204:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
  402206:	4b04      	ldr	r3, [pc, #16]	; (402218 <_usb_d_dev_register_ep_callback+0x2c>)
  402208:	60d9      	str	r1, [r3, #12]
  40220a:	4770      	bx	lr
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
  40220c:	4b02      	ldr	r3, [pc, #8]	; (402218 <_usb_d_dev_register_ep_callback+0x2c>)
  40220e:	6119      	str	r1, [r3, #16]
	}
}
  402210:	e7f5      	b.n	4021fe <_usb_d_dev_register_ep_callback+0x12>
  402212:	bf00      	nop
  402214:	00401891 	.word	0x00401891
  402218:	204000bc 	.word	0x204000bc

0040221c <_dma_set_destination_address>:
}

static inline void hri_xdmac_write_CDA_reg(const void *const hw, uint8_t submodule_index, hri_xdmac_cda_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDA = data;
  40221c:	0180      	lsls	r0, r0, #6
  40221e:	4b02      	ldr	r3, [pc, #8]	; (402228 <_dma_set_destination_address+0xc>)
  402220:	5019      	str	r1, [r3, r0]
int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
	hri_xdmac_write_CDA_reg(XDMAC, channel, (uint32_t)dst);

	return ERR_NONE;
}
  402222:	2000      	movs	r0, #0
  402224:	4770      	bx	lr
  402226:	bf00      	nop
  402228:	40078064 	.word	0x40078064

0040222c <_dma_set_source_address>:
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CSA = data;
  40222c:	0180      	lsls	r0, r0, #6
  40222e:	4b02      	ldr	r3, [pc, #8]	; (402238 <_dma_set_source_address+0xc>)
  402230:	5019      	str	r1, [r3, r0]
int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
	hri_xdmac_write_CSA_reg(XDMAC, channel, (uint32_t)src);

	return ERR_NONE;
}
  402232:	2000      	movs	r0, #0
  402234:	4770      	bx	lr
  402236:	bf00      	nop
  402238:	40078060 	.word	0x40078060

0040223c <_dma_srcinc_enable>:

int32_t _dma_srcinc_enable(const uint8_t channel, const bool enable)
{
	if (!enable && (hri_xdmac_read_CC_DWIDTH_bf(XDMAC, channel) != XDMAC_CC_DWIDTH_WORD_Val)) {
  40223c:	460b      	mov	r3, r1
  40223e:	b991      	cbnz	r1, 402266 <_dma_srcinc_enable+0x2a>
}

static inline hri_xdmac_cc_reg_t hri_xdmac_read_CC_DWIDTH_bf(const void *const hw, uint8_t submodule_index)
{
	uint32_t tmp;
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  402240:	0181      	lsls	r1, r0, #6
  402242:	4a0f      	ldr	r2, [pc, #60]	; (402280 <_dma_srcinc_enable+0x44>)
  402244:	5852      	ldr	r2, [r2, r1]
	tmp = (tmp & XDMAC_CC_DWIDTH_Msk) >> XDMAC_CC_DWIDTH_Pos;
  402246:	f3c2 22c1 	ubfx	r2, r2, #11, #2
  40224a:	2a02      	cmp	r2, #2
  40224c:	d00b      	beq.n	402266 <_dma_srcinc_enable+0x2a>

static inline void hri_xdmac_write_CC_SAM_bf(const void *const hw, uint8_t submodule_index, hri_xdmac_cc_reg_t data)
{
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  40224e:	4b0d      	ldr	r3, [pc, #52]	; (402284 <_dma_srcinc_enable+0x48>)
  402250:	440b      	add	r3, r1
  402252:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	tmp &= ~XDMAC_CC_SAM_Msk;
	tmp |= XDMAC_CC_SAM(data);
  402254:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = tmp;
  402258:	679a      	str	r2, [r3, #120]	; 0x78
static inline void hri_xdmac_write_CDS_MSP_SDS_MSP_bf(const void *const hw, uint8_t submodule_index,
                                                      hri_xdmac_cds_msp_reg_t data)
{
	uint32_t tmp;
	XDMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP;
  40225a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
	tmp &= ~XDMAC_CDS_MSP_SDS_MSP_Msk;
	tmp |= XDMAC_CDS_MSP_SDS_MSP(data);
  40225c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402260:	430a      	orrs	r2, r1
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CDS_MSP = tmp;
  402262:	67da      	str	r2, [r3, #124]	; 0x7c
  402264:	e009      	b.n	40227a <_dma_srcinc_enable+0x3e>
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  402266:	0180      	lsls	r0, r0, #6
  402268:	4a05      	ldr	r2, [pc, #20]	; (402280 <_dma_srcinc_enable+0x44>)
  40226a:	5811      	ldr	r1, [r2, r0]
	tmp &= ~XDMAC_CC_SAM_Msk;
  40226c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
	tmp |= XDMAC_CC_SAM(data);
  402270:	041b      	lsls	r3, r3, #16
  402272:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  402276:	430b      	orrs	r3, r1
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC = tmp;
  402278:	5013      	str	r3, [r2, r0]
	} else {
		hri_xdmac_write_CC_SAM_bf(XDMAC, channel, enable);
	}

	return ERR_NONE;
}
  40227a:	2000      	movs	r0, #0
  40227c:	4770      	bx	lr
  40227e:	bf00      	nop
  402280:	40078078 	.word	0x40078078
  402284:	40078000 	.word	0x40078000

00402288 <_dma_set_data_amount>:
	tmp = ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CC;
  402288:	0180      	lsls	r0, r0, #6
  40228a:	4a04      	ldr	r2, [pc, #16]	; (40229c <_dma_set_data_amount+0x14>)
  40228c:	4402      	add	r2, r0
  40228e:	6f93      	ldr	r3, [r2, #120]	; 0x78
	tmp = (tmp & XDMAC_CC_DWIDTH(mask)) >> XDMAC_CC_DWIDTH_Pos;
  402290:	f3c3 23c1 	ubfx	r3, r3, #11, #2
int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
	uint8_t width;

	width = hri_xdmac_get_CC_DWIDTH_bf(XDMAC, channel, 0x3);
	hri_xdmac_write_CUBC_reg(XDMAC, channel, amount >> width);
  402294:	40d9      	lsrs	r1, r3
	((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CUBC = data;
  402296:	6711      	str	r1, [r2, #112]	; 0x70

	return ERR_NONE;
}
  402298:	2000      	movs	r0, #0
  40229a:	4770      	bx	lr
  40229c:	40078000 	.word	0x40078000

004022a0 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
	hri_xdmac_set_GS_reg(XDMAC, 1 << channel);
  4022a0:	2301      	movs	r3, #1
  4022a2:	fa03 f000 	lsl.w	r0, r3, r0
	((Xdmac *)hw)->XDMAC_GD = XDMAC_GS_ST23;
}

static inline void hri_xdmac_set_GS_reg(const void *const hw, hri_xdmac_gs_reg_t mask)
{
	((Xdmac *)hw)->XDMAC_GE = mask;
  4022a6:	4b03      	ldr	r3, [pc, #12]	; (4022b4 <_dma_enable_transaction+0x14>)
  4022a8:	61d8      	str	r0, [r3, #28]

	if (software_trigger) {
  4022aa:	b101      	cbz	r1, 4022ae <_dma_enable_transaction+0xe>
}

static inline void hri_xdmac_write_GSWR_reg(const void *const hw, hri_xdmac_gswr_reg_t data)
{
	XDMAC_CRITICAL_SECTION_ENTER();
	((Xdmac *)hw)->XDMAC_GSWR = data;
  4022ac:	6398      	str	r0, [r3, #56]	; 0x38
		hri_xdmac_write_GSWR_reg(XDMAC, 1 << channel);
	}

	return ERR_NONE;
}
  4022ae:	2000      	movs	r0, #0
  4022b0:	4770      	bx	lr
  4022b2:	bf00      	nop
  4022b4:	40078000 	.word	0x40078000

004022b8 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
	*resource = &_resources[channel];
  4022b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  4022bc:	4b02      	ldr	r3, [pc, #8]	; (4022c8 <_dma_get_channel_resource+0x10>)
  4022be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4022c2:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
  4022c4:	2000      	movs	r0, #0
  4022c6:	4770      	bx	lr
  4022c8:	20400120 	.word	0x20400120

004022cc <XDMAC_Handler>:
	return tmp;
}

static inline hri_xdmac_gis_reg_t hri_xdmac_read_GIS_reg(const void *const hw)
{
	return ((Xdmac *)hw)->XDMAC_GIS;
  4022cc:	4b18      	ldr	r3, [pc, #96]	; (402330 <XDMAC_Handler+0x64>)
  4022ce:	6998      	ldr	r0, [r3, #24]

	pend = hri_xdmac_read_GIS_reg(XDMAC);

	/* Get the first pending channel ID */
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
		if ((pend >> i) & 1) {
  4022d0:	f010 0f01 	tst.w	r0, #1
  4022d4:	d11e      	bne.n	402314 <XDMAC_Handler+0x48>
  4022d6:	2301      	movs	r3, #1
  4022d8:	b2d9      	uxtb	r1, r3
  4022da:	fa20 f203 	lsr.w	r2, r0, r3
  4022de:	f012 0f01 	tst.w	r2, #1
  4022e2:	d103      	bne.n	4022ec <XDMAC_Handler+0x20>
  4022e4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  4022e6:	2b18      	cmp	r3, #24
  4022e8:	d1f6      	bne.n	4022d8 <XDMAC_Handler+0xc>
  4022ea:	4770      	bx	lr
			channel = i;
  4022ec:	b25b      	sxtb	r3, r3
			break;
		}
	}

	if (channel < 0) {
  4022ee:	2b00      	cmp	r3, #0
  4022f0:	db0f      	blt.n	402312 <XDMAC_Handler+0x46>
{
  4022f2:	b510      	push	{r4, lr}
		return;
	}

	tmp_resource = &_resources[channel];
  4022f4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  4022f8:	4a0e      	ldr	r2, [pc, #56]	; (402334 <XDMAC_Handler+0x68>)
  4022fa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
	return ((Xdmac *)hw)->XDMAC_CHID[submodule_index].XDMAC_CIS;
  4022fe:	0189      	lsls	r1, r1, #6
  402300:	4a0d      	ldr	r2, [pc, #52]	; (402338 <XDMAC_Handler+0x6c>)
  402302:	5852      	ldr	r2, [r2, r1]
	status       = hri_xdmac_read_CIS_reg(XDMAC, channel);

	if (status & (XDMAC_CIS_RBEIS | XDMAC_CIS_WBEIS | XDMAC_CIS_ROIS)) {
  402304:	f012 0f70 	tst.w	r2, #112	; 0x70
  402308:	d107      	bne.n	40231a <XDMAC_Handler+0x4e>
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (status & XDMAC_CIS_BIS) {
  40230a:	f012 0f01 	tst.w	r2, #1
  40230e:	d107      	bne.n	402320 <XDMAC_Handler+0x54>
  402310:	bd10      	pop	{r4, pc}
  402312:	4770      	bx	lr
	for (uint8_t i = 0; i < DMAC_CH_NUM; i++) {
  402314:	2100      	movs	r1, #0
			channel = i;
  402316:	460b      	mov	r3, r1
  402318:	e7eb      	b.n	4022f2 <XDMAC_Handler+0x26>
		tmp_resource->dma_cb.error(tmp_resource);
  40231a:	6843      	ldr	r3, [r0, #4]
  40231c:	4798      	blx	r3
  40231e:	bd10      	pop	{r4, pc}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
  402320:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  402324:	4b03      	ldr	r3, [pc, #12]	; (402334 <XDMAC_Handler+0x68>)
  402326:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  40232a:	4798      	blx	r3
  40232c:	e7f0      	b.n	402310 <XDMAC_Handler+0x44>
  40232e:	bf00      	nop
  402330:	40078000 	.word	0x40078000
  402334:	20400120 	.word	0x20400120
  402338:	4007805c 	.word	0x4007805c

0040233c <main>:
#include <atmel_start.h>
#include "Glue.h"

int main(void)
{
  40233c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40233e:	4b07      	ldr	r3, [pc, #28]	; (40235c <main+0x20>)
  402340:	4798      	blx	r3
	tmp = ((Pio *)hw)->PIO_ODSR;
  402342:	4907      	ldr	r1, [pc, #28]	; (402360 <main+0x24>)
  402344:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	tmp &= mask;
  402346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
{
	uint32_t    bits_clear, bits_set;
	void *const hw = port_to_reg(port);

	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
	bits_set   = (~bits_clear) & mask;
  40234a:	43da      	mvns	r2, r3
  40234c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
	((Pio *)hw)->PIO_SODR = mask;
  402350:	630a      	str	r2, [r1, #48]	; 0x30
	((Pio *)hw)->PIO_CODR = mask;
  402352:	634b      	str	r3, [r1, #52]	; 0x34
  402354:	4b03      	ldr	r3, [pc, #12]	; (402364 <main+0x28>)
	while(1)
	{
		gpio_toggle_pin_level(LED0);
		//delay_ms(1);
		uint8_t test;
		for(uint32_t i = 0; i < 150000000; i++)
  402356:	3b01      	subs	r3, #1
  402358:	d1fd      	bne.n	402356 <main+0x1a>
  40235a:	e7f3      	b.n	402344 <main+0x8>
  40235c:	004001ad 	.word	0x004001ad
  402360:	400e1200 	.word	0x400e1200
  402364:	08f0d180 	.word	0x08f0d180

00402368 <__libc_init_array>:
  402368:	b570      	push	{r4, r5, r6, lr}
  40236a:	4e0d      	ldr	r6, [pc, #52]	; (4023a0 <__libc_init_array+0x38>)
  40236c:	4c0d      	ldr	r4, [pc, #52]	; (4023a4 <__libc_init_array+0x3c>)
  40236e:	1ba4      	subs	r4, r4, r6
  402370:	10a4      	asrs	r4, r4, #2
  402372:	2500      	movs	r5, #0
  402374:	42a5      	cmp	r5, r4
  402376:	d109      	bne.n	40238c <__libc_init_array+0x24>
  402378:	4e0b      	ldr	r6, [pc, #44]	; (4023a8 <__libc_init_array+0x40>)
  40237a:	4c0c      	ldr	r4, [pc, #48]	; (4023ac <__libc_init_array+0x44>)
  40237c:	f000 f8e8 	bl	402550 <_init>
  402380:	1ba4      	subs	r4, r4, r6
  402382:	10a4      	asrs	r4, r4, #2
  402384:	2500      	movs	r5, #0
  402386:	42a5      	cmp	r5, r4
  402388:	d105      	bne.n	402396 <__libc_init_array+0x2e>
  40238a:	bd70      	pop	{r4, r5, r6, pc}
  40238c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402390:	4798      	blx	r3
  402392:	3501      	adds	r5, #1
  402394:	e7ee      	b.n	402374 <__libc_init_array+0xc>
  402396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40239a:	4798      	blx	r3
  40239c:	3501      	adds	r5, #1
  40239e:	e7f2      	b.n	402386 <__libc_init_array+0x1e>
  4023a0:	0040255c 	.word	0x0040255c
  4023a4:	0040255c 	.word	0x0040255c
  4023a8:	0040255c 	.word	0x0040255c
  4023ac:	00402560 	.word	0x00402560

004023b0 <memcpy>:
  4023b0:	b510      	push	{r4, lr}
  4023b2:	1e43      	subs	r3, r0, #1
  4023b4:	440a      	add	r2, r1
  4023b6:	4291      	cmp	r1, r2
  4023b8:	d100      	bne.n	4023bc <memcpy+0xc>
  4023ba:	bd10      	pop	{r4, pc}
  4023bc:	f811 4b01 	ldrb.w	r4, [r1], #1
  4023c0:	f803 4f01 	strb.w	r4, [r3, #1]!
  4023c4:	e7f7      	b.n	4023b6 <memcpy+0x6>

004023c6 <memset>:
  4023c6:	4402      	add	r2, r0
  4023c8:	4603      	mov	r3, r0
  4023ca:	4293      	cmp	r3, r2
  4023cc:	d100      	bne.n	4023d0 <memset+0xa>
  4023ce:	4770      	bx	lr
  4023d0:	f803 1b01 	strb.w	r1, [r3], #1
  4023d4:	e7f9      	b.n	4023ca <memset+0x4>
  4023d6:	0000      	movs	r0, r0
  4023d8:	682f2e2e 	.word	0x682f2e2e
  4023dc:	732f6c61 	.word	0x732f6c61
  4023e0:	682f6372 	.word	0x682f6372
  4023e4:	645f6c61 	.word	0x645f6c61
  4023e8:	735f6361 	.word	0x735f6361
  4023ec:	2e636e79 	.word	0x2e636e79
  4023f0:	00000063 	.word	0x00000063
  4023f4:	682f2e2e 	.word	0x682f2e2e
  4023f8:	732f6c61 	.word	0x732f6c61
  4023fc:	682f6372 	.word	0x682f6372
  402400:	695f6c61 	.word	0x695f6c61
  402404:	6d5f6332 	.word	0x6d5f6332
  402408:	6e79735f 	.word	0x6e79735f
  40240c:	00632e63 	.word	0x00632e63
  402410:	682f2e2e 	.word	0x682f2e2e
  402414:	732f6c61 	.word	0x732f6c61
  402418:	682f6372 	.word	0x682f6372
  40241c:	735f6c61 	.word	0x735f6c61
  402420:	6d5f6970 	.word	0x6d5f6970
  402424:	616d645f 	.word	0x616d645f
  402428:	0000632e 	.word	0x0000632e
  40242c:	682f2e2e 	.word	0x682f2e2e
  402430:	732f6c61 	.word	0x732f6c61
  402434:	682f6372 	.word	0x682f6372
  402438:	755f6c61 	.word	0x755f6c61
  40243c:	74726173 	.word	0x74726173
  402440:	7973615f 	.word	0x7973615f
  402444:	632e636e 	.word	0x632e636e
  402448:	00000000 	.word	0x00000000
  40244c:	682f2e2e 	.word	0x682f2e2e
  402450:	732f6c61 	.word	0x732f6c61
  402454:	682f6372 	.word	0x682f6372
  402458:	755f6c61 	.word	0x755f6c61
  40245c:	74726173 	.word	0x74726173
  402460:	6e79735f 	.word	0x6e79735f
  402464:	00632e63 	.word	0x00632e63
  402468:	682f2e2e 	.word	0x682f2e2e
  40246c:	752f6c61 	.word	0x752f6c61
  402470:	736c6974 	.word	0x736c6974
  402474:	6372732f 	.word	0x6372732f
  402478:	6974752f 	.word	0x6974752f
  40247c:	725f736c 	.word	0x725f736c
  402480:	62676e69 	.word	0x62676e69
  402484:	65666675 	.word	0x65666675
  402488:	00632e72 	.word	0x00632e72
  40248c:	682f2e2e 	.word	0x682f2e2e
  402490:	642f6c70 	.word	0x642f6c70
  402494:	682f6361 	.word	0x682f6361
  402498:	645f6c70 	.word	0x645f6c70
  40249c:	632e6361 	.word	0x632e6361
  4024a0:	00000000 	.word	0x00000000
  4024a4:	682f2e2e 	.word	0x682f2e2e
  4024a8:	702f6c70 	.word	0x702f6c70
  4024ac:	682f6f69 	.word	0x682f6f69
  4024b0:	705f6c70 	.word	0x705f6c70
  4024b4:	655f6f69 	.word	0x655f6f69
  4024b8:	632e7478 	.word	0x632e7478
  4024bc:	00000000 	.word	0x00000000

004024c0 <spi_regs>:
  4024c0:	00000001 80000000 00000001 04960c82     ................
  4024d0:	0000ffff                                ....

004024d4 <_i2cm_sync_cfgs>:
  4024d4:	40018000 00000020 00000000 00000000     ...@ ...........
  4024e4:	0002baba 000249f0 4001c000 00000020     .....I.....@ ...
	...
  4024fc:	0002baba 000249f0 682f2e2e 742f6c70     .....I..../hpl/t
  40250c:	73686977 6c70682f 6977745f 632e7368     wihs/hpl_twihs.c
  40251c:	00000000                                ....

00402520 <_uarts>:
  402520:	00000000 00000800 00000051 00000004     ........Q.......
  402530:	00000800 00000051 682f2e2e 752f6c70     ....Q...../hpl/u
  402540:	2f747261 5f6c7068 74726175 0000632e     art/hpl_uart.c..

00402550 <_init>:
  402550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402552:	bf00      	nop
  402554:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402556:	bc08      	pop	{r3}
  402558:	469e      	mov	lr, r3
  40255a:	4770      	bx	lr

0040255c <__init_array_start>:
  40255c:	00400165 	.word	0x00400165

00402560 <_fini>:
  402560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402562:	bf00      	nop
  402564:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402566:	bc08      	pop	{r3}
  402568:	469e      	mov	lr, r3
  40256a:	4770      	bx	lr

0040256c <__fini_array_start>:
  40256c:	00400141 	.word	0x00400141
